{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"Sale.sol\": {\r\n      \"content\": \"/**\\r\\n * @title SALE\\r\\n * @dev SALE.sol contract\\r\\n *\\r\\n * @author - <USDFI TRUST>\\r\\n * for the USDFI Trust\\r\\n *\\r\\n * SPDX-License-Identifier: Business Source License 1.1\\r\\n *\\r\\n **/\\r\\n\\r\\npragma solidity =0.8.19;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IReferrals.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./ITrackingToken.sol\\\";\\r\\nimport \\\"./IPriceOracle.sol\\\";\\r\\nimport \\\"./ReentrancyGuard.sol\\\";\\r\\n\\r\\n\\r\\nlibrary LockupLinear {\\r\\n    struct CreateWithDurations {\\r\\n        address sender;\\r\\n        address recipient;\\r\\n        uint128 totalAmount;\\r\\n        IERC20 asset;\\r\\n        bool cancelable;\\r\\n        Durations durations;\\r\\n        Broker broker;\\r\\n    }\\r\\n\\r\\n    struct Durations {\\r\\n        uint40 cliff;\\r\\n        uint40 total;\\r\\n    }\\r\\n\\r\\n    struct Broker {\\r\\n        address account;\\r\\n        uint256 fee;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface ISablierV2LockupLinear {\\r\\n    function createWithDurations(LockupLinear.CreateWithDurations calldata params) external returns (uint256 streamId);\\r\\n\\r\\n    function nextStreamId() external view returns (uint256 nextStreamId);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256 balanceof);\\r\\n\\r\\n    function ownerOf(uint256 _id) external view returns (address owner);\\r\\n}\\r\\n\\r\\ncontract SALE is Ownable, ReentrancyGuard{\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Address for address;\\r\\n\\r\\n    IERC20 public constant STABLE = IERC20(0xa3870fbBeb730BA99e4107051612af3465CA9F5e);\\r\\n    IERC20 public constant USDT = IERC20(0x55d398326f99059fF775485246999027B3197955);\\r\\n    IERC20 public constant TrackingToken = IERC20(0x967aC64265994e9d9c2c5345b164a7c476C91923);\\r\\n\\r\\n    uint256 public constant DIVISOR = 100000;\\r\\n    uint256 public securePrice = 10e18;\\r\\n\\r\\n    address public constant lockupLinear = 0x3FE4333f62A75c2a85C8211c6AeFd1b9Bfde6e51;\\r\\n    address public constant referralContract = 0xA015Dc8619Ad6992c6E9fa3c8188FCc06b6E3BcE;\\r\\n    address public constant trackingToken = 0x967aC64265994e9d9c2c5345b164a7c476C91923;\\r\\n    address public priceOracle = 0x3a564D09e5da57Fc991602F0195073D90f2cD145;\\r\\n    \\r\\n    struct Vaults {\\r\\n        address mainVault;\\r\\n        address teamVault;\\r\\n        address saleVault;\\r\\n        address marketingVault;\\r\\n        address buyVault;\\r\\n        address stableVault;\\r\\n    }\\r\\n\\r\\n    Vaults public vaults;\\r\\n\\r\\n    mapping(address => uint256) public earnedRefs;\\r\\n\\r\\n    event RefRewardPaid(address indexed user, uint256 reward);\\r\\n    event StableBought(address indexed buyer, uint256 usdtAmount, uint256 stableAmount, uint256 id);\\r\\n\\r\\n    struct PackageSettings {\\r\\n        uint256 mainVaultPercent;\\r\\n        uint256 teamVaultPercent;\\r\\n        uint256 saleVaultPercent;\\r\\n        uint256 marketingVaultPercent;\\r\\n        uint256 buyVaultPercent;\\r\\n        uint256[] refPercent;\\r\\n        uint256 referralFee;\\r\\n        uint40 cliff;\\r\\n        uint40 endTime;\\r\\n        uint256 boost;\\r\\n        bool activ;\\r\\n    }\\r\\n\\r\\n    PackageSettings[10] public packageSettings;\\r\\n\\r\\n    constructor(address _owner) Ownable(_owner) {}\\r\\n\\r\\n    function createPackage(uint256 _id, PackageSettings memory pkg) public onlyOwner {\\r\\n        require(\\r\\n            pkg.mainVaultPercent + pkg.teamVaultPercent + pkg.saleVaultPercent + pkg.marketingVaultPercent + pkg.buyVaultPercent + pkg.referralFee == DIVISOR,\\r\\n            \\\"not 100%\\\"\\r\\n        );\\r\\n        packageSettings[_id] = pkg;\\r\\n    }\\r\\n\\r\\n    function setVaults(Vaults memory _vaults) public onlyOwner {\\r\\n        vaults = _vaults;\\r\\n    }\\r\\n\\r\\n    function setNewPriceOracle(address _priceOracle) public onlyOwner {\\r\\n        priceOracle = _priceOracle;\\r\\n    }\\r\\n\\r\\n    function setNewSecurePrice(uint256 _securePrice) public onlyOwner {\\r\\n        securePrice = _securePrice;\\r\\n    }\\r\\n\\r\\n    function buyPackage(uint256 _usdtAmount, uint256 _id, address _sponsor) public nonReentrant {\\r\\n        setNewRef(msg.sender, _sponsor);\\r\\n        buyStable(_usdtAmount, _id);\\r\\n    }\\r\\n\\r\\n    function buyStable(uint256 _usdtAmount, uint256 _id) internal {\\r\\n        PackageSettings memory pkg = packageSettings[_id];\\r\\n        require(pkg.activ == true,\\\"not activ\\\");\\r\\n        require(IPriceOracle(priceOracle).price() >= securePrice,\\\"under secure price\\\");\\r\\n\\r\\n        USDT.safeTransferFrom(msg.sender, address(this), _usdtAmount);\\r\\n        ITrackingToken(trackingToken).mint(address(this), _usdtAmount);\\r\\n\\r\\n        uint256 stableAmount = (_usdtAmount * 1e18 * pkg.boost) / (IPriceOracle(priceOracle).price() * DIVISOR);\\r\\n\\r\\n        _distributeFunds(_usdtAmount, pkg);\\r\\n\\r\\n        address ref = IReferrals(referralContract).getSponsor(msg.sender);\\r\\n        _distributeReferralReward(_usdtAmount * pkg.referralFee / DIVISOR, ref, pkg.refPercent);\\r\\n\\r\\n        createLockupLinearStream(stableAmount, pkg.cliff, pkg.endTime);\\r\\n        emit StableBought(msg.sender, _usdtAmount, stableAmount, _id);\\r\\n    }\\r\\n\\r\\n    function _distributeFunds(uint256 _amount, PackageSettings memory pkg) internal {\\r\\n        address[5] memory _vaultAddresses = [vaults.mainVault, vaults.teamVault, vaults.saleVault, vaults.marketingVault, vaults.buyVault];\\r\\n        uint256[5] memory _vaultPercents = [pkg.mainVaultPercent, pkg.teamVaultPercent, pkg.saleVaultPercent, pkg.marketingVaultPercent, pkg.buyVaultPercent];\\r\\n\\r\\n        for (uint256 i = 0; i < _vaultAddresses.length; i++) {\\r\\n            uint256 transferAmount = (_amount * _vaultPercents[i]) / DIVISOR;\\r\\n            USDT.safeTransfer(_vaultAddresses[i], transferAmount);\\r\\n            TrackingToken.safeTransfer(_vaultAddresses[i], transferAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _distributeReferralReward(uint256 _usdtAmount, address _ref, uint256[] memory _refPercents) internal {\\r\\n        uint256 reward = _usdtAmount;\\r\\n        uint256 remainingReward = reward;\\r\\n\\r\\n        for (uint256 i = 0; i < _refPercents.length && _ref != IReferrals(referralContract).membersList(0); i++) {\\r\\n            uint256 refReward = (reward * _refPercents[i]) / DIVISOR;\\r\\n            remainingReward -= refReward;\\r\\n\\r\\n            USDT.safeTransfer(_ref, refReward);\\r\\n            TrackingToken.safeTransfer(_ref, refReward);\\r\\n            earnedRefs[_ref] += refReward;\\r\\n\\r\\n            emit RefRewardPaid(_ref, refReward);\\r\\n            _ref = IReferrals(referralContract).getSponsor(_ref);\\r\\n        }\\r\\n\\r\\n        if (remainingReward > 0) {\\r\\n            USDT.safeTransfer(vaults.teamVault, remainingReward);\\r\\n            TrackingToken.safeTransfer(vaults.teamVault, remainingReward);\\r\\n            emit RefRewardPaid(vaults.teamVault, remainingReward);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function createLockupLinearStream(uint256 _stableAmount, uint40 _cliff, uint40 _endTime) internal returns (uint256 streamId) {\\r\\n        STABLE.transferFrom(vaults.stableVault, address(this), _stableAmount);\\r\\n        STABLE.approve(address(lockupLinear), _stableAmount);\\r\\n\\r\\n        LockupLinear.CreateWithDurations memory params = LockupLinear.CreateWithDurations({\\r\\n            sender: msg.sender,\\r\\n            recipient: msg.sender,\\r\\n            totalAmount: uint128(_stableAmount),\\r\\n            asset: STABLE,\\r\\n            cancelable: false,\\r\\n            durations: LockupLinear.Durations({cliff: _cliff, total: _endTime}),\\r\\n            broker: LockupLinear.Broker({account: address(0), fee: 0})\\r\\n        });\\r\\n\\r\\n        streamId = ISablierV2LockupLinear(lockupLinear).createWithDurations(params);\\r\\n    }\\r\\n\\r\\n    function setNewRef(address _account, address _sponsor) internal {\\r\\n        if (!IReferrals(referralContract).isMember(_account) && IReferrals(referralContract).isMember(_sponsor)) {\\r\\n            IReferrals(referralContract).addMember(_account, _sponsor);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getNFTsOfOwner(address owner) external view returns(uint256[] memory) {\\r\\n        uint256 totalNFTs = ISablierV2LockupLinear(lockupLinear).nextStreamId() - 1;\\r\\n        uint256[] memory ownedNFTs = new uint256[](ISablierV2LockupLinear(lockupLinear).balanceOf(owner));\\r\\n    \\r\\n        uint256 counter = 0;\\r\\n        for (uint256 i = 1; i <= totalNFTs; i++) {\\r\\n          if (ISablierV2LockupLinear(lockupLinear).ownerOf(i) == owner) {\\r\\n              ownedNFTs[counter] = i;\\r\\n               counter++;\\r\\n           }\\r\\n      }\\r\\n    \\r\\n     return ownedNFTs;\\r\\n    }\\r\\n\\r\\n    function getStablePrice() external view returns (uint256) {\\r\\n        uint256 price = IPriceOracle(priceOracle).price();\\r\\n        return price;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    /**\\r\\n     * @dev Unauthorized reentrant call.\\r\\n     */\\r\\n    error ReentrancyGuardReentrantCall();\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _nonReentrantBefore();\\r\\n        _;\\r\\n        _nonReentrantAfter();\\r\\n    }\\r\\n\\r\\n    function _nonReentrantBefore() private {\\r\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\r\\n        if (_status == _ENTERED) {\\r\\n            revert ReentrancyGuardReentrantCall();\\r\\n        }\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n    }\\r\\n\\r\\n    function _nonReentrantAfter() private {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\r\\n     * `nonReentrant` function in the call stack.\\r\\n     */\\r\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\r\\n        return _status == _ENTERED;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"IPriceOracle.sol\": {\r\n      \"content\": \"/**\\r\\n * @title Interface Price Oracle \\r\\n * @dev IPriceOracle.sol contract\\r\\n *\\r\\n * @author - <USDFI TRUST>\\r\\n * for the USDFI Trust\\r\\n *\\r\\n * SPDX-License-Identifier: Business Source License 1.1\\r\\n *\\r\\n **/\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\ninterface IPriceOracle {\\r\\n    function price() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"ITrackingToken.sol\": {\r\n      \"content\": \"/**\\r\\n * @title Interface Tracking Token \\r\\n * @dev TrackingToken.sol contract\\r\\n *\\r\\n * @author - <USDFI TRUST>\\r\\n * for the USDFI Trust\\r\\n *\\r\\n * SPDX-License-Identifier: Business Source License 1.1\\r\\n *\\r\\n **/\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\ninterface ITrackingToken {\\r\\n    function mint(address _to, uint256 _amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport {Context} from \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * The initial owner is set to the address provided by the deployer. This can\\r\\n * later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    /**\\r\\n     * @dev The caller account is not authorized to perform an operation.\\r\\n     */\\r\\n    error OwnableUnauthorizedAccount(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\r\\n     */\\r\\n    error OwnableInvalidOwner(address owner);\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\r\\n     */\\r\\n    constructor(address initialOwner) {\\r\\n        _transferOwnership(initialOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        if (owner() != _msgSender()) {\\r\\n            revert OwnableUnauthorizedAccount(_msgSender());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby disabling any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        if (newOwner == address(0)) {\\r\\n            revert OwnableInvalidOwner(address(0));\\r\\n        }\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity =0.8.19;\\r\\n\\r\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\r\\nimport {IERC20Permit} from \\\"./IERC20Permit.sol\\\";\\r\\nimport {Address} from \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    /**\\r\\n     * @dev An operation with an ERC20 token failed.\\r\\n     */\\r\\n    error SafeERC20FailedOperation(address token);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failed `decreaseAllowance` request.\\r\\n     */\\r\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\r\\n     * non-reverting calls are assumed to be successful.\\r\\n     */\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\r\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\r\\n     */\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\r\\n     * non-reverting calls are assumed to be successful.\\r\\n     */\\r\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n        forceApprove(token, spender, oldAllowance + value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no value,\\r\\n     * non-reverting calls are assumed to be successful.\\r\\n     */\\r\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\r\\n        unchecked {\\r\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\r\\n            if (currentAllowance < requestedDecrease) {\\r\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\r\\n            }\\r\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\r\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\r\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\r\\n     */\\r\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\r\\n\\r\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\r\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\r\\n            _callOptionalReturn(token, approvalCall);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\r\\n     * Revert on invalid signature.\\r\\n     */\\r\\n    function safePermit(\\r\\n        IERC20Permit token,\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) internal {\\r\\n        uint256 nonceBefore = token.nonces(owner);\\r\\n        token.permit(owner, spender, value, deadline, v, r, s);\\r\\n        uint256 nonceAfter = token.nonces(owner);\\r\\n        if (nonceAfter != nonceBefore + 1) {\\r\\n            revert SafeERC20FailedOperation(address(token));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data);\\r\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\r\\n            revert SafeERC20FailedOperation(address(token));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     *\\r\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\r\\n     */\\r\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\r\\n        // and not revert is the subcall reverts.\\r\\n\\r\\n        (bool success, bytes memory returndata) = address(token).call(data);\\r\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"IReferrals.sol\": {\r\n      \"content\": \"/**\\r\\n * @title Interface Referrals\\r\\n * @dev IReferrals contract\\r\\n *\\r\\n * @author - <USDFI TRUST>\\r\\n * for the USDFI Trust\\r\\n *\\r\\n * SPDX-License-Identifier: Business Source License 1.1\\r\\n *\\r\\n **/\\r\\n\\r\\npragma solidity =0.8.19;\\r\\n\\r\\ninterface IReferrals {\\r\\n    function getSponsor(address _account) external view returns (address);\\r\\n\\r\\n    function isMember(address _user) external view returns (bool);\\r\\n\\r\\n    function addMember(address _member, address _parent) external;\\r\\n\\r\\n    function membersList(uint256 _id) external view returns (address);\\r\\n\\r\\n    function getListReferrals(address _member)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\r\\n     */\\r\\n    error AddressInsufficientBalance(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev There's no code at `target` (it is not a contract).\\r\\n     */\\r\\n    error AddressEmptyCode(address target);\\r\\n\\r\\n    /**\\r\\n     * @dev A call to an address target failed. The target may have reverted.\\r\\n     */\\r\\n    error FailedInnerCall();\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        if (address(this).balance < amount) {\\r\\n            revert AddressInsufficientBalance(address(this));\\r\\n        }\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        if (!success) {\\r\\n            revert FailedInnerCall();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\r\\n     * up by this function (like regular Solidity function calls). However, if\\r\\n     * the call reverted with no returned reason, this function reverts with a\\r\\n     * {FailedInnerCall} error.\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        if (address(this).balance < value) {\\r\\n            revert AddressInsufficientBalance(address(this));\\r\\n        }\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\r\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\r\\n     * unsuccessful call.\\r\\n     */\\r\\n    function verifyCallResultFromTarget(\\r\\n        address target,\\r\\n        bool success,\\r\\n        bytes memory returndata\\r\\n    ) internal view returns (bytes memory) {\\r\\n        if (!success) {\\r\\n            _revert(returndata);\\r\\n        } else {\\r\\n            // only check if target is a contract if the call was successful and the return data is empty\\r\\n            // otherwise we already know that it was a contract\\r\\n            if (returndata.length == 0 && target.code.length == 0) {\\r\\n                revert AddressEmptyCode(target);\\r\\n            }\\r\\n            return returndata;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\r\\n     * revert reason or with a default {FailedInnerCall} error.\\r\\n     */\\r\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\r\\n        if (!success) {\\r\\n            _revert(returndata);\\r\\n        } else {\\r\\n            return returndata;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\r\\n     */\\r\\n    function _revert(bytes memory returndata) private pure {\\r\\n        // Look for revert reason and bubble it up if present\\r\\n        if (returndata.length > 0) {\\r\\n            // The easiest way to bubble the revert reason is using memory via assembly\\r\\n            /// @solidity memory-safe-assembly\\r\\n            assembly {\\r\\n                let returndata_size := mload(returndata)\\r\\n                revert(add(32, returndata), returndata_size)\\r\\n            }\\r\\n        } else {\\r\\n            revert FailedInnerCall();\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\r\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\r\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\r\\n * need to send a transaction, and thus is not required to hold Ether at all.\\r\\n */\\r\\ninterface IERC20Permit {\\r\\n    /**\\r\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\r\\n     * given ``owner``'s signed approval.\\r\\n     *\\r\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\r\\n     * ordering also apply here.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `deadline` must be a timestamp in the future.\\r\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\r\\n     * over the EIP712-formatted function arguments.\\r\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\r\\n     *\\r\\n     * For more information on the signature format, see the\\r\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\r\\n     * section].\\r\\n     */\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current nonce for `owner`. This value must be\\r\\n     * included whenever a signature is generated for {permit}.\\r\\n     *\\r\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\r\\n     * prevents a signature from being used multiple times.\\r\\n     */\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\r\\n     */\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n}\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RefRewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"StableBought\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STABLE\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TrackingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sponsor\",\"type\":\"address\"}],\"name\":\"buyPackage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mainVaultPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamVaultPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleVaultPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingVaultPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyVaultPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"refPercent\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"referralFee\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"cliff\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endTime\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"activ\",\"type\":\"bool\"}],\"internalType\":\"struct SALE.PackageSettings\",\"name\":\"pkg\",\"type\":\"tuple\"}],\"name\":\"createPackage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"earnedRefs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getNFTsOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStablePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockupLinear\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packageSettings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mainVaultPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamVaultPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleVaultPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingVaultPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyVaultPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralFee\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"cliff\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endTime\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"activ\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"securePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"}],\"name\":\"setNewPriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_securePrice\",\"type\":\"uint256\"}],\"name\":\"setNewSecurePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"mainVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"saleVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableVault\",\"type\":\"address\"}],\"internalType\":\"struct SALE.Vaults\",\"name\":\"_vaults\",\"type\":\"tuple\"}],\"name\":\"setVaults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trackingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"mainVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"saleVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableVault\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SALE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "000000000000000000000000a0f031f23852796addb0415b113ca99a2dad4d33", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}