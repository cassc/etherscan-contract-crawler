{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\nabstract contract Ownable is Context {\r\n    address public _contractOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function contractOwner() public view virtual returns (address) {\r\n        return _contractOwner;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_contractOwner, address(0));\r\n        _setContractOwner(address(0));\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(contractOwner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"New owner cannot be the zero address\");\r\n        emit OwnershipTransferred(_contractOwner, newOwner);\r\n        _setContractOwner(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        emit OwnershipTransferred(_contractOwner, newOwner);\r\n        _setContractOwner(newOwner);\r\n    }\r\n\r\n    function _setContractOwner(address newOwner) internal {\r\n        _contractOwner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n contract CCC_Locking is Ownable{\r\n\r\n    struct _tokens{\r\n        uint256 _amount;\r\n        uint256 _interval;\r\n        uint256 _lockingTime;\r\n        uint256 _lastWithdraw;\r\n        uint256 _withdrawnAmount;\r\n        uint256 _intervalAmount;\r\n        uint256 _releaseStartTime;\r\n        uint256 _1streleaseAmount;\r\n    }\r\n    mapping(address=>_tokens) public Tokens;\r\n\r\n    address public Authorised;\r\n\r\n\r\n    constructor(){\r\n\r\n    }\r\n\r\n    function lock(address token,uint256 amount,uint256 interval,uint256 intervalamt,uint256 _releaseStarttime,uint256 _releaseStartAmount) public onlyOwner returns(bool){\r\n        require(token!=address(0),\"Invalid Token Address\");\r\n        require(amount>0,\"Invalid Amount\");\r\n        require(interval>0,\"Invalid Interval\");\r\n        require(Tokens[token]._withdrawnAmount==Tokens[token]._amount,\"Token Lock Already Exist\");\r\n\r\n        IERC20(token).transferFrom(msg.sender,address(this),amount);\r\n        Tokens[token]=_tokens(amount,interval,block.timestamp,block.timestamp+_releaseStarttime,0,intervalamt,block.timestamp+_releaseStarttime,_releaseStartAmount);\r\n\r\n\r\n        return true;\r\n    }\r\n\r\n    function setAuthWallet(address _auth) public onlyOwner{\r\n        require(_auth!=address(0),\"Invalid Address\");\r\n        Authorised=_auth;\r\n    }\r\n\r\n    function WithdrawReleasedAmount(address _token) public returns(bool){\r\n        require(msg.sender==Authorised,\"You DOnt Have Permission To Withdraw\");\r\n        require(Tokens[_token]._withdrawnAmount<=Tokens[_token]._amount,\"All Tokens Are Released\");\r\n        uint amt=checkUnlockAmount(_token);\r\n        Tokens[_token]._lastWithdraw=block.timestamp;\r\n        Tokens[_token]._withdrawnAmount+=amt;\r\n        IERC20(_token).transfer(msg.sender,amt);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    function checkUnlockAmount(address _token) public view returns(uint256 amt){\r\n        require(_token!=address(0),\"Invalid Token Address\");\r\n        require(block.timestamp>=Tokens[_token]._releaseStartTime,\"Token Not Released\");\r\n\r\n        \r\n            uint j=1;\r\n            uint256 intervalOccr=0;\r\n            uint256 temp=Tokens[_token]._interval;\r\n            uint256 time=block.timestamp;\r\n\r\n            if(Tokens[_token]._releaseStartTime==Tokens[_token]._lastWithdraw)\r\n            {\r\n                amt+=Tokens[_token]._1streleaseAmount;\r\n            }\r\n        \r\n            for(uint i=0;i<j;i++)\r\n            {\r\n            \r\n             if(Tokens[_token]._lastWithdraw+temp<=time)\r\n                {\r\n                    if(Tokens[_token]._withdrawnAmount+amt>Tokens[_token]._amount)\r\n                    {\r\n                        amt=Tokens[_token]._amount-Tokens[_token]._withdrawnAmount;\r\n                        break;\r\n                    }\r\n                    else\r\n                    {\r\n                        intervalOccr+=1;\r\n                        temp+=Tokens[_token]._interval;\r\n                        j++;\r\n                        amt+=Tokens[_token]._intervalAmount;\r\n                    }\r\n                \r\n                }\r\n            }\r\n\r\n            if(Tokens[_token]._withdrawnAmount+amt>Tokens[_token]._amount)\r\n            {\r\n                amt=Tokens[_token]._amount-Tokens[_token]._withdrawnAmount;\r\n            }\r\n        \r\n       \r\n        return amt;\r\n\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Authorised\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_intervalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_releaseStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_1streleaseAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"WithdrawReleasedAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_contractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"checkUnlockAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intervalamt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_releaseStarttime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_releaseStartAmount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auth\",\"type\":\"address\"}],\"name\":\"setAuthWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CCC_Locking", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fb863d2e6fbf673da35ab968b4f30da17aefb02eddd4568afd297859f19a8317"}