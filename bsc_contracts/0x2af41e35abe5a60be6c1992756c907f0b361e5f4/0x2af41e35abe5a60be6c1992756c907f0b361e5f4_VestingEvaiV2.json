{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-05-05\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-05-05\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\npragma solidity 0.8.19;\r\n\r\n/** @notice Structure for encapsulating initial scheme data. */\r\nstruct InitialScheme {\r\n    uint256 allocatedAmount;\r\n    uint256 fistTimestamp;\r\n    uint256 lastTimestamp;\r\n}\r\n\r\n/**\r\n * @notice Structure for encapsulating time scheme data.\r\n *\r\n * TimeScheme is the result of applying a realization of\r\n * IVestingEvaiV2TimeScheme to an InitialScheme\r\n */\r\nstruct TimeScheme {\r\n    uint256[] dates;\r\n    uint256[] amounts;\r\n}\r\n\r\n/**\r\n * @notice Description of the interfaces which should be implemented\r\n * for providing different schemes for VestingEvaiV2.\r\n *\r\n * TimeScheme is the result of applying a realization of\r\n * IVestingEvaiV2TimeScheme to an InitialScheme\r\n */\r\ninterface IVestingEvaiV2TimeScheme {\r\n    /** @dev Should return the {TimeScheme} according to the {InitialScheme}. */\r\n    function getScheme(InitialScheme calldata)\r\n        external\r\n        view\r\n        returns(TimeScheme memory);\r\n\r\n    /**\r\n     * @dev Auxiliary method should provide realization if checking\r\n     * of the {InitialScheme} to meet a particular requirement.\r\n     */\r\n    function checkScheme(InitialScheme calldata)\r\n        external\r\n        view\r\n        returns(bool);\r\n}\r\n\r\n/** @title Auxiliary contract helps with estimation of remained gas. */\r\ncontract GasHelper {\r\n    /** @notice Structure for encapsulating data about used gas. */\r\n    struct Gas {\r\n        uint256 gasLeftBefore;\r\n        uint256 gasUsed;\r\n    }\r\n\r\n    // EVENTs definition section\r\n    event NotGasEnough(bytes4 indexed selector, bytes data);\r\n\r\n    /**\r\n     * @dev Sets {gasLeftBefore} member of {Gas} structure.\r\n     *\r\n     * @return gas struct of {Gas} memory type.\r\n     */\r\n    function _getGas() internal view returns (Gas memory gas) {\r\n        gas.gasLeftBefore = gasleft();\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {gasUsed} member of {Gas} structure.\r\n     *\r\n     * @param gas struct of {Gas} (memory type passed by reference).\r\n     */\r\n    function _getUsedGas(Gas memory gas) internal view {\r\n        if(gas.gasUsed == 0) gas.gasUsed = gas.gasLeftBefore-gasleft();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if gasleft() > gas.gasUsed. If false also\r\n     * emits event NotGasEnough(bytes4 indexed selector, bytes data)\r\n     *\r\n     * @param gas struct of {Gas} (memory type passed by reference).\r\n     * @param selector selector to figuring out the method\r\n     * which was running with not enough gas.\r\n     * @param data user data.\r\n     */\r\n    function _isItEnoughGasLeft(\r\n        Gas memory gas,\r\n        bytes4 selector,\r\n        bytes memory data\r\n    ) internal returns(bool b) {\r\n        b = gasleft() > gas.gasUsed;\r\n        if(!b) emit NotGasEnough(selector, data);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Auxiliary contract helps revert accidentally transactions with\r\n * sending or transferring coins.\r\n */\r\ncontract Nonpayable {\r\n    receive() external payable {\r\n        revert(\"Nonpayable: it is not possible to receive money\");\r\n    }\r\n\r\n    fallback() external payable {\r\n        revert(\"Nonpayable: it is not possible to receive money\");\r\n    }\r\n}\r\n\r\n/**\r\n * @title Auxiliary contract helps with withdrawing accidentally coins\r\n * and/or accidentally received ERC20 tokens.\r\n */\r\ncontract Cleanable is GasHelper {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /** @dev Helper method for withdraw accidentally received coins. */\r\n    function cleanEth() public virtual {\r\n        uint256 _ethB = address(this).balance;\r\n        if(_ethB > 0) payable(msg.sender).transfer(_ethB);\r\n    }\r\n\r\n    /**\r\n     * @dev Helper method for withdraw accidentally received ERC20 tokens.\r\n     */\r\n    function cleanTokens(address[] calldata tokens) public virtual {\r\n        Gas memory _gas = _getGas();\r\n        for(uint256 i; i < tokens.length; i++) {\r\n            uint256 b = IERC20(tokens[i]).balanceOf(address(this));\r\n            if(b > 0) IERC20(tokens[i]).safeTransfer(msg.sender, b);\r\n            _getUsedGas(_gas);\r\n            if(\r\n                !_isItEnoughGasLeft(\r\n                    _gas,\r\n                    this.cleanTokens.selector,\r\n                    abi.encodePacked(i)\r\n                )\r\n            ) break;\r\n        }\r\n    }\r\n}\r\n\r\n/** @title EVAI's VestingV2 linear vesting scheme creator. */\r\ncontract VestingEvaiV2TimeSchemeLinear is\r\n    IVestingEvaiV2TimeScheme,\r\n    Ownable,\r\n    Cleanable,\r\n    Nonpayable\r\n{\r\n    uint256 private immutable m_period; // period in seconds\r\n\r\n    /**\r\n     * @dev Sets the value for {m_period}.\r\n     *\r\n     * @param p period (in seconds).\r\n     */\r\n    constructor(uint256 p) { m_period = p; }\r\n\r\n    /**\r\n     * @dev Returns the {TimeScheme} according to the {InitialScheme}.\r\n     *\r\n     * @param iS the {InitialScheme} for a vesting.\r\n     */\r\n    function getScheme(InitialScheme calldata iS)\r\n        external\r\n        view\r\n        returns(TimeScheme memory tS)\r\n    {\r\n        require(\r\n            checkScheme(iS),\r\n            \"VestingEvaiV2TimeScheme: InitialScheme is not linear\"\r\n        );\r\n\r\n        uint256 _p = m_period;\r\n        uint256 _schemeLength = (iS.lastTimestamp-iS.fistTimestamp)/_p+1;\r\n        tS.dates = new uint256[](_schemeLength);\r\n        tS.amounts = new uint256[](_schemeLength);\r\n\r\n        uint256 _regularPayment = iS.allocatedAmount/_schemeLength;\r\n        for(uint256 i; i < _schemeLength; i++) {\r\n            tS.dates[i] = iS.fistTimestamp+_p*i;\r\n            tS.amounts[i] = _regularPayment;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Auxiliary method for checking is the {InitialScheme} meets\r\n     * requirements to be linear.\r\n     *\r\n     * @param iS the {InitialScheme} to be checked.\r\n     */\r\n    function checkScheme(InitialScheme memory iS)\r\n        public\r\n        view\r\n        returns(bool)\r\n    {\r\n        uint256 _p = m_period;\r\n        uint256 _interval;\r\n        uint256 _schemeLength;\r\n        return (_interval = iS.lastTimestamp-iS.fistTimestamp)%_p == 0 &&\r\n                (_schemeLength = _interval/_p+1) >= 2 &&\r\n                    iS.allocatedAmount%_schemeLength == 0;\r\n    }\r\n\r\n    /** @dev Helper method for withdraw accidentally received coins. */\r\n    function cleanEth() public override onlyOwner { super.cleanEth(); }\r\n\r\n    /**\r\n     * @dev Helper method for withdraw accidentally received ERC20 tokens.\r\n     *\r\n     * @param tokens list of the tokens to be withdrawn.\r\n     */\r\n    function cleanTokens(address[] calldata tokens) public override onlyOwner {\r\n        super.cleanTokens(tokens);\r\n    }\r\n}\r\n\r\n/** @title EVAI's main VestingV2 smart-contract. */\r\ncontract VestingEvaiV2 is\r\n    Ownable,\r\n    Cleanable,\r\n    Nonpayable\r\n{\r\n    using SafeERC20 for IERC20;\r\n\r\n    /** @notice Auxiliary enum for ClaimSkipped event. */\r\n    enum ClaimSkippingReason {\r\n        NoReason,             // 0x0\r\n        WrongID,              // 0x1\r\n        AlreadyFullyWithdrawn // 0x2\r\n    }\r\n\r\n    /**\r\n     * @notice Structure for encapsulating initial scheme data\r\n     * with address of IVestingEvaiV2TimeScheme contract address.\r\n     */\r\n    struct Scheme {\r\n        InitialScheme iS;\r\n        IVestingEvaiV2TimeScheme tS;\r\n    }\r\n\r\n    /** @notice Structure for encapsulating main vesting's data. */\r\n    struct VestingEntry {\r\n        uint256 balance;\r\n        uint256 beneficiaryIdx;   // index of beneficiary's receiving address\r\n                                  // in m_beneficiaries array;\r\n        uint256 claimTimestampID; // auxiliary variable for storing\r\n                                  // last executed TimeScheme's time point;\r\n        Scheme scheme;\r\n    }\r\n\r\n    /**\r\n     * @notice Auxiliary structure for matching beneficiary's receiving\r\n     * address with set of vestings' ID.\r\n     */\r\n    struct Vestings {\r\n        uint256 beneficiaryIdx;\r\n        uint256[] ids;\r\n    }\r\n\r\n    /**\r\n     * @notice Auxiliary structure for \"getter\" methods which return\r\n     * vesting status.\r\n     */\r\n    struct VestingStatus {\r\n        uint256 id;\r\n        uint256 balance;\r\n        InitialScheme initialScheme;\r\n        TimeScheme timeScheme;\r\n    }\r\n\r\n    /**\r\n     * @notice Auxiliary structure for \"getter\" methods which return\r\n     * vesting statuses.\r\n     */\r\n    struct VestingStatuses {\r\n        address beneficiary;\r\n        VestingStatus[] statuses;\r\n    }\r\n\r\n    uint256 private m_totalVested;        // total amount of currently\r\n                                          // vested tokens;\r\n    uint256 private m_IDCounter;          // vestings' ID counter;\r\n    IERC20 private immutable m_EVAIToken; // address of the ERC20 token;\r\n    address[] private m_beneficiaries;    // list of receiving addresses\r\n                                          // beneficiaries;\r\n    /**\r\n     * @notice mapping for matching beneficiary's receiving address with\r\n     * set of vestings' ID.\r\n     */\r\n    mapping(address => Vestings) private m_vestings;\r\n    /** @notice main mapping of vestings' entries. */\r\n    mapping(uint256 => VestingEntry) private m_vestingEntries;\r\n\r\n    // EVENTs definition section\r\n    event VestingCreated(uint256 indexed id, VestingEntry vestingEntry);\r\n    event VestingFullyWithdrawn(uint256 indexed id);\r\n    event Claim(uint256 indexed id, uint256 amount, uint256 timestamp);\r\n    event ClaimSkipped(uint256 indexed id, ClaimSkippingReason reason);\r\n    event WrongBeneficiary();\r\n\r\n    // MODIFIERS definition section\r\n\r\n    /**\r\n     * @dev Sets the value for {m_EVAIToken}.\r\n     *\r\n     * @param erc20 address of the EVAI's Token ERC20 smart-contract.\r\n     *\r\n     * This value is immutable: it can only be set once during\r\n     * construction. Also constructor sets first element of {m_beneficiaries}\r\n     * as address(0): real beneficiary should have not zero index in\r\n     * {m_beneficiaries} list\r\n     */\r\n    constructor(address erc20) {\r\n        m_EVAIToken = IERC20(erc20);\r\n        m_beneficiaries.push(address(0));\r\n    }\r\n\r\n    /** @dev Helper method for withdraw accidentally received coins. */\r\n    function cleanEth() public override onlyOwner { super.cleanEth(); }\r\n\r\n    /**\r\n     * @dev Helper method for withdraw accidentally received ERC20 tokens.\r\n     *\r\n     * @param tokens list of the tokens to be withdrawn.\r\n     *\r\n     * However it is impossible to withdraw EVAI's ERC20 Token if there is not\r\n     * enough balance to cover all allocated vestings' amounts.\r\n     */\r\n    function cleanTokens(address[] calldata tokens) public override onlyOwner {\r\n        uint256 _sh;\r\n        Gas memory _gas = _getGas();\r\n        for(uint256 i; i < tokens.length; i++) {\r\n            uint256 b = IERC20(tokens[i]).balanceOf(address(this));\r\n            if(b > (_sh = tokens[i] == address(m_EVAIToken) ? m_totalVested : 0))\r\n                IERC20(tokens[i]).safeTransfer(msg.sender, b-_sh);\r\n            _getUsedGas(_gas);\r\n            if(\r\n                !_isItEnoughGasLeft(\r\n                    _gas,\r\n                    this.cleanTokens.selector,\r\n                    abi.encodePacked(i)\r\n                )\r\n            ) break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Changes receiving address for the beneficiary.\r\n     *\r\n     * @param newBeneficiary new address for receiving vested tokens after a claim.\r\n     */\r\n    function changeBeneficiary(address newBeneficiary) external {\r\n        require(\r\n            _isAddressOk(newBeneficiary),\r\n            \"VestingEvaiV2: wrong new address for the beneficiary\"\r\n        );\r\n        require(\r\n            m_vestings[msg.sender].ids.length > 0,\r\n            \"VestingEvaiV2: only the current beneficiary is \"\r\n                \"allowed to change recipient address\"\r\n        );\r\n        m_vestings[newBeneficiary] = m_vestings[msg.sender];\r\n        m_beneficiaries[m_vestings[msg.sender].beneficiaryIdx] = newBeneficiary;\r\n        delete m_vestings[msg.sender];\r\n    }\r\n\r\n    /**\r\n     * @dev Creates sets of same vestings for different beneficiaries.\r\n     *\r\n     * @param payer the source address for transferring tokens for the vesting.\r\n     * @param beneficiaries list of beneficiaries.\r\n     * @param scheme vesting scheme.\r\n     */\r\n    function createVestings(\r\n        address payer,\r\n        address[] calldata beneficiaries,\r\n        Scheme calldata scheme\r\n    )\r\n        public\r\n    {\r\n        Gas memory _gas = _getGas();\r\n        for(uint256 i; i < beneficiaries.length; i++) {\r\n            createVesting(payer, beneficiaries[i], scheme);\r\n            _getUsedGas(_gas);\r\n            if(\r\n                !_isItEnoughGasLeft(\r\n                    _gas,\r\n                    bytes4(keccak256(bytes(\r\n                        \"createVestings(address,address[],((uint256,uint256,uint256),address))\"\r\n                    ))),\r\n                    abi.encodePacked(i)\r\n                )\r\n            ) break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Creates sets of same vestings for different beneficiaries.\r\n     *\r\n     * @param beneficiaries list of beneficiaries.\r\n     * @param scheme vesting scheme.\r\n     */\r\n    function createVestings(\r\n        address[] calldata beneficiaries,\r\n        Scheme calldata scheme\r\n    )\r\n        public\r\n    {\r\n        Gas memory _gas = _getGas();\r\n        for(uint256 i; i < beneficiaries.length; i++) {\r\n            createVesting(beneficiaries[i], scheme);\r\n            _getUsedGas(_gas);\r\n            if(\r\n                !_isItEnoughGasLeft(\r\n                    _gas,\r\n                    bytes4(keccak256(bytes(\r\n                        \"createVestings(address[],((uint256,uint256,uint256),address))\"\r\n                    ))),\r\n                    abi.encodePacked(i)\r\n                )\r\n            ) break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Creates one vesting for the beneficiary.\r\n     *\r\n     * @param beneficiary the beneficiary.\r\n     * @param scheme vesting scheme.\r\n     */\r\n    function createVesting(address beneficiary, Scheme calldata scheme)\r\n        public\r\n    {\r\n        createVesting(msg.sender, beneficiary, scheme);\r\n    }\r\n\r\n    /**\r\n     * @dev Creates one vesting for the beneficiary.\r\n     *\r\n     * @param payer the source address for transferring tokens for the vesting.\r\n     * @param beneficiary the beneficiary.\r\n     * @param scheme vesting scheme.\r\n     */\r\n    function createVesting(\r\n        address payer,\r\n        address beneficiary,\r\n        Scheme calldata scheme\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        if(!_isAddressOk(beneficiary)) return;\r\n        require(\r\n            scheme.tS.checkScheme(scheme.iS),\r\n            \"VestingEvaiV2: it is a wrong scheme\"\r\n        );\r\n\r\n        uint256 _requiredBalance = m_totalVested+scheme.iS.allocatedAmount;\r\n        if(m_EVAIToken.balanceOf(address(this)) < _requiredBalance) {\r\n            uint256 _requiredAmount =\r\n                _requiredBalance-m_EVAIToken.balanceOf(address(this));\r\n            require(\r\n                m_EVAIToken.allowance(payer, address(this)) >= _requiredAmount,\r\n                \"VestingEvaiV2: it is not enough of allowance of target token\"\r\n            );\r\n            m_EVAIToken.safeTransferFrom(payer, address(this), _requiredAmount);\r\n        }\r\n\r\n        uint256 _beneficiaryIdx = m_vestings[beneficiary].beneficiaryIdx;\r\n        if(_beneficiaryIdx == 0) {\r\n            m_beneficiaries.push(beneficiary);\r\n            m_vestings[beneficiary].beneficiaryIdx =\r\n                _beneficiaryIdx =\r\n                    m_beneficiaries.length-1;\r\n        }\r\n\r\n        uint256 id;\r\n        m_vestings[beneficiary].ids.push() = id = ++m_IDCounter;\r\n        m_vestingEntries[id].beneficiaryIdx = _beneficiaryIdx;\r\n        m_vestingEntries[id].scheme = scheme;\r\n        m_vestingEntries[id].balance = scheme.iS.allocatedAmount;\r\n\r\n        m_totalVested += scheme.iS.allocatedAmount;\r\n\r\n        emit VestingCreated(id, m_vestingEntries[id]);\r\n    }\r\n\r\n    /** @dev Makes claims for all vestings of the msg.sender. */\r\n    function claim() external { claim(msg.sender); }\r\n\r\n    /**\r\n     * @dev Makes claims for all vestings of beneficiary.\r\n     *\r\n     * @param beneficiary the beneficiary.\r\n     */\r\n    function claim(address beneficiary) public {\r\n        Gas memory _gas = _getGas();\r\n        for(uint256 i; i < m_vestings[beneficiary].ids.length; i++) {\r\n            claim(m_vestings[beneficiary].ids[i]);\r\n            _getUsedGas(_gas);\r\n            if(\r\n                !_isItEnoughGasLeft(\r\n                    _gas,\r\n                    bytes4(keccak256(bytes(\"claim(address)\"))),\r\n                    abi.encodePacked(i)\r\n                )\r\n            ) break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Makes claim for the vesting with id.\r\n     *\r\n     * @param id the ID of a vesting.\r\n     */\r\n    function claim(uint256 id) public {\r\n        if(id == 0 || id > m_IDCounter) {\r\n            emit ClaimSkipped(id, ClaimSkippingReason.WrongID);\r\n            return;\r\n        }\r\n\r\n        VestingEntry memory _e = m_vestingEntries[id];\r\n\r\n        if(_e.balance == 0) {\r\n            emit ClaimSkipped(id, ClaimSkippingReason.AlreadyFullyWithdrawn);\r\n            return;\r\n        }\r\n\r\n        TimeScheme memory _t = _e.scheme.tS.getScheme(_e.scheme.iS);\r\n\r\n        address _b = m_beneficiaries[_e.beneficiaryIdx];\r\n        uint256 _a = _b == owner() ? _e.balance : 0;\r\n\r\n        uint256 i;\r\n        if(_a == 0)\r\n            for(i = _e.claimTimestampID; i < _t.dates.length;)\r\n                if(_t.dates[i] <= block.timestamp)\r\n                    _a += _t.amounts[i++];\r\n                else break;\r\n        else i = _t.dates.length-1;\r\n\r\n        if(_a > 0) {\r\n            m_totalVested -= _a;\r\n            m_vestingEntries[id].balance -= _a;\r\n            m_vestingEntries[id].claimTimestampID = i;\r\n            m_EVAIToken.safeTransfer(_b, _a);\r\n            if(m_vestingEntries[id].balance == 0)\r\n                emit VestingFullyWithdrawn(id);\r\n            else emit Claim(id, _a, block.timestamp);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Makes claims for all vestings of each beneficiary.\r\n     *\r\n     * @param beneficiaries the list of beneficiaries.\r\n     */\r\n    function claim(address[] calldata beneficiaries) external {\r\n        Gas memory _gas = _getGas();\r\n        for(uint256 i; i < beneficiaries.length; i++) {\r\n            claim(beneficiaries[i]);\r\n            _getUsedGas(_gas);\r\n            if(\r\n                !_isItEnoughGasLeft(\r\n                    _gas,\r\n                    bytes4(keccak256(bytes(\"claims(address[])\"))),\r\n                    abi.encodePacked(i)\r\n                )\r\n            ) break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Makes claims of each vestings by ID from list of IDs.\r\n     *\r\n     * @param ids the list of vestings.\r\n     */\r\n    function claim(uint256[] calldata ids) external {\r\n        Gas memory _gas = _getGas();\r\n        for(uint256 i; i < ids.length; i++) {\r\n            claim(ids[i]);\r\n            _getUsedGas(_gas);\r\n            if(\r\n                !_isItEnoughGasLeft(\r\n                    _gas,\r\n                    bytes4(keccak256(bytes(\"claims(uint256[])\"))),\r\n                    abi.encodePacked(i)\r\n                )\r\n            ) break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Makes claims of each vestings by ID from a slice of IDs.\r\n     *\r\n     * @param idStart the first ID from a set of vestings.\r\n     * @param idEnd the last ID from a set of vestings.\r\n     */\r\n    function claim(uint256 idStart, uint256 idEnd) external {\r\n        Gas memory _gas = _getGas();\r\n        for(uint256 i = idStart; i <= idEnd; i++) {\r\n            claim(i);\r\n            _getUsedGas(_gas);\r\n            if(\r\n                !_isItEnoughGasLeft(\r\n                    _gas,\r\n                    bytes4(keccak256(bytes(\"claims(uint256,uint256)\"))),\r\n                    abi.encodePacked(i)\r\n                )\r\n            ) break;\r\n        }\r\n    }\r\n\r\n    /** @dev Returns smart-contract address of target ERC20 token. */\r\n    function getERC20Token() external view returns(address) {\r\n        return address(m_EVAIToken);\r\n    }\r\n\r\n    /** @dev Returns the amount of all vested tokens. */\r\n    function getTotalVestedAmount() external view returns(uint256) {\r\n        return m_totalVested;\r\n    }\r\n\r\n     /** @dev Returns actual value of ID's counter. */\r\n    function getIDCounter() external view returns(uint256) { return m_IDCounter; }\r\n\r\n    /**\r\n     * @dev Returns the list of all address which currently are registered\r\n     * as beneficiaries' accounts for receiving vested tokens.\r\n     */\r\n    function getAllBeneficiaries() external view returns(address[] memory bs) {\r\n        uint256 _l = m_beneficiaries.length;\r\n        bs = new address[](_l-1);\r\n        for(uint256 i = 1; i < _l; i++) bs[i-1] = m_beneficiaries[i];\r\n    }\r\n\r\n    /** @dev Returns statuses of all ever existed vestings. */\r\n    function getAllVestingStatuses()\r\n        external\r\n        view\r\n        returns(VestingStatuses[] memory allVestingStatuses)\r\n    {\r\n        uint256 _l = m_beneficiaries.length;\r\n        allVestingStatuses = new VestingStatuses[](_l-1);\r\n        for(uint256 i = 1; i < _l; i++)\r\n            allVestingStatuses[i-1] = getVestingStatuses(m_beneficiaries[i]);\r\n    }\r\n\r\n    /** @dev Returns vestings' statuses of msg.sender. */\r\n    function getVestingStatuses()\r\n        external\r\n        view\r\n        returns(VestingStatuses memory vestingStatuses)\r\n    {\r\n        return getVestingStatuses(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns vesting status for vesting with id.\r\n     *\r\n     * @param id ID of the vesting.\r\n     */\r\n    function getVestingStatus(uint256 id)\r\n        public\r\n        view\r\n        returns(uint256 beneficiaryIdx, VestingStatus memory vestingStatus)\r\n    {\r\n        if(id == 0 || id > m_IDCounter) return (beneficiaryIdx, vestingStatus);\r\n        beneficiaryIdx = m_vestingEntries[id].beneficiaryIdx;\r\n        vestingStatus.id = id;\r\n        vestingStatus.balance = m_vestingEntries[id].balance;\r\n        vestingStatus.initialScheme = m_vestingEntries[id].scheme.iS;\r\n        vestingStatus.timeScheme =\r\n            m_vestingEntries[id]\r\n                .scheme\r\n                .tS\r\n                .getScheme(vestingStatus.initialScheme);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns all vesting statuses of a beneficiary.\r\n     *\r\n     * @param beneficiary the current recipient address.\r\n     */\r\n    function getVestingStatuses(address beneficiary)\r\n        public\r\n        view\r\n        returns(VestingStatuses memory vestingStatuses)\r\n    {\r\n        uint256 _l = m_vestings[beneficiary].ids.length;\r\n        if(_l == 0) return vestingStatuses;\r\n        vestingStatuses.beneficiary = beneficiary;\r\n        vestingStatuses.statuses = new VestingStatus[](_l);\r\n        for(uint256 i; i < _l; i++)\r\n            (, vestingStatuses.statuses[i]) =\r\n                getVestingStatus(m_vestings[beneficiary].ids[i]);\r\n    }\r\n\r\n    /**\r\n     * @dev Auxiliary method returns true if account meets to the requirements.\r\n     *\r\n     * @param account the address to be checked.\r\n     */\r\n    function _isAddressOk(address account) private returns(bool b) {\r\n        b = (account != address(0) && account != address(this));\r\n        if(!b) emit WrongBeneficiary();\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum VestingEvaiV2.ClaimSkippingReason\",\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"ClaimSkipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"NotGasEnough\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"beneficiaryIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimTimestampID\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"allocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fistTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct InitialScheme\",\"name\":\"iS\",\"type\":\"tuple\"},{\"internalType\":\"contract IVestingEvaiV2TimeScheme\",\"name\":\"tS\",\"type\":\"address\"}],\"internalType\":\"struct VestingEvaiV2.Scheme\",\"name\":\"scheme\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct VestingEvaiV2.VestingEntry\",\"name\":\"vestingEntry\",\"type\":\"tuple\"}],\"name\":\"VestingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"VestingFullyWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"WrongBeneficiary\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"changeBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"beneficiaries\",\"type\":\"address[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idEnd\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cleanEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"cleanTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"allocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fistTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct InitialScheme\",\"name\":\"iS\",\"type\":\"tuple\"},{\"internalType\":\"contract IVestingEvaiV2TimeScheme\",\"name\":\"tS\",\"type\":\"address\"}],\"internalType\":\"struct VestingEvaiV2.Scheme\",\"name\":\"scheme\",\"type\":\"tuple\"}],\"name\":\"createVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"allocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fistTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct InitialScheme\",\"name\":\"iS\",\"type\":\"tuple\"},{\"internalType\":\"contract IVestingEvaiV2TimeScheme\",\"name\":\"tS\",\"type\":\"address\"}],\"internalType\":\"struct VestingEvaiV2.Scheme\",\"name\":\"scheme\",\"type\":\"tuple\"}],\"name\":\"createVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"beneficiaries\",\"type\":\"address[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"allocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fistTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct InitialScheme\",\"name\":\"iS\",\"type\":\"tuple\"},{\"internalType\":\"contract IVestingEvaiV2TimeScheme\",\"name\":\"tS\",\"type\":\"address\"}],\"internalType\":\"struct VestingEvaiV2.Scheme\",\"name\":\"scheme\",\"type\":\"tuple\"}],\"name\":\"createVestings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"beneficiaries\",\"type\":\"address[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"allocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fistTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct InitialScheme\",\"name\":\"iS\",\"type\":\"tuple\"},{\"internalType\":\"contract IVestingEvaiV2TimeScheme\",\"name\":\"tS\",\"type\":\"address\"}],\"internalType\":\"struct VestingEvaiV2.Scheme\",\"name\":\"scheme\",\"type\":\"tuple\"}],\"name\":\"createVestings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllBeneficiaries\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"bs\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllVestingStatuses\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"allocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fistTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct InitialScheme\",\"name\":\"initialScheme\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"dates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct TimeScheme\",\"name\":\"timeScheme\",\"type\":\"tuple\"}],\"internalType\":\"struct VestingEvaiV2.VestingStatus[]\",\"name\":\"statuses\",\"type\":\"tuple[]\"}],\"internalType\":\"struct VestingEvaiV2.VestingStatuses[]\",\"name\":\"allVestingStatuses\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getERC20Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIDCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalVestedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getVestingStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"beneficiaryIdx\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"allocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fistTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct InitialScheme\",\"name\":\"initialScheme\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"dates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct TimeScheme\",\"name\":\"timeScheme\",\"type\":\"tuple\"}],\"internalType\":\"struct VestingEvaiV2.VestingStatus\",\"name\":\"vestingStatus\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getVestingStatuses\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"allocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fistTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct InitialScheme\",\"name\":\"initialScheme\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"dates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct TimeScheme\",\"name\":\"timeScheme\",\"type\":\"tuple\"}],\"internalType\":\"struct VestingEvaiV2.VestingStatus[]\",\"name\":\"statuses\",\"type\":\"tuple[]\"}],\"internalType\":\"struct VestingEvaiV2.VestingStatuses\",\"name\":\"vestingStatuses\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingStatuses\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"allocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fistTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct InitialScheme\",\"name\":\"initialScheme\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"dates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct TimeScheme\",\"name\":\"timeScheme\",\"type\":\"tuple\"}],\"internalType\":\"struct VestingEvaiV2.VestingStatus[]\",\"name\":\"statuses\",\"type\":\"tuple[]\"}],\"internalType\":\"struct VestingEvaiV2.VestingStatuses\",\"name\":\"vestingStatuses\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "VestingEvaiV2", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1024", "ConstructorArguments": "0000000000000000000000002167afa1c658dc5c4ec975f4af608ff075a8b8ae", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://162cd91f36e4cc5a5f161ab55f80f6b936e750fb7e62b5f0d00fc8aeafebddc3"}