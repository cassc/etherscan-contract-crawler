{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ninterface IERC721 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n    function balanceOf(address owner) external view returns (uint balance);\r\n    function ownerOf(uint tokenId) external view returns (address owner);\r\n    function safeTransferFrom(address from, address to, uint tokenId) external;\r\n    function transferFrom(address from, address to, uint tokenId) external;\r\n    function approve(address to, uint tokenId) external;\r\n    function getApproved(uint tokenId) external view returns (address operator);\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n    function safeTransferFrom(address from, address to, uint tokenId, bytes calldata data) external;\r\n}\r\n\r\ninterface IEpicHeroNFT is IERC721{\r\n    function tokenOfOwnerByIndex(address owner, uint index) external view returns (uint tokenId);\r\n    function getHero(uint tokenId) external view returns (uint8 level, uint8 rarity);\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n    unchecked {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n        uint256 newAllowance = oldAllowance - value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\nabstract contract Auth {\r\n    address owner;\r\n    mapping (address => bool) private authorizations;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[_owner] = true;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender)); _;\r\n    }\r\n\r\n    modifier authorized() {\r\n        require(isAuthorized(msg.sender)); _;\r\n    }\r\n\r\n    function authorize(address adr) public onlyOwner {\r\n        authorizations[adr] = true;\r\n        emit Authorized(adr);\r\n    }\r\n\r\n    function unauthorize(address adr) public onlyOwner {\r\n        authorizations[adr] = false;\r\n        emit Unauthorized(adr);\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        authorizations[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n    event Authorized(address adr);\r\n    event Unauthorized(address adr);\r\n}\r\n\r\ncontract DungeonV1 is Auth, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public feeAddress = 0x618cBeb39560B08E820cbc47B3DE1028d3b75810;\r\n\r\n    IEpicHeroNFT genesisNft;\r\n    IEpicHeroNFT demiNft;\r\n\r\n    struct PoolInfo {\r\n        address token1;\r\n        address token2;\r\n        uint256 token1Fee;\r\n        uint256 token2Fee;\r\n        uint8 countNft;\r\n        bool allowGenesis;\r\n        bool allowDemi;\r\n        bool paused;\r\n    }\r\n\r\n    PoolInfo[] public poolInfo;\r\n\r\n    bool public isPaused = false;\r\n\r\n    constructor() Auth(msg.sender) ReentrancyGuard(){\r\n        genesisNft = IEpicHeroNFT(0xafDcB0eCaD1c8Cb22893dCA7D6c510dBFDa3BBeC);\r\n        demiNft = IEpicHeroNFT(0xDD581CAb6F7643AB11498a4B83a8bcDA9EACa29A);\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    function add(\r\n        address _token1,\r\n        address _token2,\r\n        uint256 _token1Fee,\r\n        uint256 _token2Fee,\r\n        uint8 _countNft,\r\n        bool _allowGenesis,\r\n        bool _allowDemi,\r\n        bool _paused\r\n    ) public authorized {\r\n        poolInfo.push(PoolInfo({\r\n            token1 : _token1,\r\n            token2 : _token2,\r\n            token1Fee: _token1Fee,\r\n            token2Fee: _token2Fee,\r\n            countNft: _countNft,\r\n            allowGenesis: _allowGenesis,\r\n            allowDemi: _allowDemi,\r\n            paused: _paused\r\n        }));\r\n    }\r\n\r\n    function set(\r\n        uint256 _pid,\r\n        address _token1,\r\n        address _token2,\r\n        uint256 _token1Fee,\r\n        uint256 _token2Fee,\r\n        uint8 _countNft,\r\n        bool _allowGenesis,\r\n        bool _allowDemi,\r\n        bool _paused\r\n    ) public authorized {\r\n        poolInfo[_pid].token1 = _token1;\r\n        poolInfo[_pid].token2 = _token2;\r\n        poolInfo[_pid].token1Fee = _token1Fee;\r\n        poolInfo[_pid].token2Fee = _token2Fee;\r\n        poolInfo[_pid].countNft = _countNft;\r\n        poolInfo[_pid].allowGenesis = _allowGenesis;\r\n        poolInfo[_pid].allowDemi = _allowDemi;\r\n        poolInfo[_pid].paused = _paused;\r\n    }\r\n\r\n    function startFight(uint256 _pid, uint256[] memory _heroIds, uint256[] memory _heroIds2, string memory _fight) public nonReentrant {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n\r\n        require(!isPaused && !pool.paused, \"Pool: Paused\");\r\n\r\n        require(_heroIds.length + _heroIds2.length == pool.countNft, \"Team size not matched\");\r\n\r\n        if(_heroIds.length > 0){\r\n            require(pool.allowGenesis, \"Not allow genesis\");\r\n        }\r\n\r\n        if(_heroIds2.length > 0){\r\n            require(pool.allowDemi, \"Not allow demi\");\r\n        }\r\n\r\n        for(uint i = 0; i < _heroIds.length; i++) {\r\n            require(genesisNft.ownerOf(_heroIds[i]) == msg.sender, \"Not owner\");\r\n        }\r\n\r\n        for(uint i = 0; i < _heroIds2.length; i++) {\r\n            require(demiNft.ownerOf(_heroIds2[i]) == msg.sender, \"Not owner\");\r\n        }\r\n\r\n        if(pool.token1Fee > 0){\r\n            IERC20(pool.token1).safeTransferFrom(address(msg.sender), feeAddress, pool.token1Fee);\r\n        }\r\n\r\n        if(pool.token2Fee > 0){\r\n            IERC20(pool.token2).safeTransferFrom(address(msg.sender), feeAddress, pool.token2Fee);\r\n        }\r\n\r\n        emit StartFight(msg.sender, _pid, _heroIds, _heroIds2, _fight);\r\n    }\r\n\r\n    function setPaused(bool value) external authorized {\r\n        require(value != isPaused, \"Same\");\r\n        isPaused = value;\r\n    }\r\n\r\n    function updatePoolPaused(uint256 _pid, bool _paused) external authorized {\r\n        require(poolInfo[_pid].paused != _paused,\"Same\");\r\n        poolInfo[_pid].paused = _paused;\r\n    }\r\n\r\n    function setFeeAddress(address _feeAddress) public onlyOwner{\r\n        require(_feeAddress != address(0), \"setFeeAddress: ZERO\");\r\n        feeAddress = _feeAddress;\r\n    }\r\n\r\n    function retrieveBNB(uint _amount) external onlyOwner{\r\n        uint balance = address(this).balance;\r\n\r\n        if(_amount > balance){\r\n            _amount = balance;\r\n        }\r\n\r\n        (bool success,) = payable(msg.sender).call{ value: _amount }(\"\");\r\n        require(success, \"Failed\");\r\n    }\r\n\r\n    function emergencyRetrieveTokens(address _token, uint _amount) external onlyOwner {\r\n        uint balance = IERC20(_token).balanceOf(address(this));\r\n\r\n        if(_amount > balance){\r\n            _amount = balance;\r\n        }\r\n\r\n        require(IERC20(_token).transfer(msg.sender, _amount), \"Transfer failed\");\r\n    }\r\n\r\n    function emergencyRetrieveNfts(address _ntfAddress, uint256[] memory _heroIds) external onlyOwner {\r\n        for (uint i = 0; i < _heroIds.length; i++) {\r\n            IEpicHeroNFT(_ntfAddress).safeTransferFrom(address(this), msg.sender, _heroIds[i]);\r\n        }\r\n    }\r\n\r\n    function emergencyRetrieveAllNfts(address _ntfAddress) external onlyOwner {\r\n        IEpicHeroNFT nftContract = IEpicHeroNFT(_ntfAddress);\r\n\r\n        uint256 balance = nftContract.balanceOf(address(this));\r\n        uint256[] memory heroIds = new uint256[](balance);\r\n\r\n        for (uint i = 0; i < balance; i++) {\r\n            heroIds[i] = nftContract.tokenOfOwnerByIndex(address(this), i);\r\n        }\r\n\r\n        for (uint i = 0; i < heroIds.length; i++) {\r\n            nftContract.safeTransferFrom(address(this), msg.sender, heroIds[i]);\r\n        }\r\n    }\r\n\r\n    function onERC721Received(address, address, uint, bytes calldata) public pure returns (bytes4) {\r\n        return 0x150b7a02;\r\n    }\r\n\r\n    event StartFight(address indexed user, uint256 indexed pid, uint256[] heroIds, uint256[] heroIds2, string fight);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"Authorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"heroIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"heroIds2\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fight\",\"type\":\"string\"}],\"name\":\"StartFight\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_token1Fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_token2Fee\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_countNft\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_allowGenesis\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_allowDemi\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ntfAddress\",\"type\":\"address\"}],\"name\":\"emergencyRetrieveAllNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ntfAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_heroIds\",\"type\":\"uint256[]\"}],\"name\":\"emergencyRetrieveNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyRetrieveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token1Fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token2Fee\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"countNft\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"allowGenesis\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowDemi\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"retrieveBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_token1Fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_token2Fee\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_countNft\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_allowGenesis\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_allowDemi\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_heroIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_heroIds2\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"_fight\",\"type\":\"string\"}],\"name\":\"startFight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"updatePoolPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DungeonV1", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "25000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8e56a9a85401b843a86b0df30bedcac801b8ce2c642094d268ad05f12de3b06d"}