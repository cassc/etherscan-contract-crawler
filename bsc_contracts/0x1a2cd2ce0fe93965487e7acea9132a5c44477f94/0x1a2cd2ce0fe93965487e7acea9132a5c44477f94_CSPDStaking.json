{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: contracts/IBEP20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT:  Beware that changingan allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/CSPD-Staking.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title CSPD Staking\r\n * Distribute CSPD rewards over discrete-time schedules for the staking of CSPD on BSC network.\r\n * This contract is designed on a self-service model, where users will stake CSPD, unstake CSPD and claim rewards through their own transactions only.\r\n */\r\ncontract CSPDStaking is Ownable {\r\n\r\n    /* ------------------------------ States --------------------------------- */\r\n\r\n    using SafeMath for uint256;\r\n\r\n    IBEP20 public immutable tokenAddress;               // contract address of bep20 token\r\n\r\n    uint256 public allStakes;                           // total amount of staked token\r\n\r\n    // address[] stakers;                                  // all stakers\r\n\r\n    mapping(uint256 => address) stakers;                // all stakers\r\n\r\n    uint256 public stakerLength;                               // count of stakers\r\n\r\n    address public feeAddress;                          // address for fee\r\n\r\n    uint256 public harvestFee;                          // harvest fee\r\n\r\n    uint256 public unstakeFee5;                         // unstake fee for <= 7 days\r\n\r\n    uint256 public unstakeFee4;                         // unstake fee for <= 14 days\r\n\r\n    uint256 public unstakeFee3;                         // unstake fee for <= 21 days\r\n\r\n    uint256 public unstakeFee2;                         // unstake fee for <= 30 days\r\n    \r\n    uint256 public unstakeFee1;                         // unstake fee for > 30 days\r\n\r\n    mapping(address => UserInfo) stakerInfos;           // user infos\r\n\r\n    struct UserInfo{                                    \r\n        uint256 stake;                                  // amount of stakes\r\n        uint256 reward;                                 // amount of rewards\r\n        uint256 lastUpdatedTime;                        // last updated time of rewards\r\n        uint256 lastStakedTime;                         // last staked time\r\n    }\r\n\r\n    bool public isRunning;                              // is running or not\r\n\r\n    uint256 public decimal;                             // decimal of reward token\r\n\r\n    uint256 public totalSupply;                         // total Supply of rewarding - min: 10K\r\n\r\n    uint256 public totalStakingPeriodDays;              // total staking period by days - min: 1 Month\r\n\r\n    uint256 private _totalRewards;                      // total Rewardings\r\n\r\n    uint256 private _totalHarvest;                      // total amount of harvested             \r\n\r\n    uint256 private _totalFee;                          // total amount of fee\r\n\r\n    uint256 private _rewardCapacity;                    // total amount of token in contract for rewarding\r\n\r\n    uint256 private _rewardAmountPerSecond;             // total rewarding per second\r\n    \r\n    /* ------------------------------ Events --------------------------------- */\r\n    event Staked(address indexed staker, uint256 amount, uint256 fee);\r\n    \r\n    event UnStaked(address indexed staker, uint256 amount, uint256 fee);\r\n\r\n    event Harvest(address indexed staker, uint256 amount, uint256 fee);\r\n\r\n    event AdminDeposit(address admin, uint256 amount);\r\n\r\n    event AdminWithdraw(address admin, uint256 amount);\r\n\r\n    event AdminUpdatedAPY(uint256 totalSupply_, uint256 totalPeriods_);\r\n    \r\n    event AdminUpdatedAPYNoRewards(uint256 totalSupply_, uint256 totalPeriods_);\r\n\r\n    event AdminUpdatedRunning(bool status);\r\n    \r\n    event AdminUpdatedRunningNoRewards(bool status);\r\n\r\n    event AdminUpdatedRewards(uint256 offSet, uint256 size);\r\n\r\n    event AdminUpdatedHarvestFee(uint fee);\r\n\r\n    event AdminUpdatedUnstakeFee1(uint fee);\r\n\r\n    event AdminUpdatedUnstakeFee2(uint fee);\r\n    \r\n    event AdminUpdatedUnstakeFee3(uint fee);\r\n    \r\n    event AdminUpdatedUnstakeFee4(uint fee);\r\n    \r\n    event AdminUpdatedUnstakeFee5(uint fee);\r\n\r\n    event AdminUpdatedFeeAddress(address feeAddress_);\r\n\r\n    /* ------------------------------ Modifiers --------------------------------- */\r\n\r\n\r\n    /* ------------------------------ User Functions --------------------------------- */\r\n\r\n    /* \r\n        Contructor of contract\r\n    params:\r\n        - tokenAddress: Contract Address of BEP20 token\r\n        - totalSupply: total amount of rewarding tokens\r\n        - totalStakingPeriodDays: total time of staking for tokens by days\r\n    */\r\n    constructor(\r\n        IBEP20 tokenAddress_,\r\n        uint256 totalSupply_,\r\n        uint256 totalStakingPeriodDays_,\r\n        address feeAddress_,\r\n        uint256 harvestFee_,\r\n        uint256 unstakeFee1_,\r\n        uint256 unstakeFee2_,\r\n        uint256 unstakeFee3_,\r\n        uint256 unstakeFee4_,\r\n        uint256 unstakeFee5_\r\n    ) {\r\n        require(totalSupply_ >= 1e4 * (10 ** 18), \"Contract Constructor: Not Enough Supply Amount, bigger than 10K\");\r\n        require(totalStakingPeriodDays_ > 0, \"Contract Constructor: Not Enough Staking Period, bigger than 1 days\");\r\n        require(feeAddress_ != address(0), \"Contract Constructor: Invalid fee address\");\r\n        \r\n        tokenAddress = tokenAddress_;\r\n        \r\n        decimal = 18;\r\n        totalSupply = totalSupply_;\r\n        totalStakingPeriodDays = totalStakingPeriodDays_;\r\n\r\n        isRunning = true;\r\n\r\n        feeAddress = feeAddress_;\r\n        harvestFee = harvestFee_;\r\n        unstakeFee1 = unstakeFee1_;\r\n        unstakeFee2 = unstakeFee2_;\r\n        unstakeFee3 = unstakeFee3_;\r\n        unstakeFee4 = unstakeFee4_;\r\n        unstakeFee5 = unstakeFee5_;\r\n        \r\n        _updateRewardAmountPerSecond();\r\n    }\r\n\r\n    /*\r\n        Cal rewards per seconds from APY\r\n    */\r\n    function _updateRewardAmountPerSecond() private{\r\n        _rewardAmountPerSecond = totalSupply / (totalStakingPeriodDays * 24 * 3600);\r\n    }\r\n\r\n    /*\r\n        Update Rewardings(amount and time)\r\n        notice: rewarding amount increases only isRunning\r\n    */\r\n    function _updateRewards(address staker) private {\r\n        uint256 total = allStakes;\r\n        uint256 count = stakerInfos[staker].stake;\r\n        \r\n        if(stakerInfos[staker].lastUpdatedTime == 0 || total == 0 || count == 0) return;\r\n\r\n        uint256 current = block.timestamp;\r\n\r\n        if(isRunning){\r\n            uint256 rewarding = _calculateAddingRewards(staker);\r\n            stakerInfos[staker].reward = stakerInfos[staker].reward + rewarding;\r\n            _totalRewards = _totalRewards + rewarding;\r\n        }\r\n\r\n        stakerInfos[staker].lastUpdatedTime = current;\r\n    }\r\n\r\n    /*\r\n        Get Adding rewardings not stored in storage\r\n    */\r\n    function _calculateAddingRewards(address staker) private view returns(uint256){\r\n        uint256 total = allStakes;\r\n        uint256 count = stakerInfos[staker].stake;\r\n        \r\n        if(!isRunning || stakerInfos[staker].lastUpdatedTime == 0 || total == 0 || count == 0)\r\n            return 0;\r\n        \r\n        uint256 current = block.timestamp;\r\n        uint256 rewarding = (current - stakerInfos[staker].lastUpdatedTime) * _rewardAmountPerSecond * count / total;\r\n\r\n        return rewarding;\r\n    }\r\n\r\n    /*\r\n        Get total Adding rewardings not stored in storage\r\n    */\r\n    function _calculateTotalAddingRewards() private view returns(uint256){\r\n        uint256 totalAdding;\r\n        for(uint256 i = 0; i < stakerLength; i++){\r\n            totalAdding = totalAdding + _calculateAddingRewards(stakers[i]);\r\n        }\r\n        return totalAdding;\r\n    }\r\n\r\n    /*\r\n        Update Rewardings for all stakers\r\n    */\r\n    function _updateAllRewards() private {\r\n        for(uint256 i = 0; i < stakerLength; i++){\r\n            _updateRewards(stakers[i]);\r\n        }\r\n    }\r\n\r\n    /*\r\n        Get Rewards amount per second by user\r\n    */\r\n    function rewardsPerSecond() external view returns(uint256){\r\n        uint256 total = allStakes;\r\n        uint256 count = stakerInfos[msg.sender].stake;\r\n        if(total == 0 || count == 0) return 0;\r\n        uint256 rewarding = _rewardAmountPerSecond * count / total;\r\n        return rewarding;\r\n    }\r\n\r\n    /*\r\n        Stake token\r\n        note - user should call the token address and approve for the amount for this contract\r\n    */\r\n    function stake(uint256 amount) external {\r\n        _updateRewards(msg.sender);\r\n\r\n        allStakes = allStakes + amount;\r\n        stakerInfos[msg.sender].stake = stakerInfos[msg.sender].stake + amount;\r\n        _addStakerToArray(msg.sender);\r\n        \r\n        stakerInfos[msg.sender].lastUpdatedTime = block.timestamp;\r\n        stakerInfos[msg.sender].lastStakedTime = block.timestamp;\r\n\r\n        tokenAddress.transferFrom(msg.sender, address(this), amount);\r\n        emit Staked(msg.sender, amount, 0);\r\n    }\r\n\r\n    /*\r\n        Add staker to array, if not exists\r\n    */\r\n    function _addStakerToArray(address staker) private {\r\n        for(uint256 i = 0; i < stakerLength; i ++){\r\n            if(stakers[i] == staker){\r\n                return;\r\n            }\r\n        }\r\n        stakers[stakerLength] = staker;\r\n        stakerLength ++;\r\n    }\r\n\r\n    /*\r\n        Unstake token\r\n    */\r\n    function unstake(uint256 amount) external {\r\n\r\n        require(stakerInfos[msg.sender].stake >= amount, \"CSPD UnStaking: not enough staked token amount.\");\r\n        _updateRewards(msg.sender);\r\n\r\n        allStakes = allStakes - amount;\r\n        stakerInfos[msg.sender].stake = stakerInfos[msg.sender].stake - amount;\r\n\r\n        uint256 stakingTime = block.timestamp - stakerInfos[msg.sender].lastStakedTime;\r\n        uint256 unstakeFee = 0;\r\n        if(stakingTime > 30 days){\r\n            unstakeFee = unstakeFee1;\r\n        }\r\n        else if(stakingTime > 21 days){\r\n            unstakeFee = unstakeFee2;\r\n        }\r\n        else if(stakingTime > 14 days){\r\n            unstakeFee = unstakeFee3;\r\n        }\r\n        else if(stakingTime > 7 days){\r\n            unstakeFee = unstakeFee4;\r\n        }\r\n        else{\r\n            unstakeFee = unstakeFee5;\r\n        }\r\n        \r\n        uint256 fee = amount * unstakeFee / 100;\r\n        _totalFee = _totalFee + fee;\r\n\r\n        tokenAddress.transfer(msg.sender, amount - fee);\r\n        tokenAddress.transfer(feeAddress, fee);\r\n\r\n        emit UnStaked(msg.sender, amount, unstakeFee);\r\n    }\r\n\r\n    /*\r\n        Harvest rewardings\r\n    */\r\n    function harvest(uint256 amount) external {\r\n        _updateRewards(msg.sender);\r\n        require(_rewardCapacity >= amount, \"Harvest Rewarding: not enough reward capacity.\");\r\n        require(amount > 0 && stakerInfos[msg.sender].reward >= amount, \"Harvest Rewarding: not enough rewards\");\r\n\r\n        stakerInfos[msg.sender].reward = stakerInfos[msg.sender].reward - amount;\r\n        \r\n        _totalHarvest = _totalHarvest + amount;\r\n        _rewardCapacity = _rewardCapacity - amount;\r\n        \r\n        uint256 fee = amount * harvestFee / 100;\r\n\r\n        _totalFee = _totalFee + fee;\r\n        \r\n        tokenAddress.transfer(msg.sender, amount - fee);\r\n        tokenAddress.transfer(feeAddress, fee);\r\n\r\n        emit Harvest(msg.sender, amount, harvestFee);\r\n    }\r\n\r\n    /*\r\n        Get amount of staked token per user\r\n    */\r\n    function balanceOfStakes() external view returns (uint256){\r\n        return stakerInfos[msg.sender].stake;\r\n    }\r\n    \r\n    /*\r\n        Get all amount of staked token per user\r\n    */\r\n    function balanceOfStakes(address user) external view returns (uint256){\r\n        return stakerInfos[user].stake;\r\n    }\r\n\r\n    /*\r\n        Get amount of staked token per user\r\n        set offset and size because of limit of return value\r\n    */\r\n    function exportStakingInfos(uint256 offSet, uint256 size) external view returns (address[] memory, uint256[] memory){\r\n        require(offSet < stakerLength, \"Export Staking Infos: invalid offset.\");\r\n        require(size > 0 && offSet + size <= stakerLength, \"Export Staking Infos: invalid size.\");\r\n        address[] memory users = new address[](size);\r\n        uint256[] memory amounts = new uint256[](size);\r\n\r\n        uint256 index = 0;\r\n        for(uint256 i = offSet; i < offSet + size; i ++){\r\n            users[index] = stakers[i];\r\n            amounts[index] = stakerInfos[stakers[i]].stake;\r\n            index ++;\r\n        }\r\n        return (users, amounts);\r\n    }\r\n\r\n    /*\r\n        Get reward amounts\r\n    */\r\n    function balanceOfRewards() external view returns(uint256){\r\n        return _balanceOfRewards(msg.sender);\r\n    }\r\n\r\n    function _balanceOfRewards(address staker) private view returns(uint256){\r\n        return stakerInfos[msg.sender].reward + _calculateAddingRewards(staker);\r\n    }\r\n\r\n    /* ------------------------------ Admin Functions --------------------------------- */\r\n    /*\r\n        Deposit token for rewarding by admin\r\n        note - user should call the token address and approve for the amount for this contract\r\n    */\r\n    function adminDepositReward(uint256 amount) external onlyOwner {\r\n        _rewardCapacity = _rewardCapacity + amount;\r\n        \r\n        tokenAddress.transferFrom(msg.sender, address(this), amount);\r\n        emit AdminDeposit(msg.sender, amount);\r\n    }\r\n\r\n    /*\r\n        Withdraw rewarding token by admin\r\n    */\r\n    function adminWithdrawReward(uint256 amount) external onlyOwner {\r\n        uint256 pendingRewards = _totalRewards + _calculateTotalAddingRewards() - _totalHarvest;\r\n        require(_rewardCapacity - pendingRewards >= amount, \"Admin Witdraw Rewards: not enough rewards capacity to withdraw\");\r\n        _rewardCapacity = _rewardCapacity - amount;\r\n\r\n        tokenAddress.transfer(msg.sender, amount);\r\n        emit AdminWithdraw(msg.sender, amount);\r\n    }\r\n\r\n    /*\r\n        Get rewards of staker\r\n    */\r\n    function adminRewards(address staker) public view onlyOwner returns(uint256){\r\n        return _balanceOfRewards(staker);\r\n    }\r\n\r\n    /*\r\n        Start or stop staking logic by admin\r\n    */\r\n    function adminSetRunning(bool running_) public onlyOwner{\r\n        if(running_ == isRunning) return;\r\n        _updateAllRewards();\r\n        isRunning = running_;\r\n        emit AdminUpdatedRunning(isRunning);\r\n    }\r\n\r\n    /*\r\n        Start or stop staking logic by admin\r\n        no update rewards\r\n    */\r\n    function adminSetRunningNoRewards(bool running_) public onlyOwner{\r\n        if(running_ == isRunning) return;\r\n        // _updateAllRewards();\r\n        isRunning = running_;\r\n        emit AdminUpdatedRunningNoRewards(isRunning);\r\n    }\r\n\r\n    /*\r\n        Update Rewardings for split stakers\r\n    */\r\n    function adminUpdateRewards(uint256 offSet, uint256 size) external onlyOwner {\r\n        require(offSet < stakerLength, \"Update All Rewards: invalid offset.\");\r\n        require(size > 0 && offSet + size <= stakerLength, \"Update All Rewards: invalid size.\");\r\n        for(uint256 i = offSet; i < offSet + size; i++){\r\n            _updateRewards(stakers[i]);\r\n        }\r\n        emit AdminUpdatedRewards(offSet, size);\r\n    }\r\n\r\n\r\n    /*\r\n        Get Total Rewards, Harvest, Completed Harvest\r\n    */\r\n    function adminTotalRewardAndHarvest() public view onlyOwner returns(uint256, uint256, uint256, uint256){\r\n        uint256 totalAdding = _calculateTotalAddingRewards();\r\n        return (_rewardCapacity, _totalRewards + totalAdding, _totalHarvest, _totalFee);\r\n    }\r\n\r\n    /* \r\n        Update APY\r\n    params:\r\n        - totalSupply: total amount of rewarding tokens\r\n        - totalStakingPeriodDays: total time of staking for tokens by months\r\n    */\r\n    function adminUpdateAPY(uint256 totalSupply_, uint256 totalPeriods_) public onlyOwner{\r\n        require(totalSupply_ >= 1e4 * (10 ** decimal), \"Admin Update APY: Not Enough Supply Amount, bigger than 10K\");\r\n        require(totalPeriods_ > 0, \"Contract Constructor: Not Enough Staking Period, bigger than 1 (months)\");\r\n\r\n        _updateAllRewards();\r\n        totalSupply = totalSupply_;\r\n        totalStakingPeriodDays = totalPeriods_;\r\n        _updateRewardAmountPerSecond();\r\n\r\n        emit AdminUpdatedAPY(totalSupply, totalStakingPeriodDays);\r\n    }\r\n\r\n    /* \r\n        Update APY\r\n    params:\r\n        - totalSupply: total amount of rewarding tokens\r\n        - totalStakingPeriodDays: total time of staking for tokens by months\r\n        no update rewards\r\n    */\r\n    function adminUpdateAPYNoRewards(uint256 totalSupply_, uint256 totalPeriods_) public onlyOwner{\r\n        require(totalSupply_ >= 1e4 * (10 ** decimal), \"Admin Update APY: Not Enough Supply Amount, bigger than 10K\");\r\n        require(totalPeriods_ > 0, \"Contract Constructor: Not Enough Staking Period, bigger than 1 (months)\");\r\n\r\n        // _updateAllRewards();\r\n        totalSupply = totalSupply_;\r\n        totalStakingPeriodDays = totalPeriods_;\r\n        _updateRewardAmountPerSecond();\r\n\r\n        emit AdminUpdatedAPYNoRewards(totalSupply, totalStakingPeriodDays);\r\n    }\r\n\r\n    function adminUpdateHarvestFee(uint fee) public onlyOwner{\r\n        harvestFee = fee;\r\n\r\n        emit AdminUpdatedHarvestFee(fee);\r\n    }\r\n\r\n    function adminUpdateUnstakeFee1(uint fee) public onlyOwner{\r\n        unstakeFee1 = fee;\r\n\r\n        emit AdminUpdatedUnstakeFee1(fee);\r\n    }\r\n\r\n    function adminUpdateUnstakeFee2(uint fee) public onlyOwner{\r\n        unstakeFee2 = fee;\r\n\r\n        emit AdminUpdatedUnstakeFee2(fee);\r\n    }\r\n\r\n    function adminUpdateUnstakeFee3(uint fee) public onlyOwner{\r\n        unstakeFee3 = fee;\r\n\r\n        emit AdminUpdatedUnstakeFee3(fee);\r\n    }\r\n\r\n    function adminUpdateUnstakeFee4(uint fee) public onlyOwner{\r\n        unstakeFee4 = fee;\r\n\r\n        emit AdminUpdatedUnstakeFee4(fee);\r\n    }\r\n\r\n    function adminUpdateUnstakeFee5(uint fee) public onlyOwner{\r\n        unstakeFee5 = fee;\r\n\r\n        emit AdminUpdatedUnstakeFee5(fee);\r\n    }\r\n\r\n    function adminUpdateFeeAddress(address address_) public onlyOwner{\r\n        require(address_ != address(0), \"Admin Update Fee Address: Invalid address\");\r\n\r\n        feeAddress = address_;\r\n\r\n        emit AdminUpdatedFeeAddress(address_);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakingPeriodDays_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"harvestFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeFee1_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeFee2_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeFee3_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeFee4_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeFee5_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPeriods_\",\"type\":\"uint256\"}],\"name\":\"AdminUpdatedAPY\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPeriods_\",\"type\":\"uint256\"}],\"name\":\"AdminUpdatedAPYNoRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeAddress_\",\"type\":\"address\"}],\"name\":\"AdminUpdatedFeeAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"AdminUpdatedHarvestFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offSet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"AdminUpdatedRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"AdminUpdatedRunning\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"AdminUpdatedRunningNoRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"AdminUpdatedUnstakeFee1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"AdminUpdatedUnstakeFee2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"AdminUpdatedUnstakeFee3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"AdminUpdatedUnstakeFee4\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"AdminUpdatedUnstakeFee5\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"UnStaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminDepositReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"adminRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"running_\",\"type\":\"bool\"}],\"name\":\"adminSetRunning\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"running_\",\"type\":\"bool\"}],\"name\":\"adminSetRunningNoRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminTotalRewardAndHarvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPeriods_\",\"type\":\"uint256\"}],\"name\":\"adminUpdateAPY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPeriods_\",\"type\":\"uint256\"}],\"name\":\"adminUpdateAPYNoRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"adminUpdateFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"adminUpdateHarvestFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offSet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"adminUpdateRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"adminUpdateUnstakeFee1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"adminUpdateUnstakeFee2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"adminUpdateUnstakeFee3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"adminUpdateUnstakeFee4\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"adminUpdateUnstakeFee5\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminWithdrawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOfStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offSet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"exportStakingInfos\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRunning\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakingPeriodDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeFee1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeFee2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeFee3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeFee4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeFee5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CSPDStaking", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000ef9481115ff33e94d3e28a52d3a8f642bf3521e500000000000000000000000000000000000000000000021e19e0c9bab2400000000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000084f437ae20f77d3e81fa352a5ffe546249517abd000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000028", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ca706f7196ef91c230d420ba8fffa076f9729d63c9b0c6e006a9bbbf6976d41b"}