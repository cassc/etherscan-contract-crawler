{"SourceCode": "pragma solidity 0.8.17;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function sync() external;\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n    constructor (address token) {\r\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n}\r\n\r\nabstract contract BaseToken is IERC20, Ownable {\r\n    \r\n    struct Info{\r\n      uint112 lpAmount;\r\n      uint112 lpRewardAmount;\r\n    }\r\n\r\n    bool private inSwap;\r\n    uint8 private constant _decimals=9;  \r\n    uint32 public immutable firstDate = uint32(block.timestamp/86400);\r\n\r\n    uint256 private immutable _totalSupply;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 public limitAmount;\r\n    uint256 public addPriceTokenAmount; \r\n\r\n    ISwapRouter private _swapRouter;\r\n    TokenDistributor private _tokenDistributor;\r\n    address private _marketAddress;\r\n    address private _wbnbAddress;\r\n    address private _wbnbPairAddress;\r\n    address private _dappAddress;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _feeWhiteList;\r\n    mapping(address => bool) private _swapPairMap;\r\n    mapping(uint => Info) private _dailyLpInfo;\r\n\r\n\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (string memory Name, string memory Symbol, uint256 Supply, address RouterAddress, address WbnbAddress, address marketAddress, address receiveAddress, address dappAddress){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        _wbnbAddress = WbnbAddress;\r\n        _dappAddress = dappAddress;\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][RouterAddress] = MAX;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        _wbnbPairAddress = swapFactory.createPair(address(this), WbnbAddress);\r\n        _swapPairMap[_wbnbPairAddress] = true;\r\n\r\n        uint256 total = Supply * 10**_decimals;\r\n        _totalSupply = total;\r\n\r\n        _balances[dappAddress] = 9900000*10**_decimals; \r\n        emit Transfer(address(0), dappAddress, _balances[dappAddress]);   \r\n\r\n        _balances[receiveAddress] = total - _balances[dappAddress];\r\n        emit Transfer(address(0), receiveAddress, _balances[receiveAddress]);\r\n\r\n\r\n        _marketAddress = marketAddress;\r\n\r\n        _feeWhiteList[marketAddress] = true;\r\n        _feeWhiteList[receiveAddress] = true;\r\n        _feeWhiteList[dappAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        _feeWhiteList[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n\r\n        limitAmount = 10*10**_decimals;\r\n        addPriceTokenAmount = 10**_decimals/10000;\r\n        _tokenDistributor = new TokenDistributor(WbnbAddress);\r\n    }\r\n\r\n    function getAddresses() external view returns (address pairAddress, address routerAddress, address wbnbAddress, address marketAddress, address tokenDistributor){\r\n        pairAddress=_wbnbPairAddress;\r\n        routerAddress=address(_swapRouter);\r\n        marketAddress=_marketAddress;\r\n        wbnbAddress=_wbnbAddress;\r\n        tokenDistributor = address(_tokenDistributor);\r\n    }\r\n\r\n    function getDateLpInfo(uint date) external view returns(uint lpAmount, uint lpRewardAmount) {\r\n        lpAmount = _dailyLpInfo[date].lpAmount;\r\n        lpRewardAmount = _dailyLpInfo[date].lpRewardAmount;\r\n    }\r\n    \r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external pure override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) external view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    \r\n    function _isLiquidity(address from,address to) internal view returns(bool isAdd,bool isDel){        \r\n        (uint r0,uint r1,) = IUniswapV2Pair(_wbnbPairAddress).getReserves();\r\n        uint rWbnb = r0;  \r\n        uint bWbnb = IERC20(_wbnbAddress).balanceOf(_wbnbPairAddress);      \r\n        if(address(this)<_wbnbAddress){ \r\n            rWbnb = r1; \r\n        }\r\n        if( _swapPairMap[to] ){ \r\n            if( bWbnb >= rWbnb ){\r\n                isAdd = bWbnb - rWbnb >= addPriceTokenAmount; \r\n            }\r\n        }\r\n        if( _swapPairMap[from] ){   \r\n            isDel = bWbnb <= rWbnb;  \r\n        }\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {       \r\n        require(amount > 0, \"transfer amount must be >0\");\r\n        uint date=block.timestamp/86400;\r\n        if(_dailyLpInfo[date].lpAmount==0) _dailyLpInfo[date].lpAmount = uint112(IERC20(_wbnbPairAddress).totalSupply());\r\n\r\n        ( bool isAddLiquidity, bool isDelLiquidity) = _isLiquidity(from,to);\r\n        \r\n        if (_feeWhiteList[from] || _feeWhiteList[to] || isAddLiquidity || isDelLiquidity){\r\n            \r\n            _tokenTransfer(from, to, amount);\r\n        }else if(_swapPairMap[from] || _swapPairMap[to]){            \r\n\r\n            if (_swapPairMap[to]) { \r\n                \r\n                require(amount <= (_balances[from])*99999/100000, \"sell amount exceeds balance 99.999%\");                   \r\n                if(!inSwap) swapWbnb(date) ;\r\n            }                       \r\n            _tokenTransfer(from, to, amount*98/100);\r\n            _tokenTransfer(from, address(this), amount*2/100); \r\n             \r\n        }else{\r\n            if(!inSwap) swapWbnb(date) ;\r\n            _tokenTransfer(from, to, amount);\r\n        }\r\n    }\r\n    \r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        _balances[recipient] = _balances[recipient] + tAmount;\r\n        emit Transfer(sender, recipient, tAmount);\r\n    }\r\n\r\n    function swapWbnb(uint date) internal lockTheSwap {\r\n        uint waitForSwapAmount = _balances[address(this)];\r\n        if (waitForSwapAmount < limitAmount) return;\r\n        address tokenDistributor = address(_tokenDistributor);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _wbnbAddress;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            waitForSwapAmount,\r\n            0,\r\n            path,\r\n            tokenDistributor,\r\n            block.timestamp\r\n        );        \r\n        IERC20 WBNB = IERC20(_wbnbAddress);\r\n        uint256 wbnbBalance = WBNB.balanceOf(tokenDistributor)/2;\r\n        WBNB.transferFrom(tokenDistributor, _marketAddress, wbnbBalance); \r\n        WBNB.transferFrom(tokenDistributor, _dappAddress, wbnbBalance); \r\n        \r\n        _dailyLpInfo[date].lpRewardAmount+=uint112(wbnbBalance);\r\n    }\r\n\r\n    function setLimitAmount(uint256 amount) external onlyOwner {\r\n        limitAmount = amount * 1e18;\r\n    }\r\n\r\n    function setMarketAddress(address addr) external onlyOwner {\r\n        _marketAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setDappAddress(address addr) external onlyOwner {\r\n        _dappAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyOwner {\r\n        _feeWhiteList[addr] = enable;\r\n    }    \r\n\r\n    function setSwapPairMap(address addr, bool enable) external onlyOwner {\r\n        _swapPairMap[addr] = enable;\r\n    }\r\n\r\n    function setAddPriceTokenAmount(uint amount) external onlyOwner{\r\n        addPriceTokenAmount = amount;\r\n    }\r\n}\r\n\r\ncontract Sickle is BaseToken {\r\n    constructor(address dappAddress) BaseToken(\r\n        \"Sickle\",\r\n        \"SIC\",\r\n        10000000,\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E), \r\n        address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c), \r\n        address(0x4B94cCcD43E60E748043a78d9d3Dbe6cCD948254), \r\n        address(0x4B94cCcD43E60E748043a78d9d3Dbe6cCD948254), \r\n        dappAddress\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dappAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addPriceTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstDate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wbnbAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenDistributor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"getDateLpInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpRewardAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAddPriceTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setDappAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLimitAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setMarketAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairMap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Sickle", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "000000000000000000000000d13150d6a5d79b7ca054c43d11f27b5c81a3c090", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1d1efe2b312ec47acf24bb0e22554dd27a8f264ce603661d54f568f03ce2cdc3"}