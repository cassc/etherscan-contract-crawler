{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.14;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function sync() external;\r\n}\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\nlibrary SafeMath {\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n    return c;\r\n  }\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\ncontract TokenDistributor {\r\n    constructor (address token) {\r\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n}\r\n\r\ncontract Mars is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address public fundAddress;\r\n    address public ecoAddress;\r\n    address public holdersRewardAddress;\r\n\r\n\r\n    string private _name = \"MARS\";\r\n    string private _symbol = \"MARS\";\r\n    uint8 private _decimals = 18;\r\n\r\n\r\n    mapping(address => bool) public _feeWhiteList;\r\n    mapping(address => bool) public _blackList;\r\n\r\n    uint256 private _tTotal;\r\n\r\n    ISwapRouter public _swapRouter;\r\n    address public _usdt;\r\n    mapping(address => bool) public _swapPairList;\r\n    address public mainPair;\r\n\r\n    bool private inSwap;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    TokenDistributor public _tokenDistributor;\r\n\r\n    //buy\r\n    uint256 private _buyLpFee = 100;\r\n    uint256 private _buyholdersFiftyFee = 200;\r\n    uint256 private _buystudioFee = 150;\r\n    uint256 private _buyBurnFee = 50;\r\n\r\n    //sell\r\n    uint256 private _sellLpFee = 100;\r\n    uint256 private _sellHoldersTfiveFee = 300;\r\n    uint256 private _sellFundFee = 100;\r\n\r\n    uint256 public maxBurn = 2000000 * 10 ** _decimals;\r\n    address public constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    uint256 public constant MAX_UINT256 = type(uint256).max;\r\n    uint256 private constant MAX_SUPPLY = 3000000000 * 1e18;\r\n\r\n    //rebase\r\n\r\n    uint256 private TOTAL_GONS;\r\n    // uint256 public _startRebaseTime;\r\n    uint256 public _lastRebasedTime;\r\n    uint256 public _rebaseCycle = 15 minutes;\r\n    uint256 private _gonsPerFragment;\r\n    uint256 public pairBalance;\r\n    uint256 public rebaseRate = 5195;\r\n\r\n    uint256 public tradeNumLimit = 1;\r\n    uint256 public tradeCycle = 86400;\r\n    mapping(address => uint256) public _lastTradeTime;\r\n    mapping(address => uint256) public _tradeNum;\r\n    mapping(address => bool) public _excluedFromTradeLimit;\r\n\r\n    //max fall\r\n    uint256 public sellMaxFee = 3000; // 35%\r\n    uint256 public tokenPrice; // current price\r\n    uint256 public OpenPrice; // today open price\r\n    uint256 public OpenTime;\r\n    bool public pricePreventEnable = true;\r\n\r\n    uint256 public limitUpRate = 1000;//10%\r\n    uint256 public maxBuyAmount = 1000*10**_decimals;\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (\r\n    ){\r\n        ISwapRouter swapRouter = ISwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);// test 0xD99D1c33F9fC3444f8101754aBC46c52416550D1\r\n        _usdt = 0x55d398326f99059fF775485246999027B3197955;// test 0xD1ac1D9DA7E07098F6d6d7Bf0906D295F9509f3B\r\n        IERC20(_usdt).approve(address(swapRouter), MAX);\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        address swapPair = swapFactory.createPair(address(this), _usdt);\r\n        _swapPairList[swapPair] = true;\r\n        mainPair = swapPair;\r\n        _tTotal = 2000000 * 10 ** _decimals;\r\n\r\n        TOTAL_GONS = MAX_UINT256 / 1e10 - (MAX_UINT256 / 1e10 % _tTotal);\r\n        _balances[owner()] = TOTAL_GONS;\r\n        _gonsPerFragment = TOTAL_GONS / _tTotal;\r\n\r\n\r\n        fundAddress = 0x8017639C234C9Ef4F5b5a01710E8B56333EC393a;\r\n        ecoAddress = 0xF41d6190Ce1491497303BdB5961F7Bc255D620A3;\r\n        holdersRewardAddress = 0x8855044FB0D545735BCfB865cD44FFF08B40455e;\r\n        address ReceiveAddress = msg.sender;\r\n        emit Transfer(address(0), ReceiveAddress, _tTotal);\r\n\r\n        _feeWhiteList[fundAddress] = true;\r\n        _feeWhiteList[ecoAddress] = true;\r\n        _feeWhiteList[holdersRewardAddress] = true;\r\n        _feeWhiteList[ReceiveAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(swapRouter)] = true;\r\n        _feeWhiteList[owner()] = true;\r\n\r\n        _excluedFromTradeLimit[address(swapRouter)] = true;\r\n        _excluedFromTradeLimit[address(this)] = true;\r\n        _excluedFromTradeLimit[address(ReceiveAddress)] = true;\r\n        _excluedFromTradeLimit[address(fundAddress)] = true;\r\n        _excluedFromTradeLimit[address(ecoAddress)] = true;\r\n        _excluedFromTradeLimit[address(holdersRewardAddress)] = true;\r\n        _excluedFromTradeLimit[address(DEAD)] = true;\r\n        _excluedFromTradeLimit[swapPair] = true;\r\n        _excluedFromTradeLimit[owner()] = true;\r\n\r\n        _tokenDistributor = new TokenDistributor(_usdt);\r\n    }\r\n\r\n    function setFeeWhiteList(address _addr, bool _state) public onlyOwner {\r\n        _feeWhiteList[_addr] = _state;\r\n    }\r\n    function setTradeLimit(uint256 _num, uint256 _cycle) public onlyOwner {\r\n        tradeNumLimit = _num;\r\n        tradeCycle = _cycle;\r\n    }\r\n    function setExcluedFromTradeLimit(address _addr, bool _state) public onlyOwner {\r\n        _excluedFromTradeLimit[_addr] = _state;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (account == mainPair){\r\n            return pairBalance;\r\n        }else{\r\n            return _balances[account] / _gonsPerFragment;\r\n        }\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(!_blackList[from], \"blackList\");\r\n        uint256 balance = balanceOf(from);\r\n        require(balance >= amount, \"balanceNotEnough\");\r\n        _rebase(from);\r\n\r\n         //trade limit\r\n        if (!_excluedFromTradeLimit[from]){\r\n            if(_lastTradeTime[from] == 0){\r\n                _lastTradeTime[from] = block.timestamp;\r\n            }else if(_lastTradeTime[from] < block.timestamp - tradeCycle){\r\n                _lastTradeTime[from] += tradeCycle;\r\n                _tradeNum[from] = 0;\r\n            }\r\n            require(_tradeNum[from] + 1 <= tradeNumLimit, \"from tradeNumLimit\");\r\n            _tradeNum[from] += 1;\r\n        }\r\n        if (!_excluedFromTradeLimit[to]){\r\n            if(_lastTradeTime[to] == 0){\r\n                _lastTradeTime[to] = block.timestamp;\r\n            }else if(_lastTradeTime[to] < block.timestamp - tradeCycle){\r\n                _lastTradeTime[to] += tradeCycle;\r\n                _tradeNum[from] = 0;\r\n            }\r\n            require(_tradeNum[to] + 1 <= tradeNumLimit, \"to tradeNumLimit\");\r\n            _tradeNum[to] += 1;\r\n        }\r\n\r\n        bool takeFee;\r\n        bool isSell;\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            \r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                if (_swapPairList[to]) {\r\n                    if (!inSwap) {\r\n                        uint256 contractTokenBalance = balanceOf(address(this));\r\n                        if (contractTokenBalance > 0) {\r\n                            uint256 swapFee = _buyLpFee + _buyholdersFiftyFee + _buystudioFee + _sellFundFee + _sellHoldersTfiveFee + _sellLpFee;\r\n                            uint256 numTokensSellToFund = amount * swapFee / 5000;\r\n                            if (numTokensSellToFund > contractTokenBalance) {\r\n                                numTokensSellToFund = contractTokenBalance;\r\n                            }\r\n                            swapTokenForFund(numTokensSellToFund, swapFee);\r\n                        }\r\n                    }\r\n                }\r\n                takeFee = true;\r\n            }\r\n            if (_swapPairList[to]) {\r\n                isSell = true;\r\n            }\r\n        }\r\n        _tokenTransfer(from, to, amount, takeFee, isSell);\r\n    }\r\n    function _funTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount = tAmount * 75 / 100;\r\n        _takeTransfer(\r\n            sender,\r\n            fundAddress,\r\n            feeAmount\r\n        );\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n    function _rebase(address from) private {\r\n        if (\r\n            _tTotal < MAX_SUPPLY &&\r\n            from != mainPair  &&\r\n            !inSwap &&\r\n            _lastRebasedTime > 0 &&\r\n            block.timestamp >= (_lastRebasedTime + _rebaseCycle)\r\n        ) {\r\n            uint256 deltaTime = block.timestamp - _lastRebasedTime;\r\n            uint256 times = deltaTime / (_rebaseCycle);\r\n            uint256 epoch = times * 15;\r\n\r\n            for (uint256 i = 0; i < times; i++) {\r\n                _tTotal = _tTotal\r\n                * (10 ** 8 + rebaseRate)\r\n                / (10 ** 8);\r\n            }\r\n            _gonsPerFragment = TOTAL_GONS / _tTotal;\r\n            _lastRebasedTime = _lastRebasedTime + times * _rebaseCycle;\r\n            emit LogRebase(epoch, _tTotal);\r\n        }\r\n    }\r\n\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        bool isSell\r\n    ) private {\r\n         uint256 gonAmount = tAmount * _gonsPerFragment;\r\n        if (sender == mainPair){\r\n            pairBalance = pairBalance - tAmount;\r\n        }else{\r\n            _balances[sender] = _balances[sender] - gonAmount;\r\n        }\r\n        uint256 feeAmount;\r\n\r\n        if (takeFee) {\r\n            (uint256 dynSellFee,bool stopBuy) = pricePrevent();\r\n            uint256 burnFee;\r\n            uint256 swapFee;\r\n            if (isSell) {\r\n                swapFee = _sellLpFee + _sellHoldersTfiveFee + _sellFundFee;\r\n                if(dynSellFee > 0){\r\n                    burnFee += dynSellFee;\r\n                }\r\n            } else {\r\n                require(tAmount <= maxBuyAmount,\"over max buy amount\");\r\n                require(!stopBuy, \"Increase too more\");\r\n                swapFee = _buyLpFee + _buyholdersFiftyFee + _buystudioFee;\r\n                if(balanceOf(DEAD) < maxBurn){\r\n                    burnFee = _buyBurnFee;\r\n                }\r\n            }\r\n            uint256 swapAmount = tAmount * swapFee / 10000;\r\n            if (swapAmount > 0) {\r\n                feeAmount += swapAmount;\r\n                _takeTransfer(\r\n                    sender,\r\n                    address(this),\r\n                    swapAmount\r\n                );\r\n            }\r\n            uint256 burnAmount = tAmount * burnFee / 10000;\r\n            if (burnAmount > 0) {\r\n                _takeTransfer(sender, DEAD, burnAmount);\r\n            }\r\n            feeAmount += burnAmount;\r\n        }\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function swapTokenForFund(uint256 tokenAmount, uint256 swapFee) private lockTheSwap {\r\n        swapFee += swapFee;\r\n        uint256 lpFee = _buyLpFee + _sellLpFee;\r\n        uint256 lpAmount = tokenAmount * lpFee / swapFee;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _usdt;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount - lpAmount,\r\n            0,\r\n            path,\r\n            address(_tokenDistributor),\r\n            block.timestamp\r\n        );\r\n\r\n        swapFee -= lpFee;\r\n\r\n        IERC20 USDT = IERC20(_usdt);\r\n        uint256 usdtBalance = USDT.balanceOf(address(_tokenDistributor));\r\n        uint256 studioAmount = usdtBalance * _buystudioFee * 2 / swapFee;\r\n        if (studioAmount > 0) {\r\n            USDT.transferFrom(address(_tokenDistributor), fundAddress, studioAmount);\r\n        }\r\n        uint256 ecoAmount = usdtBalance * _sellFundFee * 2 / swapFee;\r\n        if (ecoAmount > 0) {\r\n            USDT.transferFrom(address(_tokenDistributor), ecoAddress, ecoAmount);\r\n        }\r\n        uint256 holderFiftyAmount = usdtBalance * _buyholdersFiftyFee * 2 / swapFee;\r\n        uint256 holderTfiveAmount = usdtBalance * _sellHoldersTfiveFee * 2 / swapFee;\r\n        if (holderFiftyAmount > 0 || holderTfiveAmount > 0) {\r\n            USDT.transferFrom(address(_tokenDistributor), holdersRewardAddress, holderFiftyAmount + holderTfiveAmount);\r\n        }\r\n        USDT.transferFrom(address(_tokenDistributor), address(this), usdtBalance-studioAmount-ecoAmount-holderFiftyAmount-holderTfiveAmount);\r\n        if (lpAmount > 0) {\r\n            uint256 lpFist = usdtBalance * lpFee / swapFee;\r\n            if (lpFist > 0) {\r\n                _swapRouter.addLiquidity(\r\n                    address(this), _usdt, lpAmount, lpFist, 0, 0, fundAddress, block.timestamp\r\n                );\r\n            }\r\n        }\r\n        emit FeesDistribution(holderTfiveAmount, holderFiftyAmount, studioAmount, ecoAmount);\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        uint256 gonAmount = tAmount * _gonsPerFragment;\r\n        if (to == mainPair){\r\n            pairBalance = pairBalance + tAmount;\r\n        }else{\r\n            _balances[to] = _balances[to] + gonAmount;\r\n        }\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n    function setLimitUpRate(uint256 _limitUp) external onlyOwner {\r\n        limitUpRate = _limitUp;\r\n    }\r\n    function setFundAddress(address addr) external onlyOwner {\r\n        fundAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n    function setEcoAddress(address addr) external onlyOwner {\r\n        ecoAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n    function setHolderRewardAddress(address addr) external onlyOwner {\r\n        holdersRewardAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n    function setBuyFee(uint256 _lp, uint256 _hd,uint256 _studio,uint256 _burn) external onlyOwner {\r\n        _buyLpFee = _lp;\r\n        _buyholdersFiftyFee = _hd;\r\n        _buystudioFee = _studio;\r\n        _buyBurnFee = _burn;\r\n    }\r\n    function setSellFee(uint256 _lp, uint256 _hd,uint256 _studio) external onlyOwner {\r\n        _sellLpFee = _lp;\r\n        _sellHoldersTfiveFee = _hd;\r\n        _sellFundFee = _studio;\r\n    }\r\n\r\n    function setBlackList(address addr, bool enable) external onlyOwner {\r\n        _blackList[addr] = enable;\r\n    }\r\n    function setPricePreventEnable(bool enable) external onlyOwner {\r\n        pricePreventEnable = enable;\r\n    }\r\n\r\n    function multiBlackList(address[] calldata addresses, bool status) public onlyOwner {\r\n        require(addresses.length < 201);\r\n        for (uint256 i; i < addresses.length; ++i) {\r\n            _blackList[addresses[i]] = status;\r\n        }\r\n    }\r\n    function setSellMaxFee(uint256 _fee) external onlyOwner {\r\n        sellMaxFee = _fee;\r\n    }\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyOwner {\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    function claimBalance() external {\r\n        payable(fundAddress).transfer(address(this).balance);\r\n    }\r\n    function claimToken(address token, uint256 amount) external  {\r\n        IERC20(token).transfer(fundAddress, amount);\r\n    }\r\n    function setMaxBurn(uint256 _num) public onlyOwner {\r\n        maxBurn = _num;\r\n    }\r\n    function setRebaseCycle(uint256 _cycle) public onlyOwner {\r\n        _rebaseCycle = _cycle;\r\n    }\r\n    function setRebaseRate(uint256 _rate) public onlyOwner {\r\n        rebaseRate = _rate;\r\n    }\r\n    function setLastRebaseTime(uint256 _time) public onlyOwner {\r\n        _lastRebasedTime = _time;\r\n    }\r\n    function setMaxAmount(uint256 _maxBuyAmount) public onlyOwner{\r\n        maxBuyAmount = _maxBuyAmount;\r\n    }\r\n    receive() external payable {}\r\n\r\n    function multiTransfer(address from, address[] calldata addresses, uint256[] calldata tokens) external onlyOwner {\r\n        require(addresses.length < 801,\"GAS Error: max airdrop limit is 500 addresses\"); // to prevent overflow\r\n        require(addresses.length == tokens.length,\"Mismatch between Address and token count\");\r\n        uint256 SCCC = 0;\r\n        for(uint i=0; i < addresses.length; i++){\r\n            SCCC = SCCC + tokens[i];\r\n        }\r\n        require(balanceOf(from) >= SCCC, \"Not enough tokens in wallet\");\r\n        _balances[from] -= SCCC;\r\n        for(uint i=0; i < addresses.length; i++){\r\n            _takeTransfer(from,addresses[i],tokens[i]);\r\n        }\r\n    }\r\n    function pricePrevent() public returns (uint256 dynamicFee,bool stopBuy) {\r\n        updatePrice();\r\n        if(pricePreventEnable == false || OpenPrice == 0){\r\n            return (0,false);\r\n        }\r\n        if(OpenPrice > tokenPrice){\r\n            uint256 gtNum = OpenPrice - tokenPrice;\r\n            uint256 fiveRateFee = OpenPrice.mul(5).div(100);\r\n            if(gtNum > fiveRateFee){\r\n                dynamicFee = uint256(gtNum.mul(10000).div(OpenPrice));\r\n                if(sellMaxFee < dynamicFee){\r\n                    dynamicFee = sellMaxFee;//max\r\n                }\r\n            }\r\n        }else if(OpenPrice < tokenPrice){\r\n            uint256 gtNum = tokenPrice - OpenPrice;\r\n            uint256 upRate = uint256(gtNum.mul(10000).div(OpenPrice));\r\n            if(upRate > limitUpRate){\r\n                stopBuy = true;\r\n            }\r\n        }\r\n    }\r\n    function updatePrice() public{\r\n        uint112 _reserve0;\r\n        uint112 _reserve1;\r\n        uint32 timestamps;\r\n        (_reserve0,_reserve1,timestamps) = IUniswapV2Pair(mainPair).getReserves();\r\n        address token0 = IUniswapV2Pair(mainPair).token0();\r\n        if(token0 == address(this)){\r\n            tokenPrice = uint256(_reserve1).mul(10**18).div(uint256(_reserve0));\r\n        }else{\r\n            tokenPrice = uint256(_reserve0).mul(10**18).div(uint256(_reserve1));\r\n        }\r\n        updateOpenPirce();\r\n    }\r\n\r\n    function updateOpenPirce() private {\r\n        uint256 today = getTodayZeroTime();\r\n        if(OpenTime < today && tokenPrice > 0){\r\n            OpenTime = today;\r\n            OpenPrice = tokenPrice;\r\n        }\r\n    }\r\n    //get today zero time\r\n    function getTodayZeroTime() public view returns (uint256) {\r\n        uint256 nowTime = block.timestamp;\r\n        uint256 zeroTime = nowTime - (nowTime + 28800) % 86400;\r\n        return zeroTime;\r\n    }\r\n\r\n    event FeesDistribution(\r\n        uint256 holdersTfive,\r\n        uint256 holdersFifty,\r\n        uint256 studio,\r\n        uint256 fund\r\n    );\r\n    event LogRebase(uint256 indexed epoch, uint256 totalSupply);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"holdersTfive\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"holdersFifty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"studio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fund\",\"type\":\"uint256\"}],\"name\":\"FeesDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OpenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OpenTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_excluedFromTradeLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastRebasedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lastTradeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rebaseCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_tradeNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ecoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTodayZeroTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdersRewardAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitUpRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"multiBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePrevent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dynamicFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"stopBuy\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePreventEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_studio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burn\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setEcoAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setExcluedFromTradeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setHolderRewardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setLastRebaseTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limitUp\",\"type\":\"uint256\"}],\"name\":\"setLimitUpRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBuyAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"setMaxBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setPricePreventEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cycle\",\"type\":\"uint256\"}],\"name\":\"setRebaseCycle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRebaseRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_studio\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setSellMaxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cycle\",\"type\":\"uint256\"}],\"name\":\"setTradeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeNumLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Mars", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://685fa845d37e66b0ffd431a19dde2892a854a4310cd40475feb2a4f2f1460868"}