{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n   __  __      ____                 __ \r\n  / / / /___  / __/________  ____  / /_\r\n / / / / __ \\/ /_/ ___/ __ \\/ __ \\/ __/\r\n/ /_/ / /_/ / __/ /  / /_/ / / / / /_  \r\n\\____/ .___/_/ /_/   \\____/_/ /_/\\__/  \r\n    /_/                                \r\n\r\n  Multi-Signature Smart-Contract\r\n\r\n  Authors: <dotfx>\r\n  Date: 2023/04/19\r\n  Version: 1.0.0\r\n  Web: https://upfrontdefi.com/\r\n*/\r\n\r\npragma solidity >=0.8.18 <0.9.0;\r\n\r\nlibrary Address {\r\n  function isContract(address _contract) internal view returns (bool) {\r\n    return _contract.code.length > 0;\r\n  }\r\n}\r\n\r\nabstract contract Context {\r\n  function _msgSender() internal view virtual returns (address) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view virtual returns (bytes calldata) {\r\n    return msg.data;\r\n  }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() {\r\n    _setOwner(_msgSender());\r\n  }\r\n\r\n  function owner() public view virtual returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  modifier isOwner() virtual {\r\n    require(_msgSender() == _owner, \"Caller must be the owner.\");\r\n\r\n    _;\r\n  }\r\n\r\n  function renounceOwnership() external virtual isOwner {\r\n    _setOwner(address(0));\r\n  }\r\n\r\n  function transferOwnership(address newOwner) external virtual isOwner {\r\n    require(newOwner != address(0));\r\n\r\n    _setOwner(newOwner);\r\n  }\r\n\r\n  function _setOwner(address newOwner) internal {\r\n    address oldOwner = _owner;\r\n    _owner = newOwner;\r\n\r\n    emit OwnershipTransferred(oldOwner, newOwner);\r\n  }\r\n}\r\n\r\nabstract contract ReentrancyGuard is Ownable {\r\n  bool internal locked;\r\n\r\n  modifier nonReEntrant() {\r\n    require(!locked, \"No re-entrancy.\");\r\n\r\n    locked = true;\r\n    _;\r\n    locked = false;\r\n  }\r\n}\r\n\r\ncontract upfrontMultiSignatureWallet is ReentrancyGuard {\r\n  uint256 private PROPOSAL_DEADLINE;\r\n  uint256 private PROPOSAL_QUORUM;\r\n  uint256 private PROPOSAL_THRESHOLD;\r\n  address private EXECUTOR_ADDRESS;\r\n  bool private initialized;\r\n\r\n  struct managerDataStruct {\r\n    bool exists;\r\n    bool active;\r\n  }\r\n\r\n  struct delegateDataStruct {\r\n    bool exists;\r\n    mapping(address => delegateRelationDataStruct) relation;\r\n    address[] relationList;\r\n  }\r\n\r\n  struct delegateRelationDataStruct {\r\n    bool exists;\r\n    bool active;\r\n    uint256 timestamp;\r\n  }\r\n\r\n  struct proposalDataStruct {\r\n    bool exists;\r\n    bool approved;\r\n    uint256 created;\r\n    uint256 start;\r\n    uint256 end;\r\n    uint256 closed;\r\n    uint256 executed;\r\n    address creator;\r\n    string subject;\r\n    string description;\r\n    string canceled;\r\n    address[] target;\r\n    bytes[] data;\r\n    bytes[] response;\r\n    uint256 agreed;\r\n    mapping(address => votedProposalDataStruct) voted;\r\n    address[] votedList;\r\n  }\r\n\r\n  struct votedProposalDataStruct {\r\n    bool exists;\r\n    uint256 timestamp;\r\n    address signer;\r\n    bool agreed;\r\n  }\r\n\r\n  struct proposalReturnStruct {\r\n    bool approved;\r\n    uint256 created;\r\n    uint256 start;\r\n    uint256 end;\r\n    uint256 closed;\r\n    uint256 executed;\r\n    address creator;\r\n    string subject;\r\n    string description;\r\n    string canceled;\r\n    address[] target;\r\n    bytes[] data;\r\n    bytes[] response;\r\n    uint256 agreed;\r\n    votedProposalReturnStruct[] voted;\r\n  }\r\n\r\n  struct votedProposalReturnStruct {\r\n    uint256 timestamp;\r\n    address manager;\r\n    address signer;\r\n    bool agreed;\r\n  }\r\n\r\n  address[] private managerList;\r\n  mapping(address => managerDataStruct) private managerData;\r\n\r\n  address[] private delegateList;\r\n  mapping(address => delegateDataStruct) private delegateData;\r\n\r\n  uint256[] private proposalList;\r\n  mapping(uint256 => proposalDataStruct) private proposalData;\r\n\r\n  event addedManager(address indexed manager);\r\n  event revokedManager(address indexed manager);\r\n  event addedDelegate(address indexed manager, address delegate);\r\n  event revokedDelegate(address indexed manager, address delegate);\r\n  event SubmittedProposal(uint256 indexed id, address indexed creator);\r\n  event CanceledProposal(uint256 indexed id, string reason);\r\n  event ApprovedProposal(uint256 indexed id, uint256 agreed, uint256 total);\r\n  event DeniedProposal(uint256 indexed id, uint256 agreed, uint256 total);\r\n  event VotedProposal(uint256 indexed id, address indexed manager, address signer, bool agreed);\r\n  event ExecutedProposal(uint256 indexed id, address executor);\r\n\r\n  modifier isSelf() {\r\n    if (initialized) { require(msg.sender == address(this), \"Caller must be internal.\"); }\r\n\r\n    _;\r\n  }\r\n\r\n  modifier isManager() {\r\n    require(managerData[_msgSender()].exists && managerData[_msgSender()].active, \"Caller must be manager.\");\r\n\r\n    _;\r\n  }\r\n\r\n  modifier isExecutor() {\r\n    require(_msgSender() == EXECUTOR_ADDRESS, \"Caller must be executor.\");\r\n\r\n    _;\r\n  }\r\n\r\n  modifier isProposal(uint256 id, bool openOnly, bool startedOnly) {\r\n    require(proposalData[id].exists, \"Unknown proposal.\");\r\n\r\n    if (openOnly) {\r\n      require(proposalData[id].closed == 0, \"Proposal closed.\");\r\n\r\n      if (startedOnly) { require(proposalData[id].start <= getCurrentTime(), \"Proposal not yet started.\"); }\r\n    }\r\n\r\n    _;\r\n  }\r\n\r\n  modifier isApproved(uint256 id, bool approved) {\r\n    if (approved) {\r\n      require(proposalData[id].closed > 0 && proposalData[id].approved, \"Proposal not yet approved.\");\r\n    } else {\r\n      require(proposalData[id].closed == 0, \"Proposal closed.\");\r\n    }\r\n\r\n    _;\r\n  }\r\n\r\n  modifier isExecuted(uint256 id, bool executed) {\r\n    if (executed) {\r\n      require(proposalData[id].executed > 0, \"Proposal not yet executed.\");\r\n    } else {\r\n      require(proposalData[id].executed == 0, \"Proposal already executed.\");\r\n    }\r\n\r\n    _;\r\n  }\r\n\r\n  constructor(address[] memory _managers, address _executor, uint256 _deadline, uint256 _quorum, uint256 _threshold) {\r\n    uint256 cnt = _managers.length;\r\n\r\n    require(cnt >= 3, \"Minimum managers not reached.\");\r\n\r\n    unchecked {\r\n      for (uint256 m; m < cnt; m++) {\r\n        address manager = _managers[m];\r\n\r\n        require(manager != address(0), \"Invalid manager.\");\r\n        require(!Address.isContract(manager), \"Invalid manager.\");\r\n        require(!managerData[manager].exists, \"Manager already exists.\");\r\n\r\n        addManager(manager, false);\r\n      }\r\n\r\n      setProposalDeadline(_deadline);\r\n      setProposalQuorum(_quorum == 0 ? cnt / 2 : _quorum);\r\n      setProposalThreshold(_threshold == 0 ? (cnt / 2) + 1 : _threshold);\r\n      setExecutorAddress(_executor);\r\n    }\r\n\r\n    proposalList.push(0);\r\n    proposalData[0].exists = false;\r\n\r\n    initialized = true;\r\n  }\r\n\r\n  function getContractInfo() external view returns (uint256, uint256, uint256) {\r\n    return (PROPOSAL_DEADLINE, PROPOSAL_QUORUM, PROPOSAL_THRESHOLD);\r\n  }\r\n\r\n  function setProposalDeadline(uint256 _time) public isSelf {\r\n    require(_time >= 1 days, \"Deadline cannot be less than 1 day.\");\r\n\r\n    PROPOSAL_DEADLINE = _time;\r\n  }\r\n\r\n  function setProposalQuorum(uint256 _value) public isSelf {\r\n    uint256 managers = _countActiveManagers();\r\n\r\n    unchecked {\r\n      require(_value > 0 && _value <= managers / 2, \"Maximum quorum must be less or equal than half the number of managers.\");\r\n    }\r\n\r\n    PROPOSAL_QUORUM = _value;\r\n  }\r\n\r\n  function setProposalThreshold(uint256 _value) public isSelf {\r\n    uint256 managers = _countActiveManagers();\r\n\r\n    require(_value > 0 && _value < managers, \"Maximum threshold must be less than the number of managers.\");\r\n\r\n    PROPOSAL_THRESHOLD = _value;\r\n  }\r\n\r\n  function setExecutorAddress(address _address) public isSelf {\r\n    require(_address != address(0));\r\n    require(_address != address(this));\r\n\r\n    bool proceed;\r\n    uint256 cnt = managerList.length;\r\n\r\n    unchecked {\r\n      for (uint256 m; m < cnt; m++) {\r\n        if (managerList[m] == _address) { continue; }\r\n\r\n        proceed = true;\r\n      }\r\n    }\r\n\r\n    require(proceed, \"Executor cannot be a manager.\");\r\n\r\n    EXECUTOR_ADDRESS = _address;\r\n  }\r\n\r\n  function addManager(address _manager, bool _adjust) public isSelf {\r\n    require(_manager != address(0));\r\n    require(_manager != address(this));\r\n    require(EXECUTOR_ADDRESS != _manager, \"Executor cannot be a manager.\");\r\n\r\n    if (!managerData[_manager].exists) {\r\n      managerList.push(_manager);\r\n      managerData[_manager].exists = true;\r\n    }\r\n\r\n    managerData[_manager].active = true;\r\n\r\n    unchecked {\r\n      if (_adjust) {\r\n        uint256 managers = _countActiveManagers();\r\n\r\n        setProposalQuorum(managers / 2);\r\n        setProposalThreshold((managers / 2) + 1);\r\n      }\r\n    }\r\n\r\n    emit addedManager(_manager);\r\n  }\r\n\r\n  function revokeManager(address _manager, bool _adjust) public isSelf {\r\n    require(managerData[_manager].exists, \"Unknown manager.\");\r\n\r\n    uint256 managers = _countActiveManagers();\r\n\r\n    require(managers - 1 >= 3, \"Minimum managers not reached.\");\r\n\r\n    unchecked {\r\n      if (_adjust) {\r\n        setProposalQuorum((managers - 1) / 2);\r\n        setProposalThreshold(((managers - 1) / 2) + 1);\r\n      }\r\n    }\r\n\r\n    managerData[_manager].active = false;\r\n\r\n    uint256 cnt = proposalList.length;\r\n\r\n    unchecked {\r\n      for (uint256 p = 1; p < cnt; p++) {\r\n        if (proposalData[p].creator != _manager) { continue; }\r\n        if (bytes(proposalData[p].canceled).length > 0 || (proposalData[p].approved && (proposalData[p].executed > 0 || proposalData[p].target.length == 0))) { continue; }\r\n\r\n        proposalData[p].closed = getCurrentTime();\r\n        proposalData[p].canceled = \"Manager has been revoked.\";\r\n      }\r\n    }\r\n\r\n    emit revokedManager(_manager);\r\n  }\r\n\r\n  function getCurrentTime() internal view returns (uint256) {\r\n    return block.timestamp;\r\n  }\r\n\r\n  function getProposal(uint256 _id) public view isProposal(_id, false, false) returns (proposalReturnStruct memory) {\r\n    proposalReturnStruct memory proposal;\r\n    uint256 cnt = proposalData[_id].votedList.length;\r\n\r\n    proposal.approved = proposalData[_id].approved;\r\n    proposal.created = proposalData[_id].created;\r\n    proposal.start = proposalData[_id].start;\r\n    proposal.end = proposalData[_id].end;\r\n    proposal.closed = proposalData[_id].closed;\r\n    proposal.executed = proposalData[_id].executed;\r\n    proposal.creator = proposalData[_id].creator;\r\n    proposal.subject = proposalData[_id].subject;\r\n    proposal.description = proposalData[_id].description;\r\n    proposal.canceled = proposalData[_id].canceled;\r\n    proposal.target = proposalData[_id].target;\r\n    proposal.data = proposalData[_id].data;\r\n    proposal.response = proposalData[_id].response;\r\n    proposal.agreed = proposalData[_id].agreed;\r\n    proposal.voted = new votedProposalReturnStruct[](cnt);\r\n\r\n    unchecked {\r\n      for (uint256 i; i < cnt; i++) {\r\n        votedProposalDataStruct memory voted = proposalData[_id].voted[proposalData[_id].votedList[i]];\r\n\r\n        proposal.voted[i] = votedProposalReturnStruct(voted.timestamp, proposalData[_id].votedList[i], voted.signer, voted.agreed);\r\n      }\r\n    }\r\n\r\n    return proposal;\r\n  }\r\n\r\n  function cancelProposal(uint256 _id, string memory _reason) public isManager isProposal(_id, true, false) isApproved(_id, false) {\r\n    require(proposalData[_id].exists, \"Unknown proposal.\");\r\n    require(proposalData[_id].creator == msg.sender, \"Not the creator.\");\r\n    require(bytes(_reason).length > 0, \"Specify a reason.\");\r\n\r\n    proposalData[_id].closed = getCurrentTime();\r\n    proposalData[_id].canceled = _reason;\r\n\r\n    emit CanceledProposal(_id, _reason);\r\n  }\r\n\r\n  function voteProposal(uint256 _id, address _manager, bool agree) public isProposal(_id, true, true) isApproved(_id, false) {\r\n    require(managerData[_manager].exists && managerData[_manager].active, \"Unknown manager.\");\r\n    require(proposalData[_id].end > getCurrentTime(), \"Voting deadline expired.\");\r\n\r\n    if (proposalData[_id].voted[_manager].exists) { revert(\"You or your delegate have already voted.\"); }\r\n\r\n    if (_manager == msg.sender) {\r\n      require(managerData[msg.sender].exists && managerData[msg.sender].active, \"Unknown manager.\");\r\n    } else {\r\n      require(getManagerDelegate(_manager) == msg.sender, \"Not authorized to vote.\");\r\n    }\r\n\r\n    proposalData[_id].voted[_manager] = votedProposalDataStruct(true, getCurrentTime(), msg.sender, agree);\r\n    proposalData[_id].votedList.push(_manager);\r\n\r\n    unchecked {\r\n      if (agree) { proposalData[_id].agreed++; }\r\n    }\r\n\r\n    emit VotedProposal(_id, _manager, msg.sender, agree);\r\n\r\n    unchecked {\r\n      uint256 voted = proposalData[_id].votedList.length;\r\n      uint256 denied = voted - proposalData[_id].agreed;\r\n      uint256 managers = _countActiveManagers();\r\n\r\n      if ((voted == managers) || (proposalData[_id].agreed > denied && proposalData[_id].agreed - denied >= PROPOSAL_THRESHOLD) || (proposalData[_id].agreed < denied && denied - proposalData[_id].agreed >= PROPOSAL_THRESHOLD)) {\r\n        proposalData[_id].closed = getCurrentTime();\r\n\r\n        if (proposalData[_id].agreed > denied) {\r\n          proposalData[_id].approved = true;\r\n\r\n          emit ApprovedProposal(_id,proposalData[_id].agreed, voted);\r\n        } else {\r\n          emit DeniedProposal(_id, proposalData[_id].agreed, voted);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function _hasReachedQuorum(uint256 _id) internal view returns (bool reached, bool agreed) {\r\n    uint256 voted = proposalData[_id].votedList.length;\r\n\r\n    if (voted == 0) { return (true, false); }\r\n\r\n    unchecked {\r\n      uint256 denied = voted - proposalData[_id].agreed;\r\n\r\n      if (proposalData[_id].agreed == denied) { return (true, false); }\r\n\r\n      reached = (proposalData[_id].agreed > denied ? proposalData[_id].agreed >= PROPOSAL_QUORUM : denied >= PROPOSAL_QUORUM);\r\n\r\n      return (reached, reached ? proposalData[_id].agreed > denied : false);\r\n    }\r\n  }\r\n\r\n  function submitProposal(string memory _subject, string memory _description, uint256 _time, address[] memory _contract, bytes[] memory _data) public isManager returns (uint256) {\r\n    require(bytes(_subject).length > 0, \"Specify a subject.\");\r\n    require(bytes(_description).length > 0, \"Specify a description.\");\r\n    require(_contract.length == _data.length, \"Invalid number of params.\");\r\n\r\n    uint256 id = proposalList.length;\r\n\r\n    proposalList.push(id);\r\n    proposalData[id].exists = true;\r\n    proposalData[id].created = getCurrentTime();\r\n    proposalData[id].start = _time < getCurrentTime() ? getCurrentTime() : _time;\r\n    proposalData[id].end = proposalData[id].start + PROPOSAL_DEADLINE;\r\n    proposalData[id].creator = msg.sender;\r\n    proposalData[id].subject = _subject;\r\n    proposalData[id].description = _description;\r\n    proposalData[id].target = _contract;\r\n    proposalData[id].data = _data;\r\n\r\n    emit SubmittedProposal(id, msg.sender);\r\n\r\n    return id;\r\n  }\r\n\r\n  function manualExecuteProposal(uint256 _id) external isManager isProposal(_id, false, false) isExecuted(_id, false) nonReEntrant returns (bytes[] memory) {\r\n    return _executeProposal(_id);\r\n  }\r\n\r\n  function autoExecuteProposal(uint256 _id) external isExecutor isProposal(_id, false, false) isExecuted(_id, false) nonReEntrant returns (bytes[] memory) {\r\n    return _executeProposal(_id);\r\n  }\r\n\r\n  function _executeProposal(uint256 _id) internal returns (bytes[] memory) {\r\n    if (proposalData[_id].approved) {\r\n      uint256 cnt = proposalData[_id].target.length;\r\n\r\n      require(cnt > 0, \"Nothing to execute.\");\r\n\r\n      bytes[] memory results = new bytes[](cnt);\r\n\r\n      unchecked {\r\n        for (uint256 i; i < cnt; i++) {\r\n          (bool success, bytes memory result) = proposalData[_id].target[i].call{ value: 0 }(proposalData[_id].data[i]);\r\n\r\n          if (success) {\r\n            results[i] = result;\r\n\r\n            continue;\r\n          }\r\n\r\n          if (result.length == 0) { revert(\"Function call reverted.\"); }\r\n\r\n          assembly {\r\n            let size := mload(result)\r\n\r\n            revert(add(32, result), size)\r\n          }\r\n        }\r\n      }\r\n\r\n      proposalData[_id].executed = getCurrentTime();\r\n      proposalData[_id].response = results;\r\n\r\n      emit ExecutedProposal(_id, _msgSender());\r\n\r\n      return results;\r\n    }\r\n\r\n    require(proposalData[_id].end <= getCurrentTime(), \"Voting deadline not yet expired.\");\r\n\r\n    proposalData[_id].closed = getCurrentTime();\r\n    uint256 voted = proposalData[_id].votedList.length;\r\n\r\n    (bool quorum, bool agreed) = _hasReachedQuorum(_id);\r\n\r\n    if (quorum) {\r\n      if (agreed) {\r\n        proposalData[_id].approved = true;\r\n\r\n        emit ApprovedProposal(_id, proposalData[_id].agreed, voted);\r\n\r\n        if (proposalData[_id].target.length == 0) { return new bytes[](0); }\r\n\r\n        return _executeProposal(_id);\r\n      }\r\n\r\n      emit DeniedProposal(_id, proposalData[_id].agreed, voted);\r\n\r\n      return new bytes[](0);\r\n    }\r\n\r\n    emit DeniedProposal(_id, proposalData[_id].agreed, voted);\r\n\r\n    return new bytes[](0);\r\n  }\r\n\r\n  function setManagerDelegate(address _delegate, bool _active) external isManager {\r\n    require(_delegate != address(0));\r\n    require(_delegate != msg.sender, \"Cannot delegate to yourself.\");\r\n\r\n    if (_active) {\r\n      address delegate = getManagerDelegate(msg.sender);\r\n\r\n      require(delegate != _delegate, \"Delegate already active.\");\r\n      require(delegate == address(0), \"You can only have one active delegate.\");\r\n    } else {\r\n      require(delegateData[_delegate].exists, \"Unknown delegate address.\");\r\n    }\r\n\r\n    if (delegateData[_delegate].exists) {\r\n      if (delegateData[_delegate].relation[msg.sender].exists) {\r\n        if (!_active && !delegateData[_delegate].relation[msg.sender].active) { revert(\"Delegate already inactive.\"); }\r\n      } else {\r\n        delegateData[_delegate].relation[msg.sender].exists = true;\r\n        delegateData[_delegate].relationList.push(msg.sender);\r\n      }\r\n\r\n      delegateData[_delegate].relation[msg.sender].active = _active;\r\n      delegateData[_delegate].relation[msg.sender].timestamp = getCurrentTime();\r\n    } else {\r\n      delegateList.push(_delegate);\r\n      delegateData[_delegate].exists = true;\r\n      delegateData[_delegate].relation[msg.sender] = delegateRelationDataStruct(true, _active, getCurrentTime());\r\n      delegateData[_delegate].relationList.push(msg.sender);\r\n    }\r\n\r\n    if (_active) {\r\n      emit addedDelegate(msg.sender, _delegate);\r\n    } else {\r\n      emit revokedDelegate(msg.sender, _delegate);\r\n    }\r\n  }\r\n\r\n  function getManagerDelegate(address _manager) public view returns (address) {\r\n    require(managerData[_manager].exists, \"Unknown manager.\");\r\n\r\n    address delegate;\r\n    uint256 dcnt = delegateList.length;\r\n\r\n    if (dcnt == 0) { return delegate; }\r\n\r\n    unchecked {\r\n      for (uint256 d; d < dcnt; d++) {\r\n        uint256 rcnt = delegateData[delegateList[d]].relationList.length;\r\n\r\n        for (uint256 r; r < rcnt; r++) {\r\n          if (delegateData[delegateList[d]].relationList[r] != _manager) { continue; }\r\n          if (!delegateData[delegateList[d]].relation[_manager].exists) { continue; }\r\n          if (!delegateData[delegateList[d]].relation[_manager].active) { continue; }\r\n\r\n          delegate = delegateList[d];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return delegate;\r\n  }\r\n\r\n  function listManagers(bool _active) external view returns (address[] memory) {\r\n    uint256 cnt = managerList.length;\r\n    uint256 len = _active ? _countActiveManagers() : cnt;\r\n    uint256 i;\r\n\r\n    address[] memory data = new address[](len);\r\n\r\n    unchecked {\r\n      for (uint256 m; m < cnt; m++) {\r\n        if (_active && !managerData[managerList[m]].active) { continue; }\r\n\r\n        data[i++] = managerList[m];\r\n      }\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  function listProposals() external view returns (proposalReturnStruct[] memory) {\r\n    uint256 cnt = proposalList.length;\r\n    proposalReturnStruct[] memory data = new proposalReturnStruct[](cnt);\r\n\r\n    unchecked {\r\n      for (uint256 p = 1; p < cnt; p++) { data[p] = getProposal(p); }\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  function _countActiveManagers() internal view returns (uint256) {\r\n    uint256 cnt = managerList.length;\r\n    uint256 active;\r\n\r\n    unchecked {\r\n      for (uint256 m; m < cnt; m++) {\r\n        if (!managerData[managerList[m]].active) { continue; }\r\n\r\n        active++;\r\n      }\r\n    }\r\n\r\n    return active;\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_managers\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"agreed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"ApprovedProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"CanceledProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"agreed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"DeniedProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"ExecutedProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"SubmittedProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"agreed\",\"type\":\"bool\"}],\"name\":\"VotedProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"addedDelegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"addedManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"revokedDelegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"revokedManager\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_adjust\",\"type\":\"bool\"}],\"name\":\"addManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"autoExecuteProposal\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"cancelProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"getManagerDelegate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"subject\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"canceled\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"target\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"response\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"agreed\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"agreed\",\"type\":\"bool\"}],\"internalType\":\"struct upfrontMultiSignatureWallet.votedProposalReturnStruct[]\",\"name\":\"voted\",\"type\":\"tuple[]\"}],\"internalType\":\"struct upfrontMultiSignatureWallet.proposalReturnStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"listManagers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listProposals\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"subject\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"canceled\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"target\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"response\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"agreed\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"agreed\",\"type\":\"bool\"}],\"internalType\":\"struct upfrontMultiSignatureWallet.votedProposalReturnStruct[]\",\"name\":\"voted\",\"type\":\"tuple[]\"}],\"internalType\":\"struct upfrontMultiSignatureWallet.proposalReturnStruct[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"manualExecuteProposal\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_adjust\",\"type\":\"bool\"}],\"name\":\"revokeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setExecutorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setManagerDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setProposalDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setProposalQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setProposalThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_subject\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_contract\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"}],\"name\":\"submitProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"agree\",\"type\":\"bool\"}],\"name\":\"voteProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "upfrontMultiSignatureWallet", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000379fbb5dc33997d7ef6e49c6ae365d0ff80ca1440000000000000000000000000000000000000000000000000000000000069780000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000ba799d418d1356ff5d225096d08951a3b45b6e4a000000000000000000000000a3937439264b45af69fca54bda9535c045de19900000000000000000000000002d8250e6767ee656fbfb7e5c63c89706220dd863000000000000000000000000d7ced3bd37d3db19ebe50dfca6e3ae001d0561d0000000000000000000000000ed0d874effcfde730259c38b498f60372d6b39a0000000000000000000000000c4ebbfa7de8e7de840ad3d27f46cf8043a2d61590000000000000000000000007759a7094790b34ef17ad47080c8e646c22cf7a9000000000000000000000000afde8c039efc7cb93b324f3baefeef64ebb085bc", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://800f8bd917931b94eb0d04fa92242d650f4a1c395ea431fbd1d4f83dad57e740"}