{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor(address newOwner) {\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) internal {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\nabstract contract Pausable is Context {\r\n    event Paused(address account);\r\n\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\ncontract CIK_Staking is Ownable, Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 public CIKToken;\r\n    IERC20 public FCFToken;\r\n\r\n    uint256 public APY = 1700; //default: 17%\r\n\r\n    uint256 public stakeFees = 200; //default: 2%\r\n    uint256 public withdrawFees = 200; //default: 2%\r\n\r\n    uint256 public FCFReverseFees = 200; //default: 2% for deposit\r\n    uint256 private CIKTOFCF = 200; //as 100 CIK equal to 100 FCF Token for reward\r\n\r\n    uint256 public divider = 10000;\r\n\r\n    constructor() Ownable(msg.sender) {\r\n        CIKToken = IERC20(0xc80a813b69EDc8eC391306210Cb4010B704cb4E7);\r\n        FCFToken = IERC20(0x4673f018cc6d401AAD0402BdBf2abcBF43dd69F3);\r\n    }\r\n\r\n    function changeCIK(address _token) external onlyOwner {\r\n        require(\r\n            IERC20(_token) != CIKToken,\r\n            \"This token is already use in the contract\"\r\n        );\r\n        CIKToken = IERC20(_token);\r\n    }\r\n\r\n    function changeFCF(address _newtoken) external onlyOwner {\r\n        require(\r\n            IERC20(_newtoken) != FCFToken,\r\n            \"This token is already use in the contract\"\r\n        );\r\n        FCFToken = IERC20(_newtoken);\r\n    }\r\n\r\n    function setFCFReverseTokenPercentage(uint256 percentage)\r\n        external\r\n        onlyOwner\r\n    {\r\n        FCFReverseFees = percentage;\r\n    }\r\n\r\n    function setTax(uint256 _stakeFees, uint256 _withFees) external onlyOwner {\r\n        stakeFees = _stakeFees;\r\n        withdrawFees = _withFees;\r\n    }\r\n\r\n    function setCIKTOFCF(uint256 _tokenNum) external onlyOwner {\r\n        require(_tokenNum > 0, \"set a valid number\");\r\n        CIKTOFCF = _tokenNum;\r\n    }\r\n\r\n    function setAPY(uint256 _apy) external onlyOwner returns (bool) {\r\n        require(_apy > 0, \"Please set a valid APY\");\r\n        APY = _apy;\r\n        return true;\r\n    }\r\n\r\n    function pause() external onlyOwner returns (bool success) {\r\n        _pause();\r\n        return true;\r\n    }\r\n\r\n    function unpause() external onlyOwner returns (bool success) {\r\n        _unpause();\r\n        return true;\r\n    }\r\n\r\n    function FCFPublicityPercent() public view returns (uint256 percentage) {\r\n        return CIKTOFCF;\r\n    }\r\n\r\n    struct user {\r\n        address userAddress;\r\n        uint256 amount;\r\n        uint256 stktime;\r\n    }\r\n    mapping(address => user[]) public investment;\r\n\r\n    function getContractCIKBalacne() public view returns (uint256) {\r\n        return CIKToken.balanceOf(address(this));\r\n    }\r\n\r\n    function getContractFCFBalacne() public view returns (uint256) {\r\n        return FCFToken.balanceOf(address(this));\r\n    }\r\n\r\n    function ContractBalacne() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function withdrawBNB() public onlyOwner {\r\n        uint256 amount = address(this).balance;\r\n        require(amount > 0, \"This contract balance is ZERO BNB\");\r\n        (bool success, ) = owner().call{value: amount}(\"\");\r\n        require(success, \"Failed to withdraw BNB\");\r\n    }\r\n\r\n    function withdraw() external onlyOwner {\r\n        uint256 amount = CIKToken.balanceOf(address(this));\r\n        require(amount > 0, \"This contract balance is ZERO CIK\");\r\n        bool success = CIKToken.transfer(owner(), amount);\r\n        require(success, \"Failed to withdraw CIK\");\r\n    }\r\n\r\n    function invest(uint256 _amount) external {\r\n        require(!paused(), \"Pausable: paused\");\r\n        require(\r\n            _amount > 0 ,\r\n            \"please stake valid amount and select time\"\r\n        );\r\n        require(\r\n            _amount <= CIKToken.allowance(msg.sender, address(this)),\r\n            \"Insufficient Allowence to the contract\"\r\n        );\r\n        uint256 tax = _amount.mul(stakeFees).div(divider);\r\n        if (tax > 0) {\r\n            CIKToken.transferFrom(msg.sender, owner(), tax);\r\n        }\r\n        uint256 reverseFCF = _amount.mul(FCFReverseFees).div(divider);\r\n        if (reverseFCF > 0) {\r\n            FCFTokenWithdraw(msg.sender, reverseFCF);\r\n        }\r\n        CIKToken.transferFrom(msg.sender, address(this), _amount.sub(tax));\r\n        investment[msg.sender].push(\r\n            user({\r\n                userAddress: msg.sender,\r\n                amount: _amount.sub(tax),\r\n                stktime: block.timestamp\r\n            })\r\n        );\r\n    }\r\n\r\n    function FCFTokenWithdraw(address _user, uint256 reverseFCF) internal {\r\n        require(\r\n            reverseFCF <= getContractFCFBalacne(),\r\n            \"Not Enough FCF Token for withdraw from contract please try after some time\"\r\n        );\r\n        FCFToken.transfer(_user, reverseFCF.mul(1e9));\r\n    }\r\n\r\n    function removeId(uint256 indexnum) internal {\r\n        for (uint256 i = indexnum; i < investment[msg.sender].length - 1; i++) {\r\n            investment[msg.sender][i] = investment[msg.sender][i + 1];\r\n        }\r\n        investment[msg.sender].pop();\r\n    }\r\n\r\n    function withdrawCIK(uint256 id) external returns (bool) {\r\n        require(!paused(), \"Pausable: paused\");\r\n        user memory users = investment[msg.sender][id];\r\n        require(id < investment[msg.sender].length, \"Invalid enter Id\");\r\n        uint256 reward = calculateRewardSpecificId(id, msg.sender);\r\n        uint256 rewardWithAmount = users.amount.add(reward);\r\n        require(\r\n            rewardWithAmount <= getContractCIKBalacne(),\r\n            \"Not Enough Token for withdraw from contract please try after some time\"\r\n        );\r\n        uint256 tax = rewardWithAmount.mul(withdrawFees).div(divider);\r\n        if (tax > 0) {\r\n            CIKToken.transfer(owner(), tax);\r\n        }\r\n        CIKToken.transfer(msg.sender, rewardWithAmount.sub(tax));\r\n        uint256 fcfToken = reward.mul(CIKTOFCF).div(divider);\r\n        FCFTokenWithdraw(msg.sender, fcfToken);\r\n        removeId(id);\r\n        return true;\r\n    }\r\n\r\n    function calculateReward(address _user) public view returns (uint256) {\r\n        uint256 index = investment[_user].length;\r\n        uint256 reward;\r\n        for (uint256 i = 0; i < index; i++) {\r\n            user memory users = investment[_user][i];\r\n            uint256 time = block.timestamp.sub(users.stktime);\r\n            reward += users.amount.mul(APY).div(divider).mul(time).div(1 days);\r\n        }\r\n        return reward;\r\n    }\r\n\r\n    function calculateRewardSpecificId(uint256 id, address _user)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(id < investment[_user].length, \"Invalid enter Id\");\r\n        user memory users = investment[_user][id];\r\n        uint256 time = block.timestamp.sub(users.stktime);\r\n        uint256 reward = users.amount.mul(APY).div(divider).mul(time).div(\r\n            1 days\r\n        );\r\n        return reward;\r\n    }\r\n\r\n    function depositAddAmount(address _user)\r\n        public\r\n        view\r\n        returns (uint256 amount)\r\n    {\r\n        uint256 index = investment[_user].length;\r\n        for (uint256 i = 0; i < index; i++) {\r\n            user memory users = investment[_user][i];\r\n            amount += users.amount;\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function userIndex(address _user) public view returns (uint256) {\r\n        return investment[_user].length;\r\n    }\r\n\r\n    receive() external payable {\r\n        payable(msg.sender);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"APY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CIKToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ContractBalacne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FCFPublicityPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FCFReverseFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FCFToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateRewardSpecificId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"changeCIK\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newtoken\",\"type\":\"address\"}],\"name\":\"changeFCF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"depositAddAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"divider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractCIKBalacne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractFCFBalacne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investment\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stktime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"}],\"name\":\"setAPY\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenNum\",\"type\":\"uint256\"}],\"name\":\"setCIKTOFCF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"setFCFReverseTokenPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withFees\",\"type\":\"uint256\"}],\"name\":\"setTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdrawCIK\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CIK_Staking", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a1e7a0ab9b0a4b88ab76290d829efc687e88095ecb9323f830fef3376743dfdb"}