{"SourceCode": "/*\r\n\r\n\r\n           \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \r\n           \u2588\u2588      \u2588\u2588   \u2588\u2588     \u2588\u2588   \u2588\u2588            \r\n           \u2588\u2588      \u2588\u2588   \u2588\u2588     \u2588\u2588   \u2588\u2588            \r\n           \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588      \r\n           \u2588\u2588      \u2588\u2588   \u2588\u2588     \u2588\u2588         \u2588\u2588      \r\n           \u2588\u2588      \u2588\u2588   \u2588\u2588     \u2588\u2588         \u2588\u2588\r\n           \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588     \u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    \r\n           \r\n         \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\r\n         \r\n                   Block, Ape, Scissors\r\n           \r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract BAS is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    string private constant NAME = \"BlockApeScissors\";\r\n    string private constant SYMBOL = \"BAS\";\r\n    uint8 private constant DECIMALS = 18;\r\n\r\n    mapping(address => uint256) private rewards;\r\n    mapping(address => uint256) private actual;\r\n    mapping(address => mapping(address => uint256)) private allowances;\r\n\r\n    mapping(address => bool) private excludedFromFees;\r\n    mapping(address => bool) private excludedFromRewards;\r\n    address[] private rewardExcluded;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant ACTUAL_TOTAL = 100_000_000 * 1e18;\r\n    uint256 private rewardsTotal = (MAX - (MAX % ACTUAL_TOTAL));\r\n    uint256 private holderFeeTotal;\r\n    uint256 private marketingFeeTotal;\r\n    uint256 private lpFeeTotal;\r\n    uint256 private operationsFeeTotal;\r\n    uint256 private buybackFeeTotal;\r\n    uint256 private prizePoolFeeTotal;\r\n    uint256 private bountiesFeeTotal;\r\n    uint256 private daoTreasuryFeeTotal;\r\n    \r\n    uint256 public taxPercentage = 5;\r\n    uint256 public holderTaxAlloc = 20;\r\n    uint256 public marketingTaxAlloc = 15;\r\n    uint256 public lpTaxAlloc;\r\n    uint256 public operationsTaxAlloc;\r\n    uint256 public buybackTaxAlloc;\r\n    uint256 public prizePoolTaxAlloc = 15;\r\n    uint256 public bountiesTaxAlloc;\r\n    uint256 public daoTreasuryTaxAlloc;\r\n    uint256 public totalTaxAlloc = marketingTaxAlloc.add(holderTaxAlloc).add(lpTaxAlloc).add(operationsTaxAlloc).add(buybackTaxAlloc).add(prizePoolTaxAlloc).add(bountiesTaxAlloc).add(daoTreasuryTaxAlloc);\r\n\r\n    address public marketingAddress;\r\n    address public lpStakingAddress;\r\n    address public operationsMultiSigAddress;\r\n    address public buybackMultiSigAddress;\r\n    address public prizePoolMultiSigAddress;\r\n    address public bountiesMultiSigAddress;\r\n    address public daoTreasuryMultiSigAddress;\r\n\r\n    constructor(address _marketingAddress) {\r\n        rewards[_marketingAddress] = rewardsTotal;\r\n        emit Transfer(address(0), _marketingAddress, ACTUAL_TOTAL);\r\n\r\n        marketingAddress = _marketingAddress;\r\n\r\n        excludeFromRewards(_msgSender());\r\n        excludeFromFees(_marketingAddress);\r\n\r\n        if (_marketingAddress != _msgSender()) {\r\n            excludeFromRewards(_marketingAddress);\r\n            excludeFromFees(_msgSender());\r\n        }\r\n\r\n        excludeFromFees(address(0x000000000000000000000000000000000000dEaD));\r\n    }\r\n\r\n    function name() external pure returns (string memory) {\r\n        return NAME;\r\n    }\r\n\r\n    function symbol() external pure returns (string memory) {\r\n        return SYMBOL;\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return DECIMALS;\r\n    }\r\n\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return ACTUAL_TOTAL;\r\n    }\r\n\r\n    function balanceOf(address _account) public view override returns (uint256) {\r\n        if (excludedFromRewards[_account]) {\r\n            return actual[_account];\r\n        }\r\n        return tokenWithRewards(rewards[_account]);\r\n    }\r\n\r\n    function transfer(address _recipient, uint256 _amount) public override returns (bool) {\r\n        _transfer(_msgSender(), _recipient, _amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view override returns (uint256) {\r\n        return allowances[_owner][_spender];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _amount) public override returns (bool) {\r\n        _approve(_msgSender(), _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address _sender,\r\n        address _recipient,\r\n        uint256 _amount\r\n    ) public override returns (bool) {\r\n        _transfer(_sender, _recipient, _amount);\r\n\r\n        _approve(\r\n        _sender,\r\n            _msgSender(),\r\n            allowances[_sender][_msgSender()].sub(_amount, \"ERC20: transfer amount exceeds allowance\")\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address _spender, uint256 _addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), _spender, allowances[_msgSender()][_spender].add(_addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address _spender, uint256 _subtractedValue) public virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            _spender,\r\n            allowances[_msgSender()][_spender].sub(_subtractedValue, \"ERC20: decreased allowance below zero\")\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromRewards(address _account) external view returns (bool) {\r\n        return excludedFromRewards[_account];\r\n    }\r\n\r\n    function isExcludedFromFees(address _account) external view returns (bool) {\r\n        return excludedFromFees[_account];\r\n    }\r\n\r\n    function totalFees() external view returns (uint256) {\r\n        return holderFeeTotal.add(marketingFeeTotal).add(lpFeeTotal).add(operationsFeeTotal).add(buybackFeeTotal).add(prizePoolFeeTotal).add(daoTreasuryFeeTotal).add(bountiesFeeTotal);\r\n    }\r\n\r\n    function totalHolderFees() external view returns (uint256) {\r\n        return holderFeeTotal;\r\n    }\r\n\r\n    function totalMarketingFees() external view returns (uint256) {\r\n        return marketingFeeTotal;\r\n    }\r\n\r\n    function totalLpFees() external view returns (uint256) {\r\n        return lpFeeTotal;\r\n    }\r\n\r\n    function totalBuybackFees() external view returns (uint256) {\r\n        return buybackFeeTotal;\r\n    }\r\n    \r\n    function totalOperationsFees() external view returns (uint256) {\r\n        return operationsFeeTotal;\r\n    }\r\n    \r\n    function totalPrizePoolFees() external view returns (uint256) {\r\n        return prizePoolFeeTotal;\r\n    }\r\n    \r\n    function totalDaoTreasuryFees() external view returns (uint256) {\r\n        return daoTreasuryFeeTotal;\r\n    }\r\n    \r\n    function totalBountiesFees() external view returns (uint256) {\r\n        return bountiesFeeTotal;\r\n    }\r\n\r\n    function distribute(uint256 _actualAmount) public {\r\n        address sender = _msgSender();\r\n        require(!excludedFromRewards[sender], \"Excluded addresses cannot call this function\");\r\n\r\n        (uint256 rewardAmount, , , , ) = _getValues(_actualAmount);\r\n        rewards[sender] = rewards[sender].sub(rewardAmount);\r\n        rewardsTotal = rewardsTotal.sub(rewardAmount);\r\n        holderFeeTotal = holderFeeTotal.add(_actualAmount);\r\n    }\r\n\r\n    function excludeFromFees(address _account) public onlyOwner() {\r\n        require(!excludedFromFees[_account], \"Account is already excluded from fee\");\r\n        excludedFromFees[_account] = true;\r\n    }\r\n\r\n    function includeInFees(address _account) public onlyOwner() {\r\n        require(excludedFromFees[_account], \"Account is already included in fee\");\r\n        excludedFromFees[_account] = false;\r\n    }\r\n\r\n    function excludeFromRewards(address _account) public onlyOwner() {\r\n        require(!excludedFromRewards[_account], \"Account is already excluded from reward\");\r\n\r\n        if (rewards[_account] > 0) {\r\n            actual[_account] = tokenWithRewards(rewards[_account]);\r\n        }\r\n\r\n        excludedFromRewards[_account] = true;\r\n        rewardExcluded.push(_account);\r\n    }\r\n\r\n    function includeInRewards(address _account) public onlyOwner() {\r\n        require(excludedFromRewards[_account], \"Account is already included in rewards\");\r\n\r\n        for (uint256 i = 0; i < rewardExcluded.length; i++) {\r\n            if (rewardExcluded[i] == _account) {\r\n                rewardExcluded[i] = rewardExcluded[rewardExcluded.length - 1];\r\n                actual[_account] = 0;\r\n                excludedFromRewards[_account] = false;\r\n                rewardExcluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _approve(\r\n        address _owner,\r\n        address _spender,\r\n        uint256 _amount\r\n    ) private {\r\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(_spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        allowances[_owner][_spender] = _amount;\r\n        emit Approval(_owner, _spender, _amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address _sender,\r\n        address _recipient,\r\n        uint256 _amount\r\n    ) private {\r\n        require(_sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(_recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(_amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        uint256 currentTaxPercentage = taxPercentage;\r\n        if (excludedFromFees[_sender] || excludedFromFees[_recipient]) {\r\n            taxPercentage = 0;\r\n        } else {\r\n            uint256 fee = _getFee(_amount);\r\n            uint256 marketingFee = _getMarketingFee(fee);\r\n            uint256 lpFee = _getLpFee(fee);\r\n            uint256 operationsFee = _getOperationsFee(fee);\r\n            uint256 buybackFee = _getBuybackFee(fee);\r\n            uint256 prizePoolFee = _getPrizePoolFee(fee);\r\n            uint256 bountiesFee = _getBountiesFee(fee);\r\n            uint256 daoTreasuryFee = _getDaoTreasuryFee(fee);\r\n\r\n            _updateMarketingFee(marketingFee);\r\n            _updateLpFee(lpFee);\r\n            _updateOperationsFee(operationsFee);\r\n            _updateBuybackFee(buybackFee);\r\n            _updatePrizePoolFee(prizePoolFee);\r\n            _updateBountiesFee(bountiesFee);\r\n            _updateDaoTreasuryFee(daoTreasuryFee);\r\n        }\r\n\r\n        if (excludedFromRewards[_sender] && !excludedFromRewards[_recipient]) {\r\n            _transferWithoutSenderRewards(_sender, _recipient, _amount);\r\n        } else if (!excludedFromRewards[_sender] && excludedFromRewards[_recipient]) {\r\n            _transferWithRecipientRewards(_sender, _recipient, _amount);\r\n        } else if (!excludedFromRewards[_sender] && !excludedFromRewards[_recipient]) {\r\n            _transferWithRewards(_sender, _recipient, _amount);\r\n        } else if (excludedFromRewards[_sender] && excludedFromRewards[_recipient]) {\r\n            _transferWithoutRewards(_sender, _recipient, _amount);\r\n        } else {\r\n            _transferWithRewards(_sender, _recipient, _amount);\r\n        }\r\n\r\n        if (currentTaxPercentage != taxPercentage) {\r\n            taxPercentage = currentTaxPercentage;\r\n        }\r\n    }\r\n\r\n    function _transferWithRewards(\r\n        address _sender,\r\n        address _recipient,\r\n        uint256 _actualAmount\r\n    ) private {\r\n        (\r\n            uint256 rewardAmount,\r\n            uint256 rewardTransferAmount,\r\n            uint256 rewardFee,\r\n            uint256 actualTransferAmount,\r\n            uint256 actualFee\r\n        ) = _getValues(_actualAmount);\r\n\r\n        rewards[_sender] = rewards[_sender].sub(rewardAmount);\r\n        rewards[_recipient] = rewards[_recipient].add(rewardTransferAmount);\r\n        _updateHolderFee(rewardFee, actualFee);\r\n        emit Transfer(_sender, _recipient, actualTransferAmount);\r\n    }\r\n\r\n    function _transferWithRecipientRewards(\r\n        address _sender,\r\n        address _recipient,\r\n        uint256 _actualAmount\r\n    ) private {\r\n        (\r\n            uint256 rewardAmount,\r\n            uint256 rewardTransferAmount,\r\n            uint256 rewardFee,\r\n            uint256 actualTransferAmount,\r\n            uint256 actualFee\r\n        ) = _getValues(_actualAmount);\r\n\r\n        rewards[_sender] = rewards[_sender].sub(rewardAmount);\r\n        actual[_recipient] = actual[_recipient].add(actualTransferAmount);\r\n        rewards[_recipient] = rewards[_recipient].add(rewardTransferAmount);\r\n        _updateHolderFee(rewardFee, actualFee);\r\n        emit Transfer(_sender, _recipient, actualTransferAmount);\r\n    }\r\n\r\n    function _transferWithoutSenderRewards(\r\n        address _sender,\r\n        address _recipient,\r\n        uint256 _actualAmount\r\n    ) private {\r\n        (\r\n            uint256 rewardAmount,\r\n            uint256 rewardTransferAmount,\r\n            uint256 rewardFee,\r\n            uint256 actualTransferAmount,\r\n            uint256 actualFee\r\n        ) = _getValues(_actualAmount);\r\n\r\n        actual[_sender] = actual[_sender].sub(_actualAmount);\r\n        rewards[_sender] = rewards[_sender].sub(rewardAmount);\r\n        rewards[_recipient] = rewards[_recipient].add(rewardTransferAmount);\r\n        _updateHolderFee(rewardFee, actualFee);\r\n        emit Transfer(_sender, _recipient, actualTransferAmount);\r\n    }\r\n\r\n    function _transferWithoutRewards(\r\n        address _sender,\r\n        address _recipient,\r\n        uint256 _actualAmount\r\n    ) private {\r\n        (\r\n            uint256 rewardAmount,\r\n            uint256 rewardTransferAmount,\r\n            uint256 rewardFee,\r\n            uint256 actualTransferAmount,\r\n            uint256 actualFee\r\n        ) = _getValues(_actualAmount);\r\n\r\n        actual[_sender] = actual[_sender].sub(_actualAmount);\r\n        rewards[_sender] = rewards[_sender].sub(rewardAmount);\r\n        actual[_recipient] = actual[_recipient].add(actualTransferAmount);\r\n        rewards[_recipient] = rewards[_recipient].add(rewardTransferAmount);\r\n        _updateHolderFee(rewardFee, actualFee);\r\n        emit Transfer(_sender, _recipient, actualTransferAmount);\r\n    }\r\n\r\n    function _updateHolderFee(uint256 _rewardFee, uint256 _actualFee) private {\r\n        rewardsTotal = rewardsTotal.sub(_rewardFee);\r\n        holderFeeTotal = holderFeeTotal.add(_actualFee);\r\n    }\r\n\r\n    function _updateMarketingFee(uint256 _marketingFee) private {\r\n        if (marketingAddress == address(0)) {\r\n            return;\r\n        }\r\n\r\n        uint256 rewardsRate = _getRewardsRate();\r\n        uint256 rewardMarketingFee = _marketingFee.mul(rewardsRate);\r\n        marketingFeeTotal = marketingFeeTotal.add(_marketingFee);\r\n\r\n        rewards[marketingAddress] = rewards[marketingAddress].add(rewardMarketingFee);\r\n        if (excludedFromRewards[marketingAddress]) {\r\n            actual[marketingAddress] = actual[marketingAddress].add(_marketingFee);\r\n        }\r\n    }\r\n\r\n    function _updateLpFee(uint256 _lpFee) private {\r\n        if (lpStakingAddress == address(0)) {\r\n            return;\r\n        }\r\n\r\n        uint256 rewardsRate = _getRewardsRate();\r\n        uint256 rewardLpFee = _lpFee.mul(rewardsRate);\r\n        lpFeeTotal = lpFeeTotal.add(_lpFee);\r\n\r\n        rewards[lpStakingAddress] = rewards[lpStakingAddress].add(rewardLpFee);\r\n        if (excludedFromRewards[lpStakingAddress]) {\r\n            actual[lpStakingAddress] = actual[lpStakingAddress].add(_lpFee);\r\n        }\r\n    }\r\n\r\n    function _updateOperationsFee(uint256 _operationsFee) private {\r\n        if (operationsMultiSigAddress == address(0)) {\r\n            return;\r\n        }\r\n\r\n        uint256 rewardsRate = _getRewardsRate();\r\n        uint256 rewardOperationsFee = _operationsFee.mul(rewardsRate);\r\n        operationsFeeTotal = operationsFeeTotal.add(_operationsFee);\r\n\r\n        rewards[operationsMultiSigAddress] = rewards[operationsMultiSigAddress].add(rewardOperationsFee);\r\n        if (excludedFromRewards[operationsMultiSigAddress]) {\r\n            actual[operationsMultiSigAddress] = actual[operationsMultiSigAddress].add(_operationsFee);\r\n        }\r\n    }\r\n    \r\n    function _updateBuybackFee(uint256 _buybackFee) private {\r\n        if (buybackMultiSigAddress == address(0)) {\r\n            return;\r\n        }\r\n\r\n        uint256 rewardsRate = _getRewardsRate();\r\n        uint256 rewardBuybackFee = _buybackFee.mul(rewardsRate);\r\n        buybackFeeTotal = buybackFeeTotal.add(_buybackFee);\r\n\r\n        rewards[buybackMultiSigAddress] = rewards[buybackMultiSigAddress].add(rewardBuybackFee);\r\n        if (excludedFromRewards[buybackMultiSigAddress]) {\r\n            actual[buybackMultiSigAddress] = actual[buybackMultiSigAddress].add(_buybackFee);\r\n        }\r\n    }\r\n    \r\n    function _updatePrizePoolFee(uint256 _prizePoolFee) private {\r\n        if (prizePoolMultiSigAddress == address(0)) {\r\n            return;\r\n        }\r\n\r\n        uint256 rewardsRate = _getRewardsRate();\r\n        uint256 rewardPrizePoolFee = _prizePoolFee.mul(rewardsRate);\r\n        prizePoolFeeTotal = prizePoolFeeTotal.add(_prizePoolFee);\r\n\r\n        rewards[prizePoolMultiSigAddress] = rewards[prizePoolMultiSigAddress].add(rewardPrizePoolFee);\r\n        if (excludedFromRewards[prizePoolMultiSigAddress]) {\r\n            actual[prizePoolMultiSigAddress] = actual[prizePoolMultiSigAddress].add(_prizePoolFee);\r\n        }\r\n    }\r\n    \r\n    function _updateBountiesFee(uint256 _bountiesFee) private {\r\n        if (bountiesMultiSigAddress == address(0)) {\r\n            return;\r\n        }\r\n\r\n        uint256 rewardsRate = _getRewardsRate();\r\n        uint256 rewardBountiesFee = _bountiesFee.mul(rewardsRate);\r\n        bountiesFeeTotal = bountiesFeeTotal.add(_bountiesFee);\r\n\r\n        rewards[bountiesMultiSigAddress] = rewards[bountiesMultiSigAddress].add(rewardBountiesFee);\r\n        if (excludedFromRewards[bountiesMultiSigAddress]) {\r\n            actual[bountiesMultiSigAddress] = actual[bountiesMultiSigAddress].add(_bountiesFee);\r\n        }\r\n    }\r\n    \r\n    function _updateDaoTreasuryFee(uint256 _daoTreasuryFee) private {\r\n        if (daoTreasuryMultiSigAddress == address(0)) {\r\n            return;\r\n        }\r\n\r\n        uint256 rewardsRate = _getRewardsRate();\r\n        uint256 rewardDaoTreasuryFee = _daoTreasuryFee.mul(rewardsRate);\r\n        daoTreasuryFeeTotal = daoTreasuryFeeTotal.add(_daoTreasuryFee);\r\n\r\n        rewards[daoTreasuryMultiSigAddress] = rewards[daoTreasuryMultiSigAddress].add(rewardDaoTreasuryFee);\r\n        if (excludedFromRewards[daoTreasuryMultiSigAddress]) {\r\n            actual[daoTreasuryMultiSigAddress] = actual[daoTreasuryMultiSigAddress].add(_daoTreasuryFee);\r\n        }\r\n    }\r\n\r\n    function rewardsFromToken(uint256 _actualAmount, bool _deductTransferFee) public view returns (uint256) {\r\n        require(_actualAmount <= ACTUAL_TOTAL, \"Amount must be less than supply\");\r\n        if (!_deductTransferFee) {\r\n            (uint256 rewardAmount, , , , ) = _getValues(_actualAmount);\r\n            return rewardAmount;\r\n        } else {\r\n            (, uint256 rewardTransferAmount, , , ) = _getValues(_actualAmount);\r\n            return rewardTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenWithRewards(uint256 _rewardAmount) public view returns (uint256) {\r\n        require(_rewardAmount <= rewardsTotal, \"Amount must be less than total rewards\");\r\n        uint256 rewardsRate = _getRewardsRate();\r\n        return _rewardAmount.div(rewardsRate);\r\n    }\r\n\r\n    function _getValues(uint256 _actualAmount)\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        (uint256 actualTransferAmount, uint256 actualFee) = _getActualValues(_actualAmount);\r\n        uint256 rewardsRate = _getRewardsRate();\r\n        (\r\n            uint256 rewardAmount,\r\n            uint256 rewardTransferAmount,\r\n            uint256 rewardFee\r\n        ) = _getRewardValues(_actualAmount, actualFee, rewardsRate);\r\n\r\n        return (rewardAmount, rewardTransferAmount, rewardFee, actualTransferAmount, actualFee);\r\n    }\r\n\r\n    function _getActualValues(uint256 _actualAmount) private view returns (uint256, uint256) {\r\n        uint256 actualFee = _getFee(_actualAmount);\r\n        uint256 actualHolderFee = _getHolderFee(actualFee);\r\n        uint256 actualTransferAmount = _actualAmount.sub(actualFee);\r\n        return (actualTransferAmount, actualHolderFee);\r\n    }\r\n\r\n    function _getRewardValues(\r\n        uint256 _actualAmount,\r\n        uint256 _actualHolderFee,\r\n        uint256 _rewardsRate\r\n    )\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 actualFee = _getFee(_actualAmount).mul(_rewardsRate);\r\n        uint256 rewardAmount = _actualAmount.mul(_rewardsRate);\r\n        uint256 rewardTransferAmount = rewardAmount.sub(actualFee);\r\n        uint256 rewardFee = _actualHolderFee.mul(_rewardsRate);\r\n        return (rewardAmount, rewardTransferAmount, rewardFee);\r\n    }\r\n\r\n    function _getRewardsRate() private view returns (uint256) {\r\n        (uint256 rewardsSupply, uint256 actualSupply) = _getCurrentSupply();\r\n        return rewardsSupply.div(actualSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rewardsSupply = rewardsTotal;\r\n        uint256 actualSupply = ACTUAL_TOTAL;\r\n\r\n        for (uint256 i = 0; i < rewardExcluded.length; i++) {\r\n            if (rewards[rewardExcluded[i]] > rewardsSupply || actual[rewardExcluded[i]] > actualSupply) {\r\n                return (rewardsTotal, ACTUAL_TOTAL);\r\n            }\r\n\r\n            rewardsSupply = rewardsSupply.sub(rewards[rewardExcluded[i]]);\r\n            actualSupply = actualSupply.sub(actual[rewardExcluded[i]]);\r\n        }\r\n\r\n        if (rewardsSupply < rewardsTotal.div(ACTUAL_TOTAL)) {\r\n            return (rewardsTotal, ACTUAL_TOTAL);\r\n        }\r\n\r\n        return (rewardsSupply, actualSupply);\r\n    }\r\n\r\n    function _getFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(taxPercentage).div(100);\r\n    }\r\n\r\n    function _getHolderFee(uint256 _tax) private view returns (uint256) {\r\n        return _tax.mul(holderTaxAlloc).div(totalTaxAlloc);\r\n    }\r\n\r\n    function _getMarketingFee(uint256 _tax) private view returns (uint256) {\r\n        return _tax.mul(marketingTaxAlloc).div(totalTaxAlloc);\r\n    }\r\n\r\n    function _getLpFee(uint256 _tax) private view returns (uint256) {\r\n        return _tax.mul(lpTaxAlloc).div(totalTaxAlloc);\r\n    }\r\n\r\n    function _getOperationsFee(uint256 _tax) private view returns (uint256) {\r\n        return _tax.mul(operationsTaxAlloc).div(totalTaxAlloc);\r\n    }\r\n    \r\n    function _getPrizePoolFee(uint256 _tax) private view returns (uint256) {\r\n        return _tax.mul(prizePoolTaxAlloc).div(totalTaxAlloc);\r\n    }\r\n    \r\n    function _getBountiesFee(uint256 _tax) private view returns (uint256) {\r\n        return _tax.mul(bountiesTaxAlloc).div(totalTaxAlloc);\r\n    }\r\n    \r\n    function _getBuybackFee(uint256 _tax) private view returns (uint256) {\r\n        return _tax.mul(buybackTaxAlloc).div(totalTaxAlloc);\r\n    }\r\n\r\n    function _getDaoTreasuryFee(uint256 _tax) private view returns (uint256) {\r\n        return _tax.mul(daoTreasuryTaxAlloc).div(totalTaxAlloc);\r\n    }\r\n    \r\n    function setTaxPercentage(uint256 _taxPercentage) external onlyOwner {\r\n        require(_taxPercentage >= 0 && _taxPercentage <= 10, \"Value is outside of range 0-10\");\r\n        taxPercentage = _taxPercentage;\r\n    }\r\n\r\n    function setTaxAllocations(\r\n        uint256 _holderTaxAlloc,\r\n        uint256 _marketingTaxAlloc,\r\n        uint256 _lpTaxAlloc\r\n\r\n        \r\n    ) external onlyOwner {\r\n        totalTaxAlloc = operationsTaxAlloc.add(buybackTaxAlloc).add(prizePoolTaxAlloc).add(bountiesTaxAlloc).add(daoTreasuryTaxAlloc).add(_holderTaxAlloc).add(_marketingTaxAlloc).add(_lpTaxAlloc);\r\n\r\n        require(_holderTaxAlloc <= 20, \"_holderTaxAlloc is greater than 20\");\r\n        require(_lpTaxAlloc <= 20, \"_lpTaxAlloc is greater than 20\");\r\n        require(_marketingTaxAlloc <= 20, \"_marketingTaxAlloc is greater than 20\");\r\n\r\n        holderTaxAlloc = _holderTaxAlloc;\r\n        marketingTaxAlloc = _marketingTaxAlloc;\r\n        lpTaxAlloc = _lpTaxAlloc;\r\n    }\r\n    \r\n    function setMultiSigTaxAllocations(\r\n\r\n        uint256 _operationsTaxAlloc,\r\n        uint256 _buybackTaxAlloc,\r\n        uint256 _prizePoolTaxAlloc,\r\n        uint256 _bountiesTaxAlloc,\r\n        uint256 _daoTreasuryTaxAlloc\r\n        \r\n    ) external onlyOwner {\r\n        \r\n        totalTaxAlloc = holderTaxAlloc.add(marketingTaxAlloc).add(lpTaxAlloc).add(_operationsTaxAlloc).add(_buybackTaxAlloc).add(_prizePoolTaxAlloc).add(_bountiesTaxAlloc).add(_daoTreasuryTaxAlloc);\r\n        \r\n        require(_operationsTaxAlloc <= 20, \"_operationsTaxAlloc is greater than 20\");\r\n        require(_buybackTaxAlloc <= 20, \"_buybackTaxAlloc is greater than 20\");\r\n        require(_prizePoolTaxAlloc <= 20, \"_prizePoolTaxAlloc is greater than 20\");\r\n        require(_bountiesTaxAlloc <= 20, \"_bountiesTaxAlloc is greater than 20\");\r\n        require(_daoTreasuryTaxAlloc <= 20, \"_daoTreasuryTaxAlloc is greater than 20\");\r\n        \r\n        operationsTaxAlloc = _operationsTaxAlloc;\r\n        buybackTaxAlloc = _buybackTaxAlloc;\r\n        prizePoolTaxAlloc = _prizePoolTaxAlloc;\r\n        bountiesTaxAlloc = _bountiesTaxAlloc;\r\n        daoTreasuryTaxAlloc = _daoTreasuryTaxAlloc;\r\n        \r\n    }\r\n\r\n    function setMarketingAddress(address _marketingAddress) external onlyOwner {\r\n        marketingAddress = _marketingAddress;\r\n    }\r\n\r\n    function setLpStakingAddress(address _lpStakingAddress) external onlyOwner {\r\n        lpStakingAddress = _lpStakingAddress;\r\n    }\r\n\r\n    function setOperationsMultiSigAddress(address _operationsMultiSigAddress) external onlyOwner {\r\n        operationsMultiSigAddress = _operationsMultiSigAddress;\r\n    }\r\n    \r\n    function setBuybackMultiSigAddress(address _buybackMultiSigAddress) external onlyOwner {\r\n        buybackMultiSigAddress = _buybackMultiSigAddress;\r\n    }\r\n    \r\n    function setPrizePoolMultiSigAddress(address _prizePoolMultiSigAddress) external onlyOwner {\r\n        prizePoolMultiSigAddress = _prizePoolMultiSigAddress;\r\n    }\r\n    \r\n    function setBountiesMultiSigAddress(address _bountiesMultiSigAddress) external onlyOwner {\r\n        bountiesMultiSigAddress = _bountiesMultiSigAddress;\r\n    }\r\n    \r\n    function setDaoTreasuryMultiSigAddress(address _daoTreasuryMultiSigAddress) external onlyOwner {\r\n        daoTreasuryMultiSigAddress = _daoTreasuryMultiSigAddress;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bountiesMultiSigAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bountiesTaxAlloc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackMultiSigAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackTaxAlloc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoTreasuryMultiSigAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoTreasuryTaxAlloc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_actualAmount\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"excludeFromRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderTaxAlloc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"includeInFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"includeInRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isExcludedFromRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpStakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpTaxAlloc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTaxAlloc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationsMultiSigAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationsTaxAlloc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizePoolMultiSigAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizePoolTaxAlloc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_actualAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_deductTransferFee\",\"type\":\"bool\"}],\"name\":\"rewardsFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bountiesMultiSigAddress\",\"type\":\"address\"}],\"name\":\"setBountiesMultiSigAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buybackMultiSigAddress\",\"type\":\"address\"}],\"name\":\"setBuybackMultiSigAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daoTreasuryMultiSigAddress\",\"type\":\"address\"}],\"name\":\"setDaoTreasuryMultiSigAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpStakingAddress\",\"type\":\"address\"}],\"name\":\"setLpStakingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operationsTaxAlloc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buybackTaxAlloc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_prizePoolTaxAlloc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bountiesTaxAlloc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_daoTreasuryTaxAlloc\",\"type\":\"uint256\"}],\"name\":\"setMultiSigTaxAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operationsMultiSigAddress\",\"type\":\"address\"}],\"name\":\"setOperationsMultiSigAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_prizePoolMultiSigAddress\",\"type\":\"address\"}],\"name\":\"setPrizePoolMultiSigAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_holderTaxAlloc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingTaxAlloc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpTaxAlloc\",\"type\":\"uint256\"}],\"name\":\"setTaxAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxPercentage\",\"type\":\"uint256\"}],\"name\":\"setTaxPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"name\":\"tokenWithRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBountiesFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuybackFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDaoTreasuryFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHolderFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLpFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMarketingFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOperationsFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPrizePoolFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTaxAlloc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BAS", "CompilerVersion": "v0.7.4+commit.3f05b770", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "0000000000000000000000009c498acc37a1d3113fd140753da6f049283e92f3", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://59b7e12bcfa78963c9c0f468368a98b80ffc52aa1035af62e1926c278b4cf43f"}