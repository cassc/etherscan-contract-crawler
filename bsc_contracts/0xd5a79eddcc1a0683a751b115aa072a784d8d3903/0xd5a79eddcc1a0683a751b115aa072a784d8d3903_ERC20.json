{"SourceCode": "pragma solidity ^0.8.0;\r\n\r\n\r\ninterface IERC20 {\r\n   event Transfer(address indexed from, address indexed to, uint256 value);\r\n   event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\r\n   function totalSupply() external view returns (uint256);\r\n   function balanceOf(address account) external view returns (uint256);\r\n   function transfer(address to, uint256 amount) external returns (bool);\r\n   function allowance(address owner, address spender) external view returns (uint256);\r\n   function approve(address spender, uint256 amount) external returns (bool);\r\n   function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n   function name() external view returns (string memory);\r\n   function symbol() external view returns (string memory);\r\n   function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\nabstract contract Context {\r\n   function _msgSender() internal view virtual returns (address) {\r\n       return msg.sender;\r\n   }\r\n\r\n\r\n   function _msgData() internal view virtual returns (bytes calldata) {\r\n       return msg.data;\r\n   }\r\n}\r\n\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n   mapping(address => uint256) private _balances;\r\n   mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n\r\n   uint256 private _totalSupply;\r\n   string private _name;\r\n   string private _symbol;\r\n   uint8 private _decimals;\r\n\r\n\r\n   uint256 public taxFee;\r\n   address public owner;\r\n   address public deadWallet = 0x000000000000000000000000000000000000dEaD;\r\n\r\n\r\n   constructor(string memory name_, string memory symbol_, uint8 decimals_, uint256 taxFee_) {\r\n       _name = name_;\r\n       _symbol = symbol_;\r\n       _decimals = decimals_;\r\n       taxFee = taxFee_;\r\n       owner = _msgSender();\r\n\r\n\r\n       _totalSupply = 420000000000000 * (10 ** uint256(decimals_));\r\n       _balances[owner] = _totalSupply;\r\n       emit Transfer(address(0), owner, _totalSupply);\r\n   }\r\n\r\n\r\n   function name() public view virtual override returns (string memory) {\r\n       return _name;\r\n   }\r\n\r\n\r\n   function symbol() public view virtual override returns (string memory) {\r\n       return _symbol;\r\n   }\r\n\r\n\r\n   function decimals() public view virtual override returns (uint8) {\r\n       return _decimals;\r\n   }\r\n\r\n\r\n   function totalSupply() public view virtual override returns (uint256) {\r\n       return _totalSupply;\r\n   }\r\n\r\n\r\n   function balanceOf(address account) public view virtual override returns (uint256) {\r\n       return _balances[account];\r\n   }\r\n\r\n\r\n   function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n       address sender = _msgSender();\r\n       uint256 toAmount = amount;\r\n       uint256 feeAmount = 0;\r\n       if (taxFee > 0) {\r\n           feeAmount = amount * taxFee / 100;\r\n           toAmount = amount - feeAmount;\r\n           _transfer(sender, deadWallet, feeAmount);\r\n       }\r\n       _transfer(sender, to, toAmount);\r\n       return true;\r\n   }\r\n\r\n\r\n   function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n       return _allowances[owner][spender];\r\n   }\r\n\r\n\r\n   function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n               address sender = _msgSender();\r\n       _approve(sender, spender, amount);\r\n       return true;\r\n   }\r\n\r\n\r\n   function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n       _spendAllowance(sender, _msgSender(), amount);\r\n       uint256 toAmount = amount;\r\n       uint256 feeAmount = 0;\r\n      \r\n       if (taxFee > 0) {\r\n           feeAmount = amount * taxFee / 100;\r\n           toAmount = amount - feeAmount;\r\n           _transfer(sender, deadWallet, feeAmount);\r\n       }\r\n\r\n\r\n       _transfer(sender, recipient, toAmount);\r\n       return true;\r\n   }\r\n\r\n\r\n   function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n       address sender = _msgSender();\r\n       _approve(sender, spender, _allowances[sender][spender] + addedValue);\r\n       return true;\r\n   }\r\n\r\n\r\n   function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n       address sender = _msgSender();\r\n       uint256 currentAllowance = _allowances[sender][spender];\r\n       require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n       unchecked {\r\n           _approve(sender, spender, currentAllowance - subtractedValue);\r\n       }\r\n\r\n\r\n       return true;\r\n   }\r\n\r\n\r\n   function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n       require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n       require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n\r\n       _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n\r\n       uint256 senderBalance = _balances[sender];\r\n       require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n       unchecked {\r\n           _balances[sender] = senderBalance - amount;\r\n           _balances[recipient] += amount;\r\n       }\r\n\r\n\r\n       emit Transfer(sender, recipient, amount);\r\n\r\n\r\n       _afterTokenTransfer(sender, recipient, amount);\r\n   }\r\n\r\n\r\n   function _mint(address account, uint256 amount) internal virtual {\r\n       require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n\r\n       _beforeTokenTransfer(address(0), account, amount);\r\n\r\n\r\n       _totalSupply += amount;\r\n       _balances[account] += amount;\r\n       emit Transfer(address(0), account, amount);\r\n\r\n\r\n       _afterTokenTransfer(address(0), account, amount);\r\n   }\r\n\r\n\r\n   function _burn(address account, uint256 amount) internal virtual {\r\n       require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n\r\n       _beforeTokenTransfer(account, address(0), amount);\r\n\r\n\r\n       uint256 accountBalance = _balances[account];\r\n       require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n       unchecked {\r\n           _balances[account] = accountBalance - amount;\r\n           _totalSupply -= amount;\r\n       }\r\n\r\n\r\n       emit Transfer(account, address(0), amount);\r\n\r\n\r\n       _afterTokenTransfer(account, address(0), amount);\r\n   }\r\n\r\n\r\n   function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n       require(owner != address(0), \"ERC20: approve from the zero address\");\r\n       require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n\r\n       _allowances[owner][spender] = amount;\r\n       emit Approval(owner, spender, amount);\r\n   }\r\n\r\n\r\n   function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n       uint256 currentAllowance = allowance(owner, spender);\r\n       require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n       unchecked {\r\n           _approve(owner, spender, currentAllowance - amount);\r\n       }\r\n   }\r\n\r\n\r\n   function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n\r\n\r\n   function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"taxFee_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ERC20", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000b4d6f6e6b6579204b696e67000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a4d4f4e4b45594b494e4700000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://932a2f69728abe61bfd060ab44c4fb8dd602106e205f436381901662e061a6f7"}