{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/common/configuration/AddressProvider/IAddressesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IAddressesProvider {\\r\\n  /***************************************************** */\\r\\n  /*********************GETTERS************************* */\\r\\n  /***************************************************** */\\r\\n  function getAddress(bytes32 id) external view returns (address);\\r\\n\\r\\n  function getSpent() external view returns (address);\\r\\n\\r\\n  function getSpentLP() external view returns (address);\\r\\n\\r\\n  function getEusd() external view returns (address);\\r\\n\\r\\n  function getZapContract() external view returns (address);\\r\\n\\r\\n  function getBscViaDuctContract() external returns (address);\\r\\n\\r\\n  function getBarterRouter() external view returns (address);\\r\\n\\r\\n  function getBarterFactory() external view returns (address);\\r\\n\\r\\n  function getUpRightContract() external view returns (address);\\r\\n\\r\\n  function getCropYardContract() external view returns (address);\\r\\n\\r\\n  function getPrimeContract() external view returns (address);\\r\\n\\r\\n  function getFiskContract() external view returns (address);\\r\\n\\r\\n  function getWhitelistContract() external view returns (address);\\r\\n\\r\\n  function getUprightStableContract() external view returns (address);\\r\\n\\r\\n  function getUprightLpContract() external view returns (address);\\r\\n\\r\\n  function getUprightSwapTokenContract() external view returns (address);\\r\\n\\r\\n  function getUprightBstContract() external view returns (address);\\r\\n\\r\\n  function getBorrowLendContract() external view returns (address);\\r\\n\\r\\n  function getTokenomicsContract() external view returns (address);\\r\\n\\r\\n  function getManagerContract() external view returns (address);\\r\\n\\r\\n  function getManager() external view returns (address);\\r\\n\\r\\n  /***************************************************** */\\r\\n  /*********************SETTERS************************* */\\r\\n  /***************************************************** */\\r\\n\\r\\n  function setAddress(bytes32 id, address newAddress) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/common/configuration/Manager/Manager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.10;\\r\\n\\r\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport { IAddressesProvider } from \\\"../AddressProvider/IAddressesProvider.sol\\\";\\r\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport { IFisk } from \\\"../../../protocol/Fisk/interface/IFisk.sol\\\";\\r\\nimport { IBarterERC20 } from \\\"../../../protocol/Barter/interface/IBarterERC20.sol\\\";\\r\\nimport { Errors } from \\\"../../libraries/helpers/Errors.sol\\\";\\r\\n\\r\\ncontract Manager is Ownable, ReentrancyGuard {\\r\\n  IAddressesProvider public immutable ADDRESSES_PROVIDER;\\r\\n\\r\\n  event AirDropAdded(address account, uint256 amount);\\r\\n\\r\\n  constructor(IAddressesProvider provider) {\\r\\n    ADDRESSES_PROVIDER = provider;\\r\\n  }\\r\\n\\r\\n  modifier onlyManager() {\\r\\n    _onlyManager();\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function _onlyManager() internal view virtual {\\r\\n    require(ADDRESSES_PROVIDER.getManager() == msg.sender, Errors.CALLER_NOT_MANAGER);\\r\\n  }\\r\\n\\r\\n  function increaseAllowanceFisk(address account, uint256 amount, address token) public nonReentrant onlyManager returns (bool) {\\r\\n    return IFisk(ADDRESSES_PROVIDER.getFiskContract()).approve(account, amount, token);\\r\\n  }\\r\\n\\r\\n  function restAllowanceFisk(address account, address token) public nonReentrant onlyManager returns (bool) {\\r\\n    return IFisk(ADDRESSES_PROVIDER.getFiskContract()).approvalRest(account, token);\\r\\n  }\\r\\n\\r\\n  function subFiskGameAmount(address account, uint256 amount) public nonReentrant onlyManager returns (bool) {\\r\\n    return IFisk(ADDRESSES_PROVIDER.getFiskContract()).subGameAmount(account, amount);\\r\\n  }\\r\\n\\r\\n  function addAirDropToMember(address account, uint256 amount) public nonReentrant onlyManager returns (bool) {\\r\\n    require(IBarterERC20(ADDRESSES_PROVIDER.getSpentLP()).balanceOf(address(this)) > amount, Errors.LOW_BALANCE);\\r\\n    IBarterERC20(ADDRESSES_PROVIDER.getSpentLP()).addAirDrop(account, amount);\\r\\n    emit AirDropAdded(account, amount);\\r\\n    IBarterERC20(ADDRESSES_PROVIDER.getSpentLP()).transfer(address(0), amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function subAirDropFromMember(address account, uint256 amount) public nonReentrant onlyManager returns (bool) {\\r\\n    IBarterERC20(ADDRESSES_PROVIDER.getSpentLP()).subAirDrop(account, amount);\\r\\n    return true;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/common/libraries/helpers/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.10;\\r\\n\\r\\n// FIXME: seggregate errors\\r\\nlibrary Errors {\\r\\n  /*********************************************************** */\\r\\n  /****************************RBAC*************************** */\\r\\n  /*********************************************************** */\\r\\n  string public constant CALLER_NOT_ADMIN = \\\"CALLER_NOT_ADMIN\\\"; // 'The caller of the function is not a pool admin'\\r\\n  string public constant CALLER_NOT_OWNER = \\\"CALLER_NOT_OWNER\\\"; // 'The caller of the function is not a pool admin'\\r\\n  string public constant CALLER_NOT_MODERATOR = \\\"CALLER_NOT_MODERATOR\\\"; // 'The caller of the function is not a pool admin'\\r\\n  string public constant CALLER_NOT_SWAP = \\\"CALLER_NOT_SWAP\\\"; // 'The caller of the function is not a pool admin'\\r\\n  string public constant ACL_ADMIN_CANNOT_BE_ZERO = \\\"ACL_ADMIN_CANNOT_BE_ZERO\\\";\\r\\n\\r\\n  /*********************************************************** */\\r\\n  /*************************WHITELISTING********************** */\\r\\n  /*********************************************************** */\\r\\n  string public constant ALREADY_WHITELISTED = \\\"ALREADY_WHITELISTED\\\";\\r\\n  string public constant CALLER_OR_POOL_NOT_WHITELISTED = \\\"CALLER_OR_POOL_NOT_WHITELISTED\\\";\\r\\n  string public constant REF_NOT_WHITELISTED = \\\"REF_NOT_WHITELISTED\\\";\\r\\n  string public constant CANNOT_BE_CALLED_BY_MEMBER = \\\"CANNOT_BE_CALLED_BY_MEMBER\\\";\\r\\n  string public constant WRONG_LOACTION = \\\"WRONG_LOACTION\\\";\\r\\n  /*********************************************************** */\\r\\n  /****************************ERC20************************** */\\r\\n  /*********************************************************** */\\r\\n  string public constant AMOUNT_ZERO = \\\"AMOUNT_ZERO\\\";\\r\\n  string public constant LOW_ALLOWANCE = \\\"LOW_ALLOWANCE\\\";\\r\\n  string public constant INSUFFICIENT_AMOUNT = \\\"INSUFFICIENT_AMOUNT\\\";\\r\\n  string public constant LOW_BALANCE = \\\"LOW_BALANCE\\\";\\r\\n  /*********************************************************** */\\r\\n  /*************************ZERO_ERROR************************ */\\r\\n  /*********************************************************** */\\r\\n  string public constant LP_AMOUNT_INVALID = \\\"LP_AMOUNT_INVALID\\\";\\r\\n  string public constant AMOUNT_INVALID = \\\"AMOUNT_INVALID\\\";\\r\\n  string public constant NO_TOKEN_IN_CONTRACT = \\\"NO_TOKEN_IN_CONTRACT\\\";\\r\\n  /*********************************************************** */\\r\\n  /**************************LOCKED*************************** */\\r\\n  /*********************************************************** */\\r\\n  string public constant LP_NOT_UNLOCABLE_YET = \\\"LP_NOT_UNLOCABLE_YET\\\";\\r\\n  /*********************************************************** */\\r\\n  /**************************STAKE*************************** */\\r\\n  /*********************************************************** */\\r\\n  string public constant WRONG_LP = \\\"WRONG_LP\\\";\\r\\n  string public constant NOT_CLAIMABLE_YET = \\\"NOT_CLAIMABLE_YET\\\";\\r\\n  string public constant NOT_UNSTAKABLE_YET = \\\"NOT_UNSTAKABLE_YET\\\";\\r\\n  string public constant LOW_LOCK_DURATION = \\\"LOW_LOCK_DURATION\\\";\\r\\n  /*********************************************************** */\\r\\n  /**************************TRANSACTION************************ */\\r\\n  /************************************************************ */\\r\\n  string public constant TRANSACTION_FAILED = \\\"TRANSACTION_FAILED\\\";\\r\\n  /*********************************************************** */\\r\\n  /**************************VIA-DUCT************************* */\\r\\n  /*********************************************************** */\\r\\n  string public constant ZERO_AFTER_DEDUCTIONS = \\\"ZERO_AFTER_DEDUCTIONS\\\";\\r\\n  string public constant ZERO_AFTER_VALUATIONS = \\\"ZERO_AFTER_VALUATIONS\\\";\\r\\n  string public constant LOW_eUSD_BALANCE_IN_CONTRACT = \\\"LOW_eUSD_BALANCE_IN_CONTRACT\\\";\\r\\n  /*********************************************************** */\\r\\n  /**************************ACL****************************** */\\r\\n  /*********************************************************** */\\r\\n  string public constant CALLER_NOT_PRIME_CONTRACT = \\\"CALLER_NOT_PRIME_CONTRACT\\\";\\r\\n  string public constant CALLER_NOT_WHITELIST_CONTRACT = \\\"CALLER_NOT_WHITELIST_CONTRACT\\\";\\r\\n  string public constant CALLER_NOT_CROP_YARD_CONTRACT = \\\"CALLER_NOT_CROP_YARD_CONTRACT\\\";\\r\\n  string public constant CALLER_NOT_BORROW_LEND_CONTRACT = \\\"CALLER_NOT_BORROW_LEND_CONTRACT\\\";\\r\\n\\r\\n  string public constant CALLER_NOT_UPRIGHT_STABLE_CONTRACT = \\\"CALLER_NOT_UPRIGHT_STABLE_CONTRACT\\\";\\r\\n  string public constant CALLER_NOT_UPRIGHT_LP_CONTRACT = \\\"CALLER_NOT_UPRIGHT_LP_CONTRACT\\\";\\r\\n  string public constant CALLER_NOT_UPRIGHT_SWAP_TOKEN_CONTRACT = \\\"CALLER_NOT_UPRIGHT_SWAP_TOKEN_CONTRACT\\\";\\r\\n  string public constant CALLER_NOT_UPRIGHT_BST_CONTRACT = \\\"CALLER_NOT_UPRIGHT_BST_CONTRACT\\\";\\r\\n\\r\\n  string public constant CALLER_NOT_MANAGER_CONTRACT = \\\"CALLER_NOT_MANAGER_CONTRACT\\\";\\r\\n  string public constant CALLER_NOT_MANAGER = \\\"CALLER_NOT_MANAGER\\\";\\r\\n\\r\\n  string public constant CALLER_NOT_CROP_YARD_OR_UPRIGHT_CONTRACT = \\\"CALLER_NOT_CROP_YARD_OR_UPRIGHT_CONTRACT\\\";\\r\\n\\r\\n  string public constant CALLER_NOT_BSC_VIADUCT_CONTRACT = \\\"CALLER_NOT_BSC_VIADUCT_CONTRACT\\\";\\r\\n  string public constant CALLER_NOT_ROUTER_CONTRACT = \\\"CALLER_NOT_ROUTER_CONTRACT\\\";\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/protocol/Barter/interface/IBarterERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IBarterERC20 {\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n  event AirdropAdded(address indexed account, uint256 amount);\\r\\n\\r\\n  function name() external pure returns (string memory);\\r\\n\\r\\n  function symbol() external pure returns (string memory);\\r\\n\\r\\n  function decimals() external pure returns (uint8);\\r\\n\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n  function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n  function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n  function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\\r\\n\\r\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n  function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n  function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n  function addAirDrop(address account, uint256 amount) external returns (bool);\\r\\n\\r\\n  function subAirDrop(address account, uint256 amount) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/protocol/Fisk/interface/IFisk.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\ninterface IFisk {\\r\\n  event claimedFisk(uint256 amount, address account);\\r\\n  event claimedV2Fisk(uint256 amount, address account);\\r\\n  event GameAmountAdded(address account, uint256 amount);\\r\\n  event GameAmountSub(address account, uint256 amount);\\r\\n\\r\\n  /********************************************************** */\\r\\n\\r\\n  function addCropYardFees(uint256 amount) external returns (bool);\\r\\n\\r\\n  function addWhitelistFees(uint256 amount) external returns (bool);\\r\\n\\r\\n  function addCropYardPerformanceFees(uint256 amount) external returns (bool);\\r\\n\\r\\n  /***********************STAKE*********************** */\\r\\n  function addBorrowStakeTokenFees(uint256 amount) external returns (bool);\\r\\n\\r\\n  function addStableTokensFees(uint256 amount) external returns (bool);\\r\\n\\r\\n  function addSwapLpTokensFees(uint256 amount) external returns (bool);\\r\\n\\r\\n  function addSwapTokensFees(uint256 amount) external returns (bool);\\r\\n\\r\\n  function addBorrowLendFees(uint256 amount) external returns (bool);\\r\\n\\r\\n  /*************************************************** */\\r\\n\\r\\n  function claim(address account, address token) external returns (bool);\\r\\n\\r\\n  function claimV2(address to, address token, uint256 amount) external returns (bool);\\r\\n\\r\\n  function allowance(address account, address token) external returns (uint256);\\r\\n\\r\\n  function approve(address account, uint256 amount, address token) external returns (bool);\\r\\n\\r\\n  function approvalRest(address account, address token) external returns (bool);\\r\\n\\r\\n  /****************************************************** */\\r\\n\\r\\n  function addGameAmount(address account, uint256 amount) external returns (bool);\\r\\n\\r\\n  function subGameAmount(address account, uint256 amount) external returns (bool);\\r\\n\\r\\n  function getGameAmount(address account) external returns (uint256);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 99999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"provider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AirDropAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addAirDropToMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"increaseAllowanceFisk\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"restAllowanceFisk\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"subAirDropFromMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"subFiskGameAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Manager", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "00000000000000000000000013ed3ac9199ab184f6bafe8453a847d4223867b7", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}