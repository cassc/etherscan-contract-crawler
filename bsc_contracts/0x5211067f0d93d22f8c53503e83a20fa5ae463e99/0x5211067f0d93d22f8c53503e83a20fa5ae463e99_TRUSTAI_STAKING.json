{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Chianlink/TRUSTAI_STAKING.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Creator: andreitoma8\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nerror Withdraw__TransferFailed();\\nerror Staking__TransferFailed();\\n\\ncontract TRUSTAI_STAKING is ReentrancyGuard, Ownable, AutomationCompatibleInterface {\\n    IERC20 public s_stakingToken;\\n    IERC20 public s_rewardToken;\\n    address public treasuryWallet;\\n    uint256 interval;\\n    uint256 lastTimeStamp;\\n    mapping(address => bool) public userIndices;\\n    address[] public users;\\n\\n\\n    /**\\n     * @notice Structure to store staker information\\n     */\\n    struct Staker {\\n        // The deposited tokens of the Staker\\n        uint256 deposited;\\n        // Last time of details update for Deposit\\n        uint256 timeOfLastUpdate;\\n        // Calculated, but unclaimed rewards. These are calculated each time\\n        // a user writes to the contract.\\n        uint256 unclaimedRewards;\\n    }\\n\\n    // Rewards per hour. A fraction calculated as x/10,000,000 to get the percentage\\n    uint256 public rewardsPerHour = 500; // 0.00285% per hour or 25% APR\\n\\n    // Minimum amount to stake\\n    uint256 public minStake = 1 * 10**18;\\n\\n    /**\\n     * @notice Mapping of address to Staker info\\n     */\\n    mapping(address => Staker) internal stakers;\\n\\n    /**\\n     * @notice Contract constructor\\n     * @param stakingToken The address of the staking token\\n     * @param rewardToken The address of the reward token\\n     * @param _treasuryWallet The address of the treasury wallet\\n     */\\n    constructor(address stakingToken, address rewardToken, address _treasuryWallet) {\\n        s_stakingToken = IERC20(stakingToken);\\n        s_rewardToken = IERC20(rewardToken);\\n        treasuryWallet = _treasuryWallet;\\n    }\\n\\n    /**\\n     * @notice Deposit tokens into the staking contract\\n     * @param _amount The amount of tokens to deposit\\n     */\\n    function deposit(uint256 _amount) external nonReentrant {\\n        if (!userIndices[msg.sender]) {\\n            userIndices[msg.sender] = true;\\n            users.push(msg.sender);\\n        }\\n        require(_amount >= minStake, \\\"Amount smaller than minimum deposit\\\");\\n        require(\\n            s_stakingToken.balanceOf(msg.sender) >= _amount,\\n            \\\"Can't stake more than you own\\\"\\n        );\\n        if (stakers[msg.sender].deposited == 0) {\\n            stakers[msg.sender].deposited = _amount;\\n            stakers[msg.sender].timeOfLastUpdate = block.timestamp;\\n            stakers[msg.sender].unclaimedRewards = 0;\\n        } else {\\n            uint256 rewards = calculateRewards(msg.sender);\\n            stakers[msg.sender].unclaimedRewards += rewards;\\n            stakers[msg.sender].deposited += _amount;\\n            stakers[msg.sender].timeOfLastUpdate = block.timestamp;\\n        }\\n        bool success = s_rewardToken.transferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        if (!success) {\\n            revert Staking__TransferFailed();\\n        }\\n    }\\n\\n    /**\\n     * @notice Compound the rewards and reset the last time of update for Deposit info\\n     */\\n    function stakeRewards() external nonReentrant {\\n        require(stakers[msg.sender].deposited > 0, \\\"You have no deposit\\\");\\n        uint256 rewards = calculateRewards(msg.sender) + stakers[msg.sender].unclaimedRewards;\\n        stakers[msg.sender].unclaimedRewards = 0;\\n        stakers[msg.sender].deposited += rewards;\\n        stakers[msg.sender].timeOfLastUpdate = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Mint rewards for the staker\\n     */\\n    function claimRewards() external nonReentrant {\\n        uint256 rewards = calculateRewards(msg.sender) + stakers[msg.sender].unclaimedRewards;\\n        require(rewards > 0, \\\"You have no rewards\\\");\\n        stakers[msg.sender].unclaimedRewards = 0;\\n        stakers[msg.sender].timeOfLastUpdate = block.timestamp;\\n        _mintRewards(msg.sender, rewards);\\n    }\\n\\n    /**\\n     * @notice Withdraw specified amount of staked tokens\\n     * @param _amount The amount of tokens to withdraw\\n     */\\n    function withdraw(uint256 _amount) external nonReentrant {\\n        require(\\n            stakers[msg.sender].deposited >= _amount,\\n            \\\"Can't withdraw more than you have\\\"\\n        );\\n        uint256 _rewards = calculateRewards(msg.sender);\\n        stakers[msg.sender].deposited -= _amount;\\n        stakers[msg.sender].timeOfLastUpdate = block.timestamp;\\n        stakers[msg.sender].unclaimedRewards = _rewards;\\n        bool success = s_stakingToken.transfer(msg.sender, _amount);\\n        if (!success) {\\n            revert Withdraw__TransferFailed();\\n        }\\n    }\\n\\n    /**\\n     * @notice Mint/Transfer ERC20 rewards to the staker\\n     * @param _staker The address of the staker\\n     * @param _rewards The amount of rewards to mint/transfer\\n     */\\n    function _mintRewards(address _staker, uint256 _rewards) internal {\\n        bool success = s_rewardToken.transferFrom(treasuryWallet, _staker, _rewards);\\n        if (!success) {\\n            revert Staking__TransferFailed();\\n        }\\n    }\\n\\n    /**\\n     * @notice Update the treasuryWallet address\\n     * @param _newTreasuryWallet The new treasury wallet address\\n     */\\n    function setTreasuryWallet(address _newTreasuryWallet) external onlyOwner {\\n        require(_newTreasuryWallet != address(0), \\\"Invalid treasury wallet address\\\");\\n        treasuryWallet = _newTreasuryWallet;\\n    }\\n\\n    /**\\n     * @notice Get user deposit and rewards by address\\n     * @param _user The address of the user\\n     * @return _stake The user's stake amount\\n     * @return _rewards The user's rewards amount\\n     */\\n    function getDepositInfo(address _user)\\n        public\\n        view\\n        returns (uint256 _stake, uint256 _rewards)\\n    {\\n        _stake = stakers[_user].deposited;\\n        _rewards = calculateRewards(_user) + stakers[msg.sender].unclaimedRewards;\\n        return (_stake, _rewards);\\n    }\\n\\n    /**\\n     * @notice Calculate the rewards since the last update on Deposit info\\n     * @param _staker The address of the staker\\n     * @return rewards The calculated rewards\\n     */\\n    function calculateRewards(address _staker)\\n        internal\\n        view\\n        returns (uint256 rewards)\\n    {\\n        return (((((block.timestamp - stakers[_staker].timeOfLastUpdate) *\\n            stakers[_staker].deposited) * rewardsPerHour) / 3600) / 10000000);\\n    }\\n\\n    /**\\n     * @notice Distribute rewards to all users\\n     */\\n    function distributeRewardsToAll() public {\\n        for (uint256 i = 0; i < users.length; i++) {\\n            address user = users[i];\\n            uint256 rewards = calculateRewards(user) + stakers[user].unclaimedRewards;\\n            if (rewards > 0) {\\n                stakers[user].unclaimedRewards = 0;\\n                stakers[user].timeOfLastUpdate = block.timestamp;\\n                 _mintRewards(msg.sender, rewards);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Change the automated update interval\\n     * @param newInterval The new interval (in seconds) for automated updates\\n     */\\n    function changeInterval(uint256 newInterval) public onlyOwner {\\n        interval = newInterval;\\n    }\\n\\n    /**\\n     * @notice Check if automated upkeep is needed\\n     * @return upkeepNeeded True if upkeep is needed, false otherwise\\n     */\\n    function checkUpkeep(bytes calldata /* checkData */) external view returns (bool upkeepNeeded, bytes memory /* performData */) {\\n        upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;\\n    }\\n\\n    /**\\n     * @notice Perform automated upkeep to update NFTs\\n     */\\n    function performUpkeep(bytes calldata /* performData */) external {\\n        // Revalidate the upkeep\\n        if ((block.timestamp - lastTimeStamp) > interval) {\\n            lastTimeStamp = block.timestamp;\\n            distributeRewardsToAll();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Staking__TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Withdraw__TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newInterval\",\"type\":\"uint256\"}],\"name\":\"changeInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeRewardsToAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getDepositInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPerHour\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTreasuryWallet\",\"type\":\"address\"}],\"name\":\"setTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userIndices\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TRUSTAI_STAKING", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000050c7584be73d20760f1947ffcbf7942822c968c800000000000000000000000050c7584be73d20760f1947ffcbf7942822c968c8000000000000000000000000b9c9a6dc679892ecee90da41597d194eea43b910", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c8bb785b3587bd8781fece8c433a72baaaa67e52423381bf4b8dc927463902a0"}