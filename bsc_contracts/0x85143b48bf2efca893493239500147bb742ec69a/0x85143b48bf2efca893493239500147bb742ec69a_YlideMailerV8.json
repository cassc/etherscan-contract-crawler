{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.17;\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n\r\n    function terminate() public onlyOwner {\r\n        selfdestruct(payable(owner));\r\n    }\r\n}\r\n\r\ncontract Terminatable is Owned {\r\n    uint256 public terminationBlock;\r\n    uint256 public creationBlock;\r\n\r\n    constructor() {\r\n        terminationBlock = 0;\r\n        creationBlock = block.number;\r\n    }\r\n\r\n    modifier notTerminated() {\r\n        if (terminationBlock != 0 && block.number >= terminationBlock) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    // intendedly left non-blocked to allow reassignment of termination block\r\n    function gracefullyTerminateAt(uint256 blockNumber) public onlyOwner {\r\n        terminationBlock = blockNumber;\r\n    }\r\n}\r\n\r\ncontract FiduciaryDuty is Owned {\r\n\r\n    uint256 public contentPartFee = 0;\r\n    uint256 public recipientFee = 0;\r\n    uint256 public broadcastFee = 0;\r\n\r\n    uint256 public broadcastFeedCreationPrice = 0;\r\n    uint256 public mailingFeedCreationPrice = 0;\r\n    // uint256 public threadCreationPrice = 0;\r\n\r\n    address payable public beneficiary;\r\n\r\n    constructor() {\r\n        beneficiary = payable(msg.sender);\r\n    }\r\n\r\n    function setFees(uint256 _contentPartFee, uint256 _recipientFee, uint256 _broadcastFee) public onlyOwner {\r\n        contentPartFee = _contentPartFee;\r\n        recipientFee = _recipientFee;\r\n        broadcastFee = _broadcastFee;\r\n    }\r\n\r\n    function setPrices(uint256 _broadcastFeedCreationPrice, uint256 _mailingFeedCreationPrice) public onlyOwner {\r\n        broadcastFeedCreationPrice = _broadcastFeedCreationPrice;\r\n        mailingFeedCreationPrice = _mailingFeedCreationPrice;\r\n        // threadCreationPrice = _threadCreationPrice;\r\n    }\r\n\r\n    function setBeneficiary(address payable _beneficiary) public onlyOwner {\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    function payForBroadcastFeedCreation() internal virtual {\r\n        if (broadcastFeedCreationPrice > 0) {\r\n            beneficiary.transfer(broadcastFeedCreationPrice);\r\n        }\r\n    }\r\n\r\n    function payForMailingFeedCreation() internal virtual {\r\n        if (mailingFeedCreationPrice > 0) {\r\n            beneficiary.transfer(mailingFeedCreationPrice);\r\n        }\r\n    }\r\n\r\n    function payOut(uint256 contentParts, uint256 recipients, uint256 broadcasts) internal virtual {\r\n        uint256 totalValue = contentPartFee * contentParts + recipientFee * recipients + broadcastFee * broadcasts;\r\n        if (totalValue > 0) {\r\n            beneficiary.transfer(totalValue);\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract BlockNumberRingBufferIndex {\r\n    \r\n    uint256 constant empty0 = 0x00ff000000ffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n    uint256 constant empty1 = 0x00ffffffff000000ffffffffffffffffffffffffffffffffffffffffffffffff;\r\n    uint256 constant empty2 = 0x00ffffffffffffff000000ffffffffffffffffffffffffffffffffffffffffff;\r\n    uint256 constant empty3 = 0x00ffffffffffffffffffff000000ffffffffffffffffffffffffffffffffffff;\r\n    uint256 constant empty4 = 0x00ffffffffffffffffffffffffff000000ffffffffffffffffffffffffffffff;\r\n    uint256 constant empty5 = 0x00ffffffffffffffffffffffffffffffff000000ffffffffffffffffffffffff;\r\n    uint256 constant empty6 = 0x00ffffffffffffffffffffffffffffffffffffff000000ffffffffffffffffff;\r\n    uint256 constant empty7 = 0x00ffffffffffffffffffffffffffffffffffffffffffff000000ffffffffffff;\r\n    uint256 constant empty8 = 0x00ffffffffffffffffffffffffffffffffffffffffffffffffff000000ffffff;\r\n    uint256 constant empty9 = 0x00ffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000;\r\n\r\n    uint256 constant indexF = 0xff00000000000000000000000000000000000000000000000000000000000000;\r\n\r\n    uint256 constant index1 = 0x0100000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant index2 = 0x0200000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant index3 = 0x0300000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant index4 = 0x0400000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant index5 = 0x0500000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant index6 = 0x0600000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant index7 = 0x0700000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant index8 = 0x0800000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant index9 = 0x0900000000000000000000000000000000000000000000000000000000000000;\r\n\r\n    uint256 constant shift024 = 0x0000000000000000000000000000000000000000000000000000000001000000;\r\n    uint256 constant shift048 = 0x0000000000000000000000000000000000000000000000000001000000000000;\r\n    uint256 constant shift072 = 0x0000000000000000000000000000000000000000000001000000000000000000;\r\n    uint256 constant shift096 = 0x0000000000000000000000000000000000000001000000000000000000000000;\r\n    uint256 constant shift120 = 0x0000000000000000000000000000000001000000000000000000000000000000;\r\n    uint256 constant shift144 = 0x0000000000000000000000000001000000000000000000000000000000000000;\r\n    uint256 constant shift168 = 0x0000000000000000000001000000000000000000000000000000000000000000;\r\n    uint256 constant shift192 = 0x0000000000000001000000000000000000000000000000000000000000000000;\r\n    uint256 constant shift216 = 0x0000000001000000000000000000000000000000000000000000000000000000;\r\n\r\n    function storeBlockNumber(uint256 indexValue, uint256 blockNumber) public pure returns (uint256) {\r\n        blockNumber = blockNumber & 0xffffff; // 3 bytes\r\n        uint256 currIdx = indexValue & indexF;\r\n        if (currIdx == 0) {\r\n            return (indexValue & empty1) | index1 | (blockNumber * shift192);\r\n        } else\r\n        if (currIdx == index1) {\r\n            return (indexValue & empty2) | index2 | (blockNumber * shift168);\r\n        } else\r\n        if (currIdx == index2) {\r\n            return (indexValue & empty3) | index3 | (blockNumber * shift144);\r\n        } else\r\n        if (currIdx == index3) {\r\n            return (indexValue & empty4) | index4 | (blockNumber * shift120);\r\n        } else\r\n        if (currIdx == index4) {\r\n            return (indexValue & empty5) | index5 | (blockNumber * shift096);\r\n        } else\r\n        if (currIdx == index5) {\r\n            return (indexValue & empty6) | index6 | (blockNumber * shift072);\r\n        } else\r\n        if (currIdx == index6) {\r\n            return (indexValue & empty7) | index7 | (blockNumber * shift048);\r\n        } else\r\n        if (currIdx == index7) {\r\n            return (indexValue & empty8) | index8 | (blockNumber * shift024);\r\n        } else\r\n        if (currIdx == index8) {\r\n            return (indexValue & empty9) | index9 | blockNumber;\r\n        } else {\r\n            return (indexValue & empty0) | (blockNumber * shift216);\r\n        }\r\n    }\r\n}\r\n\r\nstruct BroadcastFeedV8 {\r\n    address owner;\r\n    address payable beneficiary;\r\n\r\n    uint256 broadcastFee;\r\n\r\n    bool isPublic;\r\n    mapping (address => bool) writers;\r\n    uint256 messagesIndex;\r\n    uint256 messagesCount;\r\n}\r\n\r\n// struct MailingThreadV8 {\r\n//     uint256 messagesIndex;\r\n//     uint256 messageCount;\r\n\r\n//     mapping (uint256 => bool) recipientParticipationStatus;\r\n// }\r\n\r\nstruct MailingFeedV8 {\r\n    address owner;\r\n    address payable beneficiary;\r\n\r\n    uint256 recipientFee;\r\n\r\n    mapping (uint256 => uint256) recipientToMailIndex;\r\n    mapping (uint256 => uint256) recipientMessagesCount;\r\n\r\n    // mapping (uint256 => uint256) recipientToThreadJoinEventsIndex;\r\n    // mapping (uint256 => MailingThreadV8) threads;\r\n}\r\n\r\ncontract YlideMailerV8 is Owned, Terminatable, FiduciaryDuty, BlockNumberRingBufferIndex {\r\n\r\n    uint256 constant public version = 8;\r\n\r\n    mapping (uint256 => MailingFeedV8) public mailingFeeds;\r\n    mapping (uint256 => BroadcastFeedV8) public broadcastFeeds;\r\n\r\n    mapping (uint256 => uint256) public recipientToMailingFeedJoinEventsIndex;\r\n\r\n    event MailPush(\r\n        uint256 indexed recipient,\r\n        uint256 indexed feedId,\r\n        address sender,\r\n        uint256 contentId,\r\n        uint256 previousFeedEventsIndex,\r\n        bytes key\r\n    );\r\n\r\n    event ContentRecipients(\r\n        uint256 indexed contentId,\r\n        address indexed sender,\r\n        uint256[] recipients\r\n    );\r\n\r\n    event BroadcastPush(\r\n        address indexed sender,\r\n        uint256 indexed feedId,\r\n        uint256 contentId,\r\n        uint256 previousFeedEventsIndex\r\n    );\r\n    \r\n    event MessageContent(\r\n        uint256 indexed contentId,\r\n        address indexed sender,\r\n        uint16 parts,\r\n        uint16 partIdx,\r\n        bytes content\r\n    );\r\n    \r\n    event MailingFeedCreated(uint256 indexed feedId, address indexed creator);\r\n    event BroadcastFeedCreated(uint256 indexed feedId, address indexed creator);\r\n    \r\n    event MailingFeedOwnershipTransferred(uint256 indexed feedId, address newOwner);\r\n    event BroadcastFeedOwnershipTransferred(uint256 indexed feedId, address newOwner);\r\n\r\n    event MailingFeedBeneficiaryChanged(uint256 indexed feedId, address newBeneficiary);\r\n    event BroadcastFeedBeneficiaryChanged(uint256 indexed feedId, address newBeneficiary);\r\n    \r\n    event BroadcastFeedPublicityChanged(uint256 indexed feedId, bool isPublic);\r\n    event BroadcastFeedWriterChange(uint256 indexed feedId, address indexed writer, bool status);\r\n\r\n    // event ThreadCreated(uint256 indexed feedId, uint256 indexed threadId, address indexed creator);\r\n    // event ThreadJoined(uint256 indexed feedId, uint256 indexed threadId, uint256 indexed newParticipant, uint256 previousThreadJoinEventsIndex);\r\n\r\n    event MailingFeedJoined(uint256 indexed feedId, uint256 indexed newParticipant, uint256 previousFeedJoinEventsIndex);\r\n\r\n    constructor() {\r\n        mailingFeeds[0].owner = msg.sender; // regular mail\r\n        mailingFeeds[0].beneficiary = payable(msg.sender);\r\n\r\n        mailingFeeds[1].owner = msg.sender; // otc mail\r\n        mailingFeeds[1].beneficiary = payable(msg.sender);\r\n\r\n        mailingFeeds[2].owner = msg.sender; // system messages\r\n        mailingFeeds[2].beneficiary = payable(msg.sender);\r\n\r\n        mailingFeeds[3].owner = msg.sender; // system messages\r\n        mailingFeeds[3].beneficiary = payable(msg.sender);\r\n\r\n        mailingFeeds[4].owner = msg.sender; // system messages\r\n        mailingFeeds[4].beneficiary = payable(msg.sender);\r\n\r\n        mailingFeeds[5].owner = msg.sender; // system messages\r\n        mailingFeeds[5].beneficiary = payable(msg.sender);\r\n\r\n        mailingFeeds[6].owner = msg.sender; // system messages\r\n        mailingFeeds[6].beneficiary = payable(msg.sender);\r\n\r\n        mailingFeeds[7].owner = msg.sender; // system messages\r\n        mailingFeeds[7].beneficiary = payable(msg.sender);\r\n\r\n        mailingFeeds[8].owner = msg.sender; // system messages\r\n        mailingFeeds[8].beneficiary = payable(msg.sender);\r\n\r\n        mailingFeeds[9].owner = msg.sender; // system messages\r\n        mailingFeeds[9].beneficiary = payable(msg.sender);\r\n\r\n        mailingFeeds[10].owner = msg.sender; // system messages\r\n        mailingFeeds[10].beneficiary = payable(msg.sender);\r\n\r\n        broadcastFeeds[0].owner = msg.sender;\r\n        broadcastFeeds[0].beneficiary = payable(msg.sender);\r\n        broadcastFeeds[0].isPublic = false;\r\n        broadcastFeeds[0].writers[msg.sender] = true;\r\n\r\n        broadcastFeeds[1].owner = msg.sender;\r\n        broadcastFeeds[1].beneficiary = payable(msg.sender);\r\n        broadcastFeeds[1].isPublic = false;\r\n        broadcastFeeds[1].writers[msg.sender] = true;\r\n\r\n        broadcastFeeds[2].owner = msg.sender;\r\n        broadcastFeeds[2].beneficiary = payable(msg.sender);\r\n        broadcastFeeds[2].isPublic = true;\r\n    }\r\n\r\n    modifier blockLock(uint256 firstBlockNumber, uint256 blockCountLock) {\r\n        if (block.number < firstBlockNumber) {\r\n            revert('Number less than firstBlockNumber');\r\n        }\r\n        if (block.number - firstBlockNumber >= blockCountLock) {\r\n            revert('Number more than firstBlockNumber + blockCountLock');\r\n        }\r\n        _;\r\n    }\r\n\r\n    function setMailingFeedFees(uint256 feedId, uint256 _recipientFee) public {\r\n        if (msg.sender != mailingFeeds[feedId].owner) {\r\n            revert();\r\n        }\r\n        mailingFeeds[feedId].recipientFee = _recipientFee;\r\n    }\r\n\r\n    function setBroadcastFeedFees(uint256 feedId, uint256 _broadcastFee) public {\r\n        if (msg.sender != broadcastFeeds[feedId].owner) {\r\n            revert();\r\n        }\r\n        broadcastFeeds[feedId].broadcastFee = _broadcastFee;\r\n    }\r\n\r\n    function isBroadcastFeedWriter(uint256 feedId, address addr) public view returns (bool) {\r\n        return broadcastFeeds[feedId].writers[addr];\r\n    }\r\n\r\n    function getMailingFeedRecipientIndex(uint256 feedId, uint256 recipient) public view returns (uint256) {\r\n        return mailingFeeds[feedId].recipientToMailIndex[recipient];\r\n    }\r\n\r\n    function getMailingFeedRecipientMessagesCount(uint256 feedId, uint256 recipient) public view returns (uint256) {\r\n        return mailingFeeds[feedId].recipientMessagesCount[recipient];\r\n    }\r\n\r\n    function payOutMailingFeed(uint256 feedId, uint256 recipients) internal virtual {\r\n\t\tuint256 totalValue = mailingFeeds[feedId].recipientFee * recipients;\r\n\t\tif (totalValue > 0) {\r\n\t\t\tmailingFeeds[feedId].beneficiary.transfer(totalValue);\r\n\t\t}\r\n\t}\r\n\r\n    function payOutBroadcastFeed(uint256 feedId, uint256 broadcasts) internal virtual {\r\n        uint256 totalValue = broadcastFeeds[feedId].broadcastFee * broadcasts;\r\n\t\tif (totalValue > 0) {\r\n\t\t\tbroadcastFeeds[feedId].beneficiary.transfer(totalValue);\r\n\t\t}\r\n    }\r\n\r\n    receive() external payable {\r\n        // do nothing\r\n    }\r\n\r\n    function buildContentId(address senderAddress, uint256 uniqueId, uint256 firstBlockNumber, uint256 partsCount, uint256 blockCountLock) public pure returns (uint256) {\r\n        uint256 _hash = uint256(sha256(bytes.concat(bytes32(uint256(uint160(senderAddress))), bytes32(uniqueId), bytes32(firstBlockNumber))));\r\n\r\n        uint256 versionMask = (version & 0xFF) * 0x100000000000000000000000000000000000000000000000000000000000000;\r\n        uint256 blockNumberMask = (firstBlockNumber & 0xFFFFFFFF) * 0x1000000000000000000000000000000000000000000000000000000;\r\n        uint256 partsCountMask = (partsCount & 0xFFFF) * 0x100000000000000000000000000000000000000000000000000;\r\n        uint256 blockCountLockMask = (blockCountLock & 0xFFFF) * 0x10000000000000000000000000000000000000000000000;\r\n\r\n        uint256 hashMask = _hash & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n        return versionMask | blockNumberMask | partsCountMask | blockCountLockMask | hashMask;\r\n    }\r\n\r\n    /* ----------- MAIL PUSHES ----------- */\r\n    /**\r\n     * sendSmallMail - for sending tiny content to 1 recipient\r\n     * sendBulkMail - for sending tiny content to multiple recipients\r\n     * addMailRecipients - for adding recipients to any message (multipart or not)\r\n     */\r\n\r\n    function emitMailPush(uint256 feedId, uint256 rec, address sender, uint256 contentId, bytes memory key) internal {\r\n        if (mailingFeeds[feedId].owner == address(0)) {\r\n            revert(\"Feed does not exist\");\r\n        }\r\n        uint256 shrinkedBlock = block.number / 128;\r\n        if (mailingFeeds[feedId].recipientMessagesCount[rec] == 0) {\r\n            uint256 currentMailingFeedJoinEventsIndex = recipientToMailingFeedJoinEventsIndex[rec];\r\n            recipientToMailingFeedJoinEventsIndex[rec] = storeBlockNumber(currentMailingFeedJoinEventsIndex, shrinkedBlock);\r\n            emit MailingFeedJoined(feedId, rec, currentMailingFeedJoinEventsIndex);\r\n        }\r\n        // if (threadId != 0) {\r\n        //     if (mailingFeeds[feedId].threads[threadId].recipientParticipationStatus[rec] == false) {\r\n        //         mailingFeeds[feedId].threads[threadId].recipientParticipationStatus[rec] = true;\r\n        //         uint256 currentThreadJoinEventsIndex = mailingFeeds[feedId].recipientToThreadJoinEventsIndex[rec];\r\n        //         mailingFeeds[feedId].recipientToThreadJoinEventsIndex[rec] = storeBlockNumber(currentThreadJoinEventsIndex, shrinkedBlock);\r\n        //         emit ThreadJoined(feedId, threadId, rec, currentThreadJoinEventsIndex);\r\n        //     }\r\n        // }\r\n        uint256 currentFeed = mailingFeeds[feedId].recipientToMailIndex[rec];\r\n        mailingFeeds[feedId].recipientToMailIndex[rec] = storeBlockNumber(currentFeed, shrinkedBlock);\r\n        // write anything to map - 20k gas. think about it\r\n        mailingFeeds[feedId].recipientMessagesCount[rec] += 1;\r\n        // uint256 currentThread = 0;\r\n        // if (threadId != 0) {\r\n        //     currentThread = mailingFeeds[feedId].threads[threadId].messagesIndex;\r\n        //     mailingFeeds[feedId].threads[threadId].messagesIndex = storeBlockNumber(currentThread, shrinkedBlock);\r\n        // }\r\n        emit MailPush(rec, feedId, sender, contentId, currentFeed, key);\r\n    }\r\n\r\n    function sendBulkMail(uint256 feedId, uint256 uniqueId, uint256[] calldata recipients, bytes[] calldata keys, bytes calldata content) public payable notTerminated returns (uint256) {\r\n        uint256 contentId = buildContentId(msg.sender, uniqueId, block.number, 1, 0);\r\n\r\n        emit MessageContent(contentId, msg.sender, 1, 0, content);\r\n\r\n        for (uint i = 0; i < recipients.length; i++) {\r\n            emitMailPush(feedId, recipients[i], msg.sender, contentId, keys[i]);\r\n        }\r\n        emit ContentRecipients(contentId, msg.sender, recipients);\r\n\r\n        payOut(1, recipients.length, 0);\r\n        payOutMailingFeed(feedId, recipients.length);\r\n\r\n        return contentId;\r\n    }\r\n\r\n    function addMailRecipients(\r\n        uint256 feedId,\r\n        uint256 uniqueId,\r\n        uint256 firstBlockNumber,\r\n        uint16 partsCount,\r\n        uint16 blockCountLock,\r\n        uint256[] calldata recipients,\r\n        bytes[] calldata keys\r\n    ) public payable notTerminated blockLock(firstBlockNumber, blockCountLock) returns (uint256) {\r\n        uint256 contentId = buildContentId(msg.sender, uniqueId, firstBlockNumber, partsCount, blockCountLock);\r\n        for (uint i = 0; i < recipients.length; i++) {\r\n            emitMailPush(feedId, recipients[i], msg.sender, contentId, keys[i]);\r\n        }\r\n        emit ContentRecipients(contentId, msg.sender, recipients);\r\n\r\n        payOut(0, recipients.length, 0);\r\n        payOutMailingFeed(feedId, recipients.length);\r\n\r\n        return contentId;\r\n    }\r\n\r\n    /* ---------------------------------------------- */\r\n    /* ------------- MAIL BROADCASTS ---------------- */\r\n    /**\r\n     * sendBroadcast - for sending broadcast content in one transaction\r\n     * sendBroadcastHeader - for emitting broadcast header after uploading all parts of the content\r\n     */\r\n\r\n    function emitBroadcastPush(address sender, uint256 feedId, uint256 contentId) internal {\r\n        uint256 current = broadcastFeeds[feedId].messagesIndex;\r\n        broadcastFeeds[feedId].messagesIndex = storeBlockNumber(current, block.number / 128);\r\n        broadcastFeeds[feedId].messagesCount += 1;\r\n        emit BroadcastPush(sender, feedId, contentId, current);\r\n    }\r\n\r\n    function sendBroadcast(bool isPersonal, uint256 feedId, uint256 uniqueId, bytes calldata content) public payable notTerminated returns (uint256) {\r\n        if (!isPersonal && !broadcastFeeds[feedId].isPublic && broadcastFeeds[feedId].writers[msg.sender] != true) {\r\n            revert('You are not allowed to write to this feed');\r\n        }\r\n\r\n        uint256 composedFeedId = isPersonal ? uint256(sha256(abi.encodePacked(msg.sender, uint256(1), feedId))) : feedId;\r\n\r\n        uint256 contentId = buildContentId(msg.sender, uniqueId, block.number, 1, 0);\r\n\r\n        emit MessageContent(contentId, msg.sender, 1, 0, content);\r\n        emitBroadcastPush(msg.sender, composedFeedId, contentId);\r\n\r\n        payOut(1, 0, 1);\r\n        if (!isPersonal) {\r\n            payOutBroadcastFeed(feedId, 1);\r\n        }\r\n\r\n        return contentId;\r\n    }\r\n\r\n    function sendBroadcastHeader(bool isPersonal, uint256 feedId, uint256 uniqueId, uint256 firstBlockNumber, uint16 partsCount, uint16 blockCountLock) public payable notTerminated returns (uint256) {\r\n        if (!isPersonal && !broadcastFeeds[feedId].isPublic && broadcastFeeds[feedId].writers[msg.sender] != true) {\r\n            revert('You are not allowed to write to this feed');\r\n        }\r\n\r\n        uint256 composedFeedId = isPersonal ? uint256(sha256(abi.encodePacked(msg.sender, feedId))) : feedId;\r\n\r\n        uint256 contentId = buildContentId(msg.sender, uniqueId, firstBlockNumber, partsCount, blockCountLock);\r\n\r\n        emitBroadcastPush(msg.sender, composedFeedId, contentId);\r\n\r\n        payOut(0, 0, 1);\r\n        if (!isPersonal) {\r\n            payOutBroadcastFeed(feedId, 1);\r\n        }\r\n\r\n        return contentId;\r\n    }\r\n\r\n    /* ---------------------------------------------- */\r\n\r\n    // For sending content part - for broadcast or not\r\n    function sendMessageContentPart(\r\n        uint256 uniqueId,\r\n        uint256 firstBlockNumber,\r\n        uint256 blockCountLock,\r\n        uint16 parts,\r\n        uint16 partIdx,\r\n        bytes calldata content\r\n    ) public payable notTerminated blockLock(firstBlockNumber, blockCountLock) returns (uint256) {\r\n        uint256 contentId = buildContentId(msg.sender, uniqueId, firstBlockNumber, parts, blockCountLock);\r\n        emit MessageContent(contentId, msg.sender, parts, partIdx, content);\r\n\r\n        payOut(1, 0, 0);\r\n\r\n        return contentId;\r\n    }\r\n\r\n    /* ---------------------------------------------- */\r\n\r\n    // Feed management:\r\n    function createMailingFeed(uint256 uniqueId) public payable returns (uint256) {\r\n        uint256 feedId = uint256(keccak256(abi.encodePacked(msg.sender, uint256(0), uniqueId)));\r\n\r\n        if (mailingFeeds[feedId].owner != address(0)) {\r\n            revert('Feed already exists');\r\n        }\r\n        \r\n        mailingFeeds[feedId].owner = msg.sender;\r\n        mailingFeeds[feedId].beneficiary = payable(msg.sender);\r\n\r\n        payForMailingFeedCreation();\r\n\r\n        emit MailingFeedCreated(feedId, msg.sender);\r\n\r\n        return feedId;\r\n    }\r\n\r\n    function transferMailingFeedOwnership(uint256 feedId, address newOwner) public {\r\n        if (mailingFeeds[feedId].owner != msg.sender) {\r\n            revert('You are not allowed to transfer ownership of this feed');\r\n        }\r\n\r\n        mailingFeeds[feedId].owner = newOwner;\r\n        emit MailingFeedOwnershipTransferred(feedId, newOwner);\r\n    }\r\n\r\n    function setMailingFeedBeneficiary(uint256 feedId, address payable newBeneficiary) public {\r\n        if (mailingFeeds[feedId].owner != msg.sender) {\r\n            revert('You are not allowed to set beneficiary of this feed');\r\n        }\r\n\r\n        mailingFeeds[feedId].beneficiary = newBeneficiary;\r\n        emit MailingFeedBeneficiaryChanged(feedId, newBeneficiary);\r\n    }\r\n\r\n    function createBroadcastFeed(uint256 uniqueId, bool isPublic) public payable returns (uint256) {\r\n        uint256 feedId = uint256(keccak256(abi.encodePacked(msg.sender, uint256(0), uniqueId)));\r\n\r\n        if (broadcastFeeds[feedId].owner != address(0)) {\r\n            revert('Feed already exists');\r\n        }\r\n        \r\n        broadcastFeeds[feedId].owner = msg.sender;\r\n        broadcastFeeds[feedId].beneficiary = payable(msg.sender);\r\n        broadcastFeeds[feedId].isPublic = isPublic;\r\n        broadcastFeeds[feedId].writers[msg.sender] = true;\r\n        broadcastFeeds[feedId].messagesIndex = 0;\r\n        broadcastFeeds[feedId].messagesCount = 0;\r\n\r\n        payForBroadcastFeedCreation();\r\n\r\n        emit BroadcastFeedCreated(feedId, msg.sender);\r\n\r\n        return feedId;\r\n    }\r\n\r\n    function transferBroadcastFeedOwnership(uint256 feedId, address newOwner) public {\r\n        if (broadcastFeeds[feedId].owner != msg.sender) {\r\n            revert('You are not allowed to transfer ownership of this feed');\r\n        }\r\n\r\n        broadcastFeeds[feedId].owner = newOwner;\r\n        emit BroadcastFeedOwnershipTransferred(feedId, newOwner);\r\n    }\r\n\r\n    function setBroadcastFeedBeneficiary(uint256 feedId, address payable newBeneficiary) public {\r\n        if (broadcastFeeds[feedId].owner != msg.sender) {\r\n            revert('You are not allowed to set beneficiary of this feed');\r\n        }\r\n\r\n        broadcastFeeds[feedId].beneficiary = newBeneficiary;\r\n        emit BroadcastFeedBeneficiaryChanged(feedId, newBeneficiary);\r\n    }\r\n\r\n    function changeBroadcastFeedPublicity(uint256 feedId, bool isPublic) public {\r\n        if (broadcastFeeds[feedId].owner != msg.sender) {\r\n            revert('You are not allowed to change publicity of this feed');\r\n        }\r\n\r\n        broadcastFeeds[feedId].isPublic = isPublic;\r\n        emit BroadcastFeedPublicityChanged(feedId, isPublic);\r\n    }\r\n\r\n    function addBroadcastFeedWriter(uint256 feedId, address writer) public {\r\n        if (broadcastFeeds[feedId].owner != msg.sender) {\r\n            revert('You are not allowed to add writers to this feed');\r\n        }\r\n\r\n        broadcastFeeds[feedId].writers[writer] = true;\r\n        emit BroadcastFeedWriterChange(feedId, writer, true);\r\n    }\r\n\r\n    function removeBroadcastFeedWriter(uint256 feedId, address writer) public {\r\n        if (broadcastFeeds[feedId].owner != msg.sender) {\r\n            revert('You are not allowed to remove writers from this feed');\r\n        }\r\n\r\n        delete broadcastFeeds[feedId].writers[writer];\r\n        emit BroadcastFeedWriterChange(feedId, writer, false);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"BroadcastFeedBeneficiaryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"BroadcastFeedCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"BroadcastFeedOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"name\":\"BroadcastFeedPublicityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"writer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"BroadcastFeedWriterChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousFeedEventsIndex\",\"type\":\"uint256\"}],\"name\":\"BroadcastPush\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contentId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"recipients\",\"type\":\"uint256[]\"}],\"name\":\"ContentRecipients\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousFeedEventsIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"MailPush\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"MailingFeedBeneficiaryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"MailingFeedCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newParticipant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousFeedJoinEventsIndex\",\"type\":\"uint256\"}],\"name\":\"MailingFeedJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"MailingFeedOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contentId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"parts\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"partIdx\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"content\",\"type\":\"bytes\"}],\"name\":\"MessageContent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"writer\",\"type\":\"address\"}],\"name\":\"addBroadcastFeedWriter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uniqueId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"partsCount\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"blockCountLock\",\"type\":\"uint16\"},{\"internalType\":\"uint256[]\",\"name\":\"recipients\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"keys\",\"type\":\"bytes[]\"}],\"name\":\"addMailRecipients\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"broadcastFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"broadcastFeedCreationPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"broadcastFeeds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"broadcastFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"messagesIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messagesCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"uniqueId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockCountLock\",\"type\":\"uint256\"}],\"name\":\"buildContentId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"name\":\"changeBroadcastFeedPublicity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contentPartFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uniqueId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"name\":\"createBroadcastFeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uniqueId\",\"type\":\"uint256\"}],\"name\":\"createMailingFeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"name\":\"getMailingFeedRecipientIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"name\":\"getMailingFeedRecipientMessagesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"gracefullyTerminateAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isBroadcastFeedWriter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mailingFeedCreationPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mailingFeeds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"recipientFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipientFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"recipientToMailingFeedJoinEventsIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"writer\",\"type\":\"address\"}],\"name\":\"removeBroadcastFeedWriter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isPersonal\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uniqueId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"content\",\"type\":\"bytes\"}],\"name\":\"sendBroadcast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isPersonal\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uniqueId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"partsCount\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"blockCountLock\",\"type\":\"uint16\"}],\"name\":\"sendBroadcastHeader\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uniqueId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"recipients\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"keys\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"content\",\"type\":\"bytes\"}],\"name\":\"sendBulkMail\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uniqueId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockCountLock\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"parts\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"partIdx\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"content\",\"type\":\"bytes\"}],\"name\":\"sendMessageContentPart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"setBroadcastFeedBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_broadcastFee\",\"type\":\"uint256\"}],\"name\":\"setBroadcastFeedFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contentPartFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_recipientFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_broadcastFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"setMailingFeedBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_recipientFee\",\"type\":\"uint256\"}],\"name\":\"setMailingFeedFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_broadcastFeedCreationPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mailingFeedCreationPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"indexValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"storeBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferBroadcastFeedOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferMailingFeedOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "YlideMailerV8", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3b22fd1ee123e99396805020a68311cbf82b0701dcb56a2159bdf7035c8f9ab6"}