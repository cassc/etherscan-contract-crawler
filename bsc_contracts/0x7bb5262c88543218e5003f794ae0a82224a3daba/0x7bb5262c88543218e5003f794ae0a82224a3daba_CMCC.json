{"SourceCode": "{\"CMCC.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.14;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\ninterface IFeeReceiver {\\r\\n    function trigger() external;\\r\\n}\\r\\n\\r\\ninterface IStaking {\\r\\n    function stake(uint amount, address recipient) external;\\r\\n}\\r\\n\\r\\n/**\\r\\n    Modular Upgradeable Token\\r\\n    Token System Designed By DeFi Mark\\r\\n */\\r\\ncontract CMCC is IERC20, Ownable {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // total supply\\r\\n    uint256 private _totalSupply = 50_000_000 * 10**18;\\r\\n\\r\\n    // token data\\r\\n    string private constant _name = \\u0027CMC Coin\\u0027;\\r\\n    string private constant _symbol = \\u0027CMCC\\u0027;\\r\\n    uint8  private constant _decimals = 18;\\r\\n\\r\\n    // balances\\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    // Staking\\r\\n    address public staking;\\r\\n\\r\\n    // Taxation on transfers\\r\\n    uint256 public buyFee             = 1500;\\r\\n    uint256 public sellFee            = 2000;\\r\\n    uint256 public transferFee        = 0;\\r\\n    uint256 public constant TAX_DENOM = 10000;\\r\\n\\r\\n    // Maximum Sell Limit\\r\\n    uint256 public max_sell_limit = 50_000 * 10**18;\\r\\n    uint256 public max_sell_limit_duration = 1 hours;\\r\\n\\r\\n    // Max Sell Limit Info\\r\\n    struct UserInfo {\\r\\n        uint256 totalSold;\\r\\n        uint256 hourStarted;\\r\\n        uint256 index;\\r\\n        uint256 timeJoined;\\r\\n    }\\r\\n\\r\\n    // Address =\\u003e Max Sell Limit Info\\r\\n    mapping ( address =\\u003e UserInfo ) public userInfo;\\r\\n\\r\\n    // permissions\\r\\n    struct Permissions {\\r\\n        bool isFeeExempt;\\r\\n        bool isLiquidityPool;\\r\\n        bool isSellLimitExempt;\\r\\n        bool isBlacklisted;\\r\\n    }\\r\\n    mapping ( address =\\u003e Permissions ) public permissions;\\r\\n\\r\\n    // Fee Recipients\\r\\n    address public sellFeeRecipient;\\r\\n    address public buyFeeRecipient;\\r\\n    address public transferFeeRecipient;\\r\\n\\r\\n    // Trigger Fee Recipients\\r\\n    bool public triggerBuyRecipient = false;\\r\\n    bool public triggerTransferRecipient = false;\\r\\n    bool public triggerSellRecipient = false;\\r\\n\\r\\n    // List of all holders\\r\\n    address[] public holders;\\r\\n\\r\\n    // Whether or not the contract is paused\\r\\n    bool public paused;\\r\\n\\r\\n    // events\\r\\n    event SetBuyFeeRecipient(address recipient);\\r\\n    event SetSellFeeRecipient(address recipient);\\r\\n    event SetTransferFeeRecipient(address recipient);\\r\\n    event SetFeeExemption(address account, bool isFeeExempt);\\r\\n    event SetSellLimitExemption(address account, bool isFeeExempt);\\r\\n    event SetAutomatedMarketMaker(address account, bool isMarketMaker);\\r\\n    event SetFees(uint256 buyFee, uint256 sellFee, uint256 transferFee);\\r\\n    event SetStaking(address newStaking);\\r\\n    event SetAutoTriggers(bool triggerBuy, bool triggerSell, bool triggerTransfer);\\r\\n    event Blacklisted(address indexed account, bool isBlacklisted);\\r\\n\\r\\n    constructor() {\\r\\n\\r\\n        // exempt sender for tax-free initial distribution\\r\\n        permissions[msg.sender].isFeeExempt = true;\\r\\n        permissions[msg.sender].isSellLimitExempt = true;\\r\\n\\r\\n        // initial supply allocation\\r\\n        _balances[msg.sender] = _totalSupply;\\r\\n        emit Transfer(address(0), msg.sender, _totalSupply);\\r\\n\\r\\n        // add holder\\r\\n        _addHolder(msg.sender);\\r\\n    }\\r\\n\\r\\n    /////////////////////////////////\\r\\n    /////    ERC20 FUNCTIONS    /////\\r\\n    /////////////////////////////////\\r\\n\\r\\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\\r\\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\\r\\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\\r\\n    \\r\\n    function name() public pure override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public pure override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public pure override returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _allowances[msg.sender][spender] = amount;\\r\\n        emit Approval(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /** Transfer Function */\\r\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\r\\n        return _transferFrom(msg.sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** Transfer Function */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\r\\n        _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \\u0027Insufficient Allowance\\u0027);\\r\\n        return _transferFrom(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    /////////////////////////////////\\r\\n    /////   PUBLIC FUNCTIONS    /////\\r\\n    /////////////////////////////////\\r\\n\\r\\n\\r\\n    function burn(uint256 amount) external returns (bool) {\\r\\n        return _burn(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function burnFrom(address account, uint256 amount) external returns (bool) {\\r\\n        _allowances[account][msg.sender] = _allowances[account][msg.sender].sub(amount, \\u0027Insufficient Allowance\\u0027);\\r\\n        return _burn(account, amount);\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        \\r\\n    }\\r\\n\\r\\n    /////////////////////////////////\\r\\n    /////    OWNER FUNCTIONS    /////\\r\\n    /////////////////////////////////\\r\\n\\r\\n    function withdraw(address token) external onlyOwner {\\r\\n        require(token != address(0), \\u0027Zero Address\\u0027);\\r\\n        bool s = IERC20(token).transfer(msg.sender, IERC20(token).balanceOf(address(this)));\\r\\n        require(s, \\u0027Failure On Token Withdraw\\u0027);\\r\\n    }\\r\\n\\r\\n    function withdrawBNB() external onlyOwner {\\r\\n        (bool s,) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\r\\n        require(s);\\r\\n    }\\r\\n\\r\\n    function setTransferFeeRecipient(address recipient) external onlyOwner {\\r\\n        require(recipient != address(0), \\u0027Zero Address\\u0027);\\r\\n        transferFeeRecipient = recipient;\\r\\n        permissions[recipient].isFeeExempt = true;\\r\\n        permissions[recipient].isSellLimitExempt = true;\\r\\n        emit SetTransferFeeRecipient(recipient);\\r\\n    }\\r\\n\\r\\n    function setBuyFeeRecipient(address recipient) external onlyOwner {\\r\\n        require(recipient != address(0), \\u0027Zero Address\\u0027);\\r\\n        buyFeeRecipient = recipient;\\r\\n        permissions[recipient].isFeeExempt = true;\\r\\n        permissions[recipient].isSellLimitExempt = true;\\r\\n        emit SetBuyFeeRecipient(recipient);\\r\\n    }\\r\\n\\r\\n    function setSellFeeRecipient(address recipient) external onlyOwner {\\r\\n        require(recipient != address(0), \\u0027Zero Address\\u0027);\\r\\n        sellFeeRecipient = recipient;\\r\\n        permissions[recipient].isFeeExempt = true;\\r\\n        permissions[recipient].isSellLimitExempt = true;\\r\\n        emit SetSellFeeRecipient(recipient);\\r\\n    }\\r\\n\\r\\n    function registerAutomatedMarketMaker(address account) external onlyOwner {\\r\\n        require(account != address(0), \\u0027Zero Address\\u0027);\\r\\n        require(!permissions[account].isLiquidityPool, \\u0027Already An AMM\\u0027);\\r\\n        permissions[account].isLiquidityPool = true;\\r\\n        emit SetAutomatedMarketMaker(account, true);\\r\\n    }\\r\\n\\r\\n    function unRegisterAutomatedMarketMaker(address account) external onlyOwner {\\r\\n        require(account != address(0), \\u0027Zero Address\\u0027);\\r\\n        require(permissions[account].isLiquidityPool, \\u0027Not An AMM\\u0027);\\r\\n        permissions[account].isLiquidityPool = false;\\r\\n        emit SetAutomatedMarketMaker(account, false);\\r\\n    }\\r\\n\\r\\n    function blackListAddress(address account) external onlyOwner {\\r\\n        require(account != address(0), \\u0027Zero Address\\u0027);\\r\\n        permissions[account].isBlacklisted = true;\\r\\n        emit Blacklisted(account, true);\\r\\n    }\\r\\n\\r\\n    function removeBlackListFromAddress(address account) external onlyOwner {\\r\\n        require(account != address(0), \\u0027Zero Address\\u0027);\\r\\n        permissions[account].isBlacklisted = false;\\r\\n        emit Blacklisted(account, false);\\r\\n    }\\r\\n\\r\\n    function pause() external onlyOwner {\\r\\n        paused = true;\\r\\n    }\\r\\n\\r\\n    function unPause() external onlyOwner {\\r\\n        paused = false;\\r\\n    }\\r\\n\\r\\n    function setAutoTriggers(\\r\\n        bool autoBuyTrigger,\\r\\n        bool autoTransferTrigger,\\r\\n        bool autoSellTrigger\\r\\n    ) external onlyOwner {\\r\\n        triggerBuyRecipient = autoBuyTrigger;\\r\\n        triggerTransferRecipient = autoTransferTrigger;\\r\\n        triggerSellRecipient = autoSellTrigger;\\r\\n        emit SetAutoTriggers(autoBuyTrigger, autoSellTrigger, autoTransferTrigger);\\r\\n    }\\r\\n\\r\\n    function setFees(uint _buyFee, uint _sellFee, uint _transferFee) external onlyOwner {\\r\\n        require(\\r\\n            _buyFee \\u003c= 2000,\\r\\n            \\u0027Buy Fee Too High\\u0027\\r\\n        );\\r\\n        require(\\r\\n            _sellFee \\u003c= 2000,\\r\\n            \\u0027Sell Fee Too High\\u0027\\r\\n        );\\r\\n        require(\\r\\n            _transferFee \\u003c= 2000,\\r\\n            \\u0027Transfer Fee Too High\\u0027\\r\\n        );\\r\\n\\r\\n        buyFee = _buyFee;\\r\\n        sellFee = _sellFee;\\r\\n        transferFee = _transferFee;\\r\\n\\r\\n        emit SetFees(_buyFee, _sellFee, _transferFee);\\r\\n    }\\r\\n\\r\\n    function setFeeExempt(address account, bool isExempt) external onlyOwner {\\r\\n        require(account != address(0), \\u0027Zero Address\\u0027);\\r\\n        permissions[account].isFeeExempt = isExempt;\\r\\n        emit SetFeeExemption(account, isExempt);\\r\\n    }\\r\\n\\r\\n    function setMaxSellLimitExempt(address account, bool isExempt) external onlyOwner {\\r\\n        require(account != address(0), \\u0027Zero Address\\u0027);\\r\\n        permissions[account].isSellLimitExempt = isExempt;\\r\\n        emit SetSellLimitExemption(account, isExempt);\\r\\n    }\\r\\n\\r\\n    function setStaking(address newStaking) external onlyOwner {\\r\\n        require(\\r\\n            newStaking != address(0),\\r\\n            \\u0027Zero Address\\u0027\\r\\n        );\\r\\n        staking = newStaking;\\r\\n        emit SetStaking(newStaking);\\r\\n    }\\r\\n\\r\\n    function setMaxSellLimit(uint256 newLimit) external onlyOwner {\\r\\n        max_sell_limit = newLimit;\\r\\n    }\\r\\n\\r\\n    function setMaxSellLimitDuration(uint256 newDuration) external onlyOwner {\\r\\n        max_sell_limit_duration = newDuration;\\r\\n    }\\r\\n\\r\\n    \\r\\n    /////////////////////////////////\\r\\n    /////     READ FUNCTIONS    /////\\r\\n    /////////////////////////////////\\r\\n\\r\\n    function getTax(address sender, address recipient, uint256 amount) public view returns (uint256, address, bool) {\\r\\n        if ( permissions[sender].isFeeExempt || permissions[recipient].isFeeExempt ) {\\r\\n            return (0, address(0), false);\\r\\n        }\\r\\n        return permissions[sender].isLiquidityPool ? \\r\\n               (amount.mul(buyFee).div(TAX_DENOM), buyFeeRecipient, triggerBuyRecipient) : \\r\\n               permissions[recipient].isLiquidityPool ? \\r\\n               (amount.mul(sellFee).div(TAX_DENOM), sellFeeRecipient, triggerSellRecipient) :\\r\\n               (amount.mul(transferFee).div(TAX_DENOM), transferFeeRecipient, triggerTransferRecipient);\\r\\n    }\\r\\n\\r\\n    function timeSinceLastSale(address user) public view returns (uint256) {\\r\\n        uint256 last = userInfo[user].hourStarted;\\r\\n\\r\\n        return last \\u003e block.timestamp ? 0 : block.timestamp - last;\\r\\n    }\\r\\n\\r\\n    function amountSoldInLastHour(address user) public view returns (uint256) {\\r\\n        \\r\\n        uint256 timeSince = timeSinceLastSale(user);\\r\\n\\r\\n        if (timeSince \\u003e= max_sell_limit_duration) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return userInfo[user].totalSold;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function timeSinceJoined(address user) public view returns (uint256) {\\r\\n        uint256 timeJoined = userInfo[user].timeJoined;\\r\\n        if (timeJoined == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        return block.timestamp \\u003e timeJoined ? block.timestamp - timeJoined : 0;\\r\\n    }\\r\\n\\r\\n    function getNumberOfHolders() external view returns (uint256) {\\r\\n        return holders.length;\\r\\n    }\\r\\n\\r\\n    function viewAllHolders() external view returns (address[] memory) {\\r\\n        return holders;\\r\\n    }\\r\\n\\r\\n    function viewHolderSlice(uint startIndex, uint endIndex) external view returns (address[] memory) {\\r\\n        address[] memory holderList = new address[]((endIndex - startIndex ) + 1);\\r\\n        uint count = 0;\\r\\n        for (uint i = startIndex; i \\u003c endIndex;) {\\r\\n            holderList[count] = holders[i];\\r\\n            unchecked { ++i; ++count; }\\r\\n        }\\r\\n        return holderList;\\r\\n    }\\r\\n\\r\\n    function viewAllHoldersAndTimeSince() external view returns (address[] memory, uint256[] memory timeSince, uint256[] memory balances) {\\r\\n        timeSince = new uint256[](holders.length);\\r\\n        balances = new uint256[](holders.length);\\r\\n        for (uint i = 0; i \\u003c holders.length;) {\\r\\n            timeSince[i] = timeSinceJoined(holders[i]);\\r\\n            balances[i] = _balances[holders[i]];\\r\\n            unchecked { ++i; }\\r\\n        }\\r\\n        return (holders, timeSince, balances);\\r\\n    }\\r\\n\\r\\n    function viewAllHoldersAndTimeSinceSlice(uint startIndex, uint endIndex) external view returns (address[] memory, uint256[] memory timeSince, uint256[] memory balances) {\\r\\n        address[] memory holderList = new address[]((endIndex - startIndex ) + 1);\\r\\n        timeSince = new uint256[]((endIndex - startIndex ) + 1);\\r\\n        balances = new uint256[]((endIndex - startIndex ) + 1);\\r\\n        uint count = 0;\\r\\n        for (uint i = startIndex; i \\u003c endIndex;) {\\r\\n            holderList[count] = holders[i];\\r\\n            timeSince[count] = timeSinceJoined(holders[i]);\\r\\n            balances[count] = _balances[holders[i]];\\r\\n            unchecked { ++i; ++count; }\\r\\n        }\\r\\n        return (holders, timeSince, balances);\\r\\n    }\\r\\n\\r\\n    //////////////////////////////////\\r\\n    /////   INTERNAL FUNCTIONS   /////\\r\\n    //////////////////////////////////\\r\\n\\r\\n    /** Internal Transfer */\\r\\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\\r\\n        require(\\r\\n            recipient != address(0),\\r\\n            \\u0027Zero Recipient\\u0027\\r\\n        );\\r\\n        require(\\r\\n            amount \\u003e 0,\\r\\n            \\u0027Zero Amount\\u0027\\r\\n        );\\r\\n        require(\\r\\n            amount \\u003c= balanceOf(sender),\\r\\n            \\u0027Insufficient Balance\\u0027\\r\\n        );\\r\\n        require(\\r\\n            paused == false || msg.sender == this.getOwner(),\\r\\n            \\u0027Paused\\u0027\\r\\n        );\\r\\n        require(\\r\\n            permissions[sender].isBlacklisted == false \\u0026\\u0026 permissions[recipient].isBlacklisted == false,\\r\\n            \\u0027Blacklisted\\u0027\\r\\n        );\\r\\n        \\r\\n        // decrement sender balance\\r\\n        _balances[sender] -= amount;\\r\\n\\r\\n        // fee for transaction\\r\\n        (uint256 fee, address feeDestination, bool trigger) = getTax(sender, recipient, amount);\\r\\n\\r\\n        // give amount to recipient less fee\\r\\n        uint256 sendAmount = amount - fee;\\r\\n        _balances[recipient] += sendAmount;\\r\\n        emit Transfer(sender, recipient, sendAmount);\\r\\n\\r\\n        // add to list if recipient is a new holder\\r\\n        if (_balances[recipient] == sendAmount) {\\r\\n            _addHolder(recipient);\\r\\n        }\\r\\n\\r\\n        // remove from list if sender removed his entire balance\\r\\n        if (_balances[sender] == 0) {\\r\\n            _removeHolder(sender);\\r\\n        }\\r\\n\\r\\n        // allocate fee if any\\r\\n        if (fee \\u003e 0) {\\r\\n\\r\\n            // if recipient field is valid\\r\\n            bool isValidRecipient = feeDestination != address(0) \\u0026\\u0026 feeDestination != address(this);\\r\\n\\r\\n            // allocate amount to recipient\\r\\n            address feeRecipient = isValidRecipient ? feeDestination : address(this);\\r\\n\\r\\n            // add fee receiver to list if new holder\\r\\n            if (_balances[feeRecipient] == 0) {\\r\\n                _addHolder(feeRecipient);\\r\\n            }\\r\\n\\r\\n            // allocate fee\\r\\n            _balances[feeRecipient] += fee;\\r\\n            emit Transfer(sender, feeRecipient, fee);\\r\\n\\r\\n            // if valid and trigger is enabled, trigger tokenomics mid transfer\\r\\n            if (trigger \\u0026\\u0026 isValidRecipient) {\\r\\n                try IFeeReceiver(feeRecipient).trigger() {} catch {}\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // apply max sell limit if applicable\\r\\n        if (permissions[recipient].isLiquidityPool \\u0026\\u0026 !permissions[sender].isSellLimitExempt) {\\r\\n\\r\\n            if (timeSinceLastSale(sender) \\u003e= max_sell_limit_duration) {\\r\\n\\r\\n                // its been over the time duration, set total sold and reset timer\\r\\n                userInfo[sender].totalSold = amount;\\r\\n                userInfo[sender].hourStarted = block.timestamp;\\r\\n\\r\\n            } else {\\r\\n                \\r\\n                // time limit has not been surpassed, increment total sold\\r\\n                unchecked {\\r\\n                    userInfo[sender].totalSold += amount;\\r\\n                }\\r\\n\\r\\n            }\\r\\n\\r\\n            // ensure max limit is preserved\\r\\n            require(\\r\\n                userInfo[sender].totalSold \\u003c= max_sell_limit,\\r\\n                \\u0027Sell Exceeds Max Sell Limit\\u0027\\r\\n            );\\r\\n\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 amount) internal returns (bool) {\\r\\n        require(\\r\\n            account != address(0),\\r\\n            \\u0027Zero Address\\u0027\\r\\n        );\\r\\n        require(\\r\\n            amount \\u003e 0,\\r\\n            \\u0027Zero Amount\\u0027\\r\\n        );\\r\\n        require(\\r\\n            amount \\u003c= balanceOf(account),\\r\\n            \\u0027Insufficient Balance\\u0027\\r\\n        );\\r\\n\\r\\n        // delete from balance and supply\\r\\n        _balances[account] = _balances[account].sub(amount, \\u0027Balance Underflow\\u0027);\\r\\n        _totalSupply = _totalSupply.sub(amount, \\u0027Supply Underflow\\u0027);\\r\\n\\r\\n        // remove account\\r\\n        if (_balances[account] == 0) {\\r\\n            _removeHolder(account);\\r\\n        }\\r\\n\\r\\n        // emit transfer\\r\\n        emit Transfer(account, address(0), amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _removeHolder(address holder) internal {\\r\\n        if (holders.length == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 removeIndex = userInfo[holder].index;\\r\\n        address lastHolder = holders[holders.length - 1];\\r\\n\\r\\n        if (removeIndex \\u003e= holders.length) {\\r\\n            return;\\r\\n        }\\r\\n        if (holders[removeIndex] != holder) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        holders[removeIndex] = lastHolder;\\r\\n        userInfo[lastHolder].index = removeIndex;\\r\\n        holders.pop();\\r\\n\\r\\n        delete userInfo[holder];\\r\\n    }\\r\\n\\r\\n    function _addHolder(address holder) internal {\\r\\n        userInfo[holder].index = holders.length;\\r\\n        userInfo[holder].timeJoined = block.timestamp;\\r\\n        holders.push(holder);\\r\\n    }\\r\\n\\r\\n}\"},\"IERC20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.14;\\r\\n\\r\\ninterface IERC20 {\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    \\r\\n    function symbol() external view returns(string memory);\\r\\n    \\r\\n    function name() external view returns(string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    \\r\\n    /**\\r\\n     * @dev Returns the number of decimal places\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.14;\\r\\n\\r\\n/**\\r\\n * @title Owner\\r\\n * @dev Set \\u0026 change owner\\r\\n */\\r\\ncontract Ownable {\\r\\n\\r\\n    address private owner;\\r\\n    \\r\\n    // event for EVM logging\\r\\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\\r\\n    \\r\\n    // modifier to check if caller is owner\\r\\n    modifier onlyOwner() {\\r\\n        // If the first argument of \\u0027require\\u0027 evaluates to \\u0027false\\u0027, execution terminates and all\\r\\n        // changes to the state and to Ether balances are reverted.\\r\\n        // This used to consume all gas in old EVM versions, but not anymore.\\r\\n        // It is often a good idea to use \\u0027require\\u0027 to check if functions are called correctly.\\r\\n        // As a second argument, you can also provide an explanation about what went wrong.\\r\\n        require(msg.sender == owner, \\\"Caller is not owner\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Set contract deployer as owner\\r\\n     */\\r\\n    constructor() {\\r\\n        owner = msg.sender; // \\u0027msg.sender\\u0027 is sender of current call, contract deployer for a constructor\\r\\n        emit OwnerSet(address(0), owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change owner\\r\\n     * @param newOwner address of new owner\\r\\n     */\\r\\n    function changeOwner(address newOwner) public onlyOwner {\\r\\n        emit OwnerSet(owner, newOwner);\\r\\n        owner = newOwner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return owner address \\r\\n     * @return address of owner\\r\\n     */\\r\\n    function getOwner() external view returns (address) {\\r\\n        return owner;\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.14;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBlacklisted\",\"type\":\"bool\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"triggerBuy\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"triggerSell\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"triggerTransfer\",\"type\":\"bool\"}],\"name\":\"SetAutoTriggers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isMarketMaker\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMaker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"SetBuyFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFeeExempt\",\"type\":\"bool\"}],\"name\":\"SetFeeExemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferFee\",\"type\":\"uint256\"}],\"name\":\"SetFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"SetSellFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFeeExempt\",\"type\":\"bool\"}],\"name\":\"SetSellLimitExemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newStaking\",\"type\":\"address\"}],\"name\":\"SetStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"SetTransferFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TAX_DENOM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"amountSoldInLastHour\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"blackListAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_sell_limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_sell_limit_duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permissions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isFeeExempt\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isLiquidityPool\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSellLimitExempt\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isBlacklisted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"registerAutomatedMarketMaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeBlackListFromAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"autoBuyTrigger\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoTransferTrigger\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoSellTrigger\",\"type\":\"bool\"}],\"name\":\"setAutoTriggers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setBuyFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExempt\",\"type\":\"bool\"}],\"name\":\"setFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transferFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setMaxSellLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"setMaxSellLimitDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExempt\",\"type\":\"bool\"}],\"name\":\"setMaxSellLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setSellFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStaking\",\"type\":\"address\"}],\"name\":\"setStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setTransferFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"timeSinceJoined\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"timeSinceLastSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerBuyRecipient\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerSellRecipient\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerTransferRecipient\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unRegisterAutomatedMarketMaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hourStarted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeJoined\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewAllHolders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewAllHoldersAndTimeSince\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"timeSince\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"viewAllHoldersAndTimeSinceSlice\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"timeSince\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"viewHolderSlice\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CMCC", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://22765e91cb3cb60ec232dbe7032ec5e093c4e875efb94204aff0a942ad333216"}