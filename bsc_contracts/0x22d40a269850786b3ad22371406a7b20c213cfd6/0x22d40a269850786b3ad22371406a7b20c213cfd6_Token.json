{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function getTime() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_,uint8 decimals_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n}\r\n\r\ncontract usdtReceiver {\r\n    address public usdt;\r\n    address public owner;\r\n    constructor(address _u) {\r\n        usdt = _u;\r\n        owner = msg.sender;\r\n        IERC20(usdt).approve(msg.sender,~uint256(0));\r\n    }\r\n}\r\n\r\ncontract Token is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public  uniswapPair;\r\n\r\n    bool private swapping;\r\n    uint256 private taxAmount;\r\n    uint8 private transferTax;\r\n    uint256 public swapTokensAtAmount;\r\n\r\n    uint256 public buyTokenRewardsFee;\r\n    uint256 public sellTokenRewardsFee;\r\n\r\n    uint256 public buyLiquidityFee;\r\n    uint256 public sellLiquidityFee;\r\n\r\n    uint256 public buyMarketingFee;\r\n    uint256 public sellMarketingFee;\r\n\r\n    uint256 public buyDeadFee;\r\n    uint256 public sellDeadFee;\r\n\r\n    uint256 public AmountLiquidityFee;\r\n    uint256 public AmountTokenRewardsFee;\r\n    uint256 public AmountMarketingFee;\r\n\r\n    uint256 public addLiquidityFee;\r\n    uint256 public removeLiquidityFee;\r\n\r\n    bool    public tradingEnabled;\r\n    address public deadWallet = 0x000000000000000000000000000000000000dEaD;\r\n    address public usdtAddress;\r\n    address public _marketingWalletAddress;\r\n    address public rewardsAddress;\r\n    uint256 public gasForProcessing;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    uint256 currentIndex;\r\n    uint256 public LPFeeRewardsTimes;\r\n    uint256 public minLPFeeRewards;\r\n    uint256 public first;\r\n    usdtReceiver public _usdtReceiver;\r\n    uint256 public processRewardWaitBlock = 86400;\r\n    mapping (address => bool) public isWalletLimitExempt;\r\n    mapping (address => bool) public isTxLimitExempt;\r\n    mapping(address => bool) public isExcludedFromRewards;\r\n\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n    // Whether to distribute dividends in local currency\r\n    bool public currencyFlag;\r\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\r\n    mapping(address => bool) public automatedMarketMakerPairs;\r\n\r\n\r\n    mapping(address => bool) private _updated;\r\n    address[] public shareholders;\r\n    mapping(address => uint256) shareholderIndexes;\r\n\r\n    event changetransfer(uint8 _transferTax); \r\n    event UpdateDividendTracker(address indexed newAddress, address indexed oldAddress);\r\n\r\n    event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);\r\n\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n\r\n    event LiquidityWalletUpdated(address indexed newLiquidityWallet, address indexed oldLiquidityWallet);\r\n\r\n    event GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    event SendDividends(\r\n        uint256 tokensSwapped,\r\n        uint256 amount\r\n    );\r\n\r\n    event ProcessedDividendTracker(\r\n        uint256 iterations,\r\n        uint256 claims,\r\n        uint256 lastProcessedIndex,\r\n        bool indexed automatic,\r\n        uint256 gas,\r\n        address indexed processor\r\n    );\r\n\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint256 totalSupply_,\r\n        uint8 decimals_,\r\n        address[4] memory addrs, // router,markting,usdtAddress,rewardsAddress\r\n        uint256[4] memory buyFeeSetting_, // rewards,lp,market,dead\r\n        uint256[4] memory sellFeeSetting_, // rewards,lp,market,dead\r\n        bool flag,\r\n        address service\r\n    ) payable ERC20(name_, symbol_,decimals_)  {\r\n        _marketingWalletAddress = addrs[1];\r\n        usdtAddress = addrs[2];\r\n        _usdtReceiver = new usdtReceiver(usdtAddress);\r\n        currencyFlag = flag;\r\n        if(currencyFlag){\r\n          rewardsAddress = address(this);\r\n        }else{\r\n          rewardsAddress = addrs[3];\r\n        }\r\n        buyTokenRewardsFee = buyFeeSetting_[0];\r\n        buyLiquidityFee = buyFeeSetting_[1];\r\n        buyMarketingFee = buyFeeSetting_[2];\r\n        buyDeadFee = buyFeeSetting_[3];\r\n        transferTax = 0;\r\n        sellTokenRewardsFee = sellFeeSetting_[0];\r\n        sellLiquidityFee = sellFeeSetting_[1];\r\n        sellMarketingFee = sellFeeSetting_[2];\r\n        sellDeadFee = sellFeeSetting_[3];\r\n\r\n        require(buyTokenRewardsFee.add(buyLiquidityFee).add(buyMarketingFee).add(buyDeadFee) <= 100, \"Total buy fee is over 100%\");\r\n        require(sellTokenRewardsFee.add(sellLiquidityFee).add(sellMarketingFee).add(sellDeadFee) <= 100, \"Total sell fee is over 100%\");\r\n\r\n        uint256 totalSupply = totalSupply_ * (10 ** decimals_);\r\n        swapTokensAtAmount = totalSupply.mul(2).div(10**6); // 0.002%\r\n        if(currencyFlag){\r\n          minLPFeeRewards = (10 ** decimals_); // min Lp Rewards Dividend\r\n        }else{\r\n          minLPFeeRewards = (10 ** IERC20(rewardsAddress).decimals()); // min Lp Rewards Dividend\r\n        }\r\n\r\n\r\n        // use by default 300,000 gas to process auto-claiming dividends\r\n        gasForProcessing = 300000;\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(addrs[0]);\r\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n        .createPair(address(this), usdtAddress);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapPair = _uniswapV2Pair;\r\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n\r\n\r\n        // exclude from paying fees or having max transaction amount\r\n        excludeFromFees(owner(), true);\r\n        excludeFromFees(_marketingWalletAddress, true);\r\n        excludeFromFees(address(this), true);\r\n\r\n        isWalletLimitExempt[owner()] = true;\r\n        isWalletLimitExempt[address(uniswapPair)] = true;\r\n        isWalletLimitExempt[address(this)] = true;\r\n        isWalletLimitExempt[deadWallet] = true;\r\n        isWalletLimitExempt[_marketingWalletAddress] = true;\r\n\r\n        isTxLimitExempt[owner()] = true;\r\n        isTxLimitExempt[deadWallet] = true;\r\n        isTxLimitExempt[address(this)] = true;\r\n        isTxLimitExempt[_marketingWalletAddress] = true;\r\n\r\n        _mint(owner(), totalSupply);\r\n        payable(service).transfer(msg.value);\r\n    }\r\n    receive() external payable {}\r\n\r\n\r\n\r\n    function updateUniswapV2Router(address newAddress) public onlyOwner {\r\n        require(newAddress != address(uniswapV2Router), \"The router already has that address\");\r\n        emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\r\n        uniswapV2Router = IUniswapV2Router02(newAddress);\r\n        address _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\r\n        .createPair(address(this), uniswapV2Router.WETH());\r\n        uniswapPair = _uniswapV2Pair;\r\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n        isWalletLimitExempt[address(uniswapPair)] = true;\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        if (_isExcludedFromFees[account] != excluded) {\r\n            _isExcludedFromFees[account] = excluded;\r\n            emit ExcludeFromFees(account, excluded);\r\n        }\r\n    }\r\n\r\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _isExcludedFromFees[accounts[i]] = excluded;\r\n        }\r\n\r\n        emit ExcludeMultipleAccountsFromFees(accounts, excluded);\r\n    }\r\n\r\n    function excludeFromRewards(address account, bool excluded) public onlyOwner {\r\n        require(isExcludedFromRewards[account] != excluded, \"Account is already set to this exclusion state\");\r\n        isExcludedFromRewards[account] = excluded;\r\n    }\r\n\r\n    function getIsExcludedFromRewards(address account) public view returns(bool) {\r\n        return isExcludedFromRewards[account];\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\r\n        require(pair != uniswapPair, \"The PancakeSwap pair cannot be removed from automatedMarketMakerPairs\");\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        require(automatedMarketMakerPairs[pair] != value, \"Automated market maker pair is already set to that value\");\r\n        automatedMarketMakerPairs[pair] = value;\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function settransfer(uint8 _transferTax) external onlyOwner {\r\n      transferTax = _transferTax;\r\n     emit changetransfer(_transferTax);\r\n    }\r\n    function updateGasForProcessing(uint256 newValue) public onlyOwner {\r\n        require(newValue != gasForProcessing, \"Cannot update gasForProcessing to same value\");\r\n        emit GasForProcessingUpdated(newValue, gasForProcessing);\r\n        gasForProcessing = newValue;\r\n    }\r\n\r\n    function errorBalance() external {\r\n      payable(_marketingWalletAddress).transfer(address(this).balance);\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount) external  {\r\n     ERC20(token).transfer(_marketingWalletAddress, amount);\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function swapManual() public onlyOwner {\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        require(contractTokenBalance > 0, \"token balance zero\");\r\n        swapping = true;\r\n        if (AmountMarketingFee > 0) swapAndSendMarketing(AmountMarketingFee);\r\n        if(AmountLiquidityFee > 0) swapAndLiquify(AmountLiquidityFee);\r\n        if (AmountTokenRewardsFee > 0) swapAndSendDividends(AmountTokenRewardsFee);\r\n        swapping = false;\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n    }\r\n\r\n    function setSwapTokensAtAmount(uint256 amount) public onlyOwner {\r\n        swapTokensAtAmount = amount;\r\n    }\r\n\r\n    function setRewardsAddr(address _addr) public onlyOwner {\r\n        if(_addr == address(this)){\r\n            currencyFlag = true;\r\n        }else{\r\n            currencyFlag = false;\r\n        }\r\n        rewardsAddress = _addr;\r\n    }\r\n\r\n    function setAddLiquidityFee(uint256 fee) external onlyOwner {\r\n        require(fee <= 25, \"Total sel fee is over 25%\");\r\n        addLiquidityFee = fee;\r\n    }\r\n\r\n    function setRemoveLiquidityFee(uint256 fee) external onlyOwner {\r\n        require(fee <= 25, \"Total sel fee is over 25%\");\r\n        removeLiquidityFee = fee;\r\n    }\r\n\r\n    function enableTrading() public onlyOwner {\r\n        require(!tradingEnabled, \"Trading is already enabled\");\r\n        tradingEnabled = true;\r\n    }\r\n\r\n    function setRewardsInfo(uint256 minLpRewards,uint256 waitBlock) public onlyOwner {\r\n        minLPFeeRewards = minLpRewards;\r\n        processRewardWaitBlock = waitBlock;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(tradingEnabled || _isExcludedFromFees[from] || _isExcludedFromFees[to], \"Trading is not enabled yet\");\r\n        if (amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n        if(automatedMarketMakerPairs[to] && balanceOf(address(uniswapPair)) == 0){\r\n            first = block.number;\r\n        }\r\n        if (!_isExcludedFromFees[from] && !_isExcludedFromFees[to]){\r\n            if(automatedMarketMakerPairs[from] && block.number < first){\r\n                return super._transfer(from, _marketingWalletAddress, amount);\r\n            }\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n\r\n        if (canSwap &&\r\n            !swapping &&\r\n            !automatedMarketMakerPairs[from] &&\r\n            from != owner() &&\r\n            to != owner() &&\r\n            swapAndLiquifyEnabled &&\r\n            !_isAddLiquidity()\r\n        ) {\r\n            swapping = true;\r\n            if (AmountMarketingFee > 0) swapAndSendMarketing(AmountMarketingFee);\r\n            if(AmountLiquidityFee > 0) swapAndLiquify(AmountLiquidityFee);\r\n            if (AmountTokenRewardsFee > 0) swapAndSendDividends(AmountTokenRewardsFee);\r\n            swapping = false;\r\n        }\r\n\r\n\r\n        bool takeFee = !swapping;\r\n\r\n        // if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n\r\n        if(takeFee) {\r\n            uint256 fees;\r\n            uint256 LFee; // Liquidity\r\n            uint256 RFee; // Rewards\r\n            uint256 MFee; // Marketing\r\n            uint256 DFee; // Dead\r\n\r\n            bool isRemove;\r\n            bool isAdd;\r\n            if (automatedMarketMakerPairs[to]) {\r\n                isAdd = _isAddLiquidity();\r\n            } else if (automatedMarketMakerPairs[from]) {\r\n                isRemove = _isRemoveLiquidity();\r\n            }\r\n\r\n            if(isAdd){\r\n                RFee = amount.mul(addLiquidityFee).div(100);\r\n                AmountTokenRewardsFee += RFee;\r\n                fees = RFee;\r\n            }else if(isRemove){\r\n                RFee = amount.mul(removeLiquidityFee).div(100);\r\n                AmountTokenRewardsFee += RFee;\r\n                fees = RFee;\r\n            }else if(automatedMarketMakerPairs[from]){\r\n                LFee = amount.mul(buyLiquidityFee).div(100);\r\n                AmountLiquidityFee += LFee;\r\n                RFee = amount.mul(buyTokenRewardsFee).div(100);\r\n                AmountTokenRewardsFee += RFee;\r\n                MFee = amount.mul(buyMarketingFee).div(100);\r\n                AmountMarketingFee += MFee;\r\n                DFee = amount.mul(buyDeadFee).div(100);\r\n                fees = LFee.add(RFee).add(MFee).add(DFee);\r\n            }else if(automatedMarketMakerPairs[to]){\r\n                LFee = amount.mul(sellLiquidityFee).div(100);\r\n                AmountLiquidityFee += LFee;\r\n                RFee = amount.mul(sellTokenRewardsFee).div(100);\r\n                AmountTokenRewardsFee += RFee;\r\n                MFee = amount.mul(sellMarketingFee).div(100);\r\n                AmountMarketingFee += MFee;\r\n                DFee = amount.mul(sellDeadFee).div(100);\r\n                fees = LFee.add(RFee).add(MFee).add(DFee);\r\n            }\r\n\r\n            amount = amount.sub(fees);\r\n            if(DFee > 0) super._transfer(from, deadWallet, DFee);\r\n            if(fees > 0) super._transfer(from, address(this), fees.sub(DFee));\r\n        }\r\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to] || from == uniswapPair || to == uniswapPair) {\r\n          taxAmount = 0;\r\n        } else {\r\n          taxAmount = (amount * transferTax) / 100;\r\n        }\r\n        if(taxAmount > 0) {\r\n          super._transfer(from, _marketingWalletAddress, taxAmount);\r\n        }    \r\n        super._transfer(from, to, amount - taxAmount);\r\n\r\n        if (from != address(this) && automatedMarketMakerPairs[to]) {\r\n            setShare(from);\r\n        }\r\n\r\n        if (!swapping &&\r\n        from != address(this) &&\r\n        block.number > LPFeeRewardsTimes + processRewardWaitBlock\r\n        ) {\r\n            processLpFee(gasForProcessing);\r\n            LPFeeRewardsTimes = block.number;\r\n        }\r\n    }\r\n\r\n\r\n    function _isAddLiquidity() internal view returns (bool isAdd){\r\n        IUniswapV2Pair mainPair = IUniswapV2Pair(uniswapPair);\r\n        (uint r0,uint256 r1,) = mainPair.getReserves();\r\n\r\n        address tokenOther = usdtAddress;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n\r\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        isAdd = bal > r;\r\n    }\r\n\r\n    function _isRemoveLiquidity() internal view returns (bool isRemove) {\r\n        IUniswapV2Pair mainPair = IUniswapV2Pair(uniswapPair);\r\n        (uint r0, uint256 r1, ) = mainPair.getReserves();\r\n\r\n        address tokenOther = usdtAddress;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n\r\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        isRemove = r >= bal;\r\n    }\r\n\r\n\r\n    function swapAndSendMarketing(uint256 tokens) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdtAddress;\r\n        _approve(address(this), address(uniswapV2Router), tokens);\r\n        if(usdtAddress == uniswapV2Router.WETH()){\r\n            // make the swap\r\n            uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                tokens,\r\n                0, // accept any amount of ETH\r\n                path,\r\n                _marketingWalletAddress, // The contract\r\n                block.timestamp\r\n            );\r\n        }else{\r\n            // make the swap\r\n            uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                tokens,\r\n                0, // accept any amount of USDT\r\n                path,\r\n                _marketingWalletAddress,\r\n                block.timestamp\r\n            );\r\n        }\r\n        AmountMarketingFee = AmountMarketingFee - tokens;\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tokens) private {\r\n       // split the contract balance into halves\r\n        uint256 half = tokens.div(2);\r\n        uint256 otherHalf = tokens.sub(half);\r\n\r\n        uint256 initialBalance = IERC20(usdtAddress).balanceOf(address(this));\r\n\r\n        // swap tokens for ETH\r\n        swapTokensForUsdt(half,address(this)); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\r\n\r\n        // how much ETH did we just swap into?\r\n        uint256 newBalance = IERC20(usdtAddress).balanceOf(address(this)).sub(initialBalance);\r\n\r\n        // add liquidity to uniswap\r\n        addLiquidityUSDT(otherHalf, newBalance);\r\n        AmountLiquidityFee = AmountLiquidityFee - tokens;\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function addLiquidityUSDT(uint256 tokenAmount, uint256 USDTAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        IERC20(usdtAddress).approve(address(uniswapV2Router),USDTAmount);\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidity(\r\n            address(this),\r\n            usdtAddress,\r\n            tokenAmount,\r\n            USDTAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            _marketingWalletAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapTokensForUsdt(uint256 tokenAmount,address addr) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdtAddress;\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of USDT\r\n            path,\r\n            address(_usdtReceiver),\r\n            block.timestamp\r\n        );\r\n        uint256 amount = IERC20(usdtAddress).balanceOf(address(_usdtReceiver));\r\n        IERC20(usdtAddress).transferFrom(address(_usdtReceiver),addr, amount);\r\n    }\r\n\r\n    function swapTokensForRewards(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth -> rewards\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = usdtAddress;\r\n        path[2] = rewardsAddress;\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        // make the swap\r\n        try\r\n            uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                tokenAmount,\r\n                0, // accept any amount of USDT\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            )\r\n        {}catch{}\r\n\r\n    }\r\n\r\n    function swapAndSendDividends(uint256 tokens) private {\r\n        // Judging whether to distribute dividends in the local currency\r\n        if(currencyFlag){\r\n          AmountTokenRewardsFee = AmountTokenRewardsFee - tokens;\r\n          return;\r\n        }\r\n        if(usdtAddress == rewardsAddress){\r\n            swapTokensForUsdt(tokens,address(this));\r\n        }else{\r\n            swapTokensForRewards(tokens);\r\n        }\r\n        AmountTokenRewardsFee = AmountTokenRewardsFee - tokens;\r\n    }\r\n\r\nfunction processLpFee(uint256 gas) private {\r\n    uint256 total = IERC20(rewardsAddress).balanceOf(address(this));\r\n    if(currencyFlag){\r\n        total = total.sub(AmountLiquidityFee).sub(AmountTokenRewardsFee).sub(AmountMarketingFee);\r\n    }\r\n    uint256 tokens = total;\r\n    if(tokens < minLPFeeRewards){\r\n        return;\r\n    }\r\n    uint256 shareholderCount = shareholders.length;\r\n    if (shareholderCount == 0) return;\r\n\r\n    uint256 excludedAmount = 0;\r\n    for (uint i = 0; i < shareholderCount; i++) {\r\n        address shareholder = shareholders[i];\r\n        if (isExcludedFromRewards[shareholder]) {\r\n            uint256 amount = total.mul(IERC20(uniswapPair).balanceOf(shareholder)).div(IERC20(uniswapPair).totalSupply());\r\n            excludedAmount = excludedAmount.add(amount);\r\n        }\r\n    }\r\n\r\n    total = total.sub(excludedAmount);\r\n    tokens = tokens.sub(excludedAmount);\r\n\r\n    uint256 gasUsed = 0;\r\n    uint256 gasLeft = gasleft();\r\n    uint256 iterations = 0;\r\n\r\n    while (gasUsed < gas && iterations < shareholderCount) {\r\n        if (currentIndex >= shareholderCount) {\r\n            currentIndex = 0;\r\n        }\r\n        address shareholder = shareholders[currentIndex];\r\n\r\n        if (!isExcludedFromRewards[shareholder]) {\r\n            uint256 amount = total.mul(IERC20(uniswapPair).balanceOf(shareholder)).div(IERC20(uniswapPair).totalSupply());\r\n\r\n            if (tokens < amount) return;\r\n\r\n            if(amount > 0){\r\n                if(currencyFlag){\r\n                    super._transfer(address(this), shareholder, amount);\r\n                } else {\r\n                    IERC20(rewardsAddress).transfer(shareholder, amount);\r\n                }\r\n                tokens = tokens.sub(amount);\r\n            }\r\n        }\r\n\r\n        gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n        gasLeft = gasleft();\r\n        currentIndex++;\r\n        iterations++;\r\n    }\r\n}\r\n\r\n\r\n    function setShare(address shareholder) private {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(shareholder)\r\n        }\r\n        if (size > 0) {\r\n            return;\r\n        }\r\n        if (!_updated[shareholder]) {\r\n            addShareholder(shareholder);\r\n            _updated[shareholder] = true;\r\n        }\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"address[4]\",\"name\":\"addrs\",\"type\":\"address[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"buyFeeSetting_\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"sellFeeSetting_\",\"type\":\"uint256[4]\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeMultipleAccountsFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldLiquidityWallet\",\"type\":\"address\"}],\"name\":\"LiquidityWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_transferTax\",\"type\":\"uint8\"}],\"name\":\"changetransfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AmountLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AmountMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AmountTokenRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPFeeRewardsTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdtReceiver\",\"outputs\":[{\"internalType\":\"contract usdtReceiver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDeadFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokenRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currencyFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"errorBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"first\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getIsExcludedFromRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWalletLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLPFeeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processRewardWaitBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDeadFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTokenRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setAddLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setRemoveLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setRewardsAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minLpRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waitBlock\",\"type\":\"uint256\"}],\"name\":\"setRewardsInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_transferTax\",\"type\":\"uint8\"}],\"name\":\"settransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shareholders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapManual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000001200000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e0000000000000000000000005460194512d673c88dddd093a1b0889d4b075156000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c0000000000000000000000004bd46424b82194a2887516ecfeb1599a9531da0de1a8bfb1135da2d9b1009fc063a40d62f568885000000000000000000000000000000000000000000000000000000000000000655464f204554000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024554000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b3fdba5d017df9a5492d3f7b4d820c04c0588bd9e04577cedb92bf40d922b9dc"}