{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// File: contracts\\libs\\Context.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts\\libs\\Ownable.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts\\libs\\SafeMath.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts\\libs\\IERC20.sol\r\n\r\npragma solidity >=0.4.0;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the erc20 token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts\\AntiBotHelper.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice Anti-Bot Helper\r\n * Blacklis feature\r\n * Max TX Amount feature\r\n * Max Wallet Amount feature\r\n */\r\ncontract AntiBotHelper is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address private constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address private constant ZERO = address(0);\r\n\r\n    uint256 public constant MAX_TX_AMOUNT_MIN_LIMIT = 100 ether;\r\n    uint256 public constant MAX_WALLET_AMOUNT_MIN_LIMIT = 1000 ether;\r\n\r\n    mapping(address => bool) internal _isExcludedFromMaxTx;\r\n    mapping(address => bool) internal _isExcludedFromMaxWallet;\r\n    mapping(address => bool) internal _blacklist;\r\n\r\n    uint256 public _maxTxAmount = 100000 ether;\r\n    uint256 public _maxWalletAmount = 10000000 ether;\r\n\r\n    event ExcludedFromBlacklist(address indexed account);\r\n    event IncludedInBlacklist(address indexed account);\r\n    event ExcludedFromMaxTx(address indexed account);\r\n    event IncludedInMaxTx(address indexed account);\r\n    event ExcludedFromMaxWallet(address indexed account);\r\n    event IncludedInMaxWallet(address indexed account);\r\n\r\n    constructor() {\r\n        _isExcludedFromMaxTx[_msgSender()] = true;\r\n        _isExcludedFromMaxTx[DEAD] = true;\r\n        _isExcludedFromMaxTx[ZERO] = true;\r\n        _isExcludedFromMaxTx[address(this)] = true;\r\n\r\n        _isExcludedFromMaxWallet[_msgSender()] = true;\r\n        _isExcludedFromMaxWallet[DEAD] = true;\r\n        _isExcludedFromMaxWallet[ZERO] = true;\r\n        _isExcludedFromMaxWallet[address(this)] = true;\r\n    }\r\n\r\n    /**\r\n     * @notice Exclude the account from black list\r\n     * @param account: the account to be excluded\r\n     * @dev Only callable by owner\r\n     */\r\n    function excludeFromBlacklist(address account) external onlyOwner {\r\n        _blacklist[account] = false;\r\n        emit ExcludedFromBlacklist(account);\r\n    }\r\n\r\n    /**\r\n     * @notice Include the account in black list\r\n     * @param account: the account to be included\r\n     * @dev Only callable by owner\r\n     */\r\n    function includeInBlacklist(address account) external onlyOwner {\r\n        _blacklist[account] = true;\r\n        emit IncludedInBlacklist(account);\r\n    }\r\n\r\n    /**\r\n     * @notice Check if the account is included in black list\r\n     * @param account: the account to be checked\r\n     */\r\n    function isIncludedInBlacklist(address account)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _blacklist[account];\r\n    }\r\n\r\n    /**\r\n     * @notice Exclude the account from max tx limit\r\n     * @param account: the account to be excluded\r\n     * @dev Only callable by owner\r\n     */\r\n    function excludeFromMaxTx(address account) external onlyOwner {\r\n        _isExcludedFromMaxTx[account] = true;\r\n        emit ExcludedFromMaxTx(account);\r\n    }\r\n\r\n    /**\r\n     * @notice Include the account in max tx limit\r\n     * @param account: the account to be included\r\n     * @dev Only callable by owner\r\n     */\r\n    function includeInMaxTx(address account) external onlyOwner {\r\n        _isExcludedFromMaxTx[account] = false;\r\n        emit IncludedInMaxTx(account);\r\n    }\r\n\r\n    /**\r\n     * @notice Check if the account is excluded from max tx limit\r\n     * @param account: the account to be checked\r\n     */\r\n    function isExcludedFromMaxTx(address account) external view returns (bool) {\r\n        return _isExcludedFromMaxTx[account];\r\n    }\r\n\r\n    /**\r\n     * @notice Exclude the account from max wallet limit\r\n     * @param account: the account to be excluded\r\n     * @dev Only callable by owner\r\n     */\r\n    function excludeFromMaxWallet(address account) external onlyOwner {\r\n        _isExcludedFromMaxWallet[account] = true;\r\n        emit ExcludedFromMaxWallet(account);\r\n    }\r\n\r\n    /**\r\n     * @notice Include the account in max wallet limit\r\n     * @param account: the account to be included\r\n     * @dev Only callable by owner\r\n     */\r\n    function includeInMaxWallet(address account) external onlyOwner {\r\n        _isExcludedFromMaxWallet[account] = false;\r\n        emit IncludedInMaxWallet(account);\r\n    }\r\n\r\n    /**\r\n     * @notice Check if the account is excluded from max wallet limit\r\n     * @param account: the account to be checked\r\n     */\r\n    function isExcludedFromMaxWallet(address account)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _isExcludedFromMaxWallet[account];\r\n    }\r\n\r\n    /**\r\n     * @notice Set anti whales limit configuration\r\n     * @param maxTxAmount: max amount of token in a transaction\r\n     * @param maxWalletAmount: max amount of token can be kept in a wallet\r\n     * @dev Only callable by owner\r\n     */\r\n    function setAntiWhalesConfiguration(\r\n        uint256 maxTxAmount,\r\n        uint256 maxWalletAmount\r\n    ) external onlyOwner {\r\n        require(\r\n            maxTxAmount >= MAX_TX_AMOUNT_MIN_LIMIT,\r\n            \"Max tx amount too small\"\r\n        );\r\n        require(\r\n            maxWalletAmount >= MAX_WALLET_AMOUNT_MIN_LIMIT,\r\n            \"Max wallet amount too small\"\r\n        );\r\n        _maxTxAmount = maxTxAmount;\r\n        _maxWalletAmount = maxWalletAmount;\r\n    }\r\n\r\n    function checkBot(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal view {\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        require(\r\n            !_blacklist[from] && !_blacklist[to],\r\n            \"Transfer from or to the blacklisted account\"\r\n        );\r\n\r\n        // Check max tx limit\r\n        if (!_isExcludedFromMaxTx[from] && !_isExcludedFromMaxTx[to]) {\r\n            require(\r\n                amount <= _maxTxAmount,\r\n                \"Too many tokens are going to be transferred\"\r\n            );\r\n        }\r\n\r\n        // Check max wallet amount limit\r\n        if (!_isExcludedFromMaxWallet[to]) {\r\n            require(\r\n                IERC20(address(this)).balanceOf(to).add(amount) <=\r\n                    _maxWalletAmount,\r\n                \"Too many tokens are going to be stored in target account\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\FeeHelper.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice Tax Helper\r\n * Auto liquidity fee\r\n * Marketing fee\r\n * Burn fee\r\n * Fee in buy/sell/transfer separately\r\n */\r\ncontract FeeHelper is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    enum TX_CASE {\r\n        TRANSFER,\r\n        BUY,\r\n        SELL\r\n    }\r\n\r\n    struct TokenFee {\r\n        uint16 liquifyFee;\r\n        uint16 marketingFee;\r\n        uint16 burnFee;\r\n    }\r\n\r\n    address private constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address private constant ZERO = address(0);\r\n\r\n    uint16 public constant MAX_LIQUIFY_FEE = 500; // 5% max\r\n    uint16 public constant MAX_MARKETING_FEE = 500; // 5% max\r\n    uint16 public constant MAX_BURN_FEE = 500; // 5% max\r\n\r\n    mapping(TX_CASE => TokenFee) public _tokenFees;\r\n    mapping(address => bool) internal _isExcludedFromFee;\r\n    mapping(address => bool) internal _isZonoPair;\r\n\r\n    event AccountExcludedFromFee(address indexed account);\r\n    event AccountIncludedInFee(address indexed account);\r\n\r\n    constructor() {\r\n        _isExcludedFromFee[_msgSender()] = true;\r\n        _isExcludedFromFee[DEAD] = true;\r\n        _isExcludedFromFee[ZERO] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        _tokenFees[TX_CASE.TRANSFER].liquifyFee = 0;\r\n        _tokenFees[TX_CASE.TRANSFER].marketingFee = 0;\r\n        _tokenFees[TX_CASE.TRANSFER].burnFee = 0;\r\n\r\n        _tokenFees[TX_CASE.BUY].liquifyFee = 200;\r\n        _tokenFees[TX_CASE.BUY].marketingFee = 200;\r\n        _tokenFees[TX_CASE.BUY].burnFee = 100;\r\n\r\n        _tokenFees[TX_CASE.SELL].liquifyFee = 200;\r\n        _tokenFees[TX_CASE.SELL].marketingFee = 200;\r\n        _tokenFees[TX_CASE.SELL].burnFee = 100;\r\n    }\r\n\r\n    /**\r\n     * @notice Update fee in the token\r\n     * @param feeCase: which case the fee is for: transfer / buy / sell\r\n     * @param liquifyFee: fee percent for liquifying\r\n     * @param marketingFee: fee percent for marketing\r\n     * @param burnFee: fee percent for burning\r\n     */\r\n    function setFee(\r\n        TX_CASE feeCase,\r\n        uint16 liquifyFee,\r\n        uint16 marketingFee,\r\n        uint16 burnFee\r\n    ) external onlyOwner {\r\n        require(liquifyFee <= MAX_LIQUIFY_FEE, \"Liquidity fee overflow\");\r\n        require(marketingFee <= MAX_MARKETING_FEE, \"Buyback fee overflow\");\r\n        require(burnFee <= MAX_BURN_FEE, \"Burn fee overflow\");\r\n        _tokenFees[feeCase].liquifyFee = liquifyFee;\r\n        _tokenFees[feeCase].marketingFee = marketingFee;\r\n        _tokenFees[feeCase].burnFee = burnFee;\r\n    }\r\n\r\n    /**\r\n     * @notice Exclude the account from fee\r\n     * @param account: the account to be excluded\r\n     * @dev Only callable by owner\r\n     */\r\n    function excludeAccountFromFee(address account) external onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n        emit AccountExcludedFromFee(account);\r\n    }\r\n\r\n    /**\r\n     * @notice Include account in fee\r\n     * @dev Only callable by owner\r\n     */\r\n    function includeAccountInFee(address account) external onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n        emit AccountIncludedInFee(account);\r\n    }\r\n\r\n    /**\r\n     * @notice Check if the account is excluded from the fees\r\n     * @param account: the account to be checked\r\n     */\r\n    function isAccountExcludedFromFee(address account)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    /**\r\n     * @notice Check if fee should be applied\r\n     */\r\n    function shouldFeeApplied(address from, address to)\r\n        internal\r\n        view\r\n        returns (bool feeApplied, TX_CASE txCase)\r\n    {\r\n        // Sender or receiver is excluded from fee\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            feeApplied = false;\r\n            txCase = TX_CASE.TRANSFER; // second param is default one becuase it would not be used in this case\r\n        }\r\n        // Buying tokens\r\n        else if (_isZonoPair[from]) {\r\n            TokenFee storage buyFee = _tokenFees[TX_CASE.BUY];\r\n            feeApplied =\r\n                (buyFee.liquifyFee + buyFee.marketingFee + buyFee.burnFee) > 0;\r\n            txCase = TX_CASE.BUY;\r\n        }\r\n        // Selling tokens\r\n        else if (_isZonoPair[to]) {\r\n            TokenFee storage sellFee = _tokenFees[TX_CASE.SELL];\r\n            feeApplied =\r\n                (sellFee.liquifyFee + sellFee.marketingFee + sellFee.burnFee) >\r\n                0;\r\n            txCase = TX_CASE.SELL;\r\n        }\r\n        // Transferring tokens\r\n        else {\r\n            TokenFee storage transferFee = _tokenFees[TX_CASE.TRANSFER];\r\n            feeApplied =\r\n                (transferFee.liquifyFee +\r\n                    transferFee.marketingFee +\r\n                    transferFee.burnFee) >\r\n                0;\r\n            txCase = TX_CASE.TRANSFER;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Exclude lp address from zono pairs\r\n     */\r\n    function excludeFromZonoPair(address lpAddress) external onlyOwner {\r\n        _isZonoPair[lpAddress] = false;\r\n    }\r\n\r\n    /**\r\n     * @notice Include lp address in zono pairs\r\n     */\r\n    function includeInZonoPair(address lpAddress) external onlyOwner {\r\n        _isZonoPair[lpAddress] = true;\r\n    }\r\n\r\n    /**\r\n     * @notice Check if the lp address is zono pair\r\n     */\r\n    function isZonoPair(address lpAddress) external view returns (bool) {\r\n        return _isZonoPair[lpAddress];\r\n    }\r\n}\r\n\r\n// File: contracts\\libs\\Address.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\libs\\ERC20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-ERC20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory tokenName, string memory tokenSymbol) {\r\n        _name = tokenName;\r\n        _symbol = tokenSymbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external override view returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() public override view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() public override view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() public override view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public virtual override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public virtual override view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public override view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\")\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {ERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {ERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(\r\n            account,\r\n            _msgSender(),\r\n            _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\")\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts\\MintableERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract MintableERC20 is ERC20 {\r\n    address private _operator;\r\n\r\n    event OperatorTransferred(\r\n        address indexed previousOperator,\r\n        address indexed newOperator\r\n    );\r\n\r\n    modifier onlyOperator() {\r\n        require(\r\n            operator() == _msgSender(),\r\n            \"ZONO: caller is not the operator\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(string memory tokenName, string memory tokenSymbol)\r\n        ERC20(tokenName, tokenSymbol)\r\n    {\r\n        _operator = _msgSender();\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens and assigns them to `to`, increasing\r\n     * the total supply.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `msg.sender` must be the token operator\r\n     */\r\n    function mint(address to, uint256 amount)\r\n        external\r\n        onlyOperator\r\n        returns (bool)\r\n    {\r\n        _mint(to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\r\n     * the total supply.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `msg.sender` must be the token operator\r\n     */\r\n    function mint(uint256 amount) external onlyOperator returns (bool) {\r\n        _mint(_msgSender(), amount);\r\n        return true;\r\n    }\r\n\r\n    function operator() public view virtual returns (address) {\r\n        return _operator;\r\n    }\r\n\r\n    function transferOperator(address newOperator) public virtual onlyOperator {\r\n        require(\r\n            newOperator != address(0),\r\n            \"ZONO: new operator is the zero address\"\r\n        );\r\n        emit OperatorTransferred(_operator, newOperator);\r\n        _operator = newOperator;\r\n    }\r\n\r\n    /**\r\n     * @notice Get back wrong tokens sent to the token contract\r\n     */\r\n    function recoverToken(address tokenAddress, uint256 tokenAmount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        // do not allow recovering self token\r\n        require(tokenAddress != address(this), \"Self withdraw\");\r\n        IERC20(tokenAddress).transfer(owner(), tokenAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Get back wrong eth sent to the token contract\r\n     */\r\n    function recoverETH(uint256 ethAmount) external onlyOwner {\r\n        payable(_msgSender()).transfer(ethAmount);\r\n    }\r\n}\r\n\r\n// File: contracts\\libs\\IUniswapAmm.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: contracts\\ZonoV3Token.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract ZonoV3Token is\r\n    MintableERC20(\"ZonoSwap Token V3\", \"ZONOV3\"),\r\n    AntiBotHelper,\r\n    FeeHelper\r\n{\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    address payable public _marketingWallet;\r\n    address public _charityWallet;\r\n\r\n    bool public _swapAndLiquifyEnabled = true;\r\n    uint256 public _numTokensSellToAddToLiquidity = 100 ether;\r\n\r\n    IUniswapV2Router02 public _swapRouter;\r\n    bool _inSwapAndLiquify;\r\n\r\n    event LiquifyFeeTransferred(\r\n        address indexed charityWallet,\r\n        uint256 tokenAmount,\r\n        uint256 ethAmount\r\n    );\r\n    event MarketingFeeTrasferred(\r\n        address indexed marketingWallet,\r\n        uint256 tokensSwapped,\r\n        uint256 bnbAmount\r\n    );\r\n    event SwapTokensForBnbFailed(address indexed to, uint256 tokenAmount);\r\n    event LiquifyFaied(uint256 tokenAmount, uint256 bnbAmount);\r\n\r\n    modifier lockTheSwap() {\r\n        _inSwapAndLiquify = true;\r\n        _;\r\n        _inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor() {\r\n        _marketingWallet = payable(_msgSender());\r\n        _charityWallet = _msgSender();\r\n        _swapRouter = IUniswapV2Router02(\r\n            address(0x10ED43C718714eb63d5aA57B78B54704E256024E)\r\n        );       \r\n    }\r\n\r\n    //to recieve ETH from swapRouter when swaping\r\n    receive() external payable {}\r\n\r\n    function setSwapRouter(address newSwapRouter) external onlyOwner {\r\n        require(newSwapRouter != address(0), \"Invalid swap router\");\r\n\r\n        _swapRouter = IUniswapV2Router02(newSwapRouter);\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool enabled) public onlyOwner {\r\n        _swapAndLiquifyEnabled = enabled;\r\n    }\r\n\r\n    /**\r\n     * @notice Set new marketing wallet\r\n     */\r\n    function setMarketingWallet(address payable wallet) external onlyOwner {\r\n        require(wallet != address(0), \"Invalid marketing wallet\");\r\n        _marketingWallet = wallet;\r\n    }\r\n\r\n    /**\r\n     * @notice Set new charity wallet\r\n     */\r\n    function setCharityWallet(address wallet) external onlyOwner {\r\n        require(wallet != address(0), \"Invalid charity wallet\");\r\n        _charityWallet = wallet;\r\n    }\r\n\r\n    function setNumTokensSellToAddToLiquidity(\r\n        uint256 numTokensSellToAddToLiquidity\r\n    ) external onlyOwner {\r\n        require(numTokensSellToAddToLiquidity > 0, \"Invalid input\");\r\n        _numTokensSellToAddToLiquidity = numTokensSellToAddToLiquidity;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from zero address\");\r\n        require(to != address(0), \"ERC20: transfer to zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        // is the token balance of this contract address over the min number of\r\n        // tokens that we need to initiate a swap + liquidity lock?\r\n        // also, don't get caught in a circular liquidity event.\r\n        // also, don't swap & liquify if sender is uniswap pair.\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        // indicates if fee should be deducted from transfer\r\n        (bool feeApplied, TX_CASE txCase) = shouldFeeApplied(from, to);\r\n\r\n        // Swap and liquify also triggered when the tx needs to have fee\r\n        if (\r\n            !_inSwapAndLiquify &&\r\n            feeApplied &&\r\n            _swapAndLiquifyEnabled &&\r\n            contractTokenBalance >= _numTokensSellToAddToLiquidity\r\n        ) {\r\n            // add liquidity, send to marketing wallet\r\n            uint16 sumOfLiquifyFee = _tokenFees[TX_CASE.TRANSFER].liquifyFee +\r\n                _tokenFees[TX_CASE.BUY].liquifyFee +\r\n                _tokenFees[TX_CASE.SELL].liquifyFee;\r\n            uint16 sumOfMarketingFee = _tokenFees[TX_CASE.TRANSFER]\r\n                .marketingFee +\r\n                _tokenFees[TX_CASE.BUY].marketingFee +\r\n                _tokenFees[TX_CASE.SELL].marketingFee;\r\n\r\n            swapAndLiquify(\r\n                _numTokensSellToAddToLiquidity,\r\n                sumOfMarketingFee,\r\n                sumOfLiquifyFee\r\n            );\r\n        }\r\n\r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from, to, amount, feeApplied, txCase);\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool feeApplied,\r\n        TX_CASE txCase\r\n    ) private {\r\n        if (feeApplied) {\r\n            uint16 liquifyFee = _tokenFees[txCase].liquifyFee;\r\n            uint16 marketingFee = _tokenFees[txCase].marketingFee;\r\n            uint16 burnFee = _tokenFees[txCase].burnFee;\r\n\r\n            uint256 burnFeeAmount = amount.mul(burnFee).div(10000);\r\n            uint256 otherFeeAmount = amount\r\n                .mul(uint256(liquifyFee).add(marketingFee))\r\n                .div(10000);\r\n\r\n            if (burnFeeAmount > 0) {\r\n                super._transfer(sender, DEAD, burnFeeAmount);\r\n                amount = amount.sub(burnFeeAmount);\r\n            }\r\n            if (otherFeeAmount > 0) {\r\n                super._transfer(sender, address(this), otherFeeAmount);\r\n                amount = amount.sub(otherFeeAmount);\r\n            }\r\n        }\r\n        if (amount > 0) {\r\n            super.checkBot(sender, recipient, amount);\r\n            super._transfer(sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    function swapAndLiquify(\r\n        uint256 amount,\r\n        uint16 marketingFee,\r\n        uint16 liquifyFee\r\n    ) private lockTheSwap {\r\n        //This needs to be distributed among marketing wallet and liquidity\r\n        if (liquifyFee == 0 && marketingFee == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 liquifyAmount = amount.mul(liquifyFee).div(\r\n            uint256(marketingFee).add(liquifyFee)\r\n        );\r\n        if (liquifyAmount > 0) {\r\n            amount = amount.sub(liquifyAmount);\r\n            // split the contract balance into halves\r\n            uint256 half = liquifyAmount.div(2);\r\n            uint256 otherHalf = liquifyAmount.sub(half);\r\n\r\n            (uint256 bnbAmount, bool success) = swapTokensForBnb(\r\n                half,\r\n                payable(address(this))\r\n            );\r\n\r\n            if (!success) {\r\n                emit SwapTokensForBnbFailed(address(this), half);\r\n            }\r\n            // add liquidity to pancakeswap\r\n            if (otherHalf > 0 && bnbAmount > 0 && success) {\r\n                success = addLiquidityETH(otherHalf, bnbAmount, _charityWallet);\r\n                if (success) {\r\n                    emit LiquifyFeeTransferred(\r\n                        _charityWallet,\r\n                        otherHalf,\r\n                        bnbAmount\r\n                    );\r\n                } else {\r\n                    emit LiquifyFaied(otherHalf, bnbAmount);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (amount > 0) {\r\n            (uint256 bnbAmount, bool success) = swapTokensForBnb(\r\n                amount,\r\n                _marketingWallet\r\n            );\r\n            if (success) {\r\n                emit MarketingFeeTrasferred(\r\n                    _marketingWallet,\r\n                    amount,\r\n                    bnbAmount\r\n                );\r\n            } else {\r\n                emit SwapTokensForBnbFailed(_marketingWallet, amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function swapTokensForBnb(uint256 tokenAmount, address payable to)\r\n        private\r\n        returns (uint256 bnbAmount, bool success)\r\n    {\r\n        // generate the uniswap pair path of token -> busd\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _swapRouter.WETH();\r\n\r\n        _approve(address(this), address(_swapRouter), tokenAmount);\r\n\r\n        // capture the target address's current BNB balance.\r\n        uint256 balanceBefore = to.balance;\r\n\r\n        // make the swap\r\n        try\r\n            _swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                tokenAmount,\r\n                0, // accept any amount of BNB\r\n                path,\r\n                to,\r\n                block.timestamp.add(300)\r\n            )\r\n        {\r\n            // how much BNB did we just swap into?\r\n            bnbAmount = to.balance.sub(balanceBefore);\r\n            success = true;\r\n        } catch (\r\n            bytes memory /* lowLevelData */\r\n        ) {\r\n            // how much BNB did we just swap into?\r\n            bnbAmount = 0;\r\n            success = false;\r\n        }\r\n    }\r\n\r\n    function addLiquidityETH(\r\n        uint256 tokenAmount,\r\n        uint256 bnbAmount,\r\n        address to\r\n    ) private returns (bool success) {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(_swapRouter), tokenAmount);\r\n\r\n        // add the liquidity\r\n        try\r\n            _swapRouter.addLiquidityETH{value: bnbAmount}(\r\n                address(this),\r\n                tokenAmount,\r\n                0, // slippage is unavoidable\r\n                0, // slippage is unavoidable\r\n                to,\r\n                block.timestamp.add(300)\r\n            )\r\n        {\r\n            success = true;\r\n        } catch (\r\n            bytes memory /* lowLevelData */\r\n        ) {\r\n            success = false;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountExcludedFromFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountIncludedInFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludedFromBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludedFromMaxTx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludedFromMaxWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IncludedInBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IncludedInMaxTx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IncludedInMaxWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"}],\"name\":\"LiquifyFaied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"charityWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"LiquifyFeeTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"}],\"name\":\"MarketingFeeTrasferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"SwapTokensForBnbFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_BURN_FEE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LIQUIFY_FEE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_MARKETING_FEE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TX_AMOUNT_MIN_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WALLET_AMOUNT_MIN_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_charityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_numTokensSellToAddToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum FeeHelper.TX_CASE\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"_tokenFees\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"liquifyFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"marketingFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"burnFee\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeAccountFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpAddress\",\"type\":\"address\"}],\"name\":\"excludeFromZonoPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeAccountInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpAddress\",\"type\":\"address\"}],\"name\":\"includeInZonoPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAccountExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isIncludedInBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpAddress\",\"type\":\"address\"}],\"name\":\"isZonoPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWalletAmount\",\"type\":\"uint256\"}],\"name\":\"setAntiWhalesConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setCharityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum FeeHelper.TX_CASE\",\"name\":\"feeCase\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"liquifyFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"marketingFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"burnFee\",\"type\":\"uint16\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numTokensSellToAddToLiquidity\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellToAddToLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSwapRouter\",\"type\":\"address\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ZonoV3Token", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e934f2f59a5ce6ef1fa6eb889c629421d1f4d55e6561cb3d2622d3c3243e8772"}