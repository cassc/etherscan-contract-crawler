{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/test.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IBEP20 {\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n}\\r\\n\\r\\ninterface IPancakeRouter02 {\\r\\n    function WETH() external pure returns (address);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ncontract BatchBuyAndSend {\\r\\n    address private pancakeRouterAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\\r\\n    address private owner = msg.sender;\\r\\n\\r\\n    uint256 public salesTaxPercentage = 5; // \u4ee55%\u4e3a\u4f8b\uff0c\u4f60\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u8fdb\u884c\u8c03\u6574\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Only owner can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setPancakeRouterAddress(address _routerAddress) external onlyOwner {\\r\\n        pancakeRouterAddress = _routerAddress;\\r\\n    }\\r\\n\\r\\n    function batchBuyAndSendTokens(\\r\\n        address tokenAddress,\\r\\n        uint256[] calldata amounts,\\r\\n        address[] calldata recipientAddresses\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        // onlyOwner\\r\\n    {\\r\\n        require(amounts.length == recipientAddresses.length, \\\"Arrays length mismatch\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < amounts.length; i++) {\\r\\n            // \u83b7\u53d6\u6700\u5c0f\u8f93\u51fa\u6570\u91cf\\r\\n            uint256 minOut = getMinOut(tokenAddress, amounts[i]);\\r\\n\\r\\n            // \u8c03\u7528PancakeSwap\u5408\u7ea6\u8fdb\u884c\u4ea4\u6362\\r\\n            (uint256[] memory amountsOut) = IPancakeRouter02(pancakeRouterAddress).swapExactETHForTokens{value: amounts[i]}(\\r\\n                minOut,  // \u671f\u671b\u7684\u6700\u5c0f\u8f93\u51fa\u6570\u91cf\\r\\n                getPathForETHtoToken(tokenAddress),\\r\\n                address(this),\\r\\n                block.timestamp\\r\\n            );\\r\\n\\r\\n            // \u5c06\u4ee3\u5e01\u53d1\u9001\u5230\u6307\u5b9a\u5730\u5740\\r\\n            require(\\r\\n                IBEP20(tokenAddress).transfer(recipientAddresses[i], amountsOut[1]),\\r\\n                \\\"Token transfer failed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // \u63d0\u53d6\u5408\u7ea6\u4e0a\u7684BNB\u4f59\u989d\\r\\n    function withdrawBNB() external onlyOwner {\\r\\n        payable(owner).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    function getPathForETHtoToken(address token) private view returns (address[] memory) {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = IPancakeRouter02(pancakeRouterAddress).WETH();\\r\\n        path[1] = token;\\r\\n        return path;\\r\\n    }\\r\\n\\r\\n    // \u83b7\u53d6\u6700\u5c0f\u8f93\u51fa\u6570\u91cf\\r\\n    function getMinOut(address tokenAddress, uint256 ethAmount) internal view returns (uint256) {\\r\\n        address[] memory path = getPathForETHtoToken(tokenAddress);\\r\\n\\r\\n        // \u901a\u8fc7\u76f8\u4f3c\u7684\u65b9\u5f0f\u8ba1\u7b97\u6700\u5c0f\u8f93\u51fa\\r\\n        uint256[] memory amountsOut = IPancakeRouter02(pancakeRouterAddress).getAmountsOut(ethAmount, path);\\r\\n        uint256 expectedAmount = amountsOut[1];\\r\\n        uint256 slippageFloat = (5 * expectedAmount) / 10000;\\r\\n        uint256 minOut = (10000 / (slippageFloat * 100 + 10000)) * expectedAmount;\\r\\n        uint256 minOutAdjusted = (minOut * 9) / 10;\\r\\n        return minOutAdjusted;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"recipientAddresses\",\"type\":\"address[]\"}],\"name\":\"batchBuyAndSendTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salesTaxPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"}],\"name\":\"setPancakeRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BatchBuyAndSend", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}