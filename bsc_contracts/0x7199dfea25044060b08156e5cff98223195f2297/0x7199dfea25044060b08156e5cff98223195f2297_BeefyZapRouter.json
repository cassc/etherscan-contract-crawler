{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBeefyTokenManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport { IBeefyZapRouter } from \\\"./IBeefyZapRouter.sol\\\";\\n\\n/**\\n * @title Token manager interface\\n * @author kexley, Beefy\\n * @notice Interface for the token manager\\n */\\ninterface IBeefyTokenManager {\\n    /**\\n     * @notice Pull tokens from a user\\n     * @param _user Address of user to transfer tokens from\\n     * @param _inputs Addresses and amounts of tokens to transfer\\n     */\\n    function pullTokens(address _user, IBeefyZapRouter.Input[] calldata _inputs) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBeefyZapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport { IPermit2 } from \\\"./IPermit2.sol\\\";\\n\\n/**\\n * @title Zap router interface\\n * @author kexley, Beefy\\n * @notice Interface for zap router that contains the structs for orders and routes\\n */\\ninterface IBeefyZapRouter {\\n    /**\\n     * @dev Input token and amount used in a step of the zap\\n     * @param token Address of token\\n     * @param amount Amount of token\\n     */\\n    struct Input {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * @dev Output token and amount from the end of the zap\\n     * @param token Address of token\\n     * @param minOutputAmount Minimum amount of token received\\n     */\\n    struct Output {\\n        address token;\\n        uint256 minOutputAmount;\\n    }\\n\\n    /**\\n     * @dev External call at the end of zap\\n     * @param target Target address to be called\\n     * @param value Ether value of the call\\n     * @param data Payload to call target address with\\n     */\\n    struct Relay {\\n        address target;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    /**\\n     * @dev Token relevant to the current step of the route\\n     * @param token Address of token\\n     * @param index Location in the data that the balance of the token should be inserted\\n     */\\n    struct StepToken {\\n        address token;\\n        int32 index;\\n    }\\n\\n    /**\\n     * @dev Step in a route\\n     * @param target Target address to be called\\n     * @param value Ether value to call the target address with\\n     * @param data Payload to call target address with\\n     * @param tokens Tokens relevant to the step that require approvals or their balances inserted\\n     * into the data\\n     */\\n    struct Step {\\n        address target;\\n        uint256 value;\\n        bytes data;\\n        StepToken[] tokens;\\n    }\\n\\n    /**\\n     * @dev Order created by the user\\n     * @param inputs Tokens and amounts to be pulled from the user\\n     * @param outputs Tokens and minimums to be sent to recipient\\n     * @param relay External call to make after zap is completed\\n     * @param user Source of input tokens\\n     * @param recipient Destination of output tokens\\n     */\\n    struct Order {\\n        Input[] inputs;\\n        Output[] outputs;\\n        Relay relay;\\n        address user;\\n        address recipient;\\n    }\\n\\n    /**\\n     * @notice Execute an order directly\\n     * @param _order Order created by the user\\n     * @param _route Route supplied by user\\n     */\\n    function executeOrder(Order calldata _order, Step[] calldata _route) external payable;\\n\\n    /**\\n     * @notice Execute an order on behalf of a user\\n     * @param _permit Token permits from Permit2 with the order as witness data signed by user\\n     * @param _order Order created by user that was signed in the permit\\n     * @param _signature Signature from user of combined permit and order\\n     * @param _route Route supplied by user or third-party\\n     */\\n    function executeOrder(\\n        IPermit2.PermitBatchTransferFrom calldata _permit,\\n        Order calldata _order,\\n        bytes calldata _signature,\\n        Step[] calldata _route\\n    ) external;\\n\\n    /**\\n     * @notice Pause the contract from carrying out any more zaps\\n     * @dev Only owner can pause\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @notice Unpause the contract to allow new zaps\\n     * @dev Only owner can unpause\\n     */\\n    function unpause() external;\\n\\n    /**\\n     * @notice Permit2 immutable address\\n     */\\n    function permit2() external view returns (address);\\n\\n    /**\\n     * @notice Token manager immutable address\\n     */\\n    function tokenManager() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPermit2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title Permit2 interface\\n * @author kexley, Beefy\\n * @notice Interface for Permit2\\n */\\ninterface IPermit2 {\\n    /**\\n     * @dev Token and amount in a permit message\\n     * @param token Address of token to transfer\\n     * @param amount Amount of token to transfer\\n     */\\n    struct TokenPermissions {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * @dev Batched permit with the unique nonce and deadline\\n     * @param permitted Tokens and corresponding amounts permitted for a transfer\\n     * @param nonce Unique value for every token owner's signature to prevent signature replays\\n     * @param deadline Deadline on the permit signature\\n     */\\n    struct PermitBatchTransferFrom {\\n        TokenPermissions[] permitted;\\n        uint256 nonce;\\n        uint256 deadline;\\n    }\\n\\n    /**\\n     * @dev Transfer details for permitBatchTransferFrom\\n     * @param to Recipient of tokens\\n     * @param requestedAmount Amount to transfer\\n     */\\n    struct SignatureTransferDetails {\\n        address to;\\n        uint256 requestedAmount;\\n    }\\n\\n    /**\\n     * @notice Consume a permit2 message and transfer tokens\\n     * @param permit Batched permit\\n     * @param transferDetails Recipient and amount of tokens to transfer\\n     * @param owner Source of tokens\\n     * @param witness Verified order data that was witnessed in the permit2 signature\\n     * @param witnessTypeString Order function string used to create EIP-712 type string\\n     * @param signature Signature from user\\n     */\\n    function permitWitnessTransferFrom(\\n        PermitBatchTransferFrom memory permit,\\n        SignatureTransferDetails[] calldata transferDetails,\\n        address owner,\\n        bytes32 witness,\\n        string calldata witnessTypeString,\\n        bytes calldata signature\\n    ) external;\\n\\n    /**\\n     * @notice Domain separator to differentiate the chain a permit exists on\\n     */\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/zaps/BeefyTokenManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IBeefyZapRouter } from \\\"../interfaces/IBeefyZapRouter.sol\\\";\\nimport { ZapErrors } from \\\"./ZapErrors.sol\\\";\\n\\n/**\\n * @title Token manager\\n * @author kexley, Beefy\\n * @notice Token manager handles the token approvals for the zap router\\n * @dev Users should approve this contract instead of the zap router to handle the input ERC20 tokens\\n */\\ncontract BeefyTokenManager is ZapErrors {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice Zap router immutable address\\n     */\\n    address public immutable zap;\\n\\n    /**\\n     * @dev This contract is created in the constructor of the zap router\\n     */\\n    constructor() {\\n        zap = msg.sender;\\n    }\\n\\n    /**\\n     * @notice Pulls tokens from a user and transfers them directly to the zap router\\n     * @dev Only the token owner can call this function indirectly via the zap router\\n     * @param _user Address to pull tokens from\\n     * @param _inputs Token addresses and amounts to pull\\n     */\\n    function pullTokens(address _user, IBeefyZapRouter.Input[] calldata _inputs) external {\\n        if (msg.sender != zap) revert CallerNotZap(msg.sender);\\n        uint256 inputLength = _inputs.length;\\n        for (uint256 i; i < inputLength;) {\\n            IBeefyZapRouter.Input calldata input = _inputs[i];\\n            unchecked {\\n                ++i;\\n            }\\n\\n            if (input.token == address(0)) continue;\\n            IERC20(input.token).safeTransferFrom(_user, msg.sender, input.amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/zaps/BeefyZapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Pausable } from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport { IBeefyTokenManager } from \\\"../interfaces/IBeefyTokenManager.sol\\\";\\nimport { IBeefyZapRouter } from \\\"../interfaces/IBeefyZapRouter.sol\\\";\\nimport { IPermit2 } from \\\"../interfaces/IPermit2.sol\\\";\\nimport { BeefyTokenManager} from \\\"./BeefyTokenManager.sol\\\";\\nimport { ZapErrors } from \\\"./ZapErrors.sol\\\";\\n\\n/**\\n * @title Zap router for Beefy vaults\\n * @author kexley, Beefy\\n * @notice Adaptable router for zapping tokens to and from Beefy vaults\\n * @dev Router that allows arbitary calls to external contracts. Users can zap directly or sign \\n * using Permit2 to allow a relayer to execute zaps on their behalf. Do not directly approve this\\n * contract for spending your tokens, approve the TokenManager instead\\n */\\ncontract BeefyZapRouter is IBeefyZapRouter, ZapErrors, Ownable, Pausable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Witness string used in signing an order\\n     */\\n    string private constant ORDER_STRING =\\n        \\\"Order order)Order(Input[] inputs,Output[] outputs,Relay relay,address user,address recipient)Input(address token,uint256 amount)Output(address token,uint256 minOutputAmount)Relay(address target,uint256 value,bytes data)TokenPermissions(address token,uint256 amount)\\\";\\n    /**\\n     * @dev Witness typehash used in signing an order\\n     */\\n    bytes32 private constant ORDER_TYPEHASH = \\n        keccak256(\\\"Order(Input[] inputs,Output[] outputs,Relay relay,address user,address recipient)Input(address token,uint256 amount)Output(address token,uint256 minOutputAmount)Relay(address target,uint256 value,bytes data)\\\");\\n    /**\\n     * @notice Permit2 immutable address\\n     */\\n    address public immutable permit2;\\n    /**\\n     * @notice Token manager immutable address\\n     */\\n    address public immutable tokenManager;\\n\\n    /**\\n     * @notice Token and amount sent to the recipient at end of a zap\\n     * @param token Address of the token sent to recipient\\n     * @param amount Amount of the token sent to the recipient\\n     */\\n    event TokenReturned(address indexed token, uint256 amount);\\n    /**\\n     * @notice External relay call at end of zap\\n     * @param target Address of the target\\n     * @param value Ether value of the call\\n     * @param data Payload of the external call\\n     */\\n    event RelayData(address indexed target, uint256 value, bytes data);\\n    /**\\n     * @notice Completed order\\n     * @param order Order that has been fulfilled\\n     * @param caller Address of the order's executor\\n     * @param recipient Address of the order's recipient\\n     */\\n    event FulfilledOrder(Order indexed order, address indexed caller, address indexed recipient);\\n\\n    /**\\n     * @dev Initialize permit2 address and create an implementation of the token manager\\n     * @param _permit2 Address for the permit2 contract\\n     */\\n    constructor(address _permit2) {\\n        permit2 = _permit2;\\n        tokenManager = address(new BeefyTokenManager());\\n    }\\n\\n    /**\\n     * @notice Execute an order directly\\n     * @dev The user executes their own order directly. User must have already approved the token\\n     * manager to move the tokens\\n     * @param _order Order containing how many tokens to pull and the slippage amounts on outputs\\n     * @param _route Route containing the steps to reach the output\\n     */\\n    function executeOrder(Order calldata _order, Step[] calldata _route) external payable nonReentrant whenNotPaused {\\n        if (msg.sender != _order.user) revert InvalidCaller(_order.user, msg.sender);\\n\\n        IBeefyTokenManager(tokenManager).pullTokens(_order.user, _order.inputs);\\n        _executeOrder(_order, _route);\\n    }\\n\\n    /**\\n     * @notice Execute an order using a signature from the input token owner\\n     * @dev Execute an order indirectly by passing a signed permit from Permit2 that contains the\\n     * order as witness data. The user who owns the tokens must have already approved Permit2.\\n     * Route is supplied at this stage as slippages and amounts are already set in the signed order\\n     * @param _permit Struct of tokens that have been permitted and the nonce/deadline\\n     * @param _order Order that details the input/output tokens and amounts\\n     * @param _signature Resulting string from signing the permit and order data\\n     * @param _route Actual steps that will transform input tokens to output tokens\\n     */\\n    function executeOrder(\\n        IPermit2.PermitBatchTransferFrom calldata _permit,\\n        Order calldata _order,\\n        bytes calldata _signature,\\n        Step[] calldata _route\\n    ) external nonReentrant whenNotPaused {\\n        IPermit2(permit2).permitWitnessTransferFrom(\\n            _permit,\\n            _getTransferDetails(_order.inputs),\\n            _order.user,\\n            keccak256(abi.encode(ORDER_TYPEHASH, _order)),\\n            ORDER_STRING,\\n            _signature\\n        );\\n\\n        _executeOrder(_order, _route);\\n    }\\n\\n    /**\\n     * @dev Executes a valid order by executing the steps on the route, validating the output\\n     * amounts and then sending them to the recipient. A final external call is made to relay\\n     * data in the order to chain together calls\\n     * @param _order Order struct with details of inputs and outputs\\n     * @param _route Actual steps to transform inputs to outputs\\n     */\\n    function _executeOrder(Order calldata _order, Step[] calldata _route) private {\\n        _executeSteps(_route);\\n        _returnAssets(_order.outputs, _order.recipient, _order.relay.value);\\n        _executeRelay(_order.relay);\\n\\n        emit FulfilledOrder(_order, msg.sender, _order.recipient);\\n    }\\n\\n    /**\\n     * @dev Executes various steps to achieve the order outputs by making external calls. Balance\\n     * data is dynamically inserted into payloads to always move the full balances of this contract\\n     * @param _route Array of the steps the contract will execute\\n     */\\n    function _executeSteps(Step[] calldata _route) private {\\n        uint256 routeLength = _route.length;\\n        for (uint256 i; i < routeLength;) {\\n            Step calldata step = _route[i];\\n            (\\n                address stepTarget,\\n                uint256 value,\\n                bytes memory callData,\\n                bytes calldata stepData,\\n                StepToken[] calldata stepTokens\\n            ) = (step.target, step.value, step.data, step.data, step.tokens);\\n\\n            if (stepTarget == permit2 || stepTarget == tokenManager) revert TargetingInvalidContract(stepTarget);\\n\\n            uint256 balance;\\n\\n            uint256 stepTokensLength = stepTokens.length;\\n            for (uint256 j; j < stepTokensLength;) {\\n                StepToken calldata stepToken = stepTokens[j];\\n                (address stepTokenAddress, int32 stepTokenIndex) = (stepToken.token, stepToken.index);\\n\\n                if (stepTokenAddress == address(0)) {\\n                    value = address(this).balance;\\n                } else {\\n                    balance = IERC20(stepTokenAddress).balanceOf(address(this));\\n                    _approveToken(stepTokenAddress, stepTarget, balance);\\n\\n                    if (stepTokenIndex >= 0) {\\n                        uint256 idx = uint256(int256(stepTokenIndex));\\n                        callData = bytes.concat(stepData[:idx], abi.encode(balance), stepData[idx + 32:]);\\n                    }\\n                }\\n\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n\\n            (bool success, bytes memory result) = stepTarget.call{value: value}(callData);\\n            if (!success) _propagateError(stepTarget, value, callData, result);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Approve a token to be spent by an address if not already approved enough\\n     * @param _token Address of token to be approved\\n     * @param _spender Address of spender that will be allowed to move tokens\\n     * @param _amount Number of tokens that are going to be spent\\n     */\\n    function _approveToken(address _token, address _spender, uint256 _amount) private {\\n        if (IERC20(_token).allowance(address(this), _spender) < _amount) {\\n            IERC20(_token).forceApprove(_spender, type(uint256).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Bubble up an error message from an underlying contract\\n     * @param _target Address that the call was sent to\\n     * @param _value Amount of ether sent with the call\\n     * @param _data Payload data of the call\\n     * @param _returnedData Returned data from the call\\n     */\\n    function _propagateError(address _target, uint256 _value, bytes memory _data, bytes memory _returnedData)\\n        private\\n        pure\\n    {\\n        if (_returnedData.length == 0) revert CallFailed(_target, _value, _data);\\n        assembly {\\n            revert(add(32, _returnedData), mload(_returnedData))\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the outputs to the recipient address\\n     * @param _outputs Token addresses and amounts to validate against to ensure no major slippage\\n     * @param _recipient Address of the receiver of the outputs\\n     * @param _relayValue Unwrapped native amount that is reserved for calling the relay address\\n     */\\n    function _returnAssets(Output[] calldata _outputs, address _recipient, uint256 _relayValue) private {\\n        uint256 balance;\\n        uint256 outputsLength = _outputs.length;\\n        for (uint256 i; i < outputsLength;) {\\n            Output calldata output = _outputs[i];\\n            (address outputToken, uint256 outputMinAmount) = (output.token, output.minOutputAmount);\\n            if (outputToken == address(0)) {\\n                balance = address(this).balance;\\n                if (balance < outputMinAmount) {\\n                    revert Slippage(outputToken, outputMinAmount, balance);\\n                }\\n                if (balance > _relayValue) {\\n                    balance -= _relayValue;\\n                    (bool success,) = _recipient.call{value: balance}(\\\"\\\");\\n                    if (!success) revert EtherTransferFailed(_recipient);\\n                }\\n            } else {\\n                balance = IERC20(outputToken).balanceOf(address(this));\\n                if (balance < outputMinAmount) {\\n                    revert Slippage(outputToken, outputMinAmount, balance);\\n                } else if (balance > 0) {\\n                    IERC20(outputToken).safeTransfer(_recipient, balance);\\n                }\\n            }\\n\\n            emit TokenReturned(outputToken, balance);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Call an external contract at the end of a zap with a payload signed in the order\\n     * @param _relay Target address and payload data in a struct\\n     */\\n    function _executeRelay(Relay calldata _relay) private {\\n        (address relayTarget, uint256 relayValue, bytes calldata relaydata) \\n            = (_relay.target, _relay.value, _relay.data);\\n        if (relayTarget != address(0)) {\\n            if (relayTarget == permit2 || relayTarget == tokenManager) {\\n                revert TargetingInvalidContract(relayTarget);\\n            }\\n\\n            if (address(this).balance < relayValue) {\\n                revert InsufficientRelayValue(address(this).balance, relayValue);\\n            }\\n\\n            (bool success, bytes memory result) = relayTarget.call{value: relayValue}(relaydata);\\n            if (!success) _propagateError(relayTarget, relayValue, relaydata, result);\\n\\n            emit RelayData(relayTarget, relayValue, relaydata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Parse the token transfer details from the order so it can be supplied to the Permit2\\n     * transfer from request\\n     * @param _inputs Token addresses and amounts in a struct\\n     * @return transferDetails Transformed data\\n     */\\n    function _getTransferDetails(Input[] calldata _inputs)\\n        private\\n        view\\n        returns (IPermit2.SignatureTransferDetails[] memory)\\n    {\\n        uint256 inputsLength = _inputs.length;\\n        IPermit2.SignatureTransferDetails[] memory transferDetails =\\n            new IPermit2.SignatureTransferDetails[](inputsLength);\\n        \\n        for (uint256 i; i < inputsLength;) {\\n            transferDetails[i] =\\n                IPermit2.SignatureTransferDetails({to: address(this), requestedAmount: _inputs[i].amount});\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return transferDetails;\\n    }\\n\\n    /**\\n     * @notice Pause the contract from carrying out any more zaps\\n     * @dev Only owner can pause\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpause the contract to allow new zaps\\n     * @dev Only owner can unpause\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev Allow receiving of native tokens\\n     */\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/zaps/ZapErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title Zap errors\\n * @author kexley, Beefy\\n * @notice Custom errors for the zap router\\n */\\ncontract ZapErrors {\\n    error InvalidCaller(address owner, address caller);\\n    error TargetingInvalidContract(address target);\\n    error CallFailed(address target, uint256 value, bytes callData);\\n    error Slippage(address token, uint256 minAmountOut, uint256 balance);\\n    error EtherTransferFailed(address recipient);\\n    error CallerNotZap(address caller);\\n    error InsufficientRelayValue(uint256 balance, uint256 relayValue);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"remappings\": [],\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_permit2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"CallFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CallerNotZap\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"EtherTransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"relayValue\",\"type\":\"uint256\"}],\"name\":\"InsufficientRelayValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"InvalidCaller\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Slippage\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"TargetingInvalidContract\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBeefyZapRouter.Input[]\",\"name\":\"inputs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minOutputAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBeefyZapRouter.Output[]\",\"name\":\"outputs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IBeefyZapRouter.Relay\",\"name\":\"relay\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"indexed\":true,\"internalType\":\"struct IBeefyZapRouter.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"FulfilledOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"RelayData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenReturned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IPermit2.TokenPermissions[]\",\"name\":\"permitted\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPermit2.PermitBatchTransferFrom\",\"name\":\"_permit\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBeefyZapRouter.Input[]\",\"name\":\"inputs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minOutputAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBeefyZapRouter.Output[]\",\"name\":\"outputs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IBeefyZapRouter.Relay\",\"name\":\"relay\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct IBeefyZapRouter.Order\",\"name\":\"_order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"int32\",\"name\":\"index\",\"type\":\"int32\"}],\"internalType\":\"struct IBeefyZapRouter.StepToken[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBeefyZapRouter.Step[]\",\"name\":\"_route\",\"type\":\"tuple[]\"}],\"name\":\"executeOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBeefyZapRouter.Input[]\",\"name\":\"inputs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minOutputAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBeefyZapRouter.Output[]\",\"name\":\"outputs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IBeefyZapRouter.Relay\",\"name\":\"relay\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct IBeefyZapRouter.Order\",\"name\":\"_order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"int32\",\"name\":\"index\",\"type\":\"int32\"}],\"internalType\":\"struct IBeefyZapRouter.StepToken[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBeefyZapRouter.Step[]\",\"name\":\"_route\",\"type\":\"tuple[]\"}],\"name\":\"executeOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permit2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BeefyZapRouter", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "000000000000000000000000000000000022d473030f116ddee9f6b43ac78ba3", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}