{"SourceCode": "// SPDX-License-Identifier: None\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Contract {\r\n\r\n    address public manager;\r\n    address public walletReceive;\r\n\r\n    constructor(address _receive) {\r\n        walletReceive = _receive;\r\n        manager = msg.sender;\r\n    }\r\n\r\n    // ----------------------------------------------------------------------------------------------------\r\n    // manager\r\n    // ----------------------------------------------------------------------------------------------------\r\n\r\n    modifier onlyManager() {\r\n        require(msg.sender == manager);\r\n        _;\r\n    }\r\n\r\n    function setManager(address _manager) public onlyManager returns(address) {\r\n        manager = _manager;\r\n        return manager;\r\n    }\r\n\r\n    // ----------------------------------------------------------------------------------------------------\r\n    // buy\r\n    // ----------------------------------------------------------------------------------------------------\r\n\r\n    struct BuyRecord { IERC20 token; uint256 orderId; uint256 amount; uint times; }\r\n    mapping (address => BuyRecord[]) _buyRecords;\r\n\r\n    // buy of user\r\n    function buy(IERC20 _token, uint256 _orderId, uint256 _amount) public {\r\n        require(IERC20(_token).balanceOf(msg.sender) >= _amount, \"the balanceOf address is not enough !!\");\r\n        require(IERC20(_token).allowance(msg.sender, address(this)) >= _amount, \"the allowance is not enough !!\");\r\n\r\n        IERC20(_token).transferFrom(msg.sender, walletReceive, _amount);\r\n        _buyRecords[msg.sender].push(BuyRecord(_token, _orderId, _amount, block.timestamp));\r\n    }\r\n\r\n    // records of buy\r\n    function buyRecords(address _addr) external view returns (BuyRecord[] memory) {\r\n        return _buyRecords[_addr];\r\n    }\r\n\r\n    // ----------------------------------------------------------------------------------------------------\r\n    // receive & stake\r\n    // ----------------------------------------------------------------------------------------------------\r\n\r\n    function setWalletReceive(address _receive) public onlyManager returns(address) {\r\n        walletReceive = _receive;\r\n        return walletReceive;\r\n    }\r\n\r\n    // ----------------------------------------------------------------------------------------------------\r\n    // batch transfer\r\n    // ----------------------------------------------------------------------------------------------------\r\n\r\n    // batch transfer of manager\r\n    function batchTransfer(IERC20 _token, address[] memory _tos, uint256[] memory _amounts) public {\r\n        require(_tos.length > 0, \"the addresses is empty !!\");\r\n        require(_amounts.length > 0, \"the amount is empty !! \");\r\n        require(_tos.length == _amounts.length, \"the tos length unequal to amounts length !!\");\r\n\r\n        uint256 _total = 0;\r\n        for( uint i = 0; i < _amounts.length; i++ ) {\r\n            _total = _total + _amounts[i];\r\n        }\r\n        require(IERC20(_token).balanceOf(msg.sender) >= _total, \"the balanceOf address is not enough !!\");\r\n        require(IERC20(_token).allowance(msg.sender, address(this)) >= _total, \"the allowance is not enough !!\");\r\n\r\n        for( uint i = 0; i < _tos.length; i++ ) {\r\n            IERC20(_token).transferFrom(msg.sender, _tos[i], _amounts[i]);\r\n        }\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receive\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"buyRecords\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"times\",\"type\":\"uint256\"}],\"internalType\":\"struct Contract.BuyRecord[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receive\",\"type\":\"address\"}],\"name\":\"setWalletReceive\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletReceive\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Contract", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000041e6f4f12fa6b0410691ac5e72727c71afd2f884", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7b260219007c0eb768c802b1941d42c8bbaa6b6cb1d621307fb99d21c2043187"}