{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/CsdogeNFTSell.sol\": {\r\n      \"content\": \"// Csdoge Marketplace NFT Sell contract\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"./ICsdogeSign.sol\\\";\\r\\n\\r\\ninterface INftMint {\\r\\n    function getApproved(uint256) external view returns (address);\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address,\\r\\n        address,\\r\\n        uint256\\r\\n    ) external;\\r\\n\\r\\n    function ownerOf(uint256) external view returns (address);\\r\\n\\r\\n    function approve(address, uint256) external;\\r\\n}\\r\\n\\r\\ncontract CsdogeNFTSell is Ownable, IERC721Receiver {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    address public signContract;\\r\\n    address public csdogeNftContract;\\r\\n    address public treasuryWallet;\\r\\n    address public devWallet;\\r\\n    uint256 public marketplaceFee; // 150\\r\\n    uint256 public devFee; // 50\\r\\n\\r\\n    enum SaleStatus {\\r\\n        NotInSale,\\r\\n        InFixedSale,\\r\\n        InAuction\\r\\n    }\\r\\n\\r\\n    struct FixedSale {\\r\\n        address nftSeller;\\r\\n        address nftBuyer;\\r\\n        uint256 salePrice;\\r\\n    }\\r\\n\\r\\n    struct Auction {\\r\\n        uint256 auctionStartTimestamp;\\r\\n        uint256 auctionEndTimestamp;\\r\\n        uint256 startPrice;\\r\\n        uint256 nftHighestBidPrice;\\r\\n        address nftHighestBidder;\\r\\n        address nftSeller;\\r\\n    }\\r\\n\\r\\n    mapping(address => mapping(uint256 => FixedSale)) fixedSales; // nft address -> tokenId -> FixedSale\\r\\n    mapping(address => mapping(uint256 => Auction)) auctions; // nft address -> tokenId -> Auction\\r\\n    mapping(address => mapping(uint256 => SaleStatus)) public nftSaleStatus; // nft address -> tokenId -> SaleStatus\\r\\n\\r\\n    event NftFixedSaleListed(\\r\\n        address nftSeller,\\r\\n        address nftAddress,\\r\\n        uint256 tokenId,\\r\\n        uint256 salePrice,\\r\\n        uint256 listTimestamp\\r\\n    );\\r\\n\\r\\n    event NftFixedSaleCancelled(\\r\\n        address nftSeller,\\r\\n        address nftAddress,\\r\\n        uint256 tokenId\\r\\n    );\\r\\n\\r\\n    event NftFixedSalePriceUpdated(\\r\\n        address nftSeller,\\r\\n        address nftAddress,\\r\\n        uint256 tokenId,\\r\\n        uint256 updateSalePrice\\r\\n    );\\r\\n\\r\\n    event FixedSaleNftSold(\\r\\n        address nftBuyer,\\r\\n        address nftAddress,\\r\\n        uint256 tokenId,\\r\\n        uint256 salePrice\\r\\n    );\\r\\n\\r\\n    event NftAuctionListed(\\r\\n        address nftSeller,\\r\\n        address nftAddress,\\r\\n        uint256 tokenId,\\r\\n        uint256 auctionStartTimestamp,\\r\\n        uint256 auctionEndTimestamp,\\r\\n        uint256 startPrice\\r\\n    );\\r\\n\\r\\n    event NftAuctionSalePriceUpdated(\\r\\n        address nftSeller,\\r\\n        address nftAddress,\\r\\n        uint256 tokenId,\\r\\n        uint256 updateSalePrice\\r\\n    );\\r\\n\\r\\n    event NftBidDone(\\r\\n        address nftAddress,\\r\\n        uint256 tokenId,\\r\\n        uint256 bidPrice,\\r\\n        address nftBidder\\r\\n    );\\r\\n\\r\\n    event NftAuctionCancelled(\\r\\n        address nftAddress,\\r\\n        uint256 tokenId,\\r\\n        address nftSeller\\r\\n    );\\r\\n\\r\\n    event NftAuctionSettled(\\r\\n        address nftAddress,\\r\\n        uint256 tokenId,\\r\\n        address nftHighestBidder,\\r\\n        uint256 nftHighestBidPrice,\\r\\n        address nftSeller\\r\\n    );\\r\\n\\r\\n    event NftBurned(\\r\\n        address nftAddress,\\r\\n        uint256 tokenId,\\r\\n        address burner\\r\\n    );\\r\\n\\r\\n    modifier isNftNotInSale(address _nftAddress, uint256 _tokenId) {\\r\\n        require(\\r\\n            nftSaleStatus[_nftAddress][_tokenId] == SaleStatus.NotInSale,\\r\\n            \\\"Nft is already in sale\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isNftInFixedSale(address _nftAddress, uint256 _tokenId) {\\r\\n        require(\\r\\n            nftSaleStatus[_nftAddress][_tokenId] == SaleStatus.InFixedSale,\\r\\n            \\\"Nft is not in fixed sale\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isNftInAuctionSaleAndAuctionOngoing(\\r\\n        address _nftAddress,\\r\\n        uint256 _tokenId\\r\\n    ) {\\r\\n        require(\\r\\n            nftSaleStatus[_nftAddress][_tokenId] == SaleStatus.InAuction,\\r\\n            \\\"Nft is not in auction sale\\\"\\r\\n        );\\r\\n        require(\\r\\n            block.timestamp <\\r\\n                auctions[_nftAddress][_tokenId].auctionEndTimestamp,\\r\\n            \\\"Auction is over\\\"\\r\\n        );\\r\\n        require(\\r\\n            block.timestamp >=\\r\\n                auctions[_nftAddress][_tokenId].auctionStartTimestamp,\\r\\n            \\\"Auction is not started yet\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isOwnerOfNotInSaleNft(address _nftAddress, uint256 _tokenId) {\\r\\n        require(\\r\\n            msg.sender == INftMint(_nftAddress).ownerOf(_tokenId),\\r\\n            \\\"You are not owner of not in sale nft\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isOwnerOfFixedSaleNft(address _nftAddress, uint256 _tokenId) {\\r\\n        require(\\r\\n            msg.sender == fixedSales[_nftAddress][_tokenId].nftSeller,\\r\\n            \\\"You are not nft owner of fixed sale nft\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isOwnerOfAuctionNft(address _nftAddress, uint256 _tokenId) {\\r\\n        require(\\r\\n            msg.sender == auctions[_nftAddress][_tokenId].nftSeller,\\r\\n            \\\"You are not nft owner of auction nft\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isBidPriceGreaterThanPreviousOne(\\r\\n        address _nftAddress,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _bidPrice\\r\\n    ) {\\r\\n        require(\\r\\n            _bidPrice > auctions[_nftAddress][_tokenId].nftHighestBidPrice,\\r\\n            \\\"Bid should be greater than previous bid\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier canSettleAuction(address _nftAddress, uint256 _tokenId) {\\r\\n        require(\\r\\n            nftSaleStatus[_nftAddress][_tokenId] == SaleStatus.InAuction,\\r\\n            \\\"Nft is not in auction sale\\\"\\r\\n        );\\r\\n        require(\\r\\n            block.timestamp >\\r\\n                auctions[_nftAddress][_tokenId].auctionEndTimestamp,\\r\\n            \\\"Auction is ongoing yet\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isNobodyMadeBidYet(address _nftAddress, uint256 _tokenId) {\\r\\n        require(\\r\\n            address(0) == auctions[_nftAddress][_tokenId].nftHighestBidder,\\r\\n            \\\"bid done\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier buyPriceMeetSalePrice(\\r\\n        address _nftAddress,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _buyPrice\\r\\n    ) {\\r\\n        require(\\r\\n            _buyPrice >= fixedSales[_nftAddress][_tokenId].salePrice,\\r\\n            \\\"Buy Price is not enough\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isPriceGreaterThanZero(uint256 _price) {\\r\\n        require(_price > 0, \\\"Price cannot be 0\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isSignatureVerified(\\r\\n        address _nftAddress,\\r\\n        uint256 _tokenId,\\r\\n        bytes memory _signature\\r\\n    ) {\\r\\n        require(\\r\\n            ICsdogeSign(signContract).verify(\\r\\n                msg.sender,\\r\\n                _nftAddress,\\r\\n                _tokenId,\\r\\n                1, // for compatibility with sign contract\\r\\n                _signature\\r\\n            ),\\r\\n            \\\"Invalid Sign!\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function setSignContract(address _signContract) external onlyOwner {\\r\\n        signContract = _signContract;\\r\\n    }\\r\\n\\r\\n    function setCsdogeNftContract(address _csdogeNftContract)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        csdogeNftContract = _csdogeNftContract;\\r\\n    }\\r\\n\\r\\n    function setTreasuryWallet(address _treasuryWallet) external onlyOwner {\\r\\n        treasuryWallet = _treasuryWallet;\\r\\n    }\\r\\n\\r\\n    function setDevWallet(address _devWallet) external onlyOwner {\\r\\n        devWallet = _devWallet;\\r\\n    }\\r\\n\\r\\n    function setMarketplaceFee(uint256 _marketplaceFee) external onlyOwner {\\r\\n        marketplaceFee = _marketplaceFee;\\r\\n    }\\r\\n\\r\\n    function setDevFee(uint256 _devFee) external onlyOwner {\\r\\n        devFee = _devFee;\\r\\n    }\\r\\n\\r\\n    function withdraw() external onlyOwner {\\r\\n        Address.sendValue(payable(msg.sender), address(this).balance);\\r\\n    }\\r\\n\\r\\n    // Nft FIXED SALE\\r\\n    function listFixedSale(\\r\\n        address _nftAddress,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _salePrice,\\r\\n        bytes memory _signature\\r\\n    )\\r\\n        external\\r\\n        isOwnerOfNotInSaleNft(_nftAddress, _tokenId)\\r\\n        isNftNotInSale(_nftAddress, _tokenId)\\r\\n        isPriceGreaterThanZero(_salePrice)\\r\\n        isSignatureVerified(_nftAddress, _tokenId, _signature)\\r\\n    {\\r\\n        fixedSales[_nftAddress][_tokenId] = FixedSale(\\r\\n            msg.sender,\\r\\n            address(0),\\r\\n            _salePrice\\r\\n        );\\r\\n        nftSaleStatus[_nftAddress][_tokenId] = SaleStatus.InFixedSale;\\r\\n\\r\\n        INftMint(_nftAddress).approve(address(this), _tokenId);\\r\\n\\r\\n        INftMint(_nftAddress).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _tokenId\\r\\n        );\\r\\n        ICsdogeSign(signContract).increaseNonce(msg.sender);\\r\\n\\r\\n        emit NftFixedSaleListed(\\r\\n            msg.sender,\\r\\n            _nftAddress,\\r\\n            _tokenId,\\r\\n            _salePrice,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function cancelFixedSale(\\r\\n        address _nftAddress,\\r\\n        uint256 _tokenId,\\r\\n        bytes memory _signature\\r\\n    )\\r\\n        external\\r\\n        isNftInFixedSale(_nftAddress, _tokenId)\\r\\n        isOwnerOfFixedSaleNft(_nftAddress, _tokenId)\\r\\n        isSignatureVerified(_nftAddress, _tokenId, _signature)\\r\\n    {\\r\\n        INftMint(_nftAddress).safeTransferFrom(\\r\\n            address(this),\\r\\n            msg.sender,\\r\\n            _tokenId\\r\\n        );\\r\\n\\r\\n        nftSaleStatus[_nftAddress][_tokenId] = SaleStatus.NotInSale;\\r\\n        ICsdogeSign(signContract).increaseNonce(msg.sender);\\r\\n\\r\\n        emit NftFixedSaleCancelled(msg.sender, _nftAddress, _tokenId);\\r\\n    }\\r\\n\\r\\n    function updateFixedSalePrice(\\r\\n        address _nftAddress,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _updatedSalePrice,\\r\\n        bytes memory _signature\\r\\n    )\\r\\n        external\\r\\n        isNftInFixedSale(_nftAddress, _tokenId)\\r\\n        isOwnerOfFixedSaleNft(_nftAddress, _tokenId)\\r\\n        isPriceGreaterThanZero(_updatedSalePrice)\\r\\n        isSignatureVerified(_nftAddress, _tokenId, _signature)\\r\\n    {\\r\\n        fixedSales[_nftAddress][_tokenId].salePrice = _updatedSalePrice;\\r\\n        ICsdogeSign(signContract).increaseNonce(msg.sender);\\r\\n\\r\\n        emit NftFixedSalePriceUpdated(\\r\\n            msg.sender,\\r\\n            _nftAddress,\\r\\n            _tokenId,\\r\\n            _updatedSalePrice\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function buyFromFixedSale(\\r\\n        address _nftAddress,\\r\\n        uint256 _tokenId,\\r\\n        bytes memory _signature\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        isNftInFixedSale(_nftAddress, _tokenId)\\r\\n        buyPriceMeetSalePrice(_nftAddress, _tokenId, msg.value)\\r\\n        isSignatureVerified(_nftAddress, _tokenId, _signature)\\r\\n    {\\r\\n        INftMint(_nftAddress).safeTransferFrom(\\r\\n            address(this),\\r\\n            msg.sender,\\r\\n            _tokenId\\r\\n        );\\r\\n\\r\\n        nftSaleStatus[_nftAddress][_tokenId] = SaleStatus.NotInSale;\\r\\n\\r\\n        fixedSales[_nftAddress][_tokenId].nftBuyer = msg.sender;\\r\\n\\r\\n        {\\r\\n            FixedSale memory currentFixedSale = fixedSales[_nftAddress][\\r\\n                _tokenId\\r\\n            ];\\r\\n\\r\\n            Address.sendValue(\\r\\n                payable(currentFixedSale.nftSeller),\\r\\n                (currentFixedSale.salePrice *\\r\\n                    (10000 - marketplaceFee - devFee)) / 10000\\r\\n            );\\r\\n            Address.sendValue(\\r\\n                payable(treasuryWallet),\\r\\n                (currentFixedSale.salePrice * marketplaceFee) / 10000\\r\\n            );\\r\\n            Address.sendValue(\\r\\n                payable(devWallet),\\r\\n                (currentFixedSale.salePrice * devFee) / 10000\\r\\n            );\\r\\n        }\\r\\n        ICsdogeSign(signContract).increaseNonce(msg.sender);\\r\\n\\r\\n        emit FixedSaleNftSold(msg.sender, _nftAddress, _tokenId, msg.value);\\r\\n    }\\r\\n\\r\\n    // Nft AUCTION SALE\\r\\n    function listNftAuction(\\r\\n        address _nftAddress,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _auctionStartTimestamp,\\r\\n        uint256 _auctionEndTimestamp,\\r\\n        uint256 _startPrice,\\r\\n        bytes memory _signature\\r\\n    )\\r\\n        external\\r\\n        isOwnerOfNotInSaleNft(_nftAddress, _tokenId)\\r\\n        isNftNotInSale(_nftAddress, _tokenId)\\r\\n        isPriceGreaterThanZero(_startPrice)\\r\\n        isSignatureVerified(_nftAddress, _tokenId, _signature)\\r\\n    {\\r\\n        _storeNftAuctionDetails(\\r\\n            _nftAddress,\\r\\n            _tokenId,\\r\\n            _auctionStartTimestamp,\\r\\n            _auctionEndTimestamp,\\r\\n            _startPrice\\r\\n        );\\r\\n        ICsdogeSign(signContract).increaseNonce(msg.sender);\\r\\n\\r\\n        emit NftAuctionListed(\\r\\n            msg.sender,\\r\\n            _nftAddress,\\r\\n            _tokenId,\\r\\n            _auctionStartTimestamp,\\r\\n            _auctionEndTimestamp,\\r\\n            _startPrice\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function updateAuctionSalePrice(\\r\\n        address _nftAddress,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _updatedSalePrice,\\r\\n        bytes memory _signature\\r\\n    )\\r\\n        external\\r\\n        isSignatureVerified(_nftAddress, _tokenId, _signature)\\r\\n        isNftInAuctionSaleAndAuctionOngoing(_nftAddress, _tokenId)\\r\\n        isOwnerOfAuctionNft(_nftAddress, _tokenId)\\r\\n        isNobodyMadeBidYet(_nftAddress, _tokenId)\\r\\n    {\\r\\n        require(_updatedSalePrice > 0, \\\"Price cannot be 0\\\");\\r\\n\\r\\n        auctions[_nftAddress][_tokenId].startPrice = _updatedSalePrice;\\r\\n        auctions[_nftAddress][_tokenId].nftHighestBidPrice = _updatedSalePrice;\\r\\n        \\r\\n        ICsdogeSign(signContract).increaseNonce(msg.sender);\\r\\n\\r\\n        emit NftAuctionSalePriceUpdated(\\r\\n            msg.sender,\\r\\n            _nftAddress,\\r\\n            _tokenId,\\r\\n            _updatedSalePrice\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function makeBid(\\r\\n        address _nftAddress,\\r\\n        uint256 _tokenId,\\r\\n        bytes memory _signature\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        isNftInAuctionSaleAndAuctionOngoing(_nftAddress, _tokenId)\\r\\n        isBidPriceGreaterThanPreviousOne(_nftAddress, _tokenId, msg.value)\\r\\n        isSignatureVerified(_nftAddress, _tokenId, _signature)\\r\\n    {\\r\\n        Auction memory currentAuction = auctions[_nftAddress][_tokenId];\\r\\n\\r\\n        if (currentAuction.nftHighestBidder != address(0)) {\\r\\n            Address.sendValue(\\r\\n                payable(currentAuction.nftHighestBidder),\\r\\n                currentAuction.nftHighestBidPrice\\r\\n            );\\r\\n        }\\r\\n\\r\\n        auctions[_nftAddress][_tokenId].nftHighestBidPrice = msg.value;\\r\\n        auctions[_nftAddress][_tokenId].nftHighestBidder = msg.sender;\\r\\n\\r\\n        ICsdogeSign(signContract).increaseNonce(msg.sender);\\r\\n\\r\\n        emit NftBidDone(_nftAddress, _tokenId, msg.value, msg.sender);\\r\\n    }\\r\\n\\r\\n    function cancelNftAuction(\\r\\n        address _nftAddress,\\r\\n        uint256 _tokenId,\\r\\n        bytes memory _signature\\r\\n    )\\r\\n        external\\r\\n        isSignatureVerified(_nftAddress, _tokenId, _signature)\\r\\n        isNftInAuctionSaleAndAuctionOngoing(_nftAddress, _tokenId)\\r\\n        isOwnerOfAuctionNft(_nftAddress, _tokenId)\\r\\n        isNobodyMadeBidYet(_nftAddress, _tokenId)\\r\\n    {\\r\\n        nftSaleStatus[_nftAddress][_tokenId] = SaleStatus.NotInSale;\\r\\n\\r\\n        INftMint(_nftAddress).safeTransferFrom(\\r\\n            address(this),\\r\\n            msg.sender,\\r\\n            _tokenId\\r\\n        );\\r\\n        ICsdogeSign(signContract).increaseNonce(msg.sender);\\r\\n\\r\\n        emit NftAuctionCancelled(_nftAddress, _tokenId, msg.sender);\\r\\n    }\\r\\n\\r\\n    function settleNftAuction(address _nftAddress, uint256 _tokenId)\\r\\n        external\\r\\n        onlyOwner\\r\\n        canSettleAuction(_nftAddress, _tokenId)\\r\\n    {\\r\\n        address nftBuyer = auctions[_nftAddress][_tokenId].nftHighestBidder;\\r\\n\\r\\n        if (nftBuyer == address(0)) {\\r\\n            INftMint(_nftAddress).safeTransferFrom(\\r\\n                address(this),\\r\\n                auctions[_nftAddress][_tokenId].nftSeller,\\r\\n                _tokenId\\r\\n            );\\r\\n\\r\\n            nftSaleStatus[_nftAddress][_tokenId] = SaleStatus.NotInSale;\\r\\n        } else {\\r\\n            _transferNftAndPaySeller(\\r\\n                _nftAddress,\\r\\n                _tokenId,\\r\\n                auctions[_nftAddress][_tokenId].nftHighestBidPrice,\\r\\n                nftBuyer\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit NftAuctionSettled(\\r\\n            _nftAddress,\\r\\n            _tokenId,\\r\\n            nftBuyer,\\r\\n            auctions[_nftAddress][_tokenId].nftHighestBidPrice,\\r\\n            auctions[_nftAddress][_tokenId].nftSeller\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function burnNft(address _nftAddress, uint256 _tokenId)\\r\\n        external\\r\\n        isOwnerOfNotInSaleNft(_nftAddress, _tokenId)\\r\\n    {\\r\\n        INftMint(_nftAddress).approve(address(this), _tokenId);\\r\\n        \\r\\n        INftMint(_nftAddress).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(1),\\r\\n            _tokenId\\r\\n        );\\r\\n\\r\\n        emit NftBurned(\\r\\n            _nftAddress,\\r\\n            _tokenId,\\r\\n            msg.sender\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getNftAuctionDetails(address _nftAddress, uint256 _tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (Auction memory)\\r\\n    {\\r\\n        return auctions[_nftAddress][_tokenId];\\r\\n    }\\r\\n\\r\\n    function getNftFixedSaleDetails(address _nftAddress, uint256 _tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (FixedSale memory)\\r\\n    {\\r\\n        return fixedSales[_nftAddress][_tokenId];\\r\\n    }\\r\\n\\r\\n    function _transferNftAndPaySeller(\\r\\n        address _nftAddress,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _bidPrice,\\r\\n        address _nftBuyer\\r\\n    ) internal {\\r\\n        INftMint(_nftAddress).safeTransferFrom(\\r\\n            address(this),\\r\\n            _nftBuyer,\\r\\n            _tokenId\\r\\n        );\\r\\n\\r\\n        nftSaleStatus[_nftAddress][_tokenId] = SaleStatus.NotInSale;\\r\\n\\r\\n        Address.sendValue(\\r\\n            payable(auctions[_nftAddress][_tokenId].nftSeller),\\r\\n            (_bidPrice * (10000 - marketplaceFee - devFee)) / 10000\\r\\n        );\\r\\n\\r\\n        Address.sendValue(\\r\\n            payable(treasuryWallet),\\r\\n            (_bidPrice * marketplaceFee) / 10000\\r\\n        );\\r\\n        Address.sendValue(payable(devWallet), (_bidPrice * devFee) / 10000);\\r\\n    }\\r\\n\\r\\n    function _storeNftAuctionDetails(\\r\\n        address _nftAddress,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _auctionStartTimestamp,\\r\\n        uint256 _auctionEndTimestamp,\\r\\n        uint256 _startPrice\\r\\n    ) internal {\\r\\n        auctions[_nftAddress][_tokenId] = Auction(\\r\\n            _auctionStartTimestamp,\\r\\n            _auctionEndTimestamp,\\r\\n            _startPrice,\\r\\n            _startPrice,\\r\\n            address(0),\\r\\n            msg.sender\\r\\n        );\\r\\n\\r\\n        nftSaleStatus[_nftAddress][_tokenId] = SaleStatus.InAuction;\\r\\n\\r\\n        INftMint(_nftAddress).approve(address(this), _tokenId);\\r\\n        \\r\\n        INftMint(_nftAddress).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _tokenId\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function onERC721Received(\\r\\n        address,\\r\\n        address,\\r\\n        uint256,\\r\\n        bytes memory\\r\\n    ) public virtual override returns (bytes4) {\\r\\n        return this.onERC721Received.selector;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/ICsdogeSign.sol\": {\r\n      \"content\": \"// Csdoge Marketplace Sign Interface contract\\r\\n\\r\\n// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.9;\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ninterface ICsdogeSign {\\r\\n    function verify(\\r\\n        address _minter,\\r\\n        address _contractAddress,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _amount,\\r\\n        bytes memory _signature\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    function increaseNonce(address _minter) external;\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftBuyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"FixedSaleNftSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftSeller\",\"type\":\"address\"}],\"name\":\"NftAuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftSeller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionStartTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionEndTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"}],\"name\":\"NftAuctionListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftSeller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updateSalePrice\",\"type\":\"uint256\"}],\"name\":\"NftAuctionSalePriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftHighestBidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftHighestBidPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftSeller\",\"type\":\"address\"}],\"name\":\"NftAuctionSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftBidder\",\"type\":\"address\"}],\"name\":\"NftBidDone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"}],\"name\":\"NftBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftSeller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NftFixedSaleCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftSeller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listTimestamp\",\"type\":\"uint256\"}],\"name\":\"NftFixedSaleListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftSeller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updateSalePrice\",\"type\":\"uint256\"}],\"name\":\"NftFixedSalePriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burnNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"buyFromFixedSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"cancelFixedSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"cancelNftAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"csdogeNftContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getNftAuctionDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"auctionStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftHighestBidPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftHighestBidder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftSeller\",\"type\":\"address\"}],\"internalType\":\"struct CsdogeNFTSell.Auction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getNftFixedSaleDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"nftSeller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftBuyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"internalType\":\"struct CsdogeNFTSell.FixedSale\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"listFixedSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"listNftAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"makeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketplaceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftSaleStatus\",\"outputs\":[{\"internalType\":\"enum CsdogeNFTSell.SaleStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_csdogeNftContract\",\"type\":\"address\"}],\"name\":\"setCsdogeNftContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"}],\"name\":\"setDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devWallet\",\"type\":\"address\"}],\"name\":\"setDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketplaceFee\",\"type\":\"uint256\"}],\"name\":\"setMarketplaceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signContract\",\"type\":\"address\"}],\"name\":\"setSignContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryWallet\",\"type\":\"address\"}],\"name\":\"setTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"settleNftAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_updatedSalePrice\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"updateAuctionSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_updatedSalePrice\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"updateFixedSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CsdogeNFTSell", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}