{"SourceCode": "pragma solidity 0.5.10;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(isContract(address(token)), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\ncontract MultiStake_XRP {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    address private tokenAddr = 0x1D2F0da169ceB9fC7B3144628dB156f3F6c60dBE; // XRP\r\n    IERC20 public token;\r\n\r\n    uint256 public constant INVEST_MIN_AMOUNT = 12 ether; // 12 XRP\r\n    uint256[] public REFERRAL_PERCENTS = [70, 20, 10];\r\n    uint256 public constant TOTAL_REF = 100;\r\n    uint256 public constant FUND_FEE = 30;\r\n    uint256 public constant DEV_FEE = 30;\r\n    uint256 public constant MKT_FEE = 30;\r\n    uint256 public constant SPONSOR_FEE = 30;\r\n\r\n    uint256 public constant REINVEST_BONUS = 50;\r\n    uint256 public constant PERCENTS_DIVIDER = 1000;\r\n    uint256 public constant TIME_STEP = 1 days;\r\n\r\n    uint256 public totalInvested;\r\n    uint256 public totalReferral;\r\n\r\n    struct Plan {\r\n        uint256 time;\r\n        uint256 percent;\r\n    }\r\n\r\n    Plan[] internal plans;\r\n\r\n    struct Deposit {\r\n        uint8 plan;\r\n        uint256 amount;\r\n        uint256 start;\r\n    }\r\n\r\n    struct User {\r\n        Deposit[] deposits;\r\n        uint256 checkpoint;\r\n        address referrer;\r\n        uint256[3] levels;\r\n        uint256 bonus;\r\n        uint256 totalBonus;\r\n        uint256 withdrawn;\r\n    }\r\n\r\n    mapping(address => User) internal users;\r\n\r\n    uint256 public startDate;\r\n\r\n    address payable public fundWallet;\r\n    address payable public devWallet;\r\n    address payable public mktWallet;\r\n    address payable public sponsorWallet;\r\n\r\n    event Newbie(address user);\r\n    event NewDeposit(\r\n        address indexed user,\r\n        uint8 plan,\r\n        uint256 amount,\r\n        uint256 time\r\n    );\r\n    event Withdrawn(address indexed user, uint256 amount, uint256 time);\r\n    event RefBonus(\r\n        address indexed referrer,\r\n        address indexed referral,\r\n        uint256 indexed level,\r\n        uint256 amount\r\n    );\r\n    event FeePayed(address indexed user, uint256 totalAmount);\r\n\r\n    constructor(\r\n        address payable fundAddr,\r\n        address payable devAddr,\r\n        address payable mktAddr,\r\n        address payable sponsorAddr,\r\n        uint256 start\r\n    ) public {\r\n        require(\r\n            !isContract(fundAddr) &&\r\n                !isContract(devAddr) &&\r\n                !isContract(mktAddr) &&\r\n                !isContract(sponsorAddr)\r\n        );\r\n        fundWallet = fundAddr;\r\n        devWallet = devAddr;\r\n        mktWallet = mktAddr;\r\n        sponsorWallet = sponsorAddr;\r\n\r\n        token = IERC20(tokenAddr);\r\n\r\n        if (start > 0) {\r\n            startDate = start;\r\n        } else {\r\n            startDate = block.timestamp;\r\n        }\r\n\r\n        plans.push(Plan(7, 160));\r\n        plans.push(Plan(20, 90));\r\n        plans.push(Plan(30, 70));\r\n    }\r\n\r\n    function FeePayout(uint256 msgValue) internal {\r\n        uint256 fFee = msgValue.mul(FUND_FEE).div(PERCENTS_DIVIDER);\r\n        uint256 dFee = msgValue.mul(DEV_FEE).div(PERCENTS_DIVIDER);\r\n        uint256 mFee = msgValue.mul(MKT_FEE).div(PERCENTS_DIVIDER);\r\n        uint256 sFee = msgValue.mul(SPONSOR_FEE).div(PERCENTS_DIVIDER);\r\n\r\n        token.safeTransfer(mktWallet, mFee);\r\n        token.safeTransfer(devWallet, dFee);\r\n        token.safeTransfer(fundWallet, fFee);\r\n        token.safeTransfer(sponsorWallet, sFee);\r\n\r\n        emit FeePayed(msg.sender, fFee.add(dFee).add(mFee).add(sFee));\r\n    }\r\n\r\n    function invest(\r\n        address referrer,\r\n        uint8 plan,\r\n        uint256 amount\r\n    ) public {\r\n        require(block.timestamp > startDate, \"contract does not launch yet\");\r\n        require(amount >= INVEST_MIN_AMOUNT);\r\n        require(plan < 4, \"Invalid plan\");\r\n\r\n        require(amount <= token.allowance(msg.sender, address(this)));\r\n        token.safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        FeePayout(amount);\r\n\r\n        User storage user = users[msg.sender];\r\n\r\n        if (user.referrer == address(0)) {\r\n            if (users[referrer].deposits.length > 0 && referrer != msg.sender) {\r\n                user.referrer = referrer;\r\n            }\r\n\r\n            address upline = user.referrer;\r\n            for (uint256 i = 0; i < 3; i++) {\r\n                if (upline != address(0)) {\r\n                    users[upline].levels[i] = users[upline].levels[i].add(1);\r\n                    upline = users[upline].referrer;\r\n                } else break;\r\n            }\r\n        }\r\n\r\n        uint256 refsamount;\r\n        if (user.referrer != address(0)) {\r\n            address upline = user.referrer;\r\n            for (uint256 i = 0; i < 3; i++) {\r\n                if (upline != address(0)) {\r\n                    uint256 refAmount = amount.mul(REFERRAL_PERCENTS[i]).div(\r\n                        PERCENTS_DIVIDER\r\n                    );\r\n                    users[upline].bonus = users[upline].bonus.add(refAmount);\r\n                    users[upline].totalBonus = users[upline].totalBonus.add(\r\n                        refAmount\r\n                    );\r\n                    totalReferral = totalReferral.add(refAmount);\r\n                    emit RefBonus(upline, msg.sender, i, refAmount);\r\n                    upline = users[upline].referrer;\r\n                } else {\r\n                    uint256 amountref = amount.mul(REFERRAL_PERCENTS[i]).div(\r\n                        PERCENTS_DIVIDER\r\n                    );\r\n                    refsamount = refsamount.add(amountref);\r\n                }\r\n            }\r\n            if (refsamount > 0) {\r\n                token.safeTransfer(mktWallet, refsamount.div(4));\r\n                token.safeTransfer(devWallet, refsamount.div(4));\r\n                token.safeTransfer(fundWallet, refsamount.div(4));\r\n                token.safeTransfer(sponsorWallet, refsamount.div(4));\r\n            }\r\n        } else {\r\n            uint256 refAmount = amount.mul(TOTAL_REF).div(PERCENTS_DIVIDER);\r\n            token.safeTransfer(fundWallet, refAmount.div(4));\r\n            token.safeTransfer(devWallet, refAmount.div(4));\r\n            token.safeTransfer(mktWallet, refAmount.div(4));\r\n            token.safeTransfer(sponsorWallet, refAmount.div(4));\r\n            totalReferral = totalReferral.add(refAmount);\r\n        }\r\n\r\n        if (user.deposits.length == 0) {\r\n            user.checkpoint = block.timestamp;\r\n            emit Newbie(msg.sender);\r\n        }\r\n\r\n        user.deposits.push(Deposit(plan, amount, block.timestamp));\r\n\r\n        totalInvested = totalInvested.add(amount);\r\n\r\n        emit NewDeposit(msg.sender, plan, amount, block.timestamp);\r\n    }\r\n\r\n    function withdraw() public {\r\n        User storage user = users[msg.sender];\r\n\r\n        require(\r\n            user.checkpoint.add(TIME_STEP) < block.timestamp,\r\n            \"only once a day\"\r\n        );\r\n\r\n        uint256 totalAmount = getUserDividends(msg.sender);\r\n\r\n        uint256 referralBonus = getUserReferralBonus(msg.sender);\r\n        if (referralBonus > 0) {\r\n            user.bonus = 0;\r\n            totalAmount = totalAmount.add(referralBonus);\r\n        }\r\n\r\n        require(totalAmount > 0, \"User has no dividends\");\r\n\r\n        uint256 contractBalance = token.balanceOf(address(this));\r\n        if (contractBalance < totalAmount) {\r\n            user.bonus = totalAmount.sub(contractBalance);\r\n            totalAmount = contractBalance;\r\n        }\r\n\r\n        user.checkpoint = block.timestamp;\r\n        user.withdrawn = user.withdrawn.add(totalAmount);\r\n\r\n        token.safeTransfer(msg.sender, totalAmount);\r\n\r\n        emit Withdrawn(msg.sender, totalAmount, block.timestamp);\r\n    }\r\n\r\n    function reinvest(uint8 plan) public {\r\n        User storage user = users[msg.sender];\r\n\r\n        require(\r\n            user.checkpoint.add(TIME_STEP) < block.timestamp,\r\n            \"only once a day\"\r\n        );\r\n\r\n        uint256 totalAmount = getUserDividends(msg.sender);\r\n\r\n        uint256 referralBonus = getUserReferralBonus(msg.sender);\r\n        if (referralBonus > 0) {\r\n            user.bonus = 0;\r\n            totalAmount = totalAmount.add(referralBonus);\r\n        }\r\n\r\n        require(totalAmount > 0, \"User has no dividends\");\r\n\r\n        FeePayout(totalAmount);\r\n\r\n        totalAmount = totalAmount.add(\r\n            totalAmount.mul(REINVEST_BONUS).div(PERCENTS_DIVIDER)\r\n        );\r\n\r\n        require(block.timestamp > startDate, \"contract does not launch yet\");\r\n        require(totalAmount >= INVEST_MIN_AMOUNT);\r\n        require(plan < 4, \"Invalid plan\");\r\n\r\n        user.deposits.push(Deposit(plan, totalAmount, block.timestamp));\r\n        totalInvested = totalInvested.add(totalAmount);\r\n\r\n        user.checkpoint = block.timestamp;\r\n        user.withdrawn = user.withdrawn.add(totalAmount);\r\n\r\n        emit NewDeposit(msg.sender, plan, totalAmount, block.timestamp);\r\n    }\r\n\r\n    function getContractBalance() public view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function UpdateStartDate(uint256 _startDate) public {\r\n        require(\r\n            msg.sender == devWallet,\r\n            \"Only developer can update start date\"\r\n        );\r\n        require(block.timestamp < startDate, \"Start date must be in future\");\r\n        startDate = _startDate;\r\n    }\r\n\r\n    function getPlanInfo(uint8 plan)\r\n        public\r\n        view\r\n        returns (uint256 time, uint256 percent)\r\n    {\r\n        time = plans[plan].time;\r\n        percent = plans[plan].percent;\r\n    }\r\n\r\n    function getUserDividends(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        User storage user = users[userAddress];\r\n\r\n        uint256 totalAmount;\r\n\r\n        for (uint256 i = 0; i < user.deposits.length; i++) {\r\n            uint256 finish = user.deposits[i].start.add(\r\n                plans[user.deposits[i].plan].time.mul(TIME_STEP)\r\n            );\r\n            if (user.checkpoint < finish) {\r\n                uint256 share = user\r\n                    .deposits[i]\r\n                    .amount\r\n                    .mul(plans[user.deposits[i].plan].percent)\r\n                    .div(PERCENTS_DIVIDER);\r\n                uint256 from = user.deposits[i].start > user.checkpoint\r\n                    ? user.deposits[i].start\r\n                    : user.checkpoint;\r\n                uint256 to = finish < block.timestamp\r\n                    ? finish\r\n                    : block.timestamp;\r\n                if (from < to) {\r\n                    totalAmount = totalAmount.add(\r\n                        share.mul(to.sub(from)).div(TIME_STEP)\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        return totalAmount;\r\n    }\r\n\r\n    function getUserTotalWithdrawn(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return users[userAddress].withdrawn;\r\n    }\r\n\r\n    function getUserCheckpoint(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return users[userAddress].checkpoint;\r\n    }\r\n\r\n    function getUserReferrer(address userAddress)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return users[userAddress].referrer;\r\n    }\r\n\r\n    function getUserDownlineCount(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256[3] memory referrals)\r\n    {\r\n        return (users[userAddress].levels);\r\n    }\r\n\r\n    function getUserTotalReferrals(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return\r\n            users[userAddress].levels[0] +\r\n            users[userAddress].levels[1] +\r\n            users[userAddress].levels[2];\r\n    }\r\n\r\n    function getUserReferralBonus(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return users[userAddress].bonus;\r\n    }\r\n\r\n    function getUserReferralTotalBonus(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return users[userAddress].totalBonus;\r\n    }\r\n\r\n    function getUserReferralWithdrawn(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return users[userAddress].totalBonus.sub(users[userAddress].bonus);\r\n    }\r\n\r\n    function getUserAvailable(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return\r\n            getUserReferralBonus(userAddress).add(\r\n                getUserDividends(userAddress)\r\n            );\r\n    }\r\n\r\n    function getUserAmountOfDeposits(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return users[userAddress].deposits.length;\r\n    }\r\n\r\n    function getUserTotalDeposits(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256 amount)\r\n    {\r\n        for (uint256 i = 0; i < users[userAddress].deposits.length; i++) {\r\n            amount = amount.add(users[userAddress].deposits[i].amount);\r\n        }\r\n    }\r\n\r\n    function getUserDepositInfo(address userAddress, uint256 index)\r\n        public\r\n        view\r\n        returns (\r\n            uint8 plan,\r\n            uint256 percent,\r\n            uint256 amount,\r\n            uint256 start,\r\n            uint256 finish\r\n        )\r\n    {\r\n        User storage user = users[userAddress];\r\n\r\n        plan = user.deposits[index].plan;\r\n        percent = plans[plan].percent;\r\n        amount = user.deposits[index].amount;\r\n        start = user.deposits[index].start;\r\n        finish = user.deposits[index].start.add(\r\n            plans[user.deposits[index].plan].time.mul(TIME_STEP)\r\n        );\r\n    }\r\n\r\n    function getSiteInfo()\r\n        public\r\n        view\r\n        returns (uint256 _totalInvested, uint256 _totalBonus)\r\n    {\r\n        return (totalInvested, totalReferral);\r\n    }\r\n\r\n    function getUserInfo(address userAddress)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 checkpoint,\r\n            uint256 totalDeposit,\r\n            uint256 totalWithdrawn,\r\n            uint256 totalReferrals\r\n        )\r\n    {\r\n        return (\r\n            getUserCheckpoint(userAddress),\r\n            getUserTotalDeposits(userAddress),\r\n            getUserTotalWithdrawn(userAddress),\r\n            getUserTotalReferrals(userAddress)\r\n        );\r\n    }\r\n\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDownlineCount\",\"outputs\":[{\"name\":\"referrals\",\"type\":\"uint256[3]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FUND_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReferral\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SPONSOR_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEV_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REINVEST_BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralTotalBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_REF\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSiteInfo\",\"outputs\":[{\"name\":\"_totalInvested\",\"type\":\"uint256\"},{\"name\":\"_totalBonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_PERCENTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"name\":\"totalReferrals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startDate\",\"type\":\"uint256\"}],\"name\":\"UpdateStartDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"getPlanInfo\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"percent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sponsorWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserDepositInfo\",\"outputs\":[{\"name\":\"plan\",\"type\":\"uint8\"},{\"name\":\"percent\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"finish\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserCheckpoint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INVEST_MIN_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mktWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"plan\",\"type\":\"uint8\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalReferrals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MKT_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"fundAddr\",\"type\":\"address\"},{\"name\":\"devAddr\",\"type\":\"address\"},{\"name\":\"mktAddr\",\"type\":\"address\"},{\"name\":\"sponsorAddr\",\"type\":\"address\"},{\"name\":\"start\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"plan\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"FeePayed\",\"type\":\"event\"}]", "ContractName": "MultiStake_XRP", "CompilerVersion": "v0.5.10+commit.5a6ea5b1", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d45edd98b18aeebbaf7c9232e76e8ff0b20259160000000000000000000000008513b2b679b7753524cffb89a6da8030fce04d1500000000000000000000000012357f0816957d51b15d684f9a3d2814096473e60000000000000000000000004532bbea6ec2df2b914df9c3f03d1d19f30701b100000000000000000000000000000000000000000000000000000000621a3260", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://8753f90299f7226b0bc33d6f2395f19d45100f907ab8829e6d7b317728d22636"}