{"SourceCode": "// File: contracts/library/Ownable.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {_setPendingOwner} and {_acceptOwner}.\r\n */\r\ncontract Ownable {\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    address payable public owner;\r\n\r\n    /**\r\n     * @dev Returns the address of the current pending owner.\r\n     */\r\n    address payable public pendingOwner;\r\n\r\n    event NewOwner(address indexed previousOwner, address indexed newOwner);\r\n    event NewPendingOwner(\r\n        address indexed oldPendingOwner,\r\n        address indexed newPendingOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"onlyOwner: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal {\r\n        owner = msg.sender;\r\n        emit NewOwner(address(0), msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Base on the inputing parameter `newPendingOwner` to check the exact error reason.\r\n     * @dev Transfer contract control to a new owner. The newPendingOwner must call `_acceptOwner` to finish the transfer.\r\n     * @param newPendingOwner New pending owner.\r\n     */\r\n    function _setPendingOwner(address payable newPendingOwner)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            newPendingOwner != address(0) && newPendingOwner != pendingOwner,\r\n            \"_setPendingOwner: New owenr can not be zero address and owner has been set!\"\r\n        );\r\n\r\n        // Gets current owner.\r\n        address oldPendingOwner = pendingOwner;\r\n\r\n        // Sets new pending owner.\r\n        pendingOwner = newPendingOwner;\r\n\r\n        emit NewPendingOwner(oldPendingOwner, newPendingOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Accepts the admin rights, but only for pendingOwenr.\r\n     */\r\n    function _acceptOwner() external {\r\n        require(\r\n            msg.sender == pendingOwner,\r\n            \"_acceptOwner: Only for pending owner!\"\r\n        );\r\n\r\n        // Gets current values for events.\r\n        address oldOwner = owner;\r\n        address oldPendingOwner = pendingOwner;\r\n\r\n        // Set the new contract owner.\r\n        owner = pendingOwner;\r\n\r\n        // Clear the pendingOwner.\r\n        pendingOwner = address(0);\r\n\r\n        emit NewOwner(oldOwner, owner);\r\n        emit NewPendingOwner(oldPendingOwner, pendingOwner);\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: contracts/governance/TimeLock.sol\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ncontract Timelock is Ownable {\r\n\r\n    constructor() public {\r\n        __Ownable_init();\r\n    }\r\n\r\n    function executeTransactions(address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas) public onlyOwner payable {\r\n        for (uint i = 0; i < targets.length; i++) {\r\n            executeTransaction(targets[i], values[i], signatures[i], calldatas[i]);\r\n        }\r\n    }\r\n\r\n    function executeTransaction(address target, uint value, string memory signature, bytes memory data) public onlyOwner payable returns (bytes memory) {\r\n        bytes memory callData;\r\n        require(bytes(signature).length > 0, \"executeTransaction: Parameter signature can not be empty!\");\r\n        callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\r\n\r\n        // solium-disable-next-line security/no-call-value\r\n        (bool success, bytes memory returnData) = target.call.value(value)(callData);\r\n        require(success, \"Timelock::executeTransaction: Transaction execution reverted.\");\r\n\r\n        return returnData;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldPendingOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"NewPendingOwner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_acceptOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"_setPendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"}],\"name\":\"executeTransactions\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Timelock", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://876e45a1fd089cf75471d191de959e9c95c2cf19b2b4dada8f670bada7136a64"}