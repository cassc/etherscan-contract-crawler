{"SourceCode": "// SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.6.12;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction underflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) { return 0; }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner_;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        _owner_ = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner_ == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner_;\r\n    }\r\n\r\n    function changeOwnerShip(address _newOwner) public onlyOwner {\r\n        emit OwnershipTransferred(_owner_, _newOwner);\r\n        _owner_ = _newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Simpler version of ERC20 interface.\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ninterface ERC20Basic {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title BasicToken\r\n */\r\ncontract BasicToken is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address public swapPair = address(this);\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply;\r\n\r\n    uint256 public _holdSumBind_ = (5 * 10 ** uint256(decimals)).div(100);\r\n\r\n    uint256 public _liquidityFee_ = 2;\r\n    uint256 public _airdropFee_ = 3;\r\n\r\n    uint256 private _directFee_ = 3;\r\n    uint256 private _indirectFee_ = 2;\r\n    uint256 public _inviterFee_ = _directFee_.add(_indirectFee_);\r\n\r\n    uint256 private _totalFees_ = _liquidityFee_.add(_airdropFee_).add(_inviterFee_);\r\n\r\n    bool public isStart;\r\n    uint256 public open_StartTime = 2 minutes;\r\n    uint256 public open_EndTime = 0;\r\n\r\n    address public projectAddress = address(0x75830C6c5A6EDfb77F0Dbf4fe8A493b81ce7fc94);\r\n    address public airdropAddress = address(0x90B642F2dd15aC1ac44F2A85597b5fFbc15D8388);\r\n\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping(address => uint256)) public allowance;\r\n\r\n    mapping (address => address) public _inviterAddress;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) public _isBlacklisted;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    /**\r\n     * @dev Initializes Constructor\r\n     */\r\n    constructor (uint256 _initialSupply, string memory _tokenName, string memory _tokenSymbol, address _tokenAddress) public {\r\n        totalSupply = _initialSupply * 10 ** uint256(decimals);\r\n        balances[_tokenAddress] = totalSupply;\r\n        name = _tokenName;\r\n        symbol = _tokenSymbol;\r\n        emit Transfer(address(0), _tokenAddress, totalSupply);\r\n\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[projectAddress] = true;\r\n        _isExcludedFromFee[airdropAddress] = true;\r\n    }\r\n\r\n    receive() external payable {\r\n        // some code\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n        require(_from != address(0), \"Error: transfer from the zero address\");\r\n        require(_to != address(0), \"Error: transfer to the zero address\");\r\n        require(balances[_from] >= _value, \"Error: transfer from the balance is not enough\");\r\n        require(!_isBlacklisted[_from], 'Error: Account blacklist, transfer prohibited');\r\n\r\n        bool feeType = true;\r\n\r\n        if (_isExcludedFromFee[_from] || _isExcludedFromFee[_to]) {\r\n            feeType = false;\r\n        } else {\r\n            if (isContract(_from) || isContract(_to)) {\r\n                require(swapPair != address(this), \"Error: No liquidity added\");\r\n            }\r\n            if (_from == swapPair || _to == swapPair) {\r\n                require(isStart, \"Error: Not at opening time\");\r\n                if (isStart && block.timestamp < open_EndTime) {\r\n                    _isBlacklisted[_to] = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (_inviterAddress[_to] == address(0) && balanceOf(_from) >= _holdSumBind_) {\r\n            bool isInviter = balanceOf(_to) == 0 && !isContract(_from) && !isContract(_to);\r\n            if (isInviter) {\r\n                _inviterAddress[_to] = _from;\r\n            }\r\n        }\r\n\r\n        _transferStandard(_from, _to, _value, feeType);\r\n    }\r\n\r\n    function _transferStandard(address _from, address _to, uint256 _value, bool _feeType) internal {\r\n        uint256 toValue = _value;\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n\r\n        if (_feeType && _totalFees_ > 0) {\r\n            _takeTokenFee(_from, swapPair, _value.mul(_liquidityFee_).div(100));\r\n            _takeTokenFee(_from, airdropAddress, _value.mul(_airdropFee_).div(100));\r\n            uint256 rateSum = _takeInviterFee(_from, _to, _value);\r\n            if (rateSum == 0) {\r\n                _takeTokenFee(_from, projectAddress, _value.mul(_inviterFee_).div(100));\r\n            } else if (rateSum < _inviterFee_) {\r\n                _takeTokenFee(_from, projectAddress, _value.mul(_inviterFee_ - rateSum).div(100));\r\n            }\r\n            toValue = _value.mul(100 - _totalFees_).div(100);\r\n        }\r\n\r\n        balances[_to] = balances[_to].add(toValue);\r\n        emit Transfer(_from, _to, toValue);\r\n    }\r\n\r\n    function _takeTokenFee(address _from, address _to, uint256 _value) internal {\r\n        if (_value == 0) { return; }\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(allowance[_from][msg.sender] >= _value, \"Error: transfer amount exceeds allowance\");\r\n        _approve(_from, msg.sender, allowance[_from][msg.sender].sub(_value));\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address _from, address _to, uint256 _value) internal {\r\n        require(_from != address(0), \"Error: approve from the zero address\");\r\n        require(_to != address(0), \"Error: approve to the zero address\");\r\n        allowance[_from][_to] = _value;\r\n        emit Approval(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        _approve(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function isContract(address _account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {size := extcodesize(_account)}\r\n        return size > 0;\r\n    }\r\n\r\n    function actionStart() public onlyOwner {\r\n        require(!isStart, \"Error: Action has begun\");\r\n        isStart = true;\r\n        if (open_EndTime == 0) {\r\n            open_EndTime = block.timestamp + open_StartTime;\r\n        }\r\n    }\r\n\r\n    function setStartTime(uint256 _value) public onlyOwner {\r\n        if (!isStart) {\r\n            open_EndTime = _value;\r\n        }\r\n    }\r\n\r\n    function claimTokens(uint256 _value) public onlyOwner {\r\n        ERC20Basic tokens = ERC20Basic(address(this));\r\n        tokens.transfer(owner(), _value);\r\n    }\r\n\r\n    function claimMainNetTokens(uint256 _value) public onlyOwner {\r\n        payable(owner()).transfer(_value);\r\n    }\r\n\r\n    function changeRouter(address _router) public onlyOwner {\r\n        swapPair = _router;\r\n    }\r\n\r\n    function changeProjectParty(address _router) public onlyOwner {\r\n        projectAddress = _router;\r\n    }\r\n\r\n    function changeAirdrop(address _router) public onlyOwner {\r\n        airdropAddress = _router;\r\n    }\r\n\r\n    function setExcludeFromFee(address _account, bool _type) public onlyOwner {\r\n        _isExcludedFromFee[_account] = _type;\r\n    }\r\n    function batchExcludeFromFee(address[] memory _account, bool _type) public onlyOwner {\r\n        require(_account.length > 0);\r\n        for (uint256 i = 0; i < _account.length; i++) {\r\n            _isExcludedFromFee[_account[i]] = _type;\r\n        }\r\n    }\r\n\r\n    function setBlacklisted(address _account, bool _type) public onlyOwner {\r\n        _isBlacklisted[_account] = _type;\r\n    }\r\n\r\n    function _takeInviterFee(address _from, address _to, uint256 _tAmount) private returns (uint256) {\r\n        uint256 rateSum = 0;\r\n        address cur;\r\n        if (_from == swapPair) {\r\n            cur = _to;\r\n        } else {\r\n            cur = _from;\r\n        }\r\n        for (int256 i = 1; i <= 2; i++) {\r\n            uint256 rate;\r\n            if (i == 1) {\r\n                rate = _directFee_; //One Reward(%)\r\n            } else if (i == 2) {\r\n                rate = _indirectFee_; //Two Reward(%)\r\n            } else {\r\n                break;\r\n            }\r\n            cur = _inviterAddress[cur];\r\n            if (cur == address(0)) {\r\n                break;\r\n            } else {\r\n                rateSum = rateSum.add(rate);\r\n            }\r\n            uint256 curTAmount = _tAmount.mul(rate).div(100);\r\n            _takeTokenFee(_from, cur, curTAmount);\r\n        }\r\n        return rateSum;\r\n    }\r\n\r\n    function setParameter(uint256 _liquidityFee, uint256 _airdropFee, uint256 _directFee, uint256 _indirectFee) public onlyOwner {\r\n        _liquidityFee_ = _liquidityFee;\r\n        _airdropFee_ = _airdropFee;\r\n\r\n        _directFee_ = _directFee;\r\n        _indirectFee_ = _indirectFee;\r\n        _inviterFee_ = _directFee_.add(_indirectFee_);\r\n\r\n        _totalFees_ = _liquidityFee_.add(_airdropFee_).add(_inviterFee_);\r\n    }\r\n\r\n    function setHoldSumBind(uint256 _value) public onlyOwner {\r\n        _holdSumBind_ = _value;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_airdropFee_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_holdSumBind_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_inviterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inviterFee_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actionStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_account\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_type\",\"type\":\"bool\"}],\"name\":\"batchExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"changeAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnerShip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"changeProjectParty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"changeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"claimMainNetTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStart\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open_EndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open_StartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_type\",\"type\":\"bool\"}],\"name\":\"setBlacklisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_type\",\"type\":\"bool\"}],\"name\":\"setExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setHoldSumBind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_airdropFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_directFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_indirectFee\",\"type\":\"uint256\"}],\"name\":\"setParameter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BasicToken", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000834000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000725916b1449b405029c30dca478d1a3a2fa2ea02000000000000000000000000000000000000000000000000000000000000000e446f63746f7220636f696e20303900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034430390000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3622df9e44df1fca8b1c842e7e1924498322e9c67e2f8452cf087d58ace475fd"}