{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SpacePadReferral.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./libraries/Context.sol\\\";\\nimport \\\"./libraries/Address.sol\\\";\\nimport \\\"./libraries/SpacePad.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract SpacePadReferral is Context {\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    struct ReferrallDeposits {\\n        address mainReferred;\\n        address depositer;\\n        uint8 level;\\n        uint256 referralFeeAmount;\\n        uint256 roundIndex;\\n        string tokenTicker;\\n    }\\n\\n    struct ReferralEearnings {\\n        uint256 all;\\n        uint256 level1;\\n        uint256 level2;\\n        uint256 level3;\\n    }\\n\\n    struct ReferralStructure {\\n        address uplineReferrer;\\n        address[] level1;\\n        address[] level2;\\n        address[] level3;\\n    }\\n\\n    mapping(address => uint256) public referredCount; // referrer_address -> num_of_referred\\n\\n    mapping(address => address) private activeReferral;\\n\\n    mapping(uint256 => mapping(address => ReferrallDeposits[]))\\n        private referralRoundDeposits;\\n\\n    mapping(address => ReferrallDeposits[]) private referralDeposits;\\n\\n    mapping(address => ReferralStructure) private referralStructure;\\n\\n    mapping(uint256 => mapping(address => ReferralEearnings))\\n        private referralRoundEearnings;\\n\\n    event Referral(address indexed referrer, address indexed farmer);\\n    event NextOwner(address indexed _owner);\\n    event NextOwnerApproved(address indexed _owner);\\n    event AdminStatus(address indexed _admin, bool _status);\\n\\n    // Standard contract ownership transfer.\\n    address public owner;\\n    address private nextOwner;\\n\\n    mapping(address => bool) public isAdmin;\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    // Standard modifier on methods invokable only by contract owner.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"OnlyOwner methods called by non-owner.\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(isAdmin[msg.sender], \\\"OnlyAdmin methods called by non-admin.\\\");\\n        _;\\n    }\\n\\n    // Standard contract ownership transfer implementation,\\n    function approveNextOwner(address _nextOwner) external onlyOwner {\\n        require(_nextOwner != owner, \\\"Cannot approve current owner.\\\");\\n\\n        nextOwner = _nextOwner;\\n        emit NextOwner(nextOwner);\\n    }\\n\\n    function saveReferralDeposit(\\n        address _referrer,\\n        address _depositer,\\n        address _mainReferred,\\n        uint8 _level,\\n        uint256 _referralFeeAmount,\\n        SpacePad.SpacePadRoundConfiguration memory roundConfiguration\\n    ) external onlyAdmin {\\n        ReferrallDeposits memory referralDeposit = ReferrallDeposits(\\n            _mainReferred,\\n            _depositer,\\n            _level,\\n            _referralFeeAmount,\\n            roundConfiguration.roundIndex,\\n            roundConfiguration.tokenTicker\\n        );\\n\\n        ReferralStructure storage refStructure = referralStructure[_referrer];\\n\\n        // Add the referral address to the appropriate level array\\n        if (\\n            _level == 1 &&\\n            !checkIfDepositerExists(refStructure.level1, _depositer)\\n        ) {\\n            refStructure.level1.push(_depositer);\\n        } else if (\\n            _level == 2 &&\\n            !checkIfDepositerExists(refStructure.level2, _depositer)\\n        ) {\\n            refStructure.level2.push(_depositer);\\n        } else if (\\n            _level == 3 &&\\n            !checkIfDepositerExists(refStructure.level3, _depositer)\\n        ) {\\n            refStructure.level3.push(_depositer);\\n        }\\n\\n        setReferralEearnings(\\n            _referrer,\\n            _referralFeeAmount,\\n            roundConfiguration.roundIndex,\\n            _level\\n        );\\n        referralDeposits[_referrer].push(referralDeposit);\\n        referralRoundDeposits[roundConfiguration.roundIndex][_referrer].push(\\n            referralDeposit\\n        );\\n    }\\n\\n    function checkIfDepositerExists(\\n        address[] storage _levelDepositers,\\n        address _depositer\\n    ) private view returns (bool) {\\n        // Loop through the array and check each element\\n        for (uint256 i = 0; i < _levelDepositers.length; i++) {\\n            if (_levelDepositers[i] == _depositer) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function setReferralEearnings(\\n        address _referrer,\\n        uint256 _amount,\\n        uint256 _roundIndex,\\n        uint256 _level\\n    ) private {\\n        ReferralEearnings storage earnings = referralRoundEearnings[\\n            _roundIndex\\n        ][_referrer];\\n        earnings.all += _amount;\\n        if (_level == 1) {\\n            earnings.level1 += _amount;\\n        }\\n        if (_level == 2) {\\n            earnings.level2 += _amount;\\n        }\\n        if (_level == 3) {\\n            earnings.level3 += _amount;\\n        }\\n    }\\n\\n    function getReferralStructure(address _refferal)\\n        public\\n        view\\n        returns (\\n            address uplineReferrer,\\n            address[] memory level1,\\n            address[] memory level2,\\n            address[] memory level3\\n        )\\n    {\\n        ReferralStructure storage referralStruct = referralStructure[_refferal];\\n        return (\\n            referralStruct.uplineReferrer,\\n            referralStruct.level1,\\n            referralStruct.level2,\\n            referralStruct.level3\\n        );\\n    }\\n\\n    function getReferralEearnings(address _referralAddress, uint256 _roundIndex)\\n        public\\n        view\\n        returns (\\n            uint256 all,\\n            uint256 level1,\\n            uint256 level2,\\n            uint256 level3\\n        )\\n    {\\n        ReferralEearnings storage earnigns = referralRoundEearnings[\\n            _roundIndex\\n        ][_referralAddress];\\n        return (\\n            earnigns.all,\\n            earnigns.level1,\\n            earnigns.level2,\\n            earnigns.level3\\n        );\\n    }\\n\\n    function getReferralDeposits(address _referralAddress)\\n        public\\n        view\\n        returns (ReferrallDeposits[] memory)\\n    {\\n        return referralDeposits[_referralAddress];\\n    }\\n\\n    function acceptNextOwner() external {\\n        require(\\n            msg.sender == nextOwner,\\n            \\\"Can only accept preapproved new owner.\\\"\\n        );\\n        owner = nextOwner;\\n        emit NextOwnerApproved(nextOwner);\\n    }\\n\\n    function setReferral(address _referred, address _referrer)\\n        external\\n        onlyAdmin\\n    {\\n        if (\\n            activeReferral[_referred] == address(0) && _referrer != address(0)\\n        ) {\\n            referralStructure[_referred].uplineReferrer = _referrer;\\n            activeReferral[_referred] = _referrer;\\n            referredCount[_referrer] += 1;\\n            emit Referral(_referrer, _referred);\\n        }\\n    }\\n\\n    function setMyReferral(address _referred) public {\\n        require(\\n            activeReferral[_referred] == address(0),\\n            \\\"Wallet has already assigned referral\\\"\\n        );\\n\\n        referralStructure[_referred].uplineReferrer = msg.sender;\\n        activeReferral[_referred] = msg.sender;\\n        referredCount[msg.sender] += 1;\\n        emit Referral(msg.sender, _referred);\\n    }\\n\\n    function getReferral(address _referred) external view returns (address) {\\n        return activeReferral[_referred];\\n    }\\n\\n    // Set admin status.\\n    function setAdminStatus(address _admin, bool _status) external onlyOwner {\\n        require(_admin != address(0), \\\"Admin: admin address cannot be null\\\");\\n        isAdmin[_admin] = _status;\\n\\n        emit AdminStatus(_admin, _status);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SpacePad.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Define the struct in the SharedStruct contract\\ncontract SpacePad {\\n    struct SpacePadRoundConfiguration {\\n        uint256 roundIndex;\\n        uint256 roundMaxCap;\\n        uint256 roundMaxUnits;\\n        uint256 roundUnitsLeft;\\n        uint256 initialUnitPrice;\\n        uint256 currentUnitPrice;\\n        uint256 currentCap;\\n        uint256 currentStepDepositsAmount;\\n        uint256 nextStepDepositsAmountIncrease;\\n        uint256 nextStepUnitPriceIncrease;\\n        uint256 singleWalletUnitsLimit;\\n        address tokenAddress;\\n        string tokenTicker;\\n        bool active;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"AdminStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"NextOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"NextOwnerApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"farmer\",\"type\":\"address\"}],\"name\":\"Referral\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptNextOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextOwner\",\"type\":\"address\"}],\"name\":\"approveNextOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referred\",\"type\":\"address\"}],\"name\":\"getReferral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referralAddress\",\"type\":\"address\"}],\"name\":\"getReferralDeposits\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"mainReferred\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"referralFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenTicker\",\"type\":\"string\"}],\"internalType\":\"struct SpacePadReferral.ReferrallDeposits[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_roundIndex\",\"type\":\"uint256\"}],\"name\":\"getReferralEearnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"all\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level3\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_refferal\",\"type\":\"address\"}],\"name\":\"getReferralStructure\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"uplineReferrer\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"level1\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"level2\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"level3\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referredCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mainReferred\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_referralFeeAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"roundIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundMaxCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundMaxUnits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundUnitsLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentStepDepositsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextStepDepositsAmountIncrease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextStepUnitPriceIncrease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"singleWalletUnitsLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenTicker\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct SpacePad.SpacePadRoundConfiguration\",\"name\":\"roundConfiguration\",\"type\":\"tuple\"}],\"name\":\"saveReferralDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAdminStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referred\",\"type\":\"address\"}],\"name\":\"setMyReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referred\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"setReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SpacePadReferral", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}