{"SourceCode": "// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity 0.8.19;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity 0.8.19;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity 0.8.19;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity 0.8.19;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\n// File: contracts/Vaccine.sol\r\n\r\n\r\n\r\n/*** Proudly Developed By: Jaafar Krayem ***/\r\n\r\npragma solidity 0.8.19;\r\n\r\n\r\ninterface IVestingContract {\r\n    function setVestingSchedule(\r\n        uint256 _saleID,\r\n        address _beneficiary,\r\n        uint256 _totalAmount,\r\n        uint256 _startDate,\r\n        uint256 _lockPeriod,\r\n        uint256 _percentageLock,\r\n        uint256 _interval\r\n    ) external;\r\n\r\n    function releaseVestedTokens(address _beneficiary) external;\r\n}\r\n\r\ncontract VaccineToken is ERC20 {\r\n    IVestingContract public vestingContract;\r\n\r\n    IERC20 usdtToken;\r\n\r\n    uint256 private buyerId;\r\n    uint256 public saleID;\r\n\r\n    address public deadWallet = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    address public owner;\r\n    address public saleReceiver;\r\n\r\n    // uint256 public price;\r\n    uint256 public minAmount = 100;\r\n    uint256 public maxAmount = 10000;\r\n    uint256 public referralPercentage = 5; // default is 5%\r\n\r\n    bool paused = true;\r\n    bool saleStarted = false;\r\n\r\n    struct SaleRound {\r\n        uint256 duration;\r\n        uint256 tokens;\r\n        uint256 price;\r\n        uint256 lockPeriod;\r\n        uint256 releasePercentage;\r\n        string releaseSchedule;\r\n    }\r\n\r\n    struct buyerData {\r\n        uint256 buyerID;\r\n        uint256 buyerAmount;\r\n        mapping(string => uint256) roundPercentage;\r\n        uint256 totalBuyPercentage;\r\n        uint256 airdropReceived;\r\n        uint256 totalPaid;\r\n        uint256 receivedAmount;\r\n        uint256 lockedAmount;\r\n    }\r\n\r\n    mapping(address => buyerData) public buyerDetails;\r\n    mapping(string => SaleRound) public rounds;\r\n    mapping(address => uint256) public airdropReceived;\r\n\r\n    mapping(address => bool) public Whitelist; //used for private sale and all sales before dex or cex\r\n    mapping(address => bool) public isBuyer;\r\n    mapping(address => bool) public isReferral;\r\n    mapping(string => uint256) public roundTokens;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not Owner\");\r\n        _;\r\n    }\r\n\r\n    modifier isWhitelist() {\r\n        require(Whitelist[msg.sender], \"Not Whitelisted\");\r\n        _;\r\n    }\r\n\r\n    modifier notPaused() {\r\n        require(paused != true, \"Sale is paused!\");\r\n        _;\r\n    }\r\n\r\n    modifier minMax(uint256 _amount) {\r\n        require(_amount >= minAmount, \"Less the minimum\");\r\n        require(_amount <= maxAmount, \"Above maximum\");\r\n        _;\r\n    }\r\n\r\n    address[] public buyers;\r\n\r\n    event changeOwner(address indexed Owner, address indexed newOwner);\r\n    event renounceOwnerShip(address indexed Owner, address indexed newOwner);\r\n    event buyTokens(\r\n        string round,\r\n        address buyer,\r\n        uint256 tokenAmount,\r\n        uint256 paidToken,\r\n        uint256 price\r\n    );\r\n\r\n    constructor() ERC20(\"Vaccine\", \"VAC\") {\r\n        owner = msg.sender;\r\n        _mint(msg.sender, 7400000000 * (1e18));\r\n        _mint(address(this), 2600000000 * (1e18));\r\n    }\r\n\r\n    function isActive() public view returns(bool){\r\n        return saleStarted;\r\n    }\r\n\r\n    function addToWhitelist(address _buyer) external onlyOwner{\r\n        require(_buyer != address(0), \"Address zero\");\r\n        Whitelist[_buyer] = true;\r\n    }\r\n\r\n    function removeFromWhitelist(address _buyer) external onlyOwner{\r\n        require(_buyer != address(0), \"Address zero\");\r\n        Whitelist[_buyer] = false;\r\n    }\r\n\r\n    function setVestingContract(address _newVesting) external onlyOwner{\r\n        require(_newVesting != address(0), \"Zero Address!\");\r\n        vestingContract = IVestingContract(_newVesting);\r\n    }\r\n\r\n    function startSaleRounds() external onlyOwner{\r\n        require(address(vestingContract) != address(0), \"Set Vesting Contract First\");\r\n        require(!saleStarted, \"Sale rounds started already!\");\r\n        rounds[\"Private Sale Round 1\"] = SaleRound(\r\n            180 days + block.timestamp,\r\n            500000000 * (1e18),\r\n            6 * (1e15),\r\n            24,\r\n            10,\r\n            \"10% first month, 5% monthly after linearly\"\r\n        );\r\n        roundTokens[\"Private Sale Round 1\"] = 500000000 * (1e18);\r\n        rounds[\"Private Sale Round 2\"] = SaleRound(\r\n            180 days + block.timestamp,\r\n            500000000 * (1e18),\r\n            8 * (1e15),\r\n            18,\r\n            10,\r\n            \"10% first month, 5% monthly after linearly\"\r\n        );\r\n        roundTokens[\"Private Sale Round 2\"] = 500000000 * (1e18);\r\n        rounds[\"Public Sale Round 1\"] = SaleRound(\r\n            90 days + block.timestamp,\r\n            600000000 * (1e18),\r\n            1 * (1e16),\r\n            0,\r\n            20,\r\n            \"10% monthly after linearly\"\r\n        );\r\n        roundTokens[\"Public Sale Round 1\"] = 600000000 * (1e18);\r\n        rounds[\"Airdrop Round 1\"] = SaleRound(\r\n            0,\r\n            60000000 * (1e18),\r\n            0,\r\n            0,\r\n            100,\r\n            \"AirDrop 1\"\r\n        );\r\n        rounds[\"Public Sale Round 2\"] = SaleRound(\r\n            30 days + block.timestamp,\r\n            500000000 * (1e18),\r\n            15 * (1e15),\r\n            0,\r\n            30,\r\n            \"10% monthly after linearly\"\r\n        );\r\n        roundTokens[\"Public Sale Round 2\"] = 500000000 * (1e18);\r\n        rounds[\"Airdrop Round 2\"] = SaleRound(\r\n            0,\r\n            30000000 * (1e18),\r\n            0,\r\n            0,\r\n            100,\r\n            \"AirDrop 2\"\r\n        );\r\n        rounds[\"Public Sale Round 3\"] = SaleRound(\r\n            0,\r\n            400000000 * (1e18),\r\n            2 * (1e16),\r\n            0,\r\n            40,\r\n            \"10% monthly after linearly\"\r\n        );\r\n        roundTokens[\"Public Sale Round 3\"] = 400000000 * (1e18);\r\n        rounds[\"Airdrop Round 3\"] = SaleRound(\r\n            0,\r\n            10000000 * (1e18),\r\n            0,\r\n            0,\r\n            100,\r\n            \"AirDrop 3\"\r\n        );\r\n        paused = false;\r\n        saleStarted = true;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0), \"address zero\");\r\n        emit changeOwner(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function renounceOwner(bool _confirm) external onlyOwner {\r\n        if (_confirm == true) {\r\n            emit renounceOwnerShip(owner, address(0x0));\r\n            owner = address(0x0);\r\n        }\r\n    }\r\n\r\n    function togglePause(bool _status) external onlyOwner {\r\n        paused = _status;\r\n    }\r\n\r\n    function setMinMax(uint256 _min, uint256 _max) external onlyOwner {\r\n        require(_min != 0 && _max != 0, \"can't be zero\");\r\n        minAmount = _min * (1e18);\r\n        maxAmount = _max * (1e18);\r\n    }\r\n\r\n    function addReferral(address _referral) external onlyOwner {\r\n        require(_referral != address(0), \"Zero address cannot be a referral\");\r\n        isReferral[_referral] = true;\r\n    }\r\n\r\n    function setReferralPercentage(uint256 _newPercentage) external onlyOwner {\r\n        require(\r\n            _newPercentage >= 0 && _newPercentage <= 100,\r\n            \"Invalid percentage\"\r\n        );\r\n        referralPercentage = _newPercentage;\r\n    }\r\n\r\n    function getRoundDetails(string memory _roundName)\r\n    public\r\n    view\r\n    returns (\r\n        uint256 duration,\r\n        uint256 tokens,\r\n        uint256 price,\r\n        uint256 lockPeriod,\r\n        uint256 releasePercentage,\r\n        string memory releaseSchedule\r\n    )\r\n{\r\n    SaleRound memory round = rounds[_roundName];\r\n    return (\r\n        round.duration,\r\n        round.tokens,\r\n        round.price,\r\n        round.lockPeriod,\r\n        round.releasePercentage,\r\n        round.releaseSchedule\r\n    );\r\n}\r\n\r\n\r\n    function buy(uint256 usdtAmount, address referral)\r\n        external\r\n        notPaused\r\n        isWhitelist\r\n        minMax(usdtAmount)\r\n    {\r\n        (\r\n            string memory currentRound,\r\n            string memory previousRound\r\n        ) = getCurrentAndPreviousRound();\r\n\r\n        // Check if the previous round has ended and transfer remaining tokens to the dead wallet\r\n        transferRemainingTokensToDeadWallet(previousRound);\r\n\r\n        SaleRound storage roundDetails = rounds[currentRound];\r\n        buyerData storage _buyers =  buyerDetails[msg.sender];\r\n\r\n        uint256 referralAmount = 0;\r\n        uint256 saleAmount = usdtAmount;\r\n        // uint256 _saleAmount = usdtAmount;\r\n\r\n        // Check if the referral is valid\r\n        if (referral != address(0) && isReferral[referral]) {\r\n            referralAmount = (usdtAmount * referralPercentage) / 100;\r\n            saleAmount = usdtAmount - referralAmount;\r\n        }\r\n\r\n        uint256 tokenAmount = (usdtAmount / roundDetails.price) * (1e18);\r\n        require(\r\n            tokenAmount <= roundDetails.tokens,\r\n            \"Not enough tokens left in this round\"\r\n        );\r\n\r\n        // Reduce the tokens left in the current round\r\n        rounds[currentRound].tokens -= tokenAmount;\r\n\r\n        // Transfer USDT from user to this contract\r\n        IERC20(usdtToken).transferFrom(msg.sender, address(this), usdtAmount);\r\n\r\n        saleID++; \r\n\r\n        // Transfer to saleReceiver\r\n        IERC20(usdtToken).transfer(saleReceiver, saleAmount);\r\n\r\n        // Transfer to referral if applicable\r\n        if (referralAmount > 0) {\r\n            IERC20(usdtToken).transfer(referral, referralAmount);\r\n        }\r\n\r\n        uint256 _roundPercentage = ((tokenAmount * (1e5)) /\r\n            roundTokens[currentRound]) * 100; // 5 decimals for the percentage\r\n\r\n        // Update buyerData\r\n        _buyers.buyerAmount += tokenAmount;\r\n        _buyers.roundPercentage[\r\n            currentRound\r\n        ] += _roundPercentage;\r\n        _buyers.totalBuyPercentage += _roundPercentage;\r\n        _buyers.totalPaid += usdtAmount;\r\n        \r\n\r\n        uint256 lockPercentage = 100 - roundDetails.releasePercentage;\r\n        uint256 releaseAmount = (tokenAmount * roundDetails.releasePercentage) /\r\n            100;\r\n        uint256 lockAmount = (tokenAmount * lockPercentage) / 100;\r\n\r\n        // transfer to buyer\r\n        this.transfer(msg.sender, releaseAmount);\r\n\r\n        // transfer to vesting\r\n        this.transfer(address(vestingContract), lockAmount);\r\n\r\n        _buyers.receivedAmount += releaseAmount;\r\n        _buyers.lockedAmount += lockAmount;\r\n        \r\n        vestingContract.setVestingSchedule(\r\n            saleID,\r\n            msg.sender,\r\n            lockAmount,\r\n            block.timestamp,\r\n            roundDetails.lockPeriod,\r\n            lockPercentage,\r\n            30 days\r\n        );\r\n\r\n        if (!isBuyer[msg.sender]) {\r\n            buyerDetails[msg.sender].buyerID = buyerId++;\r\n            isBuyer[msg.sender] = true;\r\n            buyers.push(msg.sender);\r\n        }\r\n\r\n        emit buyTokens(\r\n            getCurrentRound(),\r\n            msg.sender,\r\n            tokenAmount,\r\n            saleAmount,\r\n            roundDetails.price\r\n        );\r\n    }\r\n\r\n    function getCurrentRound() public view returns (string memory) {\r\n        if (block.timestamp <= rounds[\"Private Sale Round 1\"].duration) {\r\n            return \"Private Sale Round 1\";\r\n        } else if (block.timestamp <= rounds[\"Private Sale Round 2\"].duration) {\r\n            return \"Private Sale Round 2\";\r\n        } else if (block.timestamp <= rounds[\"Public Sale Round 1\"].duration) {\r\n            return \"Public Sale Round 1\";\r\n        } else if (block.timestamp <= rounds[\"Public Sale Round 2\"].duration) {\r\n            return \"Public Sale Round 2\";\r\n        } else if (block.timestamp <= rounds[\"Public Sale Round 3\"].duration) {\r\n            return \"Public Sale Round 3\";\r\n        } else {\r\n            return \"All Sales Rounds Completed\";\r\n        }\r\n    }\r\n\r\n    function getCurrentAndPreviousRound()\r\n        public\r\n        view\r\n        returns (string memory, string memory)\r\n    {\r\n        string memory currentRound;\r\n        string memory previousRound;\r\n\r\n        if (block.timestamp <= rounds[\"Private Sale Round 1\"].duration) {\r\n            currentRound = \"Private Sale Round 1\";\r\n            previousRound = \"\";\r\n        } else if (block.timestamp <= rounds[\"Private Sale Round 2\"].duration) {\r\n            currentRound = \"Private Sale Round 2\";\r\n            previousRound = \"Private Sale Round 1\";\r\n        } else if (block.timestamp <= rounds[\"Public Sale Round 1\"].duration) {\r\n            currentRound = \"Public Sale Round 1\";\r\n            previousRound = \"Private Sale Round 2\";\r\n        } else if (block.timestamp <= rounds[\"Public Sale Round 2\"].duration) {\r\n            currentRound = \"Public Sale Round 2\";\r\n            previousRound = \"Public Sale Round 1\";\r\n        } else if (block.timestamp <= rounds[\"Public Sale Round 3\"].duration) {\r\n            currentRound = \"Public Sale Round 3\";\r\n            previousRound = \"Public Sale Round 2\";\r\n        } else {\r\n            currentRound = \"All Sales Rounds Completed\";\r\n            previousRound = \"Public Sale Round 3\";\r\n        }\r\n\r\n        return (currentRound, previousRound);\r\n    }\r\n\r\n    function transferRemainingTokensToDeadWallet(string memory roundName)\r\n        internal\r\n    {\r\n        uint256 remainingTokens = rounds[roundName].tokens;\r\n        if (\r\n            remainingTokens > 0 && block.timestamp > rounds[roundName].duration\r\n        ) {\r\n            _transfer(address(this), deadWallet, remainingTokens);\r\n            rounds[roundName].tokens = 0;\r\n        }\r\n    }\r\n\r\n    function getTokensLeftInCurrentRound() public view returns (uint256) {\r\n        string memory currentRound = getCurrentRound();\r\n        return rounds[currentRound].tokens;\r\n    }\r\n\r\n    function getCurrentRoundPrice() public view returns (uint256) {\r\n        string memory currentRound = getCurrentRound();\r\n        return rounds[currentRound].price;\r\n    }\r\n\r\n    function distributeAirdrop(string memory roundName, string memory fromRound)\r\n        external\r\n        onlyOwner\r\n    {\r\n        uint256 totalAirdropTokens = rounds[roundName].tokens;\r\n\r\n        for (uint256 i = 0; i < buyers.length; i++) {\r\n            address buyer = buyers[i];\r\n            uint256 airdropAmount = (buyerDetails[buyer].roundPercentage[\r\n                fromRound\r\n            ] / 100) * totalAirdropTokens;\r\n            _transfer(address(this), buyer, (airdropAmount / (1e2)));\r\n            buyerDetails[buyer].airdropReceived += airdropAmount;\r\n            rounds[roundName].tokens -= airdropAmount;\r\n        }\r\n    }\r\n\r\n    function setSaleReceiver(address _newReceiver) external onlyOwner {\r\n        require(_newReceiver != address(0), \"Invalid Address\");\r\n        saleReceiver = _newReceiver;\r\n    }\r\n\r\n    function setUsdtTokenAddress(address _usdtToken) external onlyOwner {\r\n        require(_usdtToken != address(0), \"Invalid Address\");\r\n        usdtToken = IERC20(_usdtToken);\r\n    }\r\n\r\n    function updateRoundDetails(\r\n        string memory roundName,\r\n        SaleRound memory newDetails\r\n    ) external onlyOwner {\r\n        rounds[roundName] = newDetails;\r\n    }\r\n\r\n    function getBuyerData(address _buyer)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 buyerID,\r\n            uint256 buyerAmount,\r\n            uint256 totalBuyPercentage,\r\n            uint256 _airdropReceived,\r\n            uint256 totalPaid,\r\n            string[5] memory roundNames,\r\n            uint256[5] memory roundPercentages\r\n        )\r\n    {\r\n        buyerData storage data = buyerDetails[_buyer];\r\n        string[5] memory _roundNames = [\r\n            \"Private Sale Round 1\",\r\n            \"Private Sale Round 2\",\r\n            \"Public Sale Round 1\",\r\n            \"Public Sale Round 2\",\r\n            \"Public Sale Round 3\"\r\n        ];\r\n        uint256[5] memory _roundPercentages;\r\n\r\n        for (uint256 i = 0; i < 5; i++) {\r\n            if (bytes(_roundNames[i]).length > 0) {\r\n                _roundPercentages[i] = data.roundPercentage[_roundNames[i]];\r\n            }\r\n        }\r\n\r\n        return (\r\n            data.buyerID,\r\n            data.buyerAmount,\r\n            data.totalBuyPercentage,\r\n            data.airdropReceived,\r\n            data.totalPaid,\r\n            _roundNames,\r\n            _roundPercentages\r\n        );\r\n    }\r\n\r\n    function _getBuyerData(address _buyer)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 buyerID,\r\n            uint256 buyerAmount,\r\n            uint256 totalBuyPercentage,\r\n            uint256 _airdropReceived,\r\n            uint256 totalPaid\r\n        )\r\n    {\r\n        buyerData storage data = buyerDetails[_buyer];\r\n        return (\r\n            data.buyerID,\r\n            data.buyerAmount,\r\n            data.totalBuyPercentage,\r\n            data.airdropReceived,\r\n            data.totalPaid\r\n        );\r\n    }\r\n\r\n    function removeTrashTokens(address _tokenAddress) external onlyOwner {\r\n        require(_tokenAddress != address(this), \"Cannot remove contract's own tokens\");\r\n\r\n        IERC20 token = IERC20(_tokenAddress);\r\n        uint256 balance = token.balanceOf(address(this));\r\n        \r\n        require(balance > 0, \"No trash tokens to remove\");\r\n\r\n        // Transfer the tokens to the dead wallet\r\n        token.transfer(deadWallet, balance);\r\n    }\r\n\r\n    function withdrawTokenFromContract(address _tokenAddress) external onlyOwner {\r\n\r\n        IERC20 token = IERC20(_tokenAddress);\r\n        uint256 balance = token.balanceOf(address(this));\r\n        \r\n        require(balance > 0, \"No trash tokens to remove\");\r\n\r\n        // Transfer the tokens to the owner wallet\r\n        token.transfer(msg.sender, balance);\r\n    }\r\n\r\n}\r\n\r\n                /*************************************************************\\\r\n                        Proudly Developed by Jaafar Krayem Copyright 2023\r\n                \\*************************************************************/", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"round\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paidToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"renounceOwnerShip\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"_getBuyerData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBuyPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_airdropReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPaid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"addReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"airdropReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyerDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBuyPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"airdropReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"roundName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fromRound\",\"type\":\"string\"}],\"name\":\"distributeAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"getBuyerData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBuyPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_airdropReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPaid\",\"type\":\"uint256\"},{\"internalType\":\"string[5]\",\"name\":\"roundNames\",\"type\":\"string[5]\"},{\"internalType\":\"uint256[5]\",\"name\":\"roundPercentages\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentAndPreviousRound\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRound\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRoundPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_roundName\",\"type\":\"string\"}],\"name\":\"getRoundDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasePercentage\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"releaseSchedule\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokensLeftInCurrentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBuyer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReferral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"removeTrashTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_confirm\",\"type\":\"bool\"}],\"name\":\"renounceOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"roundTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasePercentage\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"releaseSchedule\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setMinMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPercentage\",\"type\":\"uint256\"}],\"name\":\"setReferralPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newReceiver\",\"type\":\"address\"}],\"name\":\"setSaleReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdtToken\",\"type\":\"address\"}],\"name\":\"setUsdtTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newVesting\",\"type\":\"address\"}],\"name\":\"setVestingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSaleRounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"roundName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasePercentage\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"releaseSchedule\",\"type\":\"string\"}],\"internalType\":\"struct VaccineToken.SaleRound\",\"name\":\"newDetails\",\"type\":\"tuple\"}],\"name\":\"updateRoundDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingContract\",\"outputs\":[{\"internalType\":\"contract IVestingContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawTokenFromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VaccineToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f15fb17ea2d767714cfb0a11faa14465b6d8267ab9009cf6f31e11538a1adf3b"}