{"SourceCode": "// SPDX-License-Identifier: NONE\r\n\r\n// Eleven.finance bigfoot platform\r\n// Telegram: @ElevenFinance\r\n\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n\r\n// Part: BankConfig\r\n\r\ninterface BankConfig {\r\n  /// @dev Return minimum BNB debt size per position.\r\n  function minDebtSize() external view returns (uint);\r\n\r\n  /// @dev Return the interest rate per second, using 1e18 as denom.\r\n  function getInterestRate(uint debt, uint floating) external view returns (uint);\r\n\r\n  /// @dev Return the bps rate for reserve pool.\r\n  function getReservePoolBps() external view returns (uint);\r\n\r\n  /// @dev Return the bps rate for Avada Kill caster.\r\n  function getKillBps() external view returns (uint);\r\n\r\n  /// @dev Return whether the given address is a bigfoot.\r\n  function isBigfoot(address bigfoot) external view returns (bool);\r\n\r\n  /// @dev Return whether the given bigfoot accepts more debt. Revert on non-bigfoot.\r\n  function acceptDebt(address bigfoot) external view returns (bool);\r\n\r\n  /// @dev Return the work factor for the bigfoot + BNB debt, using 1e4 as denom. Revert on non-bigfoot.\r\n  function workFactor(address bigfoot, uint debt) external view returns (uint);\r\n\r\n  /// @dev Return the kill factor for the bigfoot + BNB debt, using 1e4 as denom. Revert on non-bigfoot.\r\n  function killFactor(address bigfoot, uint debt) external view returns (uint);\r\n}\r\n\r\n// Part: ERC20Interface\r\n\r\ninterface ERC20Interface {\r\n  function balanceOf(address user) external view returns (uint);\r\n}\r\n\r\n// Part: Bigfoot\r\n\r\ninterface Bigfoot {\r\n  /// @dev Work on a (potentially new) position. Optionally send BNB back to Bank.\r\n  function work(\r\n    uint id,\r\n    address user,\r\n    uint debt,\r\n    bytes calldata data\r\n  ) external payable;\r\n\r\n  /// @dev Return the amount of BNB wei to get back if we are to liquidate the position.\r\n  function health(uint id) external view returns (uint);\r\n\r\n  /// @dev Liquidate the given position to BNB. Send all BNB back to Bank.\r\n  function liquidate(uint id) external;\r\n}\r\n\r\n// Part: Initializable\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\ncontract Initializable {\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private _initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private _initializing;\r\n\r\n  /**\r\n   * @dev Modifier to protect an initializer function from being invoked twice.\r\n   */\r\n  modifier initializer() {\r\n    require(\r\n      _initializing || _isConstructor() || !_initialized,\r\n      'Initializable: contract is already initialized'\r\n    );\r\n\r\n    bool isTopLevelCall = !_initializing;\r\n    if (isTopLevelCall) {\r\n      _initializing = true;\r\n      _initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      _initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function _isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint cs;\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      cs := extcodesize(self)\r\n    }\r\n    return cs == 0;\r\n  }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@2.3.0/IERC20\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@2.3.0/Math\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@2.3.0/SafeMath\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// Part: Governable\r\n\r\ncontract Governable is Initializable {\r\n  address public governor; // The current governor.\r\n  address public pendingGovernor; // The address pending to become the governor once accepted.\r\n\r\n  modifier onlyGov() {\r\n    require(msg.sender == governor, 'not the governor');\r\n    _;\r\n  }\r\n\r\n  /// @dev Initialize the bank smart contract, using msg.sender as the first governor.\r\n  function __Governable__init() internal initializer {\r\n    governor = msg.sender;\r\n    pendingGovernor = address(0);\r\n  }\r\n\r\n  /// @dev Set the pending governor, which will be the governor once accepted.\r\n  /// @param _pendingGovernor The address to become the pending governor.\r\n  function setPendingGovernor(address _pendingGovernor) external onlyGov {\r\n    pendingGovernor = _pendingGovernor;\r\n  }\r\n\r\n  /// @dev Accept to become the new governor. Must be called by the pending governor.\r\n  function acceptGovernor() external {\r\n    require(msg.sender == pendingGovernor, 'not the pending governor');\r\n    pendingGovernor = address(0);\r\n    governor = msg.sender;\r\n  }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@2.3.0/ERC20\r\n\r\n/**\r\n * @dev Implementation of the `IERC20` interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n * For a generic mechanism see `ERC20Mintable`.\r\n *\r\n * *For a detailed writeup see our guide [How to implement supply\r\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See `IERC20.approve`.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See `IERC20.totalSupply`.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.balanceOf`.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transfer`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.allowance`.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.approve`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transferFrom`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of `ERC20`;\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `value`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to `transfer`, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a `Transfer` event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destoys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a `Transfer` event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an `Approval` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See `_burn` and `_approve`.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n}\r\n\r\n// Part: ReentrancyGuardUpgradeSafe\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n */\r\ncontract ReentrancyGuardUpgradeSafe is Initializable {\r\n  // counter to allow mutex lock with only one SSTORE operation\r\n  uint private _guardCounter;\r\n\r\n  function __ReentrancyGuardUpgradeSafe__init() internal initializer {\r\n    // The counter starts at one to prevent changing it from zero to a non-zero\r\n    // value, which is a more expensive operation.\r\n    _guardCounter = 1;\r\n  }\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * Calling a `nonReentrant` function from another `nonReentrant`\r\n   * function is not supported. It is possible to prevent this from happening\r\n   * by making the `nonReentrant` function external, and make it call a\r\n   * `private` function that does the actual work.\r\n   */\r\n  modifier nonReentrant() {\r\n    _guardCounter += 1;\r\n    uint localCounter = _guardCounter;\r\n    _;\r\n    require(localCounter == _guardCounter, 'ReentrancyGuard: reentrant call');\r\n  }\r\n\r\n  uint[50] private ______gap;\r\n}\r\n\r\n// Part: SafeToken\r\n\r\nlibrary SafeToken {\r\n  function myBalance(address token) internal view returns (uint) {\r\n    return ERC20Interface(token).balanceOf(address(this));\r\n  }\r\n\r\n  function balanceOf(address token, address user) internal view returns (uint) {\r\n    return ERC20Interface(token).balanceOf(user);\r\n  }\r\n\r\n  function safeApprove(\r\n    address token,\r\n    address to,\r\n    uint value\r\n  ) internal {\r\n    // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n    require(success && (data.length == 0 || abi.decode(data, (bool))), '!safeApprove');\r\n  }\r\n\r\n  function safeTransfer(\r\n    address token,\r\n    address to,\r\n    uint value\r\n  ) internal {\r\n    // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n    require(success && (data.length == 0 || abi.decode(data, (bool))), '!safeTransfer');\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    address token,\r\n    address from,\r\n    address to,\r\n    uint value\r\n  ) internal {\r\n    // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n    (bool success, bytes memory data) =\r\n      token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n    require(success && (data.length == 0 || abi.decode(data, (bool))), '!safeTransferFrom');\r\n  }\r\n\r\n  function safeTransferBNB(address to, uint value) internal {\r\n    (bool success, ) = to.call.value(value)(new bytes(0));\r\n    require(success, '!safeTransferBNB');\r\n  }\r\n}\r\n\r\n// File: Bank.sol\r\n\r\ncontract Bank is Initializable, ERC20, ReentrancyGuardUpgradeSafe, Governable {\r\n  /// @notice Libraries\r\n  using SafeToken for address;\r\n  using SafeMath for uint;\r\n\r\n  /// @notice Events\r\n  event AddDebt(uint indexed id, uint debtShare);\r\n  event RemoveDebt(uint indexed id, uint debtShare);\r\n  event Work(uint indexed id, uint loan);\r\n  event Kill(uint indexed id, address indexed killer, uint prize, uint left);\r\n\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n\r\n  struct Position {\r\n    address bigfoot;\r\n    address owner;\r\n    uint debtShare;\r\n  }\r\n\r\n  BankConfig public config;\r\n  mapping(uint => Position) public positions;\r\n  uint public nextPositionID;\r\n\r\n  uint public glbDebtShare;\r\n  uint public glbDebtVal;\r\n  uint public lastAccrueTime;\r\n  uint public reservePool;\r\n\r\n  /// @dev Require that the caller must be an EOA account to avoid flash loans.\r\n  modifier onlyEOA() {\r\n    require(msg.sender == tx.origin, 'not eoa');\r\n    _;\r\n  }\r\n\r\n  /// @dev Add more debt to the global debt pool.\r\n  modifier accrue(uint msgValue) {\r\n    if (now > lastAccrueTime) {\r\n      uint interest = pendingInterest(msgValue);\r\n      uint toReserve = interest.mul(config.getReservePoolBps()).div(10000);\r\n      reservePool = reservePool.add(toReserve);\r\n      glbDebtVal = glbDebtVal.add(interest);\r\n      lastAccrueTime = now;\r\n    }\r\n    _;\r\n  }\r\n\r\n  function initialize(BankConfig _config) external initializer {\r\n    __Governable__init();\r\n    __ReentrancyGuardUpgradeSafe__init();\r\n    config = _config;\r\n    lastAccrueTime = now;\r\n    nextPositionID = 1;\r\n    name = 'Big Foot BNB';\r\n    symbol = 'bfBNB';\r\n    decimals = 18;\r\n  }\r\n\r\n  /// @dev Return the pending interest that will be accrued in the next call.\r\n  /// @param msgValue Balance value to subtract off address(this).balance when called from payable functions.\r\n  function pendingInterest(uint msgValue) public view returns (uint) {\r\n    if (now > lastAccrueTime) {\r\n      uint timePast = now.sub(lastAccrueTime);\r\n      uint balance = address(this).balance.sub(msgValue);\r\n      uint ratePerSec = config.getInterestRate(glbDebtVal, balance);\r\n      return ratePerSec.mul(glbDebtVal).mul(timePast).div(1e18);\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /// @dev Return the BNB debt value given the debt share. Be careful of unaccrued interests.\r\n  /// @param debtShare The debt share to be converted.\r\n  function debtShareToVal(uint debtShare) public view returns (uint) {\r\n    if (glbDebtShare == 0) return debtShare; // When there's no share, 1 share = 1 val.\r\n    return debtShare.mul(glbDebtVal).div(glbDebtShare);\r\n  }\r\n\r\n  /// @dev Return the debt share for the given debt value. Be careful of unaccrued interests.\r\n  /// @param debtVal The debt value to be converted.\r\n  function debtValToShare(uint debtVal) public view returns (uint) {\r\n    if (glbDebtShare == 0) return debtVal; // When there's no share, 1 share = 1 val.\r\n    return debtVal.mul(glbDebtShare).div(glbDebtVal).add(1);\r\n  }\r\n\r\n  /// @dev Return BNB value and debt of the given position. Be careful of unaccrued interests.\r\n  /// @param id The position ID to query.\r\n  function positionInfo(uint id) public view returns (uint, uint) {\r\n    Position storage pos = positions[id];\r\n    return (Bigfoot(pos.bigfoot).health(id), debtShareToVal(pos.debtShare));\r\n  }\r\n\r\n  /// @dev Return the total BNB entitled to the token holders. Be careful of unaccrued interests.\r\n  function totalBNB() public view returns (uint) {\r\n    return address(this).balance.add(glbDebtVal).sub(reservePool);\r\n  }\r\n\r\n  /// @dev Add more BNB to the bank. Hope to get some good returns.\r\n  function deposit() external payable accrue(msg.value) nonReentrant {\r\n    uint total = totalBNB().sub(msg.value);\r\n    uint share = total == 0 ? msg.value : msg.value.mul(totalSupply()).div(total);\r\n    _mint(msg.sender, share);\r\n    require(totalSupply() >= 1e17, 'deposit: total supply too low');\r\n  }\r\n\r\n  /// @dev Withdraw BNB from the bank by burning the share tokens.\r\n  function withdraw(uint share) external accrue(0) nonReentrant {\r\n    uint amount = share.mul(totalBNB()).div(totalSupply());\r\n    _burn(msg.sender, share);\r\n    SafeToken.safeTransferBNB(msg.sender, amount);\r\n    uint supply = totalSupply();\r\n    require(supply == 0 || supply >= 1e17, 'withdraw: total supply too low');\r\n  }\r\n\r\n  /// @dev Create a new farming position to unlock your yield farming potential.\r\n  /// @param id The ID of the position to unlock the earning. Use ZERO for new position.\r\n  /// @param bigfoot The address of the authorized bigfoot to work for this position.\r\n  /// @param loan The amount of BNB to borrow from the pool.\r\n  /// @param maxReturn The max amount of BNB to return to the pool.\r\n  /// @param data The calldata to pass along to the bigfoot for more working context.\r\n  function work(\r\n    uint id,\r\n    address bigfoot,\r\n    uint loan,\r\n    uint maxReturn,\r\n    bytes calldata data\r\n  ) external payable onlyEOA accrue(msg.value) nonReentrant {\r\n    // 1. Sanity check the input position, or add a new position of ID is 0.\r\n    if (id == 0) {\r\n      id = nextPositionID++;\r\n      positions[id].bigfoot = bigfoot;\r\n      positions[id].owner = msg.sender;\r\n    } else {\r\n      require(id < nextPositionID, 'bad position id');\r\n      require(positions[id].bigfoot == bigfoot, 'bad position bigfoot');\r\n      require(positions[id].owner == msg.sender, 'not position owner');\r\n    }\r\n    emit Work(id, loan);\r\n    // 2. Make sure the bigfoot can accept more debt and remove the existing debt.\r\n    require(config.isBigfoot(bigfoot), 'not a bigfoot');\r\n    require(loan == 0 || config.acceptDebt(bigfoot), 'bigfoot not accept more debt');\r\n    uint debt = _removeDebt(id).add(loan);\r\n    // 3. Perform the actual work, using a new scope to avoid stack-too-deep errors.\r\n    uint back;\r\n    {\r\n      uint sendBNB = msg.value.add(loan);\r\n      require(sendBNB <= address(this).balance, 'insufficient BNB in the bank');\r\n      uint beforeBNB = address(this).balance.sub(sendBNB);\r\n      Bigfoot(bigfoot).work.value(sendBNB)(id, msg.sender, debt, data);\r\n      back = address(this).balance.sub(beforeBNB);\r\n    }\r\n    // 4. Check and update position debt.\r\n    uint lessDebt = Math.min(debt, Math.min(back, maxReturn));\r\n    debt = debt.sub(lessDebt);\r\n    if (debt > 0) {\r\n      require(debt >= config.minDebtSize(), 'too small debt size');\r\n      uint health = Bigfoot(bigfoot).health(id);\r\n      uint workFactor = config.workFactor(bigfoot, debt);\r\n      require(health.mul(workFactor) >= debt.mul(10000), 'bad work factor');\r\n      _addDebt(id, debt);\r\n    }\r\n    // 5. Return excess BNB back.\r\n    if (back > lessDebt) SafeToken.safeTransferBNB(msg.sender, back - lessDebt);\r\n\r\n    // 6. Check total debt share/value not too small\r\n    require(glbDebtShare >= 1e12, 'remaining global debt share too small');\r\n    require(glbDebtVal >= 1e12, 'remaining global debt value too small');\r\n  }\r\n\r\n  /// @dev Kill the given to the position. Liquidate it immediately if killFactor condition is met.\r\n  /// @param id The position ID to be killed.\r\n  function kill(uint id) external onlyEOA accrue(0) nonReentrant {\r\n    // 1. Verify that the position is eligible for liquidation.\r\n    Position storage pos = positions[id];\r\n    require(pos.debtShare > 0, 'no debt');\r\n    uint debt = _removeDebt(id);\r\n    uint health = Bigfoot(pos.bigfoot).health(id);\r\n    uint killFactor = config.killFactor(pos.bigfoot, debt);\r\n    require(health.mul(killFactor) < debt.mul(10000), \"can't liquidate\");\r\n    // 2. Perform liquidation and compute the amount of BNB received.\r\n    uint beforeBNB = address(this).balance;\r\n    Bigfoot(pos.bigfoot).liquidate(id);\r\n    uint back = address(this).balance.sub(beforeBNB);\r\n    uint prize = back.mul(config.getKillBps()).div(10000);\r\n    uint rest = back.sub(prize);\r\n    // 3. Clear position debt and return funds to liquidator and position owner.\r\n    if (prize > 0) SafeToken.safeTransferBNB(msg.sender, prize);\r\n    uint left = rest > debt ? rest - debt : 0;\r\n    if (left > 0) SafeToken.safeTransferBNB(pos.owner, left);\r\n    emit Kill(id, msg.sender, prize, left);\r\n  }\r\n\r\n  /// @dev Internal function to add the given debt value to the given position.\r\n  function _addDebt(uint id, uint debtVal) internal {\r\n    Position storage pos = positions[id];\r\n    uint debtShare = debtValToShare(debtVal);\r\n    pos.debtShare = pos.debtShare.add(debtShare);\r\n    glbDebtShare = glbDebtShare.add(debtShare);\r\n    glbDebtVal = glbDebtVal.add(debtVal);\r\n    emit AddDebt(id, debtShare);\r\n  }\r\n\r\n  /// @dev Internal function to clear the debt of the given position. Return the debt value.\r\n  function _removeDebt(uint id) internal returns (uint) {\r\n    Position storage pos = positions[id];\r\n    uint debtShare = pos.debtShare;\r\n    if (debtShare > 0) {\r\n      uint debtVal = debtShareToVal(debtShare);\r\n      pos.debtShare = 0;\r\n      glbDebtShare = glbDebtShare.sub(debtShare);\r\n      glbDebtVal = glbDebtVal.sub(debtVal);\r\n      emit RemoveDebt(id, debtShare);\r\n      return debtVal;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /// @dev Update bank configuration to a new address. Must only be called by owner.\r\n  /// @param _config The new configurator address.\r\n  function updateConfig(BankConfig _config) external onlyGov {\r\n    config = _config;\r\n  }\r\n\r\n  /// @dev Withdraw BNB reserve for underwater positions to the given address.\r\n  /// @param to The address to transfer BNB to.\r\n  /// @param value The number of BNB tokens to withdraw. Must not exceed `reservePool`.\r\n  function withdrawReserve(address to, uint value) external onlyGov nonReentrant {\r\n    reservePool = reservePool.sub(value);\r\n    SafeToken.safeTransferBNB(to, value);\r\n  }\r\n\r\n  /// @dev Reduce BNB reserve, effectively giving them to the depositors.\r\n  /// @param value The number of BNB reserve to reduce.\r\n  function reduceReserve(uint value) external onlyGov {\r\n    reservePool = reservePool.sub(value);\r\n  }\r\n\r\n  /// @dev Recover ERC20 tokens that were accidentally sent to this smart contract.\r\n  /// @param token The token contract. Can be anything. This contract should not hold ERC20 tokens.\r\n  /// @param to The address to send the tokens to.\r\n  /// @param value The number of tokens to transfer to `to`.\r\n  function recover(\r\n    address token,\r\n    address to,\r\n    uint value\r\n  ) external onlyGov nonReentrant {\r\n    token.safeTransfer(to, value);\r\n  }\r\n\r\n  /// @dev Fallback function to accept BNB. Bigfoots will send BNB back the pool.\r\n  function() external payable {}\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtShare\",\"type\":\"uint256\"}],\"name\":\"AddDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"killer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"}],\"name\":\"Kill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtShare\",\"type\":\"uint256\"}],\"name\":\"RemoveDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loan\",\"type\":\"uint256\"}],\"name\":\"Work\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptGovernor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"contract BankConfig\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debtShare\",\"type\":\"uint256\"}],\"name\":\"debtShareToVal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debtVal\",\"type\":\"uint256\"}],\"name\":\"debtValToShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"glbDebtShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"glbDebtVal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract BankConfig\",\"name\":\"_config\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastAccrueTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextPositionID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"pendingInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"positionInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bigfoot\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtShare\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"recover\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"reduceReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingGovernor\",\"type\":\"address\"}],\"name\":\"setPendingGovernor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract BankConfig\",\"name\":\"_config\",\"type\":\"address\"}],\"name\":\"updateConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bigfoot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxReturn\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"work\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "Bank", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://448cf1b94219e7cf1a2e5233cf996684205d0bb0d3abb2e424b3bb13b3c8d23f"}