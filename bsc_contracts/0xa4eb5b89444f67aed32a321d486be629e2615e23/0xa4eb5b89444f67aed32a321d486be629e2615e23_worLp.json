{"SourceCode": "pragma solidity >=0.6.0 <0.9.0;\r\n//\u6ce8\u610f\u6b64\u5904\r\npragma experimental ABIEncoderV2;  \r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function burn(uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    \r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\ninterface IPancakeRouter {\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n}\r\n\r\ninterface IPancakePair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function totalSupply() external view returns (uint);\r\n}\r\n\r\n\r\n\r\ncontract worLp {\r\n       bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n       address private admin;//\u7ba1\u7406\u5458 \r\n       using SafeMath for uint;\r\n       uint  zLp = 0;\r\n       mapping(address => userLp[]) userLpList; // \u8d28\u62bc\u8bb0\u5f55\r\n       uint private dayLp = 90;\r\n       struct userLp {\r\n            uint   date;\r\n            uint   value;\r\n            uint   state;\r\n       }\r\n       address public USDT = address(0x55d398326f99059fF775485246999027B3197955);\r\n       address public WOR = address(0xd6edbB510af7901b2C049ce778b65a740c4aeB7f);\r\n       address public USDT_WOR_PAIR_ADDRESS = address(0xF366696df61171B9832d4746309D38e20c9A09be);\r\n       address public PANCAKE_ROUTER_ADDRESS = address(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n       constructor() public {\r\n            admin = msg.sender;\r\n       }\r\n\r\n       function getZlp() public view returns(uint){\r\n           return zLp;\r\n       }\r\n\r\n       function _safeTransfer(address token, address to, uint value) private {\r\n            (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\r\n            require(success && (data.length == 0 || abi.decode(data, (bool))), 'Pancake: TRANSFER_FAILED');\r\n        }\r\n\r\n       modifier isAdmin(){\r\n        require(msg.sender == admin, 'FORBIDDEN');\r\n        _;\r\n       }\r\n\r\n       function updateDayLp(uint _dayLp) external isAdmin {\r\n            dayLp =_dayLp;\r\n       }\r\n\r\n       function extractLp(uint _value) external isAdmin{\r\n            uint b = IPancakePair(USDT_WOR_PAIR_ADDRESS).balanceOf(address(this));\r\n            require(b >= _value,\"Extraction failure\");\r\n            _safeTransfer(USDT_WOR_PAIR_ADDRESS,msg.sender,_value);\r\n       }\r\n\r\n        function extractWor(uint _value) external isAdmin{\r\n            uint b = IPancakePair(WOR).balanceOf(address(this));\r\n            require(b >= _value,\"Extraction failure\");\r\n             _safeTransfer(WOR,msg.sender,_value);\r\n       }\r\n\r\n\r\n       // \u63d0\u53d6\r\n       function unlock() public {\r\n            userLp[] storage listLp = userLpList[msg.sender];\r\n            uint  z = 0 ;\r\n               for (uint i = 0 ; i < listLp.length ; i++){\r\n                    uint day = block.timestamp.sub(listLp[i].date).div(86400);\r\n                    if(day >= dayLp && listLp[i].state == 0) {\r\n                        z = z +listLp[i].value; \r\n                        listLp[i].value = 1;\r\n                        zLp = zLp.sub(listLp[i].value);\r\n                    } \r\n                }\r\n            require(IPancakePair(USDT_WOR_PAIR_ADDRESS).balanceOf(address(this)) >= z,\"Extraction failure\");\r\n            _safeTransfer(USDT_WOR_PAIR_ADDRESS,msg.sender,z);\r\n       }\r\n\r\n        // lp \u4f59\u989d\r\n        function getLpBalance() public view returns (uint) {\r\n            return IPancakePair(USDT_WOR_PAIR_ADDRESS).balanceOf(msg.sender);\r\n        }\r\n\r\n       //\u8d28\u62bc\r\n       function worLock(uint _value) public  {\r\n            require(IPancakePair(USDT_WOR_PAIR_ADDRESS).balanceOf(msg.sender) >= _value,\"Lp deficiency\");\r\n            (, uint reserve1,) =  IPancakePair(USDT_WOR_PAIR_ADDRESS).getReserves();\r\n            (uint totalSupply) =  IPancakePair(USDT_WOR_PAIR_ADDRESS).totalSupply();\r\n            IBEP20(USDT_WOR_PAIR_ADDRESS).transferFrom(msg.sender, address(this), _value);\r\n            (uint j) =  _value.mul(reserve1).div(totalSupply).mul(12).div(100);\r\n            require(IBEP20(WOR).balanceOf(address(this)) >= j,\"underreward\");\r\n            userLp[] storage add = userLpList[msg.sender];\r\n            userLp memory  u = userLp(block.timestamp,_value,0);\r\n            add.push(u);\r\n            _safeTransfer(WOR,msg.sender,j);\r\n            zLp = zLp.add(_value);\r\n       }\r\n\r\n        // \u83b7\u5f97\u5956\u52b1\u4f59\u989d\r\n       function getWorBalanceOf() public view returns(uint){\r\n            return IBEP20(WOR).balanceOf(address(this));\r\n       }\r\n\r\n        // \u83b7\u5f97\u6dfb\u52a0\u5956\u52b1\r\n       function getAddLpRewardWor(uint _value) public view returns(uint){\r\n            (, uint reserve1,) =  IPancakePair(USDT_WOR_PAIR_ADDRESS).getReserves();\r\n            (uint totalSupply) =  IPancakePair(USDT_WOR_PAIR_ADDRESS).totalSupply();\r\n            (uint j) =  _value.mul(reserve1).div(totalSupply).mul(12).div(100);\r\n            return j;\r\n       }\r\n\r\n\r\n\r\n       //\u83b7\u5f97\u5df2\u8d28\u62bc\r\n       function getWorLpAlready() public view returns(uint){\r\n            userLp[] memory listLp = userLpList[msg.sender];\r\n            uint  z ;\r\n            for (uint i = 0 ; i < listLp.length ; i++){\r\n                  if(listLp[i].state == 0)  z = z +listLp[i].value;\r\n            }\r\n            return z;\r\n       }\r\n\r\n       // \u5df2\u89e3\u9501lp\r\n       function getWorLpUnlock() public view returns(uint) {\r\n            userLp[] memory listLp = userLpList[msg.sender];\r\n            uint  z ;\r\n               for (uint i = 0 ; i < listLp.length ; i++){\r\n                uint day = block.timestamp.sub(listLp[i].date).div(86400);\r\n                if(day >= dayLp && listLp[i].state == 0)  z = z +listLp[i].value;\r\n            }\r\n            return z;\r\n       }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PANCAKE_ROUTER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_WOR_PAIR_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WOR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"extractLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"extractWor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"getAddLpRewardWor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWorBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWorLpAlready\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWorLpUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getZlp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dayLp\",\"type\":\"uint256\"}],\"name\":\"updateDayLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"worLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "worLp", "CompilerVersion": "v0.6.0+commit.26b70077", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7b03c132d66a1c55cdad2c1c56409ea998871b457894391530f8bd865765a170"}