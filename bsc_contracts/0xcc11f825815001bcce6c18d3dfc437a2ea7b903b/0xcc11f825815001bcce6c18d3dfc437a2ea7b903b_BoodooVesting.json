{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\nabstract contract Context {\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function waiveOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function getUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    function getTime() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = block.timestamp + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n\r\n    function unlock() public virtual {\r\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\r\n        require(block.timestamp > _lockTime, \"Contract is locked until 7 days\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    function mint(address to, uint256 amount) external;\r\n\r\n    function burn(uint256 amount) external;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/*\r\n    __/\\\\\\\\\\\\\\\\\\\\\\\\\\________________________________/\\\\\\\\\\\\\\\\\\\\\\\\________________________________\r\n     _\\/\\\\\\/////////\\\\\\_____________________________\\/\\\\\\////////\\\\\\______________________________\r\n      _\\/\\\\\\_______\\/\\\\\\_____________________________\\/\\\\\\______\\//\\\\\\_____________________________\r\n       _\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\______/\\\\\\\\\\________/\\\\\\\\\\____\\/\\\\\\_______\\/\\\\\\_____/\\\\\\\\\\________/\\\\\\\\\\____\r\n        _\\/\\\\\\/////////\\\\\\___/\\\\\\///\\\\\\____/\\\\\\///\\\\\\__\\/\\\\\\_______\\/\\\\\\___/\\\\\\///\\\\\\____/\\\\\\///\\\\\\__\r\n         _\\/\\\\\\_______\\/\\\\\\__/\\\\\\__\\//\\\\\\__/\\\\\\__\\//\\\\\\_\\/\\\\\\_______\\/\\\\\\__/\\\\\\__\\//\\\\\\__/\\\\\\__\\//\\\\\\_\r\n          _\\/\\\\\\_______\\/\\\\\\_\\//\\\\\\__/\\\\\\__\\//\\\\\\__/\\\\\\__\\/\\\\\\_______/\\\\\\__\\//\\\\\\__/\\\\\\__\\//\\\\\\__/\\\\\\__\r\n           _\\/\\\\\\\\\\\\\\\\\\\\\\\\\\/___\\///\\\\\\\\\\/____\\///\\\\\\\\\\/___\\/\\\\\\\\\\\\\\\\\\\\\\\\/____\\///\\\\\\\\\\/____\\///\\\\\\\\\\/___\r\n            _\\/////////////_______\\/////________\\/////_____\\////////////________\\/////________\\/////_____\r\n    _____/\\\\\\\\\\\\\\\\\\\\\\\\________________________________________________________________\r\n     ___/\\\\\\//////////_________________________________________________________________\r\n      __/\\\\\\____________________________________________________________________________\r\n       _\\/\\\\\\____/\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\__/\\\\\\\\\\_______/\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\\\\\\\\\_\r\n        _\\/\\\\\\___\\/////\\\\\\_\\////////\\\\\\____/\\\\\\///\\\\\\\\\\///\\\\\\___/\\\\\\/////\\\\\\_\\/\\\\\\//////__\r\n         _\\/\\\\\\_______\\/\\\\\\___/\\\\\\\\\\\\\\\\\\\\__\\/\\\\\\_\\//\\\\\\__\\/\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\__\\/\\\\\\\\\\\\\\\\\\\\_\r\n          _\\/\\\\\\_______\\/\\\\\\__/\\\\\\/////\\\\\\__\\/\\\\\\__\\/\\\\\\__\\/\\\\\\_\\//\\\\///////___\\////////\\\\\\_\r\n           _\\//\\\\\\\\\\\\\\\\\\\\\\\\/__\\//\\\\\\\\\\\\\\\\/\\\\_\\/\\\\\\__\\/\\\\\\__\\/\\\\\\__\\//\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\_\r\n            __\\////////////_____\\////////\\//__\\///___\\///___\\///____\\//////////__\\//////////__\r\n\r\n    Designed by BooDoo team for https://BooDoo.Games/\r\n*/\r\ncontract BoodooVesting is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    address[]                       private     _registered;\r\n\r\n    IERC20                          private     _token;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    function setToken(address tokenAddress) public onlyOwner {\r\n        _token = IERC20(tokenAddress);\r\n    }\r\n\r\n    function disperse() public onlyOwner {\r\n        uint amount = 30_000 * 10**18;\r\n        for (uint i = 0; i < _registered.length; i++) {\r\n            _token.transfer(_registered[i], amount);\r\n        }\r\n    }\r\n\r\n    function register(address addr) public onlyOwner {\r\n        _registered.push(addr);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"disperse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waiveOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BoodooVesting", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://197c47f03098737ef648cc17a68004c672e6df5251298cc0a7f0ee6b54fb2644"}