{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.0;\r\n\r\n \r\ncontract owned {\r\n    address  public owner;\r\n    address  public newOwner;\r\n\r\n    event OwnershipTransferredEvG(address indexed _from, address indexed _to);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address  _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferredEvG(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\ninterface tokenInterface\r\n {\r\n    function transfer(address _to, uint256 _amount) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool);\r\n    function balanceOf(address _user) external view returns(uint);\r\n }\r\n\r\ncontract newQUANTAM2Gold is owned\r\n{\r\n\r\n    uint public maxDownLimit = 2;\r\n\r\n    uint public lastIDCount;\r\n    uint public defaultRefID = 1;\r\n    address public usdtAddress;\r\n\r\n    uint[11] public levelPrice;\r\n\r\n    struct userInfo {\r\n        bool joined;\r\n        uint id;\r\n        uint origRef;\r\n        uint levelBought;\r\n        address[] referral;\r\n    }\r\n\r\n    struct goldInfo {\r\n        uint currentParent;\r\n        uint position;\r\n        address[] childs;\r\n    }\r\n    mapping (address => userInfo) public userInfos;\r\n    mapping (uint => address ) public userAddressByID;\r\n\r\n    mapping (address => mapping(uint => goldInfo)) public activeGoldInfos;\r\n    mapping (address => mapping(uint => goldInfo[])) public archivedGoldInfos;\r\n\r\n    mapping(address => bool) public regPermitted;\r\n    mapping(address => uint) public levelPermitted;\r\n\r\n    address public mainContract;\r\n\r\n\r\n    event directPaidEvG(uint from,uint to, uint amount, uint level, uint timeNow);\r\n    event payForLevelEvG(uint _userID,uint parentID,uint amount,uint fromDown, uint timeNow);\r\n    event regLevelEvG(uint _userID,uint _referrerID,uint timeNow,address _user,address _referrer);\r\n    event levelBuyEvG(uint amount, uint toID, uint level, uint timeNow);\r\n    event treeEvG(uint _userID, uint _userPosition,uint amount, uint placing,uint timeNow,uint _parent, uint _level );\r\n\r\n    function initialize1() public onlyOwner {\r\n        require(lastIDCount == 0, \"can't call twice\");\r\n        uint power = 10 ** 18; // after test make it '10 ** 18'\r\n\r\n        levelPrice[1] = 5 *  power;\r\n        levelPrice[2] = 10 *  power;\r\n        levelPrice[3] = 20 *  power;\r\n        levelPrice[4] = 40 *  power;\r\n        levelPrice[5]= 80 *  power;\r\n        levelPrice[6]= 160 *  power;\r\n        levelPrice[7]= 320 *  power;\r\n        levelPrice[8]= 640 *  power;\r\n        levelPrice[9]= 1280 *  power;\r\n        levelPrice[10]= 2560 *  power;\r\n\r\n        lastIDCount++;\r\n        userInfo memory UserInfo;\r\n\r\n        UserInfo = userInfo({\r\n                joined: true,\r\n                id: lastIDCount,\r\n                origRef:lastIDCount,            \r\n                levelBought:10,\r\n                referral: new address[](0)\r\n        });\r\n        \r\n        userInfos[owner] = UserInfo;\r\n        userInfos[owner].referral.push(owner);\r\n        userAddressByID[lastIDCount] = owner;\r\n        userAddressByID[0] = owner;\r\n\r\n        goldInfo memory temp;\r\n        temp.currentParent = 1;\r\n        temp.position = 0;\r\n        for(uint i=1;i<=15;i++)\r\n        {\r\n            activeGoldInfos[owner][i] = temp;\r\n        }\r\n\r\n    }\r\n\r\n    receive ()  external payable {\r\n        \r\n    }\r\n\r\n    function setContractAddress(address _mainContract, address _usdtAddress) public onlyOwner returns(bool)\r\n    {\r\n        mainContract = _mainContract;\r\n        usdtAddress = _usdtAddress;\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    function regUser(uint _referrerID, address _user) public returns(bool)\r\n    {\r\n        require(msg.sender == mainContract, \"Invalid Caller\");\r\n        uint prc = levelPrice[1];\r\n\r\n        regUser_(_user, _referrerID, true, prc);\r\n        return true;\r\n    }\r\n\r\n    function regUser_(address msgsender, uint _referrerID, bool pay, uint prc) internal returns(bool)\r\n    {\r\n        require(!userInfos[msgsender].joined, \"already joined\");\r\n        \r\n        (uint user4thParent, ) = getPosition(msgsender, 1); // user4thParent = p here for stack too deep\r\n        //require(user4thParent<30, \"no place under this referrer\");\r\n        if(! (_referrerID > 0 && _referrerID <= lastIDCount) ) _referrerID = 1;\r\n        address origRef = userAddressByID[_referrerID];\r\n        (uint _parentID,bool treeComplete  ) = findFreeParentInDown(_referrerID, 1);\r\n        //require(!treeComplete, \"No free place\");\r\n\r\n        lastIDCount++;\r\n        userInfo memory UserInfo;\r\n        UserInfo = userInfo({\r\n            joined: true,\r\n            id: lastIDCount,\r\n            origRef:_referrerID,            \r\n            levelBought:1,\r\n            referral: new address[](0)\r\n        });\r\n\r\n        userInfos[msgsender] = UserInfo;\r\n        userAddressByID[lastIDCount] = msgsender;\r\n        userInfos[origRef].referral.push(msgsender);\r\n\r\n        userInfos[msgsender].referral.push(userAddressByID[_referrerID]);       \r\n\r\n        goldInfo memory temp;\r\n        temp.currentParent = _parentID;\r\n        temp.position = getChildLength(_parentID,1) + 1;\r\n        activeGoldInfos[msgsender][1] = temp;\r\n        activeGoldInfos[userAddressByID[_parentID]][1].childs.push(msgsender);\r\n\r\n        //direct payout\r\n        //if(pay) payable(origRef).transfer(prc /20);\r\n\r\n        //emit directPaidEvG(userInfos[msgsender].id,userInfos[origRef].id,prc /20, 1,block.timestamp);\r\n        uint userPosition;\r\n        (userPosition, user4thParent) = getPosition(msgsender, 1);\r\n        (,treeComplete) = findFreeParentInDown(user4thParent, 1);\r\n        if(userPosition > 28 && userPosition < 31 ) \r\n        {\r\n            payForLevel(msgsender, 1, true, pay);   // true means recycling pay to all except 50%\r\n        }\r\n        else\r\n        {\r\n            payForLevel(msgsender, 1, false, pay);   // false means no recycling pay to all\r\n        }\r\n        \r\n        if(treeComplete)\r\n        {\r\n            recyclePosition(user4thParent,1, pay );\r\n        }\r\n        splitPart(lastIDCount,_referrerID,msgsender,userPosition,prc,temp.position,temp.currentParent );\r\n \r\n        return true;\r\n    }\r\n\r\n    function splitPart(uint lastIDCount_, uint _referrerID, address msgsender, uint userPosition, uint prc,uint tempPosition, uint tempCurrentParent ) internal returns(bool)\r\n    {\r\n        emit regLevelEvG(lastIDCount_,_referrerID,block.timestamp, msgsender,userAddressByID[_referrerID]);\r\n        emit treeEvG(lastIDCount_,userPosition,prc,tempPosition, block.timestamp,  tempCurrentParent, 1 );\r\n        return true;\r\n    }\r\n\r\n    function getPosition(address _user, uint _level) public view returns(uint recyclePosition_, uint recycleID)\r\n    {\r\n        uint a;\r\n        uint b;\r\n        uint c;\r\n        uint d;\r\n        bool id1Found;\r\n        a = activeGoldInfos[_user][_level].position;\r\n\r\n        uint parent_ = activeGoldInfos[_user][_level].currentParent;\r\n        b = activeGoldInfos[userAddressByID[parent_]][_level].position;\r\n        if(parent_ == 1 ) id1Found = true;\r\n\r\n        if(!id1Found)\r\n        {\r\n            parent_ = activeGoldInfos[userAddressByID[parent_]][_level].currentParent;\r\n            c = activeGoldInfos[userAddressByID[parent_]][_level].position;\r\n            if(parent_ == 1 ) id1Found = true;\r\n        }\r\n\r\n        if(!id1Found)\r\n        {\r\n            parent_ = activeGoldInfos[userAddressByID[parent_]][_level].currentParent;\r\n            d = activeGoldInfos[userAddressByID[parent_]][_level].position;\r\n            if(parent_ == 1 ) id1Found = true;\r\n        }\r\n        \r\n        if(!id1Found) parent_ = activeGoldInfos[userAddressByID[parent_]][_level].currentParent;\r\n        \r\n        if (a == 2 && b == 2 && c == 2 && d == 2 ) return (30, parent_);\r\n        if (a == 1 && b == 2 && c == 2 && d == 2 ) return (29, parent_);\r\n        //if (a == 2 && b == 1 && c == 2 && d == 2 ) return (28, parent_);\r\n        //if (a == 1 && b == 1 && c == 2 && d == 2 ) return (27, parent_);\r\n        else return (1,parent_);\r\n\r\n    }\r\n\r\n    function getCorrectGold(address childss,uint _level,  uint parenT ) public view returns (goldInfo memory tmps)\r\n    {\r\n        if (childss == address(0)) childss = owner;\r\n\r\n        uint len = archivedGoldInfos[childss][_level].length;\r\n        if(activeGoldInfos[childss][_level].currentParent == parenT) return activeGoldInfos[childss][_level];\r\n        if(len > 0 )\r\n        {\r\n            for(uint j=len-1; j>=0; j--)\r\n            {\r\n                tmps = archivedGoldInfos[childss][_level][j];\r\n                if(tmps.currentParent == parenT)\r\n                {\r\n                    break;                    \r\n                }\r\n                if(j==0) \r\n                {\r\n                    tmps = activeGoldInfos[childss][_level];\r\n                    break;\r\n                }\r\n            }\r\n        } \r\n        else\r\n        {\r\n            tmps = activeGoldInfos[childss][_level];\r\n        }       \r\n        return tmps;\r\n    }\r\n\r\n    \r\n    function findFreeParentInDown(uint  refID_ , uint _level) public view returns(uint parentID, bool noFreeReferrer)\r\n    {\r\n        address _user = userAddressByID[refID_];\r\n        if(activeGoldInfos[_user][_level].childs.length < maxDownLimit) return (refID_, false);\r\n\r\n        address[14] memory childss;\r\n        uint[14] memory parenT;\r\n\r\n        childss[0] = activeGoldInfos[_user][_level].childs[0];\r\n        parenT[0] = refID_;\r\n        childss[1] = activeGoldInfos[_user][_level].childs[1];\r\n        parenT[1] = refID_;\r\n\r\n        address freeReferrer;\r\n        noFreeReferrer = true;\r\n\r\n        goldInfo memory temp;\r\n\r\n        for(uint i = 0; i < 14; i++)\r\n        {\r\n            temp = getCorrectGold(childss[i],_level, parenT[i] );\r\n\r\n            if(temp.childs.length == maxDownLimit) {\r\n                if(i < 6) {\r\n                    childss[(i+1)*2] = temp.childs[0];\r\n                    parenT[(i+1)*2] = userInfos[childss[i]].id;\r\n                    childss[((i+1)*2)+1] = temp.childs[1];\r\n                    parenT[((i+1)*2)+1] = parenT[(i+1)*2];\r\n                }\r\n            }\r\n            else {\r\n                noFreeReferrer = false;\r\n                freeReferrer = childss[i];\r\n                break;\r\n            } \r\n        } \r\n        if(noFreeReferrer) return (1, noFreeReferrer);      \r\n        return (userInfos[freeReferrer].id, noFreeReferrer);\r\n    }\r\n\r\n    function buyLevel(uint _level, address _user) public returns(bool)\r\n    {\r\n        //require(msg.sender == mainContract, \"Invalid Caller\");\r\n        uint prc = levelPrice[_level];\r\n        buyLevel_(_user,_level, true, prc);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function buyLevel_(address msgsender, uint _level, bool pay, uint prc) internal returns(bool)\r\n    {\r\n        require(userInfos[msgsender].joined, \"already joined\");\r\n        (uint user4thParent, ) = getPosition(msgsender, 1); // user4thParent = p\r\n        //require(user4thParent<30, \"not place under this referrer\");        \r\n        \r\n        require(userInfos[msgsender].levelBought + 1 == _level, \"please buy previous level first\");\r\n\r\n        uint _referrerID = userInfos[msgsender].origRef;\r\n        while(userInfos[userAddressByID[_referrerID]].levelBought < _level)\r\n        {\r\n            _referrerID = userInfos[userAddressByID[_referrerID]].origRef;\r\n        }\r\n        bool treeComplete;\r\n        (_referrerID,treeComplete) = findFreeParentInDown(_referrerID, _level); // from here _referrerID is _parentID\r\n        //require(!treeComplete, \"no free place\");\r\n\r\n        userInfos[msgsender].levelBought = _level; \r\n\r\n        goldInfo memory temp;\r\n        temp.currentParent = _referrerID;\r\n        temp.position = getChildLength(_referrerID,_level) + 1;\r\n        activeGoldInfos[msgsender][_level] = temp;\r\n        activeGoldInfos[userAddressByID[_referrerID]][_level].childs.push(msgsender);\r\n\r\n        //direct payout\r\n        //address origRef = userAddressByID[userInfos[msgsender].origRef];\r\n        //if(_level > 1 ) origRef = findEligibleRef(origRef, _level);\r\n        //if(pay) payable(origRef).transfer(prc /20);\r\n\r\n        //emit directPaidEvG(userInfos[msgsender].id,userInfos[origRef].id,prc / 20, _level,block.timestamp);\r\n        uint userPosition;\r\n        (userPosition, user4thParent) = getPosition(msgsender, _level);\r\n        (,treeComplete) = findFreeParentInDown(user4thParent, _level);\r\n        if(userPosition > 28 && userPosition < 31 ) \r\n        {\r\n            payForLevel(msgsender, _level, true, pay);   // true means recycling pay to all except 25%\r\n        }\r\n        else\r\n        {\r\n            payForLevel(msgsender, _level, false, pay);   // false means no recycling pay to all\r\n        }\r\n        \r\n        if(treeComplete)\r\n        {           \r\n            recyclePosition(user4thParent, _level, pay);\r\n        }\r\n        emit levelBuyEvG(prc, userInfos[msgsender].id,_level, block.timestamp);\r\n        splidStack( msgsender,userPosition,prc,temp.position,_referrerID,_level);\r\n        return true;\r\n    }\r\n\r\n    function splidStack(address msgsender, uint userPosition, uint prc, uint tempPosition, uint _referrerID, uint _level) internal returns(bool)\r\n    {\r\n        emit treeEvG(userInfos[msgsender].id,userPosition,prc,tempPosition,block.timestamp,_referrerID, _level );\r\n        return true;\r\n    }\r\n\r\n    function findEligibleRef(address _origRef, uint _level) public view returns (address)\r\n    {\r\n        while (userInfos[_origRef].levelBought < _level)\r\n        {\r\n            _origRef = userAddressByID[userInfos[_origRef].origRef];\r\n        }\r\n        return _origRef;\r\n    }\r\n\r\n\r\n    event debugEvG(address _user, bool treeComplete,uint user4thParent,uint _level,uint userPosition);\r\n    function recyclePosition(uint _userID, uint _level, bool pay)  internal returns(bool)\r\n    {\r\n        uint prc = levelPrice[_level];\r\n\r\n        address msgSender = userAddressByID[_userID];\r\n\r\n        archivedGoldInfos[msgSender][_level].push(activeGoldInfos[msgSender][_level]); \r\n            \r\n        goldInfo memory temp;\r\n        \r\n        if(_userID == 1 ) \r\n        {\r\n\r\n            temp.currentParent = 1;\r\n            temp.position = 0;\r\n            activeGoldInfos[msgSender][_level] = temp;\r\n            payForLevel(msgSender, _level, false, pay);\r\n            emit treeEvG(_userID,0,levelPrice[_level],0,block.timestamp,1, _level );\r\n            return true;\r\n        }\r\n\r\n            // to find eligible referrer\r\n            uint _parentID =   getValidRef(msgSender, _level); // user will join under his eligible referrer\r\n\r\n\r\n            (_parentID,) = findFreeParentInDown(_parentID, _level);\r\n\r\n            temp.currentParent = _parentID;\r\n            temp.position = getChildLength(_parentID,_level) + 1;\r\n            activeGoldInfos[msgSender][_level] = temp;\r\n            activeGoldInfos[userAddressByID[_parentID]][_level].childs.push(msgSender);\r\n\r\n            //direct payout\r\n            //address origRef = userAddressByID[userInfos[msgSender].origRef];\r\n            //if(_level > 1 ) origRef = findEligibleRef(origRef, _level);\r\n            //if(pay) payable(origRef).transfer(prc / 20);\r\n            \r\n            //emit directPaidEvG(userInfos[msgSender].id,userInfos[origRef].id,prc/20, _level,block.timestamp);\r\n        \r\n        uint userPosition;\r\n        (userPosition, prc ) = getPosition(msgSender, _level); //  from here prc = user4thParent\r\n        (,bool treeComplete) = findFreeParentInDown(prc, _level);\r\n        if(userPosition > 28 && userPosition < 31 ) \r\n        {\r\n            payForLevel(msgSender, _level, true, pay);   // false means recycling pay to all except 25%\r\n        }\r\n        else\r\n        {\r\n            payForLevel(msgSender, _level, false, pay);   // true means no recycling pay to all        \r\n        }\r\n        splidStack( msgSender,userPosition,prc,temp.position,_parentID,_level);\r\n        if(treeComplete)\r\n        {           \r\n            recyclePosition(prc, _level, pay);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function getValidRef(address _user, uint _level) public view returns(uint)\r\n    {\r\n        uint refID = userInfos[_user].origRef;\r\n        uint lvlBgt = userInfos[userAddressByID[refID]].levelBought;\r\n\r\n        while(lvlBgt < _level)\r\n        {\r\n            refID = userInfos[userAddressByID[refID]].origRef;\r\n            lvlBgt = userInfos[userAddressByID[refID]].levelBought;\r\n        }\r\n        return refID;\r\n    }\r\n\r\n\r\n    function payForLevel(address _user, uint _level, bool recycle, bool pay) internal returns(bool)\r\n    {\r\n        uint[4] memory percentPayout;\r\n        percentPayout[0] = 5;\r\n        percentPayout[1] = 15;\r\n        percentPayout[2] = 30;\r\n        percentPayout[3] = 50;\r\n\r\n        address parent_ = userAddressByID[activeGoldInfos[_user][_level].currentParent];\r\n        uint price_ = levelPrice[_level];\r\n        for(uint i = 1;i<=4; i++)\r\n        {\r\n            if(i<4)\r\n            {\r\n                //if(pay) payable(parent_).transfer(price_ * percentPayout[i-1] / 100);\r\n                if(pay) tokenInterface(usdtAddress).transfer(parent_, price_ * percentPayout[i-1] / 100);\r\n                emit payForLevelEvG(userInfos[_user].id,userInfos[parent_].id,price_ * percentPayout[i-1] / 100, i,block.timestamp);\r\n            }\r\n            else if(recycle == false)\r\n            {\r\n                //if(pay) payable(parent_).transfer(price_ * percentPayout[i-1] / 100);\r\n                if(pay) tokenInterface(usdtAddress).transfer(parent_, price_ * percentPayout[i-1] / 100);\r\n                emit payForLevelEvG(userInfos[_user].id,userInfos[parent_].id,price_ * percentPayout[i-1] / 100, i,block.timestamp);                \r\n            }\r\n            //else\r\n            //{\r\n            //    if(pay) payable(owner).transfer(price_ * percentPayout[i-1] / 100);\r\n            //    \r\n            //    emit payForLevelEvG(userInfos[_user].id,0,price_ * percentPayout[i-1] / 100, i,block.timestamp);                \r\n            // }\r\n            parent_ = userAddressByID[activeGoldInfos[parent_][_level].currentParent];\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    function viewChilds(address _user, uint _level, bool _archived, uint _archivedIndex) public view returns(address[2] memory _child)\r\n    {\r\n        uint len;\r\n        if(!_archived)\r\n        {\r\n            len = activeGoldInfos[_user][_level].childs.length;\r\n            if(len > 0) _child[0] = activeGoldInfos[_user][_level].childs[0];\r\n            if(len > 1) _child[1] = activeGoldInfos[_user][_level].childs[1];\r\n        }\r\n        else\r\n        {\r\n            len = archivedGoldInfos[_user][_level][_archivedIndex].childs.length;\r\n            if(len > 0) _child[0] = archivedGoldInfos[_user][_level][_archivedIndex].childs[0];\r\n            if(len > 1) _child[1] = archivedGoldInfos[_user][_level][_archivedIndex].childs[1];            \r\n        }\r\n        return (_child);\r\n    }\r\n\r\n    function upgradeContract() public onlyOwner returns(bool)\r\n    {\r\n        payable(owner).transfer(address(this).balance);\r\n        return true;\r\n    }\r\n\r\n\r\n    function getChildLength(uint _parentID, uint _level) public view returns(uint)\r\n    {\r\n        return activeGoldInfos[userAddressByID[_parentID]][_level].childs.length;\r\n    }    \r\n\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferredEvG\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"treeComplete\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"user4thParent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userPosition\",\"type\":\"uint256\"}],\"name\":\"debugEvG\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"}],\"name\":\"directPaidEvG\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"}],\"name\":\"levelBuyEvG\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"parentID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromDown\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"}],\"name\":\"payForLevelEvG\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_referrerID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"regLevelEvG\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userPosition\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"placing\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_parent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"treeEvG\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeGoldInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentParent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"archivedGoldInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentParent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"buyLevel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultRefID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_origRef\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"findEligibleRef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"refID_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"findFreeParentInDown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"parentID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"noFreeReferrer\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_parentID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getChildLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"childss\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parenT\",\"type\":\"uint256\"}],\"name\":\"getCorrectGold\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentParent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"childs\",\"type\":\"address[]\"}],\"internalType\":\"struct newQUANTAM2Gold.goldInfo\",\"name\":\"tmps\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"recyclePosition_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recycleID\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getValidRef\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastIDCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"levelPermitted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDownLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"regPermitted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"regUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mainContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtAddress\",\"type\":\"address\"}],\"name\":\"setContractAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userAddressByID\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfos\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"joined\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"origRef\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelBought\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_archived\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_archivedIndex\",\"type\":\"uint256\"}],\"name\":\"viewChilds\",\"outputs\":[{\"internalType\":\"address[2]\",\"name\":\"_child\",\"type\":\"address[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "newQUANTAM2Gold", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f817ba2dd214a067645df6646868fbb54a6e3b7fc08ca4a9e5b090acdc1fce7d"}