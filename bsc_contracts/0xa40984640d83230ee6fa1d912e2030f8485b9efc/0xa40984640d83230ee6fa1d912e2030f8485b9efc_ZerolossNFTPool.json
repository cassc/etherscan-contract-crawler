{"SourceCode": "// Contract code written by @EVMlord\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\npragma solidity ^0.8.19;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\n \r\n // Contract code written by @EVMlord\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n// Contract code written by @EVMlord\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\npragma solidity ^0.8.0;\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\npragma solidity ^0.8.0;\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity >=0.4.0;\r\n// Contract code written by @EVMlord\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.8.0;\r\n// Contract code written by @EVMlord\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\n \r\n// Contract code written by @EVMlord\r\n \r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\npragma solidity >0.6.0;\r\n\r\n/// @dev an interface to interact NFT Contracts\r\ninterface IEVMlordNFT {\r\n    \r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n    // function walletOfOwner(address _owner) external view returns (uint256[] memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\npragma solidity >0.6.0;\r\n\r\n/**\r\n * @title SafeBEP20\r\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeBEP20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IBEP20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IBEP20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IBEP20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeBEP20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance =\r\n            token.allowance(address(this), spender).sub(value, \"SafeBEP20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeBEP20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeBEP20: BEP20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract ZerolossNFTPool is IERC721Receiver, Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeBEP20 for IBEP20;\r\n\r\n    // treasury Subscription info\r\n    uint256 public subEndBlock = 0;\r\n    uint256 public subLengthDays = 90;\r\n\tmapping (address => bool) public subOperator;\r\n    \r\n    // The address of the smart chef factory\r\n    address public SMART_CHEF_FACTORY;\r\n\r\n    // Whether it is initialized\r\n    bool public isInitialized;\r\n\r\n    // Whether a limit is set for users\r\n    bool public hasUserLimit;\r\n\r\n    // The block number when reward mining ends.\r\n    uint256 public bonusEndBlock = 0;\r\n\r\n    // The block number when reward mining starts.\r\n    uint256 public startBlock;\r\n\r\n    // The block number of the last pool update\r\n    uint256 public lastRewardBlock;\r\n\r\n    // The pool limit (0 if none)\r\n    uint256 public poolLimitPerUser;\r\n\r\n    uint256 entryFee = 0.006 ether;\r\n\r\n    // The reward token\r\n    IBEP20 public rewardToken;\r\n\r\n    // The staked token\r\n    IEVMlordNFT public stakedToken;\r\n\r\n    // Total Staked tokens\r\n    uint256 public totalStaked = 0;\r\n\r\n    // Denominator of fee\r\n    uint256 public constant FEE_DENOMINATOR = 10000;\r\n\r\n    // Numerator of fee\r\n    uint256 public tokenFee = 100; \r\n\r\n    uint256 public currentRound = 0;\r\n    uint256 rewardTokenCount = 1;\r\n\r\n    address public vault;\r\n    address payable public zltAdmin = payable(0x88813f879147Ed09CC5c1Cd61ED8DAA349D7D2ab); \r\n    \r\n    mapping(uint256 => RoundInfo) public roundInfo;  \r\n\r\n    struct RoundInfo {\r\n        address rwdToken;\r\n        uint256 accTokenPerShare;\r\n        uint256 rewardPerBlock;\r\n        uint256 prevAndCurrentRewardsBalance;\r\n        uint256 PRECISION_FACTOR;\r\n    }  \r\n\r\n    // Info of each user that stakes tokens (stakedToken)\r\n    mapping(address => UserInfo) usersInfo;\r\n    mapping (uint256 => address) public tokenOwner;\r\n\r\n    mapping(address => mapping(uint256 => uint256)) usersRewardDebt;\r\n\r\n\r\n    struct UserInfo {\r\n        uint256 amount; // How many staked tokens the user has provided\r\n        uint256[] tokenIds;       \r\n    }\r\n\r\n    function userInfo(address _user) external view returns(uint256 amount, uint256 rewardDebt, uint256[] memory tokenIds) {\r\n        amount = usersInfo[_user].amount;\r\n        rewardDebt = usersRewardDebt[_user][currentRound];\r\n        tokenIds = usersInfo[_user].tokenIds;\r\n    }\r\n\r\n    function rewardPerBlock() external view returns (uint256) {\r\n        RoundInfo storage round = roundInfo[currentRound];\r\n        return round.rewardPerBlock;\r\n    }\r\n\r\n    event AdminTokenRecovery(address tokenRecovered, uint256 amount);\r\n    event EmergencyUnstake(address indexed user, uint256 amount);\r\n    event NewStartAndEndBlocks(uint256 startBlock, uint256 endBlock);\r\n    event NewRewardPerBlock(uint256 rewardPerBlock);\r\n    event NewPoolLimit(uint256 poolLimitPerUser);\r\n    event RewardsStop(uint256 blockNumber);\r\n    event _Stake(uint256 _tokenId);\r\n    event _Unstake(uint256 _tokenId);\r\n    event ExtendPoolWithFundsAlreadyInContract();\r\n    event StartNewPool(uint256 _startInDays, uint256 _poolLengthDays);\r\n    event NFTReceived();\r\n    \r\n    constructor() {\r\n        SMART_CHEF_FACTORY = msg.sender;\r\n        vault = SMART_CHEF_FACTORY;\r\n    }\r\n\r\n\r\n   // Subscription\r\n    modifier onlySub() {\r\n      require(subOperator[msg.sender] || msg.sender == owner() || msg.sender == SMART_CHEF_FACTORY);\r\n      _;\r\n    }\r\n \r\n    function setSubOperator(address newSubOperator, bool state) external onlySub {\r\n      subOperator[newSubOperator] = state;\r\n    }\r\n\r\n    function changeFactory(address newFactory) external onlyOwner {\r\n        SMART_CHEF_FACTORY = payable(newFactory);\r\n    }\r\n\r\n    function changeVault(address newVault) external onlyOwner {\r\n        vault = newVault;\r\n    } // zltAdmin\r\n\r\n    function changeZltAdmin(address payable newZltAdmin) external onlyOwner {\r\n        zltAdmin = newZltAdmin;\r\n    }\r\n    \r\n    function RenewOrExtendSubscriptionSixWeeks() external payable onlySub {\r\n\t\tuint256 _subEndBlock = subEndBlock;\r\n        require(_subEndBlock > 0, \"Subscription hasnt started\");\r\n        if(block.number <= _subEndBlock) subEndBlock += (subLengthDays * 28800);\r\n        else subEndBlock = block.number + (subLengthDays * 28800); \r\n        \r\n    }\r\n\r\n    /**\r\n    * @notice this function is to extend or renew the pool ==============================================================\r\n    */\r\n\r\n    function increaseAPR() external onlySub {\r\n        RoundInfo storage round = roundInfo[currentRound];\r\n        _updatePool();\r\n        uint256 totalNewReward = checkTotalNewRewards();\r\n\t\tuint256 _bonusEndBlock = bonusEndBlock;\r\n        require(_bonusEndBlock > block.number, \"Pool has Ended, use startNewPool\");\r\n        require(totalNewReward > 0, \"no NewRewards availavble, send tokens First\");\r\n\r\n        uint256 blocksLeft = _bonusEndBlock - block.number;\r\n        uint256 addedRPB = totalNewReward / blocksLeft;\r\n        round.rewardPerBlock += addedRPB;\r\n\r\n            // check how much new rewards are available\r\n            round.prevAndCurrentRewardsBalance = rewardToken.balanceOf(address(this));\r\n       \r\n        _updatePool();\r\n\r\n    }\r\n\r\n    function ExtendPool() external onlySub {\r\n        RoundInfo storage round = roundInfo[currentRound];\r\n\t\tuint256 _bonusEndBlock = bonusEndBlock;\r\n        require(_bonusEndBlock > block.number, \"Pool has Ended, use startNewPool\");\r\n          \r\n        _updatePool();\r\n        uint256 totalNewReward = checkTotalNewRewards();\r\n        require(totalNewReward > 0, \"No funds to start new pool with\");\r\n        \r\n            // check how much new rewards are available\r\n            round.prevAndCurrentRewardsBalance = rewardToken.balanceOf(address(this));        \r\n        \r\n        // increase block count for pool\r\n        uint256 timeExtended = totalNewReward / round.rewardPerBlock;\r\n        bonusEndBlock = bonusEndBlock + (timeExtended);\r\n        if(msg.sender != owner()) require(bonusEndBlock <= subEndBlock, \"Subscription runs out before this end block renewSubscription\");\r\n\r\n    }\r\n\r\n    function startNewPoolOrRound( uint256 _startInDays, uint256 _poolLengthDays ) external onlySub {\r\n        RoundInfo storage round = roundInfo[currentRound];\r\n        // make sure pool has ended\r\n        require(bonusEndBlock < block.number, \"Pool has not ended, Try Extending\");\r\n        \r\n        _updatePool();\r\n        uint256 totalNewReward = checkTotalNewRewards();\r\n        require(totalNewReward > 0, \"No funds to start new pool with\");\r\n        \r\n        // setup for calculations\r\n        uint256 startInBlocks;\r\n        uint256 totalBlocks;\r\n        startInBlocks = _startInDays * 28800;\r\n        totalBlocks = _poolLengthDays * 28800;\r\n\r\n            // check how much new rewards are available            \r\n            round.prevAndCurrentRewardsBalance = rewardToken.balanceOf(address(this));\r\n        \r\n        // set last reward block to new start block\r\n        startBlock = (block.number + startInBlocks);\r\n        lastRewardBlock = startBlock;\r\n        \r\n        // set end block of new pool\r\n        bonusEndBlock = startBlock + totalBlocks;\r\n        if(msg.sender != owner()) require(bonusEndBlock <= subEndBlock, \"Subscription runs out before this end block renewSubscription\");\r\n        \r\n        // set new rewards per block based off the new information\r\n        round.rewardPerBlock = totalNewReward / totalBlocks;\r\n        if(subEndBlock == 0) subEndBlock = block.number + (subLengthDays * 28800);\r\n        \r\n        \r\n    }\r\n\r\n    function setNextRewardToken(IBEP20 _rewardToken) external onlySub {\r\n        require(bonusEndBlock < block.number, \"Pool has not ended, Try Extending\");\r\n        require(rewardToken != _rewardToken,\"same token\");\r\n        \r\n        // final update\r\n        _updatePool();\r\n        // set new token reward\r\n        rewardToken = _rewardToken;    \r\n\r\n        bool  isOld =false;\r\n        for(uint i=0; i<rewardTokenCount; i++) {\r\n            if(roundInfo[i].rwdToken == address(_rewardToken)) {\r\n                currentRound = i;\r\n                isOld = true;\r\n            }\r\n        }\r\n        if(!isOld){\r\n            // NEW TOKEN\r\n            currentRound = rewardTokenCount;\r\n            rewardTokenCount++;\r\n            // set new rounds reward token\r\n            RoundInfo storage round = roundInfo[currentRound];\r\n            round.rwdToken = address(rewardToken);\r\n            uint256 decimalsRewardToken = uint256(rewardToken.decimals());\r\n            require(decimalsRewardToken < 30, \"Must be inferior to 30\");\r\n            round.PRECISION_FACTOR = uint256(10**(uint256(30).sub(decimalsRewardToken)));\r\n            // set rewardscounter\r\n            round.prevAndCurrentRewardsBalance = 0;\r\n        }\r\n        \r\n        _updatePool();\r\n\r\n    }\r\n\r\n    function setupTokens(\r\n        IEVMlordNFT _stakedToken,\r\n        IBEP20 _rewardToken\r\n        ) external {\r\n        require(!isInitialized, \"Already initialized\");\r\n        require(msg.sender == SMART_CHEF_FACTORY, \"Not factory\");\r\n        stakedToken = _stakedToken;\r\n        rewardToken = _rewardToken;\r\n\r\n\r\n        uint256 decimalsRewardToken = uint256(rewardToken.decimals());\r\n        require(decimalsRewardToken < 30, \"Must be inferior to 30\");\r\n        RoundInfo storage round = roundInfo[currentRound];\r\n        round.PRECISION_FACTOR = uint256(10**(uint256(30).sub(decimalsRewardToken)));\r\n        \r\n        // set rewardscounter\r\n        round.prevAndCurrentRewardsBalance = 0;\r\n        round.rwdToken = address(rewardToken);\r\n        isInitialized = true;\r\n    }\r\n\r\n    /// @notice Stake 1 or many NFTs.\r\n    // claims rewards\r\n    function stake(uint256 tokenId) public payable {\r\n        require (msg.value >= entryFee);\r\n        UserInfo storage user = usersInfo[msg.sender];\r\n        RoundInfo storage round = roundInfo[currentRound];\r\n        claim();\r\n        zltAdmin.transfer(msg.value * 75 / 100);\r\n        _stake(tokenId);\r\n        usersRewardDebt[msg.sender][currentRound] = user.amount.mul(round.accTokenPerShare).div(round.PRECISION_FACTOR);\r\n    }\r\n\r\n    /*\r\n     * @notice Used internall to stake TokenId's\r\n     */\r\n    function _stake(uint256 _tokenId) internal {\r\n        UserInfo storage user = usersInfo[msg.sender];\r\n        \r\n            user.tokenIds.push(_tokenId);\r\n            tokenOwner[_tokenId] = msg.sender;\r\n\r\n                stakedToken.safeTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                _tokenId\r\n                );\r\n\r\n            user.amount = user.amount.add(1);\r\n            totalStaked += (1);\r\n\r\n        emit _Stake( _tokenId);\r\n    }\r\n\r\n    /// @notice unstake. \r\n    function unstake (uint256 tokenId) public {\r\n        UserInfo storage user = usersInfo[msg.sender];\r\n        RoundInfo storage round = roundInfo[currentRound];\r\n        claim();\r\n        if (tokenOwner[tokenId] == msg.sender) {\r\n                _unstake(tokenId);\r\n            }\r\n        usersRewardDebt[msg.sender][currentRound] = user.amount.mul(round.accTokenPerShare).div(round.PRECISION_FACTOR);\r\n    }\r\n\r\n    /*\r\n     * @notice Withdraw staked NFT's\r\n     */\r\n    function _unstake(uint256 _tokenId) internal {\r\n       UserInfo storage user = usersInfo[msg.sender];\r\n        require(tokenOwner[_tokenId] == msg.sender, \"You are Not the Owner of this NFT\");\r\n\r\n            for (uint256 i; i<user.tokenIds.length; i++) {\r\n                if (user.tokenIds[i] == _tokenId) {\r\n                    user.tokenIds[i] = user.tokenIds[user.tokenIds.length - 1];\r\n                    user.tokenIds.pop();\r\n                }\r\n            }\r\n           \r\n        delete tokenOwner[_tokenId];\r\n        user.amount = user.amount.sub(1);\r\n\r\n            stakedToken.safeTransferFrom(\r\n            address(this),\r\n            msg.sender,\r\n            _tokenId\r\n            );\r\n\r\n        totalStaked -= 1;\r\n\r\n        emit _Unstake(_tokenId);\r\n    }\r\n\r\n    /*\r\n     * @notice Withdraw staked tokens without caring about rewards\r\n     * @dev Needs to be for emergency.\r\n     */\r\n    \r\n    function emergencyUnstakeALL() public {\r\n        UserInfo storage user = usersInfo[msg.sender];\r\n        require(user.tokenIds.length > 0, \"You have no NFTs of this kind\");\r\n        for (uint i = 0; i < user.tokenIds.length; i++) {\r\n            uint TokenId = user.tokenIds[i];\r\n            if (tokenOwner[TokenId] == msg.sender) {\r\n                _unstake(TokenId);\r\n            }\r\n        }\r\n        for(uint i = 0; i <= currentRound; i++){\r\n            usersRewardDebt[msg.sender][i] = 0;\r\n        \r\n        }\r\n      emit EmergencyUnstake(msg.sender,user.tokenIds.length);\r\n    }\r\n\r\n   \r\n\r\n    // Claim rewards or Harvest rewards\r\n     function claim() internal {\r\n        UserInfo storage user = usersInfo[msg.sender];\r\n        RoundInfo storage round = roundInfo[currentRound];\r\n        _updatePool();\r\n        \r\n        uint256 pending = user.amount.mul(round.accTokenPerShare).div(round.PRECISION_FACTOR).sub(usersRewardDebt[msg.sender][currentRound]);\r\n            \r\n            if (pending > 0) {\r\n\r\n                uint256 maintainanceFee = pending.mul(tokenFee).div(FEE_DENOMINATOR);\r\n\t\t\t\tuint256 actualStakingReward = pending.sub(maintainanceFee);\r\n\t\t\t\t\r\n\t\t\t\trewardToken.safeTransfer(address(vault), maintainanceFee);\r\n\t\t\t\t\r\n                rewardToken.safeTransfer(address(msg.sender), actualStakingReward);\r\n                round.prevAndCurrentRewardsBalance -= pending;\r\n            }\r\n            (,,bool hasOldRewards) = prevPendingRewards(msg.sender);\r\n            if(hasOldRewards) claimPrevRewards();\r\n    } \r\n\r\n    // Claim rewards or Harvest rewards\r\n     function claimReward() public {\r\n        \r\n        _updatePool();\r\n        UserInfo storage user = usersInfo[msg.sender];\r\n        RoundInfo storage round = roundInfo[currentRound];\r\n        uint256 pending = user.amount.mul(round.accTokenPerShare).div(round.PRECISION_FACTOR).sub(usersRewardDebt[msg.sender][currentRound]);\r\n            \r\n            if (pending > 0) {\r\n\r\n                uint256 maintainanceFee = pending.mul(tokenFee).div(FEE_DENOMINATOR);\r\n\t\t\t\tuint256 actualStakingReward = pending.sub(maintainanceFee);\r\n\t\t\t\t\r\n\t\t\t\trewardToken.safeTransfer(address(vault), maintainanceFee);\r\n\t\t\t\t\r\n                rewardToken.safeTransfer(address(msg.sender), actualStakingReward);\r\n                usersRewardDebt[msg.sender][currentRound] = user.amount.mul(round.accTokenPerShare).div(round.PRECISION_FACTOR);\r\n                round.prevAndCurrentRewardsBalance -= pending;\r\n            }\r\n} \r\n    \r\n\r\n    \r\n    /**\r\n     * @notice It allows the admin to recover wrong tokens sent to the contract\r\n     * @param _tokenAddress: the address of the token to withdraw\r\n     * @param _tokenAmount: the number of tokens to withdraw\r\n     * @dev This function is only callable by admin.\r\n     * @dev All tokens left in the contract for 3 months become OWNERLESS and can be claimed.\r\n     */ \r\n    function recoverTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\r\n            require(_tokenAddress != address(stakedToken), \"Cannot be staked token\");\r\n            require(block.number > bonusEndBlock, \"Pool Must be ended\");\r\n\r\n            IBEP20(_tokenAddress).safeTransfer(address(msg.sender), _tokenAmount);\r\n \r\n        emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\r\n    }\r\n\r\n    function withdrawStuckEth() external onlyOwner {\r\n        (bool success,) = address(msg.sender).call{value: address(this).balance}(\"\");\r\n        require(success, \"Failed to withdraw stuck ETH\");\r\n    }\r\n\r\n    function stopReward() external onlyOwner {\r\n         RoundInfo storage round = roundInfo[currentRound];\r\n        _updatePool();\r\n        uint256 totalNewReward = checkTotalNewRewards();\r\n        uint256 timeLeft = bonusEndBlock - block.number;\r\n        uint256 rewardsLeft = round.rewardPerBlock * timeLeft;\r\n       \r\n            // check how much new rewards are available\r\n            round.prevAndCurrentRewardsBalance = rewardToken.balanceOf(address(this));\r\n        \r\n        round.prevAndCurrentRewardsBalance -= rewardsLeft;\r\n        round.prevAndCurrentRewardsBalance -= totalNewReward;\r\n        bonusEndBlock = block.number;\r\n    }\r\n\r\n    /*\r\n     * @notice Update pool limit per user\r\n     * @dev Only callable by owner.\r\n     * @param _hasUserLimit: whether the limit remains forced\r\n     * @param _poolLimitPerUser: new pool limit per user\r\n     */\r\n    function updatePoolLimitPerUser(bool _hasUserLimit, uint256 _poolLimitPerUser) external onlyOwner {\r\n     //   require(hasUserLimit, \"Must be set\");\r\n        if (_hasUserLimit) {\r\n            require(_poolLimitPerUser > poolLimitPerUser, \"New limit must be higher\");\r\n            poolLimitPerUser = _poolLimitPerUser;\r\n        } else {\r\n            hasUserLimit = _hasUserLimit;\r\n            poolLimitPerUser = 0;\r\n        }\r\n        emit NewPoolLimit(poolLimitPerUser);\r\n    }\r\n\r\n    /*\r\n     * @notice Update reward per block\r\n     * @dev Only callable by owner.\r\n     * @param _rewardPerBlock: the reward per block\r\n     */\r\n    function updateRewardPerBlock(uint256 _rewardPerBlock) external onlyOwner {\r\n        require(block.number > startBlock, \"Pool is yet to start\");\r\n        RoundInfo storage round = roundInfo[currentRound];\r\n        round.rewardPerBlock = _rewardPerBlock;\r\n        emit NewRewardPerBlock(_rewardPerBlock);\r\n    }\r\n\r\n    /**\r\n     * @notice It allows the admin to update start and end blocks\r\n     * @dev This function is only callable by owner.\r\n     * @param _startBlock: the new start block\r\n     * @param _bonusEndBlock: the new end block\r\n     */\r\n    function updateStartAndEndBlocks(uint256 _startBlock, uint256 _bonusEndBlock) external onlyOwner {\r\n        \r\n        RoundInfo storage round = roundInfo[currentRound];\r\n        require(block.number > bonusEndBlock, \"Pool has started\");\r\n        require(_startBlock < _bonusEndBlock, \"New startBlock must be lower than new endBlock\");\r\n        require(block.number < _startBlock, \"New startBlock must be higher than current block\");\r\n\r\n        startBlock = _startBlock;\r\n        bonusEndBlock = _bonusEndBlock;\r\n\r\n        // Set the lastRewardBlock as the startBlock\r\n        lastRewardBlock = startBlock;\r\n\t\t\r\n\t\t// set new rewards per block based off the new information\r\n\t\tuint256 totalBlocks = _bonusEndBlock - _startBlock;\r\n\t\tuint256 totalNewReward = rewardToken.balanceOf(address(this)); \r\n        require(totalNewReward > 0, \"No funds to start new pool with\");\r\n        round.rewardPerBlock = totalNewReward / totalBlocks;\r\n\r\n        emit NewStartAndEndBlocks(_startBlock, _bonusEndBlock);\r\n    }\r\n\r\n    /*\r\n     * @notice View function to see pending reward on frontend.\r\n     * @param _user: user address\r\n     * @return Pending reward for a given user\r\n     */\r\n    function pendingReward(address _user) public view returns (uint256) {\r\n        UserInfo memory user = usersInfo[_user];\r\n        RoundInfo memory round = roundInfo[currentRound];\r\n        uint256 stakedTokenSupply = totalStaked;\r\n        if (block.number > lastRewardBlock && stakedTokenSupply != 0) {\r\n            uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\r\n            uint256 cakeReward = multiplier.mul(round.rewardPerBlock);\r\n            uint256 adjustedTokenPerShare =\r\n                round.accTokenPerShare.add(cakeReward.mul(round.PRECISION_FACTOR).div(stakedTokenSupply));\r\n            return user.amount.mul(adjustedTokenPerShare).div(round.PRECISION_FACTOR).sub(usersRewardDebt[_user][currentRound]);\r\n        } else {\r\n            return user.amount.mul(round.accTokenPerShare).div(round.PRECISION_FACTOR).sub(usersRewardDebt[_user][currentRound]);\r\n        }\r\n    }\r\n\r\n    function prevPendingRewards(address _user) public view returns (address[] memory _rwdToken, uint256[] memory _amount, bool hasRewards) {\r\n        UserInfo memory user = usersInfo[_user];\r\n        _rwdToken = new address[](rewardTokenCount);\r\n        _amount = new uint256[](rewardTokenCount);\r\n        hasRewards = false;\r\n        for (uint i = 0; i < rewardTokenCount; i++) {\r\n            if( i != currentRound){\r\n                RoundInfo memory round = roundInfo[i];\r\n                _rwdToken[i] = round.rwdToken;\r\n                _amount[i] = user.amount.mul(round.accTokenPerShare).div(round.PRECISION_FACTOR).sub(usersRewardDebt[msg.sender][i]);\r\n                if (_amount[i] > 0) hasRewards = true;\r\n            }\r\n        }\r\n        return (_rwdToken, _amount, hasRewards);\r\n    }\r\n\r\n    function claimPrevRewards() public {\r\n        UserInfo storage user = usersInfo[msg.sender];\r\n\r\n        for (uint i = 0; i < rewardTokenCount; i++){\r\n            if( i != currentRound){            \r\n                RoundInfo memory round = roundInfo[i];\r\n                uint256 pending = user.amount.mul(round.accTokenPerShare).div(round.PRECISION_FACTOR).sub(usersRewardDebt[msg.sender][i]);\r\n            \r\n                if (pending > 0) {\r\n                    IBEP20 rwd = IBEP20(round.rwdToken);\r\n                    try rwd.transfer(address(msg.sender), pending) {} catch {}\r\n                    usersRewardDebt[msg.sender][i] = user.amount.mul(round.accTokenPerShare).div(round.PRECISION_FACTOR);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // return ONLY the token id's for current user\r\n    function getTokenIds(address _user) external view returns (uint256[] memory) {\r\n         UserInfo memory user = usersInfo[_user];\r\n         return (user.tokenIds);\r\n    }\r\n\r\n    function getUserPoolInfo(address _user) external view returns (\r\n                uint256 _balance,\r\n                uint256[] memory _tokenIds,\r\n                uint256 _pendingReward\r\n                ) {\r\n        UserInfo memory user = usersInfo[_user];\r\n        return (user.amount, user.tokenIds, pendingReward(_user));\r\n    }\r\n\r\n    function getMainPoolInfo() external view returns (\r\n        uint256 _rewardPerBlock,\r\n        uint256 _totalStaked,\r\n        uint256 _startBlock,\r\n        uint256 _endBlock,\r\n        uint256 _tokenFee\r\n        ) {\r\n            RoundInfo memory round = roundInfo[currentRound];\r\n            return (round.rewardPerBlock, totalStaked, startBlock, bonusEndBlock, tokenFee);  \r\n        }\r\n\r\n     function checkTotalNewRewards() public view returns(uint256 totalNewReward){\r\n            RoundInfo memory round = roundInfo[currentRound];\r\n            totalNewReward = (rewardToken.balanceOf(address(this)) - round.prevAndCurrentRewardsBalance);    \r\n    }\r\n\r\n    function NEWRewardWithdraw() external onlyOwner {\r\n        uint256 totalNewReward = checkTotalNewRewards();\r\n        require(totalNewReward > 0, \"No New Reward Tokens to Withdrawl\");\r\n        rewardToken.safeTransfer(address(msg.sender), totalNewReward);\r\n    }\r\n\r\n    /*\r\n     * @notice Update reward variables of the given pool to be up-to-date.\r\n     */\r\n    function _updatePool() internal {\r\n        if (block.number <= lastRewardBlock) {\r\n            return;\r\n        }\r\n        uint256 stakedTokenSupply = totalStaked;\r\n\r\n        if (stakedTokenSupply == 0) {\r\n            lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n        RoundInfo storage round = roundInfo[currentRound];\r\n        uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\r\n        uint256 cakeReward = multiplier.mul(round.rewardPerBlock);\r\n        round.accTokenPerShare = round.accTokenPerShare.add(cakeReward.mul(round.PRECISION_FACTOR).div(stakedTokenSupply));\r\n        lastRewardBlock = block.number;\r\n    }\r\n\r\n    /*\r\n     * @notice Return reward multiplier over the given _from to _to block.\r\n     * @param _from: block to start\r\n     * @param _to: block to finish\r\n     */\r\n    function _getMultiplier(uint256 _from, uint256 _to) internal view returns (uint256) {\r\n        if (_to <= bonusEndBlock) {\r\n            return _to.sub(_from);\r\n        } else if (_from >= bonusEndBlock) {\r\n            return 0;\r\n        } else {\r\n            return bonusEndBlock.sub(_from);\r\n        }\r\n    }\r\n\r\n    function walletOfOwner(address _owner) public view returns (uint256[] memory) {\r\n        uint256 ownerTokenCount = stakedToken.balanceOf(_owner);\r\n        uint256[] memory tokenIds = new uint256[](ownerTokenCount);\r\n        for (uint256 i; i < ownerTokenCount; i++) {\r\n            tokenIds[i] = stakedToken.tokenOfOwnerByIndex(_owner, i);\r\n        }\r\n    return tokenIds;\r\n    }\r\n    \r\n     function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external override returns(bytes4){\r\n        _operator;\r\n        _from;\r\n        _tokenId;\r\n        _data;\r\n        emit NFTReceived();\r\n        return 0x150b7a02;\r\n    }\r\n   \r\n    function setTokenFee(uint256 newTokenFee) public onlyOwner {\r\n      tokenFee = newTokenFee;\r\n    }\r\n\r\n    function setEntryFee(uint256 newEntryFee) public onlyOwner {\r\n      entryFee = newEntryFee;\r\n    }\r\n\r\n    //entryFee\r\n    \r\n// Contract code written by @EVMlord\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenRecovered\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminTokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyUnstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ExtendPoolWithFundsAlreadyInContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"NFTReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolLimitPerUser\",\"type\":\"uint256\"}],\"name\":\"NewPoolLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"NewRewardPerBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"NewStartAndEndBlocks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RewardsStop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startInDays\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_poolLengthDays\",\"type\":\"uint256\"}],\"name\":\"StartNewPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"_Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"_Unstake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ExtendPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NEWRewardWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RenewOrExtendSubscriptionSixWeeks\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SMART_CHEF_FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"changeFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newVault\",\"type\":\"address\"}],\"name\":\"changeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newZltAdmin\",\"type\":\"address\"}],\"name\":\"changeZltAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkTotalNewRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalNewReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPrevRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyUnstakeALL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMainPoolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserPoolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_pendingReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasUserLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increaseAPR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLimitPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"prevPendingRewards\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_rwdToken\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"hasRewards\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"rwdToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevAndCurrentRewardsBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PRECISION_FACTOR\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newEntryFee\",\"type\":\"uint256\"}],\"name\":\"setEntryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"setNextRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSubOperator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setSubOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTokenFee\",\"type\":\"uint256\"}],\"name\":\"setTokenFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IEVMlordNFT\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"setupTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedToken\",\"outputs\":[{\"internalType\":\"contract IEVMlordNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolLengthDays\",\"type\":\"uint256\"}],\"name\":\"startNewPoolOrRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subLengthDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"subOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_hasUserLimit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_poolLimitPerUser\",\"type\":\"uint256\"}],\"name\":\"updatePoolLimitPerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"}],\"name\":\"updateStartAndEndBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zltAdmin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ZerolossNFTPool", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://85c06478b5cb709a9d6b7ec076e0250cf7915ee1e7081da179fdccbd20025f73"}