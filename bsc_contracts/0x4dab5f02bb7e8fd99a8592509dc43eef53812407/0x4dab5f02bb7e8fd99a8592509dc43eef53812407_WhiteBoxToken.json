{"SourceCode": "// SPDX-License-Identifier: MIT\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-03-26\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-03-24\r\n*/\r\n\r\n/**\r\n *Submitted for verification at whitebox.world on 2022-03-25\r\n */\r\n\r\npragma solidity ^0.8.1;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\r\n\r\n    function burn(uint256 amount) external returns (bool);\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n}\r\n\r\ninterface IFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address PancakePair);\r\n}\r\n\r\ninterface IPair {\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n}\r\n\r\ninterface IWETH {\r\n    function withdraw(uint) external;\r\n    function transferFrom(address src, address dst, uint wad) external returns (bool);\r\n    function balanceOf(address account)  external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract PancakeTool {\r\n    address public PancakePair;\r\n    IRouter internal PancakeV2Router;\r\n\r\n    function initIRouter(address _router, address _pair) internal {\r\n        PancakeV2Router = IRouter(_router);\r\n        PancakePair = IFactory(PancakeV2Router.factory()).createPair(\r\n            address(this),\r\n            _pair\r\n        );\r\n    }\r\n\r\n\r\n    function getPoolInfo()\r\n        public\r\n        view\r\n        returns (uint112 WETHAmount, uint112 TOKENAmount)\r\n    {\r\n        (uint112 _reserve0, uint112 _reserve1, ) = IPair(PancakePair)\r\n            .getReserves();\r\n        WETHAmount = _reserve1;\r\n        TOKENAmount = _reserve0;\r\n        if (IPair(PancakePair).token0() == PancakeV2Router.WETH()) {\r\n            WETHAmount = _reserve0;\r\n            TOKENAmount = _reserve1;\r\n        }\r\n    }\r\n\r\n    function getLPTotal(address user) internal view returns (uint256) {\r\n        return IBEP20(PancakePair).balanceOf(user);\r\n    }\r\n\r\n    function getTotalSupply() internal view returns (uint256) {\r\n        return IBEP20(PancakePair).totalSupply();\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n    constructor(address token) {\r\n        IBEP20(token).approve(msg.sender, uint256(~uint256(0)));\r\n    }\r\n}\r\n\r\ncontract WhiteBoxToken is Context, IBEP20, Ownable, PancakeTool {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    uint8 public _decimals;\r\n    string public _symbol;\r\n    string public _name;\r\n\r\n    uint256 private shareSize = 0;\r\n    uint256 private randomNonce = 0;\r\n\r\n    address private V1 = 0x7950E4b5139ABC86233879E2f2d6A816b0d9Ed7D;\r\n\r\n    address private _PancakeRouter = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address private _USDT = 0x55d398326f99059fF775485246999027B3197955;\r\n    address public walletM = 0x32863f34Ff87227989B33a01A1fc75BEd38B4A9a; \r\n\r\n    address private _initPoolHolder;\r\n    address[] private routerPair;\r\n\r\n    uint256 public _fund; \r\n    uint256 public _rise; \r\n    uint256 public _lucky;\r\n\r\n    address public lastSender;\r\n    address public lastRecipient; \r\n\r\n    uint8 private _cPercent = 40;\r\n    uint8 private _iPercent = 1;\r\n    uint8 private _mPercent = 5;\r\n    uint8 private _gPercent = 9;\r\n    uint8 private _Percent = 55;\r\n\r\n    uint256 private divBase = 1000;\r\n    uint256 private tokenSize = 1000000000000000000;\r\n\r\n    uint256 private rewardMin = 30 * tokenSize;\r\n\r\n    uint256 private startIndex = 0;\r\n    uint256 private interval = 10;\r\n\r\n\r\n    uint256 private oldPrice;\r\n    bool private haveLiquidity;\r\n\r\n    uint256 private luckyKey = 100;\r\n    uint256 private LPNext = 1;\r\n\r\n    uint256 public _lpHolderTotal;\r\n    mapping(address => bool) public isLpHolders;\r\n    mapping(uint256 => address) public _lpHolders;\r\n\r\n\r\n    bool swapLocking;\r\n\r\n    modifier lockTheSwap() {\r\n        swapLocking = true;\r\n        _;\r\n        swapLocking = false;\r\n    }\r\n\r\n\r\n    TokenDistributor private _tokenDistributor;\r\n\r\n    constructor() {\r\n        _name = \"WhiteBox Token\";\r\n        _symbol = \"WBOX\";\r\n        _decimals = 18;\r\n        _totalSupply = 3000000 * tokenSize;\r\n        _balances[msg.sender] = _totalSupply;\r\n\r\n        _tokenDistributor = new TokenDistributor(_USDT);\r\n\r\n        _initPoolHolder = msg.sender;\r\n        initIRouter(_PancakeRouter, _USDT);\r\n\r\n        routerPair.push(address(this));\r\n        routerPair.push(_USDT);\r\n\r\n        _approve(address(this), _PancakeRouter, ~uint256(0));\r\n        _approve(owner(), _PancakeRouter, ~uint256(0));\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() override external view returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() override external view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() override external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() override external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-totalSupply}.\r\n     */\r\n    function totalSupply() override external view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) override external view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n\r\n\r\n    function transfer(address recipient, uint256 amount) override\r\n        external\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        override external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) override external returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {BEP20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) override external returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"BEP20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"BEP20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Burn `amount` tokens and decreasing the total supply.\r\n     */\r\n    function burn(uint256 amount) public returns (bool) {\r\n        _burn(_msgSender(), amount);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    function getTokens() public view returns (address  adds){\r\n        return address(_tokenDistributor);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n\r\n        if(owner() != address(0) && sender == PancakePair){\r\n            revert(\"You can't buy\");\r\n        }\r\n\r\n        if (\r\n            _balances[address(this)] > 0 &&\r\n            sender != PancakePair &&\r\n            owner() == address(0) &&\r\n            !swapLocking\r\n        ) {\r\n            swapTokensForUSDT();\r\n        }\r\n\r\n        if(swapLocking){\r\n            _balances[sender] = _balances[sender].sub(\r\n                amount,\r\n                \"BEP20: transfer amount exceeds balance\"\r\n            );\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n            emit Transfer(sender, recipient, amount);\r\n        }else{\r\n            _beforeTransfer();\r\n\r\n            _balances[sender] = _balances[sender].sub(\r\n                amount,\r\n                \"BEP20: transfer amount exceeds balance\"\r\n            );\r\n\r\n            if (sender != owner() && sender != address(this)) {\r\n                uint256 Fee = (amount / divBase) * _Percent;\r\n                _balances[address(this)] = _balances[address(this)].add(Fee);\r\n                emit Transfer(sender, address(this), Fee);\r\n                amount = amount.sub(Fee);\r\n            }\r\n\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n            emit Transfer(sender, recipient, amount);\r\n\r\n            _afterTransfer(sender,recipient,amount);\r\n        }\r\n\r\n    }\r\n\r\n    function _beforeTransfer() internal {\r\n        if(lastRecipient != address(0)){\r\n            if(!isLpHolders[lastRecipient] && super.getLPTotal(lastRecipient) > 0){\r\n                isLpHolders[lastRecipient] = true;\r\n                _lpHolders[_lpHolderTotal] = lastRecipient;\r\n                _lpHolderTotal = _lpHolderTotal.add(1);\r\n\r\n                if(_lpHolderTotal / luckyKey == LPNext){\r\n                    rewardLuckyLPH();\r\n                }\r\n            }\r\n            delete lastRecipient;\r\n        }\r\n\r\n        if(lastSender != address(0)){\r\n            if(!isLpHolders[lastSender] && super.getLPTotal(lastSender) > 0){\r\n                isLpHolders[lastSender] = true;\r\n                _lpHolders[_lpHolderTotal] = lastSender;\r\n                _lpHolderTotal = _lpHolderTotal.add(1);\r\n\r\n                if(_lpHolderTotal / luckyKey == LPNext){\r\n                    rewardLuckyLPH();\r\n                }\r\n            }\r\n            delete lastSender;\r\n        }\r\n    }\r\n\r\n    function _afterTransfer(address sender,address recipient,uint256 amount) internal returns (bool) {\r\n        if(sender == tx.origin &&\r\n            sender != _initPoolHolder &&\r\n            sender != walletM\r\n        ){\r\n            lastSender = sender;\r\n        }\r\n\r\n        if(recipient == tx.origin &&\r\n            recipient != _initPoolHolder &&\r\n            recipient != walletM\r\n        ){\r\n            lastRecipient = recipient;\r\n        }\r\n\r\n        if (recipient == tx.origin) {\r\n            checkMarkUp(recipient,amount);\r\n        }\r\n        //Increase impact reward\r\n        rewardLiquidity();\r\n        return true;\r\n    }\r\n\r\n\r\n    function swapTokensForUSDT() private lockTheSwap{\r\n        uint256 balance =  _balances[address(this)];\r\n        if(_balances[PancakePair] / 100 < balance) balance = _balances[PancakePair] / 100;\r\n\r\n        if(balance >= 40000 * tokenSize){\r\n            uint256 oldBalance = IBEP20(_USDT).balanceOf(address(this));\r\n\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = _USDT;\r\n\r\n            PancakeV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                balance,\r\n                0, // accept any amount of ETH\r\n                path,\r\n                address(_tokenDistributor),\r\n                block.timestamp\r\n            );\r\n\r\n\r\n            uint256 riseNum =  IBEP20(_USDT).balanceOf(address(_tokenDistributor));\r\n            if(riseNum > 0){\r\n                IBEP20(_USDT).transferFrom(\r\n                    address(_tokenDistributor),\r\n                    address(this),\r\n                    riseNum\r\n                );\r\n\r\n                uint256 riseBalance = IBEP20(_USDT).balanceOf(address(this)) - oldBalance;\r\n\r\n                _rise = _rise.add(calculateReward(_Percent,riseBalance,_iPercent));\r\n                _lucky = _lucky.add(calculateReward(_Percent,riseBalance,_gPercent));\r\n                _fund = _fund.add(calculateReward(_Percent,riseBalance,_cPercent));\r\n\r\n                TransferUSDT(walletM, calculateReward(_Percent,riseBalance,_mPercent));\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    //The following formula excludes the marketing address and contract address, which means that all dividend tokens will be distributed fairly and equitably to every average user\r\n    function rewardLiquidity() public  returns (bool) {\r\n            // exclude initial pool holder and locked part.\r\n            uint256 pool = super.getTotalSupply() - (super.getLPTotal(_initPoolHolder) + super.getLPTotal(address(0x0)));\r\n            uint256 reward = _fund;\r\n            if(reward >= rewardMin){ //30u\r\n                for (uint256 index = startIndex; index < _lpHolderTotal; index++) {\r\n                    address  account = _lpHolders[index];\r\n                    uint256 LPHolders = super.getLPTotal(account);\r\n                    if(LPHolders > 0){\r\n                        uint256 r = calculateReward(pool, reward, LPHolders);\r\n                        _fund = _fund.sub(r);\r\n                        TransferUSDT(account,r);\r\n                    }\r\n\r\n                    if(index == _lpHolderTotal - 1){\r\n                        startIndex = 0;\r\n                        return true;\r\n                    }\r\n\r\n                    if(index - startIndex == interval){\r\n                        startIndex += interval;\r\n                        return true;\r\n                    }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function initOldPrice(uint256 initPrice, bool pool)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        oldPrice = initPrice;\r\n        haveLiquidity = pool;\r\n        return true;\r\n    }\r\n\r\n\r\n    function checkMarkUp(address recipient,uint256 amount) internal {\r\n        if (haveLiquidity) {\r\n            uint256 newPrice = exchangeRate();\r\n            if(amount * newPrice < 100 * tokenSize * tokenSize){\r\n                return;\r\n            }\r\n            if (newPrice > oldPrice) {\r\n                uint256 markUp = (((newPrice - oldPrice) * 100) / oldPrice);\r\n                if (markUp >= 10) {\r\n                    oldPrice = newPrice;\r\n                    //send reward\r\n                    rewardMarkUp(recipient);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function rewardMarkUp(address recipient) internal {\r\n        if(_rise > 0) {\r\n            TransferUSDT(recipient,_rise);\r\n            _rise = 0;\r\n        }\r\n    }\r\n\r\n    function rewardLuckyLPH() internal {\r\n        uint256 pool;\r\n        uint256 rewardG = _lucky;\r\n\r\n        if(rewardG > 0){\r\n            uint256 luckLenght = LPNext * 10;\r\n            if(luckLenght > 200) luckLenght = 200; //maximum lucky address\r\n            address[] memory luckys = new address[](luckLenght);\r\n\r\n            for (uint256 index = 0; index < luckLenght; index++) {\r\n                uint256 rIndex = randomNumber(_lpHolderTotal);\r\n                address account = _lpHolders[rIndex];\r\n                if(super.getLPTotal(account) > 0){\r\n                    luckys[index] = account;\r\n                    pool = pool.add(super.getLPTotal(account));\r\n                }\r\n            }\r\n            \r\n            for (uint256 index = 0; index < luckys.length; index++) {\r\n                uint256 LPHolders = super.getLPTotal(luckys[index]);\r\n                uint256 r = calculateReward(pool, rewardG, LPHolders);\r\n                _lucky = _lucky.sub(r);\r\n                TransferUSDT(luckys[index],r);\r\n            }\r\n\r\n            LPNext = LPNext.add(1);\r\n        }\r\n    }\r\n\r\n    function oldPriceView() public view returns (uint256) {\r\n        return oldPrice;\r\n    }\r\n\r\n    //This method returns the exchange rate of Token and USDT\r\n    function exchangeRate() public view returns (uint256) {\r\n        return PancakeV2Router.getAmountsOut(tokenSize, routerPair)[1];\r\n    }\r\n\r\n    function nextLevel() public view returns (uint256) {\r\n        return LPNext;\r\n    }\r\n\r\n    function calculateReward(\r\n        uint256 total,\r\n        uint256 reward,\r\n        uint256 holders\r\n    ) internal view returns (uint256) {\r\n        return (reward * ((holders * tokenSize) / total)) / tokenSize;\r\n    }\r\n\r\n\r\n    /*(random 0 ~ size)*/\r\n    function randomNumber(uint256 randomSize) private returns (uint256) {\r\n        if (randomNonce >= (2**256 - 1)) {\r\n            randomNonce = 0;\r\n        }\r\n        randomNonce += 1;\r\n        uint256 random = uint256(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    block.difficulty  + randomNonce,\r\n                    block.timestamp  + randomNonce,\r\n                    msg.sender\r\n                )\r\n            )\r\n        );\r\n        return random % randomSize;\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"BEP20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(\r\n            amount,\r\n            \"BEP20: burn amount exceeds balance\"\r\n        );\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(\r\n            account,\r\n            _msgSender(),\r\n            _allowances[account][_msgSender()].sub(\r\n                amount,\r\n                \"BEP20: burn amount exceeds allowance\"\r\n            )\r\n        );\r\n    }\r\n\r\n    function batchTransfer(uint256 amount, address[] memory to) public {\r\n        for (uint256 i = 0; i < to.length; i++) {\r\n            _transfer(_msgSender(), to[i], amount);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function mapToV2() public returns (bool) {\r\n        require(owner() != address(0x0), \"err: mapping channel is closed.\");\r\n        uint256 balanceV1 = IBEP20(V1).balanceOf(msg.sender);\r\n        require(balanceV1 > 0,\"BEP20: transfer amount exceeds balance\");\r\n        IBEP20(V1).transferFrom(msg.sender, address(this), balanceV1);\r\n        IBEP20(V1).burn(IBEP20(V1).balanceOf(address(this)));\r\n        _balances[msg.sender] = _balances[msg.sender].add(balanceV1);\r\n        _totalSupply = _totalSupply.add(balanceV1);\r\n        emit Transfer(address(0x0), msg.sender, balanceV1);\r\n        return true;\r\n    }\r\n\r\n\r\n    function TransferUSDT(address account,uint256 amount) internal  {\r\n        IBEP20(_USDT).transfer(account,amount);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PancakePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpHolderTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_lpHolders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lucky\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rise\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"}],\"name\":\"batchTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"WETHAmount\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"TOKENAmount\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"adds\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pool\",\"type\":\"bool\"}],\"name\":\"initOldPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLpHolders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mapToV2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldPriceView\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "WhiteBoxToken", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://60d56901f6f25d20ce88109075119b85c14e062193fd09ecfa0d31d04475b758"}