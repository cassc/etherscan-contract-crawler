{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2021-12-16\r\n*/\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/contracts-v2/AccessControl.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\ncontract AccessControl {\r\n    using SafeERC20 for IERC20;\r\n\r\n    address payable public owner;\r\n\r\n    event SetOperator(address indexed add, bool value);\r\n\r\n    constructor(address _ownerAddress) public {\r\n        owner = payable(_ownerAddress);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function setOwner(address payable _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0));\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function emergencyWithdraw(address _token, address payable _to, uint256 amount) external onlyOwner {\r\n        if (_token == address(0x0)) {\r\n            amount = amount != 0 ? amount : address(this).balance;\r\n            payable(_to).transfer(amount);\r\n        }\r\n        else {\r\n            amount = amount != 0 ? amount : IERC20(_token).balanceOf(address(this));\r\n            IERC20(_token).safeTransfer(_to, amount);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/contracts-v2/LuaVesting.sol\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\ncontract LuaVesting is AccessControl {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    address public IDOContract;\r\n\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        uint256 claimedAmount;\r\n        uint256 claimAtsTime;\r\n    }\r\n\r\n    mapping(address => UserInfo) public info;\r\n    address public idoToken;\r\n    address[] public users;\r\n\r\n    uint256[] public claimPercents;     //[20, 40, 40]\r\n    uint256[] public claimAts;          //[A, B, C]\r\n\r\n    constructor(address _owner, uint256[] memory _claimPercent, uint256[] memory _claimAts, address _idoToken) public AccessControl(_owner) {\r\n        require(_claimAts.length == _claimPercent.length, \"LuaVesting: Wrong data\");\r\n        uint s = 0;\r\n        for (uint i = 0; i < _claimPercent.length; i++) {\r\n            s += _claimPercent[i];\r\n        }\r\n        require(s == 100, \"LuaVesting: Wrong percent\");\r\n        require(_claimAts[0] > 0, \"LuaVesting: Wrong _claimAts[0]\"); // TGE\r\n        claimPercents = _claimPercent;\r\n        claimAts = _claimAts;\r\n        idoToken = _idoToken;\r\n    }\r\n\r\n    modifier onlyIDO() {\r\n        require(msg.sender == IDOContract);\r\n        _;\r\n    }    \r\n\r\n    function getVestingLength() public view returns (uint256) {\r\n        return claimAts.length;\r\n    }\r\n\r\n    function setIDO(address _newIDO) external onlyOwner {\r\n        require(_newIDO != address(0));\r\n        IDOContract = _newIDO;\r\n    }\r\n\r\n    function _estimateClaim(address user, uint blockTime) private view returns (uint256 amount, uint256 claimAt) {\r\n        amount = 0;\r\n        UserInfo memory ui = info[user];\r\n\r\n        claimAt = ui.claimAtsTime;\r\n\r\n        for (uint i = 0; i < claimAts.length; i++) {\r\n            uint b = claimAts[i];\r\n            uint p = claimPercents[i];\r\n\r\n            if (ui.claimAtsTime < b && b < blockTime) {\r\n                if (i <= claimAts.length - 2) {\r\n                    amount += ui.amount.mul(p).div(100);\r\n                }\r\n                else {\r\n                    amount = ui.amount.sub(ui.claimedAmount);\r\n                }\r\n                claimAt = b;\r\n            }\r\n        }\r\n\r\n        if (ui.claimedAmount.add(amount) > ui.amount) {\r\n            amount = ui.amount.sub(ui.claimedAmount);\r\n        }\r\n    }\r\n\r\n    function _claim(address user) private {\r\n        UserInfo storage ui = info[user];\r\n        require(ui.amount > 0, \"LuaVesting: Wrong data\");\r\n        (uint amount, uint claimAt) = _estimateClaim(user, block.timestamp);\r\n\r\n        ui.claimedAmount = ui.claimedAmount.add(amount);\r\n        ui.claimAtsTime = claimAt;\r\n\r\n        IERC20(idoToken).transfer(user, amount);\r\n    }\r\n\r\n    function vestingFor(address add, uint userAmount) public onlyIDO {\r\n        UserInfo storage ui = info[add];\r\n        if (ui.amount == 0) {\r\n            users.push(add);\r\n        }\r\n        ui.amount = ui.amount.add(userAmount);\r\n        _claim(add);\r\n    }\r\n\r\n    function claim() public {\r\n        _claim(msg.sender);\r\n    }\r\n\r\n    function estimateClaim(address user, uint blockTime) public view returns (uint256 amount) {\r\n        (amount, ) = _estimateClaim(user, blockTime);\r\n    }\r\n\r\n    function updateVesting(uint256[] memory _claimPercent, uint256[] memory _claimAts) public onlyOwner {\r\n        require(_claimAts.length == _claimPercent.length, \"LuaVesting: Wrong data\");\r\n        uint s = 0;\r\n        for (uint i = 0; i < _claimPercent.length; i++) {\r\n            s += _claimPercent[i];\r\n        }\r\n        require(s == 100, \"LuaVesting: Wrong percent\");\r\n        require(_claimAts[0] > 0, \"LuaVesting: Wrong _claimAts[0]\"); // TGE\r\n        claimPercents = _claimPercent;\r\n        claimAts = _claimAts;\r\n    }\r\n}\r\n\r\n// File: contracts/contracts-v2/LuaSwapIDO.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract LuaSwapIDO is AccessControl {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct Proof {\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint256 deadline;\r\n    }\r\n\r\n    struct IDO {\r\n        address payable creator;\r\n        address idoToken;\r\n        address payToken;\r\n        uint256 totalAmountIDO;\r\n        uint256 totalAmountPay;\r\n        uint256 minAmountPay;\r\n        uint256 maxAmountPay;\r\n        uint256 openAt;\r\n        uint256 closeAt;\r\n        uint256 claimAt;\r\n        uint256 swappedAmountIDO;\r\n        uint256 swappedAmountPay;\r\n        uint256 totalCommittedAmount;\r\n    }\r\n\r\n    IDO[] public IDOs;\r\n\r\n    // address of user > pool id > value\r\n    mapping(uint256 => address[]) public userCommited;\r\n    mapping(address => mapping(uint256 => uint256)) public userCommitedAmount;\r\n    mapping(address => mapping(uint256 => uint256)) public userSwappedAmountIDO;\r\n    mapping(address => mapping(uint256 => uint256)) public userSwappedAmountPay;\r\n\r\n    address public signer;\r\n    address public signerClaim;\r\n    LuaVesting public vesting;\r\n\r\n    event CreateIDO(uint256 indexed index, address indexed sender, IDO ido);\r\n    event Commit(\r\n        uint256 indexed index,\r\n        address indexed sender,\r\n        uint256 amountPay\r\n    );\r\n    event RemoveCommitment(\r\n        uint256 indexed index,\r\n        address indexed sender,\r\n        uint256 amountPay\r\n    );\r\n    event CreatorClaim(\r\n        uint256 indexed index,\r\n        address indexed sender,\r\n        uint256 amountIDO\r\n    );\r\n    event UserClaim(\r\n        uint256 indexed index,\r\n        address indexed sender,\r\n        uint256 amountIDO\r\n    );\r\n\r\n    constructor(address _owner, address _vesting, address _signer, address _signerClaim) public AccessControl(_owner)  {\r\n        vesting = LuaVesting(_vesting);\r\n        signer = _signer;\r\n        signerClaim = _signerClaim;\r\n    }\r\n\r\n    function setVesting(address _newVesting) external onlyOwner {\r\n        vesting = LuaVesting(_newVesting);\r\n    }        \r\n\r\n    modifier isOpening(uint256 index) {\r\n        IDO memory ido = IDOs[index];\r\n        require(\r\n            ido.openAt <= block.timestamp && block.timestamp < ido.closeAt,\r\n            \"POOL SHOULD BE OPENED\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier notOpen(uint256 index) {\r\n        IDO memory ido = IDOs[index];\r\n        require(\r\n            block.timestamp < ido.openAt,\r\n            \"POOL SHOULD BE NOT OPEN\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier closed(uint256 index) {\r\n        require(\r\n            IDOs[index].closeAt <= block.timestamp,\r\n            \"POOL SHOULD BE CLOSED\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier canClaim(uint256 index) {\r\n        require(\r\n            IDOs[index].claimAt == 0 || IDOs[index].claimAt <= block.timestamp,\r\n            \"CANNOT CLAIM\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier existIDO(uint256 index) {\r\n        require(index < IDOs.length, \"POOL SHOULD EXIST\");\r\n        _;\r\n    }\r\n\r\n    function getChainID() private pure returns (uint256) {\r\n        uint256 id;\r\n        assembly {\r\n            id := chainid()\r\n        }\r\n        return id;\r\n    }\r\n\r\n    function verifyProof(address _signer, bytes memory _encode, Proof memory _proof) private view returns (bool) {\r\n        if (_signer == address(0x0)) {\r\n            return true;\r\n        }\r\n        bytes32 digest = keccak256(abi.encodePacked(getChainID(), address(this), _proof.deadline, _encode));\r\n        address signatory = ecrecover(digest, _proof.v, _proof.r, _proof.s);\r\n        return signatory == _signer && _proof.deadline >= block.timestamp;\r\n    }\r\n\r\n    function numberOfIDO() public view returns (uint256) {\r\n        return IDOs.length;\r\n    }\r\n\r\n    function numberOfUserCommitted(uint idoIndex) public view returns (uint256) {\r\n        return userCommited[idoIndex].length;\r\n    }\r\n\r\n    function listUserCommitted(uint idoIndex) public view returns (address[] memory) {\r\n        return userCommited[idoIndex];\r\n    }\r\n\r\n    function setSigner(address _signer) public onlyOwner {\r\n        signer = _signer;\r\n    }\r\n\r\n    function setSignerClaim(address _signer) public onlyOwner {\r\n        signerClaim = _signer;\r\n    }\r\n\r\n    function transferHelper(\r\n        address token,\r\n        address payable add,\r\n        uint256 amount\r\n    ) private {\r\n        if (token == address(0)) {\r\n            add.transfer(amount);\r\n        } else {\r\n            IERC20(token).transfer(add, amount);\r\n        }\r\n    }\r\n\r\n    function createIDO(\r\n        address payable creator,\r\n        address idoToken,\r\n        address payToken,\r\n        uint256 totalAmountIDO,\r\n        uint256 totalAmountPay,\r\n        uint256 minAmountPay,\r\n        uint256 maxAmountPay,\r\n        uint256 openAt,\r\n        uint256 closeAt,\r\n        uint256 claimAt\r\n    ) public onlyOwner {\r\n        require(idoToken != address(0), \"idoToken is wrong\");\r\n        require(\r\n            idoToken != payToken,\r\n            \"idoToken AND payToken SHOULD BE DIFFERENT\"\r\n        );\r\n        require(totalAmountIDO != 0, \"INVALID TOTAL AMOUNT OF totalAmountIDO\");\r\n        require(totalAmountPay != 0, \"INVALID TOTAL AMOUNT OF totalAmountPay\");\r\n        // require(totalAmountIDO % totalAmountPay == 0,\"NOT INTEGER RATIO\");\r\n\r\n        require(\r\n            minAmountPay <= maxAmountPay,\r\n            \"INVALID minAmountPay AND maxAmountPay\"\r\n        );\r\n\r\n        require(openAt > block.timestamp, \"INVALID OPEN_AT\");\r\n        require(closeAt > openAt, \"INVALID CLOSE_AT\");\r\n        require(claimAt > closeAt, \"INVALID CLAIM_AT\");\r\n\r\n        // IERC20(idoToken).safeTransferFrom(creator, address(this), totalAmountIDO);\r\n\r\n        uint256 index = IDOs.length;\r\n        IDO memory ido =\r\n            IDO({\r\n                creator: creator,\r\n                idoToken: idoToken,\r\n                payToken: payToken,\r\n                totalAmountIDO: totalAmountIDO,\r\n                totalAmountPay: totalAmountPay,\r\n                swappedAmountIDO: 0,\r\n                swappedAmountPay: 0,\r\n                totalCommittedAmount: 0,\r\n                minAmountPay: minAmountPay,\r\n                maxAmountPay: maxAmountPay,\r\n                openAt: openAt,\r\n                closeAt: closeAt,\r\n                claimAt: claimAt\r\n            });\r\n\r\n        IDOs.push(ido);\r\n\r\n        emit CreateIDO(index, msg.sender, ido);\r\n    }\r\n\r\n    function increaseCap(uint256 index, uint256 amountIDO, uint256 amountPay) public \r\n        onlyOwner \r\n        existIDO(index) {\r\n        IDO storage ido = IDOs[index];\r\n        // require(ido.totalAmountIDO.div(ido.totalAmountPay) == amountIDO.div(amountPay), \"WRONG AMOUNT\");\r\n        // require(amountIDO % amountPay == 0, \"NOT INTEGER RATIO\");\r\n        \r\n        // IERC20(ido.idoToken).safeTransferFrom(ido.creator, address(this), amountIDO);\r\n        \r\n        ido.totalAmountIDO = ido.totalAmountIDO.add(amountIDO);\r\n        ido.totalAmountPay = ido.totalAmountPay.add(amountPay);\r\n    }\r\n\r\n    function decreaseCap(uint256 index, uint256 amountIDO, uint256 amountPay) public\r\n        onlyOwner\r\n        existIDO(index) {\r\n        IDO storage ido = IDOs[index];\r\n        uint256 n =  numberOfUserCommitted(index);\r\n        // require(ido.totalAmountIDO.div(ido.totalAmountPay) == amountIDO.div(amountPay), \"WRONG AMOUNT 1\");\r\n        // require(amountIDO % amountPay == 0, \"NOT INTEGER RATIO\");\r\n        \r\n        require(ido.minAmountPay.mul(n) <= ido.totalAmountPay.sub(amountPay), \"WRONG AMOUNT 2\");\r\n        require(ido.totalAmountIDO.sub(amountIDO) >= ido.swappedAmountIDO, \"WRONG AMOUNT 3\");\r\n\r\n        // IERC20(ido.idoToken).transfer(ido.creator, amountIDO);\r\n\r\n        ido.totalAmountIDO = ido.totalAmountIDO.sub(amountIDO);\r\n        ido.totalAmountPay = ido.totalAmountPay.sub(amountPay);\r\n    }\r\n\r\n    function updateInfo(uint index, uint256 minAmountPay, uint256 maxAmountPay, uint256 openAt, uint256 closeAt, uint256 claimAt) public \r\n        onlyOwner() \r\n        existIDO(index)\r\n        notOpen(index) {\r\n        IDO storage ido = IDOs[index];\r\n        ido.minAmountPay = minAmountPay;\r\n        ido.maxAmountPay = maxAmountPay;\r\n        ido.openAt = openAt;\r\n        ido.closeAt = closeAt;\r\n        ido.claimAt = claimAt;\r\n    }\r\n\r\n    function commit(\r\n        uint256 index,\r\n        uint256 amount,\r\n        Proof memory _proof\r\n    ) public payable existIDO(index) isOpening(index) {\r\n        require(amount > 0, \"AMOUNT MUST BE GREATER THAN 0\");\r\n        require(\r\n            verifyProof(signer, abi.encodePacked(uint(0x1), index, msg.sender, amount), _proof),\r\n            \"WRONG PROOF\"\r\n        );\r\n        \r\n        IDO storage ido = IDOs[index];\r\n\r\n        uint256 n =  numberOfUserCommitted(index);\r\n        uint256 commitedAmount = userCommitedAmount[msg.sender][index];\r\n        uint256 newCommitedAmount = commitedAmount.add(amount);\r\n        require(\r\n            ido.minAmountPay <= newCommitedAmount && newCommitedAmount <= ido.maxAmountPay,\r\n            \"WRONG AMOUNT\"\r\n        );\r\n        require(\r\n            ido.minAmountPay.mul(n + 1) <= ido.totalAmountPay,\r\n            \"CANNOT COMMIT\"\r\n        );\r\n\r\n        if (ido.payToken == address(0)) {\r\n            require(msg.value == amount, \"INVALID MSG.VALUE\");\r\n        } else {\r\n            require(msg.value == 0, \"MSG.VALUE SHOULD BE ZERO\");\r\n            IERC20(ido.payToken).safeTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                amount\r\n            );\r\n        }\r\n\r\n        // the first commit\r\n        if (commitedAmount == 0) {\r\n            userCommited[index].push(msg.sender); //accept duplicate\r\n        }\r\n\r\n        userCommitedAmount[msg.sender][index] = commitedAmount.add(amount);\r\n        ido.totalCommittedAmount = ido.totalCommittedAmount.add(amount);\r\n\r\n        emit Commit(index, msg.sender, amount);\r\n    }\r\n\r\n    function removeCommitment(\r\n        uint256 index,\r\n        uint256 amount,\r\n        uint256 removeIndex,\r\n        Proof memory _proof\r\n    ) public existIDO(index) {\r\n        require(\r\n            verifyProof(\r\n                signer,\r\n                abi.encodePacked(uint(0x2), index, msg.sender, amount),\r\n                _proof\r\n            ),\r\n            \"WRONG PROOF\"\r\n        );\r\n\r\n        IDO storage ido = IDOs[index];\r\n        uint256 commitedAmount = userCommitedAmount[msg.sender][index];\r\n        require(amount <= commitedAmount, \"WRONG AMOUNT\");\r\n        require(userCommited[index][removeIndex] == msg.sender, \"WRONG REMOVE INDEX\");\r\n        \r\n        uint256 newCommitedAmount = commitedAmount.sub(amount);\r\n        require(newCommitedAmount == 0 || newCommitedAmount >= ido.minAmountPay, \"NOT GOOD COMMITTED AMOUNT\");\r\n\r\n        userCommitedAmount[msg.sender][index] = commitedAmount.sub(amount);\r\n        ido.totalCommittedAmount = ido.totalCommittedAmount.sub(amount);\r\n\r\n        if (newCommitedAmount == 0) {\r\n            uint256 lastIndex = userCommited[index].length - 1;\r\n            address lastAddress = userCommited[index][lastIndex];\r\n            userCommited[index][removeIndex] = lastAddress;\r\n            userCommited[index].pop();\r\n        }\r\n\r\n        transferHelper(ido.payToken, msg.sender, amount);\r\n\r\n        emit RemoveCommitment(index, msg.sender, amount);\r\n    }\r\n\r\n    function userClaim(\r\n        uint256 index,\r\n        address payable user,\r\n        uint256 payAmount,\r\n        Proof memory _proof\r\n    ) public existIDO(index) canClaim(index) {\r\n        require(address(vesting) != address(0x0), \"MISSING vesting contract\");        \r\n        require(\r\n            verifyProof(signerClaim, abi.encodePacked(uint(0x3), index, user, payAmount), _proof),\r\n            \"WRONG PROOF\"\r\n        );\r\n        IDO storage ido = IDOs[index];\r\n        uint256 commitedAmount = userCommitedAmount[user][index];\r\n        require(vesting.idoToken() == ido.idoToken, \"LuaSwapIDO: Wrong token in vesting\");        \r\n        require(0 < commitedAmount, \"NO COMMITED AMOUNT\");\r\n        require(payAmount <= commitedAmount, \"WRONG PAY AMOUNT\");\r\n\r\n        uint256 idoAmount = payAmount\r\n            .mul(ido.totalAmountIDO)\r\n            .div(ido.totalAmountPay);\r\n        uint256 returnAmount = commitedAmount.sub(payAmount);\r\n        uint256 _amount0 = ido.totalAmountIDO.sub(ido.swappedAmountIDO);\r\n        require(idoAmount <= _amount0, \"PAY AMOUNT TOO BIG\");\r\n\r\n        userCommitedAmount[user][index] = 0;\r\n        ido.totalCommittedAmount = ido.totalCommittedAmount.sub(commitedAmount);\r\n        \r\n        ido.swappedAmountIDO = ido.swappedAmountIDO.add(idoAmount);\r\n        ido.swappedAmountPay = ido.swappedAmountPay.add(payAmount);\r\n        userSwappedAmountIDO[user][index] = userSwappedAmountIDO[user][index].add(idoAmount);\r\n        userSwappedAmountPay[user][index] = userSwappedAmountPay[user][index].add(payAmount);\r\n\r\n        if (returnAmount > 0) {\r\n            transferHelper(ido.payToken, user, returnAmount);\r\n        }\r\n\r\n        if (payAmount > 0) {\r\n            transferHelper(ido.payToken, ido.creator, payAmount);\r\n        }\r\n\r\n        if (idoAmount > 0) {\r\n            vesting.vestingFor(user, idoAmount);\r\n        }\r\n\r\n        emit UserClaim(index, user, idoAmount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vesting\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signerClaim\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPay\",\"type\":\"uint256\"}],\"name\":\"Commit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"idoToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountIDO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountPay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountPay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountPay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swappedAmountIDO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swappedAmountPay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCommittedAmount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct LuaSwapIDO.IDO\",\"name\":\"ido\",\"type\":\"tuple\"}],\"name\":\"CreateIDO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIDO\",\"type\":\"uint256\"}],\"name\":\"CreatorClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPay\",\"type\":\"uint256\"}],\"name\":\"RemoveCommitment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIDO\",\"type\":\"uint256\"}],\"name\":\"UserClaim\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"IDOs\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"idoToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountIDO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountPay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountPay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountPay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swappedAmountIDO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swappedAmountPay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCommittedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct LuaSwapIDO.Proof\",\"name\":\"_proof\",\"type\":\"tuple\"}],\"name\":\"commit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"idoToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountIDO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountPay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountPay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountPay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimAt\",\"type\":\"uint256\"}],\"name\":\"createIDO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIDO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPay\",\"type\":\"uint256\"}],\"name\":\"decreaseCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIDO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPay\",\"type\":\"uint256\"}],\"name\":\"increaseCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idoIndex\",\"type\":\"uint256\"}],\"name\":\"listUserCommitted\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfIDO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idoIndex\",\"type\":\"uint256\"}],\"name\":\"numberOfUserCommitted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"removeIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct LuaSwapIDO.Proof\",\"name\":\"_proof\",\"type\":\"tuple\"}],\"name\":\"removeCommitment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSignerClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newVesting\",\"type\":\"address\"}],\"name\":\"setVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signerClaim\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountPay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountPay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimAt\",\"type\":\"uint256\"}],\"name\":\"updateInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct LuaSwapIDO.Proof\",\"name\":\"_proof\",\"type\":\"tuple\"}],\"name\":\"userClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userCommited\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userCommitedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userSwappedAmountIDO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userSwappedAmountPay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vesting\",\"outputs\":[{\"internalType\":\"contract LuaVesting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LuaSwapIDO", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ea7d9225f74bf8206ac8d9ad358b7cc2c716ee89000000000000000000000000e5bea34577130a97335434042299562e990a94ab00000000000000000000000061368cf3678eafff890782a28bd50daf2d482a8800000000000000000000000061368cf3678eafff890782a28bd50daf2d482a88", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e860fb3cda163d89be80c3c2dde081e450d7b08b3d8dd18ada28ebb63674214e"}