{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Flattened.sol\": {\r\n      \"content\": \"// Sources flattened with hardhat v2.10.1 https://hardhat.org\\n\\n// File @openzeppelin/contracts/proxy/Proxy.sol@v4.7.2\\n\\n\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\\n\\n// File @openzeppelin/contracts/proxy/beacon/IBeacon.sol@v4.7.2\\n\\n\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\\n\\n// File @openzeppelin/contracts/interfaces/draft-IERC1822.sol@v4.7.2\\n\\n\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Address.sol@v4.7.2\\n\\n\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/StorageSlot.sol@v4.7.2\\n\\n\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol@v4.7.2\\n\\n\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\n\\n\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol@v4.7.2\\n\\n\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol@v4.7.2\\n\\n\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\\n\\n// File @openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol@v4.7.2\\n\\n\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\\n\\n// File @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol@v4.7.2\\n\\n\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol@v4.7.2\\n\\n\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol@v4.7.2\\n\\n\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol@v4.7.2\\n\\n\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\n\\n\\n\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\\n\\n// File @openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol@v4.7.2\\n\\n\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\\n\\n// File contracts/Swap/IMesonSwapEvents.sol\\n\\n\\npragma solidity 0.8.16;\\n\\n/// @title MesonSwapEvents Interface\\ninterface IMesonSwapEvents {\\n  /// @notice Event when a swap request was posted.\\n  /// Emit at the end of `postSwap()` calls.\\n  /// @param encodedSwap Encoded swap\\n  event SwapPosted(uint256 indexed encodedSwap);\\n\\n  /// @notice Event when a swap request was bonded.\\n  /// Emit at the end of `bondSwap()` calls.\\n  /// @param encodedSwap Encoded swap\\n  event SwapBonded(uint256 indexed encodedSwap);\\n\\n  /// @notice Event when a swap request was cancelled.\\n  /// Emit at the end of `cancelSwap()` calls.\\n  /// @param encodedSwap Encoded swap\\n  event SwapCancelled(uint256 indexed encodedSwap);\\n}\\n\\n\\n// File contracts/utils/MesonTokens.sol\\n\\n\\npragma solidity 0.8.16;\\n\\n/// @title MesonTokens\\n/// @notice The class that stores the information of Meson's supported tokens\\ncontract MesonTokens {\\n  /// @notice The whitelist of supported tokens in Meson\\n  /// Meson use a whitelist for supported stablecoins, which is specified on first deployment\\n  /// or added through `_addSupportToken` Only modify this mapping through `_addSupportToken`.\\n  /// key: `tokenIndex` in range of 1-255; zero means unsupported\\n  /// value: the supported token's contract address\\n  mapping(uint8 => address) public tokenForIndex;\\n\\n\\n  /// @notice The mapping to get `tokenIndex` from a supported token's address\\n  /// Only modify this mapping through `_addSupportToken`.\\n  /// key: the supported token's contract address\\n  /// value: `tokenIndex` in range of 1-255; zero means unsupported\\n  mapping(address => uint8) public indexOfToken;\\n\\n  /// @dev This empty reserved space is put in place to allow future versions to\\n  /// add new variables without shifting down storage in the inheritance chain.\\n  /// See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n  uint256[50] private __gap;\\n\\n  /// @notice Return all supported token addresses in an array ordered by `tokenIndex`\\n  /// This method will only return tokens with consecutive token indexes.\\n  function getSupportedTokens() external view returns (address[] memory tokens, uint8[] memory indexes) {\\n    uint8 i;\\n    uint8 num;\\n    for (i = 0; i < 255; i++) {\\n      if (tokenForIndex[i+1] != address(0)) {\\n        num++;\\n      }\\n    }\\n    tokens = new address[](num);\\n    indexes = new uint8[](num);\\n    uint8 j = 0;\\n    for (i = 0; i < 255; i++) {\\n      if (tokenForIndex[i+1] != address(0)) {\\n        tokens[j] = tokenForIndex[i+1];\\n        indexes[j] = i+1;\\n        j++;\\n      }\\n    }\\n  }\\n\\n  function _addSupportToken(address token, uint8 index) internal {\\n    require(index != 0, \\\"Cannot use 0 as token index\\\");\\n    require(token != address(0), \\\"Cannot use zero address\\\");\\n    require(indexOfToken[token] == 0, \\\"Token has been added before\\\");\\n    require(tokenForIndex[index] == address(0), \\\"Index has been used\\\");\\n    indexOfToken[token] = index;\\n    tokenForIndex[index] = token;\\n  }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Context.sol@v4.7.2\\n\\n\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File contracts/utils/IERC20Minimal.sol\\n\\n// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Minimal ERC20 interface for Uniswap\\n/// @notice Contains a subset of the full ERC20 interface that is used in Uniswap V3\\ninterface IERC20Minimal {\\n  /// @notice Returns the balance of a token\\n  /// @param account The account for which to look up the number of tokens it has, i.e. its balance\\n  /// @return The number of tokens held by the account\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /// @notice Transfers the amount of token from the `msg.sender` to the recipient\\n  /// @param recipient The account that will receive the amount transferred\\n  /// @param amount The number of tokens to send from the sender to the recipient\\n  /// @return Returns true for a successful transfer, false for an unsuccessful transfer\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /// @notice Returns the current allowance given to a spender by an owner\\n  /// @param owner The account of the token owner\\n  /// @param spender The account of the token spender\\n  /// @return The current allowance granted by `owner` to `spender`\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\\n  /// @param spender The account which will be allowed to spend a given amount of the owners tokens\\n  /// @param amount The amount of tokens allowed to be used by `spender`\\n  /// @return Returns true for a successful approval, false for unsuccessful\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\\n  /// @param sender The account from which the transfer will be initiated\\n  /// @param recipient The recipient of the transfer\\n  /// @param amount The amount of the transfer\\n  /// @return Returns true for a successful transfer, false for unsuccessful\\n  function transferFrom(\\n      address sender,\\n      address recipient,\\n      uint256 amount\\n  ) external returns (bool);\\n\\n  /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\\n  /// @param from The account from which the tokens were sent, i.e. the balance decreased\\n  /// @param to The account to which the tokens were sent, i.e. the balance increased\\n  /// @param value The amount of tokens that were transferred\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\\n  /// @param owner The account that approved spending of its tokens\\n  /// @param spender The account for which the spending allowance was modified\\n  /// @param value The new allowance from the owner to the spender\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n// File contracts/utils/ITransferWithBeneficiary.sol\\n\\n\\npragma solidity 0.8.16;\\n\\n/// @title Interface for transferWithBeneficiary\\ninterface ITransferWithBeneficiary {\\n  /// @notice Make a token transfer that the *signer* is paying tokens but benefits are given to the *beneficiary*\\n  /// @param token The contract address of the transferring token\\n  /// @param amount The amount of the transfer\\n  /// @param beneficiary The address that will receive benefits of this transfer\\n  /// @param data Extra data passed to the contract\\n  /// @return Returns true for a successful transfer.\\n  function transferWithBeneficiary(address token, uint256 amount, address beneficiary, uint64 data) external returns (bool);\\n}\\n\\n\\n// File contracts/utils/MesonConfig.sol\\n\\n\\npragma solidity 0.8.16;\\n\\n/// @notice Parameters of the Meson contract\\n/// for BNB Chain\\ncontract MesonConfig {\\n  uint8 constant MESON_PROTOCOL_VERSION = 1;\\n\\n  // Ref https://github.com/satoshilabs/slips/blob/master/slip-0044.md\\n  uint16 constant SHORT_COIN_TYPE = 0x02ca;\\n\\n  uint256 constant MAX_SWAP_AMOUNT = 1e11; // 100,000.000000 = 100k\\n  uint256 constant SERVICE_FEE_RATE = 10; // service fee = 10 / 10000 = 0.1%\\n\\n  uint256 constant MIN_BOND_TIME_PERIOD = 1 hours;\\n  uint256 constant MAX_BOND_TIME_PERIOD = 2 hours;\\n  uint256 constant LOCK_TIME_PERIOD = 20 minutes;\\n\\n  bytes28 constant ETH_SIGN_HEADER = bytes28(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\");\\n  bytes28 constant ETH_SIGN_HEADER_52 = bytes28(\\\"\\\\x19Ethereum Signed Message:\\\\n52\\\");\\n  bytes25 constant TRON_SIGN_HEADER = bytes25(\\\"\\\\x19TRON Signed Message:\\\\n32\\\\n\\\");\\n  bytes25 constant TRON_SIGN_HEADER_33 = bytes25(\\\"\\\\x19TRON Signed Message:\\\\n33\\\\n\\\");\\n  bytes25 constant TRON_SIGN_HEADER_53 = bytes25(\\\"\\\\x19TRON Signed Message:\\\\n53\\\\n\\\");\\n\\n  bytes32 constant REQUEST_TYPE_HASH = keccak256(\\\"bytes32 Sign to request a swap on Meson\\\");\\n  bytes32 constant RELEASE_TYPE_HASH = keccak256(\\\"bytes32 Sign to release a swap on Mesonaddress Recipient\\\");\\n\\n  bytes32 constant RELEASE_TO_TRON_TYPE_HASH = keccak256(\\\"bytes32 Sign to release a swap on Mesonaddress Recipient (tron address in hex format)\\\");\\n}\\n\\n\\n// File contracts/utils/MesonHelpers.sol\\n\\n\\npragma solidity 0.8.16;\\n\\n\\n\\n\\n\\n/// @title MesonHelpers\\n/// @notice The class that provides helper functions for Meson protocol\\ncontract MesonHelpers is MesonConfig, Context {\\n  bytes4 private constant ERC20_TRANSFER_SELECTOR = bytes4(keccak256(\\\"transfer(address,uint256)\\\"));\\n  bytes4 private constant ERC20_TRANSFER_FROM_SELECTOR = bytes4(keccak256(\\\"transferFrom(address,address,uint256)\\\"));\\n\\n  modifier matchProtocolVersion(uint256 encodedSwap) {\\n    require(_versionFrom(encodedSwap) == MESON_PROTOCOL_VERSION, \\\"Incorrect encoding version\\\");\\n    _;\\n  }\\n\\n  function getShortCoinType() external pure returns (bytes2) {\\n    return bytes2(SHORT_COIN_TYPE);\\n  }\\n\\n  /// @notice Safe transfers tokens from Meson contract to a recipient\\n  /// for interacting with ERC20 tokens that do not consistently return true/false\\n  /// @param token The contract address of the token which will be transferred\\n  /// @param recipient The recipient of the transfer\\n  /// @param amount The value of the transfer (always in decimal 6)\\n  /// @param tokenIndex The index of token. See `tokenForIndex` in `MesonTokens.sol`\\n  function _safeTransfer(\\n    address token,\\n    address recipient,\\n    uint256 amount,\\n    uint8 tokenIndex\\n  ) internal {\\n    require(Address.isContract(token), \\\"The given token address is not a contract\\\");\\n\\n    if (_needAdjustAmount(tokenIndex)) {\\n      amount *= 1e12;\\n    }\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(\\n      ERC20_TRANSFER_SELECTOR,\\n      recipient,\\n      amount\\n    ));\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"transfer failed\\\");\\n\\n    // The above do not support Tron, so need to switch to the next line if deploying to Tron\\n    // IERC20Minimal(token).transfer(recipient, amount);\\n  }\\n\\n  /// @notice Transfer tokens to a contract using `transferWithBeneficiary`\\n  /// @param token The contract address of the token which will be transferred\\n  /// @param contractAddr The smart contract address that will receive transferring tokens\\n  /// @param beneficiary The beneficiary of `transferWithBeneficiary`\\n  /// @param amount The value of the transfer (always in decimal 6)\\n  /// @param tokenIndex The index of token. See `tokenForIndex` in `MesonTokens.sol`\\n  /// @param data Extra data passed to the contract\\n  function _transferToContract(\\n    address token,\\n    address contractAddr,\\n    address beneficiary,\\n    uint256 amount,\\n    uint8 tokenIndex,\\n    uint64 data\\n  ) internal {\\n    require(Address.isContract(token), \\\"The given token address is not a contract\\\");\\n    require(Address.isContract(contractAddr), \\\"The given recipient address is not a contract\\\");\\n\\n    if (_needAdjustAmount(tokenIndex)) {\\n      amount *= 1e12;\\n    }\\n    IERC20Minimal(token).approve(contractAddr, amount);\\n    ITransferWithBeneficiary(contractAddr).transferWithBeneficiary(token, amount, beneficiary, data);\\n  }\\n\\n  /// @notice Help the senders to transfer their assets to the Meson contract\\n  /// @param token The contract address of the token which will be transferred\\n  /// @param sender The sender of the transfer\\n  /// @param amount The value of the transfer (always in decimal 6)\\n  /// @param tokenIndex The index of token. See `tokenForIndex` in `MesonTokens.sol`\\n  function _unsafeDepositToken(\\n    address token,\\n    address sender,\\n    uint256 amount,\\n    uint8 tokenIndex\\n  ) internal {\\n    require(token != address(0), \\\"Token not supported\\\");\\n    require(amount > 0, \\\"Amount must be greater than zero\\\");\\n    require(Address.isContract(token), \\\"The given token address is not a contract\\\");\\n\\n    if (_needAdjustAmount(tokenIndex)) {\\n      amount *= 1e12;\\n    }\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(\\n      ERC20_TRANSFER_FROM_SELECTOR,\\n      sender,\\n      address(this),\\n      amount\\n    ));\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"transferFrom failed\\\");\\n  }\\n\\n  /// @notice Determine if token has decimal 18 and therefore need to adjust amount\\n  /// @param tokenIndex The index of token. See `tokenForIndex` in `MesonTokens.sol`\\n  function _needAdjustAmount(uint8 tokenIndex) internal pure returns (bool) {\\n    return tokenIndex > 32 && tokenIndex < 255;\\n  }\\n\\n  /// @notice Calculate `swapId` from `encodedSwap`, `initiator`\\n  /// See variable `_postedSwaps` in `MesonSwap.sol` for the defination of `encodedSwap`\\n  function _getSwapId(uint256 encodedSwap, address initiator) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(encodedSwap, initiator));\\n  }\\n\\n  /// @notice Decode `version` from `encodedSwap`\\n  /// See variable `_postedSwaps` in `MesonSwap.sol` for the defination of `encodedSwap`\\n  function _versionFrom(uint256 encodedSwap) internal pure returns (uint8) {\\n    return uint8(encodedSwap >> 248);\\n  }\\n\\n  /// @notice Decode `amount` from `encodedSwap`\\n  /// See variable `_postedSwaps` in `MesonSwap.sol` for the defination of `encodedSwap`\\n  function _amountFrom(uint256 encodedSwap) internal pure returns (uint256) {\\n    return (encodedSwap >> 208) & 0xFFFFFFFFFF;\\n  }\\n\\n  /// @notice Calculate the service fee from `encodedSwap`\\n  /// See variable `_postedSwaps` in `MesonSwap.sol` for the defination of `encodedSwap`\\n  function _serviceFee(uint256 encodedSwap) internal pure returns (uint256) {\\n    return _amountFrom(encodedSwap) * SERVICE_FEE_RATE / 10000; // Default to `serviceFee` = 0.1% * `amount`\\n  }\\n\\n  /// @notice Decode `fee` (the fee for LPs) from `encodedSwap`\\n  /// See variable `_postedSwaps` in `MesonSwap.sol` for the defination of `encodedSwap`\\n  function _feeForLp(uint256 encodedSwap) internal pure returns (uint256) {\\n    return (encodedSwap >> 88) & 0xFFFFFFFFFF;\\n  }\\n\\n  /// @notice Decode `salt` from `encodedSwap`\\n  /// See variable `_postedSwaps` in `MesonSwap.sol` for the defination of `encodedSwap`\\n  function _saltFrom(uint256 encodedSwap) internal pure returns (uint80) {\\n    return uint80(encodedSwap >> 128);\\n  }\\n\\n  /// @notice Decode data from `salt`\\n  /// See variable `_postedSwaps` in `MesonSwap.sol` for the defination of `encodedSwap`\\n  function _saltDataFrom(uint256 encodedSwap) internal pure returns (uint64) {\\n    return uint64(encodedSwap >> 128);\\n  }\\n\\n  /// @notice Whether the swap should release to a 3rd-party integrated dapp contract\\n  /// See method `release` in `MesonPools.sol` for more details\\n  function _willTransferToContract(uint256 encodedSwap) internal pure returns (bool) {\\n    return (encodedSwap & 0x8000000000000000000000000000000000000000000000000000) == 0;\\n  }\\n\\n  /// @notice Whether the swap needs to pay service fee\\n  /// See method `release` in `MesonPools.sol` for more details about the service fee\\n  function _feeWaived(uint256 encodedSwap) internal pure returns (bool) {\\n    return (encodedSwap & 0x4000000000000000000000000000000000000000000000000000) > 0;\\n  }\\n  \\n  /// @notice Whether the swap was signed in the non-typed manner (usually by hardware wallets)\\n  function _signNonTyped(uint256 encodedSwap) internal pure returns (bool) {\\n    return (encodedSwap & 0x0800000000000000000000000000000000000000000000000000) > 0;\\n  }\\n\\n  /// @notice Decode `expireTs` from `encodedSwap`\\n  /// See variable `_postedSwaps` in `MesonSwap.sol` for the defination of `encodedSwap`\\n  function _expireTsFrom(uint256 encodedSwap) internal pure returns (uint256) {\\n    return (encodedSwap >> 48) & 0xFFFFFFFFFF;\\n    // [Suggestion]: return uint40(encodedSwap >> 48);\\n  }\\n\\n  /// @notice Decode the initial chain (`inChain`) from `encodedSwap`\\n  /// See variable `_postedSwaps` in `MesonSwap.sol` for the defination of `encodedSwap`\\n  function _inChainFrom(uint256 encodedSwap) internal pure returns (uint16) {\\n    return uint16(encodedSwap >> 8);\\n  }\\n\\n  /// @notice Decode the token index of initial chain (`inToken`) from `encodedSwap`\\n  /// See variable `_postedSwaps` in `MesonSwap.sol` for the defination of `encodedSwap`\\n  function _inTokenIndexFrom(uint256 encodedSwap) internal pure returns (uint8) {\\n    return uint8(encodedSwap);\\n  }\\n\\n  /// @notice Decode the target chain (`outChain`) from `encodedSwap`\\n  /// See variable `_postedSwaps` in `MesonSwap.sol` for the defination of `encodedSwap`\\n  function _outChainFrom(uint256 encodedSwap) internal pure returns (uint16) {\\n    return uint16(encodedSwap >> 32);\\n  }\\n\\n  /// @notice Decode the token index of target chain (`outToken`) from `encodedSwap`\\n  /// See variable `_postedSwaps` in `MesonSwap.sol` for the defination of `encodedSwap`\\n  function _outTokenIndexFrom(uint256 encodedSwap) internal pure returns (uint8) {\\n    return uint8(encodedSwap >> 24);\\n  }\\n\\n  /// @notice Decode `outToken` from `encodedSwap`, and encode it with `poolIndex` to `poolTokenIndex`.\\n  /// See variable `_balanceOfPoolToken` in `MesonStates.sol` for the defination of `poolTokenIndex`\\n  function _poolTokenIndexForOutToken(uint256 encodedSwap, uint40 poolIndex) internal pure returns (uint48) {\\n    return uint48((encodedSwap & 0xFF000000) << 16) | poolIndex;\\n  }\\n\\n  /// @notice Decode `initiator` from `postedSwap`\\n  /// See variable `_postedSwaps` in `MesonSwap.sol` for the defination of `postedSwap`\\n  function _initiatorFromPosted(uint200 postedSwap) internal pure returns (address) {\\n    return address(uint160(postedSwap >> 40));\\n  }\\n\\n  /// @notice Decode `poolIndex` from `postedSwap`\\n  /// See variable `_postedSwaps` in `MesonSwap.sol` for the defination of `postedSwap`\\n  function _poolIndexFromPosted(uint200 postedSwap) internal pure returns (uint40) {\\n    return uint40(postedSwap);\\n  }\\n  \\n  /// @notice Encode `lockedSwap` from `until` and `poolIndex`\\n  /// See variable `_lockedSwaps` in `MesonPools.sol` for the defination of `lockedSwap`\\n  function _lockedSwapFrom(uint256 until, uint40 poolIndex) internal pure returns (uint80) {\\n    return (uint80(until) << 40) | poolIndex;\\n  }\\n\\n  /// @notice Decode `poolIndex` from `lockedSwap`\\n  /// See variable `_lockedSwaps` in `MesonPools.sol` for the defination of `lockedSwap`\\n  function _poolIndexFromLocked(uint80 lockedSwap) internal pure returns (uint40) {\\n    return uint40(lockedSwap);\\n  }\\n\\n  /// @notice Decode `until` from `lockedSwap`\\n  /// See variable `_lockedSwaps` in `MesonPools.sol` for the defination of `lockedSwap`\\n  function _untilFromLocked(uint80 lockedSwap) internal pure returns (uint256) {\\n    return uint256(lockedSwap >> 40);\\n  }\\n\\n  /// @notice Encode `poolTokenIndex` from `tokenIndex` and `poolIndex`\\n  /// See variable `_balanceOfPoolToken` in `MesonStates.sol` for the defination of `poolTokenIndex`\\n  function _poolTokenIndexFrom(uint8 tokenIndex, uint40 poolIndex) internal pure returns (uint48) {\\n    return (uint48(tokenIndex) << 40) | poolIndex;\\n  }\\n\\n  /// @notice Decode `tokenIndex` from `poolTokenIndex`\\n  /// See variable `_balanceOfPoolToken` in `MesonStates.sol` for the defination of `poolTokenIndex`\\n  function _tokenIndexFrom(uint48 poolTokenIndex) internal pure returns (uint8) {\\n    return uint8(poolTokenIndex >> 40);\\n  }\\n\\n  /// @notice Decode `poolIndex` from `poolTokenIndex`\\n  /// See variable `_balanceOfPoolToken` in `MesonStates.sol` for the defination of `poolTokenIndex`\\n  function _poolIndexFrom(uint48 poolTokenIndex) internal pure returns (uint40) {\\n    return uint40(poolTokenIndex);\\n  }\\n\\n  /// @notice Check the initiator's signature for a swap request\\n  /// Signatures are constructed with the package `mesonfi/sdk`. Go to `packages/sdk/src/SwapSigner.ts` and \\n  /// see how to generate a signautre in class `EthersWalletSwapSigner` method `signSwapRequest`\\n  /// @param encodedSwap Encoded swap information. See variable `_postedSwaps` in `MesonSwap.sol` for the defination of `encodedSwap`\\n  /// @param r Part of the signature\\n  /// @param s Part of the signature\\n  /// @param v Part of the signature\\n  /// @param signer The signer for the swap request which is the `initiator`\\n  function _checkRequestSignature(\\n    uint256 encodedSwap,\\n    bytes32 r,\\n    bytes32 s,\\n    uint8 v,\\n    address signer\\n  ) internal pure {\\n    require(signer != address(0), \\\"Signer cannot be empty address\\\");\\n    require(v == 27 || v == 28, \\\"Invalid signature\\\");\\n    require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"Invalid signature\\\");\\n\\n    bool nonTyped = _signNonTyped(encodedSwap);\\n    bytes32 digest;\\n    if (_inChainFrom(encodedSwap) == 0x00c3) {\\n      digest = keccak256(abi.encodePacked(nonTyped ? TRON_SIGN_HEADER_33 : TRON_SIGN_HEADER, encodedSwap));\\n    } else if (nonTyped) {\\n      digest = keccak256(abi.encodePacked(ETH_SIGN_HEADER, encodedSwap));\\n    } else {\\n      bytes32 typehash = REQUEST_TYPE_HASH;\\n      assembly {\\n        mstore(0, encodedSwap)\\n        mstore(32, keccak256(0, 32))\\n        mstore(0, typehash)\\n        digest := keccak256(0, 64)\\n      }\\n    }\\n    require(signer == ecrecover(digest, v, r, s), \\\"Invalid signature\\\");\\n  }\\n\\n  /// @notice Check the initiator's signature for the release request\\n  /// Signatures are constructed with the package `mesonfi/sdk`. Go to `packages/sdk/src/SwapSigner.ts` and \\n  /// see how to generate a signautre in class `EthersWalletSwapSigner` method `signSwapRelease`\\n  /// @param encodedSwap Encoded swap information. See variable `_postedSwaps` in `MesonSwap.sol` for the defination of `encodedSwap`\\n  /// @param recipient The recipient address of the swap\\n  /// @param r Part of the signature\\n  /// @param s Part of the signature\\n  /// @param v Part of the signature\\n  /// @param signer The signer for the swap request which is the `initiator`\\n  function _checkReleaseSignature(\\n    uint256 encodedSwap,\\n    address recipient,\\n    bytes32 r,\\n    bytes32 s,\\n    uint8 v,\\n    address signer\\n  ) internal pure {\\n    require(signer != address(0), \\\"Signer cannot be empty address\\\");\\n    require(v == 27 || v == 28, \\\"Invalid signature\\\");\\n    require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"Invalid signature\\\");\\n\\n    bool nonTyped = _signNonTyped(encodedSwap);\\n    bytes32 digest;\\n    if (_inChainFrom(encodedSwap) == 0x00c3) {\\n      digest = keccak256(abi.encodePacked(nonTyped ? TRON_SIGN_HEADER_53 : TRON_SIGN_HEADER, encodedSwap, recipient));\\n    } else if (nonTyped) {\\n      digest = keccak256(abi.encodePacked(ETH_SIGN_HEADER_52, encodedSwap, recipient));\\n    } else {\\n      bytes32 typehash = _outChainFrom(encodedSwap) == 0x00c3 ? RELEASE_TO_TRON_TYPE_HASH : RELEASE_TYPE_HASH;\\n      assembly {\\n        mstore(20, recipient)\\n        mstore(0, encodedSwap)\\n        mstore(32, keccak256(0, 52))\\n        mstore(0, typehash)\\n        digest := keccak256(0, 64)\\n      }\\n    }\\n    require(signer == ecrecover(digest, v, r, s), \\\"Invalid signature\\\");\\n  }\\n}\\n\\n\\n// File contracts/utils/MesonStates.sol\\n\\n\\npragma solidity 0.8.16;\\n\\n\\n/// @title MesonStates\\n/// @notice The class that keeps track of LP pool states\\ncontract MesonStates is MesonTokens, MesonHelpers {\\n  /// @notice The mapping from *authorized addresses* to LP pool indexes.\\n  /// See `ownerOfPool` to understand how pool index is defined and used.\\n  ///\\n  /// This mapping records the relation between *authorized addresses* and pool indexes, where\\n  /// authorized addresses are those who have the permision to match and complete a swap with funds \\n  /// in a pool with specific index. For example, for an LP pool with index `i` there could be multiple\\n  /// addresses that `poolOfAuthorizedAddr[address] = i`, which means these addresses can all sign to match\\n  /// (call `bondSwap`, `lock`) a swap and complete it (call `release`) with funds in pool `i`. That helps\\n  /// an LP to give other addresses the permission to perform daily swap transactions. However, authorized\\n  /// addresses cannot withdraw funds from the LP pool, unless it's given in `ownerOfPool` which records\\n  /// the *owner* address for each pool.\\n  ///\\n  /// The pool index 0 is reserved for use by Meson\\n  mapping(address => uint40) public poolOfAuthorizedAddr;\\n\\n  /// @notice The mapping from LP pool indexes to their owner addresses.\\n  /// Each LP pool in Meson has a uint40 index `i` and each LP needs to register an pool index at\\n  /// initial deposit by calling `depositAndRegister`. The balance for each LP pool is tracked by its\\n  /// pool index and token index (see `_balanceOfPoolToken`).\\n  /// \\n  /// This mapping records the *owner* address for each LP pool. Only the owner address can withdraw funds\\n  /// from its corresponding LP pool.\\n  ///\\n  /// The pool index 0 is reserved for use by Meson\\n  mapping(uint40 => address) public ownerOfPool;\\n\\n  /// @notice Balance for each token in LP pool, tracked by the `poolTokenIndex`.\\n  /// See `ownerOfPool` to understand how pool index is defined and used.\\n  ///\\n  /// The balance of a token in an LP pool is `_balanceOfPoolToken[poolTokenIndex]` in which\\n  /// the `poolTokenIndex` is in format of `tokenIndex:uint8|poolIndex:uint40`. `tokenIndex`\\n  /// is the index of supported tokens given by `tokenForIndex` (see definition in `MesonTokens.sol`).\\n  /// The balances are always store as tokens have decimal 6, which is the case for USDC/USDT on most chains\\n  /// except BNB Chain & Conflux. In the exceptional cases, the value of token amount will be converted\\n  /// on deposit and withdrawal (see `_safeTransfer` and `_unsafeDepositToken` in `MesonHelpers.sol`).\\n  ///\\n  /// The pool index 0 is reserved for use by Meson to store service fees\\n  mapping(uint48 => uint256) internal _balanceOfPoolToken;\\n\\n  /// @dev This empty reserved space is put in place to allow future versions to\\n  /// add new variables without shifting down storage in the inheritance chain.\\n  /// See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n  uint256[50] private __gap;\\n\\n  function poolTokenBalance(address token, address addr) external view returns (uint256) {\\n    uint8 tokenIndex = indexOfToken[token];\\n    uint40 poolIndex = poolOfAuthorizedAddr[addr];\\n    if (poolIndex == 0 || tokenIndex == 0) {\\n      return 0;\\n    }\\n    return _balanceOfPoolToken[_poolTokenIndexFrom(tokenIndex, poolIndex)];\\n  }\\n  \\n  /// @notice The collected service fee of a specific token.\\n  /// @param tokenIndex The index of a supported token. See `tokenForIndex` in `MesonTokens.sol`\\n  function serviceFeeCollected(uint8 tokenIndex) external view returns (uint256) {\\n    return _balanceOfPoolToken[_poolTokenIndexFrom(tokenIndex, 0)];\\n  }\\n}\\n\\n\\n// File contracts/Swap/MesonSwap.sol\\n\\n\\npragma solidity 0.8.16;\\n\\n\\n/// @title MesonSwap\\n/// @notice The class to receive and process swap requests on the initial chain side.\\n/// Methods in this class will be executed by swap initiators or LPs\\n/// on the initial chain of swaps.\\ncontract MesonSwap is IMesonSwapEvents, MesonStates {\\n  /// @notice Posted Swaps\\n  /// key: `encodedSwap` in format of `version:uint8|amount:uint40|salt:uint80|fee:uint40|expireTs:uint40|outChain:uint16|outToken:uint8|inChain:uint16|inToken:uint8`\\n  ///   version: Version of encoding\\n  ///   amount: The amount of tokens of this swap, always in decimal 6. The amount of a swap is capped at $100k so it can be safely encoded in uint48;\\n  ///   salt: The salt value of this swap, carrying some information below:\\n  ///     salt & 0x80000000000000000000 == true => will release to an owa address, otherwise a smart contract;\\n  ///     salt & 0x40000000000000000000 == true => will waive *service fee*;\\n  ///     salt & 0x08000000000000000000 == true => use *non-typed signing* (some wallets such as hardware wallets don't support EIP-712v1);\\n  ///     salt & 0x0000ffffffffffffffff: customized data that can be passed to integrated 3rd-party smart contract;\\n  ///   fee: The fee given to LPs (liquidity providers). An extra service fee maybe charged afterwards;\\n  ///   expireTs: The expiration time of this swap on the initial chain. The LP should `executeSwap` and receive his funds before `expireTs`;\\n  ///   outChain: The target chain of a cross-chain swap (given by the last 2 bytes of SLIP-44);\\n  ///   outToken: The index of the token on the target chain. See `tokenForIndex` in `MesonToken.sol`;\\n  ///   inChain: The initial chain of a cross-chain swap (given by the last 2 bytes of SLIP-44);\\n  ///   inToken: The index of the token on the initial chain. See `tokenForIndex` in `MesonToken.sol`.\\n  /// value: `postedSwap` in format of `initiator:address|poolIndex:uint40`\\n  ///   initiator: The swap initiator who created and signed the swap request (not necessarily the one who posted the swap);\\n  //    poolIndex: The index of an LP pool. See `ownerOfPool` in `MesonStates.sol` for more information.\\n  mapping(uint256 => uint200) internal _postedSwaps;\\n\\n  /// @dev This empty reserved space is put in place to allow future versions to\\n  /// add new variables without shifting down storage in the inheritance chain.\\n  /// See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n  uint256[50] private __gap;\\n\\n  /// @notice Anyone can call this method to post a swap request. This is step 1\ufe0f\u20e3 in a swap.\\n  /// The r,s,v signature must be signed by the swap initiator. The initiator can call\\n  /// this method directly, in which case `poolIndex` should be zero and wait for LPs\\n  /// to call `bondSwap`. Initiators can also send the swap requests offchain (through the\\n  /// meson relayer service). An LP (pool owner or authorized addresses) who receives requests through\\n  /// the relayer can call this method to post and bond the swap in a single contract execution,\\n  /// in which case he should give his own `poolIndex`.\\n  ///\\n  /// The swap will last until `expireTs` and at most one LP pool can bond to it.\\n  /// After the swap expires, the initiator can cancel the swap and withdraw funds.\\n  ///\\n  /// Once a swap is posted and bonded, the bonding LP should call `lock` on the target chain.\\n  ///\\n  /// @dev Designed to be used by both swap initiators, pool owner, or authorized addresses\\n  /// @param encodedSwap Encoded swap information; also used as the key of `_postedSwaps`\\n  /// @param r Part of the signature\\n  /// @param s Part of the signature\\n  /// @param v Part of the signature\\n  /// @param postingValue The value to be written to `_postedSwaps`. See `_postedSwaps` for encoding format\\n  function postSwap(uint256 encodedSwap, bytes32 r, bytes32 s, uint8 v, uint200 postingValue)\\n    external matchProtocolVersion(encodedSwap) forInitialChain(encodedSwap)\\n  {\\n    require(_postedSwaps[encodedSwap] == 0, \\\"Swap already exists\\\");\\n\\n    uint256 amount = _amountFrom(encodedSwap);\\n    require(amount <= MAX_SWAP_AMOUNT, \\\"For security reason, amount cannot be greater than 100k\\\");\\n\\n    uint256 delta = _expireTsFrom(encodedSwap) - block.timestamp;\\n    // Underflow would trigger \\\"Expire ts too late\\\" error\\n    require(delta > MIN_BOND_TIME_PERIOD, \\\"Expire ts too early\\\");\\n    require(delta < MAX_BOND_TIME_PERIOD, \\\"Expire ts too late\\\");\\n\\n    uint40 poolIndex = _poolIndexFromPosted(postingValue);\\n    if (poolIndex > 0) {\\n      // In pool index is given, the signer should be an authorized address\\n      require(poolOfAuthorizedAddr[_msgSender()] == poolIndex, \\\"Signer should be an authorized address of the given pool\\\");\\n    } // Otherwise, this is posted without bonding to a specific pool. Need to execute `bondSwap` later\\n\\n    address initiator = _initiatorFromPosted(postingValue);\\n    _checkRequestSignature(encodedSwap, r, s, v, initiator);\\n    _postedSwaps[encodedSwap] = postingValue;\\n\\n    uint8 tokenIndex = _inTokenIndexFrom(encodedSwap);\\n    _unsafeDepositToken(tokenForIndex[tokenIndex], initiator, amount, tokenIndex);\\n\\n    emit SwapPosted(encodedSwap);\\n  }\\n\\n  /// @notice If `postSwap` is called by the initiator of the swap and `poolIndex`\\n  /// is zero, an LP (pool owner or authorized addresses) can call this to bond the swap to himself.\\n  /// @dev Designed to be used by pool owner or authorized addresses\\n  /// @param encodedSwap Encoded swap information; also used as the key of `_postedSwaps`\\n  /// @param poolIndex The index of an LP pool. See `ownerOfPool` in `MesonStates.sol` for more information.\\n  function bondSwap(uint256 encodedSwap, uint40 poolIndex) external {\\n    uint200 postedSwap = _postedSwaps[encodedSwap];\\n    require(postedSwap > 1, \\\"Swap does not exist\\\");\\n    require(_poolIndexFromPosted(postedSwap) == 0, \\\"Swap bonded to another pool\\\");\\n    require(poolOfAuthorizedAddr[_msgSender()] == poolIndex, \\\"Signer should be an authorized address of the given pool\\\");\\n\\n    _postedSwaps[encodedSwap] = postedSwap | poolIndex;\\n    emit SwapBonded(encodedSwap);\\n  }\\n\\n  /// @notice Cancel a swap. The swap initiator can call this method to withdraw funds\\n  /// from an expired swap request.\\n  /// @dev Designed to be used by swap initiators\\n  /// @param encodedSwap Encoded swap information; also used as the key of `_postedSwaps`\\n  function cancelSwap(uint256 encodedSwap) external {\\n    uint200 postedSwap = _postedSwaps[encodedSwap];\\n    require(postedSwap > 1, \\\"Swap does not exist\\\");\\n    require(_expireTsFrom(encodedSwap) < block.timestamp, \\\"Swap is still locked\\\");\\n\\n    _postedSwaps[encodedSwap] = 0; // Swap expired so the same one cannot be posted again\\n\\n    uint8 tokenIndex = _inTokenIndexFrom(encodedSwap);\\n    _safeTransfer(tokenForIndex[tokenIndex], _initiatorFromPosted(postedSwap), _amountFrom(encodedSwap), tokenIndex);\\n\\n    emit SwapCancelled(encodedSwap);\\n  }\\n\\n  /// @notice Execute the swap by providing a release signature. This is step 4\ufe0f\u20e3 in a swap.\\n  /// Once the signature is verified, the current bonding pool will receive funds deposited \\n  /// by the swap initiator.\\n  /// @dev Designed to be used by pool owner or authorized addresses of the current bonding pool\\n  /// @param encodedSwap Encoded swap information; also used as the key of `_postedSwaps`\\n  /// @param r Part of the release signature (same as in the `release` call)\\n  /// @param s Part of the release signature (same as in the `release` call)\\n  /// @param v Part of the release signature (same as in the `release` call)\\n  /// @param recipient The recipient address of the swap\\n  /// @param depositToPool Whether to deposit funds to the pool (will save gas)\\n  function executeSwap(\\n    uint256 encodedSwap,\\n    bytes32 r,\\n    bytes32 s,\\n    uint8 v,\\n    address recipient,\\n    bool depositToPool\\n  ) external {\\n    uint200 postedSwap = _postedSwaps[encodedSwap];\\n    require(postedSwap > 1, \\\"Swap does not exist\\\");\\n\\n    // Swap expiredTs < current + MIN_BOND_TIME_PERIOD\\n    if (_expireTsFrom(encodedSwap) < block.timestamp + MIN_BOND_TIME_PERIOD) {\\n      // The swap cannot be posted again and therefore safe to remove it.\\n      // LPs who execute in this mode can save ~5000 gas.\\n      _postedSwaps[encodedSwap] = 0;\\n    } else {\\n      // The same swap information can be posted again, so set `_postedSwaps` value to 1 to prevent that.\\n      _postedSwaps[encodedSwap] = 1;\\n    }\\n\\n    _checkReleaseSignature(encodedSwap, recipient, r, s, v, _initiatorFromPosted(postedSwap));\\n\\n    uint8 tokenIndex = _inTokenIndexFrom(encodedSwap);\\n    uint40 poolIndex = _poolIndexFromPosted(postedSwap);\\n    if (depositToPool) {\\n      _balanceOfPoolToken[_poolTokenIndexFrom(tokenIndex, poolIndex)] += _amountFrom(encodedSwap);\\n    } else {\\n      _safeTransfer(tokenForIndex[tokenIndex], ownerOfPool[poolIndex], _amountFrom(encodedSwap), tokenIndex);\\n    }\\n  }\\n\\n  /// @notice Read information for a posted swap\\n  function getPostedSwap(uint256 encodedSwap) external view\\n    returns (address initiator, address poolOwner, bool exist)\\n  {\\n    uint200 postedSwap = _postedSwaps[encodedSwap];\\n    initiator = _initiatorFromPosted(postedSwap);\\n    exist = postedSwap > 0;\\n    if (initiator == address(0)) {\\n      poolOwner = address(0);\\n    } else {\\n      poolOwner = ownerOfPool[_poolIndexFromPosted(postedSwap)];\\n    }\\n  }\\n\\n  modifier forInitialChain(uint256 encodedSwap) {\\n    require(_inChainFrom(encodedSwap) == SHORT_COIN_TYPE, \\\"Swap not for this chain\\\");\\n    _;\\n  }\\n}\\n\\n\\n// File contracts/Pools/IMesonPoolsEvents.sol\\n\\n\\npragma solidity 0.8.16;\\n\\n/// @title MesonPools Interface\\ninterface IMesonPoolsEvents {\\n  /// @notice Event when an LP pool is registered.\\n  /// Emit at the end of `depositAndRegister()` calls.\\n  /// @param poolIndex Pool index\\n  /// @param owner Pool owner\\n  event PoolRegistered(uint40 indexed poolIndex, address owner);\\n\\n  /// @notice Event when fund was deposited to an LP pool.\\n  /// Emit at the end of `depositAndRegister()` and `deposit()` calls.\\n  /// @param poolTokenIndex Concatenation of pool index & token index\\n  /// @param amount The amount of tokens to be added to the pool\\n  event PoolDeposited(uint48 indexed poolTokenIndex, uint256 amount);\\n\\n  /// @notice Event when fund was withdrawn from an LP pool.\\n  /// Emit at the end of `withdraw()` calls.\\n  /// @param poolTokenIndex Concatenation of pool index & token index\\n  /// @param amount The amount of tokens to be removed from the pool\\n  event PoolWithdrawn(uint48 indexed poolTokenIndex, uint256 amount);\\n\\n  /// @notice Event when an authorized address was added for an LP pool.\\n  /// Emit at the end of `depositAndRegister()` calls.\\n  /// @param poolIndex Pool index\\n  /// @param addr Authorized address to be added\\n  event PoolAuthorizedAddrAdded(uint40 indexed poolIndex, address addr);\\n\\n  /// @notice Event when an authorized address was removed for an LP pool.\\n  /// Emit at the end of `depositAndRegister()` calls.\\n  /// @param poolIndex Pool index\\n  /// @param addr Authorized address to be removed\\n  event PoolAuthorizedAddrRemoved(uint40 indexed poolIndex, address addr);\\n\\n  /// @notice Event when a swap was locked.\\n  /// Emit at the end of `lock()` calls.\\n  /// @param encodedSwap Encoded swap\\n  event SwapLocked(uint256 indexed encodedSwap);\\n\\n  /// @notice Event when a swap was unlocked.\\n  /// Emit at the end of `unlock()` calls.\\n  /// @param encodedSwap Encoded swap\\n  event SwapUnlocked(uint256 indexed encodedSwap);\\n\\n  /// @notice Event when a swap was released.\\n  /// Emit at the end of `release()` calls.\\n  /// @param encodedSwap Encoded swap\\n  event SwapReleased(uint256 indexed encodedSwap);\\n}\\n\\n\\n// File contracts/Pools/MesonPools.sol\\n\\n\\npragma solidity 0.8.16;\\n\\n\\n/// @title MesonPools\\n/// @notice The class to manage pools for LPs, and perform swap operations on the target \\n/// chain side.\\n/// Methods in this class will be executed when a user wants to swap into this chain.\\n/// LP pool operations are also provided in this class.\\ncontract MesonPools is IMesonPoolsEvents, MesonStates {\\n  /// @notice Locked Swaps\\n  /// key: `swapId` is calculated from `encodedSwap` and `initiator`. See `_getSwapId` in `MesonHelpers.sol`\\n  ///   encodedSwap: see `MesonSwap.sol` for defination;\\n  ///   initiator: The user address who created and signed the swap request.\\n  /// value: `lockedSwap` in format of `until:uint40|poolIndex:uint40`\\n  ///   until: The expiration time of this swap on the target chain. Need to `release` the swap fund before `until`;\\n  ///   poolIndex: The index of an LP pool. See `ownerOfPool` in `MesonStates.sol` for more information.\\n  mapping(bytes32 => uint80) internal _lockedSwaps;\\n\\n  /// @dev This empty reserved space is put in place to allow future versions to\\n  /// add new variables without shifting down storage in the inheritance chain.\\n  /// See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n  uint256[50] private __gap;\\n\\n  /// @notice Initially deposit tokens into an LP pool and register a pool index.\\n  /// This is the prerequisite for LPs if they want to participate in Meson swaps.\\n  /// @dev Designed to be used by a new address who wants to be an LP and register a pool index\\n  /// @param amount The amount of tokens to be added to the pool\\n  /// @param poolTokenIndex In format of `tokenIndex:uint8|poolIndex:uint40`. See `_balanceOfPoolToken` in `MesonStates.sol` for more information.\\n  function depositAndRegister(uint256 amount, uint48 poolTokenIndex) external {\\n    require(amount > 0, \\\"Amount must be positive\\\");\\n\\n    address poolOwner = _msgSender();\\n    uint40 poolIndex = _poolIndexFrom(poolTokenIndex);\\n    require(poolIndex != 0, \\\"Cannot use 0 as pool index\\\"); // pool 0 is reserved for meson service fee\\n    require(ownerOfPool[poolIndex] == address(0), \\\"Pool index already registered\\\");\\n    require(poolOfAuthorizedAddr[poolOwner] == 0, \\\"Signer address already registered\\\");\\n    ownerOfPool[poolIndex] = poolOwner;\\n    poolOfAuthorizedAddr[poolOwner] = poolIndex;\\n\\n    _balanceOfPoolToken[poolTokenIndex] += amount;\\n    uint8 tokenIndex = _tokenIndexFrom(poolTokenIndex);\\n    _unsafeDepositToken(tokenForIndex[tokenIndex], poolOwner, amount, tokenIndex);\\n\\n    emit PoolRegistered(poolIndex, poolOwner);\\n    emit PoolDeposited(poolTokenIndex, amount);\\n  }\\n\\n  /// @notice Deposit tokens into the liquidity pool.\\n  /// The LP should be careful to make sure the `poolTokenIndex` is correct.\\n  /// Make sure to call `depositAndRegister` first and register a pool index.\\n  /// Otherwise, token may be deposited to others.\\n  /// @dev Designed to be used by addresses authorized to a pool\\n  /// @param amount The amount of tokens to be added to the pool\\n  /// @param poolTokenIndex In format of `tokenIndex:uint8|poolIndex:uint40`. See `_balanceOfPoolToken` in `MesonStates.sol` for more information.\\n  function deposit(uint256 amount, uint48 poolTokenIndex) external {\\n    require(amount > 0, \\\"Amount must be positive\\\");\\n\\n    uint40 poolIndex = _poolIndexFrom(poolTokenIndex);\\n    require(poolIndex != 0, \\\"Cannot use 0 as pool index\\\"); // pool 0 is reserved for meson service fee\\n    require(poolIndex == poolOfAuthorizedAddr[_msgSender()], \\\"Need an authorized address as the signer\\\");\\n    _balanceOfPoolToken[poolTokenIndex] += amount;\\n    uint8 tokenIndex = _tokenIndexFrom(poolTokenIndex);\\n    _unsafeDepositToken(tokenForIndex[tokenIndex], _msgSender(), amount, tokenIndex);\\n\\n    emit PoolDeposited(poolTokenIndex, amount);\\n  }\\n\\n  /// @notice Withdraw tokens from the liquidity pool.\\n  /// @dev Designed to be used by LPs (pool owners) who have already registered a pool index\\n  /// @param amount The amount to be removed from the pool\\n  /// @param poolTokenIndex In format of `tokenIndex:uint8|poolIndex:uint40. See `_balanceOfPoolToken` in `MesonStates.sol` for more information.\\n  function withdraw(uint256 amount, uint48 poolTokenIndex) external {\\n    require(amount > 0, \\\"Amount must be positive\\\");\\n\\n    uint40 poolIndex = _poolIndexFrom(poolTokenIndex);\\n    require(poolIndex != 0, \\\"Cannot use 0 as pool index\\\"); // pool 0 is reserved for meson service fee\\n    require(ownerOfPool[poolIndex] == _msgSender(), \\\"Need the pool owner as the signer\\\");\\n    _balanceOfPoolToken[poolTokenIndex] -= amount;\\n    uint8 tokenIndex = _tokenIndexFrom(poolTokenIndex);\\n    _safeTransfer(tokenForIndex[tokenIndex], _msgSender(), amount, tokenIndex);\\n\\n    emit PoolWithdrawn(poolTokenIndex, amount);\\n  }\\n\\n  /// @notice Add an authorized address to the pool\\n  /// @dev Designed to be used by LPs (pool owners)\\n  /// @param addr The address to be added\\n  function addAuthorizedAddr(address addr) external {\\n    require(poolOfAuthorizedAddr[addr] == 0, \\\"Addr is authorized for another pool\\\");\\n    address poolOwner = _msgSender();\\n    uint40 poolIndex = poolOfAuthorizedAddr[poolOwner];\\n    require(poolIndex != 0, \\\"The signer does not register a pool\\\");\\n    require(poolOwner == ownerOfPool[poolIndex], \\\"Need the pool owner as the signer\\\");\\n    poolOfAuthorizedAddr[addr] = poolIndex;\\n\\n    emit PoolAuthorizedAddrAdded(poolIndex, addr);\\n  }\\n  \\n  /// @notice Remove an authorized address from the pool\\n  /// @dev Designed to be used by LPs (pool owners)\\n  /// @param addr The address to be removed\\n  function removeAuthorizedAddr(address addr) external {\\n    address poolOwner = _msgSender();\\n    uint40 poolIndex = poolOfAuthorizedAddr[poolOwner];\\n    require(poolIndex != 0, \\\"The signer does not register a pool\\\");\\n    require(poolOwner == ownerOfPool[poolIndex], \\\"Need the pool owner as the signer\\\");\\n    require(poolOfAuthorizedAddr[addr] == poolIndex, \\\"Addr is not authorized for the signer's pool\\\");\\n    poolOfAuthorizedAddr[addr] = 0;\\n\\n    emit PoolAuthorizedAddrRemoved(poolIndex, addr);\\n  }\\n\\n  /// @notice Lock funds to match a swap request. This is step 2\ufe0f\u20e3 in a swap.\\n  /// The authorized address of the bonding pool should call this method with\\n  /// the same signature given by `postSwap`. This method will lock swapping fund \\n  /// on the target chain for `LOCK_TIME_PERIOD` and wait for fund release and \\n  /// execution.\\n  /// @dev Designed to be used by authorized addresses or pool owners\\n  /// @param encodedSwap Encoded swap information\\n  /// @param r Part of the signature (the one given by `postSwap` call)\\n  /// @param s Part of the signature (the one given by `postSwap` call)\\n  /// @param v Part of the signature (the one given by `postSwap` call)\\n  /// @param initiator The swap initiator who created and signed the swap request\\n  function lock(\\n    uint256 encodedSwap,\\n    bytes32 r,\\n    bytes32 s,\\n    uint8 v,\\n    address initiator\\n  ) external matchProtocolVersion(encodedSwap) forTargetChain(encodedSwap) {\\n    bytes32 swapId = _getSwapId(encodedSwap, initiator);\\n    require(_lockedSwaps[swapId] == 0, \\\"Swap already exists\\\");\\n    _checkRequestSignature(encodedSwap, r, s, v, initiator);\\n\\n    uint40 poolIndex = poolOfAuthorizedAddr[_msgSender()];\\n    require(poolIndex != 0, \\\"Caller not registered. Call depositAndRegister.\\\");\\n\\n    uint256 until = block.timestamp + LOCK_TIME_PERIOD;\\n    require(until < _expireTsFrom(encodedSwap) - 5 minutes, \\\"Cannot lock because expireTs is soon.\\\");\\n\\n    uint48 poolTokenIndex = _poolTokenIndexForOutToken(encodedSwap, poolIndex);\\n    // Only (amount - lp fee) is locked from the LP pool. The service fee will be charged on release\\n    _balanceOfPoolToken[poolTokenIndex] -= (_amountFrom(encodedSwap) - _feeForLp(encodedSwap));\\n    \\n    _lockedSwaps[swapId] = _lockedSwapFrom(until, poolIndex);\\n\\n    emit SwapLocked(encodedSwap);\\n  }\\n\\n  /// @notice If the locked swap is not released after `LOCK_TIME_PERIOD`,\\n  /// the authorized address can call this method to unlock the swapping fund.\\n  /// @dev Designed to be used by authorized addresses or pool owners\\n  /// @param encodedSwap Encoded swap information\\n  /// @param initiator The swap initiator who created and signed the swap request\\n  function unlock(uint256 encodedSwap, address initiator) external {\\n    bytes32 swapId = _getSwapId(encodedSwap, initiator);\\n    uint80 lockedSwap = _lockedSwaps[swapId];\\n    require(lockedSwap != 0, \\\"Swap does not exist\\\");\\n    require(_untilFromLocked(lockedSwap) < block.timestamp, \\\"Swap still in lock\\\");\\n\\n    uint48 poolTokenIndex = _poolTokenIndexForOutToken(encodedSwap, _poolIndexFromLocked(lockedSwap));\\n    // (amount - lp fee) will be returned because only that amount was locked\\n    _balanceOfPoolToken[poolTokenIndex] += (_amountFrom(encodedSwap) - _feeForLp(encodedSwap));\\n    _lockedSwaps[swapId] = 0;\\n\\n    emit SwapUnlocked(encodedSwap);\\n  }\\n\\n  /// @notice Release tokens to satisfy a locked swap. This is step 3\ufe0f\u20e3 in a swap.\\n  /// This method requires a release signature from the swap initiator,\\n  /// but anyone (initiator herself, the LP, and other people) with the signature \\n  /// can call this method to make sure the swapping fund is guaranteed to be released.\\n  /// @dev Designed to be used by anyone\\n  /// @param encodedSwap Encoded swap information\\n  /// @param r Part of the release signature (same as in the `executeSwap` call)\\n  /// @param s Part of the release signature (same as in the `executeSwap` call)\\n  /// @param v Part of the release signature (same as in the `executeSwap` call)\\n  /// @param initiator The swap initiator who created and signed the swap request\\n  /// @param recipient The recipient address of the swap\\n  function release(\\n    uint256 encodedSwap,\\n    bytes32 r,\\n    bytes32 s,\\n    uint8 v,\\n    address initiator,\\n    address recipient\\n  ) external {\\n    bool feeWaived = _feeWaived(encodedSwap);\\n    if (feeWaived) {\\n      // For swaps that service fee is waived, need the premium manager as the signer\\n      _onlyPremiumManager();\\n    }\\n    // For swaps that charge service fee, anyone can call\\n\\n    bytes32 swapId = _getSwapId(encodedSwap, initiator);\\n    uint80 lockedSwap = _lockedSwaps[swapId];\\n    require(lockedSwap != 0, \\\"Swap does not exist\\\");\\n    require(recipient != address(0), \\\"Recipient cannot be zero address\\\");\\n    require(_expireTsFrom(encodedSwap) > block.timestamp, \\\"Cannot release because expired\\\");\\n\\n    _checkReleaseSignature(encodedSwap, recipient, r, s, v, initiator);\\n    _lockedSwaps[swapId] = 0;\\n\\n    uint8 tokenIndex = _outTokenIndexFrom(encodedSwap);\\n    \\n    // LP fee will be subtracted from the swap amount\\n    uint256 releaseAmount = _amountFrom(encodedSwap) - _feeForLp(encodedSwap);\\n    if (!feeWaived) { // If the swap should pay service fee (charged by Meson protocol)\\n      uint256 serviceFee = _serviceFee(encodedSwap);\\n      // Subtract service fee from the release amount\\n      releaseAmount -= serviceFee;\\n      // Collected service fee will be stored in `_balanceOfPoolToken` with `poolIndex = 0`.\\n      // Currently, no one is capable to withdraw fund from pool 0. In the future, Meson protocol\\n      // will specify the purpose of service fee and its usage permission, and upgrade the contract\\n      // accordingly.\\n      _balanceOfPoolToken[_poolTokenIndexForOutToken(encodedSwap, 0)] += serviceFee;\\n    }\\n\\n    _release(encodedSwap, tokenIndex, initiator, recipient, releaseAmount);\\n\\n    emit SwapReleased(encodedSwap);\\n  }\\n\\n  function _release(uint256 encodedSwap, uint8 tokenIndex, address initiator, address recipient, uint256 amount) private {\\n    if (_willTransferToContract(encodedSwap)) {\\n      _transferToContract(tokenForIndex[tokenIndex], recipient, initiator, amount, tokenIndex, _saltDataFrom(encodedSwap));\\n    } else {\\n      _safeTransfer(tokenForIndex[tokenIndex], recipient, amount, tokenIndex);\\n    }\\n  }\\n\\n  /// @notice Read information for a locked swap\\n  function getLockedSwap(uint256 encodedSwap, address initiator) external view\\n    returns (address poolOwner, uint40 until)\\n  {\\n    bytes32 swapId = _getSwapId(encodedSwap, initiator);\\n    uint80 lockedSwap = _lockedSwaps[swapId];\\n    poolOwner = ownerOfPool[_poolIndexFromLocked(lockedSwap)];\\n    until = uint40(_untilFromLocked(lockedSwap));\\n  }\\n\\n  modifier forTargetChain(uint256 encodedSwap) {\\n    require(_outChainFrom(encodedSwap) == SHORT_COIN_TYPE, \\\"Swap not for this chain\\\");\\n    _;\\n  }\\n\\n  function _onlyPremiumManager() internal view virtual {}\\n}\\n\\n\\n// File contracts/MesonManager.sol\\n\\n\\npragma solidity 0.8.16;\\n\\n\\n/// @title MesonManager\\n/// @notice The class to store data related to management permissions of Meson\\ncontract MesonManager is MesonSwap, MesonPools {\\n  /// @notice The admin of meson contract\\n  /// The owner has the permission to upgrade meson contract. In future versions,\\n  /// the management authority of meson contract will be decentralized.\\n  address internal _owner;\\n\\n  /// @notice The manager to authorized fee waived swaps\\n  /// Only the premium manager can authorize the execution to release for fee waived swaps.\\n  /// This address is managed by Meson team.\\n  address internal _premiumManager;\\n\\n  /// @dev This empty reserved space is put in place to allow future versions to\\n  /// add new variables without shifting down storage in the inheritance chain.\\n  /// See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n  uint256[50] private __gap;\\n\\n  event OwnerTransferred(address indexed prevOwner, address indexed newOwner);\\n\\n  event PremiumManagerTransferred(address indexed prevPremiumManager, address indexed newPremiumManager);\\n\\n  /// @notice The owner will also have the permission to add supported tokens\\n  function addSupportToken(address token, uint8 index) external onlyOwner {\\n    _addSupportToken(token, index);\\n  }\\n\\n  /// @notice Add multiple tokens\\n  function addMultipleSupportedTokens(address[] memory tokens, uint8[] memory indexes) external onlyOwner {\\n    require(tokens.length == indexes.length, \\\"Tokens and indexes should have the same length\\\");\\n    for (uint8 i = 0; i < tokens.length; i++) {\\n      _addSupportToken(tokens[i], indexes[i]);\\n    }\\n  }\\n\\n  function transferOwnership(address newOwner) public onlyOwner {\\n    _transferOwnership(newOwner);\\n  }\\n\\n  function transferPremiumManager(address newPremiumManager) public {\\n    _onlyPremiumManager();\\n    _transferPremiumManager(newPremiumManager);\\n  }\\n\\n  modifier onlyOwner() {\\n    require(_owner == _msgSender(), \\\"Caller is not the owner\\\");\\n    _;\\n  }\\n\\n  function _transferOwnership(address newOwner) internal {\\n    require(newOwner != address(0), \\\"New owner cannot be zero address\\\");\\n    address prevOwner = _owner;\\n    _owner = newOwner;\\n    emit OwnerTransferred(prevOwner, newOwner);\\n  }\\n\\n  function _onlyPremiumManager() internal view override {\\n    require(_premiumManager == _msgSender(), \\\"Caller is not the premium manager\\\");\\n  }\\n\\n  function _transferPremiumManager(address newPremiumManager) internal {\\n    require(newPremiumManager != address(0), \\\"New premium manager be zero address\\\");\\n    address prevPremiumManager = _premiumManager;\\n    _premiumManager = newPremiumManager;\\n    emit PremiumManagerTransferred(prevPremiumManager, newPremiumManager);\\n  }\\n}\\n\\n\\n// File contracts/UpgradableMeson.sol\\n\\n\\npragma solidity 0.8.16;\\n\\n\\ncontract UpgradableMeson is UUPSUpgradeable, MesonManager {\\n  function initialize(address owner, address premiumManager) external initializer {\\n    _transferOwnership(owner);\\n    _transferPremiumManager(premiumManager);\\n  }\\n\\n  function _authorizeUpgrade(address) internal override onlyOwner {}\\n}\\n\\n\\n// File contracts/ProxyToMeson.sol\\n\\n\\npragma solidity 0.8.16;\\n\\n\\ncontract ProxyToMeson is ERC1967Proxy {\\n  bytes4 private constant INITIALIZE_SELECTOR = bytes4(keccak256(\\\"initialize(address,address)\\\"));\\n\\n  constructor(address premiumManager) ERC1967Proxy(_deployImpl(), _encodeData(msg.sender, premiumManager)) {}\\n\\n  function _deployImpl() private returns (address) {\\n    UpgradableMeson _impl = new UpgradableMeson();\\n    return address(_impl);\\n  }\\n\\n  function _encodeData(address owner, address premiumManager) private pure returns (bytes memory) {\\n    return abi.encodeWithSelector(INITIALIZE_SELECTOR, owner, premiumManager);\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"premiumManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ProxyToMeson", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "000000000000000000000000666d6b8a44d226150ca9058beebafe0e3ac065a2", "EVMVersion": "istanbul", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0x7ecc64a774e728aedc65effbe9183c8b5069d149", "SwarmSource": "none"}