{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/fehuxapple4/Documents/GitHub/moon_baby/contracts/BEP20/IBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBEP20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the token decimals.\\n   */\\n  function decimals() external view returns (uint8);\\n\\n  /**\\n   * @dev Returns the token symbol.\\n   */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n  * @dev Returns the token name.\\n  */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the bep token owner.\\n   */\\n  function getOwner() external view returns (address);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address _owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"/Users/fehuxapple4/Documents/GitHub/moon_baby/contracts/MoonBaby.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./access/Ownable.sol\\\";\\nimport \\\"./BEP20/IBEP20.sol\\\";\\nimport \\\"./libraries/Address.sol\\\";\\nimport \\\"./libraries/SafeMath.sol\\\";\\n\\ncontract MoonBaby is Context, IBEP20, Ownable {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  mapping (address => uint256) private _rOwned;\\n  mapping (address => uint256) private _tOwned;\\n  mapping (address => mapping (address => uint256)) private _allowances;\\n\\n  mapping (address => bool) private _isExcluded;\\n  address[] private _excluded;\\n  \\n  uint256 private constant MAX = type(uint256).max;\\n  uint256 private constant _tTotal = 1 * 10**15 * 10**9; // 1 quadrillions\\n  uint256 private _rTotal = (MAX - (MAX % _tTotal));\\n  uint256 private _tFeeTotal;\\n\\n  string private _name = 'Moon Baby';\\n  string private _symbol = 'MOON';\\n  uint8 private _decimals = 9;\\n\\n  uint256 public taxFeePercent;\\n  uint256 public burnFeePercent;\\n  uint256 public foundationFeePercent;\\n  uint256 public bonusPercent;\\n  address public moonFoundation;\\n\\n  struct CalculatedAmount {\\n    uint256 rAmount; \\n    uint256 rTransferAmount; \\n    uint256 rFee; \\n    uint256 rBurn; \\n    uint256 rFoundation;\\n    uint256 tTransferAmount; \\n    uint256 tFee; \\n    uint256 tBurn; \\n    uint256 tFoundation;\\n  }\\n\\n  event Bonus(address indexed recipient, uint256 value);\\n  event Burn(address indexed from, address indexed to, uint256 value);\\n  event MoonFoundationUpdated(address indexed previousMoonFoundation, address indexed newMoonFoundation);\\n\\n  constructor() {\\n    uint256 rTotalHalf = _rTotal.div(2);\\n    uint256 tTotalHalf = _tTotal.div(2);\\n    _rOwned[_msgSender()] = rTotalHalf;\\n    emit Transfer(address(0), _msgSender(), tTotalHalf);\\n\\n    _rOwned[address(this)] = rTotalHalf;\\n    emit Transfer(address(0), address(this), tTotalHalf);\\n    \\n    setMoonFoundation(owner());\\n    _excludeAccount(address(this));\\n    _excludeAccount(address(0));\\n  }\\n\\n  function excludeAccount(address account) external onlyOwner() {\\n    _excludeAccount(account);\\n  }\\n\\n  function includeAccount(address account) external onlyOwner() {\\n    require(_isExcluded[account], \\\"Account is already included\\\");\\n    require(account != address(this), \\\"Cannot include MOON contract address\\\");\\n    require(account != address(0), \\\"Cannot include zero address\\\");\\n    require(account != moonFoundation, \\\"Cannot include MOON foundation address\\\");\\n    for (uint256 i = 0; i < _excluded.length; i++) {\\n      if (_excluded[i] == account) {\\n        _excluded[i] = _excluded[_excluded.length - 1];\\n        _tOwned[account] = 0;\\n        _isExcluded[account] = false;\\n        _excluded.pop();\\n        break;\\n      }\\n    }\\n  }\\n\\n  function setMoonFoundation (address moonFoundation_) public onlyOwner() {\\n    _excludeAccount(moonFoundation_);\\n    address previousMoonFoundation = moonFoundation;\\n    moonFoundation = moonFoundation_;\\n    emit MoonFoundationUpdated(previousMoonFoundation, moonFoundation_);\\n  }\\n\\n  function reflect(uint256 tAmount) external {\\n    address sender = _msgSender();\\n    require(!_isExcluded[sender], \\\"Excluded addresses cannot call this function\\\");\\n\\n    CalculatedAmount memory amount = _calculateAmount(tAmount);\\n    _rOwned[sender] = _rOwned[sender].sub(amount.rAmount);\\n    _rTotal = _rTotal.sub(amount.rAmount);\\n    _tFeeTotal = _tFeeTotal.add(tAmount);\\n  }\\n\\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n    return true;\\n  }\\n\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"BEP20: decreased allowance below zero\\\"));\\n    return true;\\n  }\\n\\n  function setTaxFeePercent(uint256 percent) external onlyOwner() {\\n    require(percent + burnFeePercent + foundationFeePercent <= 100, \\\"Exceed 100 percent\\\");\\n    taxFeePercent = percent;\\n  }\\n    \\n  function setBurnFeePercent(uint256 percent) external onlyOwner() {\\n    require(percent + taxFeePercent + foundationFeePercent <= 100, \\\"Exceed 100 percent\\\");\\n    burnFeePercent = percent;\\n  }\\n\\n  function setFoundationFeePercent(uint256 percent) external onlyOwner() {\\n    require(percent + taxFeePercent + burnFeePercent <= 100, \\\"Exceed 100 percent\\\");\\n    foundationFeePercent = percent;\\n  }\\n\\n  function setBonusPercent(uint256 percent) external onlyOwner() {\\n    require(percent <= 100, \\\"Exceed 100 percent\\\");\\n    bonusPercent = percent;\\n  }\\n\\n  function approve(address spender, uint256 amount) external override returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n  \\n  function transfer(address recipient, uint256 amount) external override returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"BEP20: transfer amount exceeds allowance\\\"));\\n    return true;\\n  }\\n\\n  function totalFees() external view returns (uint256) {\\n    return _tFeeTotal;\\n  }\\n\\n  function getOwner() external view override returns (address) {\\n    return owner();\\n  }\\n\\n  function name() external view override returns (string memory) {\\n    return _name;\\n  }\\n\\n  function symbol() external view override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  function decimals() external view override returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  function balanceOf(address account) public view override returns (uint256) {\\n    if (_isExcluded[account]) return _tOwned[account];\\n    return tokenFromReflection(_rOwned[account]);\\n  }\\n\\n  function allowance(address owner, address spender) external view override returns (uint256) {\\n    return _allowances[owner][spender];\\n  }\\n\\n  function totalSupply() external pure override returns (uint256) {\\n    return _tTotal;\\n  }\\n\\n  function isExcluded(address account) public view returns (bool) {\\n    return _isExcluded[account];\\n  }\\n\\n  function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\\n    require(tAmount <= _tTotal, \\\"Amount must be less than supply\\\");\\n    CalculatedAmount memory amount = _calculateAmount(tAmount);\\n\\n    if(!deductTransferFee){\\n      return amount.rAmount;\\n    } else {\\n      return amount.rTransferAmount;\\n    }\\n  }\\n\\n  function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\\n    require(rAmount <= _rTotal, \\\"Amount must be less than total reflections\\\");\\n    uint256 currentRate =  _getRate();\\n    return rAmount.div(currentRate);\\n  }\\n\\n  /**\\n   * @dev burn without reducing total supply\\n   */\\n  function _burn(address account, uint256 rAmount, uint256 tAmount) private {\\n    _tOwned[address(0)] = _tOwned[address(0)].add(tAmount);\\n    _rOwned[address(0)] = _rOwned[address(0)].add(rAmount);     \\n\\n    emit Burn(account, address(0), tAmount);\\n  }\\n\\n  function _approve(address owner, address spender, uint256 amount) private {\\n    require(owner != address(0), \\\"BEP20: approve from the zero address\\\");\\n    require(spender != address(0), \\\"BEP20: approve to the zero address\\\");\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  function _transfer(address sender, address recipient, uint256 amount) private {\\n    require(sender != address(0), \\\"BEP20: transfer from the zero address\\\");\\n    require(recipient != address(0), \\\"BEP20: transfer to the zero address\\\");\\n    require(recipient != address(this), \\\"Transfer to the MOON contract address\\\");\\n    require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n\\n    if (_isExcluded[sender] && !_isExcluded[recipient]) {\\n      _transferFromExcluded(sender, recipient, amount);\\n    } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\\n      _transferToExcluded(sender, recipient, amount);\\n    } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\\n      _transferStandard(sender, recipient, amount);\\n    } else if (_isExcluded[sender] && _isExcluded[recipient]) {\\n      _transferBothExcluded(sender, recipient, amount);\\n    } else {\\n      _transferStandard(sender, recipient, amount);\\n    }\\n  }\\n\\n  function _excludeAccount(address account) private {\\n    require(!_isExcluded[account], \\\"Account is already excluded\\\");\\n    if(_rOwned[account] > 0) {\\n      _tOwned[account] = tokenFromReflection(_rOwned[account]);\\n    }\\n    _isExcluded[account] = true;\\n    _excluded.push(account);\\n  }\\n\\n  function _transferStandard(address sender, address recipient, uint256 tAmount) private {\\n    CalculatedAmount memory amount = _calculateAmount(tAmount);\\n\\n    _rOwned[sender] = _rOwned[sender].sub(amount.rAmount);\\n    _rOwned[recipient] = _rOwned[recipient].add(amount.rTransferAmount);       \\n    _reflectFee(amount.rFee, amount.tFee);\\n\\n    _burn(sender, amount.rBurn, amount.tBurn);\\n    _handleTransferToMoonFoundation(amount.rFoundation, amount.tFoundation);\\n    _handleBonusStandard(amount.tTransferAmount, recipient);\\n    emit Transfer(sender, recipient, amount.tTransferAmount);\\n  }\\n\\n  function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\\n    CalculatedAmount memory amount = _calculateAmount(tAmount);\\n\\n    _rOwned[sender] = _rOwned[sender].sub(amount.rAmount);\\n    _tOwned[recipient] = _tOwned[recipient].add(amount.tTransferAmount);\\n    _rOwned[recipient] = _rOwned[recipient].add(amount.rTransferAmount);           \\n    _reflectFee(amount.rFee, amount.tFee);\\n\\n    _burn(sender, amount.rBurn, amount.tBurn);\\n    _handleTransferToMoonFoundation(amount.rFoundation, amount.tFoundation);\\n    _handleBonusExcluded(amount.tTransferAmount, recipient);\\n    emit Transfer(sender, recipient, amount.tTransferAmount);\\n  }\\n\\n  function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\\n    CalculatedAmount memory amount = _calculateAmount(tAmount);\\n\\n    _rOwned[sender] = _rOwned[sender].sub(amount.rAmount);\\n    _tOwned[sender] = _tOwned[sender].sub(tAmount);\\n    _rOwned[recipient] = _rOwned[recipient].add(amount.rTransferAmount);   \\n    _reflectFee(amount.rFee, amount.tFee);\\n\\n    _burn(sender, amount.rBurn, amount.tBurn);\\n    _handleTransferToMoonFoundation(amount.rFoundation, amount.tFoundation);\\n    _handleBonusStandard(amount.tTransferAmount, recipient);\\n    emit Transfer(sender, recipient, amount.tTransferAmount);\\n  }\\n\\n  function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\\n    CalculatedAmount memory amount = _calculateAmount(tAmount);\\n\\n    _rOwned[sender] = _rOwned[sender].sub(amount.rAmount);\\n    _tOwned[sender] = _tOwned[sender].sub(tAmount);\\n    _rOwned[recipient] = _rOwned[recipient].add(amount.rTransferAmount);   \\n    _tOwned[recipient] = _tOwned[recipient].add(amount.tTransferAmount);\\n    _reflectFee(amount.rFee, amount.tFee);\\n\\n    _burn(sender, amount.rBurn, amount.tBurn);\\n    _handleTransferToMoonFoundation(amount.rFoundation, amount.tFoundation);\\n    _handleBonusExcluded(amount.tTransferAmount, recipient);\\n    emit Transfer(sender, recipient, amount.tTransferAmount);\\n  }\\n\\n  function _reflectFee(uint256 rFee, uint256 tFee) private {\\n    _rTotal = _rTotal.sub(rFee);\\n    _tFeeTotal = _tFeeTotal.add(tFee);\\n  }\\n\\n  function _calculateAmount(uint256 tAmount) private view returns (CalculatedAmount memory) {\\n    uint256 currentRate =  _getRate();\\n\\n    uint256 tFee = tAmount.mul(taxFeePercent).div(100);\\n    uint256 tBurn = tAmount.mul(burnFeePercent).div(100);\\n    uint256 tFoundation = tAmount.mul(foundationFeePercent).div(100);\\n    uint256 tTransferAmount = tAmount.sub(tFee).sub(tBurn).sub(tFoundation);\\n\\n    uint256 rAmount = tAmount.mul(currentRate);\\n    uint256 rFee = tFee.mul(currentRate);\\n    uint256 rBurn = tBurn.mul(currentRate);\\n    uint256 rFoundation = tFoundation.mul(currentRate);\\n    uint256 rTransferAmount = rAmount.sub(rFee).sub(rBurn).sub(rFoundation);\\n\\n    CalculatedAmount memory amount = CalculatedAmount(\\n      rAmount, \\n      rTransferAmount, \\n      rFee, \\n      rBurn, \\n      rFoundation, \\n      tTransferAmount, \\n      tFee, \\n      tBurn, \\n      tFoundation\\n    );\\n    \\n    return amount;\\n  }\\n\\n  function _handleBonusExcluded(uint256 tTransferAmount, address recipient) private {\\n    uint256 reserveAmount = balanceOf(address(this));\\n\\n    bool hasBonus = reserveAmount > 0;\\n    if(hasBonus) {\\n      uint256 currentRate =  _getRate();\\n      uint256 bonusAmount = tTransferAmount.mul(bonusPercent).div(100);\\n      uint256 tBonus = reserveAmount > bonusAmount ? bonusAmount : reserveAmount;\\n      uint256 rBonus = tBonus.mul(currentRate);\\n\\n      _rOwned[recipient] = _rOwned[recipient].add(rBonus);    \\n      _tOwned[recipient] = _tOwned[recipient].add(tBonus);\\n      _rOwned[address(this)] = _rOwned[address(this)].sub(rBonus); \\n      _tOwned[address(this)] = _tOwned[address(this)].sub(tBonus);\\n      \\n      emit Bonus(recipient, tBonus);\\n    }\\n  }\\n\\n  function _handleBonusStandard(uint256 tTransferAmount, address recipient) private {\\n    uint256 reserveAmount = balanceOf(address(this));\\n\\n    bool hasBonus = reserveAmount > 0;\\n    if(hasBonus) {\\n      uint256 currentRate =  _getRate();\\n      uint256 bonusAmount = tTransferAmount.mul(bonusPercent).div(100);\\n      uint256 tBonus = reserveAmount > bonusAmount ? bonusAmount : reserveAmount;\\n      uint256 rBonus = tBonus.mul(currentRate);\\n\\n      _rOwned[recipient] = _rOwned[recipient].add(rBonus);    \\n      _rOwned[address(this)] = _rOwned[address(this)].sub(rBonus); \\n      _tOwned[address(this)] = _tOwned[address(this)].sub(tBonus);\\n      \\n      emit Bonus(recipient, tBonus);\\n    }\\n  }\\n\\n  function _handleTransferToMoonFoundation(uint256 rFoundation, uint256 tFoundation) private {\\n    _rOwned[moonFoundation] = _rOwned[moonFoundation].add(rFoundation);\\n    _tOwned[moonFoundation] = _tOwned[moonFoundation].add(tFoundation);\\n  }\\n\\n  function _getRate() private view returns(uint256) {\\n    (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n    return rSupply.div(tSupply);\\n  }\\n\\n  function _getCurrentSupply() private view returns(uint256, uint256) {\\n    uint256 rSupply = _rTotal;\\n    uint256 tSupply = _tTotal;      \\n    for (uint256 i = 0; i < _excluded.length; i++) {\\n      if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\\n      rSupply = rSupply.sub(_rOwned[_excluded[i]]);\\n      tSupply = tSupply.sub(_tOwned[_excluded[i]]);\\n    }\\n    if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\n    return (rSupply, tSupply);\\n  }\\n}\"\r\n    },\r\n    \"/Users/fehuxapple4/Documents/GitHub/moon_baby/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n  address private _owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor () {\\n    address msgSender = _msgSender();\\n    _owner = msgSender;\\n    emit OwnershipTransferred(address(0), msgSender);\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public onlyOwner {\\n    emit OwnershipTransferred(_owner, address(0));\\n    _owner = address(0);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public onlyOwner {\\n    _transferOwnership(newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   */\\n  function _transferOwnership(address newOwner) internal {\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n  }\\n}\"\r\n    },\r\n    \"/Users/fehuxapple4/Documents/GitHub/moon_baby/contracts/libraries/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize, which returns 0 for contracts in\\n    // construction, since the code is only stored at the end of the\\n    // constructor execution.\\n\\n    uint256 size;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly { size := extcodesize(account) }\\n    return size > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain`call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n    return _verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n    require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return _verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n    require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return _verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\"\r\n    },\r\n    \"/Users/fehuxapple4/Documents/GitHub/moon_baby/contracts/libraries/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, \\\"SafeMath: division by zero\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\"\r\n    },\r\n    \"/Users/fehuxapple4/Documents/GitHub/moon_baby/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n  // Empty internal constructor, to prevent people from mistakenly deploying\\n  // an instance of this contract, which should be used via inheritance.\\n  function _msgSender() internal view returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Bonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousMoonFoundation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMoonFoundation\",\"type\":\"address\"}],\"name\":\"MoonFoundationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundationFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moonFoundation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"reflect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setBonusPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setBurnFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setFoundationFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"moonFoundation_\",\"type\":\"address\"}],\"name\":\"setMoonFoundation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MoonBaby", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}