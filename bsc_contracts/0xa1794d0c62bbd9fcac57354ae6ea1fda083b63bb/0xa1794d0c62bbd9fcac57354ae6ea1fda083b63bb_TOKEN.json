{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\n    pragma solidity ^0.8.0;\r\n\r\n    interface IBEP20 {\r\n        \r\n        function totalSupply() external view returns (uint256);\r\n        function balanceOf(address account) external view returns (uint256);\r\n        function transfer(address recipient, uint256 amount) external returns (bool);\r\n        function allowance(address owner, address spender) external view returns (uint256);\r\n        function approve(address spender, uint256 amount) external returns (bool);\r\n        function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n        \r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n        event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    }\r\n\r\n    library SafeMath {\r\n        \r\n        function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return a + b;\r\n        }\r\n        function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return a - b;\r\n        }\r\n        function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return a * b;\r\n        }\r\n        function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return a / b;\r\n        }\r\n        function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n            unchecked {\r\n                require(b <= a, errorMessage);\r\n                return a - b;\r\n            }\r\n        }\r\n        function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n            unchecked {\r\n                require(b > 0, errorMessage);\r\n                return a / b;\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    abstract contract Context {\r\n        function _msgSender() internal view virtual returns (address) {\r\n            return msg.sender;\r\n        }\r\n    }\r\n\r\n    abstract contract Ownable is Context {\r\n        address internal _owner;\r\n        address private _previousOwner;\r\n\r\n        event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n        constructor () {\r\n            _owner = _msgSender();\r\n            emit OwnershipTransferred(address(0), _owner);\r\n        }\r\n        \r\n        function owner() public view virtual returns (address) {\r\n            return _owner;\r\n        }\r\n        \r\n        modifier onlyOwner() {\r\n            require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n            _;\r\n        }\r\n        \r\n        function renounceOwnership() public virtual onlyOwner {\r\n            emit OwnershipTransferred(_owner, address(0));\r\n            _owner = address(0);\r\n        }\r\n\r\n        function transferOwnership(address newOwner) public virtual onlyOwner {\r\n            require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n            emit OwnershipTransferred(_owner, newOwner);\r\n            _owner = newOwner;\r\n        }\r\n }\r\n\r\n    interface IBEP20Metadata is IBEP20 {\r\n        function name() external view returns (string memory);\r\n        function symbol() external view returns (string memory);\r\n        function decimals() external view returns (uint8);\r\n    }\r\n\r\n    contract BEP20 is Context,Ownable, IBEP20, IBEP20Metadata {\r\n        using SafeMath for uint256;\r\n\r\n        mapping(address => uint256) private _balances;\r\n\r\n        mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n        uint256 private _totalSupply;\r\n\r\n        string private _name;\r\n        string private _symbol;\r\n\r\n        constructor(string memory name_, string memory symbol_) {\r\n            _name = name_;\r\n            _symbol = symbol_;\r\n        }\r\n\r\n        function name() public view virtual override returns (string memory) {\r\n            return _name;\r\n        }\r\n\r\n        function symbol() public view virtual override returns (string memory) {\r\n            return _symbol;\r\n        }\r\n\r\n        function decimals() public view virtual override returns (uint8) {\r\n            return 9;\r\n        }\r\n\r\n        function totalSupply() public view virtual override returns (uint256) {\r\n            return _totalSupply;\r\n        }\r\n\r\n        function balanceOf(address account) public view virtual override returns (uint256) {\r\n            return _balances[account];\r\n        }\r\n\r\n        function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n            _transfer(_msgSender(), recipient, amount);\r\n            return true;\r\n        }\r\n\r\n        function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n            return _allowances[owner][spender];\r\n        }\r\n\r\n        function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n            _approve(_msgSender(), spender, amount);\r\n            return true;\r\n        }\r\n\r\n        function transferFrom(\r\n            address sender,\r\n            address recipient,\r\n            uint256 amount\r\n        ) public virtual override returns (bool) {\r\n            _transfer(sender, recipient, amount);\r\n            _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n            return true;\r\n        }\r\n\r\n        function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n            _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n            return true;\r\n        }\r\n\r\n        function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n            _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\n            return true;\r\n        }\r\n\r\n        function _transfer(\r\n            address sender,\r\n            address recipient,\r\n            uint256 amount\r\n        ) internal virtual {\r\n            require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n            require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n\r\n            _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n            _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n            emit Transfer(sender, recipient, amount);\r\n        }\r\n\r\n        function _mint(address account, uint256 amount) internal virtual {\r\n            require(account != address(0), \"BEP20: mint to the zero address\");\r\n\r\n            _beforeTokenTransfer(address(0), account, amount);\r\n\r\n            _totalSupply = _totalSupply.add(amount);\r\n            _balances[account] = _balances[account].add(amount);\r\n            emit Transfer(address(0), account, amount);\r\n        }\r\n\r\n        function _approve(\r\n            address owner,\r\n            address spender,\r\n            uint256 amount\r\n        ) internal virtual {\r\n            require(owner != address(0), \"BEP20: approve from the zero address\");\r\n            require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n            _allowances[owner][spender] = amount;\r\n            emit Approval(owner, spender, amount);\r\n        }\r\n\r\n        function _beforeTokenTransfer(\r\n            address from,\r\n            address to,\r\n            uint256 amount\r\n        ) internal virtual {}\r\n    }\r\n\r\n\r\n    interface IPancakeFactory {\r\n        function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    }\r\n\r\n    interface IPancakeRouter01 {\r\n        function factory() external pure returns (address);\r\n        function WETH() external pure returns (address);\r\n    }\r\n\r\n    interface IPancakeRouter02 is IPancakeRouter01 {     \r\n       function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            uint amountIn,\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external;\r\n    }\r\n\r\n    contract TOKEN is BEP20 {\r\n        \r\n        using SafeMath for uint256;\r\n\r\n        mapping (address => bool) private isExcludedFromFee;\r\n\r\n        address public marketingWallet;\r\n        address constant _burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n        uint256 public buyFee = 1;  \r\n        uint256 public sellFee = 1; \r\n\r\n        IPancakeRouter02 public pancakeV2Router;\r\n        address public pancakeV2Pair;\r\n        bool inSwapAndSendFees;\r\n        bool public swapAndSendFeeEnabled = true;\r\n        uint256 public numTokensSellToSendFees;\r\n        event swapAndSendFeeEnabledUpdated(bool enabled);\r\n        \r\n        modifier lockTheSwap {\r\n            inSwapAndSendFees = true;\r\n            _;\r\n            inSwapAndSendFees = false;\r\n        }\r\n        \r\n        constructor (uint256 _totalsupply, uint256 _numTokenToSell) BEP20(\"CrowdFund.Games\", \"$CFG\"){\r\n\r\n            numTokensSellToSendFees = _numTokenToSell * 10 ** decimals();\r\n            marketingWallet = 0x092ccd30786e48c8e3CFC6d6B66cc909BCa3bE9B;\r\n            \r\n            IPancakeRouter02 _pancakeV2Router = IPancakeRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n            pancakeV2Pair = IPancakeFactory(_pancakeV2Router.factory())\r\n                .createPair(address(this), _pancakeV2Router.WETH());\r\n\r\n            pancakeV2Router = _pancakeV2Router;\r\n            \r\n            isExcludedFromFee[_msgSender()] = true;\r\n            isExcludedFromFee[address(this)] = true;\r\n            isExcludedFromFee[marketingWallet] = true;\r\n\r\n            _mint(owner(), _totalsupply * 10 ** decimals());\r\n        }\r\n      \r\n        function includeAndExcludeFromFee(address account,bool value) public onlyOwner {\r\n            isExcludedFromFee[account] = value;\r\n        }\r\n\r\n        function isExcludedFromFees(address account) public view returns(bool) {\r\n            return isExcludedFromFee[account];\r\n        }\r\n\r\n        function setFees(\r\n            uint256 _buyFee,\r\n            uint256 _sellFee\r\n        ) external onlyOwner {\r\n            require(_buyFee <=  2 && _sellFee <=  2, \"BEP20: Maximum BUY & SELL fees allowed is 2%\");\r\n            buyFee = _buyFee;\r\n            sellFee = _sellFee;\r\n        }\r\n\r\n        function setWallet(address _marketing) external onlyOwner {\r\n            marketingWallet = _marketing;\r\n        }\r\n\r\n        function setNumTokens(uint256 amount) external onlyOwner {\r\n            numTokensSellToSendFees = amount * 10 ** decimals();\r\n        }\r\n\r\n        function setswapAndSendFeeEnabled(bool _enabled) external onlyOwner {\r\n            swapAndSendFeeEnabled = _enabled;\r\n            emit swapAndSendFeeEnabledUpdated(_enabled);\r\n        }\r\n        \r\n        receive() external payable {}\r\n\r\n        function _transfer(\r\n            address from,\r\n            address to,\r\n            uint256 amount\r\n        ) internal override {\r\n            require(from != address(0), \"BEP20: transfer from the zero address\");\r\n            require(to != address(0), \"BEP20: transfer to the zero address\");\r\n            require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this)); \r\n            bool overMinTokenBalance = contractTokenBalance >= numTokensSellToSendFees;\r\n            if (\r\n                overMinTokenBalance &&\r\n                !inSwapAndSendFees &&\r\n                from != pancakeV2Pair &&\r\n                swapAndSendFeeEnabled\r\n            ) {\r\n                contractTokenBalance = numTokensSellToSendFees;\r\n                swapBack(contractTokenBalance);\r\n            }\r\n\r\n            bool takeFee = true;\r\n            if (isExcludedFromFee[from] || isExcludedFromFee[to]) {\r\n                super._transfer(from, to, amount);\r\n                takeFee = false;\r\n            } else {\r\n\r\n            if (from == pancakeV2Pair) {\r\n                uint256 marketingTokens = amount.mul(buyFee).div(100);    \r\n                amount= amount.sub(marketingTokens);\r\n                super._transfer(from, address(this), marketingTokens);\r\n                super._transfer(from, to, amount);\r\n\r\n            } else if (to == pancakeV2Pair) {\r\n                uint256 marketingTokens = amount.mul(sellFee).div(100);\r\n                amount= amount.sub(marketingTokens);\r\n                super._transfer(from, address(this),marketingTokens);\r\n                super._transfer(from, to, amount);\r\n            } else {\r\n                super._transfer(from, to, amount);\r\n            }\r\n        }\r\n        }\r\n\r\n        function swapBack(uint256 contractBalance) private lockTheSwap {\r\n            \r\n                uint256 marketingTokens = contractBalance.mul(sellFee).div(100);\r\n                uint256 totalTokensToSwap =  marketingTokens;\r\n                if(contractBalance == 0 || totalTokensToSwap == 0) {return;}\r\n                bool success;\r\n                swapTokensForEth(contractBalance); \r\n                uint256 ethBalance = address(this).balance;\r\n                uint256 ethForMarketing = ethBalance * marketingTokens / (totalTokensToSwap);\r\n                (success,) = address(marketingWallet).call{value: ethForMarketing}(\"\");\r\n\r\n        }       \r\n\r\n        function swapTokensForEth(uint256 tokenAmount) private {\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = pancakeV2Router.WETH();\r\n            _approve(address(this), address(pancakeV2Router), tokenAmount);\r\n            pancakeV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                tokenAmount,\r\n                0, \r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    // ABOUT TOKEN\r\n    // Token Name: CrowdFund.Games\r\n    // Symbol: CFG\r\n    // Total Supply: 1000000000000000\r\n    // Decimal: 9\r\n    // Standard: BEP20\r\n    // Blockchain: BSC\r\n\r\n    // Tax on BUY: 1%\r\n    // Tax on SELL: 1% \r\n    // Maximum Tax 0-2% on BUY & SELL", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalsupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numTokenToSell\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"swapAndSendFeeEnabledUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"includeAndExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToSendFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeV2Router\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setNumTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketing\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setswapAndSendFeeEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndSendFeeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TOKEN", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000000000000001c6bf52634000", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cafa28fbded116bbd8f3e66e79259d9d990e7efd7d77a1c8e62c5d801326fb02"}