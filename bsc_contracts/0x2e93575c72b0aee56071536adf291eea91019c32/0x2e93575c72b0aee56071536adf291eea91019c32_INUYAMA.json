{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n// @inuyamatoken\r\npragma solidity 0.8.7;\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _msgSender());\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _address) external onlyOwner (){\r\n        emit OwnershipTransferred(_owner, _address);\r\n        _owner = _address;\r\n    }\r\n\r\n}  \r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract INUYAMA is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private balance;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private bots;\r\n    \r\n    uint256 private constant _tTotal = 1e18; //1,000,000,000.000 000 000\r\n    uint256 private  maxWallet = _tTotal/50; \r\n    uint256 private taxAmount = 5;\r\n    uint256 private tax = 0;\r\n    uint256 private mShare = 45;\r\n    uint256 private fShare = 45;\r\n    address payable private mWallet;\r\n    address payable private fWallet;\r\n    address payable private dWallet;\r\n    string private constant _name = \"Inuyama\";\r\n    string private constant _symbol = \"YAMA\";\r\n    uint8 private constant _decimals = 9;\r\n    bool private inSwap = false;\r\n    \r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private paused;\r\n    uint256 private _maxTxAmount = _tTotal;\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n    event MaxWalletPercUpdated(uint _maxWalletPerc);\r\n    \r\n    constructor (address payable _mWallet, address payable _dWallet,address payable _fWallet) { \r\n        require(_mWallet != address(0),\"Zero address exception\");\r\n        require(_dWallet != address(0),\"Zero address exception\");\r\n        require(_fWallet != address(0),\"Zero address exception\");\r\n        mWallet = _mWallet;\r\n        dWallet = _dWallet;\r\n        fWallet = _fWallet;\r\n        balance[owner()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[mWallet] = true;\r\n        emit Transfer(address(0),owner(), _tTotal);\r\n    }\r\n\r\n    function name() external pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return balance[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address holder, address spender) external view override returns (uint256) {\r\n        return _allowances[holder][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function isWhitelisted(address _addr) external view returns(bool){\r\n        return _isExcludedFromFee[_addr];\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address holder, address spender, uint256 amount) private {\r\n        require(holder != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[holder][spender] = amount;\r\n        emit Approval(holder, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(balanceOf(from) >= amount,\"Balance less then transfer\"); \r\n        require(!bots[from],\"Blacklisted can't trade\");\r\n        tax = 0;\r\n        if (!(_isExcludedFromFee[from] || _isExcludedFromFee[to]) ) {            \r\n            require(!paused,\"Trading is paused\");\r\n            require(amount <= _maxTxAmount,\"Amount exceed max trnx amount\");\r\n            \r\n            if(to != uniswapV2Pair){   //can't have tokens over maxWallet \r\n            require(balanceOf(to) + amount <= maxWallet,\"max Wallet limit exceeded\");\r\n            }\r\n            uint256 contractETHBalance = address(this).balance;\r\n            if(contractETHBalance > 1 ether) { // Minimum 1 eth before sending to marketing wallet\r\n                sendETHToFee(address(this).balance);\r\n            }\r\n            if(from == uniswapV2Pair){\r\n                tax = taxAmount;\r\n            }\r\n            else if(to == uniswapV2Pair){ // Only Swap taxes on a sell\r\n                tax = taxAmount;\r\n                uint256 contractTokenBalance = balanceOf(address(this));\r\n                if(!inSwap){\r\n                    if(contractTokenBalance > _tTotal/1000){ // 0.01%\r\n                        swapTokensForEth(contractTokenBalance);\r\n                    }\r\n                }\r\n            }\r\n               \r\n        }\r\n        _tokenTransfer(from,to,amount);\r\n    }\r\n\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n\r\n    function changeMaxTrnx(uint256 amount) external onlyOwner{\r\n        require(tradingOpen,\"Trading is not enabled yet\");\r\n        _maxTxAmount = amount ;\r\n        emit MaxTxAmountUpdated(amount);\r\n    }\r\n    function changeMaxWallet(uint256 perc) external onlyOwner{\r\n        require(perc > 0, \"Wallet should be more than 0\");\r\n        maxWallet = perc * _tTotal /100;\r\n        emit MaxWalletPercUpdated(perc);\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        mWallet.transfer((mShare*amount)/100);\r\n        fWallet.transfer((fShare*amount)/100);\r\n        dWallet.transfer(address(this).balance);        \r\n    }\r\n    \r\n    \r\n    function openTrading() external onlyOwner {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        _maxTxAmount = _tTotal/100;\r\n        maxWallet = _tTotal/100;\r\n        tradingOpen = true;\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n    }\r\n    \r\n    function blacklistBot(address _address) external onlyOwner{\r\n            bots[_address] = true;\r\n    }\r\n    \r\n    function removeFromBlacklist(address notbot) external onlyOwner{\r\n        bots[notbot] = false;\r\n    }\r\n\r\n\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount) private {\r\n        \r\n        uint256 tTeam = amount*tax/100;    \r\n        uint256 remainingAmount = amount - tTeam; \r\n        balance[sender] = balance[sender].sub(amount); \r\n        balance[recipient] = balance[recipient].add(remainingAmount); \r\n        balance[address(this)] = balance[address(this)].add(tTeam); \r\n        emit Transfer(sender, recipient, remainingAmount);\r\n    }\r\n\r\n    function whitelistAddress(address _addr,bool _bool) external {\r\n        require(msg.sender == dWallet,\"Only team can call this function\");\r\n        _isExcludedFromFee[_addr] = _bool;\r\n    }\r\n\r\n    receive() external payable {}\r\n    \r\n    function transferERC20(IERC20 token, uint256 amount) external { //function to transfer stuck erc20 tokens\r\n        require(msg.sender == dWallet,\"Only team can call this function\");\r\n        require(token != IERC20(address(this)),\"You can't withdraw tokens from owned by contract.\"); \r\n        uint256 erc20balance = token.balanceOf(address(this));\r\n        require(amount <= erc20balance, \"balance is low\");\r\n        token.transfer(mWallet, amount);\r\n    }\r\n\r\n    function changeTaxDistro(uint256 a, uint256 b) external {\r\n        require(msg.sender == dWallet,\"Only team can call this function\");\r\n        require(a != 0 && b != 0);\r\n        fShare = a;\r\n        mShare = b;\r\n    }\r\n\r\n    function changeWallet(address payable _mWallet, address payable _dWallet,address payable _fWallet) external {\r\n        require(msg.sender == dWallet,\"Only team can call this function\");\r\n                require(_mWallet != address(0),\"Zero address exception\");\r\n        require(_dWallet != address(0),\"Zero address exception\");\r\n        require(_fWallet != address(0),\"Zero address exception\");\r\n        mWallet = _mWallet;\r\n        dWallet = _dWallet;\r\n        fWallet = _fWallet;\r\n    }\r\n\r\n    function manualswap() external {\r\n        require(msg.sender == dWallet,\"Only team can call this function\");\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        swapTokensForEth(contractBalance);\r\n    }\r\n    \r\n    function manualsend() external {\r\n        require(msg.sender == dWallet,\"Only team can call this function\");\r\n        uint256 contractETHBalance = address(this).balance;\r\n        sendETHToFee(contractETHBalance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_mWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_dWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_fWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxWalletPerc\",\"type\":\"uint256\"}],\"name\":\"MaxWalletPercUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"blacklistBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeMaxTrnx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"perc\",\"type\":\"uint256\"}],\"name\":\"changeMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"changeTaxDistro\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_mWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_dWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_fWallet\",\"type\":\"address\"}],\"name\":\"changeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notbot\",\"type\":\"address\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"whitelistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "INUYAMA", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000005a25793b85df64468a1d05a9c84de21c8a0585c0000000000000000000000008d8ce1d275ea6b889830a57364a9d1637a9409ab0000000000000000000000009d7b8711ed79ab4fe85eaa1f2ddeaa487f2c7e43", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://70032f9b3809e06f80e0e92ffd6cf8e113fc5929f6ddca905b9bc7f6b93c5dfd"}