{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"ethprinter.sol\": {\r\n      \"content\": \"// https://t.me/ETHPrinterGlobal\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n}\\n\\n/**\\n * BEP20 standard interface.\\n */\\ninterface IBEP20 {\\n    function totalSupply() external view returns (uint256);\\n    function decimals() external view returns (uint8);\\n    function symbol() external view returns (string memory);\\n    function name() external view returns (string memory);\\n    function getOwner() external view returns (address);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nabstract contract Auth {\\n    address internal owner;\\n    mapping (address => bool) internal authorizations;\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n        authorizations[_owner] = true;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(isOwner(msg.sender), \\\"!OWNER\\\"); _;\\n    }\\n\\n    modifier authorized() {\\n        require(isAuthorized(msg.sender), \\\"!AUTHORIZED\\\"); _;\\n    }\\n\\n    function authorize(address adr) public onlyOwner {\\n        authorizations[adr] = true;\\n    }\\n\\n    function unauthorize(address adr) public onlyOwner {\\n        authorizations[adr] = false;\\n    }\\n\\n    function isOwner(address account) public view returns (bool) {\\n        return account == owner;\\n    }\\n\\n    function isAuthorized(address adr) public view returns (bool) {\\n        return authorizations[adr];\\n    }\\n\\n    function transferOwnership(address payable adr) public onlyOwner {\\n        owner = adr;\\n        authorizations[adr] = true;\\n        emit OwnershipTransferred(adr);\\n    }\\n\\n    event OwnershipTransferred(address owner);\\n}\\n\\ninterface IDEXFactory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\ninterface IDEXRouter {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\\ninterface IDividendDistributor {\\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external;\\n    function setShare(address shareholder, uint256 amount) external;\\n    function deposit() external payable;\\n    function process(uint256 gas) external;\\n}\\n\\ncontract DividendDistributor is IDividendDistributor {\\n    using SafeMath for uint256;\\n\\n    address _token;\\n\\n    struct Share {\\n        uint256 amount;\\n        uint256 totalExcluded;\\n        uint256 totalRealised;\\n    }\\n\\n    IBEP20 RWRD = IBEP20(0x2170Ed0880ac9A755fd29B2688956BD959F933F8);\\n    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n    IDEXRouter router;\\n\\n    address[] shareholders;\\n    mapping (address => uint256) shareholderIndexes;\\n    mapping (address => uint256) shareholderClaims;\\n\\n    mapping (address => Share) public shares;\\n\\n    uint256 public totalShares;\\n    uint256 public totalDividends;\\n    uint256 public totalDistributed;\\n    uint256 public dividendsPerShare;\\n    uint256 public dividendsPerShareAccuracyFactor = 10 ** 36;\\n\\n    uint256 public minPeriod = 1 * 1;\\n    uint256 public minDistribution = 1 * (10 ** 13);\\n\\n    uint256 currentIndex;\\n\\n    bool initialized;\\n    modifier initialization() {\\n        require(!initialized);\\n        _;\\n        initialized = true;\\n    }\\n\\n    modifier onlyToken() {\\n        require(msg.sender == _token); _;\\n    }\\n\\n    constructor (address _router) {\\n        router = _router != address(0)\\n            ? IDEXRouter(_router)\\n            : IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n        _token = msg.sender;\\n    }\\n\\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external override onlyToken {\\n        minPeriod = _minPeriod;\\n        minDistribution = _minDistribution;\\n    }\\n\\n    function setShare(address shareholder, uint256 amount) external override onlyToken {\\n        if(shares[shareholder].amount > 0){\\n            distributeDividend(shareholder);\\n        }\\n\\n        if(amount > 0 && shares[shareholder].amount == 0){\\n            addShareholder(shareholder);\\n        }else if(amount == 0 && shares[shareholder].amount > 0){\\n            removeShareholder(shareholder);\\n        }\\n\\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\\n        shares[shareholder].amount = amount;\\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\\n    }\\n\\n    function deposit() external payable override onlyToken {\\n        uint256 balanceBefore = RWRD.balanceOf(address(this));\\n\\n        address[] memory path = new address[](2);\\n        path[0] = WBNB;\\n        path[1] = address(RWRD);\\n\\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        uint256 amount = RWRD.balanceOf(address(this)).sub(balanceBefore);\\n\\n        totalDividends = totalDividends.add(amount);\\n        dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares));\\n    }\\n\\n    function process(uint256 gas) external override onlyToken {\\n        uint256 shareholderCount = shareholders.length;\\n\\n        if(shareholderCount == 0) { return; }\\n\\n        uint256 gasUsed = 0;\\n        uint256 gasLeft = gasleft();\\n\\n        uint256 iterations = 0;\\n\\n        while(gasUsed < gas && iterations < shareholderCount) {\\n            if(currentIndex >= shareholderCount){\\n                currentIndex = 0;\\n            }\\n\\n            if(shouldDistribute(shareholders[currentIndex])){\\n                distributeDividend(shareholders[currentIndex]);\\n            }\\n\\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\\n            gasLeft = gasleft();\\n            currentIndex++;\\n            iterations++;\\n        }\\n    }\\n    \\n    function shouldDistribute(address shareholder) internal view returns (bool) {\\n        return shareholderClaims[shareholder] + minPeriod < block.timestamp\\n                && getUnpaidEarnings(shareholder) > minDistribution;\\n    }\\n\\n    function distributeDividend(address shareholder) internal {\\n        if(shares[shareholder].amount == 0){ return; }\\n\\n        uint256 amount = getUnpaidEarnings(shareholder);\\n        if(amount > 0){\\n            totalDistributed = totalDistributed.add(amount);\\n            RWRD.transfer(shareholder, amount);\\n            shareholderClaims[shareholder] = block.timestamp;\\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount);\\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\\n        }\\n    }\\n    \\n    function claimDividend() external {\\n        distributeDividend(msg.sender);\\n    }\\n\\n    function getUnpaidEarnings(address shareholder) public view returns (uint256) {\\n        if(shares[shareholder].amount == 0){ return 0; }\\n\\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\\n\\n        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }\\n\\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\\n    }\\n\\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\\n        return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\\n    }\\n\\n    function addShareholder(address shareholder) internal {\\n        shareholderIndexes[shareholder] = shareholders.length;\\n        shareholders.push(shareholder);\\n    }\\n\\n    function removeShareholder(address shareholder) internal {\\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\\n        shareholders.pop();\\n    }\\n}\\n\\ncontract ETHPRINTER is IBEP20, Auth {\\n    using SafeMath for uint256;\\n\\n    address WBNB   =  0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n    address DEAD   =  0x000000000000000000000000000000000000dEaD;\\n    address ZERO   =  0x0000000000000000000000000000000000000000;\\n    address DEPLOY =  0xe41387D8642473BC115d810dF18C16dC6b405668;\\n    address DEV    =  0xF5a03E3A8780e7ECCe31a20a08C8Bf3A7f3F5d40;\\n\\n    string constant _name = \\\"ETH Printer\\\";\\n    string constant _symbol = \\\"ETHP\\\";\\n    uint8 constant _decimals = 9;\\n\\n    uint256 _totalSupply = 69000000 * 10**_decimals;\\n\\n    uint256 public _maxTxAmount = _totalSupply;\\n    uint256 public _maxWalletToken = _totalSupply * 200 / 10000;\\n\\n    mapping (address => uint256) _balances;\\n    mapping (address => mapping (address => uint256)) _allowances;\\n\\n    bool public blacklistMode = true;\\n    mapping (address => bool) public isBlacklisted;\\n\\n    mapping (address => bool) isFeeExempt;\\n    mapping (address => bool) isTxLimitExempt;\\n    mapping (address => bool) isTimelockExempt;\\n    mapping (address => bool) isDividendExempt;\\n\\n    uint256 public liquidityFee    = 0;\\n    uint256 public reflectionFee   = 4;\\n    uint256 public marketingFee    = 3;\\n    uint256 public devFee          = 0;\\n    uint256 public totalFee        = marketingFee + reflectionFee + liquidityFee + devFee;\\n    uint256 public feeDenominator  = 100;\\n\\n    uint256 public sellMultiplier  = 200;\\n\\n    address public autoLiquidityReceiver;\\n    address public marketingFeeReceiver;\\n    address private devFeeReceiver;\\n\\n    uint256 targetLiquidity = 20;\\n    uint256 targetLiquidityDenominator = 100;\\n\\n    IDEXRouter public router;\\n    address public pair;\\n\\n    bool public tradingOpen = false;\\n\\n    DividendDistributor public distributor;\\n    uint256 distributorGas = 2000;\\n\\n    bool public buyCooldownEnabled = true;\\n    uint8 public cooldownTimerInterval = 10;\\n    mapping (address => uint) private cooldownTimer;\\n\\n    bool public swapEnabled = true;\\n    uint256 public swapThreshold = _totalSupply * 20 / 10000;\\n    bool inSwap;\\n    modifier swapping() { inSwap = true; _; inSwap = false; }\\n\\n    constructor () Auth(msg.sender) {\\n        router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n        pair = IDEXFactory(router.factory()).createPair(WBNB, address(this));\\n        _allowances[address(this)][address(router)] = uint256(-1);\\n\\n        distributor = new DividendDistributor(address(router));\\n\\n        isFeeExempt[msg.sender] = true;\\n        isFeeExempt[address(DEV)] = true;\\n        isTxLimitExempt[msg.sender] = true;\\n        isTxLimitExempt[address(DEV)] = true;\\n\\n        isTimelockExempt[msg.sender] = true;\\n        isTimelockExempt[address(DEV)] = true;\\n        isTimelockExempt[DEAD] = true;\\n        isTimelockExempt[address(this)] = true;\\n        isTimelockExempt[address(DEV)] = true;\\n\\n        isDividendExempt[pair] = true;\\n        isDividendExempt[address(this)] = true;\\n        isDividendExempt[address(DEV)] = false;\\n        isDividendExempt[DEAD] = true;\\n\\n        autoLiquidityReceiver = msg.sender;\\n        marketingFeeReceiver = address(0xF5a03E3A8780e7ECCe31a20a08C8Bf3A7f3F5d40);\\n        devFeeReceiver = address(DEV);\\n\\n        _balances[msg.sender] = _totalSupply;\\n        emit Transfer(address(DEPLOY), msg.sender, _totalSupply);\\n    }\\n\\n    receive() external payable { }\\n\\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\\n    function decimals() external pure override returns (uint8) { return _decimals; }\\n    function symbol() external pure override returns (string memory) { return _symbol; }\\n    function name() external pure override returns (string memory) { return _name; }\\n    function getOwner() external view override returns (address) { return owner; }\\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _allowances[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function approveMax(address spender) external returns (bool) {\\n        return approve(spender, uint256(-1));\\n    }\\n\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        return _transferFrom(msg.sender, recipient, amount);\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        if(_allowances[sender][msg.sender] != uint256(-1)){\\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \\\"Insufficient Allowance\\\");\\n        }\\n\\n        return _transferFrom(sender, recipient, amount);\\n    }\\n\\n    function setMaxWalletPercent_base1000(uint256 maxWallPercent_base1000) external onlyOwner() {\\n        _maxWalletToken = (_totalSupply * maxWallPercent_base1000 ) / 1000;\\n    }\\n    function setMaxTxPercent_base1000(uint256 maxTXPercentage_base1000) external onlyOwner() {\\n        _maxTxAmount = (_totalSupply * maxTXPercentage_base1000 ) / 1000;\\n    }\\n\\n    function setTxLimit(uint256 amount) external authorized {\\n        _maxTxAmount = amount;\\n    }\\n\\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\\n\\n        if(!authorizations[sender] && !authorizations[recipient]){\\n            require(tradingOpen,\\\"Trading not open yet\\\");\\n        }\\n\\n        // Blacklist\\n        if(blacklistMode){\\n            require(!isBlacklisted[sender] && !isBlacklisted[recipient],\\\"Blacklisted\\\");    \\n        }\\n\\n\\n        if (!authorizations[sender] && recipient != address(this)  && recipient != address(DEAD) && recipient != pair && recipient != marketingFeeReceiver && recipient != devFeeReceiver  && recipient != autoLiquidityReceiver){\\n            uint256 heldTokens = balanceOf(recipient);\\n            require((heldTokens + amount) <= _maxWalletToken,\\\"Total Holding is currently limited, you can not buy that much.\\\");}\\n        \\n        if (sender == pair &&\\n            buyCooldownEnabled &&\\n            !isTimelockExempt[recipient]) {\\n            require(cooldownTimer[recipient] < block.timestamp,\\\"Please wait for 1min between two buys\\\");\\n            cooldownTimer[recipient] = block.timestamp + cooldownTimerInterval;\\n        }\\n\\n        // Checks max transaction limit\\n        checkTxLimit(sender, amount);\\n\\n        if(shouldSwapBack()){ swapBack(); }\\n\\n        //Exchange tokens\\n        _balances[sender] = _balances[sender].sub(amount, \\\"Insufficient Balance\\\");\\n\\n        uint256 amountReceived = shouldTakeFee(sender) ? takeFee(sender, amount,(recipient == pair)) : amount;\\n        _balances[recipient] = _balances[recipient].add(amountReceived);\\n\\n        // Dividend tracker\\n        if(!isDividendExempt[sender]) {\\n            try distributor.setShare(sender, _balances[sender]) {} catch {}\\n        }\\n\\n        if(!isDividendExempt[recipient]) {\\n            try distributor.setShare(recipient, _balances[recipient]) {} catch {} \\n        }\\n\\n        try distributor.process(distributorGas) {} catch {}\\n\\n        emit Transfer(sender, recipient, amountReceived);\\n        return true;\\n    }\\n    \\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\\n        _balances[sender] = _balances[sender].sub(amount, \\\"Insufficient Balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function checkTxLimit(address sender, uint256 amount) internal view {\\n        require(amount <= _maxTxAmount || isTxLimitExempt[sender], \\\"TX Limit Exceeded\\\");\\n    }\\n\\n    function shouldTakeFee(address sender) internal view returns (bool) {\\n        return !isFeeExempt[sender];\\n    }\\n\\n    function takeFee(address sender, uint256 amount, bool isSell) internal returns (uint256) {\\n        \\n        uint256 multiplier = isSell ? sellMultiplier : 100;\\n        uint256 feeAmount = amount.mul(totalFee).mul(multiplier).div(feeDenominator * 100);\\n        \\n\\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\\n        emit Transfer(sender, address(this), feeAmount);\\n\\n        return amount.sub(feeAmount);\\n    }\\n\\n    function shouldSwapBack() internal view returns (bool) {\\n        return msg.sender != pair\\n        && !inSwap\\n        && swapEnabled\\n        && _balances[address(this)] >= swapThreshold;\\n    }\\n\\n    function clearStuckBalance(uint256 amountPercentage) external authorized {\\n        uint256 amountBNB = address(this).balance;\\n        payable(marketingFeeReceiver).transfer(amountBNB * amountPercentage / 100);\\n    }\\n\\n    function clearStuckBalance_sender(uint256 amountPercentage) external authorized {\\n        uint256 amountBNB = address(this).balance;\\n        payable(msg.sender).transfer(amountBNB * amountPercentage / 100);\\n    }\\n\\n    function set_sell_multiplier(uint256 Multiplier) external onlyOwner{\\n        sellMultiplier = Multiplier;        \\n    }\\n\\n    // switch Trading\\n    function tradingStatus(bool _status) public onlyOwner {\\n        tradingOpen = _status;\\n    }\\n\\n    // enable cooldown between trades\\n    function cooldownEnabled(bool _status, uint8 _interval) public onlyOwner {\\n        buyCooldownEnabled = _status;\\n        cooldownTimerInterval = _interval;\\n    }\\n\\n    function swapBack() internal swapping {\\n        uint256 dynamicLiquidityFee = isOverLiquified(targetLiquidity, targetLiquidityDenominator) ? 0 : liquidityFee;\\n        uint256 amountToLiquify = swapThreshold.mul(dynamicLiquidityFee).div(totalFee).div(2);\\n        uint256 amountToSwap = swapThreshold.sub(amountToLiquify);\\n\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = WBNB;\\n\\n        uint256 balanceBefore = address(this).balance;\\n\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            amountToSwap,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        uint256 amountBNB = address(this).balance.sub(balanceBefore);\\n\\n        uint256 totalBNBFee = totalFee.sub(dynamicLiquidityFee.div(2));\\n        \\n        uint256 amountBNBLiquidity = amountBNB.mul(dynamicLiquidityFee).div(totalBNBFee).div(2);\\n        uint256 amountBNBReflection = amountBNB.mul(reflectionFee).div(totalBNBFee);\\n        uint256 amountBNBMarketing = amountBNB.mul(marketingFee).div(totalBNBFee);\\n        uint256 amountBNBDev = amountBNB.mul(devFee).div(totalBNBFee);\\n\\n        try distributor.deposit{value: amountBNBReflection}() {} catch {}\\n        (bool tmpSuccess,) = payable(marketingFeeReceiver).call{value: amountBNBMarketing, gas: 30000}(\\\"\\\");\\n        (tmpSuccess,) = payable(devFeeReceiver).call{value: amountBNBDev, gas: 3000}(\\\"\\\");\\n        \\n        // Supress warning msg\\n        tmpSuccess = false;\\n\\n        if(amountToLiquify > 0){\\n            router.addLiquidityETH{value: amountBNBLiquidity}(\\n                address(this),\\n                amountToLiquify,\\n                0,\\n                0,\\n                autoLiquidityReceiver,\\n                block.timestamp\\n            );\\n            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);\\n        }\\n    }\\n\\n    function setIsDividendExempt(address holder, bool exempt) external authorized {\\n        require(holder != address(this) && holder != pair);\\n        isDividendExempt[holder] = exempt;\\n        if(exempt){\\n            distributor.setShare(holder, 0);\\n        }else{\\n            distributor.setShare(holder, _balances[holder]);\\n        }\\n    }\\n\\n    function enable_blacklist(bool _status) public onlyOwner {\\n        blacklistMode = _status;\\n    }\\n\\n    function manage_blacklist(address[] calldata addresses, bool status) public onlyOwner {\\n        for (uint256 i; i < addresses.length; ++i) {\\n            isBlacklisted[addresses[i]] = status;\\n        }\\n    }\\n\\n    function setIsFeeExempt(address holder, bool exempt) external authorized {\\n        isFeeExempt[holder] = exempt;\\n    }\\n\\n    function setIsTxLimitExempt(address holder, bool exempt) external authorized {\\n        isTxLimitExempt[holder] = exempt;\\n    }\\n\\n    function setIsTimelockExempt(address holder, bool exempt) external authorized {\\n        isTimelockExempt[holder] = exempt;\\n    }\\n\\n    function setFees(uint256 _liquidityFee, uint256 _reflectionFee, uint256 _marketingFee, uint256 _feeDenominator) external authorized {\\n        liquidityFee = _liquidityFee;\\n        reflectionFee = _reflectionFee;\\n        marketingFee = _marketingFee;\\n        devFee = 0;\\n        totalFee = _liquidityFee.add(_reflectionFee).add(_marketingFee).add(devFee);\\n        feeDenominator = _feeDenominator;\\n    }\\n\\n    function setFeeReceivers(address _autoLiquidityReceiver, address _marketingFeeReceiver ) external authorized {\\n        autoLiquidityReceiver = _autoLiquidityReceiver;\\n        marketingFeeReceiver = _marketingFeeReceiver;\\n        devFeeReceiver = address(DEV);\\n    }\\n\\n    function setSwapBackSettings(bool _enabled, uint256 _amount) external authorized {\\n        swapEnabled = _enabled;\\n        swapThreshold = _amount;\\n    }\\n\\n    function setTargetLiquidity(uint256 _target, uint256 _denominator) external authorized {\\n        targetLiquidity = _target;\\n        targetLiquidityDenominator = _denominator;\\n    }\\n\\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external authorized {\\n        distributor.setDistributionCriteria(_minPeriod, _minDistribution);\\n    }\\n\\n    function setDistributorSettings(uint256 gas) external authorized {\\n        require(gas < 75000);\\n        distributorGas = gas;\\n    }\\n    \\n    function getCirculatingSupply() public view returns (uint256) {\\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\\n    }\\n\\n    function getLiquidityBacking(uint256 accuracy) public view returns (uint256) {\\n        return accuracy.mul(balanceOf(pair).mul(2)).div(getCirculatingSupply());\\n    }\\n\\n    function isOverLiquified(uint256 target, uint256 accuracy) public view returns (bool) {\\n        return getLiquidityBacking(accuracy) > target;\\n    }\\n\\n    event AutoLiquify(uint256 amountBNB, uint256 amountBOG);\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"claimDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendsPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendsPerShareAccuracyFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"getUnpaidEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"process\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalExcluded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRealised\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DividendDistributor", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}