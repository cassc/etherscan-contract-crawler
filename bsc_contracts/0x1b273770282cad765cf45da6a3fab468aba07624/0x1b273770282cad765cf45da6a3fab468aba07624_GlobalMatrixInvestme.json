{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/global matrix.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\\r\\ninterface matrix {\\r\\n    function users(\\r\\n        address _user\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            bool isRegistered,\\r\\n            address referrer,\\r\\n            uint256 numPartners,\\r\\n            uint256 directs,\\r\\n            uint256 rank,\\r\\n            uint256 totalDirectBonusDistributed,\\r\\n            uint256 totalTeamBonusDistributed\\r\\n        );\\r\\n}\\r\\n\\r\\ncontract GlobalMatrixInvestmentPlan {\\r\\n    IERC20 public token = IERC20(0x55d398326f99059fF775485246999027B3197955);\\r\\n    address public admin;\\r\\n    matrix public tct;\\r\\n    uint256 public totalDeposits;\\r\\n    uint256 public totalRewards;\\r\\n    uint256 public members;\\r\\n    uint256 public maxdeposit = 100;\\r\\n    uint256 public foundercooldown = 48 days;\\r\\n    uint256 public membercooldown = 72 days;\\r\\n    uint256 public subcriptionFee = 50 ether;\\r\\n    uint256 public depositGasFee = 0.001 ether;\\r\\n    uint256 public wthdrawGasFee = 0.002 ether;\\r\\n    bool public membershipEnabled = true;\\r\\n    bool public witdrawTimerenabled = true;\\r\\n\\r\\n    struct Deposit {\\r\\n        uint256 amount;\\r\\n        uint256 reward;\\r\\n        uint256 available;\\r\\n        bool withdrawn;\\r\\n    }\\r\\n\\r\\n    struct User {\\r\\n        mapping(uint256 => Deposit) planDeposits;\\r\\n        mapping(uint256 => uint256) planRewards;\\r\\n        mapping(uint256 => uint256) plantotalDeposits;\\r\\n        uint256 totalDeposits;\\r\\n        uint256 totalDepositsAmount;\\r\\n        uint256 totalRewards;\\r\\n        bool registerd;\\r\\n        uint256 lastwithdrawn;\\r\\n        bool blacklisted;\\r\\n        uint256 maxdeposit;\\r\\n    }\\r\\n\\r\\n    struct QueueUser {\\r\\n        address userAddress;\\r\\n        uint256 rewardAmount;\\r\\n        uint256 available;\\r\\n        uint256 depositnumber;\\r\\n    }\\r\\n\\r\\n    struct subscription {\\r\\n        bool iswhitelisted;\\r\\n        uint256 time;\\r\\n    }\\r\\n\\r\\n    mapping(address => User) public users;\\r\\n    mapping(uint256 => mapping(uint256 => QueueUser)) public Queue;\\r\\n    mapping(uint256 => uint256) public QueueCounters;\\r\\n    mapping(uint256 => uint256) public LastProcessed;\\r\\n    mapping(address => bool) public founder;\\r\\n    mapping(address => subscription) public subscriptions;\\r\\n\\r\\n    uint256[3] planDepositAmount = [50 ether, 100 ether, 500 ether];\\r\\n    uint256[3] planRewardAmount = [60 ether, 120 ether, 600 ether];\\r\\n    uint256[3] planLevelAmount = [5 ether, 10 ether, 50 ether];\\r\\n    uint256[3] planMaxlevel = [10, 10, 10];\\r\\n\\r\\n    constructor() {\\r\\n        admin = 0xF4600E2F87F2eD80ec0f2d2C5A6AD28AC31AfE6F;\\r\\n        tct = matrix(0x671AF6aAC0Ed3BAffA46d1DA0E7FeBa0f8672E85);\\r\\n    }\\r\\n\\r\\n    function _deposit(uint256 _plan) public payable {\\r\\n        (bool registerd, , , , , , ) = tct.users(msg.sender);\\r\\n        require(registerd, \\\"you must register in TCT plus\\\");\\r\\n        require(msg.value == depositGasFee, \\\"GAS FEE needs to be paid\\\");\\r\\n        require(_plan < planDepositAmount.length, \\\"Select the right plan\\\");\\r\\n        User storage user = users[msg.sender];\\r\\n        if (user.maxdeposit == 0) {\\r\\n            require(\\r\\n                user.plantotalDeposits[_plan] <= maxdeposit,\\r\\n                \\\"max deposit reached\\\"\\r\\n            );\\r\\n        } else {\\r\\n            require(\\r\\n                user.plantotalDeposits[_plan] <= user.maxdeposit,\\r\\n                \\\"max deposit reached\\\"\\r\\n            );\\r\\n        }\\r\\n        require(!user.blacklisted, \\\"you are blacklisted\\\");\\r\\n        require(\\r\\n            user.planDeposits[_plan].amount == 0,\\r\\n            \\\"can not deposit again withdraw first\\\"\\r\\n        );\\r\\n\\r\\n        if (!user.registerd) {\\r\\n            members++;\\r\\n            user.registerd = true;\\r\\n            user.lastwithdrawn = block.timestamp;\\r\\n            subscriptions[msg.sender].time = block.timestamp + 30 days;\\r\\n        }\\r\\n\\r\\n        token.transferFrom(msg.sender, address(this), planDepositAmount[_plan]);\\r\\n        payable(admin).transfer(msg.value);\\r\\n        processQueue(_plan);\\r\\n\\r\\n        user.planDeposits[_plan] = (\\r\\n            Deposit(planDepositAmount[_plan], planRewardAmount[_plan], 0, false)\\r\\n        );\\r\\n        Queue[_plan][QueueCounters[_plan]] = QueueUser(\\r\\n            msg.sender,\\r\\n            planRewardAmount[_plan],\\r\\n            0,\\r\\n            user.plantotalDeposits[_plan]\\r\\n        );\\r\\n\\r\\n        QueueCounters[_plan]++;\\r\\n        user.plantotalDeposits[_plan]++;\\r\\n        user.totalDeposits++;\\r\\n        user.totalDepositsAmount += planDepositAmount[_plan];\\r\\n        totalDeposits += planDepositAmount[_plan];\\r\\n    }\\r\\n\\r\\n    function processQueue(uint256 _plan) internal {\\r\\n        uint256 count = 0;\\r\\n        for (\\r\\n            uint256 i = LastProcessed[_plan];\\r\\n            i <= QueueCounters[_plan] && count <= planMaxlevel[_plan];\\r\\n            i++\\r\\n        ) {\\r\\n            if (\\r\\n                Queue[_plan][i].userAddress != address(0) &&\\r\\n                Queue[_plan][i].available < Queue[_plan][i].rewardAmount\\r\\n            ) {\\r\\n                Queue[_plan][i].available += planLevelAmount[_plan];\\r\\n                users[Queue[_plan][i].userAddress]\\r\\n                    .planDeposits[_plan]\\r\\n                    .available += planLevelAmount[_plan];\\r\\n                count++;\\r\\n            } else if (\\r\\n                Queue[_plan][i].userAddress != address(0) &&\\r\\n                Queue[_plan][i].available == Queue[_plan][i].rewardAmount\\r\\n            ) {\\r\\n                LastProcessed[_plan] = i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 _plan) public payable {\\r\\n        require(msg.value == wthdrawGasFee, \\\"GAS FEE needs to be paid\\\");\\r\\n        if (membershipEnabled) {\\r\\n            require(\\r\\n                subscriptions[msg.sender].iswhitelisted ||\\r\\n                    block.timestamp < subscriptions[msg.sender].time,\\r\\n                \\\"your subscription in TCT is over\\\"\\r\\n            );\\r\\n        }\\r\\n        User storage user = users[msg.sender];\\r\\n        require(!user.blacklisted, \\\"blacklisted\\\");\\r\\n        require(\\r\\n            user.planDeposits[_plan].available >=\\r\\n                user.planDeposits[_plan].reward,\\r\\n            \\\"can not withdraw yet amount not reached\\\"\\r\\n        );\\r\\n        if (witdrawTimerenabled) {\\r\\n            if (founder[msg.sender]) {\\r\\n                require(\\r\\n                    block.timestamp > user.lastwithdrawn + foundercooldown,\\r\\n                    \\\"founer can only withdraw once in timeline\\\"\\r\\n                );\\r\\n            } else {\\r\\n                require(\\r\\n                    block.timestamp > user.lastwithdrawn + membercooldown,\\r\\n                    \\\"user can only withdraw once in timeline\\\"\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        require(\\r\\n            user.planDeposits[_plan].amount != 0,\\r\\n            \\\"can not withdraw  deposit first\\\"\\r\\n        );\\r\\n        uint256 amount;\\r\\n        if (\\r\\n            !user.planDeposits[_plan].withdrawn &&\\r\\n            user.planDeposits[_plan].available >=\\r\\n            user.planDeposits[_plan].reward\\r\\n        ) {\\r\\n            amount = user.planDeposits[_plan].reward;\\r\\n            totalRewards += user.planDeposits[_plan].reward;\\r\\n            delete users[msg.sender].planDeposits[_plan];\\r\\n        }\\r\\n\\r\\n        token.transfer(msg.sender, amount);\\r\\n        payable(admin).transfer(msg.value);\\r\\n        user.lastwithdrawn = block.timestamp;\\r\\n        user.planRewards[_plan] += amount;\\r\\n    }\\r\\n\\r\\n    function withdrawable(\\r\\n        address _user,\\r\\n        uint256 _plan\\r\\n    ) public view returns (uint256 amount) {\\r\\n        User storage user = users[_user];\\r\\n        if (\\r\\n            !user.planDeposits[_plan].withdrawn &&\\r\\n            user.planDeposits[_plan].available >=\\r\\n            user.planDeposits[_plan].reward\\r\\n        ) {\\r\\n            amount = user.planDeposits[_plan].available;\\r\\n        }\\r\\n\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    function earned(\\r\\n        address _user,\\r\\n        uint256 _plan\\r\\n    ) public view returns (uint256 amount) {\\r\\n        User storage user = users[_user];\\r\\n        if (\\r\\n            !user.planDeposits[_plan].withdrawn &&\\r\\n            user.planDeposits[_plan].available <=\\r\\n            user.planDeposits[_plan].reward\\r\\n        ) {\\r\\n            amount = user.planDeposits[_plan].available;\\r\\n        }\\r\\n\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    function subscribe(uint256 months) external {\\r\\n        require(months > 0);\\r\\n        require(membershipEnabled, \\\"membership is not enabled\\\");\\r\\n        (bool registerd, , , , , , ) = tct.users(msg.sender);\\r\\n        require(registerd, \\\"you must register in TCT plus\\\");\\r\\n        require(block.timestamp > subscriptions[msg.sender].time);\\r\\n        token.transferFrom(msg.sender, admin, months * subcriptionFee);\\r\\n        subscriptions[msg.sender].time = block.timestamp + (months * 30 days);\\r\\n    }\\r\\n\\r\\n    function whitelistSubcription(address _user, bool value) external {\\r\\n        require(msg.sender == admin);\\r\\n        subscriptions[_user].iswhitelisted = value;\\r\\n    }\\r\\n\\r\\n    // to set membership\\r\\n    function Setmembership(bool _membership) external {\\r\\n        require(msg.sender == admin);\\r\\n        require(\\r\\n            _membership != membershipEnabled,\\r\\n            \\\" membership already in same state\\\"\\r\\n        );\\r\\n        membershipEnabled = _membership;\\r\\n    }\\r\\n\\r\\n    function SetwitdrawTimerenabled(bool _witdrawTimerenabled) external {\\r\\n        require(msg.sender == admin);\\r\\n        require(\\r\\n            _witdrawTimerenabled != witdrawTimerenabled,\\r\\n            \\\" witdraw Timer already in same state\\\"\\r\\n        );\\r\\n        witdrawTimerenabled = _witdrawTimerenabled;\\r\\n    }\\r\\n\\r\\n    function changewithdrawGasFee(uint256 _withdrawGasFee) external {\\r\\n        // Ensure that the new joining fee is greater than 0\\r\\n        require(msg.sender == admin);\\r\\n        wthdrawGasFee = _withdrawGasFee;\\r\\n    }\\r\\n\\r\\n    function changedepositGasFee(uint256 _depositGasFee) external {\\r\\n        // Ensure that the new joining fee is greater than 0\\r\\n        require(msg.sender == admin);\\r\\n        depositGasFee = _depositGasFee;\\r\\n    }\\r\\n\\r\\n    function changesubcriptionFee(uint256 _subcriptionFee) external {\\r\\n        // Ensure that the new joining fee is greater than 0\\r\\n        require(msg.sender == admin);\\r\\n        require(_subcriptionFee > 0, \\\"Joining fee must be greater than 0\\\");\\r\\n        subcriptionFee = _subcriptionFee;\\r\\n    }\\r\\n\\r\\n    function changemaxdeposit(uint256 _maxdeposit) external {\\r\\n        // Ensure that the new joining fee is greater than 0\\r\\n        require(msg.sender == admin);\\r\\n        require(_maxdeposit > 0, \\\"Joining fee must be greater than 0\\\");\\r\\n        maxdeposit = _maxdeposit;\\r\\n    }\\r\\n\\r\\n    function changeadmin(address _admin) external {\\r\\n        // Ensure that the new joining fee is greater than 0\\r\\n        require(msg.sender == admin);\\r\\n        admin = _admin;\\r\\n    }\\r\\n\\r\\n    function changeCooldowntimer(\\r\\n        uint256 _foudercooldown,\\r\\n        uint256 _membercooldown\\r\\n    ) external {\\r\\n        // Ensure that the new joining fee is greater than 0\\r\\n        require(msg.sender == admin);\\r\\n        foundercooldown = _foudercooldown;\\r\\n        membercooldown = _membercooldown;\\r\\n    }\\r\\n\\r\\n    function Blacklist(address[] memory _users, bool choice) external {\\r\\n        // Ensure that the new joining fee is greater than 0\\r\\n        require(msg.sender == admin);\\r\\n        for (uint256 i = 0; i < _users.length; i++) {\\r\\n            users[_users[i]].blacklisted = choice;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function maxdepositperuser(\\r\\n        address[] memory _users,\\r\\n        uint256 amount\\r\\n    ) external {\\r\\n        // Ensure that the new joining fee is greater than 0\\r\\n        require(msg.sender == admin);\\r\\n        for (uint256 i = 0; i < _users.length; i++) {\\r\\n            users[_users[i]].maxdeposit = amount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setFounder(address[] memory _users, bool choice) external {\\r\\n        require(msg.sender == admin);\\r\\n        for (uint256 i = 0; i < _users.length; i++) {\\r\\n            founder[_users[i]] = choice;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // to withdraw token\\r\\n    function withdrawToken(address _token, uint256 _amount) external {\\r\\n        require(msg.sender == admin);\\r\\n        // Check if the token address is not a null address\\r\\n        require(\\r\\n            _token != address(0),\\r\\n            \\\"The token address cannot be a null address (0x0)\\\"\\r\\n        );\\r\\n        // Check if the amount to withdraw is positive\\r\\n        require(\\r\\n            _amount > 0,\\r\\n            \\\"The amount to withdraw must be greater than zero\\\"\\r\\n        );\\r\\n        // Check if the contract has sufficient balance of the token\\r\\n        require(\\r\\n            IERC20(_token).balanceOf(address(this)) >= _amount,\\r\\n            \\\"The contract has insufficient balance of the token\\\"\\r\\n        );\\r\\n        // Transfer the tokens to the admin\\r\\n        IERC20(_token).transfer(admin, _amount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"choice\",\"type\":\"bool\"}],\"name\":\"Blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LastProcessed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Queue\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositnumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"QueueCounters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_membership\",\"type\":\"bool\"}],\"name\":\"Setmembership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_witdrawTimerenabled\",\"type\":\"bool\"}],\"name\":\"SetwitdrawTimerenabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_plan\",\"type\":\"uint256\"}],\"name\":\"_deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_foudercooldown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_membercooldown\",\"type\":\"uint256\"}],\"name\":\"changeCooldowntimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"changeadmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositGasFee\",\"type\":\"uint256\"}],\"name\":\"changedepositGasFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxdeposit\",\"type\":\"uint256\"}],\"name\":\"changemaxdeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subcriptionFee\",\"type\":\"uint256\"}],\"name\":\"changesubcriptionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawGasFee\",\"type\":\"uint256\"}],\"name\":\"changewithdrawGasFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositGasFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_plan\",\"type\":\"uint256\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"founder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundercooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxdeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"maxdepositperuser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"membercooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"members\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"membershipEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"choice\",\"type\":\"bool\"}],\"name\":\"setFounder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subcriptionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"months\",\"type\":\"uint256\"}],\"name\":\"subscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"subscriptions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"iswhitelisted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tct\",\"outputs\":[{\"internalType\":\"contract matrix\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDepositsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"registerd\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lastwithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"blacklisted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxdeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"whitelistSubcription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"witdrawTimerenabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_plan\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_plan\",\"type\":\"uint256\"}],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wthdrawGasFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GlobalMatrixInvestmentPlan", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}