{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.4;\r\n\r\ninterface HeroProxyFactory {\r\n    function getRelations(address user) external returns (address[] memory);\r\n}\r\n\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        return a / b;\r\n    }\r\n\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface InterfaceLP {\r\n    function sync() external;\r\n}\r\n\r\nabstract contract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor(\r\n        string memory _tokenName,\r\n        string memory _tokenSymbol,\r\n        uint8 _tokenDecimals\r\n    ) {\r\n        _name = _tokenName;\r\n        _symbol = _tokenSymbol;\r\n        _decimals = _tokenDecimals;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Not owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(_owner);\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface DividendTracker {\r\n    function setReward(uint256 amount) external;\r\n}\r\n\r\n//\r\ncontract LgtToken is ERC20Detailed, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n\r\n    address public constant usdtToken =\r\n        0x55d398326f99059fF775485246999027B3197955;\r\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address constant ZERO = 0x0000000000000000000000000000000000000000;\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public pair;\r\n\r\n    bool public autoRebase = false;\r\n\r\n    address public heroTokenProxy;\r\n    uint256 constant baseFee = 1000;\r\n    uint256 constant baseTime = 1657382400;\r\n\r\n    mapping(uint256 => address) public lastHourBuyMaxAccounts;\r\n    mapping(uint256 => mapping(address => uint256)) public accountBuyOfHour;\r\n    mapping(uint256 => uint256) public maxAmountBuyOfHour;\r\n    mapping(uint256 => uint256) public hourTotalFee;\r\n\r\n    uint256 public rewardYield = 1645833;\r\n    uint256 public rewardYieldDenominator = 10000000000;\r\n\r\n    address[10] public marketWalletAddress;\r\n    uint256[10] public buyMarketRates;\r\n\r\n    uint256 public liquidityFee = 40;\r\n    uint256 public rewardLastHourRate = 10;\r\n    uint256 public deadFundRate = 25;\r\n    uint256 public feeFundRate = 50;\r\n    uint256 public superRewardRate = 50;\r\n    uint256 public genesistRewardRate = 25;\r\n    address public feeFundWalletAddress;\r\n\r\n    uint256 public lastDayTokenPrice;\r\n    mapping(uint256 => uint256[]) public tokenPriceArray;\r\n    uint256 public updatePriceInterval = 1800;\r\n    uint256 public lastUpdateTime;\r\n    mapping(uint256 => uint256) public historyTokenPrice;\r\n\r\n    uint256[4] public priceDownPercentages;\r\n    uint256[4] public priceDownRates;\r\n\r\n    uint256[] public circulationSubSupply;\r\n    uint256[] public circulationSubRates;\r\n\r\n    uint256 public gasGenesisForProcessing;\r\n    uint256 public gasSuperForProcessing;\r\n\r\n    address public genesisDividendTracker;\r\n    address public superDividendTracker;\r\n\r\n    bool public enablePriceSwitch;\r\n\r\n    uint256 public accumulativeGenesisDividend;\r\n    uint256 public accumulativeSuperDividend;\r\n    uint256 public accumulativeDaoDividend;\r\n\r\n    uint256 public rebaseFrequency = 300;\r\n    uint256 public lastRebaseTime;\r\n\r\n    uint256 public rewardMinAmount;\r\n\r\n    mapping(address => bool) _isFeeExempt;\r\n    address[] public _markerPairs;\r\n    mapping(address => bool) public automatedMarketMakerPairs;\r\n\r\n    uint256 private constant DECIMALS = 18;\r\n    uint256 private constant MAX_UINT256 = ~uint256(0);\r\n\r\n    uint256 public TOTAL_GONS;\r\n    uint256 public constant MAX_SUPPLY = ~uint128(0);\r\n\r\n    uint256 public feeDenominator = 1000;\r\n\r\n    bool inSwap;\r\n    uint256 public pairBalance;\r\n    uint256 public lastRebasedTime;\r\n\r\n    uint256 public startTradingTime;\r\n    uint256 private _totalSupply;\r\n    uint256 private _gonsPerFragment;\r\n    mapping(address => bool) public excludedTrackers;\r\n\r\n    mapping(address => uint256) private _gonBalances;\r\n    mapping(address => mapping(address => uint256)) private _allowedFragments;\r\n\r\n    address public liquidityAddress;\r\n    bool public swapEnabled = true;\r\n    uint256 private swapAmountMin = 1e18;\r\n\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    modifier validRecipient(address to) {\r\n        require(to != address(0x0));\r\n        _;\r\n    }\r\n\r\n    constructor(uint256 _initSupply, address _initAddress)\r\n        ERC20Detailed(\"Legend Front\", \"LGT\", uint8(DECIMALS))\r\n    {\r\n        uniswapV2Router = IUniswapV2Router02(\r\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        );\r\n        pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            usdtToken\r\n        );\r\n\r\n        setAutomatedMarketMakerPair(pair, true);\r\n\r\n        _totalSupply = _initSupply * 10**DECIMALS;\r\n\r\n        TOTAL_GONS = MAX_UINT256 - (MAX_UINT256 % _totalSupply);\r\n        _gonBalances[_initAddress] = TOTAL_GONS;\r\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n\r\n        autoRebase = true;\r\n        _isFeeExempt[address(this)] = true;\r\n        _isFeeExempt[_initAddress] = true;\r\n        _isFeeExempt[msg.sender] = true;\r\n\r\n        marketWalletAddress = [\r\n            0xfB4e8D7b8B63c5ADcff5a4382aeE50641427992e,\r\n            0xCa6a7808A8A5dC7caB4Bd0EF2E22b286238a0eAE,\r\n            0x2C2b3479572e9be4E406F1C791C5fCcea93d8b30,\r\n            0xc23dbae74Ef5F636c201D73001acC2024445f554,\r\n            0x003b1Cb563c95e3857e3C7Da302AA41096Fa7737,\r\n            0x9da37F2CB153cE14fce31d80d6db229D82121AD6,\r\n            0x98Ac494cbBb3Dbd41E3b8E5174cDaBF309bfEBAF,\r\n            0x8bEa991a4542e9c3009Cd8A7B1D57d302B9DF57B,\r\n            0xa65C849a12547e07FDDdD95232076F0C37Ad5c0F,\r\n            0xF378276B2644AEa4e7d16F9CFD3e03611A1e3bc5\r\n        ];\r\n        buyMarketRates = [40, 20, 5, 5, 5, 5, 5, 5, 5, 5];\r\n\r\n        priceDownPercentages = [50, 30, 20, 10];\r\n        priceDownRates = [200, 100, 50, 20];\r\n\r\n        circulationSubSupply = [\r\n            4000000000000000000000000000,\r\n            3000000000000000000000000000,\r\n            2000000000000000000000000000\r\n        ];\r\n\r\n        circulationSubRates = [30, 20, 10];\r\n\r\n        feeFundWalletAddress = 0x2749ffe8b80b9F47D92EA9A2D70CEac59aceA3B9;\r\n        heroTokenProxy = 0xC054290C313ed47ae42Df68220350c7529076604;\r\n\r\n        automatedMarketMakerPairs[pair] = true;\r\n\r\n        enablePriceSwitch = true;\r\n\r\n        rewardMinAmount = 3000 * 1e18;\r\n        lastRebaseTime = block.timestamp;\r\n\r\n        liquidityAddress = 0xA7FC2b571Cd0b9b62B715685f0a74736B837d1E7;\r\n        _isFeeExempt[liquidityAddress] = true;\r\n        emit Transfer(address(0x0), _initAddress, _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function allowance(address owner_, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowedFragments[owner_][spender];\r\n    }\r\n\r\n    function balanceOf(address who) public view override returns (uint256) {\r\n        if (who == pair) {\r\n            return pairBalance;\r\n        } else {\r\n            return _gonBalances[who].div(_gonsPerFragment);\r\n        }\r\n    }\r\n\r\n    function checkFeeExempt(address _addr) external view returns (bool) {\r\n        return _isFeeExempt[_addr];\r\n    }\r\n\r\n    function shouldRebase() internal view returns (bool) {\r\n        return\r\n            autoRebase &&\r\n            (_totalSupply < MAX_SUPPLY) &&\r\n            msg.sender != pair &&\r\n            !inSwap &&\r\n            block.timestamp >= (lastRebaseTime.add(rebaseFrequency));\r\n    }\r\n\r\n    function shouldTakeFee(address from, address to)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return !_isFeeExempt[from] && !_isFeeExempt[to];\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return\r\n            (TOTAL_GONS.sub(_gonBalances[DEAD]).sub(_gonBalances[ZERO])).div(\r\n                _gonsPerFragment\r\n            );\r\n    }\r\n\r\n    function transfer(address to, uint256 value)\r\n        external\r\n        override\r\n        validRecipient(to)\r\n        returns (bool)\r\n    {\r\n        _transferFrom(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        uint256 gonAmount = amount.mul(_gonsPerFragment);\r\n        _gonBalances[from] = _gonBalances[from].sub(gonAmount);\r\n        _gonBalances[to] = _gonBalances[to].add(gonAmount);\r\n        emit Transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        bool excludedAccount = _isFeeExempt[sender] || _isFeeExempt[recipient];\r\n        require(\r\n            block.timestamp > startTradingTime || excludedAccount,\r\n            \"Trading not started\"\r\n        );\r\n        if (canSwapLiquidity(sender)) {\r\n            uint256 swapAmount = _gonBalances[address(this)].div(\r\n                _gonsPerFragment\r\n            );\r\n            swapAndLiquify(swapAmount);\r\n        }\r\n\r\n        if (shouldRebase()) {\r\n            _rebase();\r\n        }\r\n        uint256 gonAmount = amount.mul(_gonsPerFragment);\r\n        if (\r\n            pair == recipient &&\r\n            _isFeeExempt[sender] == false &&\r\n            _isFeeExempt[recipient] == false\r\n        ) {\r\n            if (gonAmount >= _gonBalances[sender].div(1000).mul(999)) {\r\n                gonAmount = _gonBalances[sender].div(1000).mul(999);\r\n            }\r\n        }\r\n        if (sender == pair) {\r\n            pairBalance = pairBalance.sub(amount);\r\n            refreshBuyMaxAddress(sender, amount);\r\n        } else {\r\n            _gonBalances[sender] = _gonBalances[sender].sub(gonAmount);\r\n        }\r\n        uint256 gonAmountReceived = shouldTakeFee(sender, recipient)\r\n            ? takeFee(sender, recipient, gonAmount)\r\n            : gonAmount;\r\n\r\n        if (recipient == pair) {\r\n            pairBalance = pairBalance.add(\r\n                gonAmountReceived.div(_gonsPerFragment)\r\n            );\r\n        } else {\r\n            _gonBalances[recipient] = _gonBalances[recipient].add(\r\n                gonAmountReceived\r\n            );\r\n        }\r\n        emit Transfer(\r\n            sender,\r\n            recipient,\r\n            gonAmountReceived.div(_gonsPerFragment)\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled, uint256 _amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        swapEnabled = _enabled;\r\n        swapAmountMin = _amount;\r\n    }\r\n\r\n    function canSwapLiquidity(address sender) internal view returns (bool) {\r\n        return\r\n            sender != pair &&\r\n            swapEnabled &&\r\n            !inSwap &&\r\n            _gonBalances[address(this)].div(_gonsPerFragment) > swapAmountMin;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external override validRecipient(to) returns (bool) {\r\n        if (_allowedFragments[from][msg.sender] != uint256(-1)) {\r\n            _allowedFragments[from][msg.sender] = _allowedFragments[from][\r\n                msg.sender\r\n            ].sub(value, \"Insufficient Allowance\");\r\n        }\r\n        _transferFrom(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function getCurrentDay() internal view returns (uint256) {\r\n        uint256 intervalDay = block.timestamp.sub(baseTime).div(1 days);\r\n        return baseTime.add(intervalDay * 1 days);\r\n    }\r\n\r\n    function getNextBuyRewardSeconds() public view returns (uint256) {\r\n        uint256 timeHour = getTimeHour().add(1 hours);\r\n        return timeHour.sub(block.timestamp);\r\n    }\r\n\r\n    function getLgtPrice() public view returns (uint256) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdtToken;\r\n        uint256[] memory amounts = uniswapV2Router.getAmountsOut(1e18, path);\r\n        return amounts[1];\r\n    }\r\n\r\n    function pushAndGetTokenPrice()\r\n        private\r\n        returns (uint256 currentDay, uint256 currentPrice)\r\n    {\r\n        if (pairBalance > 0) {\r\n            currentDay = getCurrentDay();\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = usdtToken;\r\n            uint256[] memory amounts = uniswapV2Router.getAmountsOut(\r\n                1e18,\r\n                path\r\n            );\r\n            currentPrice = amounts[1];\r\n            uint256 currentTime = block.timestamp;\r\n            if (currentTime.sub(lastUpdateTime) >= updatePriceInterval) {\r\n                tokenPriceArray[currentDay].push(currentPrice);\r\n                lastUpdateTime = currentTime;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getCurrentHourByMaxCount() public view returns (address) {\r\n        uint256 timeHour = getTimeHour();\r\n        return lastHourBuyMaxAccounts[timeHour];\r\n    }\r\n\r\n    function getLastHourBuyMaxAccount() public view returns (address) {\r\n        uint256 timeHour = getTimeHour().sub(1 hours);\r\n        address account = lastHourBuyMaxAccounts[timeHour];\r\n        return account == address(0) ? owner() : account;\r\n    }\r\n\r\n    function refreshBuyMaxAddress(address account, uint256 amount) internal {\r\n        uint256 timeHour = getTimeHour();\r\n        accountBuyOfHour[timeHour][account] += amount;\r\n        uint256 totalBuyAmount = accountBuyOfHour[timeHour][account];\r\n        uint256 buyMaxTemp = maxAmountBuyOfHour[timeHour];\r\n        if (totalBuyAmount > buyMaxTemp) {\r\n            maxAmountBuyOfHour[timeHour] = totalBuyAmount;\r\n            lastHourBuyMaxAccounts[timeHour] = account;\r\n        }\r\n        emit HourBuyAmount(account, totalBuyAmount, timeHour);\r\n    }\r\n\r\n    function getTimeHour() public view returns (uint256) {\r\n        uint256 intervalSeconds = block.timestamp.sub(baseTime);\r\n        return intervalSeconds.div(1 hours).mul(1 hours).add(baseTime);\r\n    }\r\n\r\n    function getPriceDownRate(uint256 currentDay, uint256 currentPrice)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        if (currentPrice == 0) {\r\n            return 0;\r\n        }\r\n        uint256 yesterDay = currentDay.sub(1 days);\r\n        uint256 yesterDayPrice = historyTokenPrice[yesterDay];\r\n        uint256 priceLength = tokenPriceArray[yesterDay].length;\r\n        if (yesterDayPrice == 0 && priceLength == 0) {\r\n            yesterDayPrice = lastDayTokenPrice;\r\n        }\r\n        if (yesterDayPrice == 0 && priceLength > 0) {\r\n            uint256 sumPrice;\r\n            for (uint256 i = 0; i < priceLength; i++) {\r\n                sumPrice += tokenPriceArray[yesterDay][i];\r\n            }\r\n            yesterDayPrice = sumPrice.div(priceLength);\r\n            lastDayTokenPrice = yesterDayPrice;\r\n            historyTokenPrice[yesterDay] = yesterDayPrice;\r\n        }\r\n        if (currentPrice >= yesterDayPrice) {\r\n            return 0;\r\n        }\r\n        uint256 downRate = yesterDayPrice.sub(currentPrice).mul(100).div(\r\n            yesterDayPrice\r\n        );\r\n        for (uint256 i = 0; i < priceDownPercentages.length; i++) {\r\n            if (priceDownPercentages[i] <= downRate) {\r\n                return priceDownRates[i];\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getCompRewardDownRate() public view returns (uint256) {\r\n        uint256 circulatingSupply = getCirculatingSupply();\r\n        for (uint256 i = 0; i < circulationSubSupply.length; i++) {\r\n            if (circulatingSupply >= circulationSubSupply[i]) {\r\n                return circulationSubRates[i];\r\n            }\r\n        }\r\n        return 100;\r\n    }\r\n\r\n    function takeFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 gonAmount\r\n    ) internal returns (uint256) {\r\n        uint256 totalFee;\r\n        if (sender == pair) {\r\n            uint256 MFee = sendMarketReward(sender, recipient, gonAmount);\r\n            totalFee += MFee;\r\n            uint256 LFee = sendAutoLiquidity(sender, gonAmount);\r\n            totalFee += LFee;\r\n            uint256 LHAFee = sendLastHourBuyMaxReward(sender, gonAmount);\r\n            totalFee += LHAFee;\r\n        } else {\r\n            uint256 DFee = sendDeadFund(sender, gonAmount);\r\n            totalFee += DFee;\r\n            uint256 FFee = sendFeeFund(sender, gonAmount);\r\n            totalFee += FFee;\r\n            uint256 GFee = sendGenesisDividend(sender, gonAmount);\r\n            totalFee += GFee;\r\n            uint256 SFee = sendSuperDividend(sender, gonAmount);\r\n            totalFee += SFee;\r\n        }\r\n        if (enablePriceSwitch) {\r\n            (uint256 currentDay, uint256 currentPrice) = pushAndGetTokenPrice();\r\n            uint256 downRate = getPriceDownRate(currentDay, currentPrice);\r\n            if (recipient == pair) {\r\n                uint256 DERFee = priceDownExtraFee(sender, gonAmount, downRate);\r\n                totalFee += DERFee;\r\n            }\r\n        }\r\n        return gonAmount.sub(totalFee);\r\n    }\r\n\r\n    function sendGenesisDividend(address sender, uint256 gonAmount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        uint256 feeAmount = gonAmount.mul(genesistRewardRate).div(baseFee);\r\n        if (feeAmount > 0) {\r\n            _gonBalances[genesisDividendTracker] = _gonBalances[\r\n                genesisDividendTracker\r\n            ].add(feeAmount);\r\n            uint256 _realAmount = feeAmount.div(_gonsPerFragment);\r\n            emit Transfer(sender, address(genesisDividendTracker), _realAmount);\r\n            accumulativeGenesisDividend += _realAmount;\r\n            try\r\n                DividendTracker(genesisDividendTracker).setReward(_realAmount)\r\n            {} catch {}\r\n        }\r\n        return feeAmount;\r\n    }\r\n\r\n    function sendSuperDividend(address sender, uint256 gonAmount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        uint256 feeAmount = gonAmount.mul(superRewardRate).div(baseFee);\r\n        if (feeAmount > 0) {\r\n            _gonBalances[superDividendTracker] = _gonBalances[\r\n                superDividendTracker\r\n            ].add(feeAmount);\r\n            uint256 _realAmount = feeAmount.div(_gonsPerFragment);\r\n            emit Transfer(sender, superDividendTracker, _realAmount);\r\n            accumulativeSuperDividend += _realAmount;\r\n            try\r\n                DividendTracker(superDividendTracker).setReward(_realAmount)\r\n            {} catch {}\r\n        }\r\n        return feeAmount;\r\n    }\r\n\r\n    function setSuperDividendTracker(address tracker) public onlyOwner {\r\n        superDividendTracker = tracker;\r\n    }\r\n\r\n    function setGenesisDividendTracker(address tracker) public onlyOwner {\r\n        genesisDividendTracker = tracker;\r\n    }\r\n\r\n    function setCirculationSubConfig(\r\n        uint256[] memory supplys,\r\n        uint256[] memory rates\r\n    ) public onlyOwner {\r\n        for (uint256 i = 0; i < supplys.length; i++) {\r\n            circulationSubSupply[i] = supplys[i];\r\n            circulationSubRates[i] = rates[i];\r\n        }\r\n    }\r\n\r\n    function setPriceDownConfig(\r\n        uint256[4] memory percentages,\r\n        uint256[4] memory rates\r\n    ) public onlyOwner {\r\n        for (uint256 i = 0; i < percentages.length; i++) {\r\n            priceDownPercentages[i] = percentages[i];\r\n            priceDownRates[i] = rates[i];\r\n        }\r\n    }\r\n\r\n    function setHeroTokenProxy(address newValue) public onlyOwner {\r\n        heroTokenProxy = newValue;\r\n    }\r\n\r\n    function setFeeFundWalletAddress(address newValue) public onlyOwner {\r\n        feeFundWalletAddress = newValue;\r\n    }\r\n\r\n    function setGenesistRewardRate(uint256 newValue) public onlyOwner {\r\n        genesistRewardRate = newValue;\r\n    }\r\n\r\n    function setSuperRewardRate(uint256 newValue) public onlyOwner {\r\n        superRewardRate = newValue;\r\n    }\r\n\r\n    function setFeeFundRate(uint256 newValue) public onlyOwner {\r\n        feeFundRate = newValue;\r\n    }\r\n\r\n    function setDeadFundRate(uint256 newValue) public onlyOwner {\r\n        deadFundRate = newValue;\r\n    }\r\n\r\n    function setRewardLastHourRate(uint256 newValue) public onlyOwner {\r\n        rewardLastHourRate = newValue;\r\n    }\r\n\r\n    function setLiquidityFee(uint256 newValue) public onlyOwner {\r\n        liquidityFee = newValue;\r\n    }\r\n\r\n    function setMarketWalletAddress(address[10] memory addrs) public onlyOwner {\r\n        for (uint256 index = 0; index < addrs.length; index++) {\r\n            marketWalletAddress[index] = addrs[index];\r\n        }\r\n    }\r\n\r\n    function setBuyMarketRates(uint256[10] memory marketRates)\r\n        public\r\n        onlyOwner\r\n    {\r\n        for (uint256 index = 0; index < marketRates.length; index++) {\r\n            buyMarketRates[index] = marketRates[index];\r\n        }\r\n    }\r\n\r\n    function setLiquidityAddress(address newValue) public onlyOwner {\r\n        liquidityAddress = newValue;\r\n    }\r\n\r\n    function sendMarketReward(\r\n        address sender,\r\n        address to,\r\n        uint256 gonAmount\r\n    ) internal returns (uint256) {\r\n        uint256 totalFee;\r\n        address[] memory relations = HeroProxyFactory(heroTokenProxy)\r\n            .getRelations(to);\r\n        for (uint256 i = 0; i < relations.length; i++) {\r\n            uint256 feeAmount = gonAmount.mul(buyMarketRates[i]).div(baseFee);\r\n            address _leader = relations[i];\r\n            if (\r\n                _leader == address(0) ||\r\n                _leader == address(1) ||\r\n                balanceOf(_leader) < rewardMinAmount\r\n            ) {\r\n                _gonBalances[marketWalletAddress[i]] = _gonBalances[\r\n                    marketWalletAddress[i]\r\n                ].add(feeAmount);\r\n                emit Transfer(\r\n                    sender,\r\n                    marketWalletAddress[i],\r\n                    feeAmount.div(_gonsPerFragment)\r\n                );\r\n            } else {\r\n                _gonBalances[_leader] = _gonBalances[_leader].add(feeAmount);\r\n                emit Transfer(sender, _leader, feeAmount.div(_gonsPerFragment));\r\n                emit MarketReward(\r\n                    _leader,\r\n                    sender,\r\n                    i,\r\n                    feeAmount.div(_gonsPerFragment)\r\n                );\r\n            }\r\n            totalFee += feeAmount;\r\n        }\r\n        return totalFee;\r\n    }\r\n\r\n    function sendAutoLiquidity(address sender, uint256 gonAmount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        uint256 feeAmount = gonAmount.mul(liquidityFee).div(baseFee);\r\n        if (feeAmount > 0) {\r\n            _gonBalances[address(this)] = _gonBalances[address(this)].add(\r\n                feeAmount\r\n            );\r\n            uint256 lpAutoAmount = feeAmount.div(_gonsPerFragment);\r\n            emit Transfer(sender, address(this), lpAutoAmount);\r\n        }\r\n        return feeAmount;\r\n    }\r\n\r\n    function sendLastHourBuyMaxReward(address sender, uint256 gonAmount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        uint256 feeAmount = gonAmount.mul(rewardLastHourRate).div(baseFee);\r\n        if (feeAmount > 0) {\r\n            address account = getLastHourBuyMaxAccount();\r\n            _gonBalances[account] = _gonBalances[account].add(feeAmount);\r\n            uint256 timeHour = getTimeHour();\r\n            uint256 _realAmount = feeAmount.div(_gonsPerFragment);\r\n            hourTotalFee[timeHour] += _realAmount;\r\n            emit Transfer(sender, account, _realAmount);\r\n            emit MaxBuyReward(account, _realAmount);\r\n        }\r\n        return feeAmount;\r\n    }\r\n\r\n    function sendDeadFund(address sender, uint256 gonAmount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        uint256 feeAmount = gonAmount.mul(deadFundRate).div(baseFee);\r\n        if (feeAmount > 0) {\r\n            _gonBalances[DEAD] = _gonBalances[DEAD].add(feeAmount);\r\n            emit Transfer(sender, DEAD, feeAmount.div(_gonsPerFragment));\r\n        }\r\n        return feeAmount;\r\n    }\r\n\r\n    function sendFeeFund(address sender, uint256 gonAmount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        uint256 feeAmount = gonAmount.mul(feeFundRate).div(baseFee);\r\n        if (feeAmount > 0) {\r\n            _gonBalances[address(this)] = _gonBalances[address(this)].add(\r\n                feeAmount\r\n            );\r\n            uint256 swapAmount = feeAmount.div(_gonsPerFragment);\r\n            accumulativeDaoDividend += swapAmount;\r\n            if (swapEnabled) {\r\n                emit Transfer(sender, address(this), swapAmount);\r\n                swapToFeeFund(swapAmount);\r\n            } else {\r\n                _gonBalances[feeFundWalletAddress] = _gonBalances[\r\n                    feeFundWalletAddress\r\n                ].add(feeAmount);\r\n                emit Transfer(sender, feeFundWalletAddress, swapAmount);\r\n            }\r\n        }\r\n        return feeAmount;\r\n    }\r\n\r\n    function swapToFeeFund(uint256 tokenAmount) internal swapping {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdtToken;\r\n        _allowedFragments[address(this)][\r\n            address(uniswapV2Router)\r\n        ] = _totalSupply;\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            feeFundWalletAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        external\r\n        returns (bool)\r\n    {\r\n        uint256 oldValue = _allowedFragments[msg.sender][spender];\r\n        if (subtractedValue >= oldValue) {\r\n            _allowedFragments[msg.sender][spender] = 0;\r\n        } else {\r\n            _allowedFragments[msg.sender][spender] = oldValue.sub(\r\n                subtractedValue\r\n            );\r\n        }\r\n        emit Approval(\r\n            msg.sender,\r\n            spender,\r\n            _allowedFragments[msg.sender][spender]\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        external\r\n        returns (bool)\r\n    {\r\n        _allowedFragments[msg.sender][spender] = _allowedFragments[msg.sender][\r\n            spender\r\n        ].add(addedValue);\r\n        emit Approval(\r\n            msg.sender,\r\n            spender,\r\n            _allowedFragments[msg.sender][spender]\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _allowedFragments[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function _rebase() private {\r\n        if (!inSwap) {\r\n            uint256 deltaTime = block.timestamp.sub(lastRebaseTime);\r\n            uint256 times = deltaTime.div(rebaseFrequency);\r\n            uint256 epoch = times.mul(rebaseFrequency);\r\n            uint256 downRate = getCompRewardDownRate();\r\n            uint256 realRate = rewardYield.mul(downRate).div(100);\r\n            for (uint256 i = 0; i < times; i++) {\r\n                _totalSupply = _totalSupply\r\n                    .mul((rewardYieldDenominator).add(realRate))\r\n                    .div(rewardYieldDenominator);\r\n            }\r\n            _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n            lastRebaseTime = lastRebaseTime.add(times.mul(rebaseFrequency));\r\n            emit LogRebase(epoch, _totalSupply);\r\n        }\r\n    }\r\n\r\n    function setStartTradingTime(uint256 _time) public onlyOwner {\r\n        startTradingTime = _time;\r\n        if (_time > 0) {\r\n            if (lastRebaseTime == 0) {\r\n                lastRebaseTime = _time;\r\n            }\r\n        }\r\n    }\r\n\r\n    function setEnablePriceSwitch(bool value) public onlyOwner {\r\n        enablePriceSwitch = value;\r\n    }\r\n\r\n    function priceDownExtraFee(\r\n        address sender,\r\n        uint256 amount,\r\n        uint256 downRate\r\n    ) internal returns (uint256) {\r\n        if (downRate == 0) {\r\n            return 0;\r\n        }\r\n        uint256 feeAmount = amount.mul(downRate).div(baseFee);\r\n        if (feeAmount > 0) {\r\n            _gonBalances[address(DEAD)] = _gonBalances[address(DEAD)].add(\r\n                feeAmount\r\n            );\r\n            emit Transfer(sender, DEAD, feeAmount.div(_gonsPerFragment));\r\n        }\r\n        return feeAmount;\r\n    }\r\n\r\n    function manualRebase() external onlyOwner {\r\n        require(shouldRebase(), \"rebase not required\");\r\n        _rebase();\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address _pair, bool _value)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            automatedMarketMakerPairs[_pair] != _value,\r\n            \"Value already set\"\r\n        );\r\n        automatedMarketMakerPairs[_pair] = _value;\r\n        emit SetAutomatedMarketMakerPair(_pair, _value);\r\n    }\r\n\r\n    function setFeeExempt(address _addr, bool _value) external onlyOwner {\r\n        require(_isFeeExempt[_addr] != _value, \"Not changed\");\r\n        _isFeeExempt[_addr] = _value;\r\n    }\r\n\r\n    function setMultFeeExempt(address[] memory _addrs, bool _value)\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < _addrs.length; i++) {\r\n            _isFeeExempt[_addrs[i]] = _value;\r\n        }\r\n    }\r\n\r\n    function clearStuckBalance(address _receiver) external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        payable(_receiver).transfer(balance);\r\n    }\r\n\r\n    function rescueToken(address tokenAddress, uint256 tokens)\r\n        external\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        return ERC20Detailed(tokenAddress).transfer(msg.sender, tokens);\r\n    }\r\n\r\n    function setAutoRebase(bool _autoRebase) external onlyOwner {\r\n        require(autoRebase != _autoRebase, \"Not changed\");\r\n        autoRebase = _autoRebase;\r\n        if (_autoRebase) {\r\n            lastRebasedTime = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function setRebaseFrequency(uint256 _rebaseFrequency) external onlyOwner {\r\n        rebaseFrequency = _rebaseFrequency;\r\n    }\r\n\r\n    function setRewardYield(\r\n        uint256 _rewardYield,\r\n        uint256 _rewardYieldDenominator\r\n    ) external onlyOwner {\r\n        rewardYield = _rewardYield;\r\n        rewardYieldDenominator = _rewardYieldDenominator;\r\n    }\r\n\r\n    function setLastRebaseTime(uint256 _lastRebaseTime) external onlyOwner {\r\n        lastRebaseTime = _lastRebaseTime;\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 usdtAmount) internal {\r\n        // approve token transfer to cover all possible scenarios\r\n        //  _allowedFragments[address(this)][address(uniswapV2Router)] = tokenAmount;\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidity(\r\n            address(this),\r\n            usdtToken,\r\n            tokenAmount,\r\n            usdtAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            liquidityAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapTokensForUSDT(uint256 tokenAmount) internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdtToken;\r\n        _allowedFragments[address(this)][\r\n            address(uniswapV2Router)\r\n        ] = _totalSupply;\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            liquidityAddress,\r\n            block.timestamp\r\n        );\r\n        uint256 usdtBalance = IERC20(usdtToken).balanceOf(liquidityAddress);\r\n        IERC20(usdtToken).transferFrom(\r\n            liquidityAddress,\r\n            address(this),\r\n            usdtBalance\r\n        );\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tokenAmount) internal swapping {\r\n        uint256 half = tokenAmount.div(2);\r\n        uint256 otherHalf = tokenAmount.sub(half);\r\n        swapTokensForUSDT(half);\r\n        uint256 usdtBalance = IERC20(usdtToken).balanceOf(address(this));\r\n        IERC20(usdtToken).approve(address(uniswapV2Router), _totalSupply);\r\n        addLiquidity(otherHalf, usdtBalance);\r\n        emit SwapAndLiquify(half, usdtBalance);\r\n    }\r\n\r\n    event SwapAndLiquify(uint256 tokenAmunt, uint256 usdtAmount);\r\n    event HourBuyAmount(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 buyTimeStamp\r\n    );\r\n\r\n    event MarketReward(\r\n        address indexed leader,\r\n        address indexed user,\r\n        uint256 stage,\r\n        uint256 amount\r\n    );\r\n    event MaxBuyReward(address indexed user, uint256 amount);\r\n    event LogRebase(uint256 indexed epoch, uint256 totalSupply);\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_initAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyTimeStamp\",\"type\":\"uint256\"}],\"name\":\"HourBuyAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"leader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MarketReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MaxBuyReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmunt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_GONS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_markerPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountBuyOfHour\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumulativeDaoDividend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumulativeGenesisDividend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumulativeSuperDividend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyMarketRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"circulationSubRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"circulationSubSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadFundRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enablePriceSwitch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedTrackers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeFundRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeFundWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasGenesisForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasSuperForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisDividendTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesistRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCompRewardDownRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentHourByMaxCount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastHourBuyMaxAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLgtPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextBuyRewardSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeHour\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"heroTokenProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"historyTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hourTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDayTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastHourBuyMaxAccounts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebasedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maxAmountBuyOfHour\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"priceDownPercentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"priceDownRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardLastHourRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardMinAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardYieldDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_autoRebase\",\"type\":\"bool\"}],\"name\":\"setAutoRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"marketRates\",\"type\":\"uint256[10]\"}],\"name\":\"setBuyMarketRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"supplys\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rates\",\"type\":\"uint256[]\"}],\"name\":\"setCirculationSubConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setDeadFundRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setEnablePriceSwitch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setFeeFundRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"setFeeFundWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tracker\",\"type\":\"address\"}],\"name\":\"setGenesisDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setGenesistRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"setHeroTokenProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lastRebaseTime\",\"type\":\"uint256\"}],\"name\":\"setLastRebaseTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"setLiquidityAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[10]\",\"name\":\"addrs\",\"type\":\"address[10]\"}],\"name\":\"setMarketWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrs\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setMultFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"percentages\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"rates\",\"type\":\"uint256[4]\"}],\"name\":\"setPriceDownConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rebaseFrequency\",\"type\":\"uint256\"}],\"name\":\"setRebaseFrequency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setRewardLastHourRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardYieldDenominator\",\"type\":\"uint256\"}],\"name\":\"setRewardYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setStartTradingTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tracker\",\"type\":\"address\"}],\"name\":\"setSuperDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setSuperRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superDividendTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenPriceArray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePriceInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LgtToken", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000350c5280000000000000000000000000eccbd883dbd68c4ee9afe7d17eaf2ecb23d07eb8", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e82414b6c3caa7c10eae955a77453ecb4b87224bee31a9232dc717786c0ffdb3"}