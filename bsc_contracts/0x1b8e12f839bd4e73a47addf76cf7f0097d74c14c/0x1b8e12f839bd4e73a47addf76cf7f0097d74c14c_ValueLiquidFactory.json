{"SourceCode": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\r\n\r\npragma solidity 0.5.17;\r\n\r\ninterface IValueLiquidFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint32 tokenWeight0, uint32 swapFee, uint256);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function formula() external view returns (address);\r\n\r\n    function protocolFee() external view returns (uint256);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint32 tokenWeightA,\r\n        uint32 swapFee\r\n    ) external view returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function isPair(address) external view returns (bool);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint32 tokenWeightA,\r\n        uint32 swapFee\r\n    ) external returns (address pair);\r\n\r\n    function getWeightsAndSwapFee(address pair)\r\n        external\r\n        view\r\n        returns (\r\n            uint32 tokenWeight0,\r\n            uint32 tokenWeight1,\r\n            uint32 swapFee\r\n        );\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n\r\n    function setProtocolFee(uint256) external;\r\n}\r\n\r\ninterface IValueLiquidPair {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\r\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function getCollectedFees() external view returns (uint112 _collectedFee0, uint112 _collectedFee1);\r\n\r\n    function getTokenWeights() external view returns (uint32 tokenWeight0, uint32 tokenWeight1);\r\n\r\n    function getSwapFee() external view returns (uint32);\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(\r\n        address,\r\n        address,\r\n        uint32,\r\n        uint32\r\n    ) external;\r\n}\r\n\r\n// SPDX-License-Identifier: SEE LICENSE IN LICENSE\r\n/*\r\n    Bancor Formula interface\r\n*/\r\ninterface IValueLiquidFormula {\r\n    function getReserveAndWeights(address pair, address tokenA)\r\n        external\r\n        view\r\n        returns (\r\n            address tokenB,\r\n            uint256 reserveA,\r\n            uint256 reserveB,\r\n            uint32 tokenWeightA,\r\n            uint32 tokenWeightB,\r\n            uint32 swapFee\r\n        );\r\n\r\n    function getFactoryReserveAndWeights(\r\n        address factory,\r\n        address pair,\r\n        address tokenA\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            address tokenB,\r\n            uint256 reserveA,\r\n            uint256 reserveB,\r\n            uint32 tokenWeightA,\r\n            uint32 tokenWeightB,\r\n            uint32 swapFee\r\n        );\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut,\r\n        uint32 tokenWeightIn,\r\n        uint32 tokenWeightOut,\r\n        uint32 swapFee\r\n    ) external view returns (uint256 amountIn);\r\n\r\n    function getPairAmountIn(\r\n        address pair,\r\n        address tokenIn,\r\n        uint256 amountOut\r\n    ) external view returns (uint256 amountIn);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut,\r\n        uint32 tokenWeightIn,\r\n        uint32 tokenWeightOut,\r\n        uint32 swapFee\r\n    ) external view returns (uint256 amountOut);\r\n\r\n    function getPairAmountOut(\r\n        address pair,\r\n        address tokenIn,\r\n        uint256 amountIn\r\n    ) external view returns (uint256 amountOut);\r\n\r\n    function getAmountsIn(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountOut,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n\r\n    function getFactoryAmountsIn(\r\n        address factory,\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountOut,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsOut(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n\r\n    function getFactoryAmountsOut(\r\n        address factory,\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n\r\n    function ensureConstantValue(\r\n        uint256 reserve0,\r\n        uint256 reserve1,\r\n        uint256 balance0Adjusted,\r\n        uint256 balance1Adjusted,\r\n        uint32 tokenWeight0\r\n    ) external view returns (bool);\r\n\r\n    function getReserves(\r\n        address pair,\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (uint256 reserveA, uint256 reserveB);\r\n\r\n    function getOtherToken(address pair, address tokenA) external view returns (address tokenB);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\r\n\r\n    function mintLiquidityFee(\r\n        uint256 totalLiquidity,\r\n        uint112 reserve0,\r\n        uint112 reserve1,\r\n        uint32 tokenWeight0,\r\n        uint32 tokenWeight1,\r\n        uint112 collectedFee0,\r\n        uint112 collectedFee1\r\n    ) external view returns (uint256 amount);\r\n}\r\n\r\ninterface IValueLiquidERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n}\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\nlibrary SafeMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b > 0, \"ds-math-division-by-zero\");\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract ValueLiquidERC20 is IValueLiquidERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public constant decimals = 18;\r\n    uint256 public totalSupply;\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    bytes32 public DOMAIN_SEPARATOR;\r\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n    mapping(address => uint256) public nonces;\r\n\r\n    constructor() public {}\r\n\r\n    function initialize(string memory _name, string memory _symbol) internal {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        uint256 chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"), keccak256(bytes(_name)), keccak256(bytes(\"1\")), chainId, address(this))\r\n        );\r\n    }\r\n\r\n    function _mint(address to, uint256 value) internal {\r\n        totalSupply = totalSupply.add(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    function _burn(address from, uint256 value) internal {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        emit Transfer(from, address(0), value);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 value\r\n    ) private {\r\n        allowance[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) private {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) external returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) external returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool) {\r\n        if (allowance[from][msg.sender] != uint256(-1)) {\r\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\r\n        }\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external {\r\n        require(deadline >= block.timestamp, \"VLP: EXPIRED\");\r\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))));\r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \"VLP: INVALID_SIGNATURE\");\r\n        _approve(owner, spender, value);\r\n    }\r\n}\r\n\r\n// a library for performing various math operations\r\nlibrary Math {\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\r\n// range: [0, 2**112 - 1]\r\n// resolution: 1 / 2**112\r\nlibrary UQ112x112 {\r\n    uint224 constant Q112 = 2**112;\r\n\r\n    // encode a uint112 as a UQ112x112\r\n    function encode(uint112 y) internal pure returns (uint224 z) {\r\n        z = uint224(y) * Q112; // never overflows\r\n    }\r\n\r\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\r\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\r\n        z = x / uint224(y);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IUniswapV2Callee {\r\n    function uniswapV2Call(\r\n        address sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\ncontract ValueLiquidPair is IValueLiquidPair, ValueLiquidERC20 {\r\n    using SafeMath for uint256;\r\n    using UQ112x112 for uint224;\r\n\r\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\r\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\r\n\r\n    address public factory;\r\n    address public token0;\r\n    address public token1;\r\n\r\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\r\n    uint112 private reserve1; // uses single storage slot, accessible via getReserves\r\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\r\n    uint256 public price0CumulativeLast;\r\n    uint256 public price1CumulativeLast;\r\n    uint256 private unlocked = 1;\r\n    address public formula;\r\n\r\n    uint112 private collectedFee0; // uses single storage slot, accessible via getReserves\r\n    uint112 private collectedFee1; // uses single storage slot, accessible via getReserves\r\n    uint32 private tokenWeight0;\r\n\r\n    uint32 private swapFee;\r\n\r\n    modifier lock() {\r\n        require(unlocked == 1, \"VLP: LOCKED\");\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n\r\n    function getReserves()\r\n        public\r\n        view\r\n        returns (\r\n            uint112 _reserve0,\r\n            uint112 _reserve1,\r\n            uint32 _blockTimestampLast\r\n        )\r\n    {\r\n        _reserve0 = reserve0;\r\n        _reserve1 = reserve1;\r\n        _blockTimestampLast = blockTimestampLast;\r\n    }\r\n\r\n    function getCollectedFees() public view returns (uint112 _collectedFee0, uint112 _collectedFee1) {\r\n        _collectedFee0 = collectedFee0;\r\n        _collectedFee1 = collectedFee1;\r\n    }\r\n\r\n    function getTokenWeights() public view returns (uint32 _tokenWeight0, uint32 _tokenWeight1) {\r\n        _tokenWeight0 = tokenWeight0;\r\n        _tokenWeight1 = 100 - tokenWeight0;\r\n    }\r\n\r\n    function getSwapFee() public view returns (uint32 _swapFee) {\r\n        _swapFee = swapFee;\r\n    }\r\n\r\n    function _safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) private {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"VLP: TRANSFER_FAILED\");\r\n    }\r\n\r\n    constructor() public {\r\n        factory = msg.sender;\r\n    }\r\n\r\n    // called once by the factory at time of deployment\r\n    function initialize(\r\n        address _token0,\r\n        address _token1,\r\n        uint32 _tokenWeight0,\r\n        uint32 _swapFee\r\n    ) external {\r\n        require(msg.sender == factory, \"VLP: FORBIDDEN\");\r\n        string memory _symbol0 = IERC20(_token0).symbol();\r\n        string memory _symbol1 = IERC20(_token1).symbol();\r\n        initialize(string(abi.encodePacked(_symbol0, \"/\", _symbol1, \" Value LP\")), string(abi.encodePacked(_symbol0, _symbol1)));\r\n        // sufficient check\r\n        token0 = _token0;\r\n        token1 = _token1;\r\n        tokenWeight0 = _tokenWeight0;\r\n        swapFee = _swapFee;\r\n        formula = IValueLiquidFactory(factory).formula();\r\n    }\r\n\r\n    // update reserves and, on the first call per block, price accumulators\r\n    function _update(\r\n        uint256 balance0,\r\n        uint256 balance1,\r\n        uint112 _reserve0,\r\n        uint112 _reserve1\r\n    ) private {\r\n        uint32 _tokenWeight0 = tokenWeight0;\r\n        require(balance0 * (100 - _tokenWeight0) <= uint112(-1) && balance1 * _tokenWeight0 <= uint112(-1), \"VLP: OVERFLOW\");\r\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\r\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast;\r\n        // overflow is desired\r\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\r\n            // * never overflows, and + overflow is desired\r\n            uint112 mReserve0 = _reserve0 * (100 - _tokenWeight0);\r\n            uint112 mReserve1 = _reserve1 * _tokenWeight0;\r\n            price0CumulativeLast += uint256(UQ112x112.encode(mReserve1).uqdiv(mReserve0)) * timeElapsed;\r\n            price1CumulativeLast += uint256(UQ112x112.encode(mReserve0).uqdiv(mReserve1)) * timeElapsed;\r\n        }\r\n        reserve0 = uint112(balance0);\r\n        reserve1 = uint112(balance1);\r\n        blockTimestampLast = blockTimestamp;\r\n        emit Sync(reserve0, reserve1);\r\n    }\r\n\r\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\r\n        address feeTo = IValueLiquidFactory(factory).feeTo();\r\n        uint112 protocolFee = uint112(IValueLiquidFactory(factory).protocolFee());\r\n        feeOn = feeTo != address(0);\r\n        (uint112 _collectedFee0, uint112 _collectedFee1) = getCollectedFees();\r\n        if (protocolFee > 0 && feeOn && (_collectedFee0 > 0 || _collectedFee1 > 0)) {\r\n            uint32 _tokenWeight0 = tokenWeight0;\r\n            uint256 liquidity =\r\n                IValueLiquidFormula(formula).mintLiquidityFee(totalSupply, _reserve0, _reserve1, _tokenWeight0, 100 - _tokenWeight0, _collectedFee0 / protocolFee, _collectedFee1 / protocolFee);\r\n            if (liquidity > 0) _mint(feeTo, liquidity);\r\n        }\r\n        if (_collectedFee0 > 0) collectedFee0 = 0;\r\n        if (_collectedFee1 > 0) collectedFee1 = 0;\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function mint(address to) external lock returns (uint256 liquidity) {\r\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\r\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\r\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\r\n        uint256 amount0 = balance0.sub(_reserve0);\r\n        uint256 amount1 = balance1.sub(_reserve1);\r\n        _mintFee(_reserve0, _reserve1);\r\n        uint256 _totalSupply = totalSupply;\r\n        // gas savings, must be defined here since totalSupply can update in _mintFee\r\n        if (_totalSupply == 0) {\r\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\r\n            _mint(address(0), MINIMUM_LIQUIDITY);\r\n            // permanently lock the first MINIMUM_LIQUIDITY tokens\r\n        } else {\r\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\r\n        }\r\n        require(liquidity > 0, \"VLP: INSUFFICIENT_LIQUIDITY_MINTED\");\r\n        _mint(to, liquidity);\r\n\r\n        _update(balance0, balance1, _reserve0, _reserve1);\r\n        emit Mint(msg.sender, amount0, amount1);\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function burn(address to) external lock returns (uint256 amount0, uint256 amount1) {\r\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\r\n        address _token0 = token0; // gas savings\r\n        address _token1 = token1; // gas savings\r\n        uint256 balance0 = IERC20(_token0).balanceOf(address(this));\r\n        uint256 balance1 = IERC20(_token1).balanceOf(address(this));\r\n        uint256 liquidity = balanceOf[address(this)];\r\n        _mintFee(_reserve0, _reserve1);\r\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\r\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\r\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\r\n        require(amount0 > 0 && amount1 > 0, \"VLP: INSUFFICIENT_LIQUIDITY_BURNED\");\r\n        _burn(address(this), liquidity);\r\n        _safeTransfer(_token0, to, amount0);\r\n        _safeTransfer(_token1, to, amount1);\r\n        balance0 = IERC20(_token0).balanceOf(address(this));\r\n        balance1 = IERC20(_token1).balanceOf(address(this));\r\n\r\n        _update(balance0, balance1, _reserve0, _reserve1);\r\n        emit Burn(msg.sender, amount0, amount1, to);\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external lock {\r\n        require(amount0Out > 0 || amount1Out > 0, \"VLP: INSUFFICIENT_OUTPUT_AMOUNT\");\r\n        uint112 _reserve0 = reserve0; // gas savings\r\n        uint112 _reserve1 = reserve1; // gas savings\r\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, \"VLP: INSUFFICIENT_LIQUIDITY\");\r\n\r\n        uint256 balance0;\r\n        uint256 balance1;\r\n        {\r\n            // scope for _token{0,1}, avoids stack too deep errors\r\n            address _token0 = token0;\r\n            address _token1 = token1;\r\n            require(to != _token0 && to != _token1, \"VLP: INVALID_TO\");\r\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\r\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\r\n            if (data.length > 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);\r\n            balance0 = IERC20(_token0).balanceOf(address(this));\r\n            balance1 = IERC20(_token1).balanceOf(address(this));\r\n        }\r\n        uint256 amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\r\n        uint256 amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\r\n        require(amount0In > 0 || amount1In > 0, \"VLP: INSUFFICIENT_INPUT_AMOUNT\");\r\n        {\r\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\r\n            uint256 balance0Adjusted = balance0.mul(1000);\r\n            uint256 balance1Adjusted = balance1.mul(1000);\r\n            {\r\n                // avoids stack too deep errors\r\n                if (amount0In > 0) {\r\n                    uint256 amount0InFee = amount0In.mul(swapFee);\r\n                    balance0Adjusted = balance0Adjusted.sub(amount0InFee);\r\n                    collectedFee0 = uint112(uint256(collectedFee0).add(amount0InFee));\r\n                }\r\n                if (amount1In > 0) {\r\n                    uint256 amount1InFee = amount1In.mul(swapFee);\r\n                    balance1Adjusted = balance1Adjusted.sub(amount1InFee);\r\n                    collectedFee1 = uint112(uint256(collectedFee1).add(amount1InFee));\r\n                }\r\n                uint32 _tokenWeight0 = tokenWeight0; // gas savings\r\n                if (_tokenWeight0 == 50) {\r\n                    // gas savings for pair 50/50\r\n                    require(balance0Adjusted.mul(balance1Adjusted) >= uint256(_reserve0).mul(_reserve1).mul(1000**2), \"VLP: K\");\r\n                } else {\r\n                    require(IValueLiquidFormula(formula).ensureConstantValue(uint256(_reserve0).mul(1000), uint256(_reserve1).mul(1000), balance0Adjusted, balance1Adjusted, _tokenWeight0), \"VLP: K\");\r\n                }\r\n            }\r\n        }\r\n        _update(balance0, balance1, _reserve0, _reserve1);\r\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\r\n    }\r\n\r\n    // force balances to match reserves\r\n    function skim(address to) external lock {\r\n        address _token0 = token0; // gas savings\r\n        address _token1 = token1; // gas savings\r\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\r\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\r\n    }\r\n\r\n    // force reserves to match balances\r\n    function sync() external lock {\r\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\r\n    }\r\n}\r\n\r\ncontract ValueLiquidFactory is IValueLiquidFactory {\r\n    address public feeTo;\r\n    address public formula;\r\n    uint256 public protocolFee;\r\n    address public feeToSetter;\r\n\r\n    mapping(bytes32 => address) private _pairSalts;\r\n    address[] public allPairs;\r\n    mapping(address => uint64) private _pairs;\r\n\r\n    constructor(address _feeToSetter, address _formula) public {\r\n        feeToSetter = _feeToSetter;\r\n        formula = _formula;\r\n    }\r\n\r\n    function isPair(address b) external view returns (bool) {\r\n        return _pairs[b] > 0;\r\n    }\r\n\r\n    function allPairsLength() external view returns (uint256) {\r\n        return allPairs.length;\r\n    }\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint32 tokenWeightA,\r\n        uint32 swapFee\r\n    ) external view returns (address pair) {\r\n        (address token0, address token1, uint32 tokenWeight0) = tokenA < tokenB ? (tokenA, tokenB, tokenWeightA) : (tokenB, tokenA, 100 - tokenWeightA);\r\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1, tokenWeight0, swapFee));\r\n        pair = _pairSalts[salt];\r\n    }\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint32 tokenWeightA,\r\n        uint32 swapFee\r\n    ) external returns (address pair) {\r\n        require(tokenA != tokenB, \"VLP: IDENTICAL_ADDRESSES\");\r\n        require(tokenWeightA >= 2 && tokenWeightA <= 98 && (tokenWeightA % 2) == 0, \"VLP: INVALID_TOKEN_WEIGHT\");\r\n        // Minimum swap fee is 0.03%  & Maximum swap fee is 10%\r\n        require(swapFee >= 3 && swapFee <= 100, \"VLP: INVALID_SWAP_FEE\");\r\n        (address token0, address token1, uint32 tokenWeight0) = tokenA < tokenB ? (tokenA, tokenB, tokenWeightA) : (tokenB, tokenA, 100 - tokenWeightA);\r\n        require(token0 != address(0), \"VLP: ZERO_ADDRESS\");\r\n        // single check is sufficient\r\n        bytes memory bytecode = type(ValueLiquidPair).creationCode;\r\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1, tokenWeight0, swapFee));\r\n        require(_pairSalts[salt] == address(0), \"VLP: PAIR_EXISTS\");\r\n        assembly {\r\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\r\n        }\r\n        IValueLiquidPair(pair).initialize(token0, token1, tokenWeight0, swapFee);\r\n        _pairSalts[salt] = address(pair);\r\n        allPairs.push(pair);\r\n        uint64 weightAndFee = uint64(swapFee);\r\n        weightAndFee |= uint64(tokenWeight0) << 32;\r\n        _pairs[address(pair)] = weightAndFee;\r\n        emit PairCreated(token0, token1, pair, tokenWeight0, swapFee, allPairs.length);\r\n    }\r\n\r\n    function setFeeTo(address _feeTo) external {\r\n        require(msg.sender == feeToSetter, \"VLP: FORBIDDEN\");\r\n        feeTo = _feeTo;\r\n    }\r\n\r\n    function setFeeToSetter(address _feeToSetter) external {\r\n        require(msg.sender == feeToSetter, \"VLP: FORBIDDEN\");\r\n        feeToSetter = _feeToSetter;\r\n    }\r\n\r\n    function setProtocolFee(uint256 _protocolFee) external {\r\n        require(msg.sender == feeToSetter, \"VLP: FORBIDDEN\");\r\n        require(_protocolFee == 0 || (_protocolFee >= 2000 && _protocolFee <= 10000), \"VLP: Invalid Protocol fee\");\r\n        protocolFee = _protocolFee;\r\n    }\r\n\r\n    function getWeightsAndSwapFee(address pair)\r\n        public\r\n        view\r\n        returns (\r\n            uint32 tokenWeight0,\r\n            uint32 tokenWeight1,\r\n            uint32 swapFee\r\n        )\r\n    {\r\n        uint64 weightAndFee = _pairs[pair];\r\n        if (weightAndFee > 0) {\r\n            swapFee = uint32(weightAndFee);\r\n            tokenWeight0 = uint32(weightAndFee >> 32);\r\n            tokenWeight1 = 100 - tokenWeight0;\r\n        } else {\r\n            return (50, 50, 3);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_formula\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"formula\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getWeightsAndSwapFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ValueLiquidFactory", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "0000000000000000000000007be4d5a99c903c437ec77a20cb6d0688cbb73c7f00000000000000000000000045f24baeef268bb6d63aee5129015d69702bcdfa", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://362f1d664d8ab0b18b7bdb3eda8eab3cabc7aee477401218d31ae647d54f9cb0"}