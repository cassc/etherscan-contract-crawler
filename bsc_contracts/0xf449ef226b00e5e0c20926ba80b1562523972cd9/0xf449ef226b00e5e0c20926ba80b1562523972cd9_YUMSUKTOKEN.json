{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract YUMSUKTOKEN {\r\n    string public name = \"YUMSUK TOKEN\";\r\n    string public symbol = \"YMSK\";\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply;\r\n    uint256 private maxSupply;\r\n    address public owner;\r\n    bool public paused;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    mapping(address => bool) public isMinter;\r\n    mapping(address => bool) public isPauser;\r\n    mapping(address => bool) public isFreezer;\r\n    mapping(address => bool) public isLocker;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event PauseStatusChanged(bool isPaused);\r\n    event Mint(address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n    event Freeze(address indexed target, bool isFrozen);\r\n    event RolesUpdated(address indexed account, bool isMinter, bool isPauser, bool isFreezer, bool isLocker);\r\n    event TokensLocked(address indexed holder, uint256 lockedAmount, uint256 releaseTimestamp);\r\n\r\n    struct LockInfo {\r\n        uint256 amount;\r\n        uint256 releaseTimestamp;\r\n    }\r\n    \r\n    mapping(address => LockInfo) public lockedBalances;\r\n\r\n    constructor(uint256 initialSupply) {\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);\r\n        maxSupply = totalSupply;\r\n        balanceOf[msg.sender] = totalSupply;\r\n        owner = msg.sender;\r\n        paused = false;\r\n        isMinter[msg.sender] = true;\r\n        isPauser[msg.sender] = true;\r\n        isFreezer[msg.sender] = true;\r\n        isLocker[msg.sender] = true;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can perform this operation\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter[msg.sender], \"Only minters can perform this operation\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser[msg.sender], \"Only pausers can perform this operation\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyFreezer() {\r\n        require(isFreezer[msg.sender], \"Only freezers can perform this operation\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyLocker() {\r\n        require(isLocker[msg.sender], \"Only lockers can perform this operation\");\r\n        _;\r\n    }\r\n\r\n    modifier notPaused() {\r\n        require(!paused, \"Token transfers are currently paused\");\r\n        _;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public notPaused returns (bool) {\r\n        require(to != address(0), \"Invalid address\");\r\n        require(balanceOf[msg.sender] >= value, \"Insufficient balance\");\r\n        require(balanceOf[to] + value >= balanceOf[to], \"Overflow detected\");\r\n        \r\n        if(lockedBalances[msg.sender].amount > 0) {\r\n            require(block.timestamp >= lockedBalances[msg.sender].releaseTimestamp, \"Tokens are locked\");\r\n            uint256 lockedAmount = lockedBalances[msg.sender].amount;\r\n            delete lockedBalances[msg.sender];\r\n            balanceOf[msg.sender] -= lockedAmount;\r\n            emit TokensLocked(msg.sender, 0, 0);\r\n        }\r\n\r\n        balanceOf[msg.sender] -= value;\r\n        balanceOf[to] += value;\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public notPaused returns (bool) {\r\n        allowance[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public notPaused returns (bool) {\r\n        require(from != address(0), \"Invalid sender address\");\r\n        require(to != address(0), \"Invalid recipient address\");\r\n        require(balanceOf[from] >= value, \"Insufficient balance\");\r\n        require(allowance[from][msg.sender] >= value, \"Allowance exceeded\");\r\n        require(balanceOf[to] + value >= balanceOf[to], \"Overflow detected\");\r\n        \r\n        if(lockedBalances[from].amount > 0) {\r\n            require(block.timestamp >= lockedBalances[from].releaseTimestamp, \"Tokens are locked\");\r\n            uint256 lockedAmount = lockedBalances[from].amount;\r\n            delete lockedBalances[from];\r\n            balanceOf[from] -= lockedAmount;\r\n            emit TokensLocked(from, 0, 0);\r\n        }\r\n\r\n        balanceOf[from] -= value;\r\n        balanceOf[to] += value;\r\n        allowance[from][msg.sender] -= value;\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function setMaxSupply(uint256 newMaxSupply) public onlyOwner {\r\n        require(newMaxSupply > totalSupply, \"New max supply should be greater than the current total supply\");\r\n        maxSupply = newMaxSupply;\r\n    }\r\n\r\n    function mint(address account, uint256 amount) public onlyMinter {\r\n        require(totalSupply + amount <= maxSupply, \"Exceeds max supply\");\r\n        balanceOf[account] += amount;\r\n        totalSupply += amount;\r\n        emit Transfer(address(0), account, amount);\r\n        emit Mint(account, amount);\r\n    }\r\n\r\n    function burn(uint256 amount) public notPaused {\r\n        require(balanceOf[msg.sender] >= amount, \"Insufficient balance\");\r\n        balanceOf[msg.sender] -= amount;\r\n        totalSupply -= amount;\r\n        emit Transfer(msg.sender, address(0), amount);\r\n        emit Burn(msg.sender, amount);\r\n    }\r\n\r\n    function pause() public onlyPauser {\r\n        paused = true;\r\n        emit PauseStatusChanged(true);\r\n    }\r\n\r\n    function unpause() public onlyPauser {\r\n        paused = false;\r\n        emit PauseStatusChanged(false);\r\n    }\r\n\r\n    function setMinter(address account, bool value) public onlyOwner {\r\n        isMinter[account] = value;\r\n        emit RolesUpdated(account, value, isPauser[account], isFreezer[account], isLocker[account]);\r\n    }\r\n\r\n    function setPauser(address account, bool value) public onlyOwner {\r\n        isPauser[account] = value;\r\n        emit RolesUpdated(account, isMinter[account], value, isFreezer[account], isLocker[account]);\r\n    }\r\n\r\n    function setFreezer(address account, bool value) public onlyOwner {\r\n        isFreezer[account] = value;\r\n        emit RolesUpdated(account, isMinter[account], isPauser[account], value, isLocker[account]);\r\n    }\r\n\r\n    function setLocker(address account, bool value) public onlyOwner {\r\n        isLocker[account] = value;\r\n        emit RolesUpdated(account, isMinter[account], isPauser[account], isFreezer[account], value);\r\n    }\r\n\r\n    function freezeAccount(address target) public onlyFreezer {\r\n        isFreezer[target] = true;\r\n        emit Freeze(target, true);\r\n    }\r\n\r\n    function unfreezeAccount(address target) public onlyFreezer {\r\n        isFreezer[target] = false;\r\n        emit Freeze(target, false);\r\n    }\r\n\r\n    function lockTokens(address holder, uint256 amount, uint256 releaseTimestamp) public onlyLocker {\r\n        require(holder != address(0), \"Invalid address\");\r\n        require(amount > 0, \"Lock amount should be greater than zero\");\r\n        require(releaseTimestamp > block.timestamp, \"Release timestamp should be in the future\");\r\n        require(balanceOf[holder] >= amount, \"Insufficient balance\");\r\n\r\n        lockedBalances[holder] = LockInfo(amount, releaseTimestamp);\r\n        balanceOf[holder] -= amount;\r\n        emit TokensLocked(holder, amount, releaseTimestamp);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFrozen\",\"type\":\"bool\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"PauseStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isMinter\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPauser\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFreezer\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLocker\",\"type\":\"bool\"}],\"name\":\"RolesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseTimestamp\",\"type\":\"uint256\"}],\"name\":\"TokensLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFreezer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTimestamp\",\"type\":\"uint256\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setFreezer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"unfreezeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "YUMSUKTOKEN", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000005f5e100", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1f0c10cd0bbed20be9f5b1bfdbe3a131aef5b02c134b031d1c0d159a326d6c05"}