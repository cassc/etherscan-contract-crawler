{"SourceCode": "pragma solidity ^0.8.17;\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }   \r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n   \r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n   \r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n\r\n}\r\ncontract Presale is ReentrancyGuard, Context, Ownable {\r\n    mapping (address => uint256) public _contributions;\r\n\r\n    IERC20 public _token;\r\n    uint256 private _tokenDecimals;\r\n    address payable public _wallet;\r\n    uint256 public _rate;\r\n    uint256 public _weiRaised;\r\n    uint256 public endICO;\r\n    \r\n    uint public availableTokensICO;\r\n  \r\n\r\n    event TokensPurchased(address  purchaser, address  beneficiary, uint256 value, uint256 amount);\r\n   \r\n    constructor (uint256 rate, address payable wallet, IERC20 token, uint256 tokenDecimals)  {\r\n        require(rate > 0, \"Pre-Sale: rate is 0\");\r\n        require(wallet != address(0), \"Pre-Sale: wallet is the zero address\");\r\n        require(address(token) != address(0), \"Pre-Sale: token is the zero address\");\r\n        \r\n        _rate = rate;\r\n        _wallet = wallet;\r\n        _token = token;\r\n        _tokenDecimals = 18 - tokenDecimals;\r\n    }\r\n\r\n\r\n    receive () external payable {\r\n        if(endICO > 0 && block.timestamp < endICO){\r\n            buyTokens(_msgSender());\r\n        }\r\n        else{\r\n            endICO = 0;\r\n            revert('Pre-Sale is closed');\r\n        }\r\n    }\r\n    \r\n    \r\n    //Start Pre-Sale\r\n    function startICO(uint endDate) external onlyOwner icoNotActive() {\r\n     \r\n        availableTokensICO = _token.balanceOf(address(this));\r\n        require(endDate > block.timestamp, 'duration should be > 0');\r\n        require(availableTokensICO > 0 , 'availableTokens must be > 0');\r\n        endICO = endDate; \r\n       \r\n        _weiRaised = 0;\r\n    }\r\n    \r\n    function stopICO() external onlyOwner icoActive(){\r\n        endICO = 0;\r\n       \r\n    }  \r\n    //Pre-Sale \r\n    function buyTokens(address beneficiary) public nonReentrant icoActive payable {\r\n        uint256 weiAmount = msg.value;\r\n        _preValidatePurchase(beneficiary, weiAmount);\r\n        uint256 tokens = _getTokenAmount(weiAmount);\r\n        _weiRaised = _weiRaised + weiAmount;\r\n        availableTokensICO = availableTokensICO - tokens;\r\n        _contributions[beneficiary] += weiAmount;\r\n        _forwardFunds();\r\n        _token.transfer(msg.sender, tokens);\r\n        _contributions[msg.sender] = 0;\r\n        emit TokensPurchased(_msgSender(), beneficiary, weiAmount, tokens);\r\n    }\r\n\r\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\r\n        require(beneficiary != address(0), \"Crowdsale: beneficiary is the zero address\");\r\n        require(weiAmount != 0, \"Crowdsale: weiAmount is 0\");\r\n        this; \r\n    }\r\n\r\n    // function claimTokens() external icoNotActive{\r\n    //     uint256 tokensAmt = _getTokenAmount(_contributions[msg.sender]);\r\n    //     _contributions[msg.sender] = 0;\r\n    //     _token.transfer(msg.sender, tokensAmt);\r\n    // }\r\n\r\n\r\n    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\r\n        return (weiAmount * _rate) / (10**_tokenDecimals);\r\n    }\r\n\r\n    function _forwardFunds() internal {\r\n        _wallet.transfer(msg.value);\r\n    }\r\n    \r\n     function withdraw() external onlyOwner icoNotActive{\r\n         require(address(this).balance > 0, 'Contract has no money');\r\n        _wallet.transfer(address(this).balance);    \r\n    }\r\n    \r\n    function checkContribution(address addr) public view returns(uint256){\r\n        return _contributions[addr];\r\n    }\r\n    \r\n    function setRate(uint256 newRate) external onlyOwner icoNotActive{\r\n        _rate = newRate;\r\n    }\r\n    \r\n    function setAvailableTokens(uint256 amount) public onlyOwner icoNotActive{\r\n        availableTokensICO = amount;\r\n    }\r\n \r\n    function weiRaised() public view returns (uint256) {\r\n        return _weiRaised;\r\n    }\r\n    \r\n    function setWalletReceiver(address payable newWallet) external onlyOwner(){\r\n        _wallet = newWallet;\r\n    }\r\n   \r\n    \r\n    function withdrawTokens(IERC20 tokenAddress)  public onlyOwner icoNotActive{\r\n        IERC20 tokenBEP = tokenAddress;\r\n        uint256 tokenAmt = tokenBEP.balanceOf(address(this));\r\n        require(tokenAmt > 0, 'BEP-20 balance is 0');\r\n        tokenBEP.transfer(_wallet, tokenAmt);\r\n    }\r\n  \r\n    \r\n    modifier icoActive() {\r\n        require(endICO > 0 && block.timestamp < endICO && availableTokensICO > 0, \"ICO must be active\");\r\n        _;\r\n    }\r\n    \r\n    modifier icoNotActive() {\r\n        require(endICO < block.timestamp, 'ICO should not be active');\r\n        _;\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenDecimals\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_contributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_weiRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableTokensICO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"checkContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endICO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAvailableTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setWalletReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"}],\"name\":\"startICO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopICO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Presale", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000ad570000000000000000000000000c224060641dbf2ccae0d6190c992c66377028fb2000000000000000000000000a975be9202ce26dde8bce29034be42bcd4861e360000000000000000000000000000000000000000000000000000000000000008", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b9b31d863054e34ca8d4b2e31624e807b0a7ebf7d05407eda43aeaaa8efe1341"}