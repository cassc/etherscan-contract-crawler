{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.0;\r\n\r\ninterface IBEP20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract AnimeCoinIx is IBEP20 {\r\n    string public name = \"AnimeCoinIx\";\r\n    string public symbol = \"ANI\";\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply = 10_000_000_000 * 10**uint256(decimals); // 10 billion tokens with 18 decimal places\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => uint256) private _lastTransferTimestamp; // Stores the timestamp of the last transfer for each address\r\n    uint256 private _transferDelay = 60; // 60 seconds (1 minute) delay between transfers\r\n    \r\n    // Liquidity pool variables\r\n    uint256 private _liquidityPoolBalance;\r\n    uint256 private _transactionFeePercentage = 3; // 3% transaction fee\r\n    \r\n    // Incentive variables\r\n    uint256 private _incentivePercentage = 1; // 1% incentive percentage\r\n    mapping(address => uint256) private _incentiveBalances;\r\n    \r\n    // Role definitions\r\n    address private _owner;\r\n    mapping(address => bool) private _admins;\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        _admins[msg.sender] = true;\r\n\r\n        uint256 initialCirculatingSupply = 1_000_000_000 * 10**uint256(decimals); // 1 billion tokens with 18 decimal places\r\n        uint256 developmentAndTeamSupply = 1_500_000_000 * 10**uint256(decimals); // 1.5 billion tokens with 18 decimal places\r\n        uint256 marketingAndPromotionSupply = 1_500_000_000 * 10**uint256(decimals); // 1.5 billion tokens with 18 decimal places\r\n        uint256 communityIncentivesSupply = 2_000_000_000 * 10**uint256(decimals); // 2 billion tokens with 18 decimal places\r\n        uint256 liquidityPoolSupply = 2_000_000_000 * 10**uint256(decimals); // 2 billion tokens with 18 decimal places\r\n        uint256 reservedForFutureUseSupply = 2_000_000_000 * 10**uint256(decimals); // 2 billion tokens with 18 decimal places\r\n\r\n        _balances[msg.sender] = initialCirculatingSupply;\r\n\r\n        // Distribute tokens to different allocations\r\n        _balances[address(0x8d44Dac6b9D5a716B0De59F890e77dA16910db53)] = developmentAndTeamSupply;\r\n        _balances[address(0x2E3C8970Aae1Db2B188D6F30000FDC38FE8FCB10)] = marketingAndPromotionSupply;\r\n        _balances[address(0x444b7b629c8b54EF9e893e3ab369AAf680E2A675)] = communityIncentivesSupply;\r\n        _balances[address(0xeb247B5716C917dCc3F6d6C048C6a5DC8E0C9F30)] = liquidityPoolSupply;\r\n        _balances[address(0x6b08dffF298C529bC8f336B66b9669670DDa4b88)] = reservedForFutureUseSupply;\r\n\r\n        emit Transfer(address(0), msg.sender, initialCirculatingSupply);\r\n        emit Transfer(address(0), address(0x8d44Dac6b9D5a716B0De59F890e77dA16910db53), developmentAndTeamSupply);\r\n        emit Transfer(address(0), address(0x2E3C8970Aae1Db2B188D6F30000FDC38FE8FCB10), marketingAndPromotionSupply);\r\n        emit Transfer(address(0), address(0x444b7b629c8b54EF9e893e3ab369AAf680E2A675), communityIncentivesSupply);\r\n        emit Transfer(address(0), address(0xeb247B5716C917dCc3F6d6C048C6a5DC8E0C9F30), liquidityPoolSupply);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Only contract owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(_admins[msg.sender], \"Only admins can call this function\");\r\n        _;\r\n    }\r\n\r\n    function addAdmin(address account) external onlyOwner {\r\n        require(account != address(0), \"Invalid admin address\");\r\n        _admins[account] = true;\r\n    }\r\n\r\n    function removeAdmin(address account) external onlyOwner {\r\n        require(account != address(0), \"Invalid admin address\");\r\n        require(_admins[account], \"Account is not an admin\");\r\n        _admins[account] = false;\r\n    }\r\n\r\n    function balanceOf(address account) external view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 value) external override returns (bool) {\r\n        require(to != address(0), \"Invalid recipient\");\r\n        require(_balances[msg.sender] >= value, \"Insufficient balance\");\r\n        require(_isTransferAllowed(msg.sender), \"Transfer not allowed yet\");\r\n\r\n        // Calculate the transaction fee amount\r\n        uint256 transactionFee = (value * _transactionFeePercentage) / 100;\r\n        \r\n        // Calculate the incentive amount\r\n        uint256 incentiveAmount = (transactionFee * _incentivePercentage) / 100;\r\n\r\n        // Deduct the transaction fee from the sender\r\n        _balances[msg.sender] -= transactionFee;\r\n\r\n        // Deduct the incentive amount from the transaction fee and add it to the sender's incentive balance\r\n        transactionFee -= incentiveAmount;\r\n        _incentiveBalances[msg.sender] += incentiveAmount;\r\n\r\n        // Add the remaining value (after deducting the transaction fee) to the recipient\r\n        _balances[to] += (value - transactionFee);\r\n\r\n        // Add the transaction fee to the liquidity pool\r\n        _liquidityPoolBalance += transactionFee;\r\n\r\n        _lastTransferTimestamp[msg.sender] = block.timestamp; // Update the last transfer timestamp\r\n\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) external override returns (bool) {\r\n        require(to != address(0), \"Invalid recipient\");\r\n        require(_balances[from] >= value, \"Insufficient balance\");\r\n        require(_allowances[from][msg.sender] >= value, \"Insufficient allowance\");\r\n        require(_isTransferAllowed(from), \"Transfer not allowed yet\");\r\n\r\n        // Calculate the transaction fee amount\r\n        uint256 transactionFee = (value * _transactionFeePercentage) / 100;\r\n        \r\n        // Calculate the incentive amount\r\n        uint256 incentiveAmount = (transactionFee * _incentivePercentage) / 100;\r\n\r\n        // Deduct the transaction fee from the sender\r\n        _balances[from] -= transactionFee;\r\n\r\n        // Deduct the incentive amount from the transaction fee and add it to the sender's incentive balance\r\n        transactionFee -= incentiveAmount;\r\n        _incentiveBalances[from] += incentiveAmount;\r\n\r\n        // Add the remaining value (after deducting the transaction fee) to the recipient\r\n        _balances[to] += (value - transactionFee);\r\n\r\n        // Deduct the transferred value from the allowance\r\n        _allowances[from][msg.sender] -= value;\r\n\r\n        // Add the transaction fee to the liquidity pool\r\n        _liquidityPoolBalance += transactionFee;\r\n\r\n        _lastTransferTimestamp[from] = block.timestamp; // Update the last transfer timestamp\r\n\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function _isTransferAllowed(address account) private view returns (bool) {\r\n        return block.timestamp >= _lastTransferTimestamp[account] + _transferDelay;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AnimeCoinIx", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://351ff6a429878515f87cb2e6f0db543f089560b46c0a908a1d68fae3c668e041"}