{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Dream.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./StandardToken.sol\\\";\\r\\nimport \\\"./RewardToken.sol\\\";\\r\\nimport \\\"./System.sol\\\";\\r\\nimport \\\"./FeeManager.sol\\\";\\r\\nimport \\\"./PoolTool.sol\\\";\\r\\nimport \\\"./RelationshipManager.sol\\\";\\r\\n\\r\\ncontract Dream is Ownable, RelationshipManager, FeeManager, StandardToken, System, RewardToken {\\r\\n    bool public inSwap;\\r\\n    uint256 public swapThreshold = 0.2 ether;\\r\\n    uint256 public rate4prizeLevel = 2;\\r\\n    uint256 public rate4prize = 10;\\r\\n    uint256 public rate4liquidity = 10;\\r\\n    uint256 public rate4rewards = 80;\\r\\n    address utmAddress;\\r\\n    constructor(address _router, address _reward, address _utmAddress) StandardToken(\\\"Dream\\\", \\\"Dream\\\") {\\r\\n        initIRouter(_router);\\r\\n        pairAdd(uniswapPair, 100 ether, 100, 1);\\r\\n        utmAddress = _utmAddress;\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = uniswapV2Router.WETH();\\r\\n        path[1] = _reward;\\r\\n        _updateRewardContract(_reward, path);\\r\\n        excludeFromReward(address(0));\\r\\n        excludeFromReward(address(1));\\r\\n        excludeFromReward(address(this));\\r\\n        excludeFromReward(addressDEAD);\\r\\n        excludeFromReward(owner());\\r\\n        excludeFromReward(uniswapPair);\\r\\n        excludeFromFee(owner());\\r\\n        excludeFromFee(_router);\\r\\n        excludeFromFee(address(this));\\r\\n        excludeFromFee(utmAddress);\\r\\n        _updateRelationship(utmAddress, utmAddress);\\r\\n        _updateRelationship(utmAddress, owner());\\r\\n        super._mint(owner(), 1e6 ether);\\r\\n        _approve(address(this), _router, ~uint256(0));\\r\\n        _approve(owner(), _router, ~uint256(0));\\r\\n    }\\r\\n    uint256 limitAmount = 1000 ether;\\r\\n    uint256 limitTimeBefore;\\r\\n    mapping(address => uint256) buyInHourAmount;\\r\\n    function swapStart(bool b) public onlyOwner {\\r\\n        inSwap = b;\\r\\n    }\\r\\n    function startSwapAndLimitBuy() public onlyOwner {\\r\\n        limitTimeBefore = block.timestamp + 30 minutes;\\r\\n        swapStart(true);\\r\\n    }\\r\\n    function updateRate(uint256 _rate4liquidity, uint256 _rate4rewards, uint256 _rate4prize, uint256 _rate4prizeLevel, uint256 _swapThreshold) public onlyImprover {\\r\\n        require(_rate4liquidity+_rate4rewards+_rate4prize <= 100, \\\"exceeds of 10%\\\");\\r\\n        rate4liquidity = _rate4liquidity;\\r\\n        rate4rewards = _rate4rewards;\\r\\n        rate4prize = _rate4prize;\\r\\n        rate4prizeLevel = _rate4prizeLevel;\\r\\n        swapThreshold = _swapThreshold;\\r\\n    }\\r\\n    function _transfer(address from, address to, uint256 amount) internal virtual override {\\r\\n        uint256 feeAmount;\\r\\n        if (isPair(from)) {         // buy\\r\\n            _updateRelationship(utmAddress, to);\\r\\n            if (!isExcludeFromFee(to)) {\\r\\n                if (limitTimeBefore > block.timestamp) {\\r\\n                    require(buyInHourAmount[to]+amount <= limitAmount, \\\"limit 1000 token in first 1 hour\\\");\\r\\n                    buyInHourAmount[to] += amount;\\r\\n                }\\r\\n                feeAmount = handAllFees(from, to, amount);\\r\\n                _updateRelationship(utmAddress, to);\\r\\n            }\\r\\n            _unLockToken(to);\\r\\n            userJoin(to);\\r\\n        } else if (isPair(to)) {    // sell\\r\\n            _updateRelationship(utmAddress, from);\\r\\n            if (!isExcludeFromFee(from)) {\\r\\n                feeAmount = handAllFees(from, from, amount);\\r\\n                if (!handSwap()) distributeRewardToken();\\r\\n            }\\r\\n        } else {\\r\\n            _updateRelationship(from, to);\\r\\n            userJoin(to);\\r\\n        }\\r\\n        super._transfer(from, to, amount - feeAmount);\\r\\n    }\\r\\n    function handAllFees(address from, address user, uint256 amount) private returns(uint256) {\\r\\n        require(inSwap || user == owner(), \\\"please waiting pool start\\\");\\r\\n        uint256 fee = amount * (rate4rewards + rate4liquidity) / divBase;\\r\\n        _move(from, address(this), fee);\\r\\n        uint256 feeParent = amount * rate4prize / rate4prizeLevel / divBase;\\r\\n        address p1 = relationship[user];\\r\\n        address p2 = relationship[p1];\\r\\n        if (p1==address(0)) p1 = utmAddress;\\r\\n        if (p2==address(0)) p2 = utmAddress;\\r\\n        _move(from, p1, feeParent);\\r\\n        _move(from, p2, feeParent);\\r\\n        return feeParent * rate4prizeLevel + fee;\\r\\n    }\\r\\n\\r\\n    function handSwap() private returns (bool) {\\r\\n        uint256 total = balanceOf(address(this));\\r\\n        if (total == 0) return false;\\r\\n        uint256 amountLiquidity = total * rate4liquidity / (rate4rewards + rate4liquidity);\\r\\n        uint256 amountLiquidityReal = amountLiquidity / 2;\\r\\n        uint256 amountDesire = total - amountLiquidityReal;\\r\\n        if (getPrice4ETH(amountDesire) >= swapThreshold) {\\r\\n            uint256 ethBefore = address(this).balance;\\r\\n            swapTokensForETH(amountDesire);\\r\\n            uint256 ethAfter = address(this).balance;\\r\\n            addLiquidityETH((ethAfter - ethBefore)*amountLiquidityReal/amountDesire, amountLiquidityReal);\\r\\n            swapEth4RewardToken();\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n    function batchTransfer(uint256 amount, address[] memory to) public {\\r\\n        for (uint i = 0; i< to.length; i++) {\\r\\n            _transfer(_msgSender(), to[i], amount);\\r\\n        }\\r\\n    }\\r\\n    function airdrop(uint256 amount, address[] memory to) public {\\r\\n        for (uint i = 0; i< to.length; i++) {\\r\\n            _move(_msgSender(), to[i], amount);\\r\\n        }\\r\\n    }\\r\\n    function lockTokenBatch(address[] memory _user, uint256 _amount, uint256 _delayDuration, bool isLeader) public onlyOwner {\\r\\n        require(_amount > 0, \\\"_amount must greater than 0\\\");\\r\\n        for (uint i=0;i<_user.length;i++) {\\r\\n            _move(_msgSender(), _user[i], _amount);\\r\\n            userJoin(_user[i]);\\r\\n            _lockToken(_user[i], _amount, _delayDuration);\\r\\n            if (isLeader) _updateRelationship(utmAddress, _user[i]);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/StandardToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ERC777.sol\\\";\\r\\nabstract contract StandardToken is ERC777 {\\r\\n    constructor(string memory name_, string memory symbol_) ERC777(name_, symbol_, new address[](0)) {}\\r\\n}\"\r\n    },\r\n    \"contracts/RewardToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./PoolTool.sol\\\";\\r\\nimport \\\"./PairManager.sol\\\";\\r\\nimport \\\"./TokenLocker.sol\\\";\\r\\nimport \\\"./Improver.sol\\\";\\r\\nimport \\\"./RewardManager.sol\\\";\\r\\n\\r\\nabstract contract RewardToken is Improver, RewardManager, PairManager, PoolTool, TokenLocker {\\r\\n    mapping(address => bool) userRewardMap;\\r\\n    mapping(uint256 => address) userMap;\\r\\n    uint256 public userTotal;\\r\\n\\r\\n    uint256 rewardIndex;\\r\\n\\r\\n    uint256 public rewardThreshold = 100 ether;\\r\\n    uint256 public rewardMembersEachTime = 79;\\r\\n\\r\\n    bool isJoining;\\r\\n    bool isInReward;\\r\\n    modifier onJoining() {\\r\\n        require(!isJoining, \\\"waiting\\\");\\r\\n        isJoining = true;\\r\\n        _;\\r\\n        isJoining = false;\\r\\n    }\\r\\n    modifier onReward() {\\r\\n        require(!isInReward, \\\"in Reward\\\");\\r\\n        isInReward = true;\\r\\n        _;\\r\\n        isInReward = false;\\r\\n    }\\r\\n    struct RewardStruct {\\r\\n        address contractAddress;\\r\\n        address[] path;\\r\\n    }\\r\\n    RewardStruct rs;\\r\\n    function _updateRewardContract(address addr, address[] memory path) internal {\\r\\n        rs.contractAddress = addr;\\r\\n        rs.path = path;\\r\\n    }\\r\\n    function updateRewardContract(address addr, address[] memory path) public onlyImprover {\\r\\n        _updateRewardContract(addr, path);\\r\\n    }\\r\\n    function updateRewardThreshold(uint256 _rewardThreshold, uint256 _rewardMembersEachTime) public onlyImprover {\\r\\n        rewardThreshold = _rewardThreshold;\\r\\n        rewardMembersEachTime = _rewardMembersEachTime;\\r\\n    }\\r\\n    function _userJoin(address user) private onJoining {\\r\\n        if (!isExcludeFromReward(user)) {\\r\\n            userMap[userTotal] = user;\\r\\n            userRewardMap[user] = true;\\r\\n            userTotal++;\\r\\n        }\\r\\n    }\\r\\n    function userJoin(address user) internal {\\r\\n        if (!isExcludeFromReward(user) && !userRewardMap[user]) _userJoin(user);\\r\\n    }\\r\\n    function getBalanceForRewardReal(address _user) public view returns(uint256 amount) {\\r\\n        amount += balanceOf(_user);\\r\\n        amount += balanceOfLiquidity(_user);\\r\\n        amount += balanceOfLocked(_user);\\r\\n        return amount;\\r\\n    }\\r\\n    mapping(uint256 => uint256) users;\\r\\n    function handRewards(uint256 prize) private onReward {\\r\\n        uint256 counter;\\r\\n        uint256 origin = rewardIndex;\\r\\n        for (uint256 i=rewardIndex;i<userTotal;i++) {\\r\\n            if (counter > rewardMembersEachTime) break;\\r\\n            if (!isExcludeFromReward(userMap[i]) && getBalanceForRewardReal(userMap[i]) >= rewardThreshold) {\\r\\n                users[counter] = i;\\r\\n                counter++;\\r\\n            }\\r\\n            rewardIndex = i+1;\\r\\n        }\\r\\n        if (counter < rewardMembersEachTime) {\\r\\n            for (uint256 i=0;i<origin;i++) {\\r\\n                if (counter > rewardMembersEachTime) break;\\r\\n                if (!isExcludeFromReward(userMap[i]) && getBalanceForRewardReal(userMap[i]) >= rewardThreshold) {\\r\\n                    users[counter] = i;\\r\\n                    counter++;\\r\\n                }\\r\\n                rewardIndex = i+1;\\r\\n            }\\r\\n        }\\r\\n        uint256 totalAmount;\\r\\n        for (uint i = 0; i < counter; i++) {\\r\\n            totalAmount += getBalanceForRewardReal(userMap[users[i]]);\\r\\n        }\\r\\n        if (totalAmount == 0) return;\\r\\n        IERC20 token = IERC20(rs.contractAddress);\\r\\n        for (uint i = 0; i < counter; i++) {\\r\\n            uint256 prizePerUser = prize * getBalanceForRewardReal(userMap[users[i]]) / totalAmount;\\r\\n            if (prizePerUser>0) token.transfer(userMap[users[i]], prizePerUser);\\r\\n        }\\r\\n    }\\r\\n    function distributeRewardToken() internal {\\r\\n        IERC20 token = IERC20(rs.contractAddress);\\r\\n        uint256 amount = token.balanceOf(address(this));\\r\\n        if (amount == 0) return;\\r\\n        handRewards(amount);\\r\\n    }\\r\\n\\r\\n    function swapEth4RewardToken() internal {\\r\\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: address(this).balance}(\\r\\n            0,\\r\\n            rs.path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/System.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./Improver.sol\\\";\\r\\n\\r\\nabstract contract System is Improver {\\r\\n    address public addressDEAD = address(0xdEaD);\\r\\n    receive() external payable {}\\r\\n    fallback() external payable {}\\r\\n    function rescueLossToken(IERC20 token_, address _recipient) external onlyImprover {\\r\\n        require(address(token_) != address(this), \\\"not permitted\\\");\\r\\n        token_.transfer(_recipient, token_.balanceOf(address(this)));\\r\\n    }\\r\\n    function rescueLossChain(address payable _recipient) external onlyImprover {_recipient.transfer(address(this).balance);}\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/FeeManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract FeeManager {\\r\\n    mapping(address => bool) feeBox;\\r\\n    function includeInFee(address user) internal {\\r\\n        feeBox[user] = false;\\r\\n    }\\r\\n    function excludeFromFee(address user) internal {\\r\\n        feeBox[user] = true;\\r\\n    }\\r\\n    function isExcludeFromFee(address user) internal view returns(bool) {\\r\\n        return feeBox[user];\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/PoolTool.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IFactory {\\r\\n    function createPair(address tokenA, address tokenB) external returns (address uniswapPair);\\r\\n}\\r\\ninterface IPair {\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n}\\r\\ninterface IRouter {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\\r\\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable;\\r\\n}\\r\\n\\r\\nabstract contract PoolTool {\\r\\n    address public uniswapPair;\\r\\n    IRouter internal uniswapV2Router;\\r\\n    function initIRouter(address _router) internal {\\r\\n        uniswapV2Router = IRouter(_router);\\r\\n        uniswapPair = IFactory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\\r\\n    }\\r\\n    function swapTokensForETH(uint256 amountDesire) internal {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = uniswapV2Router.WETH();\\r\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountDesire, 0, path, address(this), block.timestamp);\\r\\n    }\\r\\n\\r\\n    function addLiquidityETH(uint256 ethAmount, uint256 tokenAmount) internal {\\r\\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\\r\\n            address(this),\\r\\n            tokenAmount,\\r\\n            0,\\r\\n            0,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n    function getPoolInfo(address pair) public view returns (uint112 WETHAmount, uint112 TOKENAmount) {\\r\\n        (uint112 _reserve0, uint112 _reserve1,) = IPair(pair).getReserves();\\r\\n        WETHAmount = _reserve1;\\r\\n        TOKENAmount = _reserve0;\\r\\n        if (IPair(pair).token0() == uniswapV2Router.WETH()) {\\r\\n            WETHAmount = _reserve0;\\r\\n            TOKENAmount = _reserve1;\\r\\n        }\\r\\n    }\\r\\n    function getPrice4ETH(uint256 amountDesire) internal view returns(uint256) {\\r\\n        (uint112 WETHAmount, uint112 TOKENAmount) = getPoolInfo(uniswapPair);\\r\\n        return WETHAmount * amountDesire / TOKENAmount;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/RelationshipManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract RelationshipManager {\\r\\n    mapping(address => address) public relationship;\\r\\n    function _updateRelationship(address parent, address child) internal {\\r\\n        if (relationship[child] == address(0)) {\\r\\n            relationship[child] = parent;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC777.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777Sender.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol\\\";\\r\\ncontract ERC777 is Context, IERC777, IERC20 {\\r\\n    using Address for address;\\r\\n    IERC1820Registry internal constant _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\r\\n    mapping(address => uint256) private _balances;\\r\\n    uint256 private _totalSupply;\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    bytes32 private constant _TOKENS_SENDER_INTERFACE_HASH = keccak256(\\\"ERC777TokensSender\\\");\\r\\n    bytes32 private constant _TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\\\"ERC777TokensRecipient\\\");\\r\\n    address[] private _defaultOperatorsArray;\\r\\n    mapping(address => bool) private _defaultOperators;\\r\\n    mapping(address => mapping(address => bool)) private _operators;\\r\\n    mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n    constructor(string memory name_, string memory symbol_, address[] memory defaultOperators_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _defaultOperatorsArray = defaultOperators_;\\r\\n        for (uint256 i = 0; i < defaultOperators_.length; i++) {\\r\\n            _defaultOperators[defaultOperators_[i]] = true;\\r\\n        }\\r\\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"ERC777Token\\\"), address(this));\\r\\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"ERC20Token\\\"), address(this));\\r\\n    }\\r\\n    function name() public view virtual override returns (string memory) {return _name;}\\r\\n    function symbol() public view virtual override returns (string memory) {return _symbol;}\\r\\n    function decimals() public pure virtual returns (uint8) {return 18;}\\r\\n    function granularity() public view virtual override returns (uint256) {return 1;}\\r\\n    function totalSupply() public view virtual override(IERC20, IERC777) returns (uint256) {return _totalSupply;}\\r\\n    function balanceOf(address tokenHolder) public view virtual override(IERC20, IERC777) returns (uint256) {return _balances[tokenHolder];}\\r\\n    function send(address recipient, uint256 amount, bytes memory data) public virtual override {_send(_msgSender(), recipient, amount, data, \\\"\\\", true);}\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        require(recipient != address(0), \\\"ERC777: transfer to the zero address\\\");\\r\\n        address from = _msgSender();\\r\\n        _callTokensToSend(from, from, recipient, amount, \\\"\\\", \\\"\\\");\\r\\n        _move(from, from, recipient, amount, \\\"\\\", \\\"\\\");\\r\\n        _callTokensReceived(from, from, recipient, amount, \\\"\\\", \\\"\\\", false);\\r\\n        return true;\\r\\n    }\\r\\n    function burn(uint256 amount, bytes memory data) public virtual override {_burn(_msgSender(), amount, data, \\\"\\\");}\\r\\n    function isOperatorFor(address operator, address tokenHolder) public view virtual override returns (bool) {\\r\\n        return\\r\\n        operator == tokenHolder ||\\r\\n        (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\\r\\n        _operators[tokenHolder][operator];\\r\\n    }\\r\\n    function authorizeOperator(address operator) public virtual override {\\r\\n        require(_msgSender() != operator, \\\"ERC777: authorizing self as operator\\\");\\r\\n        if (_defaultOperators[operator]) {\\r\\n            delete _revokedDefaultOperators[_msgSender()][operator];\\r\\n        } else {\\r\\n            _operators[_msgSender()][operator] = true;\\r\\n        }\\r\\n        emit AuthorizedOperator(operator, _msgSender());\\r\\n    }\\r\\n    function revokeOperator(address operator) public virtual override {\\r\\n        require(operator != _msgSender(), \\\"ERC777: revoking self as operator\\\");\\r\\n        if (_defaultOperators[operator]) {\\r\\n            _revokedDefaultOperators[_msgSender()][operator] = true;\\r\\n        } else {\\r\\n            delete _operators[_msgSender()][operator];\\r\\n        }\\r\\n        emit RevokedOperator(operator, _msgSender());\\r\\n    }\\r\\n    function defaultOperators() public view virtual override returns (address[] memory) {return _defaultOperatorsArray;}\\r\\n    function operatorSend(address sender, address recipient, uint256 amount, bytes memory data, bytes memory operatorData) public virtual override {\\r\\n        require(isOperatorFor(_msgSender(), sender), \\\"ERC777: caller is not an operator for holder\\\");\\r\\n        _send(sender, recipient, amount, data, operatorData, true);\\r\\n    }\\r\\n    function operatorBurn(address account, uint256 amount, bytes memory data, bytes memory operatorData) public virtual override {\\r\\n        require(isOperatorFor(_msgSender(), account), \\\"ERC777: caller is not an operator for holder\\\");\\r\\n        _burn(account, amount, data, operatorData);\\r\\n    }\\r\\n    function allowance(address holder, address spender) public view virtual override returns (uint256) {return _allowances[holder][spender];}\\r\\n    function approve(address spender, uint256 value) public virtual override returns (bool) {\\r\\n        address holder = _msgSender();\\r\\n        _approve(holder, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n    function transferFrom(address holder, address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        require(recipient != address(0), \\\"ERC777: transfer to the zero address\\\");\\r\\n        require(holder != address(0), \\\"ERC777: transfer from the zero address\\\");\\r\\n        address spender = _msgSender();\\r\\n        _callTokensToSend(spender, holder, recipient, amount, \\\"\\\", \\\"\\\");\\r\\n        _move(spender, holder, recipient, amount, \\\"\\\", \\\"\\\");\\r\\n        uint256 currentAllowance = _allowances[holder][spender];\\r\\n        require(currentAllowance >= amount, \\\"ERC777: transfer amount exceeds allowance\\\");\\r\\n        _approve(holder, spender, currentAllowance - amount);\\r\\n        _callTokensReceived(spender, holder, recipient, amount, \\\"\\\", \\\"\\\", false);\\r\\n        return true;\\r\\n    }\\r\\n    function _mint(address account, uint256 amount, bytes memory userData, bytes memory operatorData) internal virtual {_mint(account, amount, userData, operatorData, true);}\\r\\n    function _mint(address account, uint256 amount, bytes memory userData, bytes memory operatorData, bool requireReceptionAck) internal virtual {\\r\\n        require(account != address(0), \\\"ERC777: mint to the zero address\\\");\\r\\n        address operator = _msgSender();\\r\\n        _beforeTokenTransfer(operator, address(0), account, amount);\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, requireReceptionAck);\\r\\n        emit Minted(operator, account, amount, userData, operatorData);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n    function _send(address from, address to, uint256 amount, bytes memory userData, bytes memory operatorData, bool requireReceptionAck) internal virtual {\\r\\n        require(from != address(0), \\\"ERC777: send from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC777: send to the zero address\\\");\\r\\n        address operator = _msgSender();\\r\\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\\r\\n        _move(operator, from, to, amount, userData, operatorData);\\r\\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\\r\\n    }\\r\\n    function _burn(address from, uint256 amount, bytes memory data, bytes memory operatorData) internal virtual {\\r\\n        require(from != address(0), \\\"ERC777: burn from the zero address\\\");\\r\\n        address operator = _msgSender();\\r\\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\\r\\n        _beforeTokenTransfer(operator, from, address(0), amount);\\r\\n        uint256 fromBalance = _balances[from];\\r\\n        require(fromBalance >= amount, \\\"ERC777: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[from] = fromBalance - amount;\\r\\n        }\\r\\n        _totalSupply -= amount;\\r\\n        emit Burned(operator, from, amount, data, operatorData);\\r\\n        emit Transfer(from, address(0), amount);\\r\\n    }\\r\\n    function _move(address operator, address from, address to, uint256 amount, bytes memory userData, bytes memory operatorData) private {\\r\\n        _transfer(from, to, amount);\\r\\n        emit Sent(operator, from, to, amount, userData, operatorData);\\r\\n    }\\r\\n    function _approve(address holder, address spender, uint256 value) internal {\\r\\n        require(holder != address(0), \\\"ERC777: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC777: approve to the zero address\\\");\\r\\n        _allowances[holder][spender] = value;\\r\\n        emit Approval(holder, spender, value);\\r\\n    }\\r\\n    function _callTokensToSend(address operator, address from, address to, uint256 amount, bytes memory userData, bytes memory operatorData) private {\\r\\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(from, _TOKENS_SENDER_INTERFACE_HASH);\\r\\n        if (implementer != address(0)) {\\r\\n            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\\r\\n        }\\r\\n    }\\r\\n    function _callTokensReceived(address operator, address from, address to, uint256 amount, bytes memory userData, bytes memory operatorData, bool requireReceptionAck) private {\\r\\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(to, _TOKENS_RECIPIENT_INTERFACE_HASH);\\r\\n        if (implementer != address(0)) {\\r\\n            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\\r\\n        } else if (requireReceptionAck) {\\r\\n            require(!to.isContract(), \\\"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\\\");\\r\\n        }\\r\\n    }\\r\\n    function _beforeTokenTransfer(address operator, address from, address to, uint256 amount) internal virtual {}\\r\\n    function _afterTokenTransfer(address operator, address from, address to, uint256 amount) internal virtual {}\\r\\n\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\r\\n        _beforeTokenTransfer(_msgSender(), sender, recipient, amount);\\r\\n        _move(sender, recipient, amount);\\r\\n        _afterTokenTransfer(_msgSender(), sender, recipient, amount);\\r\\n    }\\r\\n    function _move(address from, address to, uint256 amount) internal virtual {\\r\\n        uint256 fromBalance = _balances[from];\\r\\n        require(fromBalance >= amount, \\\"ERC777: transfer amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[from] = fromBalance - amount;\\r\\n        }\\r\\n        _balances[to] += amount;\\r\\n\\r\\n        emit Transfer(from, to, amount);\\r\\n    }\\r\\n    function _mint(address account, uint256 amount) internal virtual {_mint(account, amount, \\\"\\\", \\\"\\\");}\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC777/IERC777.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777Token standard as defined in the EIP.\\n *\\n * This contract uses the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\\n * token holders and recipients react to token movements by using setting implementers\\n * for the associated interfaces in said registry. See {IERC1820Registry} and\\n * {ERC1820Implementer}.\\n */\\ninterface IERC777 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For most token contracts, this value will equal 1.\\n     */\\n    function granularity() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    event Sent(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData\\n    );\\n\\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777Recipient.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC777/IERC777Sender.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777Sender.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensSender standard as defined in the EIP.\\n *\\n * {IERC777} Token holders can be notified of operations performed on their\\n * tokens by having a contract implement this interface (contract holders can be\\n * their own implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Sender {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever a registered holder's\\n     * (`from`) tokens are about to be moved or destroyed. The type of operation\\n     * is conveyed by `to` being the zero address or not.\\n     *\\n     * This call occurs _before_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the pre-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensToSend(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC1820Registry.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820Registry {\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(\\n        address account,\\n        bytes32 _interfaceHash,\\n        address implementer\\n    ) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     * @param account Address of the contract for which to update the cache.\\n     * @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not.\\n     * If the result is not cached a direct lookup on the contract address is performed.\\n     * If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     * {updateERC165Cache} with the contract address.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n}\\n\"\r\n    },\r\n    \"contracts/PairManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./Improver.sol\\\";\\r\\nimport \\\"./RewardManager.sol\\\";\\r\\n\\r\\nabstract contract PairManager is Improver, RewardManager {\\r\\n    struct PairStruct {\\r\\n        address pair;\\r\\n        uint256 rewardThreshold;\\r\\n        uint256 rewardTimes;\\r\\n        uint256 rewardTimesBase;\\r\\n    }   // rewardTimes/rewardTimesBase\\r\\n    PairStruct[] public pairLists;\\r\\n    \\r\\n    uint256 public divBase = 1000;\\r\\n    uint256 public rewardRate = 1100;\\r\\n    \\r\\n    function pairExists(address _pair) public view returns(bool) {\\r\\n        for (uint i=0;i<pairLists.length;i++) {\\r\\n            if (pairLists[i].pair == _pair) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function pairAdd(address _pair, uint256 _rewardThreshold, uint256 _rewardTimes, uint256 _rewardTimesBase) public onlyImprover {\\r\\n        require(!pairExists(_pair), \\\"pair already exists\\\");\\r\\n        excludeFromReward(_pair);\\r\\n        pairLists.push(PairStruct(_pair, _rewardThreshold, _rewardTimes, _rewardTimesBase));\\r\\n    }\\r\\n\\r\\n    function pairEdit(address _pair, uint256 _rewardThreshold, uint256 _rewardTimes, uint256 _rewardTimesBase) public onlyImprover {\\r\\n        for (uint i=0;i<pairLists.length;i++) {\\r\\n            if (pairLists[i].pair == _pair) {\\r\\n                pairLists[i].rewardThreshold = _rewardThreshold;\\r\\n                pairLists[i].rewardTimes = _rewardTimes;\\r\\n                pairLists[i].rewardTimesBase = _rewardTimesBase;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function pairRemove(address _pair) public onlyImprover {\\r\\n        for (uint i=0;i<pairLists.length;i++) {\\r\\n            if (pairLists[i].pair == _pair) {\\r\\n                pairLists[i] = pairLists[pairLists.length-1];\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        pairLists.pop();\\r\\n    }\\r\\n\\r\\n    function balanceOfLiquidity(address _user) public view returns(uint256 amount) {\\r\\n        for (uint i=0;i<pairLists.length;i++) {\\r\\n            uint256 balance = IERC20(pairLists[i].pair).balanceOf(_user);\\r\\n            if (balance > pairLists[i].rewardThreshold) {\\r\\n                amount += balance * pairLists[i].rewardTimes * rewardRate / pairLists[i].rewardTimesBase / divBase;\\r\\n            }\\r\\n        }\\r\\n        return amount;\\r\\n    }\\r\\n    function isPair(address addr) public view returns(bool) {\\r\\n        for (uint i=0;i<pairLists.length;i++) {\\r\\n            if (pairLists[i].pair == addr) return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n    function pairListsLength() public view returns(uint256) {\\r\\n        return pairLists.length;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/TokenLocker.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./StandardToken.sol\\\";\\r\\n\\r\\nabstract contract TokenLocker is Context, StandardToken {\\r\\n    event TokenReleased(address user, uint256 amount);\\r\\n    struct LockStruct {\\r\\n        uint256 amountTotal;\\r\\n        uint256 amountLeft;\\r\\n        uint256 delayDuration;\\r\\n        uint256 nextReleaseTime;\\r\\n    }\\r\\n    uint256 releaseDuration = 30 days;\\r\\n    uint256 releaseEachAmount = 100 ether;\\r\\n    address public lock2address = address(1);\\r\\n    mapping(address => LockStruct) public lockBox;\\r\\n    function _lockToken(address _user, uint256 _amount, uint256 _delayDuration) internal {\\r\\n        _move(_user, lock2address, _amount);\\r\\n        lockBox[_user] = LockStruct(_amount, _amount, _delayDuration, block.timestamp + releaseDuration);\\r\\n        _unLockTokenReal(_user);\\r\\n    }\\r\\n    function _unLockTokenReal(address _user) private {\\r\\n        if (lockBox[_user].amountLeft > 0) {\\r\\n            lockBox[_user].nextReleaseTime = block.timestamp + releaseDuration + lockBox[_user].delayDuration;\\r\\n            uint256 _amount = releaseEachAmount;\\r\\n            if (_amount > lockBox[_user].amountLeft) _amount = lockBox[_user].amountLeft;\\r\\n            lockBox[_user].amountLeft -= _amount;\\r\\n            _move(lock2address, _user, _amount);\\r\\n            emit TokenReleased(_user, _amount);\\r\\n        }\\r\\n    }\\r\\n    function _unLockToken(address _user) internal {\\r\\n        if (block.timestamp > lockBox[_user].nextReleaseTime) _unLockTokenReal(_user);\\r\\n    }\\r\\n    function balanceOfLocked(address _user) public view returns(uint256) {\\r\\n        return lockBox[_user].amountLeft;\\r\\n    }\\r\\n    function unLockToken() public {\\r\\n        _unLockToken(_msgSender());\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/Improver.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nabstract contract Improver is Context {\\r\\n    address internal _improver;\\r\\n    modifier onlyImprover() {\\r\\n        require(_msgSender()==_improver, \\\"forbidden\\\");\\r\\n        _;\\r\\n    }\\r\\n    constructor() {_improver = _msgSender();}\\r\\n}\"\r\n    },\r\n    \"contracts/RewardManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract RewardManager {\\r\\n    mapping(address => bool) box;\\r\\n    function excludeFromReward(address user) internal {\\r\\n        box[user] = true;\\r\\n    }\\r\\n    function isExcludeFromReward(address user) internal view returns(bool) {\\r\\n        return box[user];\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_utmAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"AuthorizedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"RevokedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Sent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"addressDEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOfLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOfLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"}],\"name\":\"batchTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"divBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getBalanceForRewardReal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"WETHAmount\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"TOKENAmount\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"granularity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"isOperatorFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock2address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockBox\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delayDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextReleaseTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_user\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_delayDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLeader\",\"type\":\"bool\"}],\"name\":\"lockTokenBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"operatorBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"operatorSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardTimes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardTimesBase\",\"type\":\"uint256\"}],\"name\":\"pairAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardTimes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardTimesBase\",\"type\":\"uint256\"}],\"name\":\"pairEdit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"pairExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairLists\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardTimes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardTimesBase\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairListsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"pairRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate4liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate4prize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate4prizeLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate4rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"relationship\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"rescueLossChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"rescueLossToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardMembersEachTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSwapAndLimitBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"swapStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unLockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate4liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate4rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate4prize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate4prizeLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapThreshold\",\"type\":\"uint256\"}],\"name\":\"updateRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"updateRewardContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardMembersEachTime\",\"type\":\"uint256\"}],\"name\":\"updateRewardThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Dream", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000f856832605e57d15ee624f6b294199501bff416b", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}