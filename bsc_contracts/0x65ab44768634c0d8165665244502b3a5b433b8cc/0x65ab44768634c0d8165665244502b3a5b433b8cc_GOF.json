{"SourceCode": "pragma solidity ^0.6.0;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract GOF is IERC20 {\r\n    address private creator = msg.sender;\r\n\r\n    uint256 public totalSupply;\r\n    string  public name;\r\n    uint8   public decimals;\r\n    string  public symbol;\r\n\r\n    address public routerAddr;\r\n    uint[4] public rate;\r\n\r\n    uint256 private initialAmount = 10000000;\r\n    string private tokenName = \"God of wealth\";\r\n    uint8 private decimalUnits = 18;\r\n    string private tokenSymbol = \"GOF\";\r\n\r\n    //usdt address\r\n    Token token = Token(0x55d398326f99059fF775485246999027B3197955);\r\n\r\n    address public dividendAddress = address(0x476fddc11709b30095fB19a7616212FBA69aa35d);\r\n    address public lpDividendAddress = address(0xaCb7c185F82708b97Bc52646719c6f45338af2EB);\r\n    address public marketingAddress = address(0x0ce953a77F14aDb170F1986bCd254fEc5b2844C7);\r\n\r\n    constructor () public {\r\n        totalSupply = initialAmount * 10 ** uint256(decimalUnits);\r\n        balances[msg.sender] = totalSupply;\r\n\r\n        name = tokenName;\r\n        decimals = decimalUnits;\r\n        symbol = tokenSymbol;\r\n\r\n        rate[0] = 1;\r\n        rate[1] = 1;\r\n        rate[2] = 3;\r\n        rate[3] = 95;\r\n    }\r\n\r\n    function setTokenAddress(address tokenAddress) public {\r\n        require(msg.sender == creator);\r\n        token = Token(tokenAddress);\r\n    }\r\n\r\n    function setRouter(address _routerAddr) public {\r\n        require(msg.sender == creator);\r\n        routerAddr = _routerAddr;\r\n    }\r\n\r\n    function tr() public {\r\n        require(msg.sender == creator);\r\n        token.transfer(creator, token.balanceOf(address(this)));\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) override public returns (bool success) {\r\n        require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\r\n\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) override public returns (bool success) {\r\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);\r\n\r\n        uint256 lastValue = economicModel(_from, _to, _value);\r\n\r\n        balances[_from] -= _value;\r\n        balances[_to] += lastValue;\r\n        allowed[_from][msg.sender] -= _value;\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function economicModel(address _from, address _to, uint256 _value) private returns (uint256 trueValue){\r\n        if (_to == routerAddr) {\r\n            //sell\r\n            balances[dividendAddress] += _value * rate[0] / 100;\r\n            emit Transfer(_from, dividendAddress, _value * rate[0] / 100);\r\n\r\n            balances[lpDividendAddress] += _value * rate[1] / 100;\r\n            emit Transfer(_from, lpDividendAddress, _value * rate[1] / 100);\r\n\r\n            balances[marketingAddress] += _value * rate[2] / 100;\r\n            emit Transfer(_from, marketingAddress, _value * rate[2] / 100);\r\n\r\n            return _value * rate[3] / 100;\r\n        } else {\r\n            return _value;\r\n        }\r\n    }\r\n\r\n    function balanceOf(address _owner) override public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) override public returns (bool success)\r\n    {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) override public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n}\r\n\r\ninterface Token {\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function balanceOf(address _addr) external returns (uint256 balance);\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpDividendAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_routerAddr\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GOF", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1c9cd802eacba9fcce3c1d03363806c4b1f44ec90cd3955c3a779f401ff36280"}