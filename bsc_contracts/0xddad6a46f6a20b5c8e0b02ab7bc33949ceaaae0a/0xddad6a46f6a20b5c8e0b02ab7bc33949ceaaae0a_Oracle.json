{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAggregator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface IAggregator {\\r\\n  function decimals() external view returns (uint8);\\r\\n  function latestRoundData()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint80 roundId,\\r\\n      int256 answer,\\r\\n      uint256 startedAt,\\r\\n      uint256 updatedAt,\\r\\n      uint80 answeredInRound\\r\\n    );\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IOracle.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n/**\\r\\n * @title IOracle\\r\\n * @author LC\\r\\n * @notice Defines the basic interface for the Oracle\\r\\n */\\r\\ninterface IOracle {\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted after the price source of an asset is updated\\r\\n   * @param asset The address of the asset\\r\\n   * @param source The price source of the asset\\r\\n   */\\r\\n  event AssetSourceUpdated(address indexed asset, address indexed source);\\r\\n\\r\\n  /**\\r\\n   * @notice Sets or replaces price sources of assets\\r\\n   * @param assets The addresses of the assets\\r\\n   * @param sources The addresses of the price sources\\r\\n   */\\r\\n  function setAssetSources(address[] calldata assets, address[] calldata sources) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the asset price in the base currency\\r\\n   * @param asset The address of the asset\\r\\n   * @return The price of the asset\\r\\n   */\\r\\n  function getAssetPrice(address asset) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns a list of prices from a list of assets addresses\\r\\n   * @param assets The list of assets addresses\\r\\n   * @return The prices of the given assets\\r\\n   */\\r\\n  function getAssetsPrices(address[] calldata assets) external view returns (uint256[] memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the source for an asset address\\r\\n   * @param asset The address of the asset\\r\\n   * @return The address of the source\\r\\n   */\\r\\n  function getSourceOfAsset(address asset) external view returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Oracle.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./interfaces/IAggregator.sol\\\";\\r\\nimport './interfaces/IOracle.sol';\\r\\n\\r\\n/**\\r\\n * @title Oracle\\r\\n * @author LC\\r\\n * @notice Contract to get asset prices, manage price sources\\r\\n */\\r\\ncontract Oracle is IOracle, Ownable {\\r\\n\\r\\n  // Map of asset price sources (asset => priceSource)\\r\\n  mapping(address => IAggregator) private assetsSources;\\r\\n\\r\\n  /**\\r\\n   * @notice Constructor\\r\\n   * @param assets The addresses of the assets\\r\\n   * @param sources The address of the source of each asset\\r\\n   */\\r\\n  constructor(\\r\\n    address[] memory assets,\\r\\n    address[] memory sources\\r\\n  ) {\\r\\n    _setAssetsSources(assets, sources);\\r\\n  }\\r\\n\\r\\n  function setAssetSources(\\r\\n    address[] calldata assets,\\r\\n    address[] calldata sources\\r\\n  ) external override onlyOwner {\\r\\n    _setAssetsSources(assets, sources);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Internal function to set the sources for each asset\\r\\n   * @param assets The addresses of the assets\\r\\n   * @param sources The address of the source of each asset\\r\\n   */\\r\\n  function _setAssetsSources(address[] memory assets, address[] memory sources) internal {\\r\\n    require(assets.length == sources.length, \\\"Array parameters should be equal\\\");\\r\\n    for (uint256 i = 0; i < assets.length; i++) {\\r\\n      assetsSources[assets[i]] = IAggregator(sources[i]);\\r\\n      emit AssetSourceUpdated(assets[i], sources[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getAssetPrice(address asset) public view override returns (uint256) {\\r\\n    IAggregator source = assetsSources[asset];\\r\\n\\r\\n    if (address(source) == address(0)) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    (\\r\\n      /* uint80 roundID */,\\r\\n      int price,\\r\\n      /*uint startedAt*/,\\r\\n      /*uint timeStamp*/,\\r\\n      /*uint80 answeredInRound*/\\r\\n    ) = source.latestRoundData();\\r\\n\\r\\n    return uint256(price);\\r\\n  }\\r\\n\\r\\n  function getAssetsPrices(\\r\\n    address[] calldata assets\\r\\n  ) external view override returns (uint256[] memory) {\\r\\n    uint256[] memory prices = new uint256[](assets.length);\\r\\n    for (uint256 i = 0; i < assets.length; i++) {\\r\\n      prices[i] = getAssetPrice(assets[i]);\\r\\n    }\\r\\n    return prices;\\r\\n  }\\r\\n\\r\\n  function getSourceOfAsset(address asset) external view override returns (address) {\\r\\n    return address(assetsSources[asset]);\\r\\n  }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"sources\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"AssetSourceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAssetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"getAssetsPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getSourceOfAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"sources\",\"type\":\"address[]\"}],\"name\":\"setAssetSources\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Oracle", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d0000000000000000000000001af3f329e8be154074d8769d1ffa4ee058b1dbc300000000000000000000000040af3827f39d0eacbf4a168f8d4ee67c121d11c9000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000d17479997f34dd9156deef8f95a52d81d265be9c000000000000000000000000f8a0bf9cf54bb92f17374d9e9a321e6a111a51bd000000000000000000000000fb6115445bff7b52feb98650c87f44907e58f802000000000000000000000000bf5140a22578168fd562dccf235e5d43a02ce9b1000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000567f2323251f0aab15c8dfb1967e4e8a7d42aee000000000000000000000000b97ad0e74fa7d920791e90258a6e2085088b432000000000000000000000000051597f405303c4377e36123cbc172b13269ea163000000000000000000000000132d3c0b1d2cea0bc552588063bdbb210fdeecfa000000000000000000000000a3334a9762090e827413a7495afece76f41dfc06000000000000000000000000cbb98864ef56e9042e7d2efef76141f15731b82f00000000000000000000000051c78c299c42b058bf11d47fbb74ac437c6a0c8c000000000000000000000000ca236e327f629f9fc2c30a4e95775ebf0b89fac8000000000000000000000000a8357bf572460fc40f4b0acacbb2a6a61c89f475000000000000000000000000b57f259e7c24e56a1da00f66b55a5640d9f9e7e4", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}