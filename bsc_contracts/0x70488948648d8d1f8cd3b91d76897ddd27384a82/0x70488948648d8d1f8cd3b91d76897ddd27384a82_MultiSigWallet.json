{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\ncontract MultiSigWallet {\r\n    event SubmitTransaction(\r\n        address indexed owner,\r\n        uint indexed txIndex,\r\n        address indexed to,\r\n        uint value,\r\n        bytes data\r\n    );\r\n    event ConfirmTransaction(address indexed owner, uint indexed txIndex);\r\n    event RevokeConfirmation(address indexed owner, uint indexed txIndex);\r\n    event ExecuteTransaction(address indexed owner, uint indexed txIndex);\r\n    event UpdateOwnerByMajority(address newOwner);\r\n\r\n    address[] public owners;\r\n    mapping(address => bool) public isOwner;\r\n    uint public numConfirmationsRequired;\r\n\r\n    struct Transaction {\r\n        address to;\r\n        uint value;\r\n        bytes data;\r\n        bool executed;\r\n        uint numConfirmations;\r\n    }\r\n\r\n    // mapping from tx index => owner => bool\r\n    mapping(uint => mapping(address => bool)) public isConfirmed;\r\n\r\n    Transaction[] public transactions;\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner[msg.sender], \"not owner\");\r\n        _;\r\n    }\r\n\r\n    modifier txExists(uint _txIndex) {\r\n        require(_txIndex < transactions.length, \"tx does not exist\");\r\n        _;\r\n    }\r\n\r\n    modifier notExecuted(uint _txIndex) {\r\n        require(!transactions[_txIndex].executed, \"tx already executed\");\r\n        _;\r\n    }\r\n\r\n    modifier notConfirmed(uint _txIndex) {\r\n        require(!isConfirmed[_txIndex][msg.sender], \"tx already confirmed\");\r\n        _;\r\n    }\r\n\r\n    constructor(address[] memory _owners, uint _numConfirmationsRequired) {\r\n        require(_owners.length > 0, \"owners required\");\r\n        require(\r\n            _numConfirmationsRequired > 0 &&\r\n                _numConfirmationsRequired <= _owners.length,\r\n            \"invalid number of required confirmations\"\r\n        );\r\n\r\n        for (uint i = 0; i < _owners.length; i++) {\r\n            address owner = _owners[i];\r\n\r\n            require(owner != address(0), \"invalid owner\");\r\n            require(!isOwner[owner], \"owner not unique\");\r\n\r\n            isOwner[owner] = true;\r\n            owners.push(owner);\r\n        }\r\n\r\n        numConfirmationsRequired = _numConfirmationsRequired;\r\n    }\r\n\r\n    function submitTransaction(\r\n        address _to,\r\n        uint _value,\r\n        bytes memory _data\r\n    ) public onlyOwner {\r\n        uint txIndex = transactions.length;\r\n\r\n        transactions.push(\r\n            Transaction({\r\n                to: _to,\r\n                value: _value,\r\n                data: _data,\r\n                executed: false,\r\n                numConfirmations: 0\r\n            })\r\n        );\r\n\r\n        emit SubmitTransaction(msg.sender, txIndex, _to, _value, _data);\r\n    }\r\n\r\n    function confirmTransaction(\r\n        uint _txIndex\r\n    ) public onlyOwner txExists(_txIndex) notExecuted(_txIndex) notConfirmed(_txIndex) {\r\n        Transaction storage transaction = transactions[_txIndex];\r\n        transaction.numConfirmations += 1;\r\n        isConfirmed[_txIndex][msg.sender] = true;\r\n\r\n        emit ConfirmTransaction(msg.sender, _txIndex);\r\n    }\r\n\r\n    function executeTransaction(\r\n        uint _txIndex\r\n    ) public onlyOwner txExists(_txIndex) notExecuted(_txIndex) {\r\n        Transaction storage transaction = transactions[_txIndex];\r\n\r\n        require(\r\n            transaction.numConfirmations >= numConfirmationsRequired,\r\n            \"cannot execute tx\"\r\n        );\r\n\r\n        transaction.executed = true;\r\n\r\n        (bool success, ) = transaction.to.call{value: transaction.value}(\r\n            transaction.data\r\n        );\r\n        require(success, \"tx failed\");\r\n\r\n        emit ExecuteTransaction(msg.sender, _txIndex);\r\n    }\r\n\r\n    function revokeConfirmation(\r\n        uint _txIndex\r\n    ) public onlyOwner txExists(_txIndex) notExecuted(_txIndex) {\r\n        Transaction storage transaction = transactions[_txIndex];\r\n\r\n        require(isConfirmed[_txIndex][msg.sender], \"tx not confirmed\");\r\n\r\n        transaction.numConfirmations -= 1;\r\n        isConfirmed[_txIndex][msg.sender] = false;\r\n\r\n        emit RevokeConfirmation(msg.sender, _txIndex);\r\n    }\r\n\r\n    function getOwners() public view returns (address[] memory) {\r\n        return owners;\r\n    }\r\n\r\n    function getTransactionCount() public view returns (uint) {\r\n        return transactions.length;\r\n    }\r\n\r\n    function getTransaction(\r\n        uint _txIndex\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            address to,\r\n            uint value,\r\n            bytes memory data,\r\n            bool executed,\r\n            uint numConfirmations\r\n        )\r\n    {\r\n        Transaction storage transaction = transactions[_txIndex];\r\n\r\n        return (\r\n            transaction.to,\r\n            transaction.value,\r\n            transaction.data,\r\n            transaction.executed,\r\n            transaction.numConfirmations\r\n        );\r\n    }\r\n\r\n    function updateOwnerByMajority(uint _txIndex, uint _indexOfOwnerToBeRemove , address _newOwner) public onlyOwner txExists(_txIndex) notExecuted(_txIndex) {\r\n        require(!isOwner[_newOwner], \"This address is already owner\");\r\n\r\n        Transaction storage transaction = transactions[_txIndex];\r\n\r\n        require(\r\n            transaction.numConfirmations >= numConfirmationsRequired,\r\n            \"cannot execute tx\"\r\n        );\r\n\r\n        transaction.executed = true;\r\n        isOwner[owners[_indexOfOwnerToBeRemove]] = false;\r\n\r\n        //update new owner\r\n        owners[_indexOfOwnerToBeRemove] = _newOwner;\r\n        isOwner[_newOwner] = true;\r\n        emit UpdateOwnerByMajority(_newOwner);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_numConfirmationsRequired\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"}],\"name\":\"ConfirmTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"}],\"name\":\"ExecuteTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"}],\"name\":\"RevokeConfirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"SubmitTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"UpdateOwnerByMajority\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"}],\"name\":\"getTransaction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numConfirmations\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numConfirmationsRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"submitTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numConfirmations\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_indexOfOwnerToBeRemove\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"updateOwnerByMajority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MultiSigWallet", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000003000000000000000000000000cf931e5656d3d40eb64be94d182e63612b3ef10c000000000000000000000000e53a8cc515205fbf03d657ed582e9c8ddd8b6d3e000000000000000000000000e7f344e26cfaa51737d3a9540ac508f903a75031", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d6cab1c9f44835b5028edbbf2d1e391e7c2407e59c0398612caf1f7b182cebd1"}