{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"EGGZ.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\"; \\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\n\\ninterface IPancakePair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\ncontract EhhTest is Ownable, ReentrancyGuard \\n{\\n    modifier CallVerification {\\n        require(_msgSender() == tx.origin, \\\"Function can only be called by a user account\\\");\\n        _;\\n    }\\n\\n    address internal E_Owner = 0x1d5cbF38Da91D435217AbA6a3FC9c980182Ba2b6;\\n    address internal E_Market = 0x1d5cbF38Da91D435217AbA6a3FC9c980182Ba2b6;\\n\\n    uint256 internal MIN_DEPOSIT = 5000000000000000; // 0.05 BNB !!! TEST MODE 50000000000000000\\n    uint256 public MAX_DEPOSIT = 5000000000000000000000; // 5000 BNB\\n    uint256 internal MIN_WITHDRAWAL = 1000000000000000; // 0.01 BNB !!! TEST MODE 10000000000000000\\n\\n    uint256[5] internal PERCENT = [270, 300, 330, 360, 400];\\n    uint256[5] internal AFFILIATE_PERCENTS_1 = [70, 10, 7, 5, 3];\\n    uint256[5] internal AFFILIATE_PERCENTS_2 = [100, 20, 10, 10, 5];\\n    uint256[5] internal AFFILIATE_PERCENTS_3 = [130, 30, 20, 20, 10];\\n\\n    uint256 OwnerPerc = 5;\\n    uint256 MarketPerc = 2;\\n\\n    uint256 public START = block.timestamp; // TIMESTAMP\\n    uint256 public totalInvested;\\n    uint256 public totalInvestors;\\n    uint256 internal daysWork;\\n\\n    uint8 internal _decimals = 18;\\n    address public PairAddress = address(0);\\n    address internal BNBAddress = 0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE;\\n    AggregatorV3Interface internal BNBprice;\\n    IERC20 internal Token;\\n\\n    struct User \\n    {\\n        uint256 money;\\n        uint256 token;\\n        uint256 token_hold;\\n        uint256 deposit;\\n        uint256 earned;\\n        uint256 withdrawn;\\n        uint256 timestamp;\\n        uint256 timestamp_token;\\n        uint256 percentage;\\n        address partner;\\n    }\\n\\n    struct UserStats\\n    {\\n        uint256 refsTotal;\\n        uint256 refs1level;\\n        uint256 turnover;\\n        uint256 total_turnover;\\n        uint256 refearned;\\n        uint256 refearned_total;\\n        uint8 affiliate;\\n    }\\n\\n    struct Assets \\n    {\\n        address addr;\\n        uint8 decimals;\\n    }\\n\\n    mapping(address => User) public user;\\n    mapping(address => UserStats) public user_stats;\\n    mapping(uint => Assets) public assets;\\n\\n    constructor() {\\n        BNBprice = AggregatorV3Interface(BNBAddress);\\n\\n        assets[0].addr = 0x7D7c3bc6b5D7F694E8A4Be8362a1e3F507889774;\\n        assets[0].decimals = 18;\\n\\n        Token = IERC20(assets[0].addr);\\n    }\\n\\n    receive() external payable onlyOwner {}\\n\\n    function makeDeposit(address partner) external payable nonReentrant CallVerification {\\n        uint256 amount = msg.value;\\n        require(amount >= MIN_DEPOSIT, \\\"Min deposit limit\\\");\\n\\n        if(user[_msgSender()].percentage == 0) {\\n            require(partner != _msgSender(), \\\"Cannot set your own address as partner\\\");\\n            address ref = user[partner].deposit == 0 ? address(0) : partner;\\n            user[_msgSender()].percentage = PERCENT[0];\\n            user[_msgSender()].partner = ref;\\n            user_stats[ref].refs1level++;\\n            user_stats[ref].refsTotal++;\\n            totalInvestors += 1;\\n\\n            address setPartner = user[ref].partner;\\n\\n            if(setPartner != address(0))\\n            {\\n                for (uint8 i; i < 4; i++) \\n                {\\n                    user_stats[setPartner].refsTotal++;\\n                    setPartner = user[setPartner].partner;\\n                    if(setPartner == address(0)) break;\\n                }\\n            }\\n        }\\n        \\n        user[_msgSender()].deposit += amount;\\n        user[_msgSender()].timestamp = block.timestamp;\\n        _referralAccrual(user[_msgSender()].partner, amount);\\n        _updatePercent(_msgSender());\\n\\n        // Comission\\n        uint256 fee1 = (amount * OwnerPerc) / 100;\\n        uint256 fee2 = (amount * MarketPerc) / 100;\\n        payable(E_Owner).transfer(fee1);\\n        payable(E_Market).transfer(fee2);\\n        payable(_msgSender()).transfer(amount - fee1 - fee2);\\n    }\\n\\n    function makeWithdrawal(uint256 amount) external nonReentrant CallVerification {\\n        require(amount >= MIN_WITHDRAWAL, \\\"Min withdrawal limit\\\");\\n        require(amount <= user[_msgSender()].money, \\\"Insufficient funds\\\");\\n        user[_msgSender()].money -= amount;\\n        user[_msgSender()].withdrawn += amount;\\n        payable(_msgSender()).transfer(amount);\\n    }\\n\\n    function freezeToken(uint256 amount) external nonReentrant CallVerification {\\n        require(amount >= 250*10**18, \\\"Min freeze limit\\\");\\n        user[_msgSender()].token += amount;\\n        Token = IERC20(assets[0].addr);\\n        Token.transferFrom(_msgSender(), address(this), amount);\\n        _updatePercent(_msgSender());\\n    }\\n\\n    function unfreezeToken(uint256 amount) external nonReentrant CallVerification {\\n        require(amount >= 250*10**18, \\\"Min unfreeze limit\\\");\\n\\n        if(pendingFarm(_msgSender()) > 0) {\\n            user[_msgSender()].token += pendingFarm(_msgSender());\\n            user[_msgSender()].timestamp_token = block.timestamp;\\n        }\\n\\n        require(amount <= user[_msgSender()].token, \\\"Insufficient funds\\\");\\n        user[_msgSender()].token -= amount;\\n        \\n        Token = IERC20(assets[0].addr);\\n        Token.transfer(_msgSender(), amount);\\n        _updatePercent(_msgSender());\\n    }\\n\\n    function claim() external nonReentrant CallVerification {\\n        require(user[_msgSender()].deposit > 0, \\\"Insufficient deposit\\\");\\n        _makeAccrue(_msgSender());\\n    }\\n\\n    function pendingFarm(address account) public view returns(uint256) {\\n        uint256 DiffUnix = (block.timestamp - user[account].timestamp_token) / (4 * 3600);\\n        uint256 IncomePeriod = 90 * 10000 / 4; // 0.09 per day / 0.015 per 4h\\n        uint256 Reward = 0;\\n\\n        if(DiffUnix > 0 && user[account].token > 0) {\\n            Reward = (user[account].token * IncomePeriod) * DiffUnix / 1000000000;\\n        }\\n\\n        return Reward;\\n    }\\n\\n    function pendingReward(address account) public view returns(uint256) {\\n        uint256 DiffUnix = (block.timestamp - user[account].timestamp) / (4 * 3600);\\n        DiffUnix = (DiffUnix > 6) ? 6 : DiffUnix;\\n        uint256 IncomePeriod = user[account].percentage * 10000 / 4;\\n        uint256 Reward = 0;\\n\\n        if(DiffUnix > 0) {\\n            Reward = (user[account].deposit * IncomePeriod) * DiffUnix / 100000000;\\n        }\\n\\n        return Reward;\\n    }\\n\\n    function _makeAccrue(address account) internal {\\n        uint256 pending = pendingReward(account);\\n\\n        if(pending > 0)\\n        {\\n            user[account].timestamp = block.timestamp;\\n            user[account].money += pending;\\n            user[account].earned += pending;\\n        }\\n\\n        uint256 newCounter = (block.timestamp >= START) ? (block.timestamp - START) / 86400 : 0;\\n        if(newCounter > daysWork)\\n            daysWork++;\\n    }\\n\\n    function _referralAccrual(address account, uint256 value) internal {\\n        if (value > 0 && account != address(0)) \\n        {\\n            for (uint8 i; i < 5; i++) \\n            {\\n                uint256 topay = AFFILIATE_PERCENTS_1[i];\\n\\n                if(user_stats[account].affiliate == 0)\\n                    topay = AFFILIATE_PERCENTS_2[i];\\n                else if(user_stats[account].affiliate == 0)\\n                    topay = AFFILIATE_PERCENTS_3[i];\\n\\n                uint256 refacc = ((value * topay) / 1000);\\n\\n                payable(account).transfer(refacc);\\n\\n                user_stats[account].refearned_total += refacc;\\n                user_stats[account].total_turnover += value;\\n\\n                if(i == 0) {\\n                    user_stats[account].refearned += refacc;\\n                    user_stats[account].turnover += value;\\n                    _updateAffiliate(account, user_stats[account].turnover);\\n                }\\n                \\n                account = user[account].partner;\\n                if(account == address(0)) break;\\n            }\\n        }\\n    }\\n\\n    function _updatePercent(address account) internal {\\n        uint256 newPerc = PERCENT[0];\\n        uint256 amount = user[account].deposit;\\n\\n        if(amount >= 50000000000000000 && amount < 4000000000000000000) {\\n            newPerc = PERCENT[0];\\n        } else if(amount >= 4000000000000000000 && amount < 10000000000000000000) {\\n            newPerc = PERCENT[1];\\n        } else if(amount >= 10000000000000000000 && amount < 20000000000000000000) {\\n            newPerc = PERCENT[2];\\n        } else if(amount >= 20000000000000000000 && amount < 40000000000000000000) {\\n            newPerc = PERCENT[3];\\n        } else if(amount >= 40000000000000000000) {\\n            newPerc = PERCENT[4];\\n        }\\n\\n        uint256 farmToken = user[account].token / 250;\\n        if(farmToken > 0) newPerc += (5 * farmToken);\\n            \\n        if(user[account].percentage != newPerc)\\n            user[account].percentage = newPerc;\\n    }\\n\\n    function _updateAffiliate(address account, uint256 turnover) internal {\\n        uint8 affiliate = 0;\\n\\n        if(turnover >= 0 && turnover < 20000000000000000000) affiliate = 0;\\n        else if(turnover >= 20000000000000000000 && turnover < 60000000000000000000) affiliate = 1;\\n        else if(turnover >= 60000000000000000000) affiliate = 2;\\n\\n        if(user_stats[account].affiliate != affiliate) {\\n            user_stats[account].affiliate = affiliate;\\n        }\\n    }\\n    \\n    function _getLatestPrice() internal view returns (uint) { \\n        (,int price,,uint timeStamp,)= BNBprice.latestRoundData();\\n        require(timeStamp > 0, \\\"Round not complete\\\");\\n        return (uint)(price * 10000000000); \\n    }\\n\\n    function _getTokenPrice(uint256 decimals) public view returns(uint) {\\n        IPancakePair pair = IPancakePair(PairAddress);\\n        (uint Res0, uint Res1,) = pair.getReserves();\\n        uint BNB_Price = _getLatestPrice();\\n        uint div1 = (Res0 > Res1) ? Res1 : Res0;\\n        uint div2 = (Res0 > Res1) ? Res0 : Res1;\\n        return((div1*(10**decimals) / div2) * BNB_Price / 10**decimals);\\n    }\\n\\n    function setPair(address pair) external onlyOwner {\\n        PairAddress = pair;\\n    }\\n\\n    function changeList(uint256 index, address addr, uint8 decimals) external onlyOwner {\\n        assets[index].addr = addr;\\n        assets[index].decimals = decimals;\\n    }\\n}\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_DEPOSIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"START\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"_getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"changeList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"freezeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"makeDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"makeWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pendingFarm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvestors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unfreezeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"money\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token_hold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp_token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user_stats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"refsTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refs1level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"turnover\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_turnover\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refearned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refearned_total\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"affiliate\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EhhTest", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5de9dee28476850e504ea7c4516aa36dcd845bd0eac98487ad824596260592e1"}