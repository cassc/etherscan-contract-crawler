{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-09-29\r\n*/\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity >=0.8.2;\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n}\r\n\r\ninterface CrosschainERC20 {\r\n    function mint(address to, uint256 amount) external returns (bool);\r\n    function burn(address from, uint256 amount) external returns (bool);\r\n    function changeVault(address newVault) external returns (bool);\r\n    function depositVault(uint amount, address to) external returns (uint);\r\n    function withdrawVault(address from, uint amount, address to) external returns (uint);\r\n    function underlying() external view returns (address);\r\n    function deposit(uint amount, address to) external returns (uint);\r\n    function withdraw(uint amount, address to) external returns (uint);\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function permit(address target, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function transferWithPermit(address target, address to, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract CrosschainRouter {\r\n\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n    address private _mpc;\r\n    mapping(bytes32 =>uint256) private transactionHistory;\r\n\r\n    modifier onlyMPC() {\r\n        require(msg.sender == mpc(), \"SwapRouter: FORBIDDEN\");\r\n        _;\r\n    }\r\n\r\n    event LogChangeMPC(address indexed oldMPC, address indexed newMPC,uint chainID);\r\n    event LogSwapIn(bytes32 indexed txhash, address indexed token, address indexed to, uint amount, uint fromChainID, uint toChainID,uint fee);\r\n    event LogSwapOut(address indexed token, address indexed from, address indexed to, uint amount, uint fromChainID, uint toChainID);\r\n\r\n    function initialize(address __mpc) external{\r\n        require(mpc()==address(0),\"already initialized\"); \r\n        _mpc = __mpc;\r\n    }\r\n\r\n    function _crosschainSwapOut(address from, address token, address to, uint amount, uint toChainID) internal {\r\n        CrosschainERC20(token).burn(from, amount);\r\n        emit LogSwapOut(token, from, to, amount, cID(), toChainID);\r\n    }\r\n\r\n    // Swaps `amount` `token` from this chain to `toChainID` chain with recipient `to`\r\n    function SwapOut(address token, address to, uint amount, uint toChainID) external {\r\n        _crosschainSwapOut(msg.sender, token, to, amount, toChainID);\r\n    }\r\n\r\n    // Swaps `amount` `token` from this chain to `toChainID` chain with recipient `to` by minting with `underlying`\r\n    function SwapOutUnderlying(address token, address to, uint amount, uint toChainID) external {\r\n        IERC20(CrosschainERC20(token).underlying()).safeTransferFrom(msg.sender, token, amount);\r\n        CrosschainERC20(token).depositVault(amount, msg.sender);\r\n        _crosschainSwapOut(msg.sender, token, to, amount, toChainID);\r\n    }\r\n\r\n\r\n    function SwapOutUnderlyingWithPermit(\r\n        address from,\r\n        address token,\r\n        address to,\r\n        uint amount,\r\n        uint deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        uint toChainID\r\n    ) external {\r\n        address _underlying = CrosschainERC20(token).underlying();\r\n        IERC20(_underlying).permit(from, address(this), amount, deadline, v, r, s);\r\n        IERC20(_underlying).safeTransferFrom(from, token, amount);\r\n        CrosschainERC20(token).depositVault(amount, from);\r\n        _crosschainSwapOut(from, token, to, amount, toChainID);\r\n    }\r\n\r\n    function SwapOutUnderlyingWithTransferPermit(\r\n        address from,\r\n        address token,\r\n        address to,\r\n        uint amount,\r\n        uint deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        uint toChainID\r\n    ) external {\r\n        IERC20(CrosschainERC20(token).underlying()).transferWithPermit(from, token, amount, deadline, v, r, s);\r\n        CrosschainERC20(token).depositVault(amount, from);\r\n        _crosschainSwapOut(from, token, to, amount, toChainID);\r\n    }\r\n\r\n\r\n    function _crosschainSwapIn(bytes32 txs, address token, address to, uint amount, uint fromChainID, uint fee) internal {\r\n        require(!isTransactionExist(txs),\"Router:: Transaction already processed!\");\r\n        CrosschainERC20(token).mint(to, amount-fee);\r\n        CrosschainERC20(token).mint(mpc(), fee);\r\n        transactionHistory[txs] = fromChainID;\r\n        emit LogSwapIn(txs, token, to, amount, fromChainID, cID(),fee);\r\n    }\r\n\r\n    function isTransactionExist(bytes32 txs) public view returns (bool) {\r\n        return transactionHistory[txs]!=0;\r\n    }\r\n\r\n    // swaps `amount` `token` in `fromChainID` to `to` on this chainID\r\n    // triggered by `SwapOut`\r\n    function SwapIn(bytes32 txs, address token, address to, uint amount, uint fromChainID,uint fee) external onlyMPC {\r\n        _crosschainSwapIn(txs, token, to, amount, fromChainID, fee);\r\n    }\r\n\r\n    // swaps `amount` `token` in `fromChainID` to `to` on this chainID with `to` receiving `underlying`\r\n    function SwapInUnderlying(bytes32 txs, address token, address to, uint amount, uint fromChainID,uint fee) external onlyMPC {\r\n        _crosschainSwapIn(txs, token, to, amount, fromChainID, fee);\r\n        CrosschainERC20(token).withdrawVault(to, amount-fee, to);\r\n        CrosschainERC20(token).withdrawVault(mpc(), fee, mpc());\r\n    }\r\n\r\n    // swaps `amount` `token` in `fromChainID` to `to` on this chainID with `to` receiving `underlying` if possible\r\n    function SwapInAuto(bytes32 txs, address token, address to, uint amount, uint fromChainID,uint fee) external onlyMPC {\r\n        _crosschainSwapIn(txs, token, to, amount, fromChainID, fee);\r\n        CrosschainERC20 _crosschainToken = CrosschainERC20(token);\r\n        address _underlying = _crosschainToken.underlying();\r\n        if (_underlying != address(0) && IERC20(_underlying).balanceOf(token) >= amount) {\r\n            _crosschainToken.withdrawVault(to, amount-fee, to);\r\n            _crosschainToken.withdrawVault(mpc(), fee, mpc());\r\n        }\r\n    }\r\n\r\n    function changeMPC(address newMPC) public onlyMPC returns (bool) {\r\n        require(newMPC != address(0), \"SwapRouter: address(0x0)\");\r\n        address _oldMPC = mpc();\r\n        _mpc = newMPC;\r\n       \r\n        emit LogChangeMPC(_oldMPC, _mpc,  cID());\r\n        return true;\r\n    }\r\n\r\n    function changeVault(address token, address newVault) public onlyMPC returns (bool) {\r\n        require(newVault != address(0), \"SwapRouter: address(0x0)\");\r\n        return CrosschainERC20(token).changeVault(newVault);\r\n    }\r\n\r\n    function mpc() public view returns (address) {\r\n        return _mpc;\r\n    }\r\n\r\n    function cID() public view returns (uint id) {\r\n        assembly {id := chainid()}\r\n    }\r\n\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMPC\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMPC\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"LogChangeMPC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txhash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"LogSwapIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"LogSwapOut\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txs\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SwapIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txs\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SwapInAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txs\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SwapInUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"SwapOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"SwapOutUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"SwapOutUnderlyingWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"SwapOutUnderlyingWithTransferPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMPC\",\"type\":\"address\"}],\"name\":\"changeMPC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newVault\",\"type\":\"address\"}],\"name\":\"changeVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__mpc\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txs\",\"type\":\"bytes32\"}],\"name\":\"isTransactionExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mpc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CrosschainRouter", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dbbcf89a890763416d634b8cc1892ce0f10183aecd464916acf071bdc27c6133"}