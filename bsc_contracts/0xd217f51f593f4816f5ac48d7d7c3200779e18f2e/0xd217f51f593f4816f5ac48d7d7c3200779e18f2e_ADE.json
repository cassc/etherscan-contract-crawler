{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity >=0.8.17 <= 0.9.0;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\ninterface IAddLP {\r\n    function addLiquidity() external returns(bool);\r\n}\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n}\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    constructor(){\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnship(address newowner) public onlyOwner returns (bool) {\r\n        owner = newowner;\r\n        return true;\r\n    }\r\n}\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\nabstract contract Context{\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal pure virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\ncontract ADE is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"ade\";\r\n    string public symbol = \"ADE\";\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply = 69000 * 1e18;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    uint256 public plantBalance; \r\n    address public interestAddr = address(0x0);\r\n    address public purseB = address(0x0);\r\n    address public addLpAddr = address(0x0);\r\n    address public bonusPool = address(0x0);\r\n\r\n    struct PlantItem {\r\n        uint256 amount;\r\n        uint256 actualAmount;\r\n        uint256 inputtime;\r\n    }\r\n    mapping(address => PlantItem[] ) private plantsList;\r\n    mapping(address => uint256) private plantsAddrIndex;\r\n    address[] private plantsAddr;\r\n    mapping(address => uint256) private usersIndex;\r\n    address[] private users;\r\n    uint256 private daysPeriod = 7 days;\r\n    uint256 private latestPeriod = 12 days;\r\n    uint256 private startTime;\r\n    uint256 private everAmount = 1900 * 1e18;\r\n    bool public plantStatus = false;\r\n    mapping(uint => uint) private everDayAmount;\r\n    uint private everDayLimitAmount = 2715 * 1e18;\r\n\r\n    mapping(address => mapping(address => bool) ) private transEach;\r\n    mapping(address => address) public inviter;\r\n    mapping(address => address[]) private binders;\r\n    mapping(address => address[]) private parents;\r\n\r\n    mapping(address => bool) private freeAccount;\r\n    mapping(address => bool) private swapPairList;\r\n    mapping(address => uint256) private swapBlock;\r\n    uint256 public lpDividendBalance;\r\n    address[] public holdingLpAddr;\r\n    mapping(address => bool) private holdingLpStatus;\r\n    bool public lpDividendStatus = false;\r\n    bool public addLpStatus = false;\r\n    uint256 private lpDividendCondition = 10 * 1e18;\r\n    uint256 public addLpCondition = 10 * 1e18;\r\n    mapping(address => bool) private excludeLpDividend;\r\n    mapping(address => bool) private ablePlantList;\r\n    bool private addlpflagStatus;\r\n    bool public enableTransfer = false;\r\n    bool public enableSwapTransfer = false;\r\n    mapping(address => bool) private innerAccount;\r\n    mapping(address => bool) private swapWhiteList;\r\n\r\n    address private constant PancakeRouter = address(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    ISwapRouter private _swapRouter = ISwapRouter(PancakeRouter);\r\n    address private constant USDT = address(0x55d398326f99059fF775485246999027B3197955);\r\n    address private ADEF = address(0x0);\r\n    address private usdtPair;\r\n    uint256 public period;\r\n    mapping(address => bool) private isPlant;\r\n\r\n    uint256 private createtime = 1704902400;\r\n    uint256 private timeStep = 1 days;\r\n\r\n    uint256 private nodeTimeStep = 10 days;\r\n    mapping(address => mapping(uint => uint) ) public everTenDAysAmount;\r\n\r\n\r\n    modifier onlyAblePlant() {\r\n        require(ablePlantList[msg.sender] , \"No permission to call\");\r\n        _;\r\n    }\r\n    bool private inSwap;\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    constructor() {\r\n        balanceOf[msg.sender] = totalSupply;\r\n        emit Transfer(address(0), msg.sender, totalSupply);\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(_swapRouter.factory());\r\n        usdtPair = swapFactory.createPair(address(this), USDT);\r\n        swapPairList[usdtPair] = true;\r\n\r\n        allowance[address(this)][address(_swapRouter)] = type(uint256).max;\r\n        IERC20(USDT).approve(address(_swapRouter), type(uint256).max);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) external  returns (bool) {\r\n        require(_to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(_value <= balanceOf[msg.sender], \"ERC20: transfer amount exceeds balance\");\r\n\r\n        _transfer(msg.sender,_to,_value);\r\n        \r\n        return true;\r\n    }\r\n    function approve(address _spender, uint256 _value) external returns (bool) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from,address _to,uint256 _value) external returns (bool) {\r\n        require(_from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(_to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(_value <= balanceOf[_from], \"ERC20: transfer amount exceeds balance\");\r\n        require(_value <= allowance[_from][msg.sender], \"ERC20: transfer amount exceeds allowance\");\r\n\r\n        _transfer(_from,_to,_value);\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        \r\n        return true;\r\n    }\r\n    function _transfer(address _from,address _to,uint256 _value) private returns (bool) {\r\n        if (freeAccount[_from]) {\r\n            require(enableTransfer || innerAccount[_from], \"Transaction closed\");\r\n            _freeTransfer(_from, _to, _value);\r\n        } else if (swapPairList[_from] || swapPairList[_to]) {\r\n            if (swapPairList[_from]) { \r\n                require(enableTransfer || innerAccount[_to], \"Transaction closed\");\r\n                require(enableSwapTransfer || swapWhiteList[_to], \"Swap Transaction closed\");\r\n                require(block.number - swapBlock[_to] > 3, \"swap fast!\"); \r\n\r\n                swapBlock[_to] = block.number;\r\n            } else if (swapPairList[_to]) {\r\n                require(enableTransfer || innerAccount[_from], \"Transaction closed\");\r\n                require(enableSwapTransfer || swapWhiteList[_from], \"Swap Transaction closed\");\r\n                require(block.number - swapBlock[_from] > 3, \"swap fast!\"); \r\n\r\n                swapBlock[_from] = block.number;\r\n                if(!holdingLpStatus[_from] && _from != address(0)) {\r\n                    holdingLpAddr.push(_from);\r\n                    holdingLpStatus[_from] = true;\r\n                }\r\n            }\r\n            _feeTransfer(_from, _to, _value);\r\n\r\n            if(lpDividendStatus && _from != address(this)) {\r\n                lpDividend();\r\n            }\r\n        } else {\r\n            require(enableTransfer || innerAccount[_from], \"Transaction closed\");\r\n            _freeTransfer(_from, _to, _value);\r\n\r\n        }\r\n        if(!swapPairList[_from] && !swapPairList[_to]) {\r\n            if(_to == address(this)) {\r\n                if(_from != interestAddr) {\r\n                    plantHandle(_from,_value,block.timestamp);\r\n                    if(!isPlant[_from]) {\r\n                        isPlant[_from] = true;\r\n                    }\r\n                }else{\r\n                    plantBalance = plantBalance.add(_value);\r\n                    period++;\r\n                }\r\n            }else{\r\n                transEach[_from][_to] = true;\r\n                _bindInvitor(_from,_to);\r\n\r\n                uint addLpBalance = balanceOf[addLpAddr];\r\n                if(addLpBalance >= addLpCondition.mul(5).div(10) && !inSwap && addLpAddr != address(0)) { \r\n                    _addLiquidity(); \r\n                }\r\n            }\r\n            \r\n        }\r\n        return true;\r\n    }\r\n    function _freeTransfer(address sender, address recipient, uint256 amount) private {\r\n        balanceOf[sender] = balanceOf[sender].sub(amount);\r\n        balanceOf[recipient] = balanceOf[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _feeTransfer(address sender, address recipient, uint256 amount) private {\r\n        uint256 lp_share_fee = amount.mul(2).div(100); \r\n        uint256 destroy_fee = amount.div(100); \r\n        uint256 enter_lp_fee = amount.div(100); \r\n        uint256 plant_fee = amount.div(100); \r\n        uint256 purseB_fee;\r\n        if (swapPairList[recipient]) {\r\n            purseB_fee = amount.mul(4).div(100); \r\n        }\r\n\r\n        amount = amount.sub(lp_share_fee).sub(destroy_fee).sub(enter_lp_fee).sub(plant_fee).sub(purseB_fee);\r\n        _freeTransfer(sender, recipient, amount);\r\n\r\n        _freeTransfer(sender, address(this), lp_share_fee);\r\n        lpDividendBalance = lpDividendBalance.add(lp_share_fee);\r\n\r\n        _freeTransfer(sender, address(0), destroy_fee);\r\n        _freeTransfer(sender, addLpAddr, enter_lp_fee);\r\n        \r\n        _freeTransfer(sender, interestAddr, plant_fee);\r\n        \r\n        if(purseB_fee > 0) {\r\n            _freeTransfer(sender, purseB, purseB_fee);\r\n        }\r\n       \r\n    }\r\n    function _addLiquidity() private lockTheSwap {\r\n        if(addLpStatus) {\r\n            IAddLP(addLpAddr).addLiquidity();\r\n        }\r\n    }\r\n    \r\n    function lpDividend() private returns(bool) {\r\n        if(lpDividendBalance >= lpDividendCondition){\r\n            uint256 totalPair = IERC20(usdtPair).totalSupply();\r\n            if(totalPair > 0) {\r\n                for (uint256 i; i < holdingLpAddr.length; i++) {\r\n                    if(excludeLpDividend[holdingLpAddr[i]]) {\r\n                        continue ;\r\n                    }\r\n                    if(holdingLpAddr[i] == address(0)){\r\n                        holdingLpAddr[i]  = holdingLpAddr[holdingLpAddr.length - 1];\r\n                        holdingLpAddr.pop();\r\n                    }\r\n                    uint256 userLpBalance = IERC20(usdtPair).balanceOf(holdingLpAddr[i]);\r\n                    if(userLpBalance == 0) {\r\n                        delete holdingLpAddr[i];\r\n                        holdingLpStatus[holdingLpAddr[i]] = false;\r\n                        continue ;\r\n                    }\r\n                    uint256 amount = lpDividendBalance.mul(userLpBalance).div(totalPair);\r\n                    if (amount > 0 ) {\r\n                        _freeTransfer(address(this), holdingLpAddr[i], amount);\r\n                        lpDividendBalance = lpDividendBalance.sub(amount);\r\n                    }\r\n                    \r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    function _bindInvitor(address account, address invitor) private {\r\n        if (inviter[account] == address(0) && invitor != address(0) && invitor != account && transEach[account][invitor] && transEach[invitor][account]) {\r\n            if (binders[account].length == 0) {\r\n                uint256 sizeA;\r\n                assembly {sizeA := extcodesize(account)}\r\n                if (sizeA > 0) {\r\n                    return;\r\n                }\r\n                uint256 sizeB;\r\n                assembly {sizeB := extcodesize(invitor)}\r\n                if (sizeB > 0) {\r\n                    return;\r\n                }\r\n                inviter[account] = invitor; \r\n                binders[invitor].push(account);\r\n                parents[account].push(invitor);\r\n                _bindParents(account,invitor);\r\n               \r\n            }\r\n        }\r\n    }\r\n    function _bindParents(address account,address parent) internal returns(bool) {\r\n        for(uint i; i < parents[parent].length; i++) {\r\n            parents[account].push(parents[parent][i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function plant(address _from,uint _amount,uint _time) external onlyAblePlant returns(bool) {\r\n        require(_amount <= balanceOf[msg.sender], \"ERC20: transfer amount exceeds balance\");\r\n         _freeTransfer(msg.sender, address(this), _amount);\r\n        plantHandle(_from,_amount,_time);\r\n        if(!isPlant[_from]) {\r\n            isPlant[_from] = true;\r\n        }\r\n        return true;\r\n    }\r\n    function plantBonusPool(address _from,uint _amount) external onlyAblePlant returns(bool) {\r\n        require(!isPlant[_from], \"Planting failed\");\r\n        require(_amount <= balanceOf[bonusPool], \"Insufficient bonus pool balance\");\r\n         _freeTransfer(bonusPool, address(this), _amount);\r\n        plantHandle(_from,_amount,block.timestamp);\r\n        return true;\r\n    }\r\n    function plantHandle(address _from,uint _amount,uint _time) private returns(bool) {\r\n        require(plantStatus, \"Planting has ended\");\r\n        require(startTime <= block.timestamp, \"Not started yet\");\r\n        require(_amount > 0, \"amount is zero\");\r\n        require(_amount <= 1000 * 1e18, \"The planting quantity must be less than or equal to 1000\");\r\n        if(_time == 0) {\r\n            _time = block.timestamp;\r\n        }\r\n        require((_amount + everDayAmount[getDays(_time)]) <= everDayLimitAmount, \"Exceeding daily planting quantity\");\r\n        _plant(_from, _amount,_time);\r\n        everDayAmount[getDays(_time)] +=  _amount;\r\n        everTenDAysAmount[_from][getTenDays(_time)] += _amount;\r\n\r\n        for (uint i = 0; i < plantsList[_from].length; i++) {\r\n            if(plantsList[_from][i].amount == _amount) {\r\n                uint platTime = plantsList[_from][i].inputtime;\r\n                if ((block.timestamp - platTime) >= daysPeriod && (block.timestamp - platTime) < latestPeriod) {\r\n                    _redeem(_from,i);\r\n                }else if((block.timestamp - platTime) >= latestPeriod){\r\n                    _redeemOvertime(_from,i); \r\n                }\r\n                break ;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    function _plant(address _from,uint _amount,uint _time) private returns(bool) {\r\n        plantBalance = plantBalance.add(_amount);\r\n        if(_time == 0) {\r\n            _time = block.timestamp;\r\n        }\r\n        plantsList[_from].push(PlantItem(_amount,_amount,_time));\r\n        if(plantsAddrIndex[_from] == 0) {\r\n            if (0 == plantsAddr.length || plantsAddr[0] != _from) {\r\n                plantsAddrIndex[_from] = plantsAddr.length;\r\n                plantsAddr.push(_from);\r\n            }\r\n        }\r\n        if(usersIndex[_from] == 0) {\r\n            if (0 == users.length || users[0] != _from) {\r\n                usersIndex[_from] = users.length;\r\n                users.push(_from);\r\n            }\r\n        }\r\n        return true;\r\n\r\n    }\r\n    function _redeemOvertime(address _from,uint _key) private {\r\n        uint256 amount = plantsList[_from][_key].actualAmount;\r\n        _removePlantList(_from,_key);\r\n\r\n        uint256 backAmount = amount.mul(50).div(100);\r\n        \r\n        _freeTransfer(address(this),_from, backAmount);\r\n        plantBalance =  plantBalance.sub(backAmount);\r\n    }\r\n    function _removePlantList(address _from,uint _index) private {\r\n        require(_index < plantsList[_from].length, \"index out of bound\");\r\n        \r\n        for(uint i = _index; i < plantsList[_from].length - 1; i++) {\r\n            plantsList[_from][i] = plantsList[_from][i + 1];\r\n        }\r\n        plantsList[_from].pop();\r\n    }\r\n    function _redeemReborn(address _from) private {\r\n        for(uint j = 0; j < plantsAddr.length; j++) {\r\n            address addr = plantsAddr[j];\r\n            uint backAmount;\r\n            for(uint i; i < plantsList[addr].length; i++) {\r\n                if(plantStatus) {\r\n                    if(addr == _from && i == (plantsList[addr].length - 1)) {\r\n                        continue ;\r\n                    }\r\n                    plantsList[addr][i].actualAmount = plantsList[addr][i].actualAmount.mul(70).div(100);\r\n                }else{\r\n                    backAmount += plantsList[addr][i].actualAmount.mul(70).div(100);\r\n                }\r\n            }\r\n            if(backAmount > 0 && plantBalance >= backAmount) { \r\n                _freeTransfer(address(this),addr, backAmount);\r\n                plantBalance =  plantBalance.sub(backAmount);\r\n                delete plantsList[addr];\r\n                plantsAddrIndex[addr] = 0;\r\n            }\r\n        }\r\n        if(!plantStatus) {\r\n            plantsAddr = new address[](0);\r\n        }\r\n    }\r\n    function _redeem(address _from,uint _key) private returns (bool){\r\n        uint256 amount = plantsList[_from][_key].amount;\r\n        uint256 actualAmount = plantsList[_from][_key].actualAmount;\r\n\r\n        _removePlantList(_from,_key);\r\n\r\n        uint256 totalIncome;\r\n        uint income;\r\n        if(amount == actualAmount) {\r\n            totalIncome = amount.mul(11).div(100);\r\n            income = amount.mul(7).div(100);\r\n        }\r\n        if(plantBalance < actualAmount.add(totalIncome)) {\r\n            if(balanceOf[interestAddr] < everAmount) {\r\n                plantStatus = false;\r\n            }else{\r\n                income = actualAmount.mul(11).div(100);\r\n\r\n                uint transNum = actualAmount.add(actualAmount.mul(15).div(100)).sub(plantBalance).add(everAmount).sub(1) / everAmount;\r\n                for(uint i; i < transNum; i++) {\r\n                    if(balanceOf[interestAddr] < everAmount) {\r\n                        plantStatus = false;\r\n                        break ;\r\n                    }\r\n                    _transfer(interestAddr, address(this),everAmount);\r\n                }\r\n                \r\n            }\r\n            _redeemReborn(_from);\r\n        }\r\n        uint transferAmount;\r\n        if(plantBalance >= actualAmount.add(income)) {\r\n            transferAmount = actualAmount.add(income);\r\n        }else{\r\n            transferAmount = plantBalance;\r\n        }\r\n        _freeTransfer(address(this), _from , transferAmount);\r\n        plantBalance = plantBalance.sub(transferAmount);\r\n        if(plantStatus && income > 0) {\r\n            if(inviter[_from] != address(0) && plantBalance >= amount.mul(1).div(100)) {\r\n                _freeTransfer(address(this), inviter[_from] , amount.mul(1).div(100));\r\n                plantBalance =  plantBalance.sub(amount.mul(1).div(100));\r\n            }\r\n            if(bonusPool != address(0) && plantBalance >= amount.mul(15).div(1000)) {\r\n                _freeTransfer(address(this), bonusPool , amount.mul(15).div(1000));\r\n                plantBalance =  plantBalance.sub(amount.mul(15).div(1000));\r\n            }\r\n            if(purseB != address(0) && plantBalance >= amount.mul(15).div(1000)) {\r\n                _freeTransfer(address(this), purseB , amount.mul(15).div(1000));\r\n                plantBalance =  plantBalance.sub(amount.mul(15).div(1000));\r\n            }\r\n        }\r\n        return true;\r\n        \r\n    }\r\n    function getDays(uint _time) internal view returns (uint256) {\r\n        return (_time - createtime) / timeStep;\r\n    }\r\n    function getTenDays(uint _time) internal view returns (uint256) {\r\n        return (_time - createtime) / nodeTimeStep;\r\n    }\r\n    function open() external onlyOwner {\r\n        plantStatus = true;\r\n    }\r\n    function close() external onlyOwner {\r\n        plantStatus = false;\r\n    }\r\n    function setStarttime(uint256 _time) external onlyOwner {\r\n        startTime = _time;\r\n    }\r\n    function setInterestAddr(address _addr) external onlyOwner {\r\n        interestAddr = _addr;  \r\n    }\r\n    function setPurseB(address _addr) external onlyOwner {\r\n        purseB = _addr;\r\n    }\r\n    function setAddLpAddr(address _addr) external onlyOwner {\r\n        addLpAddr = _addr;\r\n    }\r\n    function setBonusPool(address _addr) external onlyOwner {\r\n        bonusPool = _addr;\r\n    }\r\n    function setADEF(address _token) public onlyOwner {\r\n        ablePlantList[ADEF] = false;\r\n        ADEF = _token;\r\n        ablePlantList[_token] = true;\r\n    }\r\n    function addFreeAccount(address _addr,bool _status) external onlyOwner{\r\n        freeAccount[_addr] = _status;\r\n    }\r\n    function addSwapPair(address _addr,bool _status) external onlyOwner{\r\n        swapPairList[_addr] = _status;\r\n    }\r\n    function setDividendStatus(bool _status) external onlyOwner{\r\n        lpDividendStatus = _status;\r\n    }\r\n    function setAddLpStatus(bool _status) external onlyOwner{\r\n        addLpStatus = _status;\r\n    }\r\n    function setDividendCondition(uint256 _amount) external onlyOwner{\r\n        lpDividendCondition = _amount;\r\n    }\r\n    function setAddLpCondition(uint256 _amount) external onlyOwner{\r\n        addLpCondition = _amount;\r\n    }\r\n    function setEverDayLimitAmount(uint256 _amount) external onlyOwner{\r\n        everDayLimitAmount = _amount;\r\n    }\r\n    \r\n    function setExcludeLpDividend(address addr, bool _status) external onlyOwner {\r\n        excludeLpDividend[addr] = _status;\r\n    }\r\n    function setAblePlant(address _addr,bool _status) external onlyOwner {\r\n        ablePlantList[_addr] = _status;\r\n    }\r\n    function setEnableTransfer(bool _status) external onlyOwner {\r\n        enableTransfer = _status;\r\n    }\r\n    function setEnableSwapTransfer(bool _status) external onlyOwner {\r\n        enableSwapTransfer = _status;\r\n    }\r\n    function setInnerAccount(address _addr,bool _status) external onlyOwner {\r\n        innerAccount[_addr] = _status;\r\n    }\r\n    function setSwapWhiteList(address _addr,bool _status) external onlyOwner {\r\n        swapWhiteList[_addr] = _status;\r\n    }\r\n\r\n    function getUsers() external view returns(address[] memory) {\r\n        return users;\r\n    }\r\n    function getPlantsList(address _user) public view returns(PlantItem[] memory){\r\n        return plantsList[_user];\r\n    }\r\n    function getPlantsAddr() external view returns(address[] memory) {\r\n        return plantsAddr;\r\n    }\r\n    function getDirecters(address _addr) external view returns(address[] memory) {\r\n        return binders[_addr];\r\n    }\r\n    function getParents(address _addr) external view returns(address[] memory) {\r\n        return parents[_addr];\r\n    }\r\n    function bindInvitor(address account, address invitor,address[] calldata _binders,address[] calldata _parents) external onlyOwner {\r\n        inviter[account] = invitor; \r\n        for (uint i; i < _binders.length; i++) {\r\n             binders[account].push(_binders[i]);\r\n        }\r\n        for (uint j; j < _parents.length; j++) {\r\n             parents[account].push(_parents[j]);\r\n        }\r\n       \r\n    }\r\n    function withdraw(address token,address _to,uint256 amount) public onlyOwner returns(bool) {\r\n        IERC20(token).transfer(_to,amount);\r\n        return true; \r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"addFreeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLpAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLpCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLpStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"addSwapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_binders\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_parents\",\"type\":\"address[]\"}],\"name\":\"bindInvitor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSwapTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"everTenDAysAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getDirecters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getParents\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlantsAddr\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPlantsList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inputtime\",\"type\":\"uint256\"}],\"internalType\":\"struct ADE.PlantItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holdingLpAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpDividendBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpDividendStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"plant\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plantBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"plantBonusPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plantStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purseB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setADEF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAblePlant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setAddLpAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setAddLpCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAddLpStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setBonusPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setDividendCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setDividendStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setEnableSwapTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setEnableTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setEverDayLimitAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setExcludeLpDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setInnerAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setInterestAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setPurseB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setStarttime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setSwapWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"transferOwnship\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ADE", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://36975468f0a890ed7c13a632c2d2171ce6d2e3779be2358c4a69e44f2f49f4c7"}