{"SourceCode": "// Rizen is a community-driven Defi project\r\n\r\npragma solidity ^0.5.17;\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) public pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    \r\n    function sub(uint a, uint b) public pure returns (uint c) {\r\n        require(b <= a); \r\n        c = a - b; \r\n    } \r\n    \r\n    function mul(uint a, uint b) public pure returns (uint c) {\r\n        c = a * b; \r\n        require(a == 0 || c / a == b); \r\n    } \r\n    \r\n    function div(uint a, uint b) public pure returns (uint c) { \r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n}\r\n\r\ncontract BEP20Detailed is IBEP20 {\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    \r\n    constructor(string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n    \r\n    function name() public view returns(string memory) {\r\n        return _name;\r\n    }\r\n    \r\n    function symbol() public view returns(string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function decimals() public view returns(uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\ncontract RizenCoin is BEP20Detailed, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n    \r\n    \r\n    // bool _isStakingStarted = false;\r\n    // address _stakingContract;\r\n    uint256 _stakersCount;\r\n    mapping (address => uint256) private _stakes;\r\n    mapping (address => uint256) private _stakeRewardsPaid;\r\n    uint256 _totalStaked = 0;\r\n    uint256 _totalStakingRewardAmount = 0;\r\n    uint256 _totalStakingRewardPaid = 0;\r\n\r\n    string constant tokenName = \"Rizen Coin\";\r\n    string constant tokenSymbol = \"RZN\";\r\n    uint8  constant tokenDecimals = 18;\r\n    uint256 _totalSupply = 100000 * (10 ** 18); // 100000\r\n    \r\n    event Staked(address account, uint256 amount);\r\n    event Unstaked(address account, uint256 amount);\r\n    event RewardWithdrawn(address account, uint256 amount);\r\n    \r\n    constructor() public BEP20Detailed(tokenName, tokenSymbol, tokenDecimals) {\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n    \r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _transfer(from, to, value);\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        return true;\r\n    }\r\n    \r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n        _balances[from] = _balances[from].sub(value);\r\n        \r\n        uint256 tax = value.div(100); // 1%\r\n        uint256 withoutTax = value.sub(tax);\r\n        \r\n        _totalStakingRewardAmount = _totalStakingRewardAmount.add(tax);\r\n        _balances[address(this)] = _balances[address(this)].add(tax); // all the taxes will be stored on this contract\r\n        _balances[to] = _balances[to].add(withoutTax);\r\n        \r\n        emit Transfer(from, address(this), tax);\r\n        emit Transfer(from, to, withoutTax);\r\n    }\r\n    \r\n    /*\r\n        Staking logic and functions\r\n    */\r\n    \r\n    function stakersCouns() public view returns (uint256) {\r\n        return _stakersCount;\r\n    }\r\n    \r\n    function totalStaked() public view returns (uint256) {\r\n        return _totalStaked;\r\n    }\r\n\r\n    function stakesOf(address account) public view returns (uint256) {\r\n        return _stakes[account];\r\n    }\r\n    \r\n    function stakingRewardAmount() public view returns (uint256) {\r\n        return _totalStakingRewardAmount.sub(_totalStakingRewardPaid);\r\n    }\r\n    \r\n    function rewardsOnPoolOf(address account) public view returns (uint256) {\r\n        uint256 rewards = _totalStakingRewardAmount.mul(_stakes[account]).div(_totalStaked);\r\n        if (rewards >= _stakeRewardsPaid[account]) {\r\n            uint256 rewardsForWithdraw = rewards.sub(_stakeRewardsPaid[account]);\r\n            return rewardsForWithdraw;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n    \r\n    function paidRewardsOf(address account) public view returns (uint256) {\r\n        return _stakeRewardsPaid[account];\r\n    }\r\n    \r\n    function stake(uint256 amount) external {\r\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\r\n        _balances[address(this)] = _balances[address(this)].add(amount);\r\n        emit Transfer(msg.sender, address(this), amount);\r\n        \r\n        if (_stakes[msg.sender] == 0 && amount > 0) {\r\n            _stakersCount = _stakersCount.add(1);\r\n        }\r\n        \r\n        _stakes[msg.sender] = _stakes[msg.sender].add(amount);\r\n        _totalStaked = _totalStaked.add(amount);\r\n        emit Staked(msg.sender, amount);\r\n    }\r\n    \r\n    function unstake(uint256 amount) external {\r\n         _stakes[msg.sender] = _stakes[msg.sender].sub(amount);\r\n        _totalStaked = _totalStaked.sub(amount);\r\n        uint256 tax = amount.div(100);\r\n        uint256 transferable = amount.sub(tax);\r\n        // burn 1% and transfer back rest\r\n        _burn(address(this), tax);\r\n        _balances[address(this)] = _balances[address(this)].sub(transferable);\r\n        _balances[msg.sender] = _balances[msg.sender].add(transferable);\r\n        emit Transfer(address(this), msg.sender, transferable);\r\n        emit Unstaked(msg.sender, amount);\r\n        \r\n        if (_stakes[msg.sender] == 0) {\r\n            _stakersCount = _stakersCount.sub(1);\r\n        }\r\n    }\r\n    \r\n    function getStakingRewards() external {\r\n        require(_stakes[msg.sender] > 0, \"You need to stake before getting rewards!\");\r\n        require(_totalStakingRewardAmount > _totalStakingRewardPaid, \"All the staking rewards paid for now, come back later!\");\r\n\r\n        uint256 rewards = _totalStakingRewardAmount.mul(_stakes[msg.sender]).div(_totalStaked);\r\n        require(rewards > _stakeRewardsPaid[msg.sender], \"You earned all the rewards!\");\r\n        \r\n        uint256 rewardsForWithdraw = rewards.sub(_stakeRewardsPaid[msg.sender]);\r\n        _stakeRewardsPaid[msg.sender] = _stakeRewardsPaid[msg.sender].add(rewardsForWithdraw);\r\n        _totalStakingRewardPaid = _totalStakingRewardPaid.add(rewardsForWithdraw);\r\n        \r\n        uint256 tax = rewardsForWithdraw.div(100);\r\n        _balances[msg.sender] = _balances[msg.sender].add(rewardsForWithdraw.sub(tax));\r\n        _burn(address(this), tax);\r\n        emit RewardWithdrawn(msg.sender, rewardsForWithdraw);\r\n    }\r\n    \r\n    function addRewardTokens(uint256 amount) external onlyOwner {\r\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\r\n        _balances[address(this)] = _balances[address(this)].add(amount);\r\n        emit Transfer(msg.sender, address(this), amount);\r\n        \r\n        _totalStakingRewardAmount = _totalStakingRewardAmount.add(amount);\r\n    }\r\n    \r\n    function burn(uint256 amount) external {\r\n        _burn(msg.sender, amount);\r\n    }\r\n    \r\n    function _burn(address account, uint256 amount) internal {\r\n        require(amount != 0);\r\n        _balances[account] = _balances[account].sub(amount);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    \r\n   \r\n}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addRewardTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getStakingRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"paidRewardsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"rewardsOnPoolOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakersCouns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RizenCoin", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "SafeMath:86c706162b505627c54d07e2bce5f2f51b0078a2", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://864f1d134df3fa295db296a651fa44c408bd6263295667aebaf32e7d903c84fc"}