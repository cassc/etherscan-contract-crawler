{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\npragma solidity >=0.8.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address public _owner;\r\n    mapping(address => bool) private _roles;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _msgSender());\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_msgSender() == _owner);\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IPancakePair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ncontract PLUS is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _blackList;\r\n\t\r\n\tmapping (address => bool) private _whiteList; \r\n\r\n    uint256 private constant MAX = ~uint256(0); \r\n    uint256 private _tTotal = 7613 * 10**18;\r\n\r\n    uint256 private _coinMinNum = 713 * 10 ** 18;\r\n\t\r\n    string private _name = \"PLUS\";\r\n    string private _symbol = \"PLUS\";\r\n    uint8  private _decimals = 18;\r\n\r\n    mapping(address => bool) oneContract;\r\n\t\r\n\tfunction setOneContract(address adr, bool status) public onlyOwner {\r\n        oneContract[adr] = status;\r\n    }\r\n\r\n    mapping(address => address) public inviter; // invite person\r\n\r\n    address public burnAddress = address(0); // burn 2 per\r\n\t\r\n\tuint256 public _buyFee = 35;\r\n\t\r\n\tuint256 public _sellFee = 35;\r\n\t\r\n\tuint256 public _removeFee = 35;\r\n\r\n    uint256 public _burnFee = 20;\r\n\r\n    uint256 public minNum = 1e14;\r\n\t\r\n\t// fee list end\r\n\taddress public ownerAddress = address(0xCb4E5dE2eFE62950649b5F11CE8085211F55450d);\r\n\t\r\n\taddress public inviteBurnAddress = address(0xCb4E5dE2eFE62950649b5F11CE8085211F55450d);\r\n\t\r\n\taddress public marketAddress = address(0x51E9ac62Fe8Ee7205f723Ee283D58e2689adF741);\r\n\r\n    IPancakeRouter02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    bool inSwapAndLiquify;\r\n\t\r\n\tbool public notOpen = true;\r\n\r\n    bool public canBuy = true;\r\n\r\n    bool public canSell = true;\r\n\r\n    uint bindMin = 1e16;\r\n\r\n    function setMarketAddress(address _setAddress) public onlyOwner{\r\n        marketAddress = _setAddress;\r\n    }\r\n\r\n    function setBurnAddress(address _setAddress) public onlyOwner{\r\n        burnAddress = _setAddress;\r\n    }\r\n\r\n    function setBuyFee(uint _setFee) public onlyOwner{\r\n        _buyFee = _setFee;\r\n    }\r\n\r\n    function setBurnFee(uint _setFee) public onlyOwner{\r\n        _burnFee = _setFee;\r\n    }\r\n\r\n    function setSellFee(uint _setFee) public onlyOwner{\r\n        _sellFee = _setFee;\r\n    }\r\n\r\n    function setCoinMinNum(uint _setFee) public onlyOwner{\r\n        _coinMinNum = _setFee;\r\n    }\r\n\r\n    function setRemoveFee(uint _setFee) public onlyOwner{\r\n        _removeFee = _setFee;\r\n    }\r\n\r\n    constructor () {\r\n        _decimals = 18;\r\n        _rOwned[ownerAddress] = _tTotal;\r\n        \r\n        IPancakeRouter02 _uniswapV2Router = IPancakeRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[ownerAddress] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        oneContract[uniswapV2Pair] = true;\r\n        emit Transfer(address(0), ownerAddress, _tTotal);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return 18;\r\n    }\r\n    \r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal.sub(balanceOf(address(0)));\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _rOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\t\r\n\tfunction _transferStandard(address sender, address recipient, uint256 tAmount, bool takeFee) private {\r\n        _rOwned[sender] = _rOwned[sender].sub(tAmount);\r\n        if (takeFee){\r\n\t\t    bool willBurn = true;\r\n            if (totalSupply() <= _coinMinNum){\r\n                willBurn = false;\r\n            }\r\n            (uint256 feeAmount, uint256 sendAmount, uint doType)\r\n             = _getTValues(sender, recipient, tAmount, willBurn);\r\n\r\n            if (feeAmount != 0){\r\n                _takeInviterFee(sender, recipient, feeAmount, doType, willBurn);\r\n            }\r\n            \r\n            _rOwned[recipient] = _rOwned[recipient].add(sendAmount);\r\n            emit Transfer(sender, recipient, sendAmount);\r\n        } else {\r\n            _rOwned[recipient] = _rOwned[recipient].add(tAmount);\r\n            emit Transfer(sender, recipient, tAmount);\r\n        }\r\n    }\r\n\t\r\n\tfunction _getTValues(address sender, address recipient, uint256 tAmount, bool willBurn) private view returns (uint256, uint256, uint) {\r\n        uint256 feeAmount = 0;\r\n\t\tuint256 sendAmount = tAmount;\r\n        uint doType = 0;\r\n\t\tif (oneContract[recipient]) {\r\n\t\t\t// sell\r\n\t\t\tfeeAmount = tAmount.mul(_sellFee).div(1000);\r\n            doType = 1;\r\n\t\t} else if (sender == address(uniswapV2Router)){\r\n\t\t\t// removeL\r\n\t\t\tfeeAmount = tAmount.mul(_removeFee).div(1000);\r\n            doType = 2;\r\n\t\t} else if (oneContract[sender]){\r\n\t\t\t// buy\r\n\t\t\tfeeAmount = tAmount.mul(_buyFee).div(1000);\r\n            doType = 3;\r\n\t\t} else {\r\n            doType = 4;\r\n        }\r\n\t\tsendAmount = sendAmount.sub(feeAmount);\r\n        if (!willBurn){\r\n            sendAmount = sendAmount.add(tAmount.mul(_burnFee).div(1000));\r\n        }\r\n\t\t\r\n\t\treturn (feeAmount, sendAmount, doType);\r\n\t}\r\n\r\n\tfunction giveAllFee (\r\n\t\taddress sender, \r\n\t\tuint256 amount,\r\n        bool willBurn)\r\n\tprivate {\r\n\t\tif (amount > 0) {\r\n\t\t\t(uint256 burnAmount, uint256 lpAmount, uint256 shareAmunt) = getAllFee (amount);\r\n\t\t\t_sellToBurn(sender, burnAmount, willBurn);\r\n\t\t\t_sellToLp(sender, lpAmount);\r\n\t\t\t_inviteFee(sender, sender, shareAmunt);\r\n        }\r\n\t}\r\n\r\n    function getAllFee(uint amount) private pure returns(uint, uint, uint){\r\n        uint burnAmount = amount.mul(4).div(7);\r\n        uint lpAmount = burnAmount.div(2);\r\n        uint shareAmount = burnAmount.div(2);\r\n        return (burnAmount, lpAmount, shareAmount);\r\n    }\r\n\t\r\n\tfunction _sellToBurn (address sender, uint amount, bool willBurn) private {\r\n        if (willBurn){\r\n            _rOwned[burnAddress] = _rOwned[burnAddress].add(amount);\r\n            emit Transfer(sender, burnAddress, amount);\r\n        }\r\n\t}\r\n\r\n    function _sellToLp (address sender, uint amount) private {\r\n\t\t_rOwned[marketAddress] = _rOwned[marketAddress].add(amount);\r\n        emit Transfer(sender, marketAddress, amount);\r\n\t}\r\n\t\r\n\t\r\n\tfunction _inviteFee (\r\n\t\taddress sender,\r\n\t\taddress cur,\r\n\t\tuint256 amount) \r\n\tprivate {\r\n\t\taddress cur1 = cur;\r\n\t\tif (amount != 0){\r\n\t\t\tfor (int256 i = 0; i < 2; i++) {\r\n\t\t\t\tuint256 rate;\r\n\t\t\t\tif (i == 0) {\r\n\t\t\t\t\trate = 3;\r\n\t\t\t\t} else if (i == 1) {\r\n\t\t\t\t\trate = 2;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (cur1 != cur || i == 0){\r\n\t\t\t\t\tcur1 = inviter[cur1];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcur1 = address(0);\r\n\t\t\t\t}\r\n\t\t\t\tuint256 curTAmount = amount.mul(rate).div(5);\r\n\t\t\t\t\r\n\t\t\t\tif (cur1 != address(0)){\r\n\t\t\t\t\t_rOwned[cur1] = _rOwned[cur1].add(curTAmount);\r\n\t\t\t\t\temit Transfer(sender, cur1, curTAmount);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t_rOwned[inviteBurnAddress] = _rOwned[inviteBurnAddress].add(curTAmount);\r\n\t\t\t\t\temit Transfer(sender, inviteBurnAddress, curTAmount);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction _takeInviterFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n\t\tuint doType,\r\n        bool willBurn\r\n    ) private {\r\n\t\t// sell\r\n\t\tif (doType == 1 || doType == 2) {\r\n\t\t\tgiveAllFee(sender, tAmount, willBurn);\r\n\t\t} else if (doType == 3){\r\n            giveAllFee(recipient, tAmount, willBurn);\r\n\t\t}\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    \r\n    function setExcludedFromFee(address account, bool state) public onlyOwner {\r\n        _isExcludedFromFee[account] = state;\r\n    }\r\n\t\r\n\tfunction notEx(address account, bool state) public onlyOwner {\r\n        _whiteList[account] = state;\r\n    }\r\n    \r\n    function setBlack(address account, bool state) public onlyOwner {\r\n        _blackList[account] = state;\r\n    }\r\n\t\r\n\tfunction setNotOpen(bool _enabled) public onlyOwner {\r\n        notOpen = _enabled;\r\n    }\r\n\r\n    function setCanBuy(bool _enabled) public onlyOwner {\r\n        canBuy = _enabled;\r\n    }\r\n\r\n    function setCanSell(bool _enabled) public onlyOwner {\r\n        canSell = _enabled;\r\n    }\r\n\r\n\r\n    function setEthWith(address addr, uint256 amount) public onlyOwner {\r\n        payable(addr).transfer(amount);\r\n    }\r\n\r\n    function getErc20With(address con, address addr, uint256 amount) public onlyOwner {\r\n        IERC20(con).transfer(addr, amount);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\t\r\n\tfunction isWhiteList(address account) public view returns(bool) {\r\n        return _whiteList[account];\r\n    }\r\n\r\n    function setMinTrans(uint _setMin) public onlyOwner{\r\n        minNum = _setMin;\r\n    }\r\n\r\n    function setBindNum(uint _setNum) public onlyOwner{\r\n        bindMin = _setNum;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from, address to, uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(!_blackList[from] && !_blackList[to]);\r\n        require(amount >= minNum, \"must more than min\");\r\n        require(_rOwned[from].sub(amount) >= minNum, \"must last min\");\r\n        \r\n        bool takeFee = true;\r\n\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        bool fromC = isContract(from);\r\n        bool toC = isContract(to);\r\n\t\tbool beforeUser = _whiteList[to] || _whiteList[from];\r\n\r\n\t\tif (notOpen && (fromC || toC)) {\r\n\t\t \trequire(beforeUser, \"error address\");\r\n\t\t}\r\n\r\n        bool isBuy = oneContract[from];\r\n        bool isSell = oneContract[to];\r\n        \r\n        if (!beforeUser){\r\n            if (isBuy){\r\n                require(canBuy , \"can't buy\");\r\n            }\r\n\r\n            if (isSell){\r\n                require(canSell, \"can't SELL\");\r\n            }\r\n        }\r\n\r\n        bool shouldSetInviter = inviter[to] == address(0) && to != address(0) && !isContract(from) && !isContract(to) && (amount >= bindMin);\r\n\t\t\r\n        _transferStandard(from, to, amount, takeFee);\r\n\r\n        if (shouldSetInviter) {\r\n            _setInvite(to, from);\r\n        }\r\n    }\r\n\r\n    function setErrorAddress(address errAddress) public onlyOwner{\r\n        inviter[errAddress] = address(0);\r\n    }\r\n\r\n    function getInvite(address searchAddress) public view returns(address){\r\n        return inviter[searchAddress];\r\n    }\r\n\t\r\n\tfunction _setInvite(address to, address from) private {\r\n\t\tif (inviter[from] != to){\r\n\t\t\tinviter[to] = from;\r\n\t\t}\r\n\t}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_removeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"con\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getErc20With\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"searchAddress\",\"type\":\"address\"}],\"name\":\"getInvite\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inviteBurnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"notEx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_setNum\",\"type\":\"uint256\"}],\"name\":\"setBindNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setBlack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_setAddress\",\"type\":\"address\"}],\"name\":\"setBurnAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_setFee\",\"type\":\"uint256\"}],\"name\":\"setBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_setFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setCanBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setCanSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_setFee\",\"type\":\"uint256\"}],\"name\":\"setCoinMinNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"errAddress\",\"type\":\"address\"}],\"name\":\"setErrorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setEthWith\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_setAddress\",\"type\":\"address\"}],\"name\":\"setMarketAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_setMin\",\"type\":\"uint256\"}],\"name\":\"setMinTrans\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setNotOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setOneContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_setFee\",\"type\":\"uint256\"}],\"name\":\"setRemoveFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_setFee\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PLUS", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4e767c5d5549e6ea7a625f60b75f3499672cb14c37280a3315b2263fcabfbec3"}