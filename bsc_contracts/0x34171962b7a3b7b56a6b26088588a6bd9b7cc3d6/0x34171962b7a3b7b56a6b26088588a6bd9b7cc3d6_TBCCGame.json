{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TBCCGame.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../lib/ITBCCGame.sol\\\";\\n\\ncontract TBCCGame is ITBCCGame, Ownable {\\n    Table[] public tables;\\n    address public charityAddress;\\n    address public rootAddress;\\n    IERC20 public busdToken;\\n    IERC20 public tbccToken;\\n\\n    // Matrix [table_from][table_to] = amount\\n    uint256[256][256] public matrix;\\n    //table_from       // table_to        // referral reward\\n    mapping(uint256 => mapping(uint256 => uint256)) public refMatrix;\\n    //table_from       // table_to        // donation amount\\n    mapping(uint256 => mapping(uint256 => uint256)) public donationMatrix;\\n    //table_from       // table_to        // donation for referrals\\n    mapping(uint256 => mapping(uint256 => uint256)) public donationRefMatrix;\\n    //table_from       // table_to        // amount to charity\\n    mapping(uint256 => mapping(uint256 => uint256)) public charityMatrix;\\n\\n    //index            // value           // number of table\\n    mapping(uint256 => mapping(uint256 => uint256)) public valueToTable;\\n    //index            // number of table // value\\n    mapping(uint256 => mapping(uint256 => uint256)) public tableToValue;\\n    //user address     // number of table\\n    mapping(address => uint256) public addressToTable;\\n    //number of table  // users addresses\\n    mapping(uint256 => address[]) public tableAddresses;\\n    //number of table  // winner address  // count of donations\\n    mapping(uint256 => mapping(address => uint256)) public donationsCountReceivedAlready;\\n    //winner address  // count of donations\\n    mapping(address => uint256) public donationsCount;\\n\\n    //number of table  // inviter address // rewards sum\\n    mapping(uint256 => mapping(address => uint256)) public refTableSum;\\n    //number of table  // winner address  // donations sum\\n    mapping(uint256 => mapping(address => uint256)) public donationTableSum;\\n    //number of table  // inviter address // donations sum\\n    mapping(uint256 => mapping(address => uint256)) public donationRefTableSum;\\n\\n    //inviter address  // rewards sum\\n    mapping(address => uint256) public refSum;\\n    //winner address   // donations sum\\n    mapping(address => uint256) public donationSum;\\n    //winner address   // donations sum\\n    mapping(address => uint256) public donationRefSum;\\n\\n    //user address     // inviter address\\n    mapping(address => address) public inviters;\\n    //user address     // user id\\n    mapping(address => uint256) public addressToId;\\n    uint256 public counter; // user ids counter\\n    uint256 public totalHits; // total hits counter\\n\\n    //user address     // verified\\n    mapping(address => bool) public verifications;\\n    uint256 public verificationCost;\\n    uint256 public DEFAULT_VERIFICATION_COST = 10 * 10**uint(18);\\n\\n    event InvestmentReceived(address indexed from, uint256 table, uint256 user_id, uint256 inviter_id);\\n    event ReferralRewardSent(address indexed to, uint256 value, uint256 table);\\n    event DonationRewardSent(address indexed to, uint256 value, uint256 table);\\n    event DonationReferralRewardSent(address indexed to, uint256 value, uint256 table);\\n    event CharitySent(address indexed to, uint256 table);\\n    event UserVerification(address indexed user);\\n\\n    constructor(\\n        address root,\\n        address charity,\\n        IERC20 _busdToken,\\n        IERC20 _tbccToken\\n    ) {\\n        rootAddress = root;\\n        charityAddress = charity;\\n        busdToken = _busdToken;\\n        tbccToken = _tbccToken;\\n        verificationCost = DEFAULT_VERIFICATION_COST;\\n\\n        // add root table\\n        tables.push(Table(0, 0, 0, 0, 0, 0, 0));\\n\\n        appendTable(1000_000_000_000_000_000_000, 10, 25, 5, 8, 5, 30, false); // 1000\\n        appendTable(2000_000_000_000_000_000_000, 10, 25, 5, 8, 5, 30, false); // 2000\\n        appendTable(4000_000_000_000_000_000_000, 10, 25, 5, 8, 5, 30, false); // 4000\\n        appendTable(8000_000_000_000_000_000_000, 10, 25, 5, 8, 5, 30, false); // 8000\\n\\n        appendTable(16000_000_000_000_000_000_000, 10, 25, 5, 9, 4, 40, false); // 16000\\n        appendTable(32000_000_000_000_000_000_000, 10, 25, 5, 9, 4, 40, false); // 32000\\n        appendTable(64000_000_000_000_000_000_000, 10, 25, 5, 9, 4, 40, false); // 64000\\n\\n        appendTable(128000_000_000_000_000_000_000, 10, 25, 5, 10, 3, 50, false); // 128000\\n        appendTable(256000_000_000_000_000_000_000, 10, 25, 5, 10, 3, 50, false); // 256000\\n\\n        appendTable(500000_000_000_000_000_000_000, 10, 25, 5, 11, 2, 0, false); // 500000\\n\\n        rebuildJumpValues();\\n    }\\n\\n    /**\\n     * @notice Buying table place\\n     * @param _inviter: inviter address\\n     * @param _table: number of table\\n     *\\n     */\\n    function buy(\\n        address _inviter,\\n        uint256 _table\\n    ) public {\\n        require(_inviter != address(0), 'Only With Inviter');\\n        require(verifications[msg.sender], 'Only verified users');\\n\\n        if (addressToId[msg.sender] != 0) {\\n            _inviter = inviters[msg.sender];\\n        } else {\\n            counter += 1;\\n            addressToId[msg.sender] = counter;\\n        }\\n\\n        require(msg.sender != _inviter, 'Only With Inviter');\\n        require(msg.sender.code.length == 0, 'Unknown Sender code');\\n        require(_inviter.code.length == 0, 'Unknown Inviter code');\\n\\n        uint256 currentTable = addressToTable[msg.sender];\\n        require(_table == currentTable + 1, 'Only to next table');\\n\\n        uint256 _value = tableToValue[currentTable][_table];\\n        tbccToken.transferFrom(msg.sender, address(this), _value);\\n\\n        emit InvestmentReceived(msg.sender, _table, counter, addressToId[_inviter]);\\n\\n        Table memory t = tables[_table];\\n\\n        _payoutReferralReward(_inviter, refMatrix[currentTable][_table], _table);\\n\\n        for (uint256 i = 1; i <= t.donationsCount; i++) {\\n            address winner = tableAddresses[_table][random(tableAddresses[_table].length, i)];\\n\\n            if (inviters[winner] != address(0)) {\\n                _payoutDonationReferralReward(inviters[winner], donationRefMatrix[currentTable][_table], _table);\\n            }\\n\\n            _payoutDonationReward(winner, donationMatrix[currentTable][_table], _table);\\n        }\\n\\n        addressToTable[msg.sender] = _table;\\n        for (uint256 i = currentTable; i < _table; i++){\\n            tableAddresses[i + 1].push(msg.sender);\\n        }\\n        inviters[msg.sender] = _inviter;\\n\\n        _payout(charityAddress, charityMatrix[currentTable][_table]);\\n        emit CharitySent(charityAddress, _table);\\n    }\\n\\n    /**\\n     * @notice Verification for users\\n     *\\n     */\\n    function verification() external {\\n        busdToken.transferFrom(msg.sender, address(this), verificationCost);\\n        verifications[msg.sender] = true;\\n\\n        emit UserVerification(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Getting table address count\\n     * @param tableNum: number of table\\n     *\\n     */\\n    function getTableAddressesCount(\\n        uint256 tableNum\\n    ) external view returns (uint256) {\\n        return tableAddresses[tableNum].length;\\n    }\\n\\n    /**\\n     * @notice Getting tables count\\n     *\\n     */\\n    function getTablesCount() external view returns (uint256) {\\n        return tables.length;\\n    }\\n\\n    /**\\n     * @notice Getting table address count\\n     * @param tableNum: number of table\\n     *\\n     */\\n    function getTableThreshold(\\n        uint256 tableNum\\n    ) external view returns (uint256) {\\n        require (tableNum <= tables.length, 'Invalid table number');\\n\\n        return tables[tableNum].thValue;\\n    }\\n\\n    /**\\n     * @notice Getting randomized winner addresses\\n     * @param max: max\\n     * @param salt: salt\\n     *\\n     */\\n    function random(\\n        uint256 max,\\n        uint256 salt\\n    ) public view returns(uint256) {\\n        return uint256(keccak256(abi.encodePacked(block.timestamp * salt, block.difficulty, msg.sender))) % max;\\n    }\\n\\n    /**\\n     * @notice Getting information about customer\\n     * @param customer: user address\\n     *\\n     */\\n    function info(\\n        address customer\\n    ) external view returns(CustomerData memory) {\\n        CustomerData memory data;\\n        data.ID = addressToId[customer];\\n        data.table = addressToTable[customer];\\n        data.parent = inviters[customer];\\n        data.parentID = addressToId[data.parent];\\n        data.refSum = refSum[customer];\\n        data.donationSum = donationSum[customer];\\n        data.donationRefSum = donationRefSum[customer];\\n        return data;\\n    }\\n\\n    /**\\n     * @notice Getting information about table\\n     * @param tableNum: number of table\\n     * @param customer: user address\\n     *\\n     */\\n    function infoTable(\\n        uint256 tableNum,\\n        address customer\\n    ) external view returns(CustomerTableData memory) {\\n        CustomerTableData memory data;\\n        data.addressesCount = tableAddresses[tableNum].length;\\n        data.donationsCountReceivedAlready = donationsCountReceivedAlready[tableNum][customer];\\n        data.refSum = refTableSum[tableNum][customer];\\n        data.donationSum = donationTableSum[tableNum][customer];\\n        data.donationRefSum = donationRefTableSum[tableNum][customer];\\n        return data;\\n    }\\n\\n    /**\\n     * @notice Add new table\\n     * @param thValue: thValue\\n     * @param charityShare: charityShare\\n     * @param refShare: refShare\\n     * @param donationsCount: donationsCount\\n     * @param donationShare: donationShare\\n     * @param refDonationShare: refDonationShare\\n     * @param maxDonationsCount: maxDonationsCount\\n     * @param forceRebuildJUmpValues: forceRebuildJUmpValues\\n     * @dev Callable by owner\\n     *\\n     */\\n    function appendTable(\\n        uint256 thValue,\\n        uint256 charityShare,\\n        uint256 refShare,\\n        uint256 donationsCount,\\n        uint256 donationShare,\\n        uint256 refDonationShare,\\n        uint256 maxDonationsCount,\\n        bool forceRebuildJUmpValues\\n    ) public onlyOwner {\\n        setTableParams(\\n            thValue,\\n            tables.length,\\n            charityShare,\\n            refShare,\\n            donationsCount,\\n            donationShare,\\n            refDonationShare,\\n            maxDonationsCount,\\n            forceRebuildJUmpValues\\n        );\\n\\n        tableAddresses[uint256(tables.length - 1)].push(rootAddress);\\n    }\\n\\n    /**\\n     * @notice Setting table params\\n     * @param thValue: thValue\\n     * @param num: num\\n     * @param charityShare: charityShare\\n     * @param refShare: refShare\\n     * @param donationsCount: donationsCount\\n     * @param donationShare: donationShare\\n     * @param refDonationShare: refDonationShare\\n     * @param maxDonationsCount: maxDonationsCount\\n     * @param forceRebuildJUmpValues: forceRebuildJUmpValues\\n     * @dev Callable by owner\\n     *\\n     */\\n    function setTableParams(\\n        uint256 thValue,\\n        uint256 num,\\n        uint256 charityShare,\\n        uint256 refShare,\\n        uint256 donationsCount,\\n        uint256 donationShare,\\n        uint256 refDonationShare,\\n        uint256 maxDonationsCount,\\n        bool forceRebuildJUmpValues\\n    ) public onlyOwner {\\n\\n        Table memory t = Table(\\n            thValue,\\n            charityShare,\\n            refShare,\\n            donationsCount,\\n            donationShare,\\n            refDonationShare,\\n            maxDonationsCount\\n        );\\n\\n        require(num > 0, 'Invalid table number');\\n        require(num <= tables.length, 'Invalid table number');\\n        require(t.thValue > 0, 'Invalid thValue');\\n        require(t.charityShare + t.refShare + t.donationsCount * t.donationShare + t.donationsCount * t.refDonationShare == 100, 'Invalid params');\\n\\n        if (num > 1) {\\n            require(t.thValue > tables[num - 1].thValue, 'it should be greater than prev threshold');\\n        }\\n\\n        if (num < tables.length - 1) {\\n            require(t.thValue < tables[num + 1].thValue, 'it should be less that next threshold');\\n        }\\n\\n        if (num == tables.length) {\\n            tables.push(t);\\n        } else {\\n            tables[num].thValue = t.thValue;\\n        }\\n\\n        if (forceRebuildJUmpValues) {\\n            rebuildJumpValues();\\n        }\\n    }\\n\\n    /**\\n     * @notice Rebuild jump values\\n     * @dev Callable by owner\\n     *\\n     */\\n    function rebuildJumpValues() public onlyOwner {\\n        for (uint256 i = 0; i < tables.length; i++) {\\n            for (uint256 j = 0; j < tables.length; j++) {\\n                valueToTable[i][matrix[i][j]] = 0;\\n                tableToValue[i][j] = matrix[i][j];\\n                matrix[i][j] = 0;\\n            }\\n        }\\n\\n        // add values for root table\\n        uint256 accum = 0;\\n        for (uint256 j = 1; j < tables.length; j++) {\\n            accum += tables[j].thValue;\\n            matrix[0][j] = accum;\\n            valueToTable[0][accum] = j;\\n            tableToValue[0][j] = accum;\\n            refMatrix[0][j] = accum * tables[j].refShare / 100;\\n            donationMatrix[0][j] = accum * tables[j].donationShare / 100;\\n            donationRefMatrix[0][j] = accum * tables[j].refDonationShare / 100;\\n            charityMatrix[0][j] = accum * tables[j].charityShare / 100;\\n        }\\n\\n        // add values for rest tables\\n        uint256 val;\\n        for (uint256 i = 1; i < tables.length; i++) {\\n            for (uint256 j = 1; j < tables.length; j++) {\\n                if (j < i) {\\n                    matrix[i][j] = 0;\\n                } else {\\n                    val = matrix[i - 1][j] - matrix[i - 1][i];\\n                    matrix[i][j] = val;\\n                    valueToTable[i][val] = j;\\n                    tableToValue[i][j] = val;\\n\\n                    refMatrix[i][j] = val * tables[j].refShare / 100;\\n                    donationMatrix[i][j] = val * tables[j].donationShare / 100;\\n                    donationRefMatrix[i][j] = val * tables[j].refDonationShare / 100;\\n                    charityMatrix[i][j] = val * tables[j].charityShare / 100;\\n                }\\n            }\\n        }\\n\\n        addressToTable[rootAddress] = tables.length;\\n    }\\n\\n    /**\\n     * @notice Setting charity address\\n     * @param newCharityAddress: new charity address\\n     * @dev Callable by owner\\n     *\\n     */\\n    function setNewCharityAddress(\\n        address newCharityAddress\\n    ) external onlyOwner {\\n        require(newCharityAddress != address(0), 'Invalid charity address');\\n\\n        charityAddress = newCharityAddress;\\n    }\\n\\n    /**\\n     * @notice Setting root address\\n     * @param newRootAddress: new root address\\n     * @dev Callable by owner\\n     *\\n     */\\n    function setNewRootAddress(\\n        address newRootAddress\\n    ) external onlyOwner {\\n        require(newRootAddress != address(0), 'Invalid root address');\\n\\n        addressToTable[newRootAddress] = addressToTable[rootAddress];\\n        rootAddress = newRootAddress;\\n        for (uint256 i = 0; i < tables.length; i++) {\\n            tableAddresses[i][0] = rootAddress;\\n        }\\n    }\\n\\n    /**\\n     * @notice Setting new verification cost\\n     * @param _cost: new cost\\n     * @dev Callable by owner\\n     */\\n    function setCost(\\n        uint256 _cost\\n    ) external onlyOwner {\\n        verificationCost = _cost;\\n    }\\n\\n    /**\\n     * @notice withdraw BNB\\n     * @dev Callable by owner\\n     *\\n     */\\n    function withdraw() external onlyOwner {\\n        _payout(owner(), address(this).balance);\\n    }\\n\\n    /**\\n     * @notice withdraw other tokens\\n     * @param tokenContract: token contract\\n     * @param amount: amount for withdraw\\n     * @dev Callable by owner\\n     *\\n     */\\n    function withdrawToken(\\n        IERC20 tokenContract,\\n        uint256 amount\\n    ) external onlyOwner {\\n        tokenContract.transfer(owner(), amount);\\n    }\\n\\n    /**\\n     * @notice Paying rewards for winner\\n     * @param _winner: winner address\\n     * @param _value: value for reward\\n     * @param _tableNum: number of table\\n     *\\n     */\\n    function _payoutDonationReward(\\n        address _winner,\\n        uint256 _value,\\n        uint256 _tableNum\\n    ) internal {\\n        if ((tables[_tableNum].maxDonationsCount != 0) && (donationsCountReceivedAlready[_tableNum][_winner] > tables[_tableNum].maxDonationsCount)) {\\n            _winner = rootAddress;\\n        }\\n        donationsCountReceivedAlready[_tableNum][_winner]++;\\n        donationTableSum[_tableNum][_winner] += _value;\\n        donationSum[_winner] += _value;\\n        totalHits += 1;\\n        donationsCount[_winner] += 1;\\n        _payout(_winner, _value);\\n        emit DonationRewardSent(_winner, _value, _tableNum);\\n    }\\n\\n    /**\\n     * @notice Paying rewards for referrals\\n     * @param _winnerInviter: winner inviter address\\n     * @param _value: value for reward\\n     * @param _tableNum: number of table\\n     *\\n     */\\n    function _payoutDonationReferralReward(\\n        address _winnerInviter,\\n        uint256 _value,\\n        uint256 _tableNum\\n    ) internal {\\n        require(_winnerInviter != address(0), 'Invalid winner inviter address');\\n        require(_value > 0, 'Invalid value for reward');\\n        require(_tableNum > 0, 'Invalid number of table');\\n\\n        donationRefTableSum[_tableNum][_winnerInviter] += _value;\\n        donationRefSum[_winnerInviter] += _value;\\n        _payout(_winnerInviter, _value);\\n        emit DonationReferralRewardSent(_winnerInviter, _value, _tableNum);\\n    }\\n\\n    /**\\n     * @notice Paying referral rewards for inviter\\n     * @param _inviter: inviter address\\n     * @param _value: value for reward\\n     * @param _tableNum: number of table\\n     *\\n     */\\n    function _payoutReferralReward(\\n        address _inviter,\\n        uint256 _value,\\n        uint256 _tableNum\\n    ) internal {\\n        refTableSum[_tableNum][_inviter] += _value;\\n        refSum[_inviter] += _value;\\n        _payout(_inviter, _value);\\n        emit ReferralRewardSent(_inviter, _value, _tableNum);\\n    }\\n\\n    /**\\n     * @notice Paying for receiver\\n     * @param _receiver: receiver for paying\\n     * @param _value: value for paying\\n     *\\n     */\\n    function _payout(\\n        address _receiver,\\n        uint256 _value\\n    ) internal {\\n        require(_receiver != address(0), 'Invalid receiver address');\\n\\n        tbccToken.transfer(_receiver, _value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/ITBCCGame.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITBCCGame {\\n\\n    struct Table {\\n        uint256 thValue;\\n        uint256 charityShare;\\n        uint256 refShare;\\n        uint256 donationsCount;\\n        uint256 donationShare;\\n        uint256 refDonationShare;\\n        uint256 maxDonationsCount;\\n    }\\n\\n    struct CustomerData {\\n        uint256 ID;\\n        uint256 table;\\n        uint256 parentID;\\n        uint256 refSum;\\n        uint256 donationSum;\\n        uint256 donationRefSum;\\n        address parent;\\n    }\\n\\n    struct CustomerTableData {\\n        uint256 addressesCount;\\n        uint256 donationsCountReceivedAlready;\\n        uint256 refSum;\\n        uint256 donationSum;\\n        uint256 donationRefSum;\\n    }\\n\\n    /**\\n     * @notice Buying table place\\n     * @param _inviter: inviter address\\n     * @param _table: number of table\\n     *\\n     */\\n    function buy(\\n        address _inviter,\\n        uint256 _table\\n    ) external;\\n\\n    /**\\n     * @notice Verification for users\\n     *\\n     */\\n    function verification() external;\\n\\n    /**\\n     * @notice Getting table address count\\n     * @param tableNum: number of table\\n     *\\n     */\\n    function getTableAddressesCount(\\n        uint256 tableNum\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Getting tables count\\n     *\\n     */\\n    function getTablesCount() external view returns (uint256);\\n\\n    /**\\n     * @notice Getting table address count\\n     * @param tableNum: number of table\\n     *\\n     */\\n    function getTableThreshold(\\n        uint256 tableNum\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Getting randomized winner addresses\\n     * @param max: max\\n     * @param salt: salt\\n     *\\n     */\\n    function random(\\n        uint256 max,\\n        uint256 salt\\n    ) external view returns(uint256);\\n\\n    /**\\n     * @notice Getting information about customer\\n     * @param customer: user address\\n     *\\n     */\\n    function info(\\n        address customer\\n    ) external view returns(CustomerData memory);\\n\\n    /**\\n     * @notice Getting information about table\\n     * @param tableNum: number of table\\n     * @param customer: user address\\n     *\\n     */\\n    function infoTable(\\n        uint256 tableNum,\\n        address customer\\n    ) external view returns(CustomerTableData memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"root\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"charity\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_busdToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tbccToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"table\",\"type\":\"uint256\"}],\"name\":\"CharitySent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"table\",\"type\":\"uint256\"}],\"name\":\"DonationReferralRewardSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"table\",\"type\":\"uint256\"}],\"name\":\"DonationRewardSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"table\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inviter_id\",\"type\":\"uint256\"}],\"name\":\"InvestmentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"table\",\"type\":\"uint256\"}],\"name\":\"ReferralRewardSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"UserVerification\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_VERIFICATION_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToTable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"thValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charityShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donationsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donationShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refDonationShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDonationsCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"forceRebuildJUmpValues\",\"type\":\"bool\"}],\"name\":\"appendTable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inviter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_table\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"charityMatrix\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"donationMatrix\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"donationRefMatrix\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"donationRefSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"donationRefTableSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"donationSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"donationTableSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"donationsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"donationsCountReceivedAlready\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tableNum\",\"type\":\"uint256\"}],\"name\":\"getTableAddressesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tableNum\",\"type\":\"uint256\"}],\"name\":\"getTableThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTablesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"info\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"table\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parentID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refSum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donationSum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donationRefSum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"}],\"internalType\":\"struct ITBCCGame.CustomerData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tableNum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"infoTable\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"addressesCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donationsCountReceivedAlready\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refSum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donationSum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donationRefSum\",\"type\":\"uint256\"}],\"internalType\":\"struct ITBCCGame.CustomerTableData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"matrix\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"random\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebuildJumpValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"refMatrix\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"refSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"refTableSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"}],\"name\":\"setCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCharityAddress\",\"type\":\"address\"}],\"name\":\"setNewCharityAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRootAddress\",\"type\":\"address\"}],\"name\":\"setNewRootAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"thValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charityShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donationsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donationShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refDonationShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDonationsCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"forceRebuildJUmpValues\",\"type\":\"bool\"}],\"name\":\"setTableParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tableAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tableToValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tables\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"thValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charityShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donationsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donationShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refDonationShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDonationsCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tbccToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"valueToTable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verificationCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"verifications\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TBCCGame", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d399654197ee834ede7dd59f94c412c527d1b666000000000000000000000000f85285d7070a4b9144f4f628cf4d3afa37b6705400000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000f29480344d8e21efeab7fde39f8d8299056a7fea", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}