{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/tokens/ShibaGalaxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// @dev Telegram: defi_guru\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, 'SafeMath: addition overflow');\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, 'SafeMath: subtraction overflow');\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, 'SafeMath: multiplication overflow');\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, 'SafeMath: division by zero');\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, 'SafeMath: modulo by zero');\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256('')`\\r\\n        bytes32 codehash;\\r\\n\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            codehash := extcodehash(account)\\r\\n        }\\r\\n        return (codehash != accountHash && codehash != 0x0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, 'Address: insufficient balance');\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{value: amount}('');\\r\\n        require(success, 'Address: unable to send value, recipient may have reverted');\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, 'Address: low-level call failed');\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, 'Address: insufficient balance for call');\\r\\n        return _functionCallWithValue(target, data, value, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 weiValue,\\r\\n        string memory errorMessage\\r\\n    ) private returns (bytes memory) {\\r\\n        require(isContract(target), 'Address: call to non-contract');\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() internal {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), 'Ownable: caller is not the owner');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), 'Ownable: new owner is the zero address');\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    function sync() external;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n}\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nabstract contract ReentrancyGuard {\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() public {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    modifier nonReentrant() {\\r\\n        require(_status != _ENTERED, 'ReentrancyGuard: reentrant call');\\r\\n        _status = _ENTERED;\\r\\n        _;\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    modifier isHuman() {\\r\\n        require(tx.origin == msg.sender, 'sorry humans only');\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nlibrary TransferHelper {\\r\\n    function safeApprove(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\r\\n        require(\\r\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n            'TransferHelper::safeApprove: approve failed'\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransfer(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n        require(\\r\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n            'TransferHelper::safeTransfer: transfer failed'\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\r\\n        require(\\r\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n            'TransferHelper::transferFrom: transferFrom failed'\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint256 value) internal {\\r\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\r\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IFeeReceiver {\\r\\n    function onFeeReceived(uint256 amount) external payable;\\r\\n}\\r\\n\\r\\ncontract FeeReceiver is IFeeReceiver, Ownable {\\r\\n    address public vault;\\r\\n    constructor(address _owner, address _vault) public {\\r\\n        vault = _vault;\\r\\n        transferOwnership(_owner);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function onFeeReceived(uint256 amount) override external payable {\\r\\n        if(vault != address(0))\\r\\n            payable(vault).transfer(amount);\\r\\n    }\\r\\n    \\r\\n    function setVault(address _vault) external onlyOwner {\\r\\n        vault = _vault;\\r\\n    }\\r\\n\\r\\n    function withdrawAccidentallySentTokens(IERC20 token, address recipient, uint256 amount) external onlyOwner {\\r\\n        token.transfer(recipient, amount);\\r\\n    }\\r\\n\\r\\n    function withdrawAccidentallySentEth(address payable recipient, uint256 amount) external onlyOwner {\\r\\n        recipient.transfer(amount);\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract BPContract{\\r\\n    function protect( address sender, address receiver, uint256 amount ) external virtual;\\r\\n}\\r\\n\\r\\ncontract ShibaGalaxy is Context, IERC20, Ownable, ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;  \\r\\n    using TransferHelper for address;\\r\\n\\r\\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\\r\\n\\r\\n    string private _name = 'ShibaGalaxy';\\r\\n    string private _symbol = '$SHIBGX';\\r\\n    uint8 private _decimals = 9;\\r\\n\\r\\n    mapping(address => uint256) internal _reflectionBalance;\\r\\n    mapping(address => uint256) internal _tokenBalance;\\r\\n    mapping(address => mapping(address => uint256)) internal _allowances;\\r\\n\\r\\n    uint256 private constant MAX = ~uint256(0);\\r\\n    uint256 internal _tokenTotal = 100_000_000_000e9;\\r\\n    uint256 internal _reflectionTotal = (MAX - (MAX % _tokenTotal));\\r\\n\\r\\n    mapping(address => bool) public isTaxless;\\r\\n    mapping(address => bool) internal _isExcluded;\\r\\n    address[] internal _excluded;\\r\\n\\r\\n    uint256 public _feeDecimal = 2;\\r\\n    // index 0 = buy fee, index 1 = sell fee, index 2 = p2p fee\\r\\n    uint256[] internal _taxFee;\\r\\n    uint256[] public _liqFee;\\r\\n    uint256[] public _vaultFee;\\r\\n    uint256[] public _marketingFee;\\r\\n    uint256[] public _buybackFee;\\r\\n\\r\\n    uint256 internal _feeTotal;\\r\\n    uint256 internal _liqFeeCollected;\\r\\n    uint256 internal _vaultFeeCollected;\\r\\n    uint256 internal _marketingFeeCollected;\\r\\n    uint256 internal _buybackFeeCollected;\\r\\n\\r\\n    uint256 public buybackTotal;\\r\\n\\r\\n    bool public isFeeActive = false; // should be true\\r\\n    bool private inSwap;\\r\\n    bool public swapEnabled = true;\\r\\n\\r\\n    uint256 public minTokensBeforeSwap = 1_000_000e9;\\r\\n    uint256 public maxSwapPercent = 10; // 0.1%\\r\\n    uint256 public swapInterval = 1 hours;\\r\\n    uint256 public lastSwapTimestamp = block.timestamp;\\r\\n\\r\\n    address public marketingWallet;\\r\\n    address public buybackWallet;\\r\\n    IFeeReceiver public feeReceiver;\\r\\n\\r\\n    IUniswapV2Router02 public router;\\r\\n    address public pair;\\r\\n\\r\\n    BPContract public BP;\\r\\n    bool public bpEnabled;\\r\\n    bool public BPDisabledForever = false;\\r\\n\\r\\n    event SwapIntervalUpdated(uint256 invertval);\\r\\n    event SwapUpdated(bool enabled);\\r\\n    event Swap(uint256 tokensSwapped, uint256 bnbReceived, uint256 tokensIntoLiqudity);\\r\\n    event AutoLiquify(uint256 bnbAmount, uint256 tokenAmount);\\r\\n    event BuybackAndBurned(uint256 bnbAmount, uint256 tokenAmount);\\r\\n\\r\\n    modifier lockTheSwap() {\\r\\n        inSwap = true;\\r\\n        _;\\r\\n        inSwap = false;\\r\\n    }\\r\\n\\r\\n    constructor(address _router ,address _owner,address _marketingWallet, address _vault, address _buybackWallet) public {\\r\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(_router);\\r\\n        pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\\r\\n        router = _uniswapV2Router;\\r\\n        marketingWallet = _marketingWallet;\\r\\n        buybackWallet = _buybackWallet;\\r\\n        feeReceiver = new FeeReceiver(_owner, _vault);\\r\\n\\r\\n        isTaxless[_owner] = true;\\r\\n        isTaxless[address(_vault)] = true;\\r\\n        isTaxless[address(feeReceiver)] = true;\\r\\n        isTaxless[_marketingWallet] = true;\\r\\n        isTaxless[_buybackWallet] = true;\\r\\n        isTaxless[address(this)] = true;\\r\\n\\r\\n        _reflectionBalance[_owner] = _reflectionTotal;\\r\\n        emit Transfer(address(0),_owner, _tokenTotal);\\r\\n\\r\\n        _taxFee.push(0);\\r\\n        _taxFee.push(0);\\r\\n        _taxFee.push(0);\\r\\n\\r\\n        _liqFee.push(100);\\r\\n        _liqFee.push(100);\\r\\n        _liqFee.push(0);\\r\\n\\r\\n        _vaultFee.push(100);\\r\\n        _vaultFee.push(500);\\r\\n        _vaultFee.push(0);\\r\\n\\r\\n        _marketingFee.push(100);\\r\\n        _marketingFee.push(100);\\r\\n        _marketingFee.push(0);\\r\\n\\r\\n        _buybackFee.push(100);\\r\\n        _buybackFee.push(100);\\r\\n        _buybackFee.push(0);\\r\\n\\r\\n        transferOwnership(_owner);\\r\\n    }\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _tokenTotal;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        if (_isExcluded[account]) return _tokenBalance[account];\\r\\n        return tokenFromReflection(_reflectionBalance[account]);\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        _approve(\\r\\n            sender,\\r\\n            _msgSender(),\\r\\n            _allowances[sender][_msgSender()].sub(amount, 'ERC20: transfer amount exceeds allowance')\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender].sub(subtractedValue, 'ERC20: decreased allowance below zero')\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function isExcluded(address account) public view returns (bool) {\\r\\n        return _isExcluded[account];\\r\\n    }\\r\\n\\r\\n    function tokenFromReflection(uint256 reflectionAmount) internal view returns (uint256) {\\r\\n        require(reflectionAmount <= _reflectionTotal, 'Amount must be less than total reflections');\\r\\n        uint256 currentRate = _getReflectionRate();\\r\\n        return reflectionAmount.div(currentRate);\\r\\n    }\\r\\n\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        require(owner != address(0), 'ERC20: approve from the zero address');\\r\\n        require(spender != address(0), 'ERC20: approve to the zero address');\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        require(sender != address(0), 'ERC20: transfer from the zero address');\\r\\n        require(recipient != address(0), 'ERC20: transfer to the zero address');\\r\\n        require(amount > 0, 'Transfer amount must be greater than zero');\\r\\n\\r\\n        if (bpEnabled && !BPDisabledForever) {\\r\\n            BP.protect(sender, recipient, amount); \\r\\n        }\\r\\n\\r\\n        if (swapEnabled && !inSwap && sender != pair) {\\r\\n            swap();\\r\\n        }\\r\\n\\r\\n        uint256 transferAmount = amount;\\r\\n        uint256 rate = _getReflectionRate();\\r\\n\\r\\n        if (isFeeActive && !isTaxless[sender] && !isTaxless[recipient] && !inSwap) {\\r\\n            transferAmount = collectFee(sender, amount, rate, recipient == pair, sender != pair && recipient != pair);\\r\\n        }\\r\\n\\r\\n        //transfer reflection\\r\\n        _reflectionBalance[sender] = _reflectionBalance[sender].sub(amount.mul(rate));\\r\\n        _reflectionBalance[recipient] = _reflectionBalance[recipient].add(transferAmount.mul(rate));\\r\\n\\r\\n        //if any account belongs to the excludedAccount transfer token\\r\\n        if (_isExcluded[sender]) {\\r\\n            _tokenBalance[sender] = _tokenBalance[sender].sub(amount);\\r\\n        }\\r\\n        if (_isExcluded[recipient]) {\\r\\n            _tokenBalance[recipient] = _tokenBalance[recipient].add(transferAmount);\\r\\n        }\\r\\n\\r\\n        emit Transfer(sender, recipient, transferAmount);\\r\\n    }\\r\\n\\r\\n    function calculateFee(uint256 feeIndex, uint256 amount) \\r\\n    internal returns(uint256 taxFee, uint256 marketingFee,uint256 totalFee) {\\r\\n        taxFee = amount.mul(_taxFee[feeIndex]).div(10**(_feeDecimal + 2));\\r\\n        marketingFee = amount.mul(_marketingFee[feeIndex]).div(10**(_feeDecimal + 2));\\r\\n        uint256 liqFee = amount.mul(_liqFee[feeIndex]).div(10**(_feeDecimal + 2));\\r\\n        uint256 vaultFee = amount.mul(_vaultFee[feeIndex]).div(10**(_feeDecimal + 2));\\r\\n        uint256 buybackFee = amount.mul(_buybackFee[feeIndex]).div(10**(_feeDecimal + 2));\\r\\n        totalFee = liqFee.add(vaultFee).add(buybackFee);\\r\\n\\r\\n        _liqFeeCollected = _liqFeeCollected.add(liqFee);\\r\\n        _vaultFeeCollected = _vaultFeeCollected.add(vaultFee);\\r\\n        _buybackFeeCollected = _buybackFeeCollected.add(buybackFee);\\r\\n    }\\r\\n\\r\\n    function collectFee(\\r\\n        address account,\\r\\n        uint256 amount,\\r\\n        uint256 rate,\\r\\n        bool sell,\\r\\n        bool p2p\\r\\n    ) private returns (uint256) {\\r\\n        uint256 transferAmount = amount;\\r\\n\\r\\n        (uint256 taxFee, uint256 marketingFee, uint256 otherFee) = calculateFee(p2p ? 2 : sell ? 1 : 0, amount);\\r\\n        if(otherFee != 0) {\\r\\n            transferAmount = transferAmount.sub(otherFee);\\r\\n            _reflectionBalance[address(this)] = _reflectionBalance[address(this)].add(otherFee.mul(rate));\\r\\n            if (_isExcluded[address(this)]) {\\r\\n                _tokenBalance[address(this)] = _tokenBalance[address(this)].add(otherFee);\\r\\n            }\\r\\n            emit Transfer(account, address(this), otherFee);\\r\\n        }\\r\\n        if(marketingFee != 0) {\\r\\n            transferAmount = transferAmount.sub(marketingFee);\\r\\n            _reflectionBalance[marketingWallet] = _reflectionBalance[marketingWallet].add(marketingFee.mul(rate));\\r\\n            if (_isExcluded[marketingWallet]) {\\r\\n                _tokenBalance[marketingWallet] = _tokenBalance[marketingWallet].add(marketingFee);\\r\\n            }\\r\\n            emit Transfer(account, marketingWallet, marketingFee);\\r\\n        }\\r\\n        if(taxFee != 0) {\\r\\n            transferAmount = transferAmount.sub(taxFee);\\r\\n            _reflectionTotal = _reflectionTotal.sub(taxFee.mul(rate));\\r\\n        }\\r\\n        _feeTotal = _feeTotal.add(taxFee).add(otherFee).add(marketingFee);\\r\\n        return transferAmount;\\r\\n    }\\r\\n\\r\\n    function getAmountToSwap() internal returns(uint256 liqFeeTotal, uint256 valutFeeTotal, uint256 buybackFeeTotal)  {\\r\\n        uint256 maxTokensBeforeSwap = balanceOf(pair).mul(maxSwapPercent).div(10000);\\r\\n        if(_liqFeeCollected > maxTokensBeforeSwap) {\\r\\n            _liqFeeCollected = _liqFeeCollected.sub(maxTokensBeforeSwap);\\r\\n            liqFeeTotal = maxTokensBeforeSwap;\\r\\n            return(liqFeeTotal, valutFeeTotal, buybackFeeTotal);\\r\\n        }\\r\\n        uint256 totalFee = _liqFeeCollected;\\r\\n        liqFeeTotal = _liqFeeCollected;\\r\\n        _liqFeeCollected = 0;\\r\\n        if(totalFee.add(_vaultFeeCollected) > maxTokensBeforeSwap) {\\r\\n            uint256 extraTokens = totalFee.add(_vaultFeeCollected).sub(maxTokensBeforeSwap);\\r\\n            valutFeeTotal = _vaultFeeCollected.sub(extraTokens);\\r\\n            _vaultFeeCollected = extraTokens;\\r\\n            return(liqFeeTotal, valutFeeTotal, buybackFeeTotal);\\r\\n        }\\r\\n        totalFee = totalFee.add(_vaultFeeCollected);\\r\\n        valutFeeTotal = _vaultFeeCollected;\\r\\n        _vaultFeeCollected = 0;\\r\\n        if(totalFee.add(_buybackFeeCollected) > maxTokensBeforeSwap) {\\r\\n            uint256 extraTokens = totalFee.add(_buybackFeeCollected).sub(maxTokensBeforeSwap);\\r\\n            buybackFeeTotal = _buybackFeeCollected.sub(extraTokens);\\r\\n            _buybackFeeCollected = extraTokens;\\r\\n            return(liqFeeTotal, valutFeeTotal, buybackFeeTotal);\\r\\n        }\\r\\n        totalFee = totalFee.add(_buybackFeeCollected);\\r\\n        buybackFeeTotal = _buybackFeeCollected;\\r\\n        _buybackFeeCollected = 0;\\r\\n    }\\r\\n\\r\\n    function swap() private lockTheSwap {\\r\\n        (uint256 liqFeeTotal, uint256 valutFeeTotal, uint256 buybackFeeTotal)  = getAmountToSwap();\\r\\n        uint256 totalFee = liqFeeTotal.add(valutFeeTotal).add(buybackFeeTotal);\\r\\n\\r\\n        if(minTokensBeforeSwap > totalFee || lastSwapTimestamp + swapInterval >= block.timestamp) return;\\r\\n        lastSwapTimestamp = block.timestamp;\\r\\n\\r\\n        uint256 amountToLiquify = totalFee.mul(liqFeeTotal).div(totalFee).div(2);\\r\\n        uint256 amountToSwap = totalFee.sub(amountToLiquify);\\r\\n\\r\\n        address[] memory sellPath = new address[](2);\\r\\n        sellPath[0] = address(this);\\r\\n        sellPath[1] = router.WETH();       \\r\\n\\r\\n        uint256 balanceBefore = address(this).balance;\\r\\n        uint256 amountBNBLiquidity;\\r\\n\\r\\n        _approve(address(this), address(router), totalFee);\\r\\n        try router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            amountToSwap,\\r\\n            0,\\r\\n            sellPath,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        ) {\\r\\n            uint256 amountBNB = address(this).balance.sub(balanceBefore);\\r\\n\\r\\n            uint256 totalBNBFee = totalFee.sub(liqFeeTotal.div(2));\\r\\n            amountBNBLiquidity = amountBNB.mul(liqFeeTotal).div(totalBNBFee).div(2);\\r\\n            uint256 amountBNBVault = amountBNB.mul(valutFeeTotal).div(totalBNBFee);\\r\\n            // uint256 amountBNBBuyback = amountBNB.sub(amountBNBLiquidity).sub(amountBNBVault);\\r\\n\\r\\n            if(amountBNBVault > 0) {\\r\\n                feeReceiver.onFeeReceived{value: amountBNBVault}(amountBNBVault);\\r\\n            }\\r\\n        }\\r\\n        catch {}\\r\\n\\r\\n        if(amountToLiquify > 0) {\\r\\n            try router.addLiquidityETH{value: amountBNBLiquidity}(\\r\\n                address(this),\\r\\n                amountToLiquify,\\r\\n                0,\\r\\n                0,\\r\\n                DEAD,\\r\\n                block.timestamp\\r\\n            ) {\\r\\n                emit AutoLiquify(amountBNBLiquidity, amountToLiquify);\\r\\n            }\\r\\n            catch {}\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function swapEthForTokens(uint256 amount) private returns (bool) {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = router.WETH();\\r\\n        path[1] = address(this);\\r\\n\\r\\n        try router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\\r\\n                0,\\r\\n                path,\\r\\n                address(buybackWallet), //@dev Uniswap doesn't allow for a token to buy itself, so we have to use an external account\\r\\n                block.timestamp\\r\\n            ) { return true; }\\r\\n        catch { return false; }\\r\\n    }\\r\\n   \\r\\n    function buyAndBurnToken(uint256 amount) external lockTheSwap onlyOwner {\\r\\n        require(amount <= address(this).balance, \\\"Insuficent Balance to burn tokens!\\\");\\r\\n\\r\\n        bool success =  swapEthForTokens(amount);\\r\\n\\r\\n        if(success) {\\r\\n            //@dev How much tokens we swaped into\\r\\n            uint256 swapedTokens = balanceOf(address(buybackWallet));\\r\\n\\r\\n            uint256 rate =  _getReflectionRate();\\r\\n\\r\\n            _reflectionBalance[address(buybackWallet)] = 0;\\r\\n            if (_isExcluded[address(buybackWallet)]) {\\r\\n                _tokenBalance[address(buybackWallet)] = 0;\\r\\n            }\\r\\n            \\r\\n            buybackTotal = buybackTotal.add(swapedTokens);\\r\\n            _tokenTotal = _tokenTotal.sub(swapedTokens);\\r\\n            _reflectionTotal = _reflectionTotal.sub(swapedTokens.mul(rate));\\r\\n            \\r\\n            emit Transfer(address(buybackWallet), address(0), swapedTokens);\\r\\n            emit BuybackAndBurned(amount, swapedTokens);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getReflectionRate() private view returns (uint256) {\\r\\n        uint256 reflectionSupply = _reflectionTotal;\\r\\n        uint256 tokenSupply = _tokenTotal;\\r\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\r\\n            if (_reflectionBalance[_excluded[i]] > reflectionSupply || _tokenBalance[_excluded[i]] > tokenSupply)\\r\\n                return _reflectionTotal.div(_tokenTotal);\\r\\n            reflectionSupply = reflectionSupply.sub(_reflectionBalance[_excluded[i]]);\\r\\n            tokenSupply = tokenSupply.sub(_tokenBalance[_excluded[i]]);\\r\\n        }\\r\\n        if (reflectionSupply < _reflectionTotal.div(_tokenTotal)) return _reflectionTotal.div(_tokenTotal);\\r\\n        return reflectionSupply.div(tokenSupply);\\r\\n    }\\r\\n\\r\\n    function setTaxless(address account, bool value) external onlyOwner {\\r\\n        isTaxless[account] = value;\\r\\n    }\\r\\n\\r\\n    function setSwapEnabled(bool enabled) external onlyOwner {\\r\\n        swapEnabled = enabled;\\r\\n        SwapUpdated(enabled);\\r\\n    }\\r\\n\\r\\n    function setFeeActive(bool value) external onlyOwner {\\r\\n        isFeeActive = value;\\r\\n    }\\r\\n\\r\\n    function setBNBVaultFee(uint256 buy, uint256 sell, uint256 p2p) external onlyOwner {\\r\\n        require(buy <= 1000 && sell <= 1000 && p2p <= 1000, \\\"Fee out of range!\\\");\\r\\n        \\r\\n        _vaultFee[0] = buy;\\r\\n        _vaultFee[1] = sell;\\r\\n        _vaultFee[2] = p2p;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setMarketingFee(uint256 buy, uint256 sell, uint256 p2p) external onlyOwner {\\r\\n        require(buy <= 1000 && sell <= 1000 && p2p <= 1000, \\\"Fee out of range!\\\");\\r\\n\\r\\n        _marketingFee[0] = buy;\\r\\n        _marketingFee[1] = sell;\\r\\n        _marketingFee[2] = p2p;\\r\\n    }\\r\\n\\r\\n    function setLiquidityFee(uint256 buy, uint256 sell, uint256 p2p) external onlyOwner {\\r\\n        require(buy <= 1000 && sell <= 1000 && p2p <= 1000, \\\"Fee out of range!\\\");\\r\\n\\r\\n        _liqFee[0] = buy;\\r\\n        _liqFee[1] = sell;\\r\\n        _liqFee[2] = p2p;\\r\\n    }\\r\\n\\r\\n    function setBuybackFee(uint256 buy, uint256 sell, uint256 p2p) external onlyOwner {\\r\\n        require(buy <= 1000 && sell <= 1000 && p2p <= 1000, \\\"Fee out of range!\\\");\\r\\n\\r\\n        _buybackFee[0] = buy;\\r\\n        _buybackFee[1] = sell;\\r\\n        _buybackFee[2] = p2p;\\r\\n    }\\r\\n\\r\\n    function setMarketingWallet(address wallet) external onlyOwner {\\r\\n        marketingWallet = wallet;\\r\\n    }\\r\\n\\r\\n    function setVaultFeeReceiver(IFeeReceiver _feeReceiver)  external onlyOwner {\\r\\n        require(address(_feeReceiver) != address(0));\\r\\n        feeReceiver = _feeReceiver;\\r\\n    }\\r\\n\\r\\n    function setSwapInterval(uint256 interval) external onlyOwner {\\r\\n        swapInterval = interval;\\r\\n        emit SwapIntervalUpdated(interval);\\r\\n    }\\r\\n\\r\\n    function setMinTokensBeforeSwap(uint256 amount) external onlyOwner {\\r\\n        minTokensBeforeSwap = amount;\\r\\n    }\\r\\n\\r\\n    function setMaxPercent(uint256 percent) external onlyOwner {\\r\\n        maxSwapPercent = percent;\\r\\n    }\\r\\n\\r\\n    function withdrawAccidentallySentTokens(IERC20 token, address recipient, uint256 amount) external onlyOwner {\\r\\n        require(address(token) != address(this), \\\"Token not allowed!\\\");\\r\\n        token.transfer(recipient, amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    receive() external payable {}\\r\\n    \\r\\n    function setBPAddrss(address _bp) external onlyOwner {\\r\\n        require(address(BP)== address(0), \\\"Can only be initialized once\\\");\\r\\n        BP = BPContract(_bp);\\r\\n    }\\r\\n\\r\\n    function setBpEnabled(bool _enabled) external onlyOwner {\\r\\n        bpEnabled = _enabled;\\r\\n    }\\r\\n\\r\\n    function setBotProtectionDisableForever() external onlyOwner{\\r\\n        require(BPDisabledForever == false);\\r\\n        BPDisabledForever = true;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buybackWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"BuybackAndBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invertval\",\"type\":\"uint256\"}],\"name\":\"SwapIntervalUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BP\",\"outputs\":[{\"internalType\":\"contract BPContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BPDisabledForever\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_buybackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_liqFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_vaultFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bpEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyAndBurnToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"contract IFeeReceiver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFeeActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTaxless\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSwapTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSwapPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokensBeforeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2p\",\"type\":\"uint256\"}],\"name\":\"setBNBVaultFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bp\",\"type\":\"address\"}],\"name\":\"setBPAddrss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setBotProtectionDisableForever\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setBpEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2p\",\"type\":\"uint256\"}],\"name\":\"setBuybackFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setFeeActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2p\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2p\",\"type\":\"uint256\"}],\"name\":\"setMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setMaxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"setSwapInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setTaxless\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFeeReceiver\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"setVaultFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAccidentallySentTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ShibaGalaxy", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000b35869ecfb96c27493ca281133edd911e479d0d9000000000000000000000000e234adb58788ee9f02fca8b5db6593a26ab4ff4700000000000000000000000066e5c73f9c0197b18c0876f2e132b164ebc4bbbb000000000000000000000000d4cb36600d87929ca154de6cd08a8aac061cce1a", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}