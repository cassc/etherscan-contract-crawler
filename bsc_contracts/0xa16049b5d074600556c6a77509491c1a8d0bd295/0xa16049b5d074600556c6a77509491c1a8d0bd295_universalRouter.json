{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.6.6;\r\n\r\nlibrary TransferHelper {\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function approve(address spender, uint value) external returns (bool);\r\n}\r\n\r\ncontract universalRouter {\r\n    address public immutable DEV;\r\n\r\n    address payable private administrator;\r\n\r\n    mapping(address => bool) private whiteList;\r\n\r\n    receive() external payable {}\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == DEV, \"admin: wut do you try?\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        DEV = administrator = payable(msg.sender);\r\n        whiteList[msg.sender] = true;\r\n    }\r\n\r\n    function sendTokenBack(address token, uint256 amount) external virtual onlyAdmin {\r\n        TransferHelper.safeTransfer(token, DEV, amount);\r\n    }\r\n\r\n    function sendTokenBackAll(address token) external virtual onlyAdmin {\r\n        TransferHelper.safeTransfer(token, DEV, IERC20(token).balanceOf(address(this)));\r\n    }\r\n\r\n    function sendEthBack() external virtual onlyAdmin {\r\n        administrator.transfer(address(this).balance);\r\n    }\r\n\r\n    function setWhite(address account) external virtual onlyAdmin {\r\n        whiteList[account] = true;\r\n    }\r\n\r\n    function balanceOf(address _token, address tokenOwner) public view returns (uint balance) {\r\n      return IERC20(_token).balanceOf(tokenOwner);\r\n    }\r\n\r\n    function decimals(address _token) public view returns (uint8 decimal) {\r\n      return IERC20(_token).decimals();\r\n    }\r\n\r\n    function getAmountsOut(address _router, uint amountIn, address[] memory path) public view returns (uint[] memory amounts) {\r\n        return IUniswapV2Router02(_router).getAmountsOut(amountIn, path);\r\n    }\r\n\r\n    function execute(address _router, address tokenA, address tokenB, uint amountIn, uint amountOutMin, uint deadline, uint swapFee) external virtual {\r\n        require(whiteList[msg.sender], \"not on the white list\");\r\n        address[] memory _path = new address[](2);\r\n        _path[0] = tokenA;\r\n        _path[1] = tokenB;\r\n        IERC20(_path[0]).approve(_router, amountIn);\r\n        if(swapFee==0){\r\n            IUniswapV2Router02(_router).swapExactTokensForTokens(amountIn, amountOutMin, _path, address(this), deadline);\r\n        }else{\r\n            IUniswapV2Router02(_router).swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, amountOutMin, _path, address(this), deadline);\r\n        }\r\n        \r\n    }\r\n\r\n    function multicall(address _router, address tokenA, address tokenB, uint amountIn, uint amountOutMin, uint deadline, uint swapFee) external virtual {\r\n        require(whiteList[msg.sender], \"not on the white list\");\r\n        address[] memory _path = new address[](2);\r\n        _path[0] = tokenA;\r\n        _path[1] = tokenB;\r\n        IERC20(_path[0]).approve(_router, amountIn);\r\n        if(swapFee==0){\r\n            IUniswapV2Router02(_router).swapExactTokensForTokens(amountIn, amountOutMin, _path, address(this), deadline);\r\n        }else{\r\n            IUniswapV2Router02(_router).swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, amountOutMin, _path, address(this), deadline);\r\n        }\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DEV\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"decimal\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"}],\"name\":\"multicall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendEthBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendTokenBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"sendTokenBackAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setWhite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "universalRouter", "CompilerVersion": "v0.6.6+commit.6c089d02", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5e81d031d3d331720910ed9a629138d799df3482dd6ec791a8aeec2561c4af0e"}