{"SourceCode": "{\"BEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nimport  \\\"./IBEP20.sol\\\";\\nimport  \\\"./Ownable.sol\\\";\\nimport  \\\"./SafeMath.sol\\\";\\n\\ncontract BEP20 is Context, IBEP20, Ownable {\\n  using SafeMath for uint256;\\n  uint256 constant thirtyDays = 2592000;\\n  uint256 constant cliffSixM       = 6;\\n  uint256 constant cliffFourM      = 4;\\n  uint256 constant cliffThreeM     = 3;\\n  uint256 constant cliffTwoM       = 2;\\n\\n  mapping (address =\\u003e uint256) private _balances;\\n\\n  mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\n\\n  uint256 private _totalSupply;\\n  uint256 private _totalSupply_6M;\\n  uint256 private _totalSupply_4M;\\n  uint256 private _totalSupply_3M;\\n  uint256 private _totalSupply_2M;\\n\\n  bool    private _initialMintIsDone;\\n  bool    private _authoriseMin_6M;\\n  bool    private _authoriseMin_4M;\\n  bool    private _authoriseMin_3M;\\n  bool    private _authoriseMin_2M;\\n\\n  uint256 immutable private _maxSupply;\\n  uint256 immutable private _maxSupply_6M;\\n  uint256 immutable private _maxSupply_4M;\\n  uint256 immutable private _maxSupply_3M;\\n  uint256 immutable private _maxSupply_2M;\\n\\n  uint256 private _wallet1MonthlySupply;\\n  uint256 private _wallet2MonthlySupply;\\n  uint256 private _wallet3MonthlySupply;\\n  uint256 private _wallet4MonthlySupply;\\n  uint256 private _wallet5MonthlySupply;\\n  uint256 private _wallet6MonthlySupply;\\n\\n\\n  uint256 private _wallet1EndOfIcoSupply;\\n  uint256 private _wallet2EndOfIcoSupply;\\n  uint256 private _wallet3EndOfIcoSupply;\\n  uint256 private _wallet4EndOfIcoSupply;\\n  uint256 private _wallet5EndOfIcoSupply;\\n  uint256 private _wallet6EndOfIcoSupply;\\n\\n  uint8   private _decimals;\\n  string  private _symbol;\\n  string  private _name;\\n\\n  uint256 private _endOfICO;\\n\\n  uint256 private _startTime_2M;\\n  uint256 private _startTime_3M;\\n  uint256 private _startTime_4M;\\n  uint256 private _startTime_6M;\\n\\n  address private _wallet1;\\n  address private _wallet2;\\n  address private _wallet3;\\n  address private _wallet4;\\n  address private _wallet5;\\n  address private _wallet6;\\n\\n  constructor(address wallet1, address wallet2, address wallet3,address wallet4, address wallet5, address wallet6)  {\\n    _name                 = \\\"Artrade Token\\\";\\n    _symbol               = \\\"ATR\\\";\\n    _decimals             = 9;\\n    _balances[msg.sender] = 0;\\n\\n    _endOfICO             = block.timestamp; \\n    _startTime_2M         = _endOfICO + (thirtyDays * 2); // 2 month after\\n    _startTime_3M         = _endOfICO + (thirtyDays * 3); // 3 month after\\n    _startTime_4M         = _endOfICO + (thirtyDays * 5); // 5 month after\\n    _startTime_6M         = _endOfICO + (thirtyDays * 7); // 7 month after\\n\\n    _wallet1MonthlySupply        = 4739256671          * (10 ** uint256(7)); //\\n    _wallet2MonthlySupply        = 21962955            * (10 ** uint256(_decimals)); //\\n    _wallet3MonthlySupply        = 6967485             * (10 ** uint256(_decimals)); //\\n    _wallet4MonthlySupply        = 112052348683481     * (10 ** uint256(2)); //\\n    _wallet5MonthlySupply        = 151894456           * (10 ** uint256(8)); //\\n\\n\\n\\n    _wallet1EndOfIcoSupply       = 21326655022   * (10 ** uint256(7));\\n    _wallet2EndOfIcoSupply       = 20807010     * (10 ** uint256(_decimals));\\n    _wallet3EndOfIcoSupply       = 9289980      * (10 ** uint256(_decimals));\\n    _wallet4EndOfIcoSupply       = 112052347899114    * (10 ** uint256(2));\\n    _wallet5EndOfIcoSupply       = 151894456    * (10 ** uint256(8));\\n    _wallet6EndOfIcoSupply       = 70243377     * (10 ** uint256(_decimals));\\n\\n\\n    _maxSupply_6M         = 1482472951  * (10 ** uint256(_decimals));\\n    _maxSupply_4M         = 92899800    * (10 ** uint256(_decimals));\\n    _maxSupply_3M         = 78436644    * (10 ** uint256(_decimals));\\n    _maxSupply_2M         = 75947228    * (10 ** uint256(_decimals));\\n\\n    _maxSupply            = 1800000000 * (10 ** uint256(_decimals)); // 1,8 MD\\n\\n    _initialMintIsDone    = false;\\n\\n\\n    _wallet1        = wallet1;\\n    _wallet2        = wallet2;\\n    _wallet3        = wallet3;\\n    _wallet4        = wallet4;\\n    _wallet5        = wallet5;\\n    _wallet6        = wallet6;\\n\\n    _mint(_wallet1, _wallet1EndOfIcoSupply);\\n    _mint(_wallet2, _wallet2EndOfIcoSupply);\\n    _mint(_wallet3, _wallet3EndOfIcoSupply);\\n    _mint(_wallet4, _wallet4EndOfIcoSupply);\\n    _mint(_wallet5, _wallet5EndOfIcoSupply);\\n    _mint(_wallet6, _wallet6EndOfIcoSupply);\\n    _totalSupply_2M   = _totalSupply_2M.add(_wallet5EndOfIcoSupply);\\n    _totalSupply_3M   = _totalSupply_3M.add(_wallet4EndOfIcoSupply);\\n    _totalSupply_4M   = _totalSupply_4M.add(_wallet3EndOfIcoSupply);\\n    _totalSupply_6M   = _totalSupply_6M.add(_wallet1EndOfIcoSupply).add(_wallet2EndOfIcoSupply);\\n\\n    _totalSupply.add(_wallet1EndOfIcoSupply).add(_wallet2EndOfIcoSupply).add(_wallet3EndOfIcoSupply).add(_wallet4EndOfIcoSupply).add(_wallet5EndOfIcoSupply).add(_wallet6EndOfIcoSupply);\\n  }\\n\\n  /**\\n   * @dev Returns the bep token owner.\\n   */\\n  function getOwner() public view  override returns (address) {\\n    return owner();\\n  }\\n  /**\\n   * @dev Returns  Round 3 address.\\n   */\\n  function getRound3Add() external view returns (address) {\\n    return _wallet6;\\n  }\\n\\n  /**\\n   * @dev Returns  Round 2 address.\\n   */\\n  function getRaound2Add() external view returns (address) {\\n    return _wallet5;\\n  }\\n\\n  /**\\n   * @dev Returns  Round 1  address.\\n   */\\n  function getRound1Add() external view returns (address) {\\n    return _wallet4;\\n  }\\n\\n  /**\\n   * @dev Returns  Private Sale address.\\n   */\\n  function getPrivateSaleAdd() external view returns (address) {\\n    return _wallet3;\\n  }\\n\\n  /**\\n   * @dev Returns  Team and Associates address.\\n   */\\n  function getTeamAdd() external view returns (address) {\\n    return _wallet2;\\n  }\\n\\n  /**\\n   * @dev Returns  reserve address.\\n   */\\n  function getReserveAdd() external view returns (address) {\\n    return _wallet1;\\n  }\\n\\n  /**\\n   * @dev Returns the token decimals.\\n   */\\n  function decimals() public view  override returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @dev Returns the token symbol.\\n   */\\n  function symbol() public view  override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n  * @dev Returns the token name.\\n  */\\n  function name() public view  override returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev See {BEP20-totalSupply}.\\n   */\\n  function totalSupply() public view  override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @dev See {BEP20-balanceOf}.\\n   */\\n  function balanceOf(address account) public view  override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev Returns the cap on the token\\u0027s total supply.\\n   */\\n   function maxSupply() public view  returns (uint256) {\\n       return _maxSupply;\\n   }\\n\\n   /**\\n   * @dev Returns the end of ico .\\n   */\\n   function getEndOfICO() public view  returns (uint256) {\\n       return _endOfICO;\\n   }\\n\\n  /**\\n   * @dev See {BEP20-startTime}.\\n   */\\n   function startTime() external view returns (uint256) {\\n      return _endOfICO;\\n   }\\n\\n  /**\\n   * @dev See {BEP20-transfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - `recipient` cannot be the zero address.\\n   * - the caller must have a balance of at least `amount`.\\n   */\\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {BEP20-allowance}.\\n   */\\n  function allowance(address owner, address spender) public view  override returns (uint256) {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev See {BEP20-approve}.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function approve(address spender, uint256 amount) public virtual  override returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {BEP20-transferFrom}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\n   * required by the EIP. See the note at the beginning of {BEP20};\\n   *\\n   * Requirements:\\n   * - `sender` and `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   * - the caller must have allowance for `sender`\\u0027s tokens of at least\\n   * `amount`.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) public virtual  override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"BEP20: transfer amount exceeds allowance\\\"));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {BEP20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {BEP20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `spender` must have allowance for the caller of at least\\n   * `subtractedValue`.\\n   */\\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"BEP20: decreased allowance below zero\\\"));\\n    return true;\\n  }\\n\\n  /** @dev Creates `amount` tokens and assigns them to the right\\n\\t * adresses (associatesAdd, teamAdd, seedAdd, privSaleAdd,\\n\\t * marketingAdd, icoRound1Add , icoRound2Add, icoRound3Add,\\n\\t * reserveAdd), increasing _totalSupply_XM sub-supplies and\\n\\t * the total supply\\n  */\\n  function mint(uint256 mintValue) public onlyOwner returns (bool) {\\n        require(( mintValue == cliffSixM) ||  ( mintValue == cliffFourM) || ( mintValue == cliffThreeM) || ( mintValue == cliffTwoM), \\\"BEP20: mint value not authorized\\\");\\n        if ( mintValue == cliffSixM){\\n            require(block.timestamp \\u003e= _startTime_6M , \\\"BEP20: too early for minting request\\\");\\n            require(_totalSupply_6M.add(_wallet1MonthlySupply).add(_wallet2MonthlySupply) \\u003c= _maxSupply_6M, \\\"BEP20: Assocites, Reserve, Team and Seed cap exceeded\\\");\\n            require(_totalSupply.add(_wallet1MonthlySupply).add(_wallet2MonthlySupply) \\u003c= maxSupply(), \\\"BEP20: cap exceeded\\\");\\n            _mint(_wallet1, _wallet1MonthlySupply);\\n            _mint(_wallet2, _wallet2MonthlySupply);\\n            _totalSupply_6M   = _totalSupply_6M.add(_wallet1MonthlySupply).add(_wallet2MonthlySupply);\\n            _startTime_6M     = _startTime_6M.add(thirtyDays);   \\n        }\\n        if ( mintValue == cliffFourM){\\n            require(block.timestamp \\u003e= _startTime_4M , \\\"BEP20: too early for minting request\\\");\\n            require(_totalSupply_4M.add(_wallet3MonthlySupply) \\u003c= _maxSupply_4M, \\\"BEP20: Marketing and Private Sale cap exceeded\\\");\\n            require(_totalSupply.add(_wallet3MonthlySupply) \\u003c= maxSupply(), \\\"BEP20: cap exceeded\\\");\\n            _mint(_wallet3, _wallet3MonthlySupply);\\n            _totalSupply_4M   = _totalSupply_4M.add(_wallet3MonthlySupply);\\n            _startTime_4M     = _startTime_4M.add(thirtyDays);  \\n        }\\n        if ( mintValue == cliffThreeM){\\n            require(block.timestamp \\u003e= _startTime_3M, \\\"BEP20: too early for minting request\\\");\\n            require(_totalSupply_3M.add(_wallet4MonthlySupply)\\u003c= _maxSupply_3M, \\\"BEP20: ICO Round 1 cap exceeded\\\");\\n            require(_totalSupply.add(_wallet4MonthlySupply) \\u003c= maxSupply(), \\\"BEP20: cap exceeded\\\");\\n            _mint(_wallet4, _wallet4MonthlySupply);\\n            _totalSupply_3M   = _totalSupply_3M.add(_wallet4MonthlySupply);\\n            _startTime_3M     = _startTime_3M.add(thirtyDays);\\n        }\\n        if ( mintValue == cliffTwoM){\\n            require(block.timestamp \\u003e= _startTime_2M, \\\"BEP20: too early for minting request\\\");\\n            require(_totalSupply_2M.add(_wallet5MonthlySupply)\\u003c= _maxSupply_2M, \\\"BEP20: ICO Round 2 cap exceeded\\\");\\n            require(_totalSupply.add(_wallet5MonthlySupply) \\u003c= maxSupply(), \\\"BEP20: cap exceeded\\\");\\n            _mint(_wallet5, _wallet5MonthlySupply);\\n            _totalSupply_2M   = _totalSupply_2M.add(_wallet5MonthlySupply);\\n            _startTime_2M     = _startTime_2M.add(thirtyDays);\\n        }\\n    return true;\\n  }\\n\\n\\n  /**\\n    * @dev Destroys `amount` tokens from the caller.\\n    *\\n    * See {ERC20-_burn}.\\n    */\\n  function burn(uint256 amount) public  returns (bool) {\\n    _burn(_msgSender(), amount);\\n    return true;\\n  }\\n\\n  /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller\\u0027s\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public returns (bool) {\\n        _burnFrom(account, amount);\\n        return true;\\n    }\\n\\n  /**\\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\\n   *\\n   * This is internal function is equivalent to {transfer}, and can be used to\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\n   *\\n   * Emits a {Transfer} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `sender` cannot be the zero address.\\n   * - `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   */\\n  function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n    require(sender != address(0), \\\"BEP20: transfer from the zero address\\\");\\n    require(recipient != address(0), \\\"BEP20: transfer to the zero address\\\");\\n    _balances[sender] = _balances[sender].sub(amount, \\\"BEP20: transfer amount exceeds balance\\\");\\n    _balances[recipient] = _balances[recipient].add(amount);\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n   * the total supply.\\n   *\\n   * Emits a {Transfer} event with `from` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `to` cannot be the zero address.\\n   */\\n  function _mint(address account, uint256 amount) internal {\\n    require(account != address(0), \\\"BEP20: mint to the zero address\\\");\\n\\n    _totalSupply = _totalSupply.add(amount);\\n    _balances[account] = _balances[account].add(amount);\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\n   * total supply.\\n   *\\n   * Emits a {Transfer} event with `to` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens.\\n   */\\n  function _burn(address account, uint256 amount) internal {\\n    require(account != address(0), \\\"BEP20: burn from the zero address\\\");\\n\\n    _balances[account] = _balances[account].sub(amount, \\\"BEP20: burn amount exceeds balance\\\");\\n    _totalSupply = _totalSupply.sub(amount);\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n   *\\n   * This is internal function is equivalent to `approve`, and can be used to\\n   * e.g. set automatic allowances for certain subsystems, etc.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   */\\n  function _approve(address owner, address spender, uint256 amount) internal virtual {\\n    require(owner != address(0), \\\"BEP20: approve from the zero address\\\");\\n    require(spender != address(0), \\\"BEP20: approve to the zero address\\\");\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n   * from the caller\\u0027s allowance.\\n   *\\n   * See {_burn} and {_approve}.\\n   */\\n  function _burnFrom(address account, uint256 amount) internal {\\n    _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"BEP20: burn amount exceeds allowance\\\"));\\n    _burn(account, amount);\\n  }\\n\\n\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\"},\"IBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IBEP20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the token decimals.\\n   */\\n  function decimals() external view returns (uint8);\\n\\n  /**\\n   * @dev Returns the token symbol.\\n   */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n  * @dev Returns the token name.\\n  */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the bep token owner.\\n   */\\n  function getOwner() external view returns (address);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address _owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\n import \\\"./Context.sol\\\";\\n\\ncontract Ownable is Context {\\n  address private _owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor ()  {\\n    address msgSender = _msgSender();\\n    _owner = msgSender;\\n    emit OwnershipTransferred(address(0), msgSender);\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public onlyOwner {\\n    emit OwnershipTransferred(_owner, address(0));\\n    _owner = address(0);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public onlyOwner {\\n    _transferOwnership(newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   */\\n  function _transferOwnership(address newOwner) internal {\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n  }\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity\\u0027s `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity\\u0027s `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity\\u0027s `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b \\u003c= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity\\u0027s `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n    // benefit is lost if \\u0027b\\u0027 is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, \\\"SafeMath: division by zero\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b \\u003e 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wallet2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wallet3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wallet4\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wallet5\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wallet6\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEndOfICO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrivateSaleAdd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaound2Add\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserveAdd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRound1Add\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRound3Add\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTeamAdd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintValue\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BEP20", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008b44760752991775c9ab551bc83265ca3a32f45a000000000000000000000000f3c46eb321cfe2e779581bf459cae0eb865fc1f0000000000000000000000000b5a245b03c56a5363cc96a87abbabedcd947f53200000000000000000000000025fbad474bb403cebb08ffae6bb7f587290b7f070000000000000000000000008e7d0c4ef9f55503f8a1861630e3b012bb1d26b1000000000000000000000000125db70bd13e626c20c00e1297c28d9d9b0c446d", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ffca8b178e00b32aa4ef3415fb354e3c546021262e6e166aca2042f5a126fb35"}