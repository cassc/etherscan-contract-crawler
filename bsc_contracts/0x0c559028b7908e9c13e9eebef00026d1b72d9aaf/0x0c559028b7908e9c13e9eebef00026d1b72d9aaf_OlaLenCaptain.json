{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Ola/Peripheral/Captain/OlaLenCaptain.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./CaptainStorage.sol\\\";\\n\\ninterface IAdminableForCaptain {\\n    function admin() external view returns (address);\\n    function pendingAdmin() external view returns (address);\\n    function _acceptAdmin() external returns (uint);\\n    function _setPendingAdmin(address newPendingAdmin) external returns (uint);\\n}\\n\\ninterface RegistryForCaptain {\\n    function getImplementationForLn(address lnUnitroller, bytes32 contractNameHash) external returns (address);\\n    function getLnVersion(address lnUnitroller) external returns (uint256);\\n    function updateLnVersion(uint256 newVersion) external returns (bool);\\n}\\n\\ninterface IComptrollerForCaptain  is IAdminableForCaptain { \\n    \\n    function bouncer() external view returns(address);\\n    function registry() external view returns(address);\\n    function rainMaker() external view returns(address);\\n    function getAllMarkets() external returns (address[] memory);\\n\\n    function hasBouncer() view external returns (bool);\\n    function _supportNewMarket(address underlying,\\n        bytes32 contractNameHash,\\n        bytes calldata params,\\n        address interestRateModel,\\n        bytes calldata becomeImplementationData) external returns (uint);\\n\\n    function _setCollateralFactor(\\n        address cToken,\\n        uint newCollateralFactorMantissa\\n    ) external returns (uint);\\n\\n    function _setLiquidationFactor(\\n        address cToken,\\n        uint newLiquidationFactorMantissa\\n    ) external returns (uint);\\n\\n    function _setLiquidationIncentive(\\n        address cToken,\\n        uint newLiquidationIncentiveMantissa\\n    ) external returns (uint);\\n\\n    function existingMarketTypes(\\n        address underlying, \\n        bytes32 contractNameHash\\n    ) external returns (address);\\n\\n    function _setRainMaker(bytes32 contractNameHash, bytes calldata deployParams, bytes calldata retireParams, bytes calldata connectParams) external returns (uint);\\n\\n    function _setMinBorrowAmountUsd(uint minBorrowAmountUsd_) external returns (uint);\\n    function _setPauseGuardian(address newPauseGuardian) external returns (uint);\\n    function _setBorrowCapGuardian(address newBorrowCapGuardian) external;\\n    function _setAdminBankAddress(address payable newAdminBankAddress) external;\\n    function _setMarketBorrowCaps(address[] calldata cTokens, uint[] calldata newBorrowCaps) external;\\n    function _setMintPaused(address cToken, bool state) external returns (bool);\\n    function _setBorrowPaused(address cToken, bool state) external returns (bool);\\n    function _setTransferPaused(bool state) external returns (bool);\\n    function _setCustomOracle(address underlying, address oracle) external returns (uint);\\n\\n    function _setActiveCollateralCaps(\\n        address[] calldata cTokens,\\n        uint[] calldata newActiveCollateralCaps\\n    ) external;\\n\\n}\\n\\ninterface IUnitrollerForCaptain {\\n    function _upgradeLnSystemVersion(uint256 newSystemVersion, bytes calldata becomeImplementationData) external returns (uint);\\n}\\n\\ninterface ICTokenForCaptain is IAdminableForCaptain {\\n    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\\n    function _setInterestRateModel(address newInterestRateModel) external returns (uint);\\n}\\n\\ninterface IStakeableOTokenForCaptain {\\n    function _migrateStakingTarget(address newStakingTarget, bytes calldata params) external returns (uint);\\n}\\n\\ninterface IRainMakerForCaptain {\\n    function _emergencyZeroSpeeds(address[] calldata _cTokens) external;\\n    function _setDynamicCompSpeeds(address[] calldata _cTokens, uint[] calldata _compSupplySpeeds, uint[] calldata _compBorrowSpeeds) external;\\n    function _setDynamicCompSpeed(address cToken, uint compSupplySpeed, uint compBorrowSpeed) external;\\n    function _setLnIncentiveToken(address incentiveTokenAddress) external;\\n}\\n\\n/**\\n * @title Ola LeN Captain\\n * @author Ola FinanceS\\n*/\\ncontract OlaLenCaptain is CaptainAdminStorage {\\n\\n    enum LenCaptainRoles {\\n        PAUSER,\\n        RESUMER,\\n        MAINTAINER\\n    }\\n\\n    IComptrollerForCaptain public managedUnitroller;\\n    address public securityManager;\\n    address public oraclesManager;\\n\\n    mapping(address => bool) public hasPauserRole;\\n    mapping(address => bool) public hasResumerRole;\\n    mapping(address => bool) public hasMaintainerRole;\\n\\n    // Note : These lists are used for tracking, they do not take part in the actual restriction logic\\n    address[] public pausersList;\\n    address[] public resumersList;\\n    address[] public maintainersList;\\n\\n    struct RainMakerDynamicSpeeds {\\n         address[] cTokens;\\n         uint[] compSupplySpeeds;\\n         uint[] compBorrowSpeeds;\\n    }\\n\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED\\n    }\\n\\n    /**\\n      * @notice Emitted when pendingAdmin is changed\\n      */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n      * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n      */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @notice Emitted when the 'security manager' is set\\n     */\\n    event NewSecurityManager(address oldSecurityManager, address newSecurityManager);\\n\\n    /**\\n     * @notice Emitted when the 'oracles manager' is set\\n     */\\n    event NewOraclesManager(address oldOraclesManager, address newOraclesManager);\\n\\n    /**\\n     * @notice Emitted when a 'pauser' is whitelisted\\n     */\\n    event PauserAdded(address pauser);\\n    /**\\n     * @notice Emitted when a 'pauser' is removed from whitelist\\n     */\\n    event PauserRemoved(address pauser);\\n\\n    /**\\n     * @notice Emitted when a 'resumer' is whitelisted\\n     */\\n    event ResumerAdded(address pauser);\\n    /**\\n     * @notice Emitted when a 'resumer' is removed from whitelist\\n     */\\n    event ResumerRemoved(address pauser);\\n\\n    /**\\n     * @notice Emitted when a 'maintainer' is whitelisted\\n     */\\n    event MaintainerAdded(address pauser);\\n    /**\\n         * @notice Emitted when a 'maintainer' is removed from whitelist\\n     */\\n    event MaintainerRemoved(address pauser);\\n\\n    constructor() {\\n        admin = msg.sender;\\n    }\\n\\n    // ************\\n    //  Captain ownership\\n    // ************\\n\\n    /**\\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @param newPendingAdmin New pending admin.\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\\n        // Check caller = admin\\n        require(msg.sender == admin, \\\"Not Admin\\\");\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n     * @dev Admin function for pending admin to accept role and update admin\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _acceptAdmin() public returns (uint) {\\n        // Check caller is pendingAdmin and pendingAdmin \u2260 address(0)\\n        require(msg.sender == pendingAdmin && msg.sender != address(0), \\\"Not the EXISTING pending admin\\\");\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return 0;\\n    }\\n\\n    // ************\\n    //  Modifiers\\n    // ************\\n\\n    /**\\n     * @dev Throws if called by any account other than the admin.\\n     */\\n    modifier onlyAdmin() {\\n        require(admin == msg.sender, \\\"not the admin\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the admin or security manager.\\n     */\\n    modifier onlyAdminOrSecurity() {\\n        require(admin == msg.sender || msg.sender == securityManager, \\\"not the admin or security manager\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the admin OR security manager OR oracles manager.\\n     */\\n    modifier onlyWithOraclesManagerPrivilege() {\\n        require(admin == msg.sender || msg.sender == securityManager || msg.sender == oraclesManager, \\\"not valid pauser\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the admin OR security manager OR whitelisted pauser.\\n     */\\n    modifier onlyWithPausePrivilege() {\\n        require(admin == msg.sender || msg.sender == securityManager || hasPauserRole[msg.sender], \\\"not valid pauser\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the admin OR security manager OR whitelisted resumer.\\n     */\\n    modifier onlyWithResumePrivilege() {\\n        require(admin == msg.sender || msg.sender == securityManager || hasResumerRole[msg.sender], \\\"not valid resumer\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the admin OR security manager OR whitelisted maintainer.\\n     */\\n    modifier onlyWithMaintainPrivilege() {\\n        require(admin == msg.sender || msg.sender == securityManager || hasMaintainerRole[msg.sender], \\\"not valid maintainer\\\");\\n        _;\\n    }\\n\\n    // ************\\n    //  In-Function \\\"Modifiers\\\"\\n    // ************\\n\\n    function _active() public view {\\n        require(address(managedUnitroller) != address(0), \\\"Not controlling any network\\\");\\n    }\\n\\n    function _activeWithRainmaker() public view {\\n        require(address(managedUnitroller) != address(0), \\\"Not controlling any network\\\");\\n        require(managedUnitroller.rainMaker() != address(0), \\\"LN has no rain maker\\\");\\n    }\\n\\n    // ************\\n    //  View\\n    // ************\\n\\n    /**\\n     * @notice View function to get the complete pausers list.\\n     */\\n    function getAllPausers() external view returns (address[] memory) {\\n        return pausersList;\\n    }\\n\\n    /**\\n     * @notice View function to get the complete resumers list.\\n     */\\n    function getAllResumers() external view returns (address[] memory) {\\n        return resumersList;\\n    }\\n\\n    /**\\n     * @notice View function to get the complete maintainers list.\\n     */\\n    function getAllMaintainers() external view returns (address[] memory) {\\n        return maintainersList;\\n    }\\n\\n    // ************\\n    //  Lending Network ownership\\n    // ************\\n\\n    /**\\n      * @notice Calls `_acceptAdmin` of unitroller to finalize the transfer to self.\\n      * @dev Must call _setPendingAdmin of self before calling this function\\n      * @param _unitroller Lending network unitroller address.\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _acceptAdminOfLeN(\\n        address _unitroller\\n    ) external onlyAdmin returns (uint) {\\n        require (address(managedUnitroller) == address(0), \\\"Captain exists\\\");\\n        IComptrollerForCaptain unitrollerContract = IComptrollerForCaptain(_unitroller);\\n        require (unitrollerContract.pendingAdmin() == address(this), \\\"Not the pending admin\\\");\\n        address oldAdmin = unitrollerContract.admin();\\n        address[] memory markets = unitrollerContract.getAllMarkets();\\n        for (uint i = 0; i < markets.length; i++) {\\n            require(ICTokenForCaptain(markets[i]).pendingAdmin() == address(this), \\\"Not market pending admin\\\");\\n            require(IAdminableForCaptain(markets[i])._acceptAdmin() == 0, \\\"Unable to accept admin for market\\\");\\n\\n        }\\n\\n        address rainMaker = unitrollerContract.rainMaker();\\n        if (rainMaker != address(0)) {\\n            require(IAdminableForCaptain(rainMaker).pendingAdmin() == address(this), \\\"Not rainmaker pending admin\\\");\\n            require(IAdminableForCaptain(rainMaker)._acceptAdmin() == 0, \\\"Unable to accept admin for rain maker\\\");\\n        }\\n        require(unitrollerContract._acceptAdmin() == 0, \\\"Unable to accept admin for unitroller\\\");\\n        managedUnitroller = IComptrollerForCaptain(_unitroller);\\n        emit NewAdmin(oldAdmin, address(this));\\n        return uint(Error.NO_ERROR);\\n        \\n    }\\n\\n    /**\\n      * @notice Calls the `_setPendingAdmin` function of the unitroller to begin change of admin on lending network\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @param newPendingAdmin New pending admin of lending network.\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setPendingAdminOfLeN(\\n        address newPendingAdmin\\n    ) external onlyAdmin returns (uint)  {\\n        _active();\\n        require (managedUnitroller.admin() == address(this), \\\"Not the current owner\\\");\\n        address oldPendingAdmin = managedUnitroller.pendingAdmin();\\n        address[] memory markets = managedUnitroller.getAllMarkets();\\n        for (uint i = 0; i < markets.length; i++) {\\n            require(ICTokenForCaptain(markets[i]).admin() == address(this), \\\"Not admin of the market\\\");\\n        }\\n\\n        address rainMaker = managedUnitroller.rainMaker();\\n        if (rainMaker != address(0)) {\\n            require(IAdminableForCaptain(rainMaker).admin() == address(this), \\\"Not rainmaker admin\\\");\\n            require(IAdminableForCaptain(rainMaker)._setPendingAdmin(newPendingAdmin) == 0, \\\"Unable to set admin for rainmaker\\\");\\n        }\\n        for (uint i = 0; i < markets.length; i++) {\\n            require(IAdminableForCaptain(markets[i])._setPendingAdmin(newPendingAdmin) == 0, \\\"Unable to set admin for market\\\");\\n        }\\n\\n        require(managedUnitroller._setPendingAdmin(newPendingAdmin) == 0, \\\"Unable to set admin for unitroller\\\");\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    function removeManagedUnitroller() external onlyAdmin returns(uint) {\\n        _active();\\n        require (managedUnitroller.admin() != address(this), \\\"Still the owner\\\");\\n        address[] memory markets = managedUnitroller.getAllMarkets();\\n        for (uint i = 0; i < markets.length; i++) {\\n            require(IAdminableForCaptain(markets[i]).admin() != address(this), \\\"Still the market owner\\\");\\n        }\\n\\n        address rainMaker = managedUnitroller.rainMaker();\\n        if (rainMaker != address(0)) {\\n            require(IAdminableForCaptain(rainMaker).admin() == address(this), \\\"Still rainmaker admin\\\");\\n        }\\n        managedUnitroller = IComptrollerForCaptain(address(0));\\n\\n        return 0;\\n    }\\n\\n    // ************\\n    //  Captain Roles\\n    // ************\\n\\n    function setSecurityManager(address _securityManager) external onlyAdmin {\\n        address oldSecurityManager = securityManager;\\n        securityManager = _securityManager;\\n        emit NewSecurityManager(oldSecurityManager, securityManager);\\n    }\\n\\n    function setOraclesManager(address _oraclesManager) external onlyAdmin {\\n        address oldOraclesManager = oraclesManager;\\n        oraclesManager = _oraclesManager;\\n        emit NewOraclesManager(oldOraclesManager, oraclesManager);\\n    }\\n\\n    function addPauser(address _pauser) external onlyAdminOrSecurity {\\n        if (!hasPauserRole[_pauser]) {\\n            hasPauserRole[_pauser] = true;\\n            addToRolesListInternal(_pauser, LenCaptainRoles.PAUSER);\\n            emit PauserAdded(_pauser);\\n        }\\n    }\\n    function removePauser(address _pauser) external onlyAdminOrSecurity {\\n        if (hasPauserRole[_pauser]) {\\n            hasPauserRole[_pauser] = false;\\n            removeFromRolesListInternal(_pauser, LenCaptainRoles.PAUSER);\\n            emit PauserRemoved(_pauser);\\n        }\\n    }\\n\\n    function addResumer(address _resumer) external onlyAdminOrSecurity {\\n        if (!hasResumerRole[_resumer]) {\\n            hasResumerRole[_resumer] = true;\\n            addToRolesListInternal(_resumer, LenCaptainRoles.RESUMER);\\n            emit ResumerAdded(_resumer);\\n        }\\n    }\\n    function removeResumer(address _resumer) external onlyAdminOrSecurity {\\n        if (hasResumerRole[_resumer]) {\\n            hasResumerRole[_resumer] = false;\\n            removeFromRolesListInternal(_resumer, LenCaptainRoles.RESUMER);\\n            emit ResumerRemoved(_resumer);\\n        }\\n    }\\n\\n    function addMaintainer(address _maintainer) external onlyAdminOrSecurity {\\n        if (!hasMaintainerRole[_maintainer]) {\\n            hasMaintainerRole[_maintainer] = true;\\n            addToRolesListInternal(_maintainer, LenCaptainRoles.MAINTAINER);\\n            emit MaintainerAdded(_maintainer);\\n        }\\n    }\\n    function removeMaintainer(address _maintainer) external onlyAdminOrSecurity {\\n        if (hasMaintainerRole[_maintainer]) {\\n            hasMaintainerRole[_maintainer] = false;\\n            removeFromRolesListInternal(_maintainer, LenCaptainRoles.MAINTAINER);\\n            emit MaintainerRemoved(_maintainer);\\n        }\\n    }\\n\\n    // ************\\n    //  \\\"Adapter\\\" functions\\n    // ************\\n\\n    function _setCollateralFactor(address cToken, uint newCollateralFactorMantissa) external onlyAdmin returns (uint) {\\n        _active();\\n        return managedUnitroller._setCollateralFactor(cToken, newCollateralFactorMantissa);\\n    }\\n    function _setLiquidationFactor(address cToken, uint newLiquidationFactorMantissa)  external onlyAdmin returns (uint) {\\n        _active();\\n        return managedUnitroller._setLiquidationFactor(cToken, newLiquidationFactorMantissa);\\n    }\\n    function _setLiquidationIncentive(address cToken, uint newLiquidationIncentiveMantissa) external onlyAdmin returns (uint) {\\n        _active();\\n        return managedUnitroller._setLiquidationIncentive(cToken, newLiquidationIncentiveMantissa);\\n    }\\n    function _setReserveFactor(address cToken, uint newReserveFactorMantissa) external onlyAdmin returns (uint) {\\n        _active();\\n        return ICTokenForCaptain(cToken)._setReserveFactor(newReserveFactorMantissa);\\n    }\\n\\n    function _setInterestRateModel(address cToken, address newInterestRateModel) external onlyAdmin returns (uint) {\\n        _active();\\n        return ICTokenForCaptain(cToken)._setInterestRateModel(newInterestRateModel);\\n    }\\n\\n\\n    function _setMinBorrowAmountUsd(uint minBorrowAmountUsd_) external onlyAdmin returns (uint) {\\n        _active();\\n        return managedUnitroller._setMinBorrowAmountUsd(minBorrowAmountUsd_);\\n    }\\n\\n    function _setPauseGuardian(address newPauseGuardian) external onlyAdmin returns (uint) {\\n        _active();\\n        return managedUnitroller._setPauseGuardian(newPauseGuardian);\\n    }\\n    function _setBorrowCapGuardian(address newBorrowCapGuardian) external onlyAdmin {\\n        _active();\\n        return managedUnitroller._setBorrowCapGuardian(newBorrowCapGuardian);\\n    }\\n\\n    function _setAdminBankAddress(address payable newAdminBankAddress) external onlyAdmin {\\n        _active();\\n        managedUnitroller._setAdminBankAddress(newAdminBankAddress);\\n    }\\n\\n    // ************\\n    //  Complex functions\\n    // ************\\n\\n    function _setRainMaker(bytes32 contractNameHash, bytes calldata deployParams, bytes calldata retireParams, bytes calldata connectParams, address incentiveTokenAddress, RainMakerDynamicSpeeds calldata rainMakerDynamicSpeeds) external onlyAdmin returns (uint) {\\n        _active();\\n        uint result =  managedUnitroller._setRainMaker(contractNameHash, deployParams, retireParams, connectParams);\\n        if (contractNameHash != bytes32(0)) {\\n            IRainMakerForCaptain(managedUnitroller.rainMaker())._setLnIncentiveToken(incentiveTokenAddress);\\n            if (rainMakerDynamicSpeeds.cTokens.length > 0) {\\n                IRainMakerForCaptain(managedUnitroller.rainMaker())._setDynamicCompSpeeds(rainMakerDynamicSpeeds.cTokens, rainMakerDynamicSpeeds.compSupplySpeeds, rainMakerDynamicSpeeds.compBorrowSpeeds);\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Support a new market and configure with given params in one tx.\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _migrateStakingTarget(address stakeableMarket, address newStakingTarget, bytes calldata params) external onlyAdmin returns (uint) {\\n        _active();\\n\\n        // Migrate staking target\\n        uint result =  IStakeableOTokenForCaptain(stakeableMarket)._migrateStakingTarget(newStakingTarget, params);\\n\\n        require(result == 0);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Support a new market and configure with given params in one tx.\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _supportMarket(\\n        address underlying,\\n        bytes32 contractNameHash,\\n        bytes calldata params,\\n        address interestRateModel,\\n        uint reserveFactorMantissa,\\n        uint collateralFactorMantissa,\\n        uint liquidationFactorMantissa,\\n        uint liquidationIncentiveMantissa\\n    ) external onlyAdmin returns (uint) {\\n        _active();\\n\\n        // Add new market\\n        uint result =  managedUnitroller._supportNewMarket(\\n            underlying,\\n            contractNameHash,\\n            params,\\n            interestRateModel,\\n            \\\"\\\");\\n\\n        require(result == 0);\\n\\n        // Get market address\\n        address cTokenAddress = managedUnitroller.existingMarketTypes(underlying, contractNameHash);\\n        ICTokenForCaptain cToken = ICTokenForCaptain(cTokenAddress);\\n\\n        // Set market params\\n        require(cToken._setReserveFactor(reserveFactorMantissa) == 0);\\n        require(managedUnitroller._setLiquidationFactor(cTokenAddress, liquidationFactorMantissa) == 0);\\n        require(managedUnitroller._setCollateralFactor(cTokenAddress, collateralFactorMantissa) == 0);\\n        require(managedUnitroller._setLiquidationIncentive(cTokenAddress, liquidationIncentiveMantissa) == 0);\\n\\n        return result;\\n    }\\n\\n    // ************\\n    //  Lending Network Version\\n    // ************\\n\\n    function updateLnVersion(uint256 newSystemVersion, bytes calldata becomeImplementationData) external onlyAdmin returns (uint) {\\n        _active();\\n        return IUnitrollerForCaptain(address(managedUnitroller))._upgradeLnSystemVersion(newSystemVersion, becomeImplementationData);\\n    }\\n\\n    // ************\\n    //  RainMaker interaction\\n    // ************\\n\\n    function _setDynamicCompSpeeds(address[] calldata _cTokens, uint[] calldata _compSupplySpeeds, uint[] calldata _compBorrowSpeeds) onlyAdmin external {\\n        _activeWithRainmaker();\\n        IRainMakerForCaptain(managedUnitroller.rainMaker())._setDynamicCompSpeeds(_cTokens, _compSupplySpeeds, _compBorrowSpeeds);\\n    }\\n    function _setDynamicCompSpeed(address cToken, uint compSupplySpeed, uint compBorrowSpeed) onlyAdmin external {\\n        _activeWithRainmaker();\\n        IRainMakerForCaptain(managedUnitroller.rainMaker())._setDynamicCompSpeed(cToken, compSupplySpeed, compBorrowSpeed);\\n    }\\n\\n    // ************\\n    //  Oracles Manager functions\\n    // ************\\n\\n    function _setCustomOracle(address underlying, address oracle) external onlyWithOraclesManagerPrivilege returns (uint) {\\n        _active();\\n        return managedUnitroller._setCustomOracle(underlying, oracle);\\n    }\\n\\n    // ************\\n    //  Maintainer functions\\n    // ************\\n\\n    function _setMarketBorrowCaps(address[] calldata cTokens, uint[] calldata newBorrowCaps) external onlyWithMaintainPrivilege {\\n        _active();\\n        managedUnitroller._setMarketBorrowCaps(cTokens, newBorrowCaps);\\n    }\\n\\n    function _setActiveCollateralCaps(\\n        address[] calldata cTokens,\\n        uint[] calldata activeCollateralCaps\\n    ) external onlyWithMaintainPrivilege {\\n        _active();\\n        managedUnitroller._setActiveCollateralCaps(\\n            cTokens,\\n            activeCollateralCaps\\n        );\\n    }\\n\\n    // ************\\n    //  Emergency Pausing functions\\n    // ************\\n\\n    /**\\n     * @notice Zeros the collateral factor of all given markets.\\n     * @param cTokens The markets to pause, empty array means \\\"all markets\\\"\\n     */\\n    function _zeroCollateralFactor(address[] calldata cTokens) external onlyWithPausePrivilege returns (uint) {\\n        _active();\\n        address[] memory marketsToUse;\\n        if (cTokens.length == 0) {\\n            marketsToUse = managedUnitroller.getAllMarkets();\\n        } else {\\n            marketsToUse = cTokens;\\n        }\\n\\n        for (uint i = 0; i < marketsToUse.length; i++) {\\n            require(managedUnitroller._setCollateralFactor(marketsToUse[i], 0) == uint(Error.NO_ERROR), \\\"set collateral factor error\\\");\\n        }\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    function _pauseMint(address cToken) external onlyWithPausePrivilege returns (bool) {\\n        _active();\\n        return managedUnitroller._setMintPaused(cToken, true);\\n    }\\n    function _pauseAllMinting() external onlyWithPausePrivilege returns (bool) {\\n        _active();\\n        address[] memory markets = managedUnitroller.getAllMarkets();\\n        for (uint i = 0; i < markets.length; i++) {\\n            require(managedUnitroller._setMintPaused(markets[i], true) == true);\\n        }\\n        return true;\\n    }\\n\\n    function _pauseBorrow(address cToken) external onlyWithPausePrivilege returns (bool) {\\n        _active();\\n        return managedUnitroller._setBorrowPaused(cToken, true);\\n    }\\n    function _pauseAllBorrow() external onlyWithPausePrivilege returns (bool) {\\n        _active();\\n        address[] memory markets = managedUnitroller.getAllMarkets();\\n        for (uint i = 0; i < markets.length; i++) {\\n            require(managedUnitroller._setBorrowPaused(markets[i], true) == true);\\n        }\\n        return true;\\n    }\\n\\n    function _pauseTransfer() external onlyWithPausePrivilege returns (bool) {\\n        _active();\\n        return managedUnitroller._setTransferPaused(true);\\n    }\\n\\n    /**\\n     * Sets all RainMaker speeds to 0.\\n     */\\n    function _emergencyZeroSpeeds(address[] calldata _cTokens) external onlyWithPausePrivilege {\\n        _activeWithRainmaker();\\n        //  IRainMakerForCaptain(managedUnitroller.rainMaker())._emergencyZeroSpeeds(_cTokens);\\n        for (uint i = 0; i < _cTokens.length; i++) {\\n            IRainMakerForCaptain(managedUnitroller.rainMaker())._setDynamicCompSpeed(_cTokens[i], 0, 0);\\n        }\\n    }\\n\\n    // ************\\n    //  Emergency Resuming functions\\n    // ************\\n\\n    function _resumeMint(address cToken) external onlyWithResumePrivilege returns (bool) {\\n        _active();\\n        return managedUnitroller._setMintPaused(cToken, false);\\n    }\\n    function _resumeAllMinting() external onlyWithResumePrivilege returns (bool) {\\n        _active();\\n        address[] memory markets = managedUnitroller.getAllMarkets();\\n         for (uint i = 0; i < markets.length; i++) {\\n            require(managedUnitroller._setMintPaused(markets[i], false) == false);\\n        }\\n        return false;\\n    }\\n\\n    function _resumeBorrow(address cToken) external onlyWithResumePrivilege returns (bool) {\\n        _active();\\n        return managedUnitroller._setBorrowPaused(cToken, false);\\n    }\\n    function _resumeAllBorrow() external onlyWithResumePrivilege returns (bool) {\\n        _active();\\n        address[] memory markets = managedUnitroller.getAllMarkets();\\n         for (uint i = 0; i < markets.length; i++) {\\n            require(managedUnitroller._setBorrowPaused(markets[i], false) == false);\\n        }\\n        return false;\\n    }\\n\\n    function _resumeTransfer() external onlyWithResumePrivilege returns (bool) {\\n        _active();\\n        return managedUnitroller._setTransferPaused(false);\\n    }\\n\\n    // ************\\n    //  Array utils\\n    // ************\\n\\n    function addToRolesListInternal(address _account, LenCaptainRoles roleId) internal {\\n        address[] storage list;\\n\\n        if (roleId == LenCaptainRoles.PAUSER) {\\n            list = pausersList;\\n        } else if (roleId == LenCaptainRoles.RESUMER) {\\n            list = resumersList;\\n        } else if (roleId == LenCaptainRoles.MAINTAINER) {\\n            list = maintainersList;\\n        } else {\\n            revert(\\\"!Role\\\");\\n        }\\n\\n        // Sanity, this should never fail.\\n        int8 index = findAddressIndexInArray(list, _account);\\n        require(index < 0, \\\"already in list\\\");\\n        list.push(_account);\\n    }\\n\\n    function removeFromRolesListInternal(address _account, LenCaptainRoles roleId) internal {\\n        address[] storage list;\\n\\n        if (roleId == LenCaptainRoles.PAUSER) {\\n            list = pausersList;\\n        } else if (roleId == LenCaptainRoles.RESUMER) {\\n            list = resumersList;\\n        } else if (roleId == LenCaptainRoles.MAINTAINER) {\\n            list = maintainersList;\\n        } else {\\n            revert(\\\"!Role\\\");\\n        }\\n\\n        // Sanity, this should never fail.\\n        int8 index = findAddressIndexInArray(pausersList, _account);\\n        require(index >= 0, \\\"not in list\\\");\\n\\n        list[uint(index)] = list[pausersList.length - 1];\\n        list.pop();\\n    }\\n\\n    /**\\n     * @notice Utility function for array manipulation.\\n     */\\n    function findAddressIndexInArray(address[] memory addresses, address item) internal returns (int8) {\\n        int8 itemIndex = -1;\\n\\n        for (uint i = 0; i < addresses.length; i++) {\\n            if (addresses[i] == item) {\\n                itemIndex = int8(i);\\n                break;\\n            }\\n        }\\n\\n        return itemIndex;\\n    }\\n}\"\r\n    },\r\n    \"contracts/Ola/Peripheral/Captain/CaptainStorage.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.6;\\n\\ncontract CaptainAdminStorage {\\n    /**\\n    * @notice Administrator for this contract\\n    */\\n    address public admin;\\n\\n    /**\\n    * @notice Pending administrator for this contract\\n    */\\n    address public pendingAdmin;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"MaintainerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"MaintainerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOraclesManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOraclesManager\",\"type\":\"address\"}],\"name\":\"NewOraclesManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldSecurityManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSecurityManager\",\"type\":\"address\"}],\"name\":\"NewSecurityManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"ResumerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"ResumerRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_acceptAdmin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_unitroller\",\"type\":\"address\"}],\"name\":\"_acceptAdminOfLeN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_active\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_activeWithRainmaker\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_cTokens\",\"type\":\"address[]\"}],\"name\":\"_emergencyZeroSpeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeableMarket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newStakingTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"_migrateStakingTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pauseAllBorrow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pauseAllMinting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"_pauseBorrow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"_pauseMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pauseTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_resumeAllBorrow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_resumeAllMinting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"_resumeBorrow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"_resumeMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_resumeTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"cTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"activeCollateralCaps\",\"type\":\"uint256[]\"}],\"name\":\"_setActiveCollateralCaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newAdminBankAddress\",\"type\":\"address\"}],\"name\":\"_setAdminBankAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBorrowCapGuardian\",\"type\":\"address\"}],\"name\":\"_setBorrowCapGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newCollateralFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setCollateralFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"_setCustomOracle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"compSupplySpeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"compBorrowSpeed\",\"type\":\"uint256\"}],\"name\":\"_setDynamicCompSpeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_cTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_compSupplySpeeds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_compBorrowSpeeds\",\"type\":\"uint256[]\"}],\"name\":\"_setDynamicCompSpeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newInterestRateModel\",\"type\":\"address\"}],\"name\":\"_setInterestRateModel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newLiquidationFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setLiquidationFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentiveMantissa\",\"type\":\"uint256\"}],\"name\":\"_setLiquidationIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"cTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newBorrowCaps\",\"type\":\"uint256[]\"}],\"name\":\"_setMarketBorrowCaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minBorrowAmountUsd_\",\"type\":\"uint256\"}],\"name\":\"_setMinBorrowAmountUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauseGuardian\",\"type\":\"address\"}],\"name\":\"_setPauseGuardian\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"_setPendingAdmin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"_setPendingAdminOfLeN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contractNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"deployParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"retireParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"connectParams\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"incentiveTokenAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"cTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"compSupplySpeeds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"compBorrowSpeeds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct OlaLenCaptain.RainMakerDynamicSpeeds\",\"name\":\"rainMakerDynamicSpeeds\",\"type\":\"tuple\"}],\"name\":\"_setRainMaker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newReserveFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setReserveFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"contractNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"interestRateModel\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationIncentiveMantissa\",\"type\":\"uint256\"}],\"name\":\"_supportMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"cTokens\",\"type\":\"address[]\"}],\"name\":\"_zeroCollateralFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maintainer\",\"type\":\"address\"}],\"name\":\"addMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pauser\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_resumer\",\"type\":\"address\"}],\"name\":\"addResumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllMaintainers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPausers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllResumers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasMaintainerRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasPauserRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasResumerRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maintainersList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managedUnitroller\",\"outputs\":[{\"internalType\":\"contract IComptrollerForCaptain\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oraclesManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pausersList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maintainer\",\"type\":\"address\"}],\"name\":\"removeMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeManagedUnitroller\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pauser\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_resumer\",\"type\":\"address\"}],\"name\":\"removeResumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"resumersList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"securityManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oraclesManager\",\"type\":\"address\"}],\"name\":\"setOraclesManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_securityManager\",\"type\":\"address\"}],\"name\":\"setSecurityManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSystemVersion\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"becomeImplementationData\",\"type\":\"bytes\"}],\"name\":\"updateLnVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OlaLenCaptain", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}