{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/hyphen/LiquidityProviders.sol\": {\r\n      \"content\": \"// $$\\\\       $$\\\\                     $$\\\\       $$\\\\ $$\\\\   $$\\\\                     $$$$$$$\\\\                                $$\\\\       $$\\\\\\n// $$ |      \\\\__|                    \\\\__|      $$ |\\\\__|  $$ |                    $$  __$$\\\\                               \\\\__|      $$ |\\n// $$ |      $$\\\\  $$$$$$\\\\  $$\\\\   $$\\\\ $$\\\\  $$$$$$$ |$$\\\\ $$$$$$\\\\   $$\\\\   $$\\\\       $$ |  $$ | $$$$$$\\\\   $$$$$$\\\\ $$\\\\    $$\\\\ $$\\\\  $$$$$$$ | $$$$$$\\\\   $$$$$$\\\\   $$$$$$$\\\\\\n// $$ |      $$ |$$  __$$\\\\ $$ |  $$ |$$ |$$  __$$ |$$ |\\\\_$$  _|  $$ |  $$ |      $$$$$$$  |$$  __$$\\\\ $$  __$$\\\\\\\\$$\\\\  $$  |$$ |$$  __$$ |$$  __$$\\\\ $$  __$$\\\\ $$  _____|\\n// $$ |      $$ |$$ /  $$ |$$ |  $$ |$$ |$$ /  $$ |$$ |  $$ |    $$ |  $$ |      $$  ____/ $$ |  \\\\__|$$ /  $$ |\\\\$$\\\\$$  / $$ |$$ /  $$ |$$$$$$$$ |$$ |  \\\\__|\\\\$$$$$$\\\\\\n// $$ |      $$ |$$ |  $$ |$$ |  $$ |$$ |$$ |  $$ |$$ |  $$ |$$\\\\ $$ |  $$ |      $$ |      $$ |      $$ |  $$ | \\\\$$$  /  $$ |$$ |  $$ |$$   ____|$$ |       \\\\____$$\\\\\\n// $$$$$$$$\\\\ $$ |\\\\$$$$$$$ |\\\\$$$$$$  |$$ |\\\\$$$$$$$ |$$ |  \\\\$$$$  |\\\\$$$$$$$ |      $$ |      $$ |      \\\\$$$$$$  |  \\\\$  /   $$ |\\\\$$$$$$$ |\\\\$$$$$$$\\\\ $$ |      $$$$$$$  |\\n// \\\\________|\\\\__| \\\\____$$ | \\\\______/ \\\\__| \\\\_______|\\\\__|   \\\\____/  \\\\____$$ |      \\\\__|      \\\\__|       \\\\______/    \\\\_/    \\\\__| \\\\_______| \\\\_______|\\\\__|      \\\\_______/\\n//                     $$ |                                      $$\\\\   $$ |\\n//                     $$ |                                      \\\\$$$$$$  |\\n//                     \\\\__|                                       \\\\______/\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./metatx/ERC2771ContextUpgradeable.sol\\\";\\n\\nimport \\\"../security/Pausable.sol\\\";\\nimport \\\"./interfaces/ILPToken.sol\\\";\\nimport \\\"./interfaces/ITokenManager.sol\\\";\\nimport \\\"./interfaces/IWhiteListPeriodManager.sol\\\";\\nimport \\\"./interfaces/ILiquidityPool.sol\\\";\\n\\ncontract LiquidityProviders is\\n    Initializable,\\n    ReentrancyGuardUpgradeable,\\n    ERC2771ContextUpgradeable,\\n    OwnableUpgradeable,\\n    Pausable\\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    address internal constant NATIVE = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 public constant BASE_DIVISOR = 10**18;\\n\\n    ILPToken internal lpToken;\\n    ILiquidityPool internal liquidityPool;\\n    ITokenManager internal tokenManager;\\n    IWhiteListPeriodManager internal whiteListPeriodManager;\\n\\n    event LiquidityAdded(address indexed tokenAddress, uint256 indexed amount, address indexed lp);\\n    event LiquidityRemoved(address indexed tokenAddress, uint256 indexed amount, address indexed lp);\\n    event FeeClaimed(address indexed tokenAddress, uint256 indexed fee, address indexed lp, uint256 sharesBurnt);\\n    event FeeAdded(address indexed tokenAddress, uint256 indexed fee);\\n    event EthReceived(address indexed sender, uint256 value);\\n    event CurrentLiquidityChanged(address indexed token, uint256 indexed newValue);\\n\\n    // LP Fee Distribution\\n    mapping(address => uint256) public totalReserve; // Include Liquidity + Fee accumulated\\n    mapping(address => uint256) public totalLiquidity; // Include Liquidity only\\n    mapping(address => uint256) public currentLiquidity; // Include current liquidity, updated on every in and out transfer\\n    mapping(address => uint256) public totalLPFees;\\n    mapping(address => uint256) public totalSharesMinted;\\n\\n    /**\\n     * @dev Modifier for checking to validate a NFTId and it's ownership\\n     * @param _tokenId token id to validate\\n     * @param _transactor typically msgSender(), passed to verify against owner of _tokenId\\n     */\\n    modifier onlyValidLpToken(uint256 _tokenId, address _transactor) {\\n        (address token, , ) = lpToken.tokenMetadata(_tokenId);\\n        require(lpToken.exists(_tokenId), \\\"ERR__TOKEN_DOES_NOT_EXIST\\\");\\n        require(lpToken.ownerOf(_tokenId) == _transactor, \\\"ERR__TRANSACTOR_DOES_NOT_OWN_NFT\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier for checking if msg.sender in liquiditypool\\n     */\\n    modifier onlyLiquidityPool() {\\n        require(_msgSender() == address(liquidityPool), \\\"ERR__UNAUTHORIZED\\\");\\n        _;\\n    }\\n\\n    modifier tokenChecks(address tokenAddress) {\\n        require(tokenAddress != address(0), \\\"Token address cannot be 0\\\");\\n        require(_isSupportedToken(tokenAddress), \\\"Token not supported\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev initalizes the contract, acts as constructor\\n     * @param _trustedForwarder address of trusted forwarder\\n     */\\n    function initialize(\\n        address _trustedForwarder,\\n        address _lpToken,\\n        address _tokenManager,\\n        address _pauser\\n    ) public initializer {\\n        __ERC2771Context_init(_trustedForwarder);\\n        __Ownable_init();\\n        __Pausable_init(_pauser);\\n        __ReentrancyGuard_init();\\n        _setLPToken(_lpToken);\\n        _setTokenManager(_tokenManager);\\n    }\\n\\n    function _isSupportedToken(address _token) internal view returns (bool) {\\n        return tokenManager.getTokensInfo(_token).supportedToken;\\n    }\\n\\n    function getTotalReserveByToken(address tokenAddress) public view returns (uint256) {\\n        return totalReserve[tokenAddress];\\n    }\\n\\n    function getSuppliedLiquidityByToken(address tokenAddress) public view returns (uint256) {\\n        return totalLiquidity[tokenAddress];\\n    }\\n\\n    function getTotalLPFeeByToken(address tokenAddress) public view returns (uint256) {\\n        return totalLPFees[tokenAddress];\\n    }\\n\\n    function getCurrentLiquidity(address tokenAddress) public view returns (uint256) {\\n        return currentLiquidity[tokenAddress];\\n    }\\n\\n    /**\\n     * @dev To be called post initialization, used to set address of NFT Contract\\n     * @param _lpToken address of lpToken\\n     */\\n    function setLpToken(address _lpToken) external onlyOwner {\\n        _setLPToken(_lpToken);\\n    }\\n\\n    /**\\n     * Internal method to set LP token contract.\\n     */\\n    function _setLPToken(address _lpToken) internal {\\n        lpToken = ILPToken(_lpToken);\\n    }\\n\\n    function increaseCurrentLiquidity(address tokenAddress, uint256 amount) public onlyLiquidityPool {\\n        _increaseCurrentLiquidity(tokenAddress, amount);\\n    }\\n\\n    function decreaseCurrentLiquidity(address tokenAddress, uint256 amount) public onlyLiquidityPool {\\n        _decreaseCurrentLiquidity(tokenAddress, amount);\\n    }\\n\\n    function _increaseCurrentLiquidity(address tokenAddress, uint256 amount) private {\\n        currentLiquidity[tokenAddress] += amount;\\n        emit CurrentLiquidityChanged(tokenAddress, currentLiquidity[tokenAddress]);\\n    }\\n\\n    function _decreaseCurrentLiquidity(address tokenAddress, uint256 amount) private {\\n        currentLiquidity[tokenAddress] -= amount;\\n        emit CurrentLiquidityChanged(tokenAddress, currentLiquidity[tokenAddress]);\\n    }\\n\\n    /**\\n     * Public method to set TokenManager contract.\\n     */\\n    function setTokenManager(address _tokenManager) external onlyOwner {\\n        _setTokenManager(_tokenManager);\\n    }\\n\\n    /**\\n     * Internal method to set TokenManager contract.\\n     */\\n    function _setTokenManager(address _tokenManager) internal {\\n        tokenManager = ITokenManager(_tokenManager);\\n    }\\n\\n    function setTrustedForwarder(address _tf) external onlyOwner {\\n        _setTrustedForwarder(_tf);\\n    }\\n\\n    /**\\n     * @dev To be called post initialization, used to set address of WhiteListPeriodManager Contract\\n     * @param _whiteListPeriodManager address of WhiteListPeriodManager\\n     */\\n    function setWhiteListPeriodManager(address _whiteListPeriodManager) external onlyOwner {\\n        whiteListPeriodManager = IWhiteListPeriodManager(_whiteListPeriodManager);\\n    }\\n\\n    /**\\n     * @dev To be called post initialization, used to set address of LiquidityPool Contract\\n     * @param _liquidityPool address of LiquidityPool\\n     */\\n    function setLiquidityPool(address _liquidityPool) external onlyOwner {\\n        liquidityPool = ILiquidityPool(_liquidityPool);\\n    }\\n\\n    /**\\n     * @dev Returns price of Base token in terms of LP Shares\\n     * @param _baseToken address of baseToken\\n     * @return Price of Base token in terms of LP Shares\\n     */\\n    function getTokenPriceInLPShares(address _baseToken) public view returns (uint256) {\\n        uint256 reserve = totalReserve[_baseToken];\\n        if (reserve > 0) {\\n            return totalSharesMinted[_baseToken] / totalReserve[_baseToken];\\n        }\\n        return BASE_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Converts shares to token amount\\n     */\\n\\n    function sharesToTokenAmount(uint256 _shares, address _tokenAddress) public view returns (uint256) {\\n        return (_shares * totalReserve[_tokenAddress]) / totalSharesMinted[_tokenAddress];\\n    }\\n\\n    /**\\n     * @dev Returns the fee accumulated on a given NFT\\n     * @param _nftId Id of NFT\\n     * @return accumulated fee\\n     */\\n    function getFeeAccumulatedOnNft(uint256 _nftId) public view returns (uint256) {\\n        require(lpToken.exists(_nftId), \\\"ERR__INVALID_NFT\\\");\\n\\n        (address _tokenAddress, uint256 nftSuppliedLiquidity, uint256 totalNFTShares) = lpToken.tokenMetadata(_nftId);\\n\\n        if (totalNFTShares == 0) {\\n            return 0;\\n        }\\n        // Calculate rewards accumulated\\n        uint256 eligibleLiquidity = sharesToTokenAmount(totalNFTShares, _tokenAddress);\\n        uint256 lpFeeAccumulated;\\n\\n        // Handle edge cases where eligibleLiquidity is less than what was supplied by very small amount\\n        if (nftSuppliedLiquidity > eligibleLiquidity) {\\n            lpFeeAccumulated = 0;\\n        } else {\\n            unchecked {\\n                lpFeeAccumulated = eligibleLiquidity - nftSuppliedLiquidity;\\n            }\\n        }\\n        return lpFeeAccumulated;\\n    }\\n\\n    /**\\n     * @dev Records fee being added to total reserve\\n     * @param _token Address of Token for which LP fee is being added\\n     * @param _amount Amount being added\\n     */\\n    function addLPFee(address _token, uint256 _amount) external onlyLiquidityPool tokenChecks(_token) whenNotPaused {\\n        totalReserve[_token] += _amount;\\n        totalLPFees[_token] += _amount;\\n        emit FeeAdded(_token, _amount);\\n    }\\n\\n    /**\\n     * @dev Internal function to add liquidity to a new NFT\\n     */\\n    function _addLiquidity(address _token, uint256 _amount) internal {\\n        require(_amount > 0, \\\"ERR__AMOUNT_IS_0\\\");\\n        uint256 nftId = lpToken.mint(_msgSender());\\n        LpTokenMetadata memory data = LpTokenMetadata(_token, 0, 0);\\n        lpToken.updateTokenMetadata(nftId, data);\\n        _increaseLiquidity(nftId, _amount);\\n    }\\n\\n    /**\\n     * @dev Function to mint a new NFT for a user, add native liquidity and store the\\n     *      record in the newly minted NFT\\n     */\\n    function addNativeLiquidity() external payable nonReentrant tokenChecks(NATIVE) whenNotPaused {\\n        require(address(liquidityPool) != address(0), \\\"ERR__LIQUIDITY_POOL_NOT_SET\\\");\\n        (bool success, ) = address(liquidityPool).call{value: msg.value}(\\\"\\\");\\n        require(success, \\\"ERR__NATIVE_TRANSFER_FAILED\\\");\\n        _addLiquidity(NATIVE, msg.value);\\n    }\\n\\n    /**\\n     * @dev Function to mint a new NFT for a user, add token liquidity and store the\\n     *      record in the newly minted NFT\\n     * @param _token Address of token for which liquidity is to be added\\n     * @param _amount Amount of liquidity added\\n     */\\n    function addTokenLiquidity(address _token, uint256 _amount)\\n        external\\n        nonReentrant\\n        tokenChecks(_token)\\n        whenNotPaused\\n    {\\n        require(_token != NATIVE, \\\"ERR__WRONG_FUNCTION\\\");\\n        require(\\n            IERC20Upgradeable(_token).allowance(_msgSender(), address(this)) >= _amount,\\n            \\\"ERR__INSUFFICIENT_ALLOWANCE\\\"\\n        );\\n        SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable(_token), _msgSender(), address(liquidityPool), _amount);\\n        _addLiquidity(_token, _amount);\\n    }\\n\\n    /**\\n     * @dev Internal helper function to increase liquidity in a given NFT\\n     */\\n    function _increaseLiquidity(uint256 _nftId, uint256 _amount) internal onlyValidLpToken(_nftId, _msgSender()) {\\n        (address token, uint256 totalSuppliedLiquidity, uint256 totalShares) = lpToken.tokenMetadata(_nftId);\\n\\n        require(_amount != 0, \\\"ERR__AMOUNT_IS_0\\\");\\n        whiteListPeriodManager.beforeLiquidityAddition(_msgSender(), token, _amount);\\n\\n        uint256 mintedSharesAmount;\\n        // Adding liquidity in the pool for the first time\\n        if (totalReserve[token] == 0 || totalSharesMinted[token] == 0) {\\n            mintedSharesAmount = BASE_DIVISOR * _amount;\\n        } else {\\n            mintedSharesAmount = (_amount * totalSharesMinted[token]) / totalReserve[token];\\n        }\\n\\n        require(mintedSharesAmount >= BASE_DIVISOR, \\\"ERR__AMOUNT_BELOW_MIN_LIQUIDITY\\\");\\n\\n        totalLiquidity[token] += _amount;\\n        totalReserve[token] += _amount;\\n        totalSharesMinted[token] += mintedSharesAmount;\\n\\n        LpTokenMetadata memory data = LpTokenMetadata(\\n            token,\\n            totalSuppliedLiquidity + _amount,\\n            totalShares + mintedSharesAmount\\n        );\\n        lpToken.updateTokenMetadata(_nftId, data);\\n\\n        // Increase the current liquidity\\n        _increaseCurrentLiquidity(token, _amount);\\n        emit LiquidityAdded(token, _amount, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Function to allow LPs to add ERC20 token liquidity to existing NFT\\n     * @param _nftId ID of NFT for updating the balances\\n     * @param _amount Token amount to be added\\n     */\\n    function increaseTokenLiquidity(uint256 _nftId, uint256 _amount) external nonReentrant whenNotPaused {\\n        (address token, , ) = lpToken.tokenMetadata(_nftId);\\n        require(_isSupportedToken(token), \\\"ERR__TOKEN_NOT_SUPPORTED\\\");\\n        require(token != NATIVE, \\\"ERR__WRONG_FUNCTION\\\");\\n        require(\\n            IERC20Upgradeable(token).allowance(_msgSender(), address(this)) >= _amount,\\n            \\\"ERR__INSUFFICIENT_ALLOWANCE\\\"\\n        );\\n        SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable(token), _msgSender(), address(liquidityPool), _amount);\\n        _increaseLiquidity(_nftId, _amount);\\n    }\\n\\n    /**\\n     * @dev Function to allow LPs to add native token liquidity to existing NFT\\n     */\\n    function increaseNativeLiquidity(uint256 _nftId) external payable nonReentrant whenNotPaused {\\n        (address token, , ) = lpToken.tokenMetadata(_nftId);\\n        require(_isSupportedToken(NATIVE), \\\"ERR__TOKEN_NOT_SUPPORTED\\\");\\n        require(token == NATIVE, \\\"ERR__WRONG_FUNCTION\\\");\\n        require(address(liquidityPool) != address(0), \\\"ERR__LIQUIDITY_POOL_NOT_SET\\\");\\n        (bool success, ) = address(liquidityPool).call{value: msg.value}(\\\"\\\");\\n        require(success, \\\"ERR__NATIVE_TRANSFER_FAILED\\\");\\n        _increaseLiquidity(_nftId, msg.value);\\n    }\\n\\n    /**\\n     * @dev Function to allow LPs to remove their liquidity from an existing NFT\\n     *      Also automatically redeems any earned fee\\n     */\\n    function removeLiquidity(uint256 _nftId, uint256 _amount)\\n        external\\n        nonReentrant\\n        onlyValidLpToken(_nftId, _msgSender())\\n        whenNotPaused\\n    {\\n        (address _tokenAddress, uint256 nftSuppliedLiquidity, uint256 totalNFTShares) = lpToken.tokenMetadata(_nftId);\\n        require(_isSupportedToken(_tokenAddress), \\\"ERR__TOKEN_NOT_SUPPORTED\\\");\\n\\n        require(_amount != 0, \\\"ERR__INVALID_AMOUNT\\\");\\n        require(nftSuppliedLiquidity >= _amount, \\\"ERR__INSUFFICIENT_LIQUIDITY\\\");\\n        whiteListPeriodManager.beforeLiquidityRemoval(_msgSender(), _tokenAddress, _amount);\\n        // Calculate how much shares represent input amount\\n        uint256 lpSharesForInputAmount = _amount * getTokenPriceInLPShares(_tokenAddress);\\n\\n        // Calculate rewards accumulated\\n        uint256 eligibleLiquidity = sharesToTokenAmount(totalNFTShares, _tokenAddress);\\n\\n        uint256 lpFeeAccumulated;\\n\\n        // Handle edge cases where eligibleLiquidity is less than what was supplied by very small amount\\n        if (nftSuppliedLiquidity > eligibleLiquidity) {\\n            lpFeeAccumulated = 0;\\n        } else {\\n            unchecked {\\n                lpFeeAccumulated = eligibleLiquidity - nftSuppliedLiquidity;\\n            }\\n        }\\n        // Calculate amount of lp shares that represent accumulated Fee\\n        uint256 lpSharesRepresentingFee = lpFeeAccumulated * getTokenPriceInLPShares(_tokenAddress);\\n\\n        totalLPFees[_tokenAddress] -= lpFeeAccumulated;\\n        uint256 amountToWithdraw = _amount + lpFeeAccumulated;\\n        uint256 lpSharesToBurn = lpSharesForInputAmount + lpSharesRepresentingFee;\\n\\n        // Handle round off errors to avoid dust lp token in contract\\n        if (totalNFTShares - lpSharesToBurn < BASE_DIVISOR) {\\n            lpSharesToBurn = totalNFTShares;\\n        }\\n        totalReserve[_tokenAddress] -= amountToWithdraw;\\n        totalLiquidity[_tokenAddress] -= _amount;\\n        totalSharesMinted[_tokenAddress] -= lpSharesToBurn;\\n\\n        _decreaseCurrentLiquidity(_tokenAddress, _amount);\\n\\n        _burnSharesFromNft(_nftId, lpSharesToBurn, _amount, _tokenAddress);\\n\\n        _transferFromLiquidityPool(_tokenAddress, _msgSender(), amountToWithdraw);\\n\\n        emit LiquidityRemoved(_tokenAddress, amountToWithdraw, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Function to allow LPs to claim the fee earned on their NFT\\n     * @param _nftId ID of NFT where liquidity is recorded\\n     */\\n    function claimFee(uint256 _nftId) external onlyValidLpToken(_nftId, _msgSender()) whenNotPaused nonReentrant {\\n        (address _tokenAddress, uint256 nftSuppliedLiquidity, uint256 totalNFTShares) = lpToken.tokenMetadata(_nftId);\\n        require(_isSupportedToken(_tokenAddress), \\\"ERR__TOKEN_NOT_SUPPORTED\\\");\\n\\n        uint256 lpSharesForSuppliedLiquidity = nftSuppliedLiquidity * getTokenPriceInLPShares(_tokenAddress);\\n\\n        // Calculate rewards accumulated\\n        uint256 eligibleLiquidity = sharesToTokenAmount(totalNFTShares, _tokenAddress);\\n        uint256 lpFeeAccumulated = eligibleLiquidity - nftSuppliedLiquidity;\\n        require(lpFeeAccumulated > 0, \\\"ERR__NO_REWARDS_TO_CLAIM\\\");\\n        // Calculate amount of lp shares that represent accumulated Fee\\n        uint256 lpSharesRepresentingFee = totalNFTShares - lpSharesForSuppliedLiquidity;\\n\\n        totalReserve[_tokenAddress] -= lpFeeAccumulated;\\n        totalSharesMinted[_tokenAddress] -= lpSharesRepresentingFee;\\n        totalLPFees[_tokenAddress] -= lpFeeAccumulated;\\n\\n        _burnSharesFromNft(_nftId, lpSharesRepresentingFee, 0, _tokenAddress);\\n        _transferFromLiquidityPool(_tokenAddress, _msgSender(), lpFeeAccumulated);\\n        emit FeeClaimed(_tokenAddress, lpFeeAccumulated, _msgSender(), lpSharesRepresentingFee);\\n    }\\n\\n    /**\\n     * @dev Internal Function to burn LP shares and remove liquidity from existing NFT\\n     */\\n    function _burnSharesFromNft(\\n        uint256 _nftId,\\n        uint256 _shares,\\n        uint256 _tokenAmount,\\n        address _tokenAddress\\n    ) internal {\\n        (, uint256 nftSuppliedLiquidity, uint256 nftShares) = lpToken.tokenMetadata(_nftId);\\n        nftShares -= _shares;\\n        nftSuppliedLiquidity -= _tokenAmount;\\n\\n        lpToken.updateTokenMetadata(_nftId, LpTokenMetadata(_tokenAddress, nftSuppliedLiquidity, nftShares));\\n    }\\n\\n    function _transferFromLiquidityPool(\\n        address _tokenAddress,\\n        address _receiver,\\n        uint256 _tokenAmount\\n    ) internal {\\n        liquidityPool.transfer(_tokenAddress, _receiver, _tokenAmount);\\n    }\\n\\n    function getSuppliedLiquidity(uint256 _nftId) external view returns (uint256) {\\n        (, uint256 totalSuppliedLiquidity, ) = lpToken.tokenMetadata(_nftId);\\n        return totalSuppliedLiquidity;\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\\n        returns (address sender)\\n    {\\n        return ERC2771ContextUpgradeable._msgSender();\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\\n        returns (bytes calldata)\\n    {\\n        return ERC2771ContextUpgradeable._msgData();\\n    }\\n\\n    receive() external payable {\\n        emit EthReceived(_msgSender(), msg.value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/hyphen/metatx/ERC2771ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n * Here _trustedForwarder is made internal instead of private\\n * so it can be changed via Child contracts with a setter method.\\n */\\nabstract contract ERC2771ContextUpgradeable is Initializable, ContextUpgradeable {\\n    event TrustedForwarderChanged(address indexed _tf);\\n\\n    address internal _trustedForwarder;\\n\\n    function __ERC2771Context_init(address trustedForwarder) internal initializer {\\n        __Context_init_unchained();\\n        __ERC2771Context_init_unchained(trustedForwarder);\\n    }\\n\\n    function __ERC2771Context_init_unchained(address trustedForwarder) internal initializer {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    function _setTrustedForwarder(address _tf) internal virtual {\\n        require(_tf != address(0), \\\"TrustedForwarder can't be 0\\\");\\n        _trustedForwarder = _tf;\\n        emit TrustedForwarderChanged(_tf);\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Initializable, PausableUpgradeable {\\n    address private _pauser;\\n\\n    event PauserChanged(address indexed previousPauser, address indexed newPauser);\\n\\n    /**\\n     * @dev The pausable constructor sets the original `pauser` of the contract to the sender\\n     * account & Initializes the contract in unpaused state..\\n     */\\n    function __Pausable_init(address pauser) internal initializer {\\n        require(pauser != address(0), \\\"Pauser Address cannot be 0\\\");\\n        __Pausable_init();\\n        _pauser = pauser;\\n    }\\n\\n    /**\\n     * @return true if `msg.sender` is the owner of the contract.\\n     */\\n    function isPauser(address pauser) public view returns (bool) {\\n        return pauser == _pauser;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the pauser.\\n     */\\n    modifier onlyPauser() {\\n        require(isPauser(msg.sender), \\\"Only pauser is allowed to perform this operation\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows the current pauser to transfer control of the contract to a newPauser.\\n     * @param newPauser The address to transfer pauserShip to.\\n     */\\n    function changePauser(address newPauser) public onlyPauser whenNotPaused {\\n        _changePauser(newPauser);\\n    }\\n\\n    /**\\n     * @dev Transfers control of the contract to a newPauser.\\n     * @param newPauser The address to transfer ownership to.\\n     */\\n    function _changePauser(address newPauser) internal {\\n        require(newPauser != address(0));\\n        emit PauserChanged(_pauser, newPauser);\\n        _pauser = newPauser;\\n    }\\n\\n    function renouncePauser() external virtual onlyPauser whenNotPaused {\\n        emit PauserChanged(_pauser, address(0));\\n        _pauser = address(0);\\n    }\\n\\n    function pause() public onlyPauser {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyPauser {\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/hyphen/interfaces/ILPToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nimport \\\"../structures/LpTokenMetadata.sol\\\";\\n\\ninterface ILPToken {\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    function exists(uint256 _tokenId) external view returns (bool);\\n\\n    function getAllNftIdsByUser(address _owner) external view returns (uint256[] memory);\\n\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        address _trustedForwarder\\n    ) external;\\n\\n    function isApprovedForAll(address _owner, address operator) external view returns (bool);\\n\\n    function isTrustedForwarder(address forwarder) external view returns (bool);\\n\\n    function liquidityPoolAddress() external view returns (address);\\n\\n    function mint(address _to) external returns (uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function owner() external view returns (address);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    function paused() external view returns (bool);\\n\\n    function renounceOwnership() external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function setLiquidityPool(address _lpm) external;\\n\\n    function setWhiteListPeriodManager(address _whiteListPeriodManager) external;\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n\\n    function tokenMetadata(uint256)\\n        external\\n        view\\n        returns (\\n            address token,\\n            uint256 totalSuppliedLiquidity,\\n            uint256 totalShares\\n        );\\n\\n    function tokenOfOwnerByIndex(address _owner, uint256 index) external view returns (uint256);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function updateTokenMetadata(uint256 _tokenId, LpTokenMetadata memory _lpTokenMetadata) external;\\n\\n    function whiteListPeriodManager() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/hyphen/interfaces/ITokenManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nimport \\\"../structures/TokenConfig.sol\\\";\\n\\ninterface ITokenManager {\\n    function getEquilibriumFee(address tokenAddress) external view returns (uint256);\\n\\n    function getMaxFee(address tokenAddress) external view returns (uint256);\\n\\n    function changeFee(\\n        address tokenAddress,\\n        uint256 _equilibriumFee,\\n        uint256 _maxFee\\n    ) external;\\n\\n    function tokensInfo(address tokenAddress)\\n        external\\n        view\\n        returns (\\n            uint256 transferOverhead,\\n            bool supportedToken,\\n            uint256 equilibriumFee,\\n            uint256 maxFee,\\n            TokenConfig memory config\\n        );\\n\\n    function excessStateTransferFeePerc(address tokenAddress) external view returns (uint256);\\n\\n    function getTokensInfo(address tokenAddress) external view returns (TokenInfo memory);\\n\\n    function getDepositConfig(uint256 toChainId, address tokenAddress) external view returns (TokenConfig memory);\\n\\n    function getTransferConfig(address tokenAddress) external view returns (TokenConfig memory);\\n\\n    function changeExcessStateFee(address _tokenAddress, uint256 _excessStateFeePer) external;\\n}\\n\"\r\n    },\r\n    \"contracts/hyphen/interfaces/IWhiteListPeriodManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\ninterface IWhiteListPeriodManager {\\n    function areWhiteListRestrictionsEnabled() external view returns (bool);\\n\\n    function beforeLiquidityAddition(\\n        address _lp,\\n        address _token,\\n        uint256 _amount\\n    ) external;\\n\\n    function beforeLiquidityRemoval(\\n        address _lp,\\n        address _token,\\n        uint256 _amount\\n    ) external;\\n\\n    function beforeLiquidityTransfer(\\n        address _from,\\n        address _to,\\n        address _token,\\n        uint256 _amount\\n    ) external;\\n\\n    function getMaxCommunityLpPositon(address _token) external view returns (uint256);\\n\\n    function initialize(\\n        address _trustedForwarder,\\n        address _liquidityProviders,\\n        address _tokenManager\\n    ) external;\\n\\n    function isExcludedAddress(address) external view returns (bool);\\n\\n    function isTrustedForwarder(address forwarder) external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function paused() external view returns (bool);\\n\\n    function perTokenTotalCap(address) external view returns (uint256);\\n\\n    function perTokenWalletCap(address) external view returns (uint256);\\n\\n    function renounceOwnership() external;\\n\\n    function setAreWhiteListRestrictionsEnabled(bool _status) external;\\n\\n    function setCap(\\n        address _token,\\n        uint256 _totalCap,\\n        uint256 _perTokenWalletCap\\n    ) external;\\n\\n    function setCaps(\\n        address[] memory _tokens,\\n        uint256[] memory _totalCaps,\\n        uint256[] memory _perTokenWalletCaps\\n    ) external;\\n\\n    function setIsExcludedAddressStatus(address[] memory _addresses, bool[] memory _status) external;\\n\\n    function setLiquidityProviders(address _liquidityProviders) external;\\n\\n    function setPerTokenWalletCap(address _token, uint256 _perTokenWalletCap) external;\\n\\n    function setTokenManager(address _tokenManager) external;\\n\\n    function setTotalCap(address _token, uint256 _totalCap) external;\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\"\r\n    },\r\n    \"contracts/hyphen/interfaces/ILiquidityPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\ninterface ILiquidityPool {\\n    function baseGas() external view returns (uint256);\\n\\n    function changePauser(address newPauser) external;\\n\\n    function checkHashStatus(\\n        address tokenAddress,\\n        uint256 amount,\\n        address receiver,\\n        bytes memory depositHash\\n    ) external view returns (bytes32 hashSendTransaction, bool status);\\n\\n    function depositConfig(uint256, address) external view returns (uint256 min, uint256 max);\\n\\n    function depositErc20(\\n        uint256 toChainId,\\n        address tokenAddress,\\n        address receiver,\\n        uint256 amount,\\n        string memory tag\\n    ) external;\\n\\n    function depositNative(\\n        address receiver,\\n        uint256 toChainId,\\n        string memory tag\\n    ) external;\\n\\n    function gasFeeAccumulated(address, address) external view returns (uint256);\\n\\n    function gasFeeAccumulatedByToken(address) external view returns (uint256);\\n\\n    function getCurrentLiquidity(address tokenAddress) external view returns (uint256 currentLiquidity);\\n\\n    function getExecutorManager() external view returns (address);\\n\\n    function getRewardAmount(uint256 amount, address tokenAddress) external view returns (uint256 rewardAmount);\\n\\n    function getTransferFee(address tokenAddress, uint256 amount) external view returns (uint256 fee);\\n\\n    function incentivePool(address) external view returns (uint256);\\n\\n    function initialize(\\n        address _executorManagerAddress,\\n        address pauser,\\n        address _trustedForwarder,\\n        address _tokenManager,\\n        address _liquidityProviders\\n    ) external;\\n\\n    function isPauser(address pauser) external view returns (bool);\\n\\n    function isTrustedForwarder(address forwarder) external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function paused() external view returns (bool);\\n\\n    function processedHash(bytes32) external view returns (bool);\\n\\n    function renounceOwnership() external;\\n\\n    function renouncePauser() external;\\n\\n    function transfer(address _tokenAddress, address receiver, uint256 _tokenAmount) external;\\n\\n    function sendFundsToUser(\\n        address tokenAddress,\\n        uint256 amount,\\n        address receiver,\\n        bytes memory depositHash,\\n        uint256 tokenGasPrice,\\n        uint256 fromChainId\\n    ) external;\\n\\n    function setBaseGas(uint128 gas) external;\\n\\n    function setExecutorManager(address _executorManagerAddress) external;\\n\\n    function setLiquidityProviders(address _liquidityProviders) external;\\n\\n    function setTrustedForwarder(address trustedForwarder) external;\\n\\n    function transferConfig(address) external view returns (uint256 min, uint256 max);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function withdrawErc20GasFee(address tokenAddress) external;\\n\\n    function withdrawNativeGasFee() external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/hyphen/structures/LpTokenMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nstruct LpTokenMetadata {\\n    address token;\\n    uint256 suppliedLiquidity;\\n    uint256 shares;\\n}\\n\"\r\n    },\r\n    \"contracts/hyphen/structures/TokenConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nstruct TokenInfo {\\n    uint256 transferOverhead;\\n    bool supportedToken;\\n    uint256 equilibriumFee; // Percentage fee Represented in basis points\\n    uint256 maxFee; // Percentage fee Represented in basis points\\n    TokenConfig tokenConfig;\\n}\\n\\nstruct TokenConfig {\\n    uint256 min;\\n    uint256 max;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"CurrentLiquidityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"EthReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"FeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesBurnt\",\"type\":\"uint256\"}],\"name\":\"FeeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousPauser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"PauserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tf\",\"type\":\"address\"}],\"name\":\"TrustedForwarderChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addNativeLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addTokenLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"changePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"claimFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"currentLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseCurrentLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getCurrentLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"getFeeAccumulatedOnNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"getSuppliedLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getSuppliedLiquidityByToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"}],\"name\":\"getTokenPriceInLPShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTotalLPFeeByToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTotalReserveByToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseCurrentLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"increaseNativeLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseTokenLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pauser\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityPool\",\"type\":\"address\"}],\"name\":\"setLiquidityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"setLpToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenManager\",\"type\":\"address\"}],\"name\":\"setTokenManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tf\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whiteListPeriodManager\",\"type\":\"address\"}],\"name\":\"setWhiteListPeriodManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"sharesToTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalLPFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalSharesMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LiquidityProviders", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}