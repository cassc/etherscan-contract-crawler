{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-05-10\r\n*/\r\n\r\npragma solidity ^0.8.0;\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\n    library SafeMath {//konwnsec//IERC20 \u63a5\u53e3\r\n        function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            if (a == 0) {\r\n                return 0; \r\n            }\r\n            uint256 c = a * b;\r\n            assert(c / a == b);\r\n            return c; \r\n        }\r\n        function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n            uint256 c = a / b;\r\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n            return c; \r\n        }\r\n        function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            assert(b <= a);\r\n            return a - b; \r\n        }\r\n\r\n        function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            uint256 c = a + b;\r\n            assert(c >= a);\r\n            return c; \r\n        }\r\n    }\r\n\r\n    interface Erc20Token {//konwnsec//ERC20 \u63a5\u53e3\r\n        function totalSupply() external view returns (uint256);\r\n        function balanceOf(address _who) external view returns (uint256);\r\n        function transfer(address _to, uint256 _value) external;\r\n        function allowance(address _owner, address _spender) external view returns (uint256);\r\n        function transferFrom(address _from, address _to, uint256 _value) external;\r\n        function approve(address _spender, uint256 _value) external; \r\n        function burnFrom(address _from, uint256 _value) external; \r\n            function mint(uint256 amount) external  returns (bool);\r\n\r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n        event Approval(address indexed owner, address indexed spender, uint256 value);\r\n        \r\n\r\n    }\r\n    \r\n \r\n \r\n    \r\n\r\n    contract Base {\r\n        using SafeMath for uint;\r\n\r\n\r\n      \r\n        Erc20Token constant internal _ATTIns = Erc20Token(0xD727972b540dF5FD3b7bea2145313C2146D576e6); \r\n        uint256 authenticationO   = 0;\r\n        uint256 authenticationP   = 0;\r\n        uint256 authenticationC   = 1;\r\n        uint256 dayMax   = 1000000000000000000000;\r\n        uint256 dayAll   = 0;\r\n        uint256 times   = 0;\r\n         address  public Operator;\r\n        bool  public Open;\r\n        address  _owner;\r\n \r\n        modifier onlyOwner() {\r\n            require(msg.sender == _owner, \"Permission denied\"); _;\r\n        }\r\n        modifier isZeroAddr(address addr) {\r\n            require(addr != address(0), \"Cannot be a zero address\"); _; \r\n        }\r\n \r\n         modifier onlyOpen() {\r\n        require(Open, \"_owner Open\"); _;\r\n    }\r\n\r\n    modifier onlyauthentication() {\r\n        require(authenticationC == authenticationO);\r\n        require(authenticationC == authenticationP);_;\r\n    }\r\n \r\n    modifier onlyOperator() {\r\n        require(msg.sender == Operator, \"Permission denied\"); _;\r\n    }\r\n \r\n\r\n    function transferOwnership(address newOwner) public onlyOwner onlyauthentication {\r\n        require(newOwner != address(0));\r\n         authenticationC = authenticationC.add(1);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function setDayMax(uint256 Quantity) public onlyOwner onlyauthentication {\r\n        authenticationC = authenticationC.add(1);\r\n        dayMax = Quantity;\r\n    }\r\n\r\n\r\n    \r\n    function transferOperatorship(address newOperator) public onlyOperator onlyauthentication {\r\n        require(newOperator != address(0));\r\n        authenticationC = authenticationC.add(1);\r\n        Operator = newOperator;\r\n    }\r\n\r\n \r\n    function setAuthenticationP() public onlyOperator {\r\n        authenticationP = authenticationC;\r\n    }\r\n\r\n    function setAuthenticationO() public onlyOwner {\r\n        authenticationO = authenticationC;\r\n    }\r\n\r\n\r\n     function setOpenOrClose() public onlyOwner {\r\n        Open = !Open;\r\n    } \r\n\r\n\r\n    \r\n\r\n        receive() external payable {}  \r\n}\r\n \r\n \r\n    using SafeMath for uint;\r\n\r\ncontract ATTCT is Base {\r\n    using SafeMath for uint;\r\n  \r\n     constructor()\r\n     {\r\n        _owner = 0xdd641fb909dF7aF0ADd83ea50CA947d229918ab8; \r\n        Operator = 0x0d70a7f85A75d1cD59AA7c27269fB0807238c573; \r\n     }\r\n \r\n      \r\n       \r\n    function ATTRecharge(uint256 ATTNumber ) public    {\r\n        _ATTIns.transferFrom(msg.sender, address(this),ATTNumber);\r\n    }\r\n \r\n \r\n    function multiTransfer(\r\n        address[] calldata addresses,\r\n        uint256[] calldata tokens\r\n    ) external onlyOperator() onlyOpen() {\r\n\r\n\r\n        if(times<=block.timestamp){\r\n            times = block.timestamp.add(86400);\r\n            dayAll = 0;\r\n        }\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            dayAll = dayAll.add(tokens[i]);\r\n            require(dayAll <= dayMax, \"dayMax\");\r\n            _ATTIns.transfer( addresses[i],tokens[i]);\r\n        }\r\n    }\r\n\r\n\r\n\r\n     function multiTransferOne(\r\n        address  addresses,\r\n        uint256  tokens\r\n    ) external onlyOperator() onlyOpen() {\r\n              dayAll = dayAll.add(tokens);\r\n                require(dayAll <= dayMax, \"dayMax\");\r\n             _ATTIns.transfer( addresses ,tokens );\r\n        \r\n    }\r\n\r\n\r\n    function ApplyForWithdrawal(\r\n        uint256  tokens\r\n    ) external   {\r\n    }\r\n\r\n  \r\n   \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ATTNumber\",\"type\":\"uint256\"}],\"name\":\"ATTRecharge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"ApplyForWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Open\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addresses\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"multiTransferOne\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAuthenticationO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAuthenticationP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Quantity\",\"type\":\"uint256\"}],\"name\":\"setDayMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setOpenOrClose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"transferOperatorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ATTCT", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ceaa7179cdb43a0324c555936fececa8fb02637695461ff057e6eaafa02a19bd"}