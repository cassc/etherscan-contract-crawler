{"SourceCode": "/**\r\n * @title DXLock - Empowering Trust through Token Locking\r\n * @dev Secure, User-Friendly Smart Contract to Lock Liquidity and Regular Tokens.\r\n *\r\n * \ud83d\ude80 Introduction:\r\n * Welcome to DXLock, the pinnacle of token locking on the blockchain! Developed with passion and precision,\r\n * DXLock stands out as a beacon of trust and commitment in the crypto world. This smart contract is meticulously\r\n * crafted to lock both liquidity tokens and regular ERC20 tokens, ensuring a secure and transparent environment\r\n * for your assets.\r\n *\r\n * \ud83c\udf10 Visit DXLock:\r\n * Dive deeper into the world of DXLock by visiting our platform at [dx.app](https://dx.app). Discover a treasure trove of features,\r\n * tutorials, and support to elevate your token locking experience!\r\n *\r\n * \ud83d\udca1 Features:\r\n * 1. **Liquidity Locking**: Cement your project's credibility by locking liquidity tokens. Show the world that you're here to stay!\r\n * 2. **Token Locking**: Not just for liquidity! Lock any ERC20 tokens with ease and confidence.\r\n * 3. **Time-locked Security**: Your tokens are safe and sound until the predetermined unlock time hits the clock.\r\n * 4. **Transparent and Trustworthy**: Open-source and audited, DXLock is a fortress of reliability.\r\n *\r\n * \ud83d\udee1\ufe0f Security:\r\n * Your trust is our top priority. DXLock is fortified with industry-leading security practices to shield your assets\r\n * and ensure a seamless experience. Though thorough audits have been conducted, we encourage users to do their own\r\n * research and verify the contract's integrity before engaging.\r\n *\r\n * \ud83d\udcd6 How to Use:\r\n * Engaging with DXLock is a breeze! Simply deposit your tokens, set the lock duration, and rest easy knowing\r\n * your assets are in good hands. Once the lock period concludes, withdrawing is just a click away.\r\n *\r\n * \ud83d\udc65 Community and Support:\r\n * Join our vibrant community and connect with the DXLock team and fellow users! Your feedback and questions are invaluable\r\n * to us, as we continually strive to enhance DXLock\u2019s functionality and user experience.\r\n *\r\n * \ud83d\udcdc License:\r\n * DXLock is proudly released under the MIT License. We believe in openness and the power of community-driven innovation.\r\n *\r\n * @author The DXLock Team\r\n * @notice Utilize DXLock at your own discretion. We\u2019ve done everything to ensure its security, but the final responsibility lies with the user.\r\n */\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.14;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\ninterface decentralizedStorage {\r\n    function addNewPersonalLocker(address _lockedTokens, uint256 _lockedTime, address _lockContract, string memory _logo, uint256 _vestCount, uint256 _lockerType) external;\r\n    function transferPersonalLocker(address _newOwner, uint256 _personalLockerCount) external;\r\n    function unlockPersonalLocker(uint256 _personalLockerCount) external;\r\n    function extendPersonalLocker(uint256 _newLockTimeStamp, uint256 _personalLockerCount) external;\r\n    function changeLogoPersonalLocker(string memory _logo, uint256 _personalLockerCount) external;\r\n    function getPersonalLockerCount(address _owner) external returns (uint256);\r\n    function getBurnContractAddress() external view returns (address);\r\n}\r\n\r\ninterface FeeCheckContractInterface {\r\n\r\n    function getFees(string memory _dappName) external view returns(uint256);\r\n    function getWhitelistFees(string memory _dappWhitelistName) external view returns(uint256);\r\n}\r\n\r\ninterface FeeDepositContractInterface {\r\n\r\n    function payment(uint256 _dappNum) external payable;\r\n}\r\n\r\ninterface ReferralContract {\r\n\r\n    function getDiscountedPrice(string memory _code) external returns(uint256);\r\n    function validateCode(string memory _code) external returns(bool);\r\n    function fetchCodeOwner(string memory _code) external returns(address);\r\n    function fetchCodeOwnerPercentage(string memory _code) external returns(uint256);\r\n    function updateReferrerAmounts(address _referrer, uint256 _updateAmount)  external returns(bool);  \r\n    function updateCodeUseNumber(string memory _code, address _presaleAddress) external returns(bool);\r\n}\r\n\r\ncontract PersonalTokenLockerWithRewards is Ownable {\r\n\r\n    bool public feePaid;\r\n    uint256 public percFeeAmount;\r\n\r\n    bool public vesting;\r\n    uint256 public vestCount = 1;\r\n    uint256 public vestCountLeft;\r\n    uint256 public vestedRounds;\r\n    uint256 public vestInterval;\r\n    uint256 public vestAmountPerCycle;\r\n\r\n    uint256 public LockedAmount;\r\n\r\n    uint256 public personalLockerCount;\r\n    address public storagePersonal;\r\n\r\n    uint256 public RewardsNativeClaimed;\r\n    uint256 public ReflectionClaimed;\r\n    bool public reflection = true;\r\n    mapping(address => uint256) public RewardsTokenClaimed;\r\n    uint256 public LockExpireTimestamp;\r\n    uint256 public LockerCreationTimestamp;\r\n    uint256 public LockerLastVestingTimestamp;\r\n\r\n    IERC20 public PersonalLockerToken;\r\n    IERC20 public PersonalRewardToken;\r\n    uint256 public LockerType = 2;\r\n    bool public tokenWithdrawn;\r\n\r\n    address internal feeDeposit;\r\n    uint256 public relockPercAmount;\r\n    bool public relockAfterExpire = true;\r\n\r\n    constructor (address _lockTokenAddress, address _rewardTokenAddress, uint256 _lockTimeEnd, uint256 _personalLockerCount, address _lockerStorage, uint256 _lockingAmount, uint256 _vestCount, bool _feeState, uint256 _percFee, uint256 _relockPercAmount, address _feeDeposit) {\r\n        require(_lockTokenAddress != _rewardTokenAddress, \"Cant get the same Token as Reward\");\r\n        require(_lockTimeEnd > block.timestamp, \"Please lock longer than now\");\r\n        require(_lockingAmount > 0,\"can't lock 0 Tokens\");\r\n        require(_vestCount > 0,\"vest cannot be 0\");\r\n\r\n        if (_vestCount > 1) {\r\n            vesting = true;\r\n            vestCount = _vestCount;\r\n            vestCountLeft = _vestCount;\r\n            vestAmountPerCycle = _lockingAmount / _vestCount;\r\n            vestInterval = (_lockTimeEnd - block.timestamp) / _vestCount;\r\n        }\r\n\r\n        LockedAmount = _lockingAmount;\r\n        PersonalLockerToken = IERC20(_lockTokenAddress);\r\n        PersonalRewardToken = IERC20(_rewardTokenAddress);\r\n        LockExpireTimestamp = _lockTimeEnd;\r\n        personalLockerCount = _personalLockerCount;\r\n        storagePersonal = _lockerStorage;\r\n\r\n        LockerCreationTimestamp = block.timestamp;\r\n        LockerLastVestingTimestamp = block.timestamp;\r\n\r\n        feePaid = _feeState;\r\n        percFeeAmount = _percFee;\r\n\r\n        feeDeposit = _feeDeposit;\r\n        relockPercAmount = _relockPercAmount;\r\n\r\n        _transferOwnership(tx.origin);\r\n    }\r\n\r\n    receive() external payable {\r\n\r\n    }\r\n\r\n    function changeLogo(string memory _logo) external onlyOwner {\r\n        decentralizedStorage(storagePersonal).changeLogoPersonalLocker(_logo, personalLockerCount);\r\n    }\r\n\r\n    function CheckLockedBalance() public view returns (uint256){\r\n        return PersonalLockerToken.balanceOf(address(this));\r\n    }\r\n\r\n    //This function will withdraw the amount vested Tokens, in case the LockerTime is over you can also use the function for \"unlockTokensAfterTimestamp\" otherwise you wont get reward tokens back.\r\n    function WithdrawVestedTokens() external onlyOwner {\r\n        require(feePaid, \"Please pay the fee first\");\r\n        require(vesting, \"Vesting disabled\");\r\n\r\n        uint256 cycles = (block.timestamp - LockerCreationTimestamp) / vestInterval;\r\n        require(vestedRounds < vestCount,\"no vest left\");\r\n        require((cycles - vestedRounds) > 0,\"vesting not unlocked\");\r\n        require(cycles > 0, \"No cycles available\");\r\n\r\n        if ((cycles - vestedRounds) >= vestCountLeft) {\r\n            cycles = vestCountLeft;\r\n            vestedRounds = vestCount;\r\n            PersonalLockerToken.transfer(owner(), PersonalLockerToken.balanceOf(address(this)));\r\n            vestCountLeft = 0;\r\n            LockedAmount = 0;\r\n\r\n        } else {\r\n            vestCountLeft -= (cycles - vestedRounds);\r\n            uint256 _vestedAmount = vestAmountPerCycle * (cycles - vestedRounds);\r\n            vestedRounds = cycles;\r\n            PersonalLockerToken.transfer(owner(), _vestedAmount);\r\n            LockedAmount -= _vestedAmount;\r\n        }\r\n        LockerLastVestingTimestamp = block.timestamp;\r\n\r\n        if (!tokenWithdrawn){\r\n            decentralizedStorage(storagePersonal).unlockPersonalLocker(personalLockerCount);\r\n            tokenWithdrawn = true;\r\n        }\r\n    }\r\n\r\n    function ExtendPersonalLocker(uint256 _newLockTime) external onlyOwner {\r\n        require(LockExpireTimestamp < _newLockTime, \"You cant reduce locktime...\");\r\n        require(block.timestamp < _newLockTime, \"You cant extend locktime in the past\");\r\n        require(!tokenWithdrawn, \"Tokens were already withdrawn\");\r\n\r\n        if (block.timestamp > (LockExpireTimestamp + 300)) {\r\n            uint256 amountFee = (LockedAmount * relockPercAmount) / 1000;\r\n            PersonalLockerToken.transfer(feeDeposit, amountFee);\r\n            LockedAmount -= amountFee;\r\n        }\r\n\r\n        LockExpireTimestamp = _newLockTime;\r\n        //Change also the vesting interval\r\n        if(vestCount > 1){\r\n            vestInterval = (_newLockTime - LockerCreationTimestamp) / vestCount;\r\n        }\r\n        decentralizedStorage(storagePersonal).extendPersonalLocker(_newLockTime, personalLockerCount);\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public override onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n        decentralizedStorage(storagePersonal).transferPersonalLocker(_newOwner, personalLockerCount);\r\n    }\r\n\r\n    function unlockTokensAfterTimestamp() external onlyOwner {\r\n        require(block.timestamp >= LockExpireTimestamp, \"Token is still Locked\");\r\n        require(feePaid, \"The fee is not yet paid\");\r\n\r\n        PersonalLockerToken.transfer(owner(), PersonalLockerToken.balanceOf(address(this)));\r\n        LockedAmount = 0;\r\n        \r\n        if (!tokenWithdrawn){\r\n            decentralizedStorage(storagePersonal).unlockPersonalLocker(personalLockerCount);\r\n            tokenWithdrawn = true;\r\n        }\r\n\r\n    }\r\n\r\n    function payFee() external onlyOwner {\r\n        require(!feePaid, \"The fee has already been paid\");\r\n\r\n        uint256 feeToPay = (PersonalLockerToken.balanceOf(address(this)) * percFeeAmount) / 1000;\r\n        PersonalLockerToken.transfer(decentralizedStorage(storagePersonal).getBurnContractAddress(), feeToPay);\r\n        feePaid = true;\r\n    }\r\n\r\n    function unlockPercentageAfterTimestamp(uint256 _percentage) external onlyOwner {\r\n        require(_percentage <= 100, \"You can't withdraw more than 100%\");\r\n        require(block.timestamp >= LockExpireTimestamp, \"Token is still Locked\");\r\n        require(feePaid, \"Fee not paid yet\");\r\n\r\n        uint256 amountUnlock = (PersonalLockerToken.balanceOf(address(this)) * _percentage) / 100;\r\n        PersonalLockerToken.transfer(owner(), amountUnlock);\r\n        LockedAmount -= amountUnlock;\r\n\r\n        if (!tokenWithdrawn){\r\n            decentralizedStorage(storagePersonal).unlockPersonalLocker(personalLockerCount);\r\n            tokenWithdrawn = true;\r\n        }\r\n    }\r\n\r\n    function WithdrawRewardNativeToken() external onlyOwner {\r\n        uint256 amountFee = (address(this).balance * percFeeAmount) / 1000;\r\n        payable(decentralizedStorage(storagePersonal).getBurnContractAddress()).transfer(amountFee);\r\n        uint256 amount = address(this).balance;\r\n        payable(owner()).transfer(amount);\r\n        RewardsNativeClaimed += amount;\r\n    }\r\n\r\n    function WithdrawTokensReward(address _token) external onlyOwner {\r\n        require(_token != address(PersonalLockerToken), \"You can't unlock the Tokens you locked with this function!\");\r\n\r\n        uint256 amountFee = (IERC20(_token).balanceOf(address(this))* percFeeAmount) / 1000;\r\n        IERC20(_token).transfer(decentralizedStorage(storagePersonal).getBurnContractAddress(), amountFee);\r\n\r\n        uint256 amount = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).transfer(owner(), amount);\r\n        RewardsTokenClaimed[_token] += amount;\r\n    }\r\n\r\n    function WithdrawReflectionReward() external onlyOwner {\r\n        uint256 amountReflection;\r\n        if(vesting){\r\n            amountReflection = (IERC20(PersonalLockerToken).balanceOf(address(this))) - (vestCountLeft*vestAmountPerCycle);\r\n        }\r\n        else {\r\n\r\n            amountReflection = (IERC20(PersonalLockerToken).balanceOf(address(this))) - LockedAmount;\r\n\r\n        }\r\n        require(amountReflection > 0,\"no reflection left for claim\");\r\n        uint256 amountFee = (amountReflection * percFeeAmount) / 1000;\r\n        IERC20(PersonalLockerToken).transfer(decentralizedStorage(storagePersonal).getBurnContractAddress(), amountFee);\r\n\r\n        uint256 amount = amountReflection - amountFee;\r\n        IERC20(PersonalLockerToken).transfer(owner(), amount);\r\n        ReflectionClaimed += amount;\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lockTimeEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_personalLockerCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lockerStorage\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lockingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_feeState\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_percFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_relockPercAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeDeposit\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CheckLockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLockTime\",\"type\":\"uint256\"}],\"name\":\"ExtendPersonalLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LockExpireTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LockerCreationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LockerLastVestingTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LockerType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PersonalLockerToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PersonalRewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ReflectionClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RewardsNativeClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RewardsTokenClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WithdrawReflectionReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WithdrawRewardNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"WithdrawTokensReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WithdrawVestedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_logo\",\"type\":\"string\"}],\"name\":\"changeLogo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePaid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"personalLockerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relockAfterExpire\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relockPercAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storagePersonal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenWithdrawn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"unlockPercentageAfterTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTokensAfterTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestAmountPerCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestCountLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestedRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vesting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PersonalTokenLockerWithRewards", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c787e1ba67273e74ed69f83dd0dcda1b6d946db200000000000000000000000004f73a09e2eb410205be256054794fb452f0d245000000000000000000000000000000000000000000000000000000006541b386000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000983b00a2c3d8925cedfc9f3eb5df1ae121ff6b9f0000000000000000000000000000000000000000000000000000023a7e47e68000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000005000000000000000000000000b44ea272f317e379567ce54acd94a2891597024e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d2520b183946bc820748d1485f0e4137b69a84ee30417ccdf96e24e3b2d35ac5"}