{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/contributions/FlashContributionCollector.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IFlashContributionCollector.sol\\\";\\n\\nerror ZeroAddressContributionToken();\\nerror InvalidMerkleRoot();\\nerror EmptyTierCaps();\\nerror InvalidTierCaps();\\nerror InactiveContribution();\\nerror ZeroAddressRecipient();\\nerror InvalidNewTierCaps();\\nerror InvalidContributionAmount();\\nerror InvalidTier();\\nerror InvalidProof();\\nerror ContributionOverSingularCap();\\nerror CapOverflow();\\nerror NonRecoverableContribution();\\nerror AlreadyRecovered();\\nerror InvalidExpirationTimestamp();\\nerror Forbidden();\\nerror InvalidAllowedRecipients();\\nerror InvalidRecipient();\\n\\n/**\\n * @title FlashContributionCollector\\n * @dev FlashContributionCollector contract\\n * @author Federico Luzzi - <fedeluzzi00@gmail.com>\\n * SPDX-License-Identifier: GPL-3.0\\n */\\ncontract FlashContributionCollector is\\n    IFlashContributionCollector,\\n    Initializable\\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    State public state;\\n    Contribution public contribution;\\n    mapping(address => Contributor) public contributor;\\n    address[] public allowedRecipients;\\n    uint256 public expirationTimestamp;\\n    bytes32 public merkleRoot;\\n    address public token;\\n    address public owner;\\n\\n    event Initialized(\\n        address token,\\n        uint256[] tierCaps,\\n        bytes32 merkleRoot,\\n        uint256 expirationTimestamp,\\n        address[] allowedRecipients\\n    );\\n    event MerkleRootUpdated(bytes32 merkleRoot);\\n    event Canceled();\\n    event Finalized(address recipient, uint256 amount);\\n    event TierCapsUpdated(uint256[] caps);\\n    event Contributed(address contributor, uint256 amount);\\n    event Recovered(address recoveree, uint256 amount);\\n\\n    function initialize(\\n        address _token,\\n        bytes32 _merkleRoot,\\n        uint256[] calldata _tierCaps,\\n        uint256 _expirationTimestamp,\\n        address[] calldata _allowedRecipients\\n    ) external override initializer {\\n        if (_token == address(0)) revert ZeroAddressContributionToken();\\n        if (_merkleRoot == bytes32(\\\"\\\")) revert InvalidMerkleRoot();\\n        if (_tierCaps.length == 0) revert EmptyTierCaps();\\n        if (_expirationTimestamp <= block.timestamp)\\n            revert InvalidExpirationTimestamp();\\n        if (_allowedRecipients.length == 0) revert InvalidAllowedRecipients();\\n        bool _atLeastOneNonZeroCap = false;\\n        for (uint256 _i = 0; _i < _tierCaps.length; _i++) {\\n            if (_tierCaps[_i] > 0) {\\n                _atLeastOneNonZeroCap = true;\\n                break;\\n            }\\n        }\\n        if (!_atLeastOneNonZeroCap) revert InvalidTierCaps();\\n        bool _containsZeroAddressRecipient = false;\\n        for (uint256 _i = 0; _i < _allowedRecipients.length; _i++) {\\n            if (_allowedRecipients[_i] == address(0)) {\\n                _containsZeroAddressRecipient = true;\\n                break;\\n            }\\n        }\\n        if (_containsZeroAddressRecipient) revert InvalidAllowedRecipients();\\n        owner = msg.sender;\\n        state = State.ACTIVE;\\n        token = _token;\\n        merkleRoot = _merkleRoot;\\n        allowedRecipients = _allowedRecipients;\\n        uint256[] memory _amounts = new uint256[](_tierCaps.length);\\n        for (uint256 _i = 0; _i < _tierCaps.length; _i++) _amounts[_i] = 0;\\n        contribution = Contribution({\\n            tierCaps: _tierCaps,\\n            amounts: _amounts,\\n            totalAmount: 0\\n        });\\n        expirationTimestamp = _expirationTimestamp;\\n        emit Initialized(\\n            _token,\\n            _tierCaps,\\n            _merkleRoot,\\n            _expirationTimestamp,\\n            _allowedRecipients\\n        );\\n    }\\n\\n    function transferOwnership(address _newOwner) external override {\\n        if (msg.sender != owner) revert Forbidden();\\n        owner = _newOwner;\\n    }\\n\\n    function updateMerkleRoot(bytes32 _merkleRoot) external override {\\n        if (msg.sender != owner) revert Forbidden();\\n        if (state != State.ACTIVE) revert InactiveContribution();\\n        if (_merkleRoot == bytes32(\\\"\\\")) revert InvalidMerkleRoot();\\n        merkleRoot = _merkleRoot;\\n        emit MerkleRootUpdated(_merkleRoot);\\n    }\\n\\n    function cancel() external override {\\n        if (msg.sender != owner) revert Forbidden();\\n        if (state != State.ACTIVE) revert InactiveContribution();\\n        state = State.CANCELED;\\n        emit Canceled();\\n    }\\n\\n    function finalize(address _recipient) external override {\\n        if (msg.sender != owner) revert Forbidden();\\n        if (state != State.ACTIVE) revert InactiveContribution();\\n        if (_recipient == address(0)) revert ZeroAddressRecipient();\\n        bool _allowedRecipient = false;\\n        for (uint256 _i = 0; _i < allowedRecipients.length; _i++) {\\n            if (allowedRecipients[_i] == _recipient) {\\n                _allowedRecipient = true;\\n                break;\\n            }\\n        }\\n        if (!_allowedRecipient) revert InvalidRecipient();\\n        state = State.FINALIZED;\\n        uint256 _contributionTokenBalance = IERC20Upgradeable(token).balanceOf(\\n            address(this)\\n        );\\n        IERC20Upgradeable(token).safeTransfer(\\n            _recipient,\\n            _contributionTokenBalance\\n        );\\n        emit Finalized(_recipient, _contributionTokenBalance);\\n    }\\n\\n    function updateTierCaps(uint256[] calldata _newTierCaps) external override {\\n        if (msg.sender != owner) revert Forbidden();\\n        if (state != State.ACTIVE) revert InactiveContribution();\\n        for (uint256 _i = 0; _i < _newTierCaps.length; _i++)\\n            if (contribution.amounts[_i] > _newTierCaps[_i])\\n                revert InvalidNewTierCaps();\\n        contribution.tierCaps = _newTierCaps;\\n        emit TierCapsUpdated(_newTierCaps);\\n    }\\n\\n    function contribute(\\n        address _account,\\n        uint256 _amount,\\n        uint256 _tier,\\n        uint256 _maximumAmount,\\n        bytes32[] memory _proof\\n    ) external override {\\n        if (state != State.ACTIVE) revert InactiveContribution();\\n        if (_amount == 0) revert InvalidContributionAmount();\\n        if (_tier >= contribution.tierCaps.length) revert InvalidTier();\\n        if (\\n            contribution.amounts[_tier] + _amount > contribution.tierCaps[_tier]\\n        ) revert CapOverflow();\\n        bytes32 _leaf = keccak256(\\n            abi.encodePacked(_account, _tier, _maximumAmount)\\n        );\\n        if (!MerkleProofUpgradeable.verify(_proof, merkleRoot, _leaf))\\n            revert InvalidProof();\\n        Contributor storage _contributor = contributor[_account];\\n        if (\\n            _contributor.contributionWithMerkleRoot[merkleRoot] + _amount >\\n            _maximumAmount\\n        ) revert ContributionOverSingularCap();\\n        _contributor.contributed += _amount;\\n        _contributor.contributionWithMerkleRoot[merkleRoot] += _amount;\\n        contribution.totalAmount += _amount;\\n        contribution.amounts[_tier] += _amount;\\n        IERC20Upgradeable(token).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        emit Contributed(_account, _amount);\\n    }\\n\\n    function recover() external override {\\n        if (state != State.CANCELED && block.timestamp <= expirationTimestamp)\\n            revert NonRecoverableContribution();\\n        Contributor storage _contributor = contributor[msg.sender];\\n        if (_contributor.recovered) revert AlreadyRecovered();\\n        _contributor.recovered = true;\\n        IERC20Upgradeable(token).safeTransfer(\\n            msg.sender,\\n            _contributor.contributed\\n        );\\n        emit Recovered(msg.sender, _contributor.contributed);\\n    }\\n\\n    function contributionAmount(uint256 _tier)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return contribution.amounts[_tier];\\n    }\\n\\n    function contributionTierCap(uint256 _tier)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return contribution.tierCaps[_tier];\\n    }\\n\\n    function contributedWithMerkleRoot(\\n        address _contributor,\\n        bytes32 _merkleRoot\\n    ) external view override returns (uint256) {\\n        return\\n            contributor[_contributor].contributionWithMerkleRoot[_merkleRoot];\\n    }\\n\\n    function contributed(address _contributor)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return contributor[_contributor].contributed;\\n    }\\n\\n    function recovered(address _contributor)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return contributor[_contributor].recovered;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProofUpgradeable {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFlashContributionCollector.sol\": {\r\n      \"content\": \"pragma solidity >=0.8.0;\\n\\n/**\\n * @title IFlashContributionCollector\\n * @dev IFlashContributionCollector interface\\n * @author Federico Luzzi - <fedeluzzi00@gmail.com>\\n * SPDX-License-Identifier: GPL-3.0\\n */\\ninterface IFlashContributionCollector {\\n    enum State {\\n        ACTIVE,\\n        CANCELED,\\n        FINALIZED\\n    }\\n\\n    struct Contributor {\\n        uint256 contributed;\\n        mapping(bytes32 => uint256) contributionWithMerkleRoot;\\n        bool recovered;\\n    }\\n\\n    struct Contribution {\\n        uint256[] tierCaps;\\n        uint256[] amounts;\\n        uint256 totalAmount;\\n    }\\n\\n    function state() external view returns (State);\\n\\n    function merkleRoot() external view returns (bytes32);\\n\\n    function token() external view returns (address);\\n\\n    function contributedWithMerkleRoot(address _account, bytes32 _merkleRoot)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function contributed(address _account) external view returns (uint256);\\n\\n    function recovered(address _account) external view returns (bool);\\n\\n    function initialize(\\n        address _token,\\n        bytes32 _merkleRoot,\\n        uint256[] calldata _tierCaps,\\n        uint256 _collectionTimeLimit,\\n        address[] calldata _allowedRecipients\\n    ) external;\\n\\n    function transferOwnership(address _owner) external;\\n\\n    function updateMerkleRoot(bytes32 _merkleRoot) external;\\n\\n    function cancel() external;\\n\\n    function finalize(address _recipient) external;\\n\\n    function updateTierCaps(uint256[] calldata _newTierCaps) external;\\n\\n    function contribute(\\n        address _account,\\n        uint256 _amount,\\n        uint256 _tier,\\n        uint256 _maximumAmount,\\n        bytes32[] calldata _proof\\n    ) external;\\n\\n    function recover() external;\\n\\n    function contributionAmount(uint256 _tier) external view returns (uint256);\\n\\n    function contributionTierCap(uint256 _tier) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"AlreadyRecovered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CapOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContributionOverSingularCap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyTierCaps\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Forbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InactiveContribution\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAllowedRecipients\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidContributionAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExpirationTimestamp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMerkleRoot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNewTierCaps\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTierCaps\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonRecoverableContribution\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressContributionToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressRecipient\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Canceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Contributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tierCaps\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"allowedRecipients\",\"type\":\"address[]\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"MerkleRootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recoveree\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"caps\",\"type\":\"uint256[]\"}],\"name\":\"TierCapsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowedRecipients\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maximumAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"contributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"contributedWithMerkleRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"}],\"name\":\"contributionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"}],\"name\":\"contributionTierCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"contributed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"recovered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expirationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"_tierCaps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_expirationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_allowedRecipients\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"recovered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum IFlashContributionCollector.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"updateMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_newTierCaps\",\"type\":\"uint256[]\"}],\"name\":\"updateTierCaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FlashContributionCollector", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}