{"SourceCode": "{\"BabyDogeCake.sol\":{\"content\":\"/**\\n\\nThe first MULTI-TOKEN reflection protocol! Hold $BDC tokens to receive both DOGE and CAKE, automatically. \\nTG: t.me/BabyDogeCake\\n\\n*/\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.3;\\n\\nimport \\u0027./IUniswapV2Router02.sol\\u0027;\\nimport \\u0027./IUniswapV2Factory.sol\\u0027;\\nimport \\u0027./IUniswapV2Pair.sol\\u0027;\\nimport \\u0027./SafeMath.sol\\u0027;\\nimport \\u0027./ERC20.sol\\u0027;\\n\\nimport \\u0027./SafeMathUint.sol\\u0027;\\nimport \\u0027./SafeMathInt.sol\\u0027;\\n\\ncontract AutoPayingTokenBase is ERC20 {\\n\\t// -=-= ALL EVENTS\\n\\tevent RecoveryFundWalletUpdated(address indexed oldWallet, address indexed newWallet);\\n    event MarketingWalletUpdated(address indexed oldWallet, address indexed newWallet);\\n    event MarketingFeeUpdated(uint indexed oldValue, uint indexed newValue);\\n\\n    event MinTokensForRewardsUpdated(uint indexed oldValue, uint indexed newValue);\\n\\tevent MinTokensBeforeSwapUpdated(uint indexed oldValue, uint indexed newValue);\\n\\n    event WalletWhitelistUpdated(address indexed wallet, bool indexed newValue);\\n\\t\\n\\tevent MaxTxAmountUpdated(uint indexed oldValue, uint indexed newValue);\\n\\n\\t// event PresaleSpendingEnabled(bool indexed oldValue, bool indexed newValue);\\n    \\n\\tevent AntiWhaleEnabledUpdated(bool indexed oldValue, bool indexed newValue);\\n\\tevent BuyBacksEnabledUpdated(bool indexed oldValue, bool indexed newValue);\\n\\t\\n\\t// event TradingEnabledUpdated(bool indexed oldValue, bool indexed newValue);\\n    event SwapEnabledUpdated(bool indexed oldValue, bool indexed newValue);\\n    \\n\\tevent ClaimDelayUpdated(uint indexed oldValue, uint indexed newValue);\\n\\tevent BuyBackFeeUpdated(uint indexed oldValue, uint indexed newValue);\\n    \\n    event OwnershipTransferred(address indexed from, address indexed to);\\n\\t\\n\\tevent SellFeeUpdated(uint indexed oldValue, uint indexed newValue);\\n    event BuyFeeUpdated(uint indexed oldValue, uint indexed newValue);\\n    \\n\\tevent MinGasUpdated(uint indexed oldValue, uint indexed newValue);\\n    event MaxGasUpdated(uint indexed oldValue, uint indexed newValue);\\n\\n\\tevent ExcludedFromRewards(address indexed wallet);\\n    event ExcludedFromFees(address indexed wallet);\\n\\t// -=-= END ALL EVENTS\\n\\n\\t// mapping (address =\\u003e bool) public receivedTokensFromPair; // Useful to tell if someone got tokens from presale/private sale vs pancakeswap\\n\\tmapping (address =\\u003e bool) public excludedFromRewards;\\n\\tmapping (address =\\u003e bool) public excludedFromFees;\\n    mapping (address =\\u003e uint) public nextClaimTime;\\n\\tmapping (address =\\u003e bool) public whitelisted;\\n\\tmapping (address =\\u003e uint) public index; // Useful for predicting how long until next payout\\n    address[] public addresses;\\n\\t\\n\\taddress internal recoveryFundWallet;\\n\\taddress internal marketingWallet;\\n\\n\\tbool internal buyingBack = false;\\n\\tbool internal swapping = false;\\n\\tuint public totalHolders = 0;\\n    uint public checkIndex = 0;\\n\\n    // Configurable values\\n\\tuint internal maxTxAmount = totalSupply.mul(5) / 100; //5 percent of the supply (Anti Whale Measures)\\n\\tuint internal minTokensBeforeSwap = 2000000000; // 2 billion (no decimal adjustment)\\n    uint internal minTokensForRewards = 2000000; // in tokens (no decimal adjustment)\\n    uint internal claimDelay = 60; // in minutes\\n    uint internal buyFee = 17; // percent fee for buying, goes towards rewards\\n    uint internal sellFee = 20; // percent fee for selling, goes towards rewards\\n\\tuint internal minGas = 200000; // Estimate for how much gas needs to remain after auto-paying\\n\\tuint internal maxGas = 800000; // If we don\\u0027t cap gas, metamask will keep requesting more and more, leading to $30+ gas fees (no good!)\\n\\n\\t// FOR THESE VALUES, THEY ARE A PERCENT *OF A PERCENT* - 20% OF 15% aka (.2 * .15) = 3% of every transaction\\n\\tuint internal recoveryFundTax = 6; // Once all fees are accumulated and swapped, what percent goes towards the recovery fund (0.16 * 0.05 approx equals 0.1)\\n\\tuint internal marketingTax = 20; // Once all fees are accumulated and swapped, what percent goes towards marketing\\n\\tuint internal buyBackFee = 20; // Once all fees are accumulated and swapped, what percent goes towards buybacks\\n\\t\\n\\taddress[] internal tokens; // These are the tokens that people will receive rewards in, defined by the constructor\\n\\n\\t// bool internal presaleSpendingEnabled = false;\\n\\tbool internal antiWhaleEnabled = false;\\n\\tbool internal buyBacksEnabled = true;\\n\\tbool internal tradingEnabled = false;\\n\\tbool internal swapEnabled = true;\\n    // End configurable values\\n\\n\\t// Adjusted values (don\\u0027t edit)\\n    uint internal _minTokensBeforeSwap = minTokensBeforeSwap * 10 ** decimals;\\n    uint internal _minTokensForRewards = minTokensForRewards * 10 ** decimals;\\n    uint internal _claimDelay = claimDelay * 60;\\n\\tuint internal sellGasExtra = 50000;  // Sell transactions need more gas left\\n    // End adjusted values\\n    \\n    using SafeMath for uint;\\n\\n    IUniswapV2Router02 router;\\n    IUniswapV2Pair pair;\\n\\n    uint8 public constant decimals = 18;\\n    string public symbol;\\n    string public name;\\n\\n\\taddress internal owner;\\n\\n\\tuint internal correctionFactor = 10; // correct for volatility\\n\\n\\taddress internal deadAddress = 0x000000000000000000000000000000000000dEaD;\\n\\n\\tfunction getTime() public returns (uint) {\\n\\t\\treturn block.timestamp;\\n\\t}\\n\\n\\tmodifier ownerOnly() {\\n\\t\\trequire(msg.sender == owner, \\u0027Must be owner to run this function\\u0027);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier notIdenticalUint(uint oldValue, uint newValue) {\\n\\t\\trequire(oldValue != newValue, \\u0027Current value is identical to supplied value\\u0027);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier notIdenticalBool(bool oldValue, bool newValue) {\\n\\t\\trequire(oldValue != newValue, \\u0027Current value is identical to supplied value\\u0027);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier notIdenticalAddr(address oldValue, address newValue) {\\n\\t\\trequire(oldValue != newValue, \\u0027Current value is identical to supplied value\\u0027);\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction transferOwnership(address newOwner) public ownerOnly {\\n\\t\\taddress oldOwner = owner;\\n\\t\\towner = newOwner;\\n\\n        excludedFromRewards[oldOwner] = false;\\n\\t\\texcludedFromRewards[newOwner] = true;\\n        excludedFromFees[oldOwner] = false;\\n        excludedFromFees[newOwner] = true;\\n\\t\\twhitelisted[oldOwner] = false;\\n\\t\\twhitelisted[newOwner] = true;\\n\\n\\t\\temit OwnershipTransferred(oldOwner, newOwner);\\n\\t}\\n\\n\\tfunction changeMinTokensForRewards(uint newMinTokensForRewards) public ownerOnly notIdenticalUint(_minTokensForRewards, newMinTokensForRewards) {\\n\\t\\tuint oldValue = _minTokensForRewards;\\n    \\t_minTokensForRewards = newMinTokensForRewards;\\n\\n\\t\\temit MinTokensForRewardsUpdated(oldValue, _minTokensForRewards);\\n\\t}\\n\\n\\tfunction changeMinTokensBeforeSwap(uint newMinTokensBeforeSwap) public ownerOnly notIdenticalUint(_minTokensBeforeSwap, newMinTokensBeforeSwap) {\\n\\t\\tuint oldValue = _minTokensBeforeSwap;\\n    \\t_minTokensBeforeSwap = newMinTokensBeforeSwap;\\n\\n\\t\\temit MinTokensBeforeSwapUpdated(oldValue, _minTokensBeforeSwap);\\n\\t}\\n\\t\\n\\tfunction changeMaxTxAmount(uint newMaxTxAmount) public ownerOnly notIdenticalUint(maxTxAmount, newMaxTxAmount) {\\n\\t\\tuint oldValue = maxTxAmount;\\n    \\tmaxTxAmount = newMaxTxAmount;\\n\\n\\t\\temit MaxTxAmountUpdated(oldValue, maxTxAmount);\\n\\t}\\n\\n\\tfunction changeClaimDelay(uint newClaimDelay) public ownerOnly notIdenticalUint(_claimDelay, newClaimDelay) {\\n\\t\\tuint oldValue = _claimDelay;\\n\\t\\t_claimDelay = newClaimDelay * 60;\\n\\n\\t\\temit ClaimDelayUpdated(oldValue, _claimDelay);\\n\\t}\\n\\n\\t// function changePresaleSpendingEnabled(bool newPresaleSpendingEnabled) public ownerOnly notIdenticalBool(presaleSpendingEnabled, newPresaleSpendingEnabled) {\\n\\t// \\tbool oldValue = presaleSpendingEnabled;\\n\\t// \\tpresaleSpendingEnabled = newPresaleSpendingEnabled;\\n\\n\\t// \\temit PresaleSpendingEnabled(oldValue, presaleSpendingEnabled);\\n\\t// }\\n\\n\\tfunction changeSwapEnabled(bool newSwapEnabled) public ownerOnly notIdenticalBool(swapEnabled, newSwapEnabled) {\\n\\t\\tbool oldValue = swapEnabled;\\n\\t\\tswapEnabled = newSwapEnabled;\\n\\n\\t\\temit SwapEnabledUpdated(oldValue, swapEnabled);\\n\\t}\\n\\n\\tfunction changeBuyBacksEnabled(bool newBuyBacksEnabled) public ownerOnly notIdenticalBool(buyBacksEnabled, newBuyBacksEnabled) {\\n\\t\\tbool oldValue = buyBacksEnabled;\\n\\t\\tbuyBacksEnabled = newBuyBacksEnabled;\\n\\n\\t\\temit BuyBacksEnabledUpdated(oldValue, buyBacksEnabled);\\n\\t}\\n\\n\\tfunction changeAntiWhaleEnabled(bool newAntiWhaleEnabled) public ownerOnly notIdenticalBool(antiWhaleEnabled, newAntiWhaleEnabled) {\\n\\t\\tbool oldValue = newAntiWhaleEnabled;\\n\\t\\tantiWhaleEnabled = newAntiWhaleEnabled;\\n\\n\\t\\temit AntiWhaleEnabledUpdated(oldValue, antiWhaleEnabled);\\n\\t}\\n\\n\\tfunction changeCorrectionFactor(uint newCorrectionFactor) public ownerOnly notIdenticalUint(correctionFactor, newCorrectionFactor) {\\n\\t\\tuint oldValue = claimDelay;\\n\\t\\tcorrectionFactor = newCorrectionFactor;\\n\\n\\t\\temit ClaimDelayUpdated(oldValue, claimDelay);\\n\\t}\\n\\n\\tfunction changeSellFee(uint newSellFee) public ownerOnly notIdenticalUint(sellFee, newSellFee) {\\n\\t\\tuint oldValue = sellFee;\\n\\t\\tsellFee = newSellFee;\\n\\n\\t\\temit SellFeeUpdated(oldValue, sellFee);\\n\\t}\\n\\n\\tfunction changeBuyFee(uint newBuyFee) public ownerOnly notIdenticalUint(buyFee, newBuyFee) {\\n\\t\\trequire(buyFee \\u003c= 50, \\u0027Total fee amount is too high!\\u0027);\\n\\n\\t\\tuint oldValue = buyFee;\\n\\t\\tbuyFee = newBuyFee;\\n\\n\\t\\temit BuyFeeUpdated(oldValue, buyFee);\\n\\t}\\n\\n\\tfunction changeMinGas(uint newMinGas) public ownerOnly notIdenticalUint(minGas, newMinGas) {\\n\\t\\tuint oldValue = minGas;\\n\\t\\tminGas = newMinGas;\\n\\n\\t\\temit MinGasUpdated(oldValue, minGas);\\n\\t}\\n\\n\\tfunction changeMaxGas(uint newMaxGas) public ownerOnly notIdenticalUint(maxGas, newMaxGas) {\\n\\t\\tuint oldValue = maxGas;\\n\\t\\tmaxGas = newMaxGas;\\n\\n\\t\\temit MaxGasUpdated(oldValue, maxGas);\\n\\t}\\n\\n\\tfunction changeMarketingTax(uint newMarketingTax) public ownerOnly notIdenticalUint(marketingTax, newMarketingTax) {\\n\\t\\trequire(newMarketingTax \\u003c= 50, \\u0027Supplied value is too high\\u0027);\\n\\n\\t\\tuint oldValue = marketingTax;\\n\\t\\tmarketingTax = newMarketingTax;\\n\\n\\t\\temit MarketingFeeUpdated(oldValue, newMarketingTax);\\n\\t}\\n\\n\\tfunction changeBuyBackFee(uint newBuyBackFee) public ownerOnly notIdenticalUint(buyBackFee, newBuyBackFee) {\\n\\t\\tuint oldValue = buyBackFee;\\n\\t\\tbuyBackFee = newBuyBackFee;\\n\\n\\t\\temit BuyBackFeeUpdated(oldValue, buyBackFee);\\n\\t}\\n\\n\\tfunction changeMarketingWallet(address newMarketingWallet) public ownerOnly notIdenticalAddr(marketingWallet, newMarketingWallet) {\\n\\t\\taddress oldValue = marketingWallet;\\n\\t\\tmarketingWallet = newMarketingWallet;\\n\\n\\t\\texcludedFromRewards[marketingWallet] = true;\\n        excludedFromFees[marketingWallet] = true;\\n\\t\\texcludedFromRewards[oldValue] = false;\\n        excludedFromFees[oldValue] = false;\\n\\n\\t\\temit MarketingWalletUpdated(oldValue, marketingWallet);\\n\\t}\\n\\n\\tfunction changeRecoveryFundWallet(address newRecoveryFundWallet) public ownerOnly notIdenticalAddr(recoveryFundWallet, newRecoveryFundWallet) {\\n\\t\\taddress oldValue = recoveryFundWallet;\\n\\t\\trecoveryFundWallet = newRecoveryFundWallet;\\n\\n\\t\\texcludedFromRewards[recoveryFundWallet] = true;\\n        excludedFromFees[recoveryFundWallet] = true;\\n\\t\\texcludedFromRewards[oldValue] = false;\\n        excludedFromFees[oldValue] = false;\\n\\n\\t\\temit RecoveryFundWalletUpdated(oldValue, recoveryFundWallet);\\n\\t}\\n\\n\\tfunction setTradingEnabled(bool newTradingEnabled) public ownerOnly notIdenticalBool(tradingEnabled, newTradingEnabled) {\\n\\t\\tbool oldValue = tradingEnabled;\\n        tradingEnabled = newTradingEnabled;\\n\\n\\t\\t// emit TradingEnabledUpdated(oldValue, tradingEnabled);\\n\\t}\\n\\n\\tfunction excludeFromRewards(address wallet, bool isExcluded) public ownerOnly {\\n        excludedFromRewards[wallet] = isExcluded;\\n\\n\\t\\temit ExcludedFromRewards(wallet);\\n\\t}\\n\\n\\tfunction excludeFromFees(address wallet, bool isExcluded) public ownerOnly {\\n        excludedFromFees[wallet] = isExcluded;\\n\\n\\t\\temit ExcludedFromFees(wallet);\\n\\t}\\n\\t\\n\\tfunction whitelistWallet(address wallet, bool isWhitelisted) public ownerOnly {\\n        whitelisted[wallet] = isWhitelisted;\\n\\n\\t\\temit WalletWhitelistUpdated(wallet, isWhitelisted);\\n\\t}\\n\\n    function _transfer(address from, address to, uint value) virtual internal override {\\n\\t\\trequire(value \\u003e 0, \\u0027Insufficient transfer amount\\u0027);\\n\\t\\tuint balanceOfFrom = balanceOf[from];\\n\\n        require(value \\u003c= balanceOfFrom, \\u0027Insufficient token balance\\u0027);\\n\\n        if (from != msg.sender \\u0026\\u0026 allowance[from][msg.sender] != uint(-1)) {\\n            require(value \\u003c= allowance[from][msg.sender]);\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        }\\n\\n\\t\\tif (excludedFromFees[from] || excludedFromFees[to]) {\\n\\t\\t\\tbalanceOf[from] = balanceOfFrom.sub(value);\\n\\t\\t\\tbalanceOf[to] = balanceOf[to].add(value);\\n\\t\\t} else {\\n\\t\\t\\tuint feeAmount = value.mul(buyFee) / 100;\\n\\n\\t\\t\\t// Anti-Whaling\\n\\t\\t\\tif (!swapping \\u0026\\u0026 to == address(pair) \\u0026\\u0026 antiWhaleEnabled) {\\n\\t\\t\\t\\trequire(value \\u003c maxTxAmount, \\u0027Anti-Whale: Can not sell more than maxTxAmount\\u0027);\\n\\t\\t\\t\\tif (buyBacksEnabled) processBuyBack();\\n\\t\\t\\t\\tfeeAmount = value.mul(sellFee) / 100;\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\trequire(feeAmount \\u003e 0, \\u0027Fees are zero\\u0027);\\n\\n\\t\\t\\tif (from != address(pair) \\u0026\\u0026 to != address(pair)) feeAmount = 0; // Don\\u0027t tax on wallet to wallet transfers, only buy/sell\\n\\n\\t\\t\\tuint tokensToAdd = value.sub(feeAmount);\\n\\t\\t\\trequire(tokensToAdd \\u003e 0, \\u0027After fees, received amount is zero\\u0027);\\n\\n\\t\\t\\t// Update balances\\n\\t\\t\\tbalanceOf[address(this)] = balanceOf[address(this)].add(feeAmount);\\n\\t\\t\\tbalanceOf[from] = balanceOfFrom.sub(value);\\n\\t\\t\\tbalanceOf[to] = balanceOf[to].add(tokensToAdd);\\n\\t\\t}\\n\\n        if (/*from == address(pair) \\u0026\\u0026 */nextClaimTime[to] == 0 \\u0026\\u0026 !excludedFromRewards[to]) {\\t\\t\\t\\n\\t\\t\\tnextClaimTime[to] = block.timestamp + _claimDelay;\\n\\t\\t\\tindex[to] = addresses.length;\\n\\t\\t\\taddresses.push(to);\\n\\t\\t\\t\\n\\t\\t\\ttotalHolders = addresses.length;\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n\\tmodifier buyBackLock() {\\n\\t\\tbuyingBack = true;\\n\\t\\t_;\\n\\t\\tbuyingBack = false;\\n\\t}\\n\\n\\tfunction processBuyBack() internal buyBackLock {\\n\\t\\tuint before = balanceOf[address(pair)];\\n\\n\\t\\taddress[] memory path = new address[](2);\\n\\t\\tpath[0] = router.WETH();\\n\\t\\tpath[1] = address(this);\\n\\n\\t\\trouter.swapExactETHForTokensSupportingFeeOnTransferTokens{ value: address(this).balance / 100 }(0, path, deadAddress, block.timestamp); // Buy to burn address\\n\\t}\\n}\\n\\n/// @title Dividend-Paying Token\\n/// @author Roger Wu (https://github.com/roger-wu)\\n/// @dev A mintable ERC20 token that allows anyone to pay and distribute ether\\n///  to token holders as dividends and allows token holders to withdraw their dividends.\\n///  Reference: the source code of PoWH3D: https://etherscan.io/address/0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe#code\\ncontract BabyDogeCake is AutoPayingTokenBase {\\n\\tusing SafeMath for uint;\\n\\tusing SafeMathUint for uint;\\n\\tusing SafeMathInt for int;\\n\\n\\t// With `magnitude`, we can properly distribute dividends even if the amount of received tokens is small.\\n\\tuint constant internal magnitude = 2 ** 96;\\n\\n\\tmapping (address =\\u003e mapping(address =\\u003e int)) internal magnifiedDividendCorrections;\\n\\tmapping (address =\\u003e mapping(address =\\u003e uint)) public withdrawnDividendOf;\\n\\tmapping (address =\\u003e uint) internal magnifiedDividendPerShare;\\n\\n\\tmapping (address =\\u003e uint) public totalPaid;\\n\\tuint public totalPayouts = 0;\\n\\n\\tuint public totalSupplyInverse;\\n\\n\\tconstructor(string memory _name, string memory _symbol, uint _totalSupply, address[] memory rewardTokens, address routerAddress) {\\n\\t\\t/**\\n\\t\\t\\tOwner has total supply to give out whitelisted private sale tokens, and to pay dxsale the presale tokens\\n\\t\\t\\tOwner is whitelisted from trade lock, fees, and rewards for the same purpose\\n\\t\\t */\\n\\n\\t\\trouter = IUniswapV2Router02(routerAddress);\\n\\t\\towner = msg.sender;\\n\\n\\t\\ttotalSupplyInverse = _totalSupply.mul(2); // Equal to totalSupply + totalTokensHeld\\n\\t\\ttotalSupply = _totalSupply;\\n\\t\\tsymbol = _symbol;\\n\\t\\tname = _name;\\n\\n\\t\\tallowance[address(this)][address(router)] = type(uint).max;\\n\\t\\tbalanceOf[owner] = totalSupply;\\n\\n\\t\\tIUniswapV2Factory factory = IUniswapV2Factory(router.factory());\\n\\t\\taddress pairAddr = factory.createPair(address(this), router.WETH());\\n\\t\\tpair = IUniswapV2Pair(pairAddr);\\n\\n        excludedFromRewards[marketingWallet] = true;\\n        excludedFromRewards[address(router)] = true;\\n        excludedFromRewards[address(pair)] = true;\\n        excludedFromRewards[address(this)] = true;\\n\\t\\texcludedFromRewards[deadAddress] = true;\\n        excludedFromRewards[owner] = true;\\n        \\n\\t\\t// for (uint i = 0; i \\u003c rewardTokens.length; i++) {\\n\\t\\t// \\texcludedFromRewards[rewardTokens[i]] = true;\\n\\t\\t// }\\n\\n        excludedFromFees[marketingWallet] = true;\\n\\t\\texcludedFromFees[address(this)] = true;\\n        excludedFromFees[owner] = true;\\n\\t\\twhitelisted[owner] = true;\\n\\n\\t\\trecoveryFundWallet = 0x5F7958ACcA7a1b8E9761C4655a73Ce742C2adb99;\\n\\t\\tmarketingWallet = 0x7377bf2cd299B790423EF83BCfF737A76530F6e9;\\n\\n\\t\\ttokens = rewardTokens;\\n\\t}\\n\\n\\t// Process auto claims every transaction, uses as much supplied gas as possible\\n\\tfunction processRewards(uint gasMin, uint gasMax) public {\\n\\t\\tif (addresses.length == 0) return;\\n\\n\\t\\t// Fetching/editing state variable only once saves gas, opposed to doing checkIndex++ every iteration\\n\\t\\tuint initialGas = gasleft();\\n\\t\\tbool iterated = false;\\n\\t\\tuint i = checkIndex;\\n\\n\\n\\t\\tfor (; gasleft() \\u003e gasMin \\u0026\\u0026 initialGas.sub(gasleft()) \\u003c gasMax; i++) {\\n\\n\\t\\t\\tif (i \\u003e= addresses.length) i = 0;\\n\\n\\t\\t\\tif (iterated \\u0026\\u0026 i == checkIndex) break; // Looped back to initial check index, further looping would waste gas for no benefit\\n\\t\\t\\titerated = true;\\n\\n            address addr = addresses[i];\\n\\n            if (\\n\\t\\t\\t\\tbalanceOf[addr] \\u003c _minTokensForRewards || // Not enough tokens\\n\\t\\t\\t\\texcludedFromRewards[addr] ||\\n\\t\\t\\t\\tnextClaimTime[addr] \\u003e= block.timestamp // Not able to claim yet\\n\\t\\t\\t) continue;\\n\\n\\t\\t\\tuint withdrawnDividend;\\n\\n\\t\\t\\tfor (uint a = 0; a \\u003c tokens.length; a++) {\\n\\t\\t\\t\\twithdrawnDividend = _withdrawUserDividend(tokens[a], payable(addr));\\n\\t\\t\\t\\ttotalPaid[tokens[a]] += withdrawnDividend; // Better to overflow than to break the auto-paying system\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (withdrawnDividend \\u003e 0) {\\n\\t\\t\\t\\tnextClaimTime[addr] = block.timestamp + _claimDelay;\\n\\t\\t\\t\\ttotalPayouts++;\\n\\t\\t\\t}\\n        }\\n\\n\\t\\tcheckIndex = i;\\n    }\\n\\n\\t// Make sure we can receive eth to the contract\\n\\tfallback() external payable {}\\n\\treceive() external payable {\\n\\t\\t_distribute(msg.value);\\n\\t}\\n\\n\\tfunction distributeDividends(address token) internal {\\n\\t\\trequire(totalSupplyInverse \\u003e 0);\\n\\n\\t\\tuint tokenBalance = ERC20(token).balanceOf(address(this)).mul(correctionFactor) / 100;\\n\\n\\t\\tif (tokenBalance \\u003e 0) {\\n\\t\\t\\tmagnifiedDividendPerShare[token] = magnifiedDividendPerShare[token].add(tokenBalance.mul(magnitude) / totalSupplyInverse);\\n\\t\\t}\\n\\n\\t}\\n\\n\\tbool guarding = false;\\n\\tmodifier reentrancyGuard() {\\n\\t\\trequire(!guarding, \\u0027Re-entrancy guard\\u0027);\\n\\t\\tguarding = true;\\n\\t\\t_;\\n\\t\\tguarding = false;\\n\\t}\\n\\n\\tfunction withdrawDividends() public {\\n\\t\\tfor (uint i = 0; i \\u003c tokens.length; i++) {\\n\\t\\t\\t_withdrawUserDividend(tokens[i], msg.sender);\\n\\t\\t}\\n\\t}\\n\\n\\t// subtracting from balance before calling to user protects against single function reentrancy, aka performing a double-withdraw\\n\\t// however, cross-function reentrancy attacks require reentrancyGuard \\n\\tfunction _withdrawUserDividend(address token, address payable user) internal reentrancyGuard returns (uint) {\\n\\t\\tuint _withdrawableDividend = withdrawableDividendOf(token, user);\\n\\n\\t\\tuint tokenBalance = ERC20(token).balanceOf(address(this));\\n\\t\\tuint i = 0;\\n\\n\\n\\t\\twhile (tokenBalance \\u003e 0 \\u0026\\u0026 _withdrawableDividend \\u003e tokenBalance) {\\n\\t\\t\\tif (i++ == 5) break;\\n\\n\\t\\t\\t_withdrawableDividend = _withdrawableDividend.mul(50) / 100; // Only payout a percentage if the contract doesn\\u0027t have enough to pay in full\\n\\t\\t}\\n\\n\\n\\t\\tif (_withdrawableDividend \\u003e 0 \\u0026\\u0026 tokenBalance \\u003e _withdrawableDividend) {\\n\\t\\t\\twithdrawnDividendOf[token][user] = withdrawnDividendOf[token][user].add(_withdrawableDividend);\\n\\n       \\t\\ttoken.call(abi.encodeWithSelector(0x095ea7b3, address(this), type(uint256).max)); // Approve\\n       \\t\\t(bool success, bytes memory error) = token.call(abi.encodeWithSelector(0xa9059cbb, user, _withdrawableDividend)); // Transfer\\n\\t\\t\\tif (!success) {\\n\\t\\t\\t\\twithdrawnDividendOf[token][user] = withdrawnDividendOf[token][user].sub(_withdrawableDividend);\\n\\t\\t\\t\\treturn 0;\\n\\t\\t\\t} else {\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn _withdrawableDividend;\\n\\t\\t}\\n\\n\\t\\treturn 0;\\n\\t}\\n\\n\\t// Due to the failure of similar tokens such as MiniDogeCASH, these functions are here to ensure that things can get smoothed out if anything goes wrong.  \\n\\tfunction forceSwap(uint tokensToSwap) public ownerOnly {\\n\\t\\tuint contractBalance = balanceOf[address(this)];\\n\\n\\t\\tif (contractBalance \\u003c tokensToSwap) tokensToSwap = balanceOf[address(this)];\\n\\t\\t_swap(tokensToSwap);\\n\\t}\\n\\n\\tfunction updateStateVariables(bool _swapping, bool _buyingBack) public ownerOnly { // Just in case things break, we can fix it!\\n\\t\\tbuyingBack = _buyingBack;\\n\\t\\tswapping = _swapping;\\n\\t}\\n\\n\\tfunction swapDogeAndCake() public ownerOnly {\\n\\t\\tfor (uint i = 0; i \\u003c tokens.length; i++) {\\n\\t\\t\\tERC20(tokens[i]).approve(address(router), type(uint256).max);\\n\\n\\t\\t\\taddress[] memory tokenPath = new address[](2);\\n\\t\\t\\ttokenPath[0] = tokens[i];\\n\\t\\t\\ttokenPath[1] = router.WETH();\\n\\n\\t\\t\\trouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n\\t\\t\\t\\tERC20(tokens[i]).balanceOf(address(this)),\\n\\t\\t\\t\\t0,\\n\\t\\t\\t\\ttokenPath,\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\tblock.timestamp\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\tbool internal addingLiquidity = false;\\n\\tmodifier liquidityLock {\\n\\t\\taddingLiquidity = true;\\n\\t\\t_;\\n\\t\\taddingLiquidity = false;\\n\\t}\\n\\n\\tfunction addLiquidity(uint tokensToAdd) public payable ownerOnly liquidityLock {\\n\\t\\tbuyingBack = true;\\n\\t\\tswapping = true;\\n\\n\\t\\tuint beforeBalance = balanceOf[address(this)];\\n\\t\\tbalanceOf[address(this)] = tokensToAdd;\\n\\n\\t\\trouter.addLiquidityETH{ value: msg.value }(\\n\\t\\t\\taddress(this),\\n\\t\\t\\ttokensToAdd,\\n\\t\\t\\t0,\\n\\t\\t\\t0,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\n\\t\\tbalanceOf[address(this)] = beforeBalance;\\n\\t\\tbuyingBack = false;\\n\\t\\tswapping = false;\\n\\t}\\n\\n\\tfunction releaseTheKraken(uint amount) public ownerOnly {\\n\\t\\tif (amount \\u003e address(this).balance) amount = address(this).balance;\\n\\t\\tpayable(recoveryFundWallet).transfer(amount);\\n\\t}\\n\\n\\tfunction releaseTheDoge() public ownerOnly {\\n\\t\\tfor (uint i = 0; i \\u003c tokens.length; i++) {\\n\\t\\t\\tuint balance = ERC20(tokens[i]).balanceOf(address(this));\\n\\t\\t\\ttokens[i].call(abi.encodeWithSelector(0xa9059cbb, recoveryFundWallet, balance));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction withdrawableDividendOf(address token, address _owner) public view returns(uint) {\\n\\t\\treturn accumulativeDividendOf(token, _owner).sub(withdrawnDividendOf[token][_owner]);\\n\\t}\\n\\n\\t// dividendPerShare * tokenBalance + corrections \\n\\tfunction accumulativeDividendOf(address token, address _owner) public view returns(uint) {\\n\\t\\tuint ownerTokenBalance = balanceOf[_owner];\\n\\t\\tif (ownerTokenBalance \\u003c _minTokensForRewards) ownerTokenBalance = 0;\\n\\n\\t\\treturn magnifiedDividendPerShare[token].mul(ownerTokenBalance).toInt256Safe()\\n\\t\\t\\t.add(magnifiedDividendCorrections[token][_owner]).toUint256Safe() / magnitude;\\n\\t}\\n\\n\\t// send tokens to dxsale, no fees\\n\\t// dxsale has to be able to distribute them to people, no fees\\n\\t// dxsale needs to add liquidity\\n\\t// nobody else can add liquidity\\n\\t// after adding liquidity, trading needs to still be locked\\n\\t// then distribute private sale tokens\\n\\t// then unlock trading\\n\\n\\t// this means:\\n\\t// owner must be whitelisted and excluded from fees/rewards\\n\\t// dxsale receiver must be whitelisted and excluded from fees/rewards\\n\\t// dxsale router must be whitelisted and excluded from fees/rewards\\n\\t// \\n\\n\\t// Handle auto-paying reward part of transferring\\n\\tfunction _transfer(address from, address to, uint value) internal override {\\n\\t\\trequire(to != address(0) \\u0026\\u0026 from != address(0), \\u0027Cannot interact with the zero address.\\u0027);\\n\\n\\t\\t// bool canBypassPresaleLock = receivedTokensFromPair[from] || from == address(pair) || from == address(this);\\n\\n\\t\\t// require(addingLiquidity || presaleSpendingEnabled || canBypassPresaleLock, \\u0027Presale/private sale spending is disabled for now.\\u0027);\\n\\t\\trequire(addingLiquidity || tradingEnabled || whitelisted[from], \\u0027Trading is locked!\\u0027);\\n\\n\\t\\t// Must swap to eth before processing users sell to prevent swap error\\n\\t\\tif (swapEnabled \\u0026\\u0026 !swapping \\u0026\\u0026 to == address(pair) \\u0026\\u0026 balanceOf[address(this)] \\u003e= _minTokensBeforeSwap) {\\n\\t\\t\\t_swap(_minTokensBeforeSwap);\\n\\t\\t}\\n\\n\\t\\tuint oldBalanceOfFrom = balanceOf[from];\\n\\t\\tuint oldBalanceOfTo = balanceOf[to];\\n\\n\\t\\tsuper._transfer(from, to, value);\\n\\t\\t\\n\\t\\tupdateCorrections(from, balanceOf[from], oldBalanceOfFrom);\\n\\t\\tupdateCorrections(to, balanceOf[to], oldBalanceOfTo);\\n\\n\\t\\t// Check for any people who have rewards ready, and process their rewards\\n        if (!swapping \\u0026\\u0026 !buyingBack) {\\n\\t\\t\\tuint gasExtra = (to == address(pair)) ? sellGasExtra : 0;\\n\\t\\t\\tuint gasMin = minGas + gasExtra;\\n\\n\\t\\t\\ttry this.processRewards(gasMin, maxGas) { } catch(bytes memory error) {\\n\\t\\t\\t\\tcheckIndex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// if (from == address(pair)) receivedTokensFromPair[to] = true;\\n\\t}\\n\\n\\tfunction updateCorrections(address account, uint newBalance, uint oldBalance) internal {\\n\\t\\tif (excludedFromRewards[account]) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif (newBalance \\u003c _minTokensForRewards) newBalance = 0;\\n\\t\\t\\t\\n\\t\\tfor (uint i = 0; i \\u003c tokens.length; i++) {\\n\\t\\t\\tsetCorrections(tokens[i], account, newBalance, oldBalance);\\n\\t\\t\\t_withdrawUserDividend(tokens[i], payable(account));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction setCorrections(address token, address account, uint newBalance, uint oldBalance) internal {\\n\\t\\tif (newBalance \\u003e oldBalance) {\\n\\t\\t\\tuint mintAmount = newBalance.sub(oldBalance);\\n\\t\\t\\ttotalSupplyInverse = totalSupplyInverse.add(mintAmount);\\n\\n\\t\\t\\tmagnifiedDividendCorrections[token][account] = magnifiedDividendCorrections[token][account]\\n\\t\\t\\t\\t.sub((magnifiedDividendPerShare[token].mul(mintAmount)).toInt256Safe());\\n\\t\\t} else if (newBalance \\u003c oldBalance) {\\n\\t\\t\\tuint burnAmount = oldBalance.sub(newBalance);\\n\\t\\t\\ttotalSupplyInverse = totalSupplyInverse.sub(burnAmount);\\n\\n\\t\\t\\tmagnifiedDividendCorrections[token][account] = magnifiedDividendCorrections[token][account]\\n\\t\\t\\t\\t.add((magnifiedDividendPerShare[token].mul(burnAmount)).toInt256Safe());\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _mint(address account, uint value) internal override {\\n\\t\\tuint oldBalance = balanceOf[account];\\n\\t\\tsuper._mint(account, value);\\n\\n\\t\\tfor (uint i = 0; i \\u003c tokens.length; i++) {\\n\\t\\t\\tsetCorrections(tokens[i], account, balanceOf[account], oldBalance);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _burn(address account, uint value) internal override {\\n\\t\\tuint oldBalance = balanceOf[account];\\n\\t\\tsuper._burn(account, value);\\n\\n\\t\\tfor (uint i = 0; i \\u003c tokens.length; i++) {\\n\\t\\t\\tsetCorrections(tokens[i], account, balanceOf[account], oldBalance);\\n\\t\\t}\\n\\t}\\n\\n\\tmodifier swapLock() {\\n\\t\\tswapping = true;\\n\\t\\t_;\\n\\t\\tswapping = false;\\n\\t}\\n\\n\\tfunction _swap(uint tokensToSwap) internal swapLock {\\n\\t\\taddress[] memory bnbPath = new address[](2);\\n\\t\\tbnbPath[0] = address(this);\\n\\t\\tbnbPath[1] = router.WETH();\\n\\n        // make the swap\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokensToSwap,\\n            0,\\n            bnbPath,\\n            address(this),\\n            block.timestamp\\n        );\\n\\t}\\n\\n\\tfunction _distribute(uint deltaBalance) internal {\\n\\t\\tuint marketingFee = deltaBalance.mul(marketingTax) / 100;\\n\\t\\tpayable(marketingWallet).transfer(marketingFee);\\n\\n\\t\\tuint recoveryFundFee = deltaBalance.mul(recoveryFundTax) / 100;\\n\\t\\tpayable(recoveryFundWallet).transfer(recoveryFundFee);\\n\\n\\t\\tuint totalFees = marketingTax.add(recoveryFundTax).add(buyBackFee);\\n\\t\\tuint percentLeft = uint(100).sub(totalFees);\\n\\n\\t\\tuint remaining = deltaBalance.mul(percentLeft) / 100;\\n\\t\\tuint amountToBuy = remaining / tokens.length;\\n\\n\\t\\tfor (uint i = 0; i \\u003c tokens.length; i++) {\\n\\t\\t\\taddress[] memory tokenPath = new address[](2);\\n\\t\\t\\ttokenPath[0] = router.WETH();\\n\\t\\t\\ttokenPath[1] = tokens[i];\\n\\n\\t\\t\\trouter.swapExactETHForTokensSupportingFeeOnTransferTokens{ value: amountToBuy }(\\n\\t\\t\\t\\t0,\\n\\t\\t\\t\\ttokenPath,\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\tblock.timestamp\\n\\t\\t\\t);\\n\\n\\t\\t\\tdistributeDividends(tokens[i]);\\n\\t\\t}\\n\\t}\\n}\\n\"},\"ERC20.sol\":{\"content\":\"pragma solidity ^0.7.3;\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20Mintable}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn\\u0027t required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    using SafeMath for uint256;\\n\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) public allowance;\\n    mapping (address =\\u003e uint256) public balanceOf;\\n\\n    uint256 public totalSupply;\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for `sender`\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, msg.sender, allowance[sender][msg.sender].sub(amount));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(msg.sender, spender, allowance[msg.sender][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(msg.sender, spender, allowance[msg.sender][spender].sub(subtractedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) virtual internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        balanceOf[sender] = balanceOf[sender].sub(amount);\\n        balanceOf[recipient] = balanceOf[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) virtual internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        totalSupply = totalSupply.add(amount);\\n        balanceOf[account] = balanceOf[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) virtual internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        balanceOf[account] = balanceOf[account].sub(amount);\\n        totalSupply = totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        allowance[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller\\u0027s allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(account, msg.sender, allowance[account][msg.sender].sub(amount));\\n    }\\n}\\n\"},\"IUniswapV2Factory.sol\":{\"content\":\"pragma solidity \\u003e=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"},\"IUniswapV2Pair.sol\":{\"content\":\"pragma solidity \\u003e=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"},\"IUniswapV2Router01.sol\":{\"content\":\"pragma solidity \\u003e=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"},\"IUniswapV2Router02.sol\":{\"content\":\"pragma solidity \\u003e=0.6.2;\\n\\nimport \\u0027./IUniswapV2Router01.sol\\u0027;\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity \\u003e=0.5.0;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) \\u003e= x, \\u0027ds-math-add-overflow\\u0027);\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) \\u003c= x, \\u0027ds-math-sub-underflow\\u0027);\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, \\u0027ds-math-mul-overflow\\u0027);\\n    }\\n}\\n\"},\"SafeMathInt.sol\":{\"content\":\"pragma solidity ^0.7.3;\\n\\n/**\\n * @title SafeMathInt\\n * @dev Math operations with safety checks that revert on error\\n * @dev SafeMath adapted for int256\\n * Based on code of  https://github.com/RequestNetwork/requestNetwork/blob/master/packages/requestNetworkSmartContracts/contracts/base/math/SafeMathInt.sol\\n */\\nlibrary SafeMathInt {\\n  function mul(int256 a, int256 b) internal pure returns (int256) {\\n    // Prevent overflow when multiplying INT256_MIN with -1\\n    // https://github.com/RequestNetwork/requestNetwork/issues/43\\n    require(!(a == - 2**255 \\u0026\\u0026 b == -1) \\u0026\\u0026 !(b == - 2**255 \\u0026\\u0026 a == -1));\\n\\n    int256 c = a * b;\\n    require((b == 0) || (c / b == a));\\n    return c;\\n  }\\n\\n  function div(int256 a, int256 b) internal pure returns (int256) {\\n    // Prevent overflow when dividing INT256_MIN by -1\\n    // https://github.com/RequestNetwork/requestNetwork/issues/43\\n    require(!(a == - 2**255 \\u0026\\u0026 b == -1) \\u0026\\u0026 (b \\u003e 0));\\n\\n    return a / b;\\n  }\\n\\n  function sub(int256 a, int256 b) internal pure returns (int256) {\\n    require((b \\u003e= 0 \\u0026\\u0026 a - b \\u003c= a) || (b \\u003c 0 \\u0026\\u0026 a - b \\u003e a));\\n\\n    return a - b;\\n  }\\n\\n  function add(int256 a, int256 b) internal pure returns (int256) {\\n    int256 c = a + b;\\n    require((b \\u003e= 0 \\u0026\\u0026 c \\u003e= a) || (b \\u003c 0 \\u0026\\u0026 c \\u003c a));\\n    return c;\\n  }\\n\\n  function toUint256Safe(int256 a) internal pure returns (uint256) {\\n    require(a \\u003e= 0);\\n    return uint256(a);\\n  }\\n}\\n\"},\"SafeMathUint.sol\":{\"content\":\"pragma solidity ^0.7.3;\\n\\n/**\\n * @title SafeMathUint\\n * @dev Math operations with safety checks that revert on error\\n */\\nlibrary SafeMathUint {\\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\\n    int256 b = int256(a);\\n    require(b \\u003e= 0);\\n    return b;\\n  }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"oldValue\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"AntiWhaleEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"BuyBackFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"oldValue\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"BuyBacksEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"BuyFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"ClaimDelayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"ExcludedFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"ExcludedFromRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MarketingFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"MarketingWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MaxGasUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MinGasUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MinTokensForRewardsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"RecoveryFundWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"SellFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"oldValue\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"SwapEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"WalletWhitelistUpdated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"accumulativeDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensToAdd\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newAntiWhaleEnabled\",\"type\":\"bool\"}],\"name\":\"changeAntiWhaleEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyBackFee\",\"type\":\"uint256\"}],\"name\":\"changeBuyBackFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newBuyBacksEnabled\",\"type\":\"bool\"}],\"name\":\"changeBuyBacksEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyFee\",\"type\":\"uint256\"}],\"name\":\"changeBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newClaimDelay\",\"type\":\"uint256\"}],\"name\":\"changeClaimDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCorrectionFactor\",\"type\":\"uint256\"}],\"name\":\"changeCorrectionFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMarketingTax\",\"type\":\"uint256\"}],\"name\":\"changeMarketingTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"}],\"name\":\"changeMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxGas\",\"type\":\"uint256\"}],\"name\":\"changeMaxGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxTxAmount\",\"type\":\"uint256\"}],\"name\":\"changeMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinGas\",\"type\":\"uint256\"}],\"name\":\"changeMinGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"changeMinTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinTokensForRewards\",\"type\":\"uint256\"}],\"name\":\"changeMinTokensForRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRecoveryFundWallet\",\"type\":\"address\"}],\"name\":\"changeRecoveryFundWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSellFee\",\"type\":\"uint256\"}],\"name\":\"changeSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newSwapEnabled\",\"type\":\"bool\"}],\"name\":\"changeSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"excludeFromRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensToSwap\",\"type\":\"uint256\"}],\"name\":\"forceSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nextClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasMax\",\"type\":\"uint256\"}],\"name\":\"processRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseTheDoge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseTheKraken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newTradingEnabled\",\"type\":\"bool\"}],\"name\":\"setTradingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapDogeAndCake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPayouts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyInverse\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapping\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_buyingBack\",\"type\":\"bool\"}],\"name\":\"updateStateVariables\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"whitelistWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawnDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BabyDogeCake", "CompilerVersion": "v0.7.3+commit.9bfce1f6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000c9f2c9cd04674edea40000000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000000000000000000000000000000000000000000c42616279446f676543616b650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000342444300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000ba2ae424d960c26247dd6c32edc70b295c744c430000000000000000000000000e09fabb73bd3ade0a17ecc321fd13a19e81ce82", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0b1f142712daf755eda361f473a71f2f042b351f18352d683ad4909fd59d17ee"}