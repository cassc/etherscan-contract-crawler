{"SourceCode": "pragma solidity 0.5.12;\r\n\r\ncontract Proxy {\r\n    function() external payable {\r\n        _fallback();\r\n    }\r\n\r\n    function _implementation() internal view returns (address);\r\n\r\n    function _delegate(address implementation) internal {\r\n        assembly {\r\n            calldatacopy(0, 0, calldatasize)\r\n\r\n            let result := delegatecall(\r\n                gas,\r\n                implementation,\r\n                0,\r\n                calldatasize,\r\n                0,\r\n                0\r\n            )\r\n            returndatacopy(0, 0, returndatasize)\r\n\r\n            switch result\r\n                case 0 {\r\n                    revert(0, returndatasize)\r\n                }\r\n                default {\r\n                    return(0, returndatasize)\r\n                }\r\n        }\r\n    }\r\n\r\n    function _willFallback() internal {}\r\n\r\n    function _fallback() internal {\r\n        _willFallback();\r\n        _delegate(_implementation());\r\n    }\r\n}\r\n\r\nlibrary AddressUtils {\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n\r\n        assembly {\r\n            size := extcodesize(addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\ncontract UpgradeabilityProxy is Proxy {\r\n    event Upgraded(address implementation);\r\n\r\n    bytes32\r\n        private constant IMPLEMENTATION_SLOT = 0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;\r\n\r\n    constructor(address _implementation) public {\r\n        assert(\r\n            IMPLEMENTATION_SLOT ==\r\n                keccak256(\"org.zeppelinos.proxy.implementation\")\r\n        );\r\n\r\n        _setImplementation(_implementation);\r\n    }\r\n\r\n    function _implementation() internal view returns (address impl) {\r\n        bytes32 slot = IMPLEMENTATION_SLOT;\r\n        assembly {\r\n            impl := sload(slot)\r\n        }\r\n    }\r\n\r\n    function _upgradeTo(address newImplementation) internal {\r\n        _setImplementation(newImplementation);\r\n        emit Upgraded(newImplementation);\r\n    }\r\n\r\n    function _setImplementation(address newImplementation) private {\r\n        require(\r\n            AddressUtils.isContract(newImplementation),\r\n            \"Cannot set a proxy implementation to a non-contract address\"\r\n        );\r\n\r\n        bytes32 slot = IMPLEMENTATION_SLOT;\r\n\r\n        assembly {\r\n            sstore(slot, newImplementation)\r\n        }\r\n    }\r\n}\r\n\r\ncontract AdminUpgradeabilityProxy is UpgradeabilityProxy {\r\n    event AdminChanged(address previousAdmin, address newAdmin);\r\n    event AdminUpdated(address newAdmin);\r\n\r\n    bytes32\r\n        private constant ADMIN_SLOT = 0x10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b;\r\n    bytes32\r\n        private constant PENDING_ADMIN_SLOT = 0x54ac2bd5363dfe95a011c5b5a153968d77d153d212e900afce8624fdad74525c;\r\n\r\n    modifier ifAdmin() {\r\n        if (msg.sender == _admin()) {\r\n            _;\r\n        } else {\r\n            _fallback();\r\n        }\r\n    }\r\n\r\n    constructor(address _implementation)\r\n        public\r\n        UpgradeabilityProxy(_implementation)\r\n    {\r\n        assert(ADMIN_SLOT == keccak256(\"org.zeppelinos.proxy.admin\"));\r\n\r\n        _setAdmin(msg.sender);\r\n    }\r\n\r\n    function admin() external ifAdmin returns (address) {\r\n        return _admin();\r\n    }\r\n\r\n    function pendingAdmin() external ifAdmin returns (address) {\r\n        return _pendingAdmin();\r\n    }\r\n\r\n    function implementation() external ifAdmin returns (address) {\r\n        return _implementation();\r\n    }\r\n\r\n    function changeAdmin(address _newAdmin) external ifAdmin {\r\n        require(\r\n            _newAdmin != address(0),\r\n            \"Cannot change the admin of a proxy to the zero address\"\r\n        );\r\n        require(\r\n            _newAdmin != _admin(),\r\n            \"The current and new admin cannot be the same .\"\r\n        );\r\n        require(\r\n            _newAdmin != _pendingAdmin(),\r\n            \"Cannot set the newAdmin of a proxy to the same address .\"\r\n        );\r\n        _setPendingAdmin(_newAdmin);\r\n        emit AdminChanged(_admin(), _newAdmin);\r\n    }\r\n\r\n    function updateAdmin() external {\r\n        address _newAdmin = _pendingAdmin();\r\n        require(\r\n            _newAdmin != address(0),\r\n            \"Cannot change the admin of a proxy to the zero address\"\r\n        );\r\n        require(\r\n            msg.sender == _newAdmin,\r\n            \"msg.sender and newAdmin must be the same .\"\r\n        );\r\n        _setAdmin(_newAdmin);\r\n        _setPendingAdmin(address(0));\r\n        emit AdminUpdated(_newAdmin);\r\n    }\r\n\r\n    function upgradeTo(address newImplementation) external ifAdmin {\r\n        _upgradeTo(newImplementation);\r\n    }\r\n\r\n    function upgradeToAndCall(address newImplementation, bytes calldata data)\r\n        external\r\n        payable\r\n        ifAdmin\r\n    {\r\n        _upgradeTo(newImplementation);\r\n        (bool success, ) = address(this).call.value(msg.value)(data);\r\n        require(success, \"upgradeToAndCall-error\");\r\n    }\r\n\r\n    function _admin() internal view returns (address adm) {\r\n        bytes32 slot = ADMIN_SLOT;\r\n        assembly {\r\n            adm := sload(slot)\r\n        }\r\n    }\r\n\r\n    function _pendingAdmin() internal view returns (address pendingAdm) {\r\n        bytes32 slot = PENDING_ADMIN_SLOT;\r\n        assembly {\r\n            pendingAdm := sload(slot)\r\n        }\r\n    }\r\n\r\n    function _setAdmin(address newAdmin) internal {\r\n        bytes32 slot = ADMIN_SLOT;\r\n\r\n        assembly {\r\n            sstore(slot, newAdmin)\r\n        }\r\n    }\r\n\r\n    function _setPendingAdmin(address pendingAdm) internal {\r\n        bytes32 slot = PENDING_ADMIN_SLOT;\r\n\r\n        assembly {\r\n            sstore(slot, pendingAdm)\r\n        }\r\n    }\r\n\r\n    function _willFallback() internal {\r\n        require(\r\n            msg.sender != _admin(),\r\n            \"Cannot call fallback function from the proxy admin\"\r\n        );\r\n        super._willFallback();\r\n    }\r\n}\r\n\r\ncontract DTokenProxy is AdminUpgradeabilityProxy {\r\n    constructor(address _implementation)\r\n        public\r\n        AdminUpgradeabilityProxy(_implementation)\r\n    {}\r\n\r\n    // Allow anyone to view the implementation address\r\n    function dTokenImplementation() external view returns (address) {\r\n        return _implementation();\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dTokenImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "DTokenProxy", "CompilerVersion": "v0.5.12+commit.7709ece9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000003cb8eb28e1ebfba8eedb12233f011b067ad78f8e", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "1", "Implementation": "0x9d24378adbfda3a24d46049b23e06ea2c32e5ddd", "SwarmSource": "bzzr://c8620def6fafe348c4019bbd7f9340d64f1e712b69f2d8aa73d49aadeb99ecaf"}