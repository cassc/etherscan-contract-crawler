{"SourceCode": "pragma solidity ^0.8.14;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n/*\r\nhttps://thelemonade.farm/\r\n\r\n.____                                            .___         _________ __                     .___\r\n|    |    ____   _____   ____   ____ _____     __| _/____    /   _____//  |______    ____    __| _/\r\n|    |  _/ __ \\ /     \\ /  _ \\ /    \\\\__  \\   / __ |/ __ \\   \\_____  \\\\   __\\__  \\  /    \\  / __ | \r\n|    |__\\  ___/|  Y Y  (  <_> )   |  \\/ __ \\_/ /_/ \\  ___/   /        \\|  |  / __ \\|   |  \\/ /_/ | \r\n|_______ \\___  >__|_|  /\\____/|___|  (____  /\\____ |\\___  > /_______  /|__| (____  /___|  /\\____ | \r\n        \\/   \\/      \\/            \\/     \\/      \\/    \\/          \\/           \\/     \\/      \\/    \r\nLemonade Stand - BUSD Lemonade Farm\r\n*/\r\n\r\ninterface IToken {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ncontract BusdLemonadeFarm {\r\n    using SafeMath for uint256;\r\n\r\n    IToken public token;\r\n    address erctoken = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; /** BUSD Mainnet **/\r\n    \r\n    /* Project scales to maintain sustainabililty and prolonged profitability for investors */\r\n    uint256 public LEMONS_TO_BUILD_1STAND = 2592000;\r\n    uint constant public MAX_MAPS = 12;\r\n    uint256 BALANCE_MAP = 0;\r\n    /* Contract balance to ROI map */\r\n    uint256[MAX_MAPS] private ROI_MAP = [      0 ether,     1000 ether,   2000 ether,   3000 ether,    5000 ether,\r\n                                           10000 ether,    50000 ether, 100000 ether, 500000 ether, 1000000 ether,\r\n                                         5000000 ether, 10000000 ether];\r\n    uint256[MAX_MAPS] private ROI_MAP_STANDS = [2592000 /* 3% */,   2160000 /* 4% */, 2160000 /* 4% */,   1728000 /* 5% */,\r\n                                                1728000 /* 5% */,   1728000 /* 5% */, 1584000 /* 5.5% */, 1440000 /* 6% */,\r\n                                                1320000 /* 6.5% */, 1200000 /* 7% */, 1140000 /* 7.5% */, 1080000 /* 8% */];\r\n    uint256[MAX_MAPS] private SLIDING_SCALE_MAP = [10, 20, 25, 30, 35, 40, 50, 50, 50, 50, 50, 50];\r\n    uint256[MAX_MAPS] private FEE_SCALE_MAP =     [ 5, 10, 15, 20, 25, 25, 25, 25, 25, 25, 25, 25];\r\n\r\n    uint256 public PERCENTS_DIVIDER = 1000;\r\n    uint256 public REFERRAL = 60;\r\n    uint256 public PROJECT_FEES = 25;\r\n    uint256 public MARKET_LEMONS_DIVISOR = 2; // 50%\r\n    uint256 public MARKET_LEMONS_DIVISOR_SELL = 1; // 100%\r\n    uint256 public MIN_INVEST_LIMIT = 1 ether;\r\n    uint256 public WITHDRAW_WHALE_LIMIT = 1000 ether;\r\n    uint256 public WITHDRAW_WINDOW = 1 days; \r\n    uint256 public COMPOUND_DURATION = 12 hours;\r\n    uint256 public CUTOFF_STEP = 48 hours; \r\n    uint256 public COMPOUND_BONUS = 25; /** 2.5% **/\r\n    uint256 public COMPOUND_BONUS_MAX_TIMES = 10; /** 10 times / 5 days. **/\r\n    uint256 public WITHDRAWAL_TAX = 800;\r\n    uint256 public COMPOUND_FOR_NO_TAX_WITHDRAWAL = 5;\r\n\r\n    uint256 public totalStaked;\r\n    uint256 public totalDeposits;\r\n    uint256 public totalCompound;\r\n    uint256 public totalRefBonus;\r\n    uint256 public totalWithdrawn;\r\n    uint256 public maxDailyWithdraw;\r\n\r\n    uint256 public marketLemons;\r\n    uint256 PSN = 10000;\r\n    uint256 PSNH = 5000;\r\n    bool public contractStarted;\r\n\r\n    address public owner;\r\n    address public dev1;\r\n    address public dev2;\r\n    address public proj;\r\n    address public lottery;\r\n\r\n    struct User {\r\n        uint256 initialDeposit;\r\n        uint256 userDeposit;\r\n        uint256 stands;\r\n        uint256 claimedLemons;\r\n        uint256 lastGrow;\r\n        address referrer;\r\n        uint256 referralsCount;\r\n        uint256 referralLemonRewards;\r\n        uint256 totalWithdrawn;\r\n        uint256 dailyCompoundBonus;\r\n        uint256 lastWithdrawTime;\r\n        uint256 withdrawWindowStart;\r\n        uint256 totalWithdrawInWindow;\r\n    }\r\n\r\n    mapping(address => User) public users;\r\n\r\n    event NewUser(address indexed user);\r\n    event NewDeposit(address indexed user, uint256 amount);\r\n    event ReinvestedDeposit(address indexed user, uint256 lemons, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event RefBonus(address indexed referrer, address indexed referral, uint256 amount);\r\n\r\n    constructor(address _dev1, address _dev2, address _proj, address _lottery) {\r\n        require(!isContract(_dev1) && !isContract(_dev2) && !isContract(_proj) && !isContract(_lottery));\r\n        owner = msg.sender;\r\n        dev1 = _dev1;\r\n        dev2 = _dev2;\r\n        proj = _proj;\r\n        lottery = _lottery;\r\n\r\n        token = IToken(erctoken);\r\n    }\r\n\r\n    function initialize(uint256 amount) public {\r\n        if (!contractStarted) {\r\n            if (msg.sender == owner) {\r\n                require(marketLemons == 0);\r\n                contractStarted = true;\r\n                marketLemons = 86400000000;\r\n                buyStands(msg.sender, amount);\r\n            } else revert(\"Contract not started\");\r\n        }\r\n    }\r\n\r\nfunction isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n    function buildStands() public {\r\n        require(contractStarted, \"Contract not started\");      \r\n        User storage user = users[msg.sender];\r\n        require(block.timestamp.sub(user.lastGrow) >= COMPOUND_DURATION, \"Cannot build yet\");\r\n        buildMaterial(true);\r\n        rebalanceProject();\r\n    }\r\n\r\n    function buildMaterial(bool isCompound) internal {\r\n        User storage user = users[msg.sender];\r\n        uint256 lemonsUsed = getMyLemons();\r\n        uint256 lemonsForCompound = lemonsUsed;\r\n\r\n        if (isCompound) {\r\n            uint256 dailyCompoundBonus = getDailyCompoundBonus(msg.sender, lemonsForCompound);\r\n            lemonsForCompound = lemonsForCompound.add(dailyCompoundBonus);\r\n            uint256 lemonsUsedValue = calculateLemonSell(lemonsForCompound);\r\n            user.userDeposit = user.userDeposit.add(lemonsUsedValue);\r\n            lemonsUsedValue = lemonsUsedValue.sub(takeFees(lemonsUsedValue));\r\n            totalCompound = totalCompound.add(lemonsUsedValue);\r\n\r\n            if(user.dailyCompoundBonus < COMPOUND_BONUS_MAX_TIMES) {\r\n                user.dailyCompoundBonus = user.dailyCompoundBonus.add(1);\r\n            }\r\n            emit ReinvestedDeposit(msg.sender, lemonsForCompound, lemonsUsedValue);        \r\n        }\r\n\r\n        user.stands = user.stands.add(lemonsForCompound.div(LEMONS_TO_BUILD_1STAND));\r\n        user.claimedLemons = 0;\r\n        user.lastGrow = block.timestamp;\r\n\r\n        marketLemons = marketLemons.add(lemonsUsed.div(MARKET_LEMONS_DIVISOR));\r\n    }\r\n\r\n    function sellLemonade() public {\r\n        require (contractStarted, \"Contract not started\");\r\n        User storage user = users[msg.sender];\r\n        require (user.stands > 0, \"Nothing to sell\");\r\n        uint256 hasLemons = getMyLemons();\r\n        uint256 lemonValue = calculateLemonSell(hasLemons);     \r\n        uint256 origLemonValue = lemonValue;\r\n\r\n        if (user.dailyCompoundBonus < COMPOUND_FOR_NO_TAX_WITHDRAWAL) {\r\n            lemonValue = lemonValue.sub(lemonValue.mul(WITHDRAWAL_TAX).div(PERCENTS_DIVIDER));\r\n            takeEarlyTaxFees(origLemonValue.sub(lemonValue));\r\n            /* Early withdraw taxes get returned to the contract */\r\n        } else {\r\n            user.dailyCompoundBonus = 0;\r\n        }\r\n\r\n        user.lastWithdrawTime = block.timestamp;\r\n        user.claimedLemons = 0;  \r\n        user.lastGrow = block.timestamp;\r\n        marketLemons = marketLemons.add(hasLemons.div(MARKET_LEMONS_DIVISOR_SELL));\r\n\r\n        /* Anti-whale dumping */\r\n        if (block.timestamp.sub(user.withdrawWindowStart) >= WITHDRAW_WINDOW) {\r\n            user.withdrawWindowStart = block.timestamp;\r\n            user.totalWithdrawInWindow = 0;\r\n        }\r\n\r\n        uint256 withdrawlimitCap = getWithdrawLimits();\r\n        origLemonValue = lemonValue;\r\n        lemonValue = min(lemonValue, withdrawlimitCap);\r\n\r\n        if (user.totalWithdrawInWindow.add(lemonValue) > withdrawlimitCap) {\r\n            lemonValue = withdrawlimitCap.sub(user.totalWithdrawInWindow);\r\n        }\r\n        user.totalWithdrawInWindow = user.totalWithdrawInWindow.add(lemonValue);\r\n\r\n        /* Send inclaimable rewards back to the account */\r\n        if (lemonValue < origLemonValue) {\r\n            buyMaterial(msg.sender, address(0), origLemonValue.sub(lemonValue));\r\n        }\r\n\r\n        if(lemonValue > getBalance()) {\r\n            buyMaterial(msg.sender, address(0), lemonValue.sub(getBalance()));\r\n            lemonValue = getBalance();\r\n        }\r\n\r\n        uint256 lemonsPayout = lemonValue.sub(takeFees(lemonValue));\r\n        token.transfer(msg.sender, lemonsPayout);\r\n        emit Withdrawn(msg.sender, lemonsPayout);\r\n        user.totalWithdrawn = user.totalWithdrawn.add(lemonsPayout);\r\n        totalWithdrawn = totalWithdrawn.add(lemonsPayout);\r\n        rebalanceProject();\r\n    }\r\n\r\n    function buyStands(address ref, uint256 amount) public {\r\n        require(contractStarted, \"Contract not started\");\r\n        require(amount >= MIN_INVEST_LIMIT, \"Mininum investment not met\");\r\n        User storage user = users[msg.sender];\r\n        token.transferFrom(address(msg.sender), address(this), amount);\r\n        if (user.stands > 0) {\r\n            uint256 prevCompoundBonus = user.dailyCompoundBonus;\r\n            buildMaterial(true);\r\n            user.dailyCompoundBonus = prevCompoundBonus;\r\n        }\r\n        buyMaterial(msg.sender, ref, amount);\r\n        rebalanceProject();\r\n    }\r\n\r\n    function buyMaterial(address _user, address ref, uint256 amount) internal {\r\n        User storage user = users[_user];        \r\n        uint256 lemonsBought = calculateLemonBuy(amount, getBalance().sub(amount));\r\n        user.userDeposit = user.userDeposit.add(amount);\r\n        user.initialDeposit = user.initialDeposit.add(amount);\r\n        user.claimedLemons = user.claimedLemons.add(lemonsBought);\r\n        if (user.stands == 0) {\r\n            emit NewUser(_user);\r\n        }\r\n\r\n        if (user.referrer == address(0)) {\r\n            if (ref != _user) {\r\n                user.referrer = ref;\r\n            }\r\n\r\n            address upline = user.referrer;\r\n            if (upline != address(0)) {\r\n                users[upline].referralsCount = users[upline].referralsCount.add(1);\r\n            }\r\n        }\r\n\r\n        if (user.referrer != address(0)) {\r\n            address upline = user.referrer;\r\n            uint256 refRewards = amount.mul(REFERRAL).div(PERCENTS_DIVIDER);\r\n            token.transfer(upline, refRewards);\r\n            emit RefBonus(_user, upline, refRewards);\r\n\r\n            users[upline].referralLemonRewards = users[upline].referralLemonRewards.add(refRewards);\r\n            totalRefBonus = totalRefBonus.add(refRewards);\r\n        }\r\n\r\n        uint256 lemonsPayout = takeFees(amount);\r\n        uint256 newAmount = amount.sub(lemonsPayout);\r\n        emit NewDeposit(_user, newAmount);\r\n        totalStaked = totalStaked.add(amount.sub(lemonsPayout));\r\n        totalDeposits = totalDeposits.add(1);\r\n        buildMaterial(false);\r\n    }\r\n\r\n    function getWithdrawLimits() public view returns (uint256) {\r\n        uint256 withdrawlimitCap = min(getBalance().mul(SLIDING_SCALE_MAP[BALANCE_MAP]).div(PERCENTS_DIVIDER), WITHDRAW_WHALE_LIMIT);\r\n        return withdrawlimitCap;\r\n    }\r\n\r\n    function rebalanceProject() internal {\r\n        uint map = getBalanceMap();\r\n        BALANCE_MAP = map;\r\n        LEMONS_TO_BUILD_1STAND = ROI_MAP_STANDS[BALANCE_MAP];\r\n    }\r\n    \r\n    function takeFees(uint256 lemonValue) internal returns (uint256) {\r\n        uint256 fee = lemonValue.mul(FEE_SCALE_MAP[BALANCE_MAP]).div(PERCENTS_DIVIDER);\r\n        uint256 total = fee.mul(2);\r\n        token.transfer(dev1, fee);\r\n        token.transfer(dev2, fee);\r\n        return total;\r\n    }\r\n\r\n    function takeEarlyTaxFees(uint256 taxValue) internal returns(uint256) {\r\n        uint256 fee = taxValue.mul(FEE_SCALE_MAP[BALANCE_MAP]).div(PERCENTS_DIVIDER);\r\n        uint256 total = fee.mul(2);\r\n        token.transfer(lottery, fee);\r\n        token.transfer(proj, fee);\r\n        return total;\r\n    }\r\n\r\n    function getDailyCompoundBonus(address _adr, uint256 amount) public view returns(uint256){\r\n        if(users[_adr].dailyCompoundBonus == 0) {\r\n            return 0;\r\n        } else {\r\n            uint256 totalBonus = users[_adr].dailyCompoundBonus.mul(COMPOUND_BONUS); \r\n            uint256 result = amount.mul(totalBonus).div(PERCENTS_DIVIDER);\r\n            return result;\r\n        }\r\n    }\r\n\r\n    function getUserInfo(address _adr) public view returns(uint256 _initialDeposit, uint256 _userDeposit, uint256 _stands,\r\n     uint256 _claimedLemons, uint256 _lastGrow, address _referrer, uint256 _referrals,\r\n     uint256 _totalWithdrawn, uint256 _referralLemonRewards, uint256 _dailyCompoundBonus, uint256 _lastWithdrawTime,\r\n     uint256 _withdrawWindowStart, uint256 _totalWithdrawInWindow\r\n     ) {\r\n         _initialDeposit = users[_adr].initialDeposit;\r\n         _userDeposit = users[_adr].userDeposit;\r\n         _stands = users[_adr].stands;\r\n         _claimedLemons = users[_adr].claimedLemons;\r\n         _lastGrow = users[_adr].lastGrow;\r\n         _referrer = users[_adr].referrer;\r\n         _referrals = users[_adr].referralsCount;\r\n         _totalWithdrawn = users[_adr].totalWithdrawn;\r\n         _referralLemonRewards = users[_adr].referralLemonRewards;\r\n         _dailyCompoundBonus = users[_adr].dailyCompoundBonus;\r\n         _lastWithdrawTime = users[_adr].lastWithdrawTime;\r\n         _withdrawWindowStart = users[_adr].withdrawWindowStart;\r\n         _totalWithdrawInWindow = users[_adr].totalWithdrawInWindow;\r\n\t}\r\n\r\n    function getBalanceMap() public view returns (uint) {\r\n        uint256 balance = getBalance();\r\n        for (uint i = MAX_MAPS - 1; i >= 0; i--) {\r\n            if (balance >= ROI_MAP[i]) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /* Find the next Stands APR tier */\r\n    function getNextStandsMap() public view returns (uint) {\r\n        uint map = getBalanceMap();\r\n        uint256 standsMap = ROI_MAP_STANDS[map];\r\n        for (uint i = map; i < MAX_MAPS; i++) {\r\n            if (ROI_MAP_STANDS[i] < standsMap) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return MAX_MAPS - 1;\r\n    }\r\n\r\n    function getBalanceInfo(uint map) public view returns (uint256 _eth, uint256 _stands, uint256 _sliding, uint256 _fees, uint256 _lotteryBalance) {\r\n        require (map < MAX_MAPS, \"Map is out of range\");\r\n        _eth = ROI_MAP[map];\r\n        _stands = ROI_MAP_STANDS[map];\r\n        _sliding = SLIDING_SCALE_MAP[map];\r\n        _fees = FEE_SCALE_MAP[map];\r\n        _lotteryBalance = getLotteryBalance();\r\n    }\r\n\r\n    function getBalance() public view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n\t}\r\n\r\n    function getLotteryBalance() public view returns (uint256) {\r\n        return token.balanceOf(lottery);\r\n\t}\r\n\r\n    function getTimeStamp() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function getAvailableEarnings(address _adr) public view returns(uint256) {\r\n        uint256 userLemons = users[_adr].claimedLemons.add(getLemonsSinceLastGrow(_adr));\r\n        return calculateLemonSell(userLemons);\r\n    }\r\n\r\n    /* Secret sauce for balancing the trades */\r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\r\n        // (PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\r\n        return SafeMath.div(\r\n                SafeMath.mul(PSN, bs), \r\n                    SafeMath.add(PSNH, \r\n                        SafeMath.div(\r\n                            SafeMath.add(\r\n                                SafeMath.mul(PSN, rs), \r\n                                    SafeMath.mul(PSNH, rt)), \r\n                                        rt)));\r\n    }\r\n\r\n    function calculateLemonSell(uint256 lemons) public view returns(uint256){\r\n        return calculateTrade(lemons, marketLemons, getBalance());\r\n    }\r\n\r\n    function calculateLemonBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\r\n        return calculateTrade(eth, contractBalance, marketLemons);\r\n    }\r\n\r\n    function calculateLemonBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculateLemonBuy(eth, getBalance());\r\n    }\r\n\r\n    function getLemonsYield(uint256 amount) public view returns(uint256,uint256) {\r\n        uint256 lemonsAmount = calculateLemonBuy(amount , getBalance().add(amount).sub(amount));\r\n        uint256 stands = lemonsAmount.div(LEMONS_TO_BUILD_1STAND);\r\n        uint256 day = 1 days;\r\n        uint256 lemonsPerDay = day.mul(stands);\r\n        uint256 earningsPerDay = calculateLemonSellForYield(lemonsPerDay, amount);\r\n        return(stands, earningsPerDay);\r\n    }\r\n\r\n    function calculateLemonSellForYield(uint256 lemons,uint256 amount) public view returns(uint256){\r\n        return calculateTrade(lemons,marketLemons, getBalance().add(amount));\r\n    }\r\n\r\n    function getSiteInfo() public view returns (uint256 _totalStaked, uint256 _totalDeposits, uint256 _totalCompound, uint256 _totalRefBonus) {\r\n        return (totalStaked, totalDeposits, totalCompound, totalRefBonus);\r\n    }\r\n\r\n    function getMyStands() public view returns(uint256){\r\n        return users[msg.sender].stands;\r\n    }\r\n\r\n    function getMyLemons() public view returns(uint256){\r\n        return users[msg.sender].claimedLemons.add(getLemonsSinceLastGrow(msg.sender));\r\n    }\r\n\r\n    function getLemonsSinceLastGrow(address adr) public view returns(uint256){\r\n        uint256 secondsSinceLastGrow = block.timestamp.sub(users[adr].lastGrow);\r\n        /** get min time. **/\r\n        uint256 cutoffTime = min(secondsSinceLastGrow, CUTOFF_STEP);\r\n        uint256 secondsPassed = min(LEMONS_TO_BUILD_1STAND, cutoffTime);\r\n        return secondsPassed.mul(users[adr].stands);\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /** wallet addresses setters **/\r\n    function CHANGE_OWNERSHIP(address value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        owner = value;\r\n    }\r\n\r\n    function CHANGE_DEV1(address value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        dev1 = value;\r\n    }\r\n\r\n    function CHANGE_DEV2(address value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        dev2 = value;\r\n    }\r\n\r\n    function CHANGE_LOTTERY(address value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        lottery = value;\r\n    }\r\n\r\n    function CHANGE_WITHDRAW_WHALE_LIMIT(uint256 amount) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        require(amount >= 1000 ether, \"Minimum ether is 1000\");\r\n        WITHDRAW_WHALE_LIMIT = amount;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dev1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dev2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_proj\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lottery\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"NewUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lemons\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReinvestedDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"CHANGE_DEV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"CHANGE_DEV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"CHANGE_LOTTERY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"CHANGE_OWNERSHIP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CHANGE_WITHDRAW_WHALE_LIMIT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_BONUS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_BONUS_MAX_TIMES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_FOR_NO_TAX_WITHDRAWAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CUTOFF_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEMONS_TO_BUILD_1STAND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKET_LEMONS_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKET_LEMONS_DIVISOR_SELL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_MAPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_INVEST_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROJECT_FEES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_TAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_WHALE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buildStands\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyStands\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateLemonBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateLemonBuySimple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lemons\",\"type\":\"uint256\"}],\"name\":\"calculateLemonSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lemons\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateLemonSellForYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"getAvailableEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"map\",\"type\":\"uint256\"}],\"name\":\"getBalanceInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stands\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sliding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lotteryBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalanceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDailyCompoundBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getLemonsSinceLastGrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getLemonsYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyLemons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyStands\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextStandsMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSiteInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalCompound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRefBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stands\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimedLemons\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastGrow\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_referrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referralLemonRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dailyCompoundBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastWithdrawTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawWindowStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalWithdrawInWindow\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lottery\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketLemons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDailyWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proj\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLemonade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCompound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRefBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"initialDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stands\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedLemons\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastGrow\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralLemonRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyCompoundBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawWindowStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawInWindow\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BusdLemonadeFarm", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000003525a969c4bb519fd0cfbfd04dc1be6d785dba450000000000000000000000005cd63fe6902aff6dee413c784301c82978e0d9060000000000000000000000009c060a92a03db60b6be65b87b4b98e48c99e047e000000000000000000000000d7e705733b66435c7371750956f09b4425889255", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://316c20a2111933e5ed696bb91348d14b7f1fe46bb71d94b9f218712e56f9e297"}