{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IPancakeSwapRouter {\r\n    function WETH() external pure returns (address);\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin, \r\n        address[] calldata path, \r\n        address to, \r\n        uint256 deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn, \r\n        uint256 amountOutMin, \r\n        address[] calldata path, \r\n        address to, \r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract AutomatedMarketMaker { \r\n    address private owner;\r\n    IPancakeSwapRouter public pancakeSwapRouter;\r\n    IERC20 public immutable glkToken;\r\n\r\n    address public buyingAddress = 0xF0d4322234DEDE69e6ff0B10B96bb5CD039b2987;\r\n    address public sellingAddress = 0x29349B5336B3ded9152Dc5819dE3fc69eBB9709e;\r\n\r\n\tuint256 private taxPercentage = 23; // Initially 23% tax, can be updated\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \r\n \r\n    constructor(address _pancakeSwapRouter,address _glkTokenAddress) {\r\n        owner = msg.sender;\r\n        pancakeSwapRouter = IPancakeSwapRouter(_pancakeSwapRouter);\r\n        glkToken = IERC20(_glkTokenAddress);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyBuyingAddress() {\r\n        require(msg.sender == buyingAddress, \"Caller is not the buying address\");\r\n        _;\r\n    }\r\n\r\n    modifier onlySellingAddress() {\r\n        require(msg.sender == sellingAddress, \"Caller is not the selling address\");\r\n        _;\r\n    }\r\n\r\n // Fallback function to revert transactions sending BNB without specifying a function\r\n    fallback() external {\r\n        revert(\"Invalid transaction. Use receive() function to send BNB.\");\r\n    }\r\n\t\r\n\tevent TokensPurchased(address indexed buyer, uint256 amountInBNB, uint256 amountInTokens);\r\n    event TokensSold(address indexed seller, uint256 amountInTokens, uint256 amountOutBNB);\r\n\r\n\t// Function to receive BNB during the swap\r\n    receive() external payable {}\r\n\r\n    uint256 public defaultTokenAmount = 0; // place holder replace with the desired token amount\r\n    function buyglkTokens() external payable onlyBuyingAddress { // Function to buy glk tokens using BNB\r\n    uint256 tokenAmount = defaultTokenAmount;\r\n\t\t\r\n\t\tglkToken.approve(address(pancakeSwapRouter), tokenAmount);\t\t\r\n\t\t\t\t\r\n\t\taddress[] memory path = new address[](2);\r\n        path[0] = pancakeSwapRouter.WETH();\r\n        path[1] = address(glkToken);\r\n   \r\n\t    uint256 deadline = block.timestamp + 15; // 15 seconds from the current block time\r\n\r\n        pancakeSwapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(\r\n            0, // accept any amount of tokens\r\n            path,\r\n            address(this), // Contract holds the tokens after purchase\r\n            deadline\r\n        );\r\n\r\n        // Transfer the glk tokens to the selling address\r\n        uint256 purchasedAmount = glkToken.balanceOf(address(this));\r\n        glkToken.transfer(sellingAddress, purchasedAmount);\r\n\t\t\r\n\t\t   // Emit the event\r\n    emit TokensPurchased(msg.sender, msg.value, purchasedAmount);\r\n}\r\n    \r\n    // Function to allow the selling address to sell glk tokens on a DEX\r\n    function sellglkTokens(uint256 tokenAmount, uint256 minAmountOutBeforeTax) external onlySellingAddress {\r\n        require(glkToken.balanceOf(address(this)) >= tokenAmount, \"Insufficient token balance\");\r\n\r\n    uint256 amountOutMin = calculateMinAmountAfterTax(minAmountOutBeforeTax, taxPercentage);\r\n    glkToken.approve(address(pancakeSwapRouter), tokenAmount);\r\n\r\n    address[] memory path = new address[](2);\r\n    path[0] = address(glkToken);\r\n    path[1] = pancakeSwapRouter.WETH();\r\n\r\n    uint256 deadline = block.timestamp + 15; // 15 seconds from the current block time\r\n\r\n    pancakeSwapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        tokenAmount,\r\n        amountOutMin,\r\n        path,\r\n        msg.sender, // Send BNB to the selling address\r\n        deadline\r\n    );\r\n\r\n    // Emit the event\r\n    emit TokensSold(msg.sender, tokenAmount, amountOutMin);\r\n}\r\n\r\n    function calculateMinAmountAfterTax(uint256 amount, uint256 _taxPercentage) private pure returns (uint256) {\r\n        return amount * (100 - _taxPercentage) / 100;\r\n    }\r\n\r\n    function setTaxPercentage(uint256 _taxPercentage) external onlyOwner {\r\n        taxPercentage = _taxPercentage;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pancakeSwapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_glkTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInTokens\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOutBNB\",\"type\":\"uint256\"}],\"name\":\"TokensSold\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"buyglkTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"glkToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeSwapRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeSwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOutBeforeTax\",\"type\":\"uint256\"}],\"name\":\"sellglkTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxPercentage\",\"type\":\"uint256\"}],\"name\":\"setTaxPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AutomatedMarketMaker", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000031f4d3122c117288cc5ffa239464fb0456dcb867", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://83b12d13e8fd302fb3c06054fe1f77f1392cfcca77dfef364282b850671419d4"}