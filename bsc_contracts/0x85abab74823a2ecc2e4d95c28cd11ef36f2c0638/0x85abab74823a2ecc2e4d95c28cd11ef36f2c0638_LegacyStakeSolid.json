{"SourceCode": "// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/LegacyStakeSolid.sol\r\n\r\n\r\n// Name: Legacy Stake Solid Pack\r\n// https://solid.legacystake.com/\r\n\r\npragma solidity 0.8.19;\r\n\r\n\r\n\r\n\r\ncontract LegacyStakeSolid is Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public BUSD;\r\n    IERC20 public LST;\r\n\r\n    /* SETTINGS */\r\n    uint public packPrice = 75;\r\n    uint public _buyFee = 3;\r\n    uint private multiplier = 100;\r\n    uint private _decimals = 10 ** 18;\r\n    uint private totalVestingSeconds = 12 * 30 days;\r\n    uint private firstEightMonthsSeconds = 8 * 30 days;\r\n    uint[10] public rewardMatrixByLevel = [5, 3, 2, 2, 1, 1, 1, 1, 2, 3]; // 21\r\n    uint[4] public rewardRefByLevel = [5, 2, 1, 1]; // 9\r\n    uint public stage;\r\n    bool public _automatedBuy = true;\r\n\r\n    /* PANCAKESWAP */\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address[] public _path;\r\n\r\n    /* WALLETS */\r\n    address public leaderBoard;\r\n    address private devTeam;\r\n    address private marketingTeam;\r\n\r\n    /* COUNTERS */\r\n    uint public totalPacks;\r\n    uint public totalUsers;\r\n    uint public lockedLST;\r\n\r\n    /* LISTS */\r\n    struct Pack {\r\n        uint claimed;\r\n        uint amount;\r\n        uint multiplier;\r\n        uint createdAt;\r\n        address user;\r\n    }\r\n    struct Users {\r\n        uint id;\r\n        uint refCount;\r\n        uint earnAsSponsor;\r\n        uint earnInMatrix;\r\n        uint activeUntil;\r\n        uint mQueueIndex;\r\n        uint mCounter;\r\n        bool positioned;\r\n        address invitedBy;\r\n        address upperInMatrix;\r\n        uint[] positionsId;\r\n        address[] positionsWallet;\r\n        address[] mQueue;\r\n    }\r\n\r\n    mapping(address => Users) public User;\r\n    mapping(uint => Pack) public Packs;\r\n    mapping(address => uint[]) public _packs;    \r\n    mapping(address => uint) public addressToId;\r\n    mapping(uint => address) public idToAddress;\r\n    mapping(address => bool) whitelisted;\r\n\r\n    /* EVENTS */\r\n    event Register(address indexed user, address indexed invitedBy);\r\n    event BuyPack(address indexed user, uint packs, uint inAmount);\r\n    event ClaimFromPacks(address indexed user, uint amount);\r\n\r\n    modifier onlyEOA() {\r\n        require(tx.origin == msg.sender, \"Not EOA\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n\r\n        address _user = msg.sender;\r\n        totalUsers++;\r\n        Users storage user = User[_user];\r\n        user.upperInMatrix = _user;\r\n        user.invitedBy = _user;\r\n        user.id = totalUsers;\r\n        whitelisted[_user] = true;\r\n\r\n        addressToId[_user] = totalUsers;\r\n        idToAddress[totalUsers] = _user;\r\n\r\n        user.activeUntil = block.timestamp;\r\n        user.mCounter = 0;\r\n        user.mQueue.push(_user);\r\n        user.positioned = true;\r\n        user.mQueueIndex = 0;\r\n\r\n        stage = 0;\r\n        lockedLST = 0;\r\n        leaderBoard = msg.sender;\r\n        devTeam = msg.sender;\r\n        marketingTeam = msg.sender;\r\n\r\n    }\r\n\r\n    function setParams(address _token, address _busdAddress, address _router) public onlyOwner returns (bool) {\r\n        BUSD = IERC20(_busdAddress);\r\n        LST = IERC20(_token);\r\n        uniswapV2Router = IUniswapV2Router02(_router); \r\n        while(_path.length != 0) _path.pop();\r\n        _path.push(_busdAddress);\r\n        _path.push(uniswapV2Router.WETH());\r\n        _path.push(_token);\r\n        return true;\r\n    }\r\n\r\n    function RegisterUser(address _invitedBy) public onlyEOA returns (bool) {\r\n        address _user = msg.sender;\r\n        Users storage user = User[_user];\r\n        require(user.id == 0, \"Already registered\");\r\n        if(stage == 1) require(whitelisted[_user] == true, \"Not whitelisted\");\r\n\r\n        totalUsers++;\r\n\r\n        user.id = totalUsers;\r\n        user.refCount = 0;\r\n        user.invitedBy = _invitedBy;\r\n\r\n        addressToId[_user] = totalUsers;\r\n        idToAddress[totalUsers] = _user;\r\n\r\n        Users storage sponsor = User[_invitedBy];\r\n        require(_user != _invitedBy && sponsor.id > 0, \"Invalid sponsor\");\r\n        sponsor.refCount++;        \r\n        emit Register(_user, _invitedBy);\r\n        return true;\r\n    }\r\n\r\n    function buyPack(uint packs) public returns (bool) {\r\n        address _buyer = msg.sender;\r\n        require(addressToId[_buyer] > 0, \"buyPack: User have to be registered first\");\r\n        require(stage > 0, \"buyPack: Buying Disabled\");\r\n        require(packs > 0, \"buyPack: Invalid packs amount\");\r\n\r\n        if(stage == 1) require(whitelisted[_buyer] == true, \"Not whitelisted\");\r\n        uint packsPrice = (packPrice * _decimals) * packs;\r\n        uint one = _decimals * packs;\r\n\r\n        uint currentBalance = LST.balanceOf(address(this));\r\n        require((currentBalance - lockedLST) >= packsPrice * packs * 2, \"Not Enough LST\");\r\n\r\n        uint currentBalanceBUSD = BUSD.balanceOf(_buyer);\r\n        require(currentBalanceBUSD >= packsPrice, \"Not enough BUSD\");\r\n        uint allowance = BUSD.allowance(_buyer, address(this));\r\n        require(allowance >= packsPrice, \"Not enough allowance\");\r\n        BUSD.safeTransferFrom(_buyer, address(this), packsPrice);\r\n\r\n        Users storage user = User[_buyer];\r\n        if(user.activeUntil == 0) user.activeUntil = block.timestamp + 60 days;\r\n        address sponsor = user.invitedBy;\r\n        Users storage userSponsor = User[sponsor];\r\n        if (userSponsor.activeUntil == 0) {\r\n            while (userSponsor.activeUntil == 0) {\r\n                userSponsor = User[userSponsor.invitedBy];\r\n            }\r\n        }\r\n\r\n        if (user.positioned == false){\r\n            user.positioned = true;\r\n            user.mQueue.push(_buyer);\r\n            user.upperInMatrix = userSponsor.mQueue[userSponsor.mQueueIndex];\r\n            userSponsor.mQueue.push(sponsor);\r\n            userSponsor.mCounter++;\r\n            Users storage u = User[userSponsor.mQueue[userSponsor.mQueueIndex]];\r\n            u.positionsId.push(addressToId[sponsor]);\r\n            u.positionsWallet.push(sponsor);\r\n            if (userSponsor.mCounter == 2) {\r\n                userSponsor.mCounter = 0;\r\n                userSponsor.mQueueIndex++;\r\n            }            \r\n        }           \r\n\r\n        if (_automatedBuy == true) {\r\n            BUSD.safeApprove(address(uniswapV2Router), 0);\r\n            BUSD.safeApprove(address(uniswapV2Router), one * 40);\r\n            uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                one * 40,\r\n                0,\r\n                _path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n        }\r\n\r\n        BUSD.safeTransfer(leaderBoard, one);\r\n        BUSD.safeTransfer(devTeam, one);\r\n        BUSD.safeTransfer(marketingTeam, one * 3);\r\n       \r\n        totalPacks++;\r\n        Pack storage newPack = Packs[totalPacks];\r\n        newPack.createdAt = block.timestamp;\r\n        newPack.user = _buyer;\r\n        _packs[_buyer].push(totalPacks);\r\n        uint[] memory amounts = uniswapV2Router.getAmountsOut(packsPrice, _path);\r\n        \r\n        if (_buyFee > 0) {\r\n            newPack.amount = (amounts[_path.length - 1] * 2) * (100 - _buyFee) / 100;\r\n            lockedLST += newPack.amount;\r\n        } else {\r\n            newPack.amount = amounts[_path.length - 1] * 2;\r\n            lockedLST += newPack.amount;\r\n        }\r\n\r\n        newPack.multiplier = packs;\r\n        emit BuyPack(_buyer, packs, amounts[_path.length - 1] * 2);\r\n\r\n        if (user.activeUntil > 0) {\r\n            distributeMatrix(_buyer, sponsor, packs);\r\n        } else {\r\n            distributeMatrix(owner(), sponsor, packs);\r\n        }\r\n\r\n        distributeRefPayment(_buyer, packs);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function activateEarnings() public {\r\n        address _buyer = msg.sender;\r\n        require(addressToId[_buyer] > 0, \"activateEarnings: User have to be registered first\");\r\n        require(stage > 0, \"buyPack: Buying Disabled\");\r\n        if(stage == 1) require(whitelisted[_buyer] == true, \"Not whitelisted\");\r\n        uint activateAmount = 25 * _decimals;\r\n\r\n        uint userBalance = BUSD.balanceOf(_buyer);\r\n        require(userBalance >= activateAmount, \"Not enough BUSD\");\r\n        uint allowance = BUSD.allowance(_buyer, address(this));\r\n        require(allowance >= activateAmount, \"Not enough allowance\");\r\n        BUSD.safeTransferFrom(_buyer, address(this), activateAmount);\r\n        BUSD.safeTransfer(devTeam, 1 * _decimals); // 1 BUSD\r\n        BUSD.safeTransfer(marketingTeam, 3 * _decimals); // 3 BUSD\r\n\r\n        Users storage user = User[_buyer];\r\n        require(user.activeUntil > 0, \"activateEarnings: should buy pack first\");\r\n        user.activeUntil = block.timestamp + 30 days;\r\n\r\n        address upperSponsor = _buyer;\r\n        uint collectPayment = 0;\r\n        bool endMatrix = false;\r\n\r\n        for (uint i=0; i<10; i++) {\r\n            Users storage u = User[upperSponsor];\r\n            address payTo = u.upperInMatrix;\r\n            if(endMatrix) payTo = owner();\r\n            if(payTo == user.invitedBy) endMatrix = true;\r\n            uint payLevelAmount = rewardMatrixByLevel[i] * _decimals;\r\n            if (payTo == owner()) {\r\n                collectPayment += payLevelAmount;\r\n            } else {\r\n                if(u.activeUntil >= block.timestamp) {\r\n                    BUSD.safeTransfer(payTo, payLevelAmount);\r\n                    u.earnInMatrix += payLevelAmount;\r\n                } else {\r\n                    collectPayment += payLevelAmount;\r\n                }\r\n            }\r\n            upperSponsor = payTo;\r\n        }     \r\n        if (collectPayment > 0) {\r\n            BUSD.safeTransfer(owner(), collectPayment);\r\n            Users storage u = User[owner()];\r\n            u.earnInMatrix += collectPayment;\r\n        }\r\n\r\n    }\r\n\r\n    function distributeRefPayment(address _user, uint packsAmount) private {        \r\n        address upperSponsor = _user;\r\n        uint collectPayment = 0;\r\n        for (uint i=0; i<4; i++) {\r\n            Users storage u = User[upperSponsor];\r\n            address payTo = u.invitedBy;\r\n            Users storage payToUser = User[u.invitedBy];\r\n            uint payLevelAmount = rewardRefByLevel[i] * _decimals * packsAmount;\r\n            if (payTo == owner()) {\r\n                collectPayment += payLevelAmount;\r\n            } else {\r\n                uint level = i+1;\r\n                if ((payToUser.activeUntil == 0) && (level == 1)) {  \r\n                    if  (payToUser.earnAsSponsor + payLevelAmount <= 75 * _decimals) {\r\n                        BUSD.safeTransfer(payTo, payLevelAmount);\r\n                        payToUser.earnAsSponsor += payLevelAmount;\r\n                    } else {\r\n                        collectPayment += payLevelAmount;\r\n                    }\r\n                } else if ((payToUser.activeUntil == 0) && (level > 1)) {\r\n                    collectPayment += payLevelAmount;\r\n                } else if (payToUser.activeUntil > 0) {\r\n                    BUSD.safeTransfer(payTo, payLevelAmount);\r\n                    payToUser.earnAsSponsor += payLevelAmount;\r\n                }\r\n                else {\r\n                    collectPayment += payLevelAmount;\r\n                }\r\n            }\r\n            upperSponsor = payTo;\r\n        }     \r\n        if (collectPayment > 0) {\r\n            BUSD.safeTransfer(owner(), collectPayment);\r\n            Users storage u = User[owner()];\r\n            u.earnAsSponsor += collectPayment;\r\n        }\r\n    }\r\n\r\n    function distributeMatrix(address _user, address invitedBy, uint packsAmount) private {        \r\n        address upperSponsor = _user;\r\n        uint collectPayment = 0;\r\n        bool endMatrix = false;\r\n        for (uint i=0; i<10; i++) {\r\n            Users storage u = User[upperSponsor];\r\n            address payTo = u.upperInMatrix;\r\n            if(endMatrix) payTo = owner();\r\n            if(payTo == invitedBy) endMatrix = true;\r\n            uint payLevelAmount = rewardMatrixByLevel[i] * _decimals * packsAmount;\r\n            if (payTo == owner()) {\r\n                collectPayment += payLevelAmount;\r\n            } else {\r\n                if(u.activeUntil >= block.timestamp) {\r\n                    BUSD.safeTransfer(payTo, payLevelAmount);\r\n                    u.earnInMatrix += payLevelAmount;\r\n                } else {\r\n                    collectPayment += payLevelAmount;\r\n                }\r\n            }\r\n            upperSponsor = payTo;\r\n        }     \r\n        if (collectPayment > 0) {\r\n            BUSD.safeTransfer(owner(), collectPayment);\r\n            Users storage u = User[owner()];\r\n            u.earnInMatrix += collectPayment;\r\n        }\r\n    }\r\n\r\n    function claimPacks() public returns (bool) {\r\n        address _buyer = msg.sender;\r\n        require(addressToId[_buyer] > 0, \"claimPacks: User have to be registered first\");\r\n        require(_packs[_buyer].length > 0, \"claimPacks: No packs bought\");\r\n        uint _toTransfer = 0;\r\n        for(uint i=0; i<_packs[_buyer].length; i++) {\r\n            Pack storage packItem = Packs[_packs[_buyer][i]];\r\n            uint availableToClaim = getPackClaimAmount(_packs[_buyer][i]);            \r\n            packItem.claimed += availableToClaim;\r\n            _toTransfer += availableToClaim;\r\n        }\r\n        require(_toTransfer > 0, \"claimPacks: Nothing to claim\");\r\n        uint currentBalance = LST.balanceOf(address(this));\r\n        require(currentBalance > _toTransfer, \"claimPacks: Balance exceed amount to claim\");\r\n        if (_toTransfer > 0) {\r\n            lockedLST -= _toTransfer;\r\n            LST.safeTransfer(_buyer, _toTransfer);\r\n            emit ClaimFromPacks(_buyer, _toTransfer);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function claimOnePack(uint packID) public returns (bool) {\r\n        address _buyer = msg.sender;\r\n        require(addressToId[_buyer] > 0, \"claimPacks: User have to be registered first\");\r\n        require(_packs[_buyer].length > 0, \"claimPacks: No packs bought\");\r\n        uint _toTransfer = 0;        \r\n        Pack storage packItem = Packs[packID];\r\n        require(packItem.user == _buyer, \"claimPacks: Invalid User pack ID\");\r\n        uint availableToClaim = getPackClaimAmount(packID);            \r\n        packItem.claimed += availableToClaim;\r\n        _toTransfer += availableToClaim;        \r\n        require(_toTransfer > 0, \"claimPacks: Nothing to claim\");\r\n        uint currentBalance = LST.balanceOf(address(this));\r\n        require(currentBalance > _toTransfer, \"claimPacks: Balance exceed amount to claim\");\r\n        if (_toTransfer > 0) {\r\n            lockedLST -= _toTransfer;\r\n            LST.safeTransfer(_buyer, _toTransfer);\r\n            emit ClaimFromPacks(_buyer, _toTransfer);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function getClaimAmount() public view returns (uint) {\r\n        address _buyer = msg.sender;\r\n        uint availableToClaim = 0;\r\n        for(uint i=0; i<_packs[_buyer].length; i++) {\r\n            availableToClaim += getPackClaimAmount(_packs[_buyer][i]);\r\n        }\r\n        return availableToClaim;\r\n    }\r\n\r\n    function getUserPackClaimAmount(uint userPackID) public view returns (uint) {\r\n        address _buyer = msg.sender;\r\n        return getPackClaimAmount(_packs[_buyer][userPackID]);\r\n    }\r\n\r\n    function getPackClaimAmount(uint packID) public view returns (uint) {\r\n        uint currentTime = block.timestamp;\r\n        uint _toTransfer = 0;\r\n        Pack memory packItem = Packs[packID];\r\n        uint elapsedSeconds = currentTime - packItem.createdAt;\r\n        uint claimablePercentage;\r\n        if (elapsedSeconds >= totalVestingSeconds) {\r\n            claimablePercentage = 100 * multiplier;\r\n        } else {                \r\n            if (elapsedSeconds <= firstEightMonthsSeconds) {\r\n                claimablePercentage = (elapsedSeconds * (80 * multiplier)) / firstEightMonthsSeconds;\r\n            } else {\r\n                uint remainingMonthsSeconds = totalVestingSeconds - firstEightMonthsSeconds;\r\n                uint remainingSeconds = elapsedSeconds - firstEightMonthsSeconds;\r\n                claimablePercentage = ((80 * multiplier) + remainingSeconds * (20 * multiplier)) / remainingMonthsSeconds;\r\n            }\r\n        }\r\n        uint totalClaimableAmount = packItem.amount * claimablePercentage / (100 * multiplier);\r\n        uint availableToClaim = totalClaimableAmount - packItem.claimed;\r\n        _toTransfer += availableToClaim;        \r\n        return _toTransfer;\r\n    }\r\n\r\n    function getUserData(address _user) public view \r\n        returns (\r\n            uint[] memory userPacks,\r\n            address upperInMatrix, \r\n            uint[] memory positionsId, \r\n            address[] memory positionsWallet\r\n        ) {\r\n        Users memory user = User[_user];\r\n        return (\r\n            _packs[_user], \r\n            user.upperInMatrix, \r\n            user.positionsId, \r\n            user.positionsWallet\r\n        );\r\n    }\r\n\r\n    function modifyWhitelist(address[] memory _list) public onlyOwner returns(uint count) {\r\n        uint _count = 0;\r\n        for (uint i = 0; i < _list.length; i++) {\r\n            if(whitelisted[_list[i]] != true){\r\n                whitelisted[_list[i]] = true;\r\n                _count++;\r\n            }\r\n        }\r\n        return _count;\r\n    }\r\n\r\n    function setSwapPath(address[] memory newPath) public onlyOwner returns (bool) {\r\n        while(_path.length != 0) _path.pop();\r\n        for(uint i = 0; i < newPath.length; i++) {\r\n            _path.push(newPath[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function setStage(uint _stage) public onlyOwner returns (bool) {\r\n        stage = _stage;\r\n        return true;\r\n    }\r\n\r\n    function setAutomatedBuy(bool _status) public onlyOwner returns (bool) {\r\n        _automatedBuy = _status;\r\n        return true;\r\n    }    \r\n\r\n    function setBuyFee(uint buyFee) public onlyOwner returns (bool) {\r\n        _buyFee = buyFee;\r\n        return true;\r\n    }\r\n\r\n    function setLeaderBoard(address _leaderBoard) public onlyOwner returns (bool) {\r\n        leaderBoard = _leaderBoard;\r\n        return true;\r\n    }\r\n\r\n    function setDevWallet(address _wallet) public onlyOwner returns (bool) {\r\n        devTeam = _wallet;\r\n        return true;\r\n    }\r\n\r\n    function setMarketingWallet(address _wallet) public onlyOwner returns (bool) {\r\n        marketingTeam = _wallet;\r\n        return true;\r\n    }\r\n\r\n    function withdrawTokensFromBalance(address _token) public onlyOwner {\r\n        require(_token != address(0), \"withdrawTokensFromBalance: Token is the zero address\");\r\n        IERC20 withdrawToken = IERC20(_token);\r\n        uint tokenBalance = withdrawToken.balanceOf(address(this));\r\n        if(tokenBalance > 0) withdrawToken.safeTransfer(msg.sender, tokenBalance);\r\n    }\r\n\r\n    function recoveryFunds() public onlyOwner {\r\n        address payable _owner = payable(owner());\r\n        _owner.transfer(address(this).balance);\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner override {\r\n        revert(\"disabled\");\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"packs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"}],\"name\":\"BuyPack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimFromPacks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"invitedBy\",\"type\":\"address\"}],\"name\":\"Register\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUSD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LST\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Packs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_invitedBy\",\"type\":\"address\"}],\"name\":\"RegisterUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"User\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnAsSponsor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnInMatrix\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mQueueIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mCounter\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"positioned\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"invitedBy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"upperInMatrix\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_automatedBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_packs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_path\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateEarnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"packs\",\"type\":\"uint256\"}],\"name\":\"buyPack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"packID\",\"type\":\"uint256\"}],\"name\":\"claimOnePack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPacks\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"packID\",\"type\":\"uint256\"}],\"name\":\"getPackClaimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserData\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"userPacks\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"upperInMatrix\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"positionsId\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"positionsWallet\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userPackID\",\"type\":\"uint256\"}],\"name\":\"getUserPackClaimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leaderBoard\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedLST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_list\",\"type\":\"address[]\"}],\"name\":\"modifyWhitelist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"packPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoveryFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardMatrixByLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardRefByLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAutomatedBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setDevWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_leaderBoard\",\"type\":\"address\"}],\"name\":\"setLeaderBoard\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_busdAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setParams\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stage\",\"type\":\"uint256\"}],\"name\":\"setStage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newPath\",\"type\":\"address[]\"}],\"name\":\"setSwapPath\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPacks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawTokensFromBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LegacyStakeSolid", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ccb85570895fa4c3f2374feda1670bf0c8ac95800ee11a7128d37536d9ce4423"}