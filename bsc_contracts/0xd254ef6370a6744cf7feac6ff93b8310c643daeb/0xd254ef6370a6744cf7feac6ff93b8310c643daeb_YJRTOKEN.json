{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-09-13\r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.14;\r\n\r\nabstract contract Context {\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface TOKENTOOL {\r\n    function calculatePool(address spender, uint112 reserve0, uint112 reserve1, uint256 poolnum) external returns (bool);\r\n    function changePool(address recipient, uint16 tokenId, uint8 gtype) external returns(bool,uint256);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {codehash := extcodehash(account)}\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success,) = recipient.call{ value : amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{ value : weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address public owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function waiveOwnership() public virtual onlyOwner {\r\n        owner = address(0);\r\n    }\r\n\r\n    function getTime() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function token0() external view returns (address);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract YJRTOKEN is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 private _totalSupply;\r\n\r\n    address payable marketAdd;\r\n    address payable usdtPollAdd;\r\n    address payable subPoolAdd;\r\n    address payable fluidityAddress;\r\n    address private transferFeeAdd;\r\n\r\n    address private changePoolAdd;\r\n\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => uint256) public pollAmount;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) public isExcludedFromFee;\r\n    mapping (address => bool) public isblacklist;\r\n    mapping (address => bool) private isMarketPair;\r\n\r\n    address public uniswapPair;\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    mapping (address => uint8) private usdtWay;\r\n\r\n    address public newPollAddress;\r\n    address tokenTool;\r\n    address usdtToken;\r\n    address wushi;\r\n\r\n    uint256 lockbuy = 0;\r\n\r\n    event getReservesData(\r\n        uint112 reserve0,\r\n        uint112 reserve1,\r\n        uint256 pollUsdt\r\n    );\r\n\r\n    constructor (\r\n        address _usdtToken,      // 0x55d398326f99059ff775485246999027b3197955\r\n        address _router,         // 0x10ed43c718714eb63d5aa57b78b54704e256024e\r\n        address _taguo,          // 0x015EAbF37533E2E35f89a97e694271f05380B7A8\r\n        address _wushi,          // 0xBe184Aead40F44219EECbC255f4CF4c3F8Bf274B\r\n        address _shiwu,          // 0xb6Fd3A31890111104609851d272192AA90FD52Af\r\n        address _fluidity        // \r\n    ) payable {\r\n        _name = \"Yjr Token\";\r\n        _symbol = \"YJR\";\r\n        _decimals = 6;\r\n        _totalSupply = 2750000 * 10 ** _decimals;\r\n\r\n        usdtToken = _usdtToken;\r\n\r\n        owner = payable(msg.sender);\r\n        marketAdd = payable(0x33Bc71a4802EB4C73f192677abc31EE63dfF3D0e);\r\n        subPoolAdd = payable(0x93dDfF69f1FaA4BCc1AdD12e8557F237B4e2bcE7);\r\n        transferFeeAdd = payable(0x38dAD27581Fc390B566030B09b952b070A6c6F9b);\r\n\r\n        usdtPollAdd = payable(0x393Be4E25D77856B4ebA7A3885fA9FCD535D1a11);\r\n        changePoolAdd = payable(0x93dDfF69f1FaA4BCc1AdD12e8557F237B4e2bcE7);\r\n\r\n        isExcludedFromFee[owner] = true;\r\n        isExcludedFromFee[address(this)] = true;\r\n        isExcludedFromFee[marketAdd] = true;\r\n        isExcludedFromFee[subPoolAdd] = true;\r\n        isExcludedFromFee[transferFeeAdd] = true;\r\n        isExcludedFromFee[usdtPollAdd] = true;\r\n        isExcludedFromFee[changePoolAdd] = true;\r\n        isExcludedFromFee[_taguo] = true;\r\n        isExcludedFromFee[_wushi] = true;\r\n        isExcludedFromFee[_shiwu] = true;\r\n        isExcludedFromFee[_fluidity] = true;\r\n\r\n        fluidityAddress = payable(_fluidity);\r\n\r\n        _balances[_taguo] = 2100000 * 10 ** _decimals;\r\n        _balances[_wushi] =  500000 * 10 ** _decimals;\r\n        _balances[_shiwu] =  150000 * 10 ** _decimals;\r\n\r\n        wushi = _wushi;\r\n\r\n        emit Transfer(address(0), _taguo, _balances[_taguo]);\r\n        emit Transfer(address(0), _wushi, _balances[_wushi]);\r\n        emit Transfer(address(0), _shiwu, _balances[_shiwu]);\r\n        setPool(_router,1);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    function setPool(address _router, uint8 gtype) private returns(address newPair) {\r\n\r\n        IUniswapV2Router02 newRouter = IUniswapV2Router02(_router);\r\n        newPair = IUniswapV2Factory(newRouter.factory()).createPair(address(this), usdtToken);\r\n\r\n        if(IUniswapV2Pair(newPair).token0() == address(usdtToken)) usdtWay[newPair] = 1;\r\n\r\n        _allowances[address(this)][address(newRouter)] = _totalSupply;\r\n        isMarketPair[address(newPair)] = true;\r\n        isExcludedFromFee[address(newPair)] = true;\r\n\r\n        if(gtype==1){\r\n            uniswapV2Router = newRouter;\r\n            uniswapPair = newPair;\r\n        }\r\n        return newPair;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private returns (bool) {\r\n        if(amount == 0) return true;\r\n        if(newPollAddress != address(0)){\r\n            if(isMarketPair[sender]){\r\n                require(recipient != newPollAddress, \"YJR: Can't trade continuously\");\r\n            }\r\n            pollAmount[newPollAddress] = IUniswapV2Pair(uniswapPair).balanceOf(newPollAddress);\r\n            delete newPollAddress;\r\n        }\r\n        require(isblacklist[sender] == false, \"Permission denied\");\r\n\r\n        if(isMarketPair[recipient] == false && isMarketPair[sender] == false){\r\n            _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n            if(isExcludedFromFee[sender]==false){\r\n                uint256 transferFee = amount.mul(20).div(1000);\r\n                _balances[transferFeeAdd] = _balances[transferFeeAdd].add(transferFee);\r\n                amount = amount.sub(transferFee);\r\n                emit Transfer(sender, transferFeeAdd, transferFee);\r\n            }\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n            emit Transfer(sender, recipient, amount);\r\n            return true;\r\n        }\r\n\r\n        IUniswapV2Pair pairContent = IUniswapV2Pair(uniswapPair);\r\n        (uint112 reserve0, uint112 reserve1,) = pairContent.getReserves();\r\n        uint pollUsdt = IUniswapV2Pair(usdtToken).balanceOf(uniswapPair);\r\n        emit getReservesData(reserve0, reserve1, pollUsdt);\r\n        uint256 reserve = usdtWay[uniswapPair]==1 ? reserve0 : reserve1;\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n\r\n        if(isMarketPair[recipient]) {\r\n            if(reserve < pollUsdt){\r\n                newPollAddress = sender;\r\n                if(wushi == sender && lockbuy==0){\r\n                    lockbuy = block.timestamp;\r\n                }\r\n            }else{\r\n                if(isExcludedFromFee[sender]==false){\r\n                    _weighted(amount.mul(65).div(1000), sender);\r\n                    amount = amount.sub(amount.mul(65).div(1000));\r\n                }\r\n            }\r\n            pollAmount[sender] = pairContent.balanceOf(sender);\r\n        }else if(isMarketPair[sender]){\r\n            uint pollNumber = pairContent.balanceOf(recipient);\r\n            if(pollNumber < pollAmount[recipient]){\r\n                newPollAddress = recipient;\r\n                if(tokenTool != address(0)){\r\n                    TOKENTOOL(tokenTool).calculatePool(recipient,reserve0,reserve1,pollNumber);\r\n                }\r\n                if(isExcludedFromFee[recipient] == false){\r\n                    uint256 subPoolFee = amount.mul(35).div(1000);\r\n                    _balances[subPoolAdd] = _balances[subPoolAdd].add(subPoolFee);\r\n                    emit Transfer(sender, subPoolAdd, subPoolFee);\r\n                    amount = amount.sub(subPoolFee);\r\n                }\r\n            }else{\r\n                if(block.timestamp - lockbuy < 3600){\r\n                    isblacklist[recipient] = true;\r\n                }\r\n            }\r\n            pollAmount[recipient] = pollNumber;\r\n        }\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function swapTokenForUsdt(uint256 tokenAmount, address _to) private returns (bool) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = address(usdtToken);\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of TOKEN\r\n            path,\r\n            _to, // The contract\r\n            block.timestamp\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _weighted(uint256 sixPercent, address _from) private {\r\n        _balances[address(this)] = _balances[address(this)].add(sixPercent);\r\n        emit Transfer(_from, address(this), sixPercent);\r\n\r\n        uint256 before = IERC20(usdtToken).balanceOf(uniswapPair);\r\n        swapTokenForUsdt(sixPercent,fluidityAddress);\r\n        uint256 afterU = IERC20(usdtToken).balanceOf(uniswapPair);\r\n        uint256 realUsdt = before.sub(afterU);\r\n\r\n        uint256 amountUMarket = realUsdt.mul(200).div(650);\r\n        IERC20(usdtToken).transferFrom(fluidityAddress, marketAdd, amountUMarket);\r\n        realUsdt = realUsdt.sub(amountUMarket);\r\n        IERC20(usdtToken).transferFrom(fluidityAddress, usdtPollAdd, realUsdt);\r\n    }\r\n\r\n    function setTokenTool(address _token) public onlyOwner {\r\n        tokenTool = _token;\r\n        isExcludedFromFee[_token] = true;\r\n    }\r\n\r\n    function setExcluded(address _add, bool _val) public onlyOwner {\r\n        isExcludedFromFee[_add] = _val;\r\n    }\r\n\r\n    function setBlacklist(address _add, bool _val) public onlyOwner {\r\n        isblacklist[_add] = _val;\r\n    }\r\n\r\n    function changePool(uint16 tokenId, uint8 gtype) public {\r\n        (bool res, uint256 lpvalue) = TOKENTOOL(tokenTool).changePool(msg.sender, tokenId, gtype);\r\n        require(res == true, \"have error\");\r\n        _balances[msg.sender] = _balances[msg.sender].sub(lpvalue, \"Insufficient Balance\");\r\n        _balances[changePoolAdd] = _balances[changePoolAdd].add(lpvalue);\r\n        emit Transfer(msg.sender, changePoolAdd, lpvalue);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdtToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_taguo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wushi\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_shiwu\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fluidity\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pollUsdt\",\"type\":\"uint256\"}],\"name\":\"getReservesData\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"gtype\",\"type\":\"uint8\"}],\"name\":\"changePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isblacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newPollAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pollAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_val\",\"type\":\"bool\"}],\"name\":\"setBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_val\",\"type\":\"bool\"}],\"name\":\"setExcluded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setTokenTool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waiveOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "YJRTOKEN", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b319795500000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000015eabf37533e2e35f89a97e694271f05380b7a8000000000000000000000000be184aead40f44219eecbc255f4cf4c3f8bf274b000000000000000000000000b6fd3a31890111104609851d272192aa90fd52af000000000000000000000000452ab7db75a2fc6882b05df28378f50c96aa93aa", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7fc2a96b18a44ece49626cb2bf3b61bc76806648f2623adb7b4aad4d1dd0ff96"}