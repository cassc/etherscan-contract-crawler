{"SourceCode": "// File: contracts\\interfaces\\IERC20.sol\r\n// SPDX-License-Identifier: agpl-3.0\r\n \r\npragma solidity 0.7.5;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\r\n */\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts\\interfaces\\IStakedAave.sol\r\n\r\n \r\npragma solidity 0.7.5;\r\n\r\ninterface IStakedAave {\r\n  function stake(address to, uint256 amount) external;\r\n\r\n  function redeem(address to, uint256 amount) external;\r\n\r\n  function cooldown() external;\r\n\r\n  function claimRewards(address to, uint256 amount) external;\r\n}\r\n\r\n// File: contracts\\lib\\SafeMath.sol\r\n\r\n \r\npragma solidity 0.7.5;\r\n\r\n/**\r\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\r\n * Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `+` operator.\r\n   *\r\n   * Requirements:\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, 'SafeMath: addition overflow');\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, 'SafeMath: subtraction overflow');\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `*` operator.\r\n   *\r\n   * Requirements:\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, 'SafeMath: multiplication overflow');\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, 'SafeMath: division by zero');\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, 'SafeMath: modulo by zero');\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts with custom message when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: contracts\\lib\\Address.sol\r\n\r\n \r\npragma solidity 0.7.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\r\n */\r\nlibrary Address {\r\n  /**\r\n   * @dev Returns true if `account` is a contract.\r\n   *\r\n   * [IMPORTANT]\r\n   * ====\r\n   * It is unsafe to assume that an address for which this function returns\r\n   * false is an externally-owned account (EOA) and not a contract.\r\n   *\r\n   * Among others, `isContract` will return false for the following\r\n   * types of addresses:\r\n   *\r\n   *  - an externally-owned account\r\n   *  - a contract in construction\r\n   *  - an address where a contract will be created\r\n   *  - an address where a contract lived, but was destroyed\r\n   * ====\r\n   */\r\n  function isContract(address account) internal view returns (bool) {\r\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n    // for accounts without code, i.e. `keccak256('')`\r\n    bytes32 codehash;\r\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      codehash := extcodehash(account)\r\n    }\r\n    return (codehash != accountHash && codehash != 0x0);\r\n  }\r\n\r\n  /**\r\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n   * `recipient`, forwarding all available gas and reverting on errors.\r\n   *\r\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n   * imposed by `transfer`, making them unable to receive funds via\r\n   * `transfer`. {sendValue} removes this limitation.\r\n   *\r\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n   *\r\n   * IMPORTANT: because control is transferred to `recipient`, care must be\r\n   * taken to not create reentrancy vulnerabilities. Consider using\r\n   * {ReentrancyGuard} or the\r\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n   */\r\n  function sendValue(address payable recipient, uint256 amount) internal {\r\n    require(address(this).balance >= amount, 'Address: insufficient balance');\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n    (bool success, ) = recipient.call{value: amount}('');\r\n    require(success, 'Address: unable to send value, recipient may have reverted');\r\n  }\r\n}\r\n\r\n// File: contracts\\lib\\SafeERC20.sol\r\n\r\n \r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\r\n * Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  using SafeMath for uint256;\r\n  using Address for address;\r\n\r\n  function safeTransfer(\r\n    IERC20 token,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    IERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n  }\r\n\r\n  function safeApprove(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  ) internal {\r\n    require(\r\n      (value == 0) || (token.allowance(address(this), spender) == 0),\r\n      'SafeERC20: approve from non-zero to non-zero allowance'\r\n    );\r\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n  }\r\n\r\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    (bool success, bytes memory returndata) = address(token).call(data);\r\n    require(success, 'SafeERC20: low-level call failed');\r\n\r\n    if (returndata.length > 0) {\r\n      // Return data is optional\r\n      // solhint-disable-next-line max-line-length\r\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts\\utils\\VersionedInitializable.sol\r\n\r\n \r\npragma solidity 0.7.5;\r\n\r\n/**\r\n * @title VersionedInitializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n *\r\n * @author Aave, inspired by the OpenZeppelin Initializable contract\r\n */\r\nabstract contract VersionedInitializable {\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  uint256 internal lastInitializedRevision = 0;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    uint256 revision = getRevision();\r\n    require(revision > lastInitializedRevision, 'Contract instance has already been initialized');\r\n\r\n    lastInitializedRevision = revision;\r\n\r\n    _;\r\n  }\r\n\r\n  /// @dev returns the revision number of the contract.\r\n  /// Needs to be defined in the inherited class as a constant.\r\n  function getRevision() internal pure virtual returns (uint256);\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts\\lib\\DistributionTypes.sol\r\n\r\n \r\npragma solidity 0.7.5;\r\npragma experimental ABIEncoderV2;\r\n\r\nlibrary DistributionTypes {\r\n  struct AssetConfigInput {\r\n    uint128 emissionPerSecond;\r\n    uint256 totalStaked;\r\n    address underlyingAsset;\r\n  }\r\n\r\n  struct UserStakeInput {\r\n    address underlyingAsset;\r\n    uint256 stakedByUser;\r\n    uint256 totalStaked;\r\n  }\r\n}\r\n\r\n// File: contracts\\interfaces\\IAaveDistributionManager.sol\r\n\r\n \r\npragma solidity 0.7.5;\r\n\r\n\r\ninterface IAaveDistributionManager {\r\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\r\n    external;\r\n}\r\n\r\n// File: contracts\\stake\\AaveDistributionManager.sol\r\n\r\n \r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title AaveDistributionManager\r\n * @notice Accounting contract to manage multiple staking distributions\r\n * @author Aave\r\n **/\r\ncontract AaveDistributionManager is IAaveDistributionManager {\r\n  using SafeMath for uint256;\r\n\r\n  struct AssetData {\r\n    uint128 emissionPerSecond;\r\n    uint128 lastUpdateTimestamp;\r\n    uint256 index;\r\n    mapping(address => uint256) users;\r\n  }\r\n\r\n  uint256 public immutable DISTRIBUTION_END;\r\n\r\n  address public immutable EMISSION_MANAGER;\r\n\r\n  uint8 public constant PRECISION = 18;\r\n\r\n  mapping(address => AssetData) public assets;\r\n\r\n  event AssetConfigUpdated(address indexed asset, uint256 emission);\r\n  event AssetIndexUpdated(address indexed asset, uint256 index);\r\n  event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\r\n\r\n  constructor(address emissionManager, uint256 distributionDuration) public {\r\n    DISTRIBUTION_END = block.timestamp.add(distributionDuration);\r\n    EMISSION_MANAGER = emissionManager;\r\n  }\r\n\r\n  /**\r\n   * @dev Configures the distribution of rewards for a list of assets\r\n   * @param assetsConfigInput The list of configurations to apply\r\n   **/\r\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput)\r\n    external\r\n    override\r\n  {\r\n    require(msg.sender == EMISSION_MANAGER, 'ONLY_EMISSION_MANAGER');\r\n\r\n    for (uint256 i = 0; i < assetsConfigInput.length; i++) {\r\n      AssetData storage assetConfig = assets[assetsConfigInput[i].underlyingAsset];\r\n\r\n      _updateAssetStateInternal(\r\n        assetsConfigInput[i].underlyingAsset,\r\n        assetConfig,\r\n        assetsConfigInput[i].totalStaked\r\n      );\r\n\r\n      assetConfig.emissionPerSecond = assetsConfigInput[i].emissionPerSecond;\r\n\r\n      emit AssetConfigUpdated(\r\n        assetsConfigInput[i].underlyingAsset,\r\n        assetsConfigInput[i].emissionPerSecond\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Updates the state of one distribution, mainly rewards index and timestamp\r\n   * @param underlyingAsset The address used as key in the distribution, for example sAAVE or the aTokens addresses on Aave\r\n   * @param assetConfig Storage pointer to the distribution's config\r\n   * @param totalStaked Current total of staked assets for this distribution\r\n   * @return The new distribution index\r\n   **/\r\n  function _updateAssetStateInternal(\r\n    address underlyingAsset,\r\n    AssetData storage assetConfig,\r\n    uint256 totalStaked\r\n  ) internal returns (uint256) {\r\n    uint256 oldIndex = assetConfig.index;\r\n    uint128 lastUpdateTimestamp = assetConfig.lastUpdateTimestamp;\r\n\r\n    if (block.timestamp == lastUpdateTimestamp) {\r\n      return oldIndex;\r\n    }\r\n\r\n    uint256 newIndex =\r\n      _getAssetIndex(oldIndex, assetConfig.emissionPerSecond, lastUpdateTimestamp, totalStaked);\r\n\r\n    if (newIndex != oldIndex) {\r\n      assetConfig.index = newIndex;\r\n      emit AssetIndexUpdated(underlyingAsset, newIndex);\r\n    }\r\n\r\n    assetConfig.lastUpdateTimestamp = uint128(block.timestamp);\r\n\r\n    return newIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Updates the state of an user in a distribution\r\n   * @param user The user's address\r\n   * @param asset The address of the reference asset of the distribution\r\n   * @param stakedByUser Amount of tokens staked by the user in the distribution at the moment\r\n   * @param totalStaked Total tokens staked in the distribution\r\n   * @return The accrued rewards for the user until the moment\r\n   **/\r\n  function _updateUserAssetInternal(\r\n    address user,\r\n    address asset,\r\n    uint256 stakedByUser,\r\n    uint256 totalStaked\r\n  ) internal returns (uint256) {\r\n    AssetData storage assetData = assets[asset];\r\n    uint256 userIndex = assetData.users[user];\r\n    uint256 accruedRewards = 0;\r\n\r\n    uint256 newIndex = _updateAssetStateInternal(asset, assetData, totalStaked);\r\n\r\n    if (userIndex != newIndex) {\r\n      if (stakedByUser != 0) {\r\n        accruedRewards = _getRewards(stakedByUser, newIndex, userIndex);\r\n      }\r\n\r\n      assetData.users[user] = newIndex;\r\n      emit UserIndexUpdated(user, asset, newIndex);\r\n    }\r\n\r\n    return accruedRewards;\r\n  }\r\n\r\n  /**\r\n   * @dev Used by \"frontend\" stake contracts to update the data of an user when claiming rewards from there\r\n   * @param user The address of the user\r\n   * @param stakes List of structs of the user data related with his stake\r\n   * @return The accrued rewards for the user until the moment\r\n   **/\r\n  function _claimRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\r\n    internal\r\n    returns (uint256)\r\n  {\r\n    uint256 accruedRewards = 0;\r\n\r\n    for (uint256 i = 0; i < stakes.length; i++) {\r\n      accruedRewards = accruedRewards.add(\r\n        _updateUserAssetInternal(\r\n          user,\r\n          stakes[i].underlyingAsset,\r\n          stakes[i].stakedByUser,\r\n          stakes[i].totalStaked\r\n        )\r\n      );\r\n    }\r\n\r\n    return accruedRewards;\r\n  }\r\n\r\n  /**\r\n   * @dev Return the accrued rewards for an user over a list of distribution\r\n   * @param user The address of the user\r\n   * @param stakes List of structs of the user data related with his stake\r\n   * @return The accrued rewards for the user until the moment\r\n   **/\r\n  function _getUnclaimedRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\r\n    internal\r\n    view\r\n    returns (uint256)\r\n  {\r\n    uint256 accruedRewards = 0;\r\n\r\n    for (uint256 i = 0; i < stakes.length; i++) {\r\n      AssetData storage assetConfig = assets[stakes[i].underlyingAsset];\r\n      uint256 assetIndex =\r\n        _getAssetIndex(\r\n          assetConfig.index,\r\n          assetConfig.emissionPerSecond,\r\n          assetConfig.lastUpdateTimestamp,\r\n          stakes[i].totalStaked\r\n        );\r\n\r\n      accruedRewards = accruedRewards.add(\r\n        _getRewards(stakes[i].stakedByUser, assetIndex, assetConfig.users[user])\r\n      );\r\n    }\r\n    return accruedRewards;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function for the calculation of user's rewards on a distribution\r\n   * @param principalUserBalance Amount staked by the user on a distribution\r\n   * @param reserveIndex Current index of the distribution\r\n   * @param userIndex Index stored for the user, representation his staking moment\r\n   * @return The rewards\r\n   **/\r\n  function _getRewards(\r\n    uint256 principalUserBalance,\r\n    uint256 reserveIndex,\r\n    uint256 userIndex\r\n  ) internal pure returns (uint256) {\r\n    return principalUserBalance.mul(reserveIndex.sub(userIndex)).div(10**uint256(PRECISION));\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the next value of an specific distribution index, with validations\r\n   * @param currentIndex Current index of the distribution\r\n   * @param emissionPerSecond Representing the total rewards distributed per second per asset unit, on the distribution\r\n   * @param lastUpdateTimestamp Last moment this distribution was updated\r\n   * @param totalBalance of tokens considered for the distribution\r\n   * @return The new index.\r\n   **/\r\n  function _getAssetIndex(\r\n    uint256 currentIndex,\r\n    uint256 emissionPerSecond,\r\n    uint128 lastUpdateTimestamp,\r\n    uint256 totalBalance\r\n  ) internal view returns (uint256) {\r\n    if (\r\n      emissionPerSecond == 0 ||\r\n      totalBalance == 0 ||\r\n      lastUpdateTimestamp == block.timestamp ||\r\n      lastUpdateTimestamp >= DISTRIBUTION_END\r\n    ) {\r\n      return currentIndex;\r\n    }\r\n\r\n    uint256 currentTimestamp =\r\n      block.timestamp > DISTRIBUTION_END ? DISTRIBUTION_END : block.timestamp;\r\n    uint256 timeDelta = currentTimestamp.sub(lastUpdateTimestamp);\r\n    return\r\n      emissionPerSecond.mul(timeDelta).mul(10**uint256(PRECISION)).div(totalBalance).add(\r\n        currentIndex\r\n      );\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the data of an user on a distribution\r\n   * @param user Address of the user\r\n   * @param asset The address of the reference asset of the distribution\r\n   * @return The new index\r\n   **/\r\n  function getUserAssetData(address user, address asset) public view returns (uint256) {\r\n    return assets[asset].users[user];\r\n  }\r\n}\r\n\r\n// File: contracts\\lib\\Context.sol\r\n\r\n \r\n\r\npragma solidity 0.7.5;\r\n\r\n/**\r\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\r\n * Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n  function _msgSender() internal view virtual returns (address payable) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view virtual returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n// File: contracts\\interfaces\\IERC20Detailed.sol\r\n\r\n \r\npragma solidity 0.7.5;\r\n\r\n\r\n/**\r\n * @dev Interface for ERC20 including metadata\r\n **/\r\ninterface IERC20Detailed is IERC20 {\r\n  function name() external view returns (string memory);\r\n\r\n  function symbol() external view returns (string memory);\r\n\r\n  function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: contracts\\lib\\ERC20.sol\r\n\r\n \r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20\r\n * @notice Basic ERC20 implementation\r\n * @author Aave\r\n **/\r\ncontract ERC20 is Context, IERC20, IERC20Detailed {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) private _balances;\r\n  mapping(address => mapping(address => uint256)) private _allowances;\r\n  uint256 private _totalSupply;\r\n  string private _name;\r\n  string private _symbol;\r\n  uint8 private _decimals;\r\n\r\n  constructor(\r\n    string memory name,\r\n    string memory symbol,\r\n    uint8 decimals\r\n  ) public {\r\n    _name = name;\r\n    _symbol = symbol;\r\n    _decimals = decimals;\r\n  }\r\n\r\n  /**\r\n   * @return the name of the token\r\n   **/\r\n  function name() public view override returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @return the symbol of the token\r\n   **/\r\n  function symbol() public view override returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @return the decimals of the token\r\n   **/\r\n  function decimals() public view override returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  /**\r\n   * @return the total supply of the token\r\n   **/\r\n  function totalSupply() public view override returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n   * @return the balance of the token\r\n   **/\r\n  function balanceOf(address account) public view override returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n\r\n  /**\r\n   * @dev executes a transfer of tokens from msg.sender to recipient\r\n   * @param recipient the recipient of the tokens\r\n   * @param amount the amount of tokens being transferred\r\n   * @return true if the transfer succeeds, false otherwise\r\n   **/\r\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev returns the allowance of spender on the tokens owned by owner\r\n   * @param owner the owner of the tokens\r\n   * @param spender the user allowed to spend the owner's tokens\r\n   * @return the amount of owner's tokens spender is allowed to spend\r\n   **/\r\n  function allowance(address owner, address spender)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  /**\r\n   * @dev allows spender to spend the tokens owned by msg.sender\r\n   * @param spender the user allowed to spend msg.sender tokens\r\n   * @return true\r\n   **/\r\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev executes a transfer of token from sender to recipient, if msg.sender is allowed to do so\r\n   * @param sender the owner of the tokens\r\n   * @param recipient the recipient of the tokens\r\n   * @param amount the amount of tokens being transferred\r\n   * @return true if the transfer succeeds, false otherwise\r\n   **/\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) public virtual override returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n    _approve(\r\n      sender,\r\n      _msgSender(),\r\n      _allowances[sender][_msgSender()].sub(amount, 'ERC20: transfer amount exceeds allowance')\r\n    );\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev increases the allowance of spender to spend msg.sender tokens\r\n   * @param spender the user allowed to spend on behalf of msg.sender\r\n   * @param addedValue the amount being added to the allowance\r\n   * @return true\r\n   **/\r\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev decreases the allowance of spender to spend msg.sender tokens\r\n   * @param spender the user allowed to spend on behalf of msg.sender\r\n   * @param subtractedValue the amount being subtracted to the allowance\r\n   * @return true\r\n   **/\r\n  function decreaseAllowance(address spender, uint256 subtractedValue)\r\n    public\r\n    virtual\r\n    returns (bool)\r\n  {\r\n    _approve(\r\n      _msgSender(),\r\n      spender,\r\n      _allowances[_msgSender()][spender].sub(\r\n        subtractedValue,\r\n        'ERC20: decreased allowance below zero'\r\n      )\r\n    );\r\n    return true;\r\n  }\r\n\r\n  function _transfer(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) internal virtual {\r\n    require(sender != address(0), 'ERC20: transfer from the zero address');\r\n    require(recipient != address(0), 'ERC20: transfer to the zero address');\r\n\r\n    _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n    _balances[sender] = _balances[sender].sub(amount, 'ERC20: transfer amount exceeds balance');\r\n    _balances[recipient] = _balances[recipient].add(amount);\r\n    emit Transfer(sender, recipient, amount);\r\n  }\r\n\r\n  function _mint(address account, uint256 amount) internal virtual {\r\n    require(account != address(0), 'ERC20: mint to the zero address');\r\n\r\n    _beforeTokenTransfer(address(0), account, amount);\r\n\r\n    _totalSupply = _totalSupply.add(amount);\r\n    _balances[account] = _balances[account].add(amount);\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  function _burn(address account, uint256 amount) internal virtual {\r\n    require(account != address(0), 'ERC20: burn from the zero address');\r\n\r\n    _beforeTokenTransfer(account, address(0), amount);\r\n\r\n    _balances[account] = _balances[account].sub(amount, 'ERC20: burn amount exceeds balance');\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n\r\n  function _approve(\r\n    address owner,\r\n    address spender,\r\n    uint256 amount\r\n  ) internal virtual {\r\n    require(owner != address(0), 'ERC20: approve from the zero address');\r\n    require(spender != address(0), 'ERC20: approve to the zero address');\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  function _setName(string memory newName) internal {\r\n    _name = newName;\r\n  }\r\n\r\n  function _setSymbol(string memory newSymbol) internal {\r\n    _symbol = newSymbol;\r\n  }\r\n\r\n  function _setDecimals(uint8 newDecimals) internal {\r\n    _decimals = newDecimals;\r\n  }\r\n\r\n  function _beforeTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) internal virtual {}\r\n}\r\n\r\n// File: contracts\\utils\\Math.sol\r\n\r\n \r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\r\n    }\r\n}\r\n\r\n// File: contracts\\utils\\Arrays.sol\r\n\r\n \r\n\r\npragma solidity ^0.7.5;\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to array types.\r\n */\r\nlibrary Arrays {\r\n    /**\r\n     * @dev Searches a sorted `array` and returns the first index that contains\r\n     * a value greater or equal to `element`. If no such index exists (i.e. all\r\n     * values in the array are strictly less than `element`), the array length is\r\n     * returned. Time complexity O(log n).\r\n     *\r\n     * `array` is expected to be sorted in ascending order, and to contain no\r\n     * repeated elements.\r\n     */\r\n    function findUpperBound(uint256[] storage array, uint256 element)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (array.length == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 low = 0;\r\n        uint256 high = array.length;\r\n\r\n        while (low < high) {\r\n            uint256 mid = Math.average(low, high);\r\n\r\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\r\n            // because Math.average rounds down (it does integer division with truncation).\r\n            if (array[mid] > element) {\r\n                high = mid;\r\n            } else {\r\n                low = mid + 1;\r\n            }\r\n        }\r\n\r\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\r\n        if (low > 0 && array[low - 1] == element) {\r\n            return low - 1;\r\n        } else {\r\n            return low;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\utils\\Counters.sol\r\n\r\n \r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\r\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\r\n * directly accessed.\r\n */\r\nlibrary Counters {\r\n    using SafeMath for uint256;\r\n\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\r\n        counter._value += 1;\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        counter._value = counter._value.sub(1);\r\n    }\r\n}\r\n\r\n// File: contracts\\lib\\ERC20Snapshot.sol\r\n\r\n \r\n\r\npragma solidity ^0.7.5;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and\r\n * total supply at the time are recorded for later access.\r\n *\r\n * This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting.\r\n * In naive implementations it's possible to perform a \"double spend\" attack by reusing the same balance from different\r\n * accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be\r\n * used to create an efficient ERC20 forking mechanism.\r\n *\r\n * Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a\r\n * snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot\r\n * id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id\r\n * and the account address.\r\n *\r\n * ==== Gas Costs\r\n *\r\n * Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log\r\n * n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much\r\n * smaller since identical balances in subsequent snapshots are stored as a single entry.\r\n *\r\n * There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is\r\n * only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent\r\n * transfers will have normal cost until the next snapshot, and so on.\r\n */\r\nabstract contract ERC20Snapshot is ERC20 {\r\n    // Inspired by Jordi Baylina's MiniMeToken to record historical balances:\r\n    // https://github.com/Giveth/minimd/blob/ea04d950eea153a04c51fa510b068b9dded390cb/contracts/MiniMeToken.sol\r\n\r\n    using Arrays for uint256[];\r\n    using Counters for Counters.Counter;\r\n\r\n    // Snapshotted values have arrays of ids and the value corresponding to that id. These could be an array of a\r\n    // Snapshot struct, but that would impede usage of functions that work on an array.\r\n    struct Snapshots {\r\n        uint256[] ids;\r\n        uint256[] values;\r\n    }\r\n\r\n    mapping(address => Snapshots) private _accountBalanceSnapshots;\r\n    Snapshots private _totalSupplySnapshots;\r\n\r\n    // Snapshot ids increase monotonically, with the first value being 1. An id of 0 is invalid.\r\n    Counters.Counter private _currentSnapshotId;\r\n\r\n    /**\r\n     * @dev Emitted by {_snapshot} when a snapshot identified by `id` is created.\r\n     */\r\n    event Snapshot(uint256 id);\r\n\r\n    /**\r\n     * @dev Creates a new snapshot and returns its snapshot id.\r\n     *\r\n     * Emits a {Snapshot} event that contains the same id.\r\n     *\r\n     * {_snapshot} is `internal` and you have to decide how to expose it externally. Its usage may be restricted to a\r\n     * set of accounts, for example using {AccessControl}, or it may be open to the public.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * While an open way of calling {_snapshot} is required for certain trust minimization mechanisms such as forking,\r\n     * you must consider that it can potentially be used by attackers in two ways.\r\n     *\r\n     * First, it can be used to increase the cost of retrieval of values from snapshots, although it will grow\r\n     * logarithmically thus rendering this attack ineffective in the long term. Second, it can be used to target\r\n     * specific accounts and increase the cost of ERC20 transfers for them, in the ways specified in the Gas Costs\r\n     * section above.\r\n     *\r\n     * We haven't measured the actual numbers; if this is something you're interested in please reach out to us.\r\n     * ====\r\n     */\r\n    function _snapshot() internal virtual returns (uint256) {\r\n        _currentSnapshotId.increment();\r\n\r\n        uint256 currentId = _currentSnapshotId.current();\r\n        emit Snapshot(currentId);\r\n        return currentId;\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieves the balance of `account` at the time `snapshotId` was created.\r\n     */\r\n    function balanceOfAt(address account, uint256 snapshotId)\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        (bool snapshotted, uint256 value) =\r\n            _valueAt(snapshotId, _accountBalanceSnapshots[account]);\r\n\r\n        return snapshotted ? value : balanceOf(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieves the total supply at the time `snapshotId` was created.\r\n     */\r\n    function totalSupplyAt(uint256 snapshotId)\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        (bool snapshotted, uint256 value) =\r\n            _valueAt(snapshotId, _totalSupplySnapshots);\r\n\r\n        return snapshotted ? value : totalSupply();\r\n    }\r\n\r\n    // Update balance and/or total supply snapshots before the values are modified. This is implemented\r\n    // in the _beforeTokenTransfer hook, which is executed for _mint, _burn, and _transfer operations.\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n\r\n        if (from == address(0)) {\r\n            // mint\r\n            _updateAccountSnapshot(to);\r\n            _updateTotalSupplySnapshot();\r\n        } else if (to == address(0)) {\r\n            // burn\r\n            _updateAccountSnapshot(from);\r\n            _updateTotalSupplySnapshot();\r\n        } else {\r\n            // transfer\r\n            _updateAccountSnapshot(from);\r\n            _updateAccountSnapshot(to);\r\n        }\r\n    }\r\n\r\n    function _valueAt(uint256 snapshotId, Snapshots storage snapshots)\r\n        private\r\n        view\r\n        returns (bool, uint256)\r\n    {\r\n        require(snapshotId > 0, \"ERC20Snapshot: id is 0\");\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            snapshotId <= _currentSnapshotId.current(),\r\n            \"ERC20Snapshot: nonexistent id\"\r\n        );\r\n\r\n        // When a valid snapshot is queried, there are three possibilities:\r\n        //  a) The queried value was not modified after the snapshot was taken. Therefore, a snapshot entry was never\r\n        //  created for this id, and all stored snapshot ids are smaller than the requested one. The value that corresponds\r\n        //  to this id is the current one.\r\n        //  b) The queried value was modified after the snapshot was taken. Therefore, there will be an entry with the\r\n        //  requested id, and its value is the one to return.\r\n        //  c) More snapshots were created after the requested one, and the queried value was later modified. There will be\r\n        //  no entry for the requested id: the value that corresponds to it is that of the smallest snapshot id that is\r\n        //  larger than the requested one.\r\n        //\r\n        // In summary, we need to find an element in an array, returning the index of the smallest value that is larger if\r\n        // it is not found, unless said value doesn't exist (e.g. when all values are smaller). Arrays.findUpperBound does\r\n        // exactly this.\r\n\r\n        uint256 index = snapshots.ids.findUpperBound(snapshotId);\r\n\r\n        if (index == snapshots.ids.length) {\r\n            return (false, 0);\r\n        } else {\r\n            return (true, snapshots.values[index]);\r\n        }\r\n    }\r\n\r\n    function _updateAccountSnapshot(address account) private {\r\n        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\r\n    }\r\n\r\n    function _updateTotalSupplySnapshot() private {\r\n        _updateSnapshot(_totalSupplySnapshots, totalSupply());\r\n    }\r\n\r\n    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue)\r\n        private\r\n    {\r\n        uint256 currentId = _currentSnapshotId.current();\r\n        if (_lastSnapshotId(snapshots.ids) < currentId) {\r\n            snapshots.ids.push(currentId);\r\n            snapshots.values.push(currentValue);\r\n        }\r\n    }\r\n\r\n    function _lastSnapshotId(uint256[] storage ids)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (ids.length == 0) {\r\n            return 0;\r\n        } else {\r\n            return ids[ids.length - 1];\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\stake\\StakedToken.sol\r\n\r\n \r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title StakedToken\r\n * @notice Contract to stake Aave token, tokenize the position and get rewards, inheriting from a distribution manager contract\r\n * @author Aave\r\n **/\r\ncontract StakedToken is\r\n    IStakedAave,\r\n    ERC20Snapshot,\r\n    VersionedInitializable,\r\n    AaveDistributionManager\r\n{\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint256 public constant REVISION = 1;\r\n\r\n    IERC20 public immutable STAKED_TOKEN;\r\n    IERC20 public immutable REWARD_TOKEN;\r\n    uint256 public immutable COOLDOWN_SECONDS;\r\n\r\n    /// @notice Seconds available to redeem once the cooldown period is fullfilled\r\n    uint256 public immutable UNSTAKE_WINDOW;\r\n\r\n    /// @notice Address to pull from the rewards, needs to have approved this contract\r\n    address public immutable REWARDS_VAULT;\r\n\r\n    mapping(address => uint256) public stakerRewardsToClaim;\r\n    mapping(address => uint256) public stakersCooldowns;\r\n\r\n    event Staked(\r\n        address indexed from,\r\n        address indexed onBehalfOf,\r\n        uint256 amount\r\n    );\r\n    event Redeem(address indexed from, address indexed to, uint256 amount);\r\n\r\n    event RewardsAccrued(address user, uint256 amount);\r\n    event RewardsClaimed(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount\r\n    );\r\n\r\n    event Cooldown(address indexed user);\r\n\r\n    constructor(\r\n        IERC20 stakedToken,\r\n        IERC20 rewardToken,\r\n        uint256 cooldownSeconds,\r\n        uint256 unstakeWindow,\r\n        address rewardsVault,\r\n        address emissionManager,\r\n        uint128 distributionDuration,\r\n        string memory name,\r\n        string memory symbol,\r\n        uint8 decimals\r\n    )\r\n        public\r\n        ERC20(name, symbol, decimals)\r\n        AaveDistributionManager(emissionManager, distributionDuration)\r\n    {\r\n        STAKED_TOKEN = stakedToken;\r\n        REWARD_TOKEN = rewardToken;\r\n        COOLDOWN_SECONDS = cooldownSeconds;\r\n        UNSTAKE_WINDOW = unstakeWindow;\r\n        REWARDS_VAULT = rewardsVault;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by the proxy contract\r\n     **/\r\n    function initialize(\r\n        string calldata name,\r\n        string calldata symbol,\r\n        uint8 decimals\r\n    ) external initializer {\r\n        _setName(name);\r\n        _setSymbol(symbol);\r\n        _setDecimals(decimals);\r\n    }\r\n\r\n    function stake(address onBehalfOf, uint256 amount) external override {\r\n        require(amount != 0, \"INVALID_ZERO_AMOUNT\");\r\n        uint256 balanceOfUser = balanceOf(onBehalfOf);\r\n\r\n        uint256 accruedRewards =\r\n            _updateUserAssetInternal(\r\n                onBehalfOf,\r\n                address(this),\r\n                balanceOfUser,\r\n                totalSupply()\r\n            );\r\n        if (accruedRewards != 0) {\r\n            emit RewardsAccrued(onBehalfOf, accruedRewards);\r\n            stakerRewardsToClaim[onBehalfOf] = stakerRewardsToClaim[onBehalfOf]\r\n                .add(accruedRewards);\r\n        }\r\n\r\n        stakersCooldowns[onBehalfOf] = getNextCooldownTimestamp(\r\n            0,\r\n            amount,\r\n            onBehalfOf,\r\n            balanceOfUser\r\n        );\r\n\r\n        _mint(onBehalfOf, amount);\r\n        IERC20(STAKED_TOKEN).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            amount\r\n        );\r\n\r\n        emit Staked(msg.sender, onBehalfOf, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Redeems staked tokens, and stop earning rewards\r\n     * @param to Address to redeem to\r\n     * @param amount Amount to redeem\r\n     **/\r\n    function redeem(address to, uint256 amount) external override {\r\n        require(amount != 0, \"INVALID_ZERO_AMOUNT\");\r\n        //solium-disable-next-line\r\n        uint256 cooldownStartTimestamp = stakersCooldowns[msg.sender];\r\n        require(\r\n            block.timestamp > cooldownStartTimestamp.add(COOLDOWN_SECONDS),\r\n            \"INSUFFICIENT_COOLDOWN\"\r\n        );\r\n        require(\r\n            block.timestamp.sub(cooldownStartTimestamp.add(COOLDOWN_SECONDS)) <=\r\n                UNSTAKE_WINDOW,\r\n            \"UNSTAKE_WINDOW_FINISHED\"\r\n        );\r\n        uint256 balanceOfMessageSender = balanceOf(msg.sender);\r\n\r\n        uint256 amountToRedeem =\r\n            (amount > balanceOfMessageSender) ? balanceOfMessageSender : amount;\r\n\r\n        _updateCurrentUnclaimedRewards(\r\n            msg.sender,\r\n            balanceOfMessageSender,\r\n            true\r\n        );\r\n\r\n        _burn(msg.sender, amountToRedeem);\r\n\r\n        if (balanceOfMessageSender.sub(amountToRedeem) == 0) {\r\n            stakersCooldowns[msg.sender] = 0;\r\n        }\r\n\r\n        IERC20(STAKED_TOKEN).safeTransfer(to, amountToRedeem);\r\n\r\n        emit Redeem(msg.sender, to, amountToRedeem);\r\n    }\r\n\r\n    /**\r\n     * @dev Activates the cooldown period to unstake\r\n     * - It can't be called if the user is not staking\r\n     **/\r\n    function cooldown() external override {\r\n        require(balanceOf(msg.sender) != 0, \"INVALID_BALANCE_ON_COOLDOWN\");\r\n        //solium-disable-next-line\r\n        stakersCooldowns[msg.sender] = block.timestamp;\r\n\r\n        emit Cooldown(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Claims an `amount` of `REWARD_TOKEN` to the address `to`\r\n     * @param to Address to stake for\r\n     * @param amount Amount to stake\r\n     **/\r\n    function claimRewards(address to, uint256 amount) external override {\r\n        uint256 newTotalRewards =\r\n            _updateCurrentUnclaimedRewards(\r\n                msg.sender,\r\n                balanceOf(msg.sender),\r\n                false\r\n            );\r\n        uint256 amountToClaim =\r\n            (amount == type(uint256).max) ? newTotalRewards : amount;\r\n\r\n        stakerRewardsToClaim[msg.sender] = newTotalRewards.sub(\r\n            amountToClaim,\r\n            \"INVALID_AMOUNT\"\r\n        );\r\n\r\n        REWARD_TOKEN.safeTransferFrom(REWARDS_VAULT, to, amountToClaim);\r\n\r\n        emit RewardsClaimed(msg.sender, to, amountToClaim);\r\n    }\r\n\r\n    /**\r\n     * @dev When user staked LAUNCH to receive stkLAUNCH, the stkLAUNCH is non-transferable.\r\n     * @dev This function is override to prevent transfer.\r\n     * @param from Address to transfer from\r\n     * @param to Address to transfer to\r\n     * @param amount Amount to transfer\r\n     **/\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        revert(\"Staked token is not transferable. Unstake first.\");\r\n    }\r\n\r\n    /**\r\n     * @dev Updates the user state related with his accrued rewards\r\n     * @param user Address of the user\r\n     * @param userBalance The current balance of the user\r\n     * @param updateStorage Boolean flag used to update or not the stakerRewardsToClaim of the user\r\n     * @return The unclaimed rewards that were added to the total accrued\r\n     **/\r\n    function _updateCurrentUnclaimedRewards(\r\n        address user,\r\n        uint256 userBalance,\r\n        bool updateStorage\r\n    ) internal returns (uint256) {\r\n        uint256 accruedRewards =\r\n            _updateUserAssetInternal(\r\n                user,\r\n                address(this),\r\n                userBalance,\r\n                totalSupply()\r\n            );\r\n        uint256 unclaimedRewards =\r\n            stakerRewardsToClaim[user].add(accruedRewards);\r\n\r\n        if (accruedRewards != 0) {\r\n            if (updateStorage) {\r\n                stakerRewardsToClaim[user] = unclaimedRewards;\r\n            }\r\n            emit RewardsAccrued(user, accruedRewards);\r\n        }\r\n\r\n        return unclaimedRewards;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the how is gonna be a new cooldown timestamp depending on the sender/receiver situation\r\n     *  - If the timestamp of the sender is \"better\" or the timestamp of the recipient is 0, we take the one of the recipient\r\n     *  - Weighted average of from/to cooldown timestamps if:\r\n     *    # The sender doesn't have the cooldown activated (timestamp 0).\r\n     *    # The sender timestamp is expired\r\n     *    # The sender has a \"worse\" timestamp\r\n     *  - If the receiver's cooldown timestamp expired (too old), the next is 0\r\n     * @param fromCooldownTimestamp Cooldown timestamp of the sender\r\n     * @param amountToReceive Amount\r\n     * @param toAddress Address of the recipient\r\n     * @param toBalance Current balance of the receiver\r\n     * @return The new cooldown timestamp\r\n     **/\r\n    function getNextCooldownTimestamp(\r\n        uint256 fromCooldownTimestamp,\r\n        uint256 amountToReceive,\r\n        address toAddress,\r\n        uint256 toBalance\r\n    ) public returns (uint256) {\r\n        uint256 toCooldownTimestamp = stakersCooldowns[toAddress];\r\n        if (toCooldownTimestamp == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 minimalValidCooldownTimestamp =\r\n            block.timestamp.sub(COOLDOWN_SECONDS).sub(UNSTAKE_WINDOW);\r\n\r\n        if (minimalValidCooldownTimestamp > toCooldownTimestamp) {\r\n            toCooldownTimestamp = 0;\r\n        } else {\r\n            uint256 fromCooldownTimestamp =\r\n                (minimalValidCooldownTimestamp > fromCooldownTimestamp)\r\n                    ? block.timestamp\r\n                    : fromCooldownTimestamp;\r\n\r\n            if (fromCooldownTimestamp < toCooldownTimestamp) {\r\n                return toCooldownTimestamp;\r\n            } else {\r\n                toCooldownTimestamp = (\r\n                    amountToReceive.mul(fromCooldownTimestamp).add(\r\n                        toBalance.mul(toCooldownTimestamp)\r\n                    )\r\n                )\r\n                    .div(amountToReceive.add(toBalance));\r\n            }\r\n        }\r\n        stakersCooldowns[toAddress] = toCooldownTimestamp;\r\n\r\n        return toCooldownTimestamp;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the total rewards pending to claim by an staker\r\n     * @param staker The staker address\r\n     * @return The rewards\r\n     */\r\n    function getTotalRewardsBalance(address staker)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        DistributionTypes.UserStakeInput[] memory userStakeInputs =\r\n            new DistributionTypes.UserStakeInput[](1);\r\n        userStakeInputs[0] = DistributionTypes.UserStakeInput({\r\n            underlyingAsset: address(this),\r\n            stakedByUser: balanceOf(staker),\r\n            totalStaked: totalSupply()\r\n        });\r\n        return\r\n            stakerRewardsToClaim[staker].add(\r\n                _getUnclaimedRewards(staker, userStakeInputs)\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev returns the revision of the implementation contract\r\n     * @return The revision\r\n     */\r\n    function getRevision() internal pure override returns (uint256) {\r\n        return REVISION;\r\n    }\r\n\r\n    /**\r\n     * @dev creates a snapshot\r\n     * @return The snapshot Id\r\n     */\r\n    function snapshot() external returns (uint256) {\r\n        return _snapshot();\r\n    }\r\n}\r\n\r\n// File: contracts\\stake\\SvLaunch.sol\r\n\r\n \r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n/**\r\n * @title SvLaunch\r\n * @notice User stake LAUNCH token to receive svLAUNCH token\r\n * @author SuperLauncher\r\n **/\r\ncontract SvLaunch is StakedToken {\r\n  string internal constant NAME = 'Super Vote LAUNCH';\r\n  string internal constant SYMBOL = 'svLAUNCH';\r\n  uint8 internal constant DECIMALS = 18;\r\n\r\n  constructor(\r\n    IERC20 stakedToken,\r\n    IERC20 rewardToken,\r\n    uint256 cooldownSeconds,\r\n    uint256 unstakeWindow,\r\n    address rewardsVault,\r\n    address emissionManager,\r\n    uint128 distributionDuration\r\n  )\r\n    public\r\n    StakedToken(\r\n      stakedToken,\r\n      rewardToken,\r\n      cooldownSeconds,\r\n      unstakeWindow,\r\n      rewardsVault,\r\n      emissionManager,\r\n      distributionDuration,\r\n      NAME,\r\n      SYMBOL,\r\n      DECIMALS\r\n    )\r\n  {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cooldownSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeWindow\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardsVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"emissionManager\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"distributionDuration\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emission\",\"type\":\"uint256\"}],\"name\":\"AssetConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"AssetIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Cooldown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsAccrued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Snapshot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"UserIndexUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COOLDOWN_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISTRIBUTION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EMISSION_MANAGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARDS_VAULT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKED_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"emissionPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"emissionPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"}],\"internalType\":\"struct DistributionTypes.AssetConfigInput[]\",\"name\":\"assetsConfigInput\",\"type\":\"tuple[]\"}],\"name\":\"configureAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromCooldownTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToReceive\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toBalance\",\"type\":\"uint256\"}],\"name\":\"getNextCooldownTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getTotalRewardsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getUserAssetData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakerRewardsToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakersCooldowns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SvLaunch", "CompilerVersion": "v0.7.5+commit.eb77ed08", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b5389a679151c4b8621b1098c6e0961a3cfee8d4000000000000000000000000c623d9e8bf6812852a7aeded140d479095cfd9410000000000000000000000000000000000000000000000000000000000093a80000000000000000000000000000000000000000000000000000000000002a3000000000000000000000000007b9cb1baba39ed10095d25b8a57de700d38bc65c00000000000000000000000037c490d6ee164537a9a3528c950fdd9f76e4df3f0000000000000000000000000000000000000000000000000000000009660180", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://38c9e15525a0d5415ee5cdc3985eaa63ae7c4a99c80d922e5e59baa39bc5a611"}