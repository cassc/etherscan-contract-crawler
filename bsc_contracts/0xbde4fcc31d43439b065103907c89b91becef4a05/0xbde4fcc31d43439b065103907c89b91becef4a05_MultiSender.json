{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\ninterface IERC20 {\r\n    function tranferWithLockPeriod(\r\n        address to,\r\n        uint256 amount,\r\n        uint256 lockingPeriod\r\n    ) external returns (bool);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\ncontract MultiSender {\r\n    address public GLBT;\r\n    address public owner;\r\n\r\n    constructor(address _glbt) {\r\n        GLBT = _glbt;\r\n        owner = 0x0C76E38DeF4F982207B2B3831d34954B181a3945;\r\n    }\r\n\r\n    function MultiSend(\r\n        address[] memory _wallets,\r\n        uint256[] memory _amounts,\r\n        address _contractAddress,\r\n        uint256 _lockTime\r\n    ) public {\r\n        require(_wallets.length == _amounts.length, \"Invalid Data length\");\r\n        \r\n            uint256 totalAmount;\r\n            for (uint256 i = 0; i < _amounts.length; i++) {\r\n                totalAmount += _amounts[i];\r\n            }\r\n            if (_contractAddress != GLBT) {\r\n            IERC20(_contractAddress).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                totalAmount\r\n            );\r\n        }\r\n\r\n        require(IERC20(_contractAddress).balanceOf(address(this)) >= totalAmount, \"Please load tokens on the contract\");\r\n\r\n        // Direct transfer\r\n        for (uint256 i = 0; i < _amounts.length; i++) {\r\n            if (_contractAddress == GLBT) {\r\n                IERC20(_contractAddress).tranferWithLockPeriod(\r\n                    _wallets[i],\r\n                    _amounts[i],\r\n                    _lockTime\r\n                );\r\n            } else {\r\n                IERC20(_contractAddress).transfer(_wallets[i], _amounts[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function retriveFund(address _contractAddress, uint256 _amount) public {\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        IERC20(_contractAddress).transfer(owner, _amount);\r\n    }\r\n}\r\n\r\n// [\"0x4B0897b0513fdC7C541B6d9D7E929C4e5364D2dB\", \"0x5B38Da6a701c568545dCfcB03FcB875f56beddC4\"]\r\n// [\"1000000000000000000\", \"5000000000000000000\"]", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_glbt\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"GLBT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lockTime\",\"type\":\"uint256\"}],\"name\":\"MultiSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"retriveFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MultiSender", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000ab27f70dded50d83f8a5b9b15de13f7a08053308", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b7e01fb2756c9db49293128b7882df19ed9a6e598b4a2d1b264b6718c48ca9ab"}