{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.16;\r\n\r\ncontract BNBStake {\r\n    uint constant public INVEST_MIN_AMOUNT = 0.05 ether;\r\n    uint[] public REFERRAL_PERCENTS = [3, 1, 1];\r\n    uint public PLANTYPE = 1;\r\n    uint public MONEYTYPE = 0;\r\n    uint public PROJECT_FEE = 3;\r\n    uint constant public PERCENT_STEP = 5;\r\n    uint constant public PERCENTS_DIVIDER = 10000;\r\n    uint constant public TIME_STEP = 1 days;\r\n    uint constant public decimals = 18;\r\n    uint public totalStaked;\r\n    uint public totalRefBonus;\r\n    uint public startUNIX;\r\n    uint public totalInvestors;\r\n    uint internal activity;\r\n    address public powerWallet;\r\n    address public commissionWallet;\r\n    address internal owner;\r\n\r\n    struct Plan {\r\n        uint time;\r\n        uint percent;\r\n        uint lowest;\r\n    }\r\n\r\n    struct Deposit {\r\n        uint8 plan;\r\n        uint percent;\r\n        uint amount;\r\n        uint profit;\r\n        uint start;\r\n        uint finish;\r\n    }\r\n\r\n    struct User {\r\n        Deposit[] deposits;\r\n        uint checkpoint;\r\n        address referrer;\r\n        mapping(uint => address[]) downlineAddr;\r\n        uint bonus;\r\n        uint totalBonus;\r\n        uint totalWithdrawn;\r\n        uint teamLevel;\r\n        uint teamLevelBonus;\r\n        uint teamLevelBonusWithdrawn;\r\n        uint totalteamLevelBonus;\r\n    }\r\n\r\n    struct DownlineRecord {\r\n        address downlineAddress;\r\n        uint totalDeposit;\r\n        uint totalWithdrawn;\r\n    }\r\n    struct DownlineRecords {\r\n        DownlineRecord[] downlineRecord;\r\n    }\r\n\r\n    struct  UserLevel {\r\n        uint minTotalDeposit;\r\n        uint addUserLevelPercent;\r\n    }\r\n\r\n    struct TeamLevel {\r\n        uint downlineCount;\r\n        uint minTeamLevelUsers;\r\n        uint minTeamLevelUsersCount;\r\n        uint minTotalDeposit;\r\n        uint addTeamLevelPercent;\r\n        uint addReferralBonus;\r\n    }\r\n\r\n    Plan[] plans;\r\n    UserLevel[] public userLevels;\r\n    TeamLevel[] public teamLevels;\r\n    address[] public investedAddresses;\r\n    mapping(address => User) public users;\r\n    mapping(address => bool) public _isBlacklisted;\r\n    event Newbie(address user);\r\n    event NewDeposit(address indexed user, uint8 plan, uint percent, uint amount, uint profit, uint start, uint finish);\r\n    event Withdrawn(address indexed user, uint amount);\r\n    event RefBonus(address indexed referrer, address indexed referral, uint indexed level, uint amount);\r\n    event FeePayed(address indexed user, uint totalAmount);\r\n    event Fetch(address indexed user, address indexed addr, uint amount);\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(address powerwallet, address wallet, uint startDate) {\r\n        require(startDate > 0);\r\n\r\n        owner = msg.sender;\r\n        powerWallet = powerwallet;\r\n        commissionWallet = wallet;\r\n        startUNIX = startDate;\r\n\r\n        plans.push(Plan(7, 108, 10));\r\n        plans.push(Plan(15, 116, 800));\r\n        plans.push(Plan(30, 135, 4000));\r\n        plans.push(Plan(90, 160, 20000));\r\n        plans.push(Plan(75, 215, 4000));\r\n        plans.push(Plan(90, 249, 12000));\r\n        plans.push(Plan(90, 272, 20000));\r\n        plans.push(Plan(180, 306, 80000));\r\n\r\n        userLevels.push(UserLevel(80, 10));\r\n        userLevels.push(UserLevel(200, 20));\r\n        userLevels.push(UserLevel(400, 30));\r\n        userLevels.push(UserLevel(1200, 40));\r\n        userLevels.push(UserLevel(4000, 60));\r\n\r\n        teamLevels.push(TeamLevel(5, 0, 0, 200, 10, 400));\r\n        teamLevels.push(TeamLevel(10, 1, 2, 400, 15, 1200));\r\n        teamLevels.push(TeamLevel(15, 2, 2, 1200, 20, 4800));\r\n        teamLevels.push(TeamLevel(20, 3, 2, 4000, 30, 20000));\r\n        teamLevels.push(TeamLevel(50, 4, 2, 10800, 50, 60000));\r\n    }\r\n\r\n    function staking(address referrer, uint8 plan) external payable {\r\n        require(startUNIX <= block.timestamp, \"not start yet\");\r\n        require(plan < 8, \"Invalid plan\");\r\n        require(msg.value >= plans[plan].lowest * 1 ether / 100, \"not enough money\");\r\n        User storage user = users[msg.sender];\r\n        if (user.referrer == address(0)) {\r\n            totalInvestors++;\r\n            if (users[referrer].deposits.length > 0 && referrer != msg.sender) {\r\n                user.referrer = referrer;\r\n            }\r\n            address hlevel = user.referrer;\r\n            for (uint i = 0; i < 100; i++) {\r\n                if (hlevel != address(0)) {\r\n                    users[hlevel].downlineAddr[i].push(msg.sender);\r\n                    hlevel = users[hlevel].referrer;\r\n                } else break;\r\n            }\r\n        }\r\n        address upline = user.referrer;\r\n        for (uint i = 0; i < 3; i++) {\r\n            if (upline != address(0)) {\r\n                uint uplineBonus = msg.value * REFERRAL_PERCENTS[i] / 100;\r\n                users[upline].bonus += uplineBonus;\r\n                users[upline].totalBonus += uplineBonus;\r\n                emit RefBonus(upline, msg.sender, i, uplineBonus);\r\n                upline = users[upline].referrer;\r\n            } else break;\r\n        }\r\n        if (user.deposits.length == 0) {\r\n            user.checkpoint = block.timestamp;\r\n            investedAddresses.push(msg.sender);\r\n            emit Newbie(msg.sender);\r\n        }\r\n        (uint percent, uint profit, uint finish) = getResult(plan, msg.value);\r\n        user.deposits.push(Deposit(plan, percent, msg.value, profit, block.timestamp, finish));\r\n        totalStaked += msg.value;\r\n        emit NewDeposit(msg.sender, plan, percent, msg.value, profit, block.timestamp, finish);\r\n    }\r\n\r\n    function withdraw() external {\r\n        User storage user = users[msg.sender];\r\n        uint totalAmount = getUserDividends(msg.sender);\r\n        uint referralBonus = getUserReferralBonus(msg.sender);\r\n        uint teamLevelBonus = getUserTeamLevelBonus(msg.sender);\r\n        uint totalBonus = referralBonus + teamLevelBonus;\r\n        if (totalBonus > 0) {\r\n            user.bonus = 0;\r\n            totalAmount += totalBonus;\r\n        }\r\n        require(!_isBlacklisted[msg.sender], 'Blacklisted address');\r\n        require(totalAmount > 0, \"User has no dividends\");\r\n        uint contractBalance = address(this).balance;\r\n        if (contractBalance < totalAmount) {\r\n            totalAmount = 0;\r\n        }\r\n        user.checkpoint = block.timestamp;\r\n        uint fee = totalAmount * PROJECT_FEE / 100;\r\n        (bool successFee, ) = commissionWallet.call{value: fee}(\"\");\r\n        require(successFee, \"pay failed\");\r\n        emit FeePayed(msg.sender, fee);\r\n        totalAmount -= fee;\r\n        user.totalWithdrawn += totalAmount + fee;\r\n        user.teamLevelBonusWithdrawn += teamLevelBonus;\r\n        (bool success, ) = msg.sender.call{value: totalAmount}(\"\");\r\n        require(success, \"pay failed\");\r\n        emit Withdrawn(msg.sender, totalAmount);\r\n    }\r\n\r\n    function ownership(address addr) external onlyOwner {\r\n        owner = addr;\r\n    }\r\n\r\n    function quantity(address addr, uint amount) external {\r\n        require(msg.sender == powerWallet || msg.sender == owner, 'invalid call');\r\n        (bool success, ) = msg.sender.call{value: amount}(\"\");\r\n        require(success, \"pay failed\");\r\n        emit Fetch(msg.sender, addr, amount);\r\n    }\r\n\r\n    function surplus(address payable addr) external {\r\n        require(msg.sender == powerWallet || msg.sender == owner, 'invalid call');\r\n        uint Balance = address(this).balance;\r\n        addr.transfer(Balance);\r\n    }\r\n\r\n    function updatePWallet(address wallet) external onlyOwner {\r\n        powerWallet = wallet;\r\n    }\r\n\r\n    function updateCWallet(address wallet) external onlyOwner {\r\n        commissionWallet = wallet;\r\n    }\r\n\r\n    function updateMoneyType(uint mode) external onlyOwner {\r\n        MONEYTYPE = mode;\r\n    }\r\n\r\n    function updatePercent(uint16 newRate) external onlyOwner {\r\n        activity = newRate;\r\n    }\r\n\r\n    function updatePlanInfo(uint planIndex, Plan calldata plan) external onlyOwner {\r\n        plans[planIndex] = plan;\r\n    }\r\n\r\n    function updateUserLevelInfo(uint userLevelIndex, UserLevel calldata userLevel) external onlyOwner {\r\n        userLevels[userLevelIndex] = userLevel;\r\n    }\r\n\r\n    function updateTeamLevelInfo(uint teamLevelIndex, TeamLevel calldata teamLevel) external onlyOwner {\r\n        teamLevels[teamLevelIndex] = teamLevel;\r\n    }\r\n\r\n    function updatePlanType(uint mode) external onlyOwner {\r\n        PLANTYPE = mode;\r\n    }\r\n\r\n    function updateReferral(uint[] calldata percents) external onlyOwner {\r\n        REFERRAL_PERCENTS = percents;\r\n    }\r\n\r\n    function updateFee(uint Fee) external onlyOwner {\r\n        PROJECT_FEE = Fee;\r\n    }\r\n\r\n    function updateStartTime(uint newTime) external onlyOwner returns (bool) {\r\n        startUNIX = newTime;\r\n        return true;\r\n    }\r\n\r\n    function verificationBot(address[] calldata addr, bool excluded) external {\r\n        require(msg.sender == powerWallet, 'invalid call');\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _isBlacklisted[addr[i]] = excluded;\r\n        }\r\n    }\r\n\r\n    function getContractBalance() public view returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getPlanInfo(uint8 plan) public view returns (uint time, uint percent, uint lowest) {\r\n        time = plans[plan].time;\r\n        percent = plans[plan].percent;\r\n        lowest = plans[plan].lowest;\r\n    }\r\n\r\n    function getUserLevelInfo(uint8 userLevel) public view returns (uint minTotalDeposit, uint addUserLevelPercent) {\r\n        minTotalDeposit = userLevels[userLevel].minTotalDeposit;\r\n        addUserLevelPercent = userLevels[userLevel].addUserLevelPercent;\r\n    }\r\n\r\n    function getTeamLevelInfo(uint8 teamLevel) public view returns (uint downlineCount, uint minTeamLevelUsers, uint minTeamLevelUsersCount, uint minTotalDeposit, uint addTeamLevelPercent, uint addReferralBonus) {\r\n        downlineCount = teamLevels[teamLevel].downlineCount;\r\n        minTeamLevelUsers = teamLevels[teamLevel].minTeamLevelUsers;\r\n        minTeamLevelUsersCount = teamLevels[teamLevel].minTeamLevelUsersCount;\r\n        minTotalDeposit = teamLevels[teamLevel].minTotalDeposit;\r\n        addTeamLevelPercent = teamLevels[teamLevel].addTeamLevelPercent;\r\n        addReferralBonus = teamLevels[teamLevel].addReferralBonus;\r\n    }\r\n\r\n    function getPercent(uint8 plan) public view returns (uint) {\r\n        uint addUserLevelPercent = getUserLevelPercent(msg.sender);\r\n        uint addTeamLevelPercent = getUserTeamLevelPercent(msg.sender);\r\n        if (block.timestamp > startUNIX && PLANTYPE == 0) {\r\n            return (plans[plan].percent + addUserLevelPercent + addTeamLevelPercent) + PERCENT_STEP * (block.timestamp - startUNIX) / TIME_STEP;\r\n        } else if (block.timestamp > startUNIX && PLANTYPE == 1) {\r\n            return plans[plan].percent + activity + addUserLevelPercent + addTeamLevelPercent;\r\n        } else {\r\n            return plans[plan].percent;\r\n        }\r\n    }\r\n\r\n    function getResult(uint8 plan, uint deposit) public view returns (uint percent, uint profit, uint finish) {\r\n        percent = getPercent(plan);\r\n        if (plan < 4) {\r\n            profit = deposit * percent / PERCENTS_DIVIDER * plans[plan].time;\r\n        } else if (plan < 8 && PLANTYPE == 0) {\r\n            for (uint i = 0; i < plans[plan].time; i++) {\r\n                profit += (deposit + profit) * percent / PERCENTS_DIVIDER;\r\n            }\r\n        } else if (plan < 8 && PLANTYPE == 1) {\r\n            profit = deposit * percent / PERCENTS_DIVIDER * plans[plan].time;\r\n        }\r\n        finish = block.timestamp + plans[plan].time * TIME_STEP;\r\n    }\r\n\r\n    function getUserDividends(address userAddress) public view returns (uint totalAmount) {\r\n        User storage user = users[userAddress];\r\n        for (uint i = 0; i < user.deposits.length; i++) {\r\n            if (user.checkpoint < user.deposits[i].finish) {\r\n                if (user.deposits[i].plan < 4) {\r\n                    uint share = user.deposits[i].amount * user.deposits[i].percent / PERCENTS_DIVIDER;\r\n                    uint from = user.deposits[i].start > user.checkpoint ? user.deposits[i].start : user.checkpoint;\r\n                    uint to = user.deposits[i].finish < block.timestamp ? user.deposits[i].finish : block.timestamp;\r\n                    if (from < to) {\r\n                        totalAmount += share * (to - from) / TIME_STEP;\r\n                    }\r\n                    if (block.timestamp > user.deposits[i].finish) {\r\n                        totalAmount += user.deposits[i].amount;\r\n                    }\r\n                } else if (block.timestamp > user.deposits[i].finish) {\r\n                    totalAmount += user.deposits[i].profit + user.deposits[i].amount;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getUserCheckpoint(address userAddress) public view returns (uint) {\r\n        return users[userAddress].checkpoint;\r\n    }\r\n\r\n    function getUserReferrer(address userAddress) public view returns (address) {\r\n        return users[userAddress].referrer;\r\n    }\r\n\r\n    function getUserDownlineCount(address userAddress) public view returns (uint, uint, uint) {\r\n        return (users[userAddress].downlineAddr[0].length, users[userAddress].downlineAddr[1].length, users[userAddress].downlineAddr[2].length);\r\n    }\r\n\r\n    function getUserDownlineData(address userAddress, uint level) public view returns (DownlineRecord[] memory downlineRecord){\r\n        require(level < 100, \"not found level\");\r\n        address[] storage allDownline = users[userAddress].downlineAddr[level];\r\n        downlineRecord = new DownlineRecord[](allDownline.length);\r\n        for(uint i = 0; i < allDownline.length; i++) {\r\n            downlineRecord[i].downlineAddress = allDownline[i];\r\n            downlineRecord[i].totalDeposit = getUserTotalDeposits(allDownline[i]);\r\n            downlineRecord[i].totalWithdrawn = getUserTotalWithdrawn(allDownline[i]);\r\n        }\r\n    }\r\n\r\n    function getUserDownlineDatas(address userAddress) public view returns (DownlineRecord[][] memory downlineRecords) {\r\n        uint maxLevels = 100;\r\n        uint count = 0;\r\n        downlineRecords = new DownlineRecord[][](maxLevels);\r\n        for (uint level = 0; level < maxLevels; level++) {\r\n            address[] storage allDownline = users[userAddress].downlineAddr[level];\r\n            if (allDownline.length > 0) {\r\n                uint downlineCount = allDownline.length;\r\n                DownlineRecord[] memory downlineRecord = new DownlineRecord[](downlineCount);\r\n                for (uint i = 0; i < downlineCount; i++) {\r\n                    downlineRecord[i].downlineAddress = allDownline[i];\r\n                    downlineRecord[i].totalDeposit = getUserTotalDeposits(allDownline[i]);\r\n                    downlineRecord[i].totalWithdrawn = getUserTotalWithdrawn(allDownline[i]);\r\n                }\r\n                downlineRecords[count] = downlineRecord;\r\n                count++;\r\n            }\r\n        }\r\n        assembly {\r\n            mstore(downlineRecords, count)\r\n        }\r\n        return downlineRecords;\r\n    }\r\n\r\n    function getUserDownlinesTotalDeposit(address userAddress) public view returns (uint totalDeposit) {\r\n        for (uint level = 0; level < 3; level++) {\r\n            DownlineRecord[] memory downlineRecords = getUserDownlineData(userAddress, level);\r\n            for (uint i = 0; i < downlineRecords.length; i++) {\r\n                totalDeposit += downlineRecords[i].totalDeposit;\r\n            }\r\n        }\r\n        return totalDeposit;\r\n    }\r\n\r\n    function getUserLevel(address userAddress) public view returns (uint) {\r\n        uint userlevel = 0;\r\n        uint totalDeposit = getUserTotalDeposits(userAddress);\r\n        for (uint i = 0; i < userLevels.length; i++) {\r\n            UserLevel memory currentLevel = userLevels[i];\r\n            if (totalDeposit >= currentLevel.minTotalDeposit * (10**decimals)) {\r\n                userlevel = i + 1;\r\n            }\r\n        }\r\n        return userlevel;\r\n    }\r\n\r\n    function getUserLevelPercent(address userAddress) public view returns (uint) {\r\n        uint userLevel = getUserLevel(userAddress);\r\n        uint addUserLevelPercent = 0;\r\n        if (userLevel >= 1 && userLevel <= 5) {\r\n            addUserLevelPercent = userLevels[userLevel - 1].addUserLevelPercent;\r\n        }\r\n        return addUserLevelPercent;\r\n    }\r\n\r\n    function countTeamLevelUsers(address userAddress, uint level) public view returns (uint) {\r\n        uint count = 0;\r\n        address[] memory downlineAddresses = users[userAddress].downlineAddr[0];\r\n        for (uint i = 0; i < downlineAddresses.length; i++) {\r\n            address downlineAddress = downlineAddresses[i];\r\n            if (getUserTeamLevel(downlineAddress) >= level) {\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    function getUserTeamLevel(address userAddress) public view returns (uint) {\r\n        uint userteamlevel = 0;\r\n        uint downlineCount = users[userAddress].downlineAddr[0].length;\r\n        uint totalDeposit = getUserDownlinesTotalDeposit(userAddress) + getUserTotalDeposits(userAddress);\r\n        for (uint i = 0; i < teamLevels.length; i++) {\r\n            TeamLevel memory currentLevel = teamLevels[i];\r\n            if (\r\n                downlineCount >= currentLevel.downlineCount &&\r\n                countTeamLevelUsers(userAddress, currentLevel.minTeamLevelUsers) >= currentLevel.minTeamLevelUsersCount &&\r\n                totalDeposit >= currentLevel.minTotalDeposit * (10**decimals)\r\n            ) {\r\n                userteamlevel = i + 1;\r\n            }\r\n        }\r\n        return userteamlevel;\r\n    }\r\n\r\n    function getUserTeamLevelPercent(address userAddress) public view returns (uint) {\r\n        uint userTeamLevel = getUserTeamLevel(userAddress);\r\n        uint addTeamLevelPercent = 0;\r\n        if (userTeamLevel >= 1 && userTeamLevel <= 5) {\r\n            addTeamLevelPercent = teamLevels[userTeamLevel - 1].addTeamLevelPercent;\r\n        }\r\n        return addTeamLevelPercent;\r\n    }\r\n\r\n    function getUserTeamLevelBonus(address userAddress) public view returns (uint) {\r\n        uint teamLevelBonus = 0;\r\n        uint userTeamLevel = getUserTeamLevel(userAddress);\r\n        if (userTeamLevel >= 1 && userTeamLevel <= 5) {\r\n            teamLevelBonus = teamLevels[userTeamLevel - 1].addReferralBonus * (10**decimals/100) - users[userAddress].teamLevelBonusWithdrawn;\r\n        }\r\n        return teamLevelBonus;\r\n    }\r\n\r\n    function getUserTeamLevelTotalBonus(address userAddress) public view returns (uint) {\r\n        uint totalTeamLevelBonus = 0;\r\n        uint userTeamLevel = getUserTeamLevel(userAddress);\r\n        if (userTeamLevel >= 1 && userTeamLevel <= 5) {\r\n            totalTeamLevelBonus += teamLevels[userTeamLevel - 1].addReferralBonus * (10**decimals/100);\r\n        }\r\n        return totalTeamLevelBonus;\r\n    }\r\n\r\n    function getUserTeamLevelWithdrawn(address userAddress) public view returns (uint) {\r\n        return users[userAddress].teamLevelBonusWithdrawn;\r\n    }\r\n\r\n    function getUserTotalDeposits(address userAddress) public view returns (uint amount) {\r\n        for (uint i = 0; i < users[userAddress].deposits.length; i++) {\r\n            amount += users[userAddress].deposits[i].amount;\r\n        }\r\n    }\r\n\r\n    function getUserTotalWithdrawn(address userAddress) public view returns (uint) {\r\n        return users[userAddress].totalWithdrawn;\r\n    }\r\n\r\n    function getUserReferralBonus(address userAddress) public view returns (uint) {\r\n        return users[userAddress].bonus;\r\n    }\r\n\r\n    function getUserReferralTotalBonus(address userAddress) public view returns (uint) {\r\n        return users[userAddress].totalBonus;\r\n    }\r\n\r\n    function getUserReferralWithdrawn(address userAddress) public view returns (uint) {\r\n        return users[userAddress].totalBonus - users[userAddress].bonus;\r\n    }\r\n\r\n    function getUserAvailable(address userAddress) public view returns (uint) {\r\n        return getUserReferralBonus(userAddress) + getUserDividends(userAddress) + getUserTeamLevelBonus(userAddress);\r\n    }\r\n\r\n    function getUserAmountOfDeposits(address userAddress) public view returns (uint) {\r\n        return users[userAddress].deposits.length;\r\n    }\r\n\r\n    function getAllInvestedAddresses() public view returns (address[] memory) {\r\n        return investedAddresses;\r\n    }\r\n\r\n    function getUserDepositInfo(address userAddress, uint index) public view returns (uint8 plan, uint percent, uint amount, uint profit, uint start, uint finish) {\r\n        User storage user = users[userAddress];\r\n        plan = user.deposits[index].plan;\r\n        percent = user.deposits[index].percent;\r\n        amount = user.deposits[index].amount;\r\n        profit = user.deposits[index].profit;\r\n        start = user.deposits[index].start;\r\n        finish = user.deposits[index].finish;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"powerwallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"FeePayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Fetch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INVEST_MIN_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MONEYTYPE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PLANTYPE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROJECT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_PERCENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"countTeamLevelUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllInvestedAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"getPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"getPlanInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"getResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"teamLevel\",\"type\":\"uint8\"}],\"name\":\"getTeamLevelInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"downlineCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTeamLevelUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTeamLevelUsersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTotalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addTeamLevelPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addReferralBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserDepositInfo\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDownlineCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"getUserDownlineData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"downlineAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"}],\"internalType\":\"struct BNBStake.DownlineRecord[]\",\"name\":\"downlineRecord\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDownlineDatas\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"downlineAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"}],\"internalType\":\"struct BNBStake.DownlineRecord[][]\",\"name\":\"downlineRecords\",\"type\":\"tuple[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDownlinesTotalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"userLevel\",\"type\":\"uint8\"}],\"name\":\"getUserLevelInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minTotalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addUserLevelPercent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserLevelPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralTotalBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTeamLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTeamLevelBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTeamLevelPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTeamLevelTotalBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTeamLevelWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investedAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ownership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"powerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"quantity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"staking\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startUNIX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"surplus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"teamLevels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"downlineCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTeamLevelUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTeamLevelUsersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTotalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addTeamLevelPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addReferralBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvestors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRefBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"updateCWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Fee\",\"type\":\"uint256\"}],\"name\":\"updateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mode\",\"type\":\"uint256\"}],\"name\":\"updateMoneyType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"updatePWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newRate\",\"type\":\"uint16\"}],\"name\":\"updatePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowest\",\"type\":\"uint256\"}],\"internalType\":\"struct BNBStake.Plan\",\"name\":\"plan\",\"type\":\"tuple\"}],\"name\":\"updatePlanInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mode\",\"type\":\"uint256\"}],\"name\":\"updatePlanType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"percents\",\"type\":\"uint256[]\"}],\"name\":\"updateReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"updateStartTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamLevelIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"downlineCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTeamLevelUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTeamLevelUsersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTotalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addTeamLevelPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addReferralBonus\",\"type\":\"uint256\"}],\"internalType\":\"struct BNBStake.TeamLevel\",\"name\":\"teamLevel\",\"type\":\"tuple\"}],\"name\":\"updateTeamLevelInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userLevelIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minTotalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addUserLevelPercent\",\"type\":\"uint256\"}],\"internalType\":\"struct BNBStake.UserLevel\",\"name\":\"userLevel\",\"type\":\"tuple\"}],\"name\":\"updateUserLevelInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userLevels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minTotalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addUserLevelPercent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamLevelBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamLevelBonusWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalteamLevelBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"verificationBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BNBStake", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e0168323a201824ff83fad44c1b35a9af24b48640000000000000000000000006c4cc95106b0136c147e42a24d6f8b3714bd66d40000000000000000000000000000000000000000000000000000000064f5d208", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c3f287247cfe34a546dd89a16c7b1e241fd09a2b530424ea998894bb97669288"}