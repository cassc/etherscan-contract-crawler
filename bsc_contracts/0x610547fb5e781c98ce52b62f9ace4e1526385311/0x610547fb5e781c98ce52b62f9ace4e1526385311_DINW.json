{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DINW.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract DINW is ERC20, AccessControl{\\n\\n    /**\\n     * @dev \\n     *\\n     * Returns the amount of partial unlocked balance for `wallet`.\\n     *\\n     */\\n    mapping(address => uint256) private _unlockedBalances;\\n\\n    /**\\n     * @dev \\n     *\\n     * Returns the amount limits of locked balance for `wallet` per `month`.\\n     */\\n    mapping(address => uint256[41]) private _lockedBalances;\\n\\n\\n    /**\\n     * @dev\\n     *\\n     * Returns the dates of periods.\\n     */\\n    uint40[41] public unlockPlan;\\n\\n  \\n    /**\\n     * @dev\\n     *\\n     * Emitted when the unlocked of a `value` for an `spender` is set by\\n     * a call to {unlock}. `value` is the unlocked value.\\n     */\\n    event Unlocked(address indexed spender, uint256 value);\\n    /**\\n     * @dev\\n     *\\n     * Emitted when the locked of a `value` for an `spender`  by\\n     * a call to {lock}. `value` is the locked value. Used for sale rounds.\\n     */\\n    event Locked(address indexed spender, uint256 value);\\n   \\n    bytes32 public constant MINTER_ROLE = keccak256('MINTER_ROLE');\\n\\n\\n    constructor(\\n        uint40[41] memory plan, \\n        address[] memory lockWallets,\\n        uint256[] memory lockAmounts,\\n        address[] memory unlockWallets,\\n        uint256[] memory unlockAmounts\\n            ) ERC20('DINO WARS','DINW') {\\n\\n        require(lockWallets.length * 41 == lockAmounts.length , \\\"Amounts data not equal wallets * 41\\\");\\n        require(unlockWallets.length == unlockAmounts.length, \\\"Unlock wallets count and amount count not equal\\\");\\n        \\n        for(uint256 i=0;i<41;i++){\\n            require(plan[i]>block.timestamp,\\\"Invalid data\\\");\\n            if (i>0){\\n                require(plan[i] >= plan[i-1],\\\"Invalid unlock plan data\\\");\\n            }\\n            unlockPlan[i]=plan[i];\\n        }\\n\\n        for(uint256 i=0;i<lockWallets.length;i++){\\n            for(uint256 m=0;m<41;m++){\\n                if (m>0){\\n                    require(lockAmounts[i*41 + m] >= lockAmounts[i*41 + m -1],\\\"Invalid lock amount data\\\");\\n                }\\n                //M11 fix\\n                require(_lockedBalances[lockWallets[i]][m] == 0,\\\"Data already inited\\\");\\n                _lockedBalances[lockWallets[i]][m]=lockAmounts[i*41 + m];\\n            }\\n            emit Locked(lockWallets[i], lockAmounts[i*41 + 40]);\\n        }\\n        \\n        //Token Generation Event\\n        for(uint256 i=0;i<unlockWallets.length;i++){\\n            require(_lockedBalances[unlockWallets[i]][0]>=unlockAmounts[i], \\\"No enough tokens\\\");\\n            _unlock(unlockWallets[i],unlockAmounts[i]);    \\n        }\\n        _setupRole(MINTER_ROLE, msg.sender);\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    //H01 fix\\n    function mint(address to, uint256 amount) external onlyRole(MINTER_ROLE) {\\n        _mint(to, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    //H01 fix\\n    function burn(uint256 amount) external onlyRole(MINTER_ROLE) {\\n        _burn(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev\\n     *\\n     * Locks `amount` from `source` wallet to `target` wallet. \\n     * Moves locked tokens from `source` wallet to `target` proportionally month by month from last amount of `source` at 40th month.\\n     * Emits an {Unlocked} event indicating the unlocked balance `amount` for `source`. \\n     * Emits an {Locked} event indicating the locked balance `amount` for `target`. \\n     *\\n     */\\n    // H07 fix - no _unlock calls\\n    // H09 fix - no transfers\\n    // M10 fix - no denominators\\n\\n    function lock(address target, uint256[] calldata lockAmounts) external onlyRole(MINTER_ROLE){\\n        require(41 == lockAmounts.length , \\\"Invalid lock data\\\");\\n        for(uint256 m=0;m<41;m++){\\n            if (m>0){\\n                require(lockAmounts[ m] >= lockAmounts[m -1],\\\"Invalid lock user data\\\");\\n            }\\n            _lockedBalances[target][m]=lockAmounts[m];\\n        }\\n        emit Locked(target, lockAmounts[40]);\\n    }\\n\\n     /**\\n     * @dev\\n     *\\n     * Emits an {Unlocked} event indicating the unlocked balance. \\n     * Unlock vested tokens and add them to the `msg.sender` balance.\\n     *\\n     * Requirements:\\n     *\\n     * - `amount` available should be checked in `availLockedTokens`.\\n     */\\n    function unlock(uint256 amount) external {\\n        require( availableLockedTokens(msg.sender, uint40(block.timestamp)) >=amount, \\\"No enough tokens\\\");\\n        _unlock(msg.sender, amount);\\n    }\\n    \\n    /**\\n     * @dev\\n     *\\n     * Returns the available `amount` of tokens of `wallet` for exact time `timestamp`.\\n     *\\n     */\\n    function availableLockedTokens(address wallet, uint40 timestamp) public view returns(uint256){\\n        if (_lockedBalances[wallet][40] == 0) return 0;\\n        if (timestamp < unlockPlan[0]) return 0;\\n        for(uint40 t=40;t>0;t--){\\n            if (timestamp >= unlockPlan[t]){\\n                if (_lockedBalances[wallet][t] < _unlockedBalances[wallet])\\n                    return 0;\\n                return _lockedBalances[wallet][t] - _unlockedBalances[wallet];\\n            }\\n        }\\n        if (_lockedBalances[wallet][0] < _unlockedBalances[wallet])\\n              return 0;\\n        return _lockedBalances[wallet][0] - _unlockedBalances[wallet];\\n    }\\n    \\n    function _unlock(address wallet,uint256 amount) internal{\\n        _unlockedBalances[wallet]+=amount;\\n        _mint(wallet, amount);\\n        emit Unlocked(wallet, amount);\\n    }\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint40[41]\",\"name\":\"plan\",\"type\":\"uint40[41]\"},{\"internalType\":\"address[]\",\"name\":\"lockWallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lockAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"unlockWallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unlockAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"timestamp\",\"type\":\"uint40\"}],\"name\":\"availableLockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"lockAmounts\",\"type\":\"uint256[]\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unlockPlan\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DINW", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000064c820d00000000000000000000000000000000000000000000000000000000064f0ff500000000000000000000000000000000000000000000000000000000065188c5000000000000000000000000000000000000000000000000000000000654178e000000000000000000000000000000000000000000000000000000000656905e0000000000000000000000000000000000000000000000000000000006591e4600000000000000000000000000000000000000000000000000000000065bac2e00000000000000000000000000000000000000000000000000000000065e0fe60000000000000000000000000000000000000000000000000000000006609ced00000000000000000000000000000000000000000000000000000000066315bd000000000000000000000000000000000000000000000000000000000665a3a50000000000000000000000000000000000000000000000000000000006681c7500000000000000000000000000000000000000000000000000000000066aaa5d00000000000000000000000000000000000000000000000000000000066d384500000000000000000000000000000000000000000000000000000000066fb1150000000000000000000000000000000000000000000000000000000006723fde000000000000000000000000000000000000000000000000000000000674b8ae0000000000000000000000000000000000000000000000000000000006774696000000000000000000000000000000000000000000000000000000000679d47e00000000000000000000000000000000000000000000000000000000067c231e00000000000000000000000000000000000000000000000000000000067eb02500000000000000000000000000000000000000000000000000000000068128f5000000000000000000000000000000000000000000000000000000000683b6dd0000000000000000000000000000000000000000000000000000000006862fad000000000000000000000000000000000000000000000000000000000688bd9500000000000000000000000000000000000000000000000000000000068b4b7d00000000000000000000000000000000000000000000000000000000068dc44d0000000000000000000000000000000000000000000000000000000006905316000000000000000000000000000000000000000000000000000000000692cbe600000000000000000000000000000000000000000000000000000000069559ce000000000000000000000000000000000000000000000000000000000697e7b600000000000000000000000000000000000000000000000000000000069a365600000000000000000000000000000000000000000000000000000000069cc35d00000000000000000000000000000000000000000000000000000000069f3c2d0000000000000000000000000000000000000000000000000000000006a1ca150000000000000000000000000000000000000000000000000000000006a442e50000000000000000000000000000000000000000000000000000000006a6d0cd0000000000000000000000000000000000000000000000000000000006a95eb50000000000000000000000000000000000000000000000000000000006abd7850000000000000000000000000000000000000000000000000000000006ae664e0000000000000000000000000000000000000000000000000000000006b0df1e000000000000000000000000000000000000000000000000000000000000005a000000000000000000000000000000000000000000000000000000000000006e0000000000000000000000000000000000000000000000000000000000000352000000000000000000000000000000000000000000000000000000000000035c00000000000000000000000000000000000000000000000000000000000000009000000000000000000000000b8d0e68378b9d0eaacee05559f815ce6392ed62b0000000000000000000000006a8ee38187b73935c6dce907f44e2b3f03199ddc000000000000000000000000b58724e715b5598eccc754a840086e14687f7dd4000000000000000000000000eedd1c9c83ea498f27dfe7f369114ab1356d6f7a0000000000000000000000000e5d10e9ef3e364f5b5248507bf1f5df073486b2000000000000000000000000b08b567c7122b5d0eb6c8cf392313a22ee53541f000000000000000000000000429ad042f31e25efa826741a70c333578ded71cc000000000000000000000000c7a4b22417e487d7f35ab1ac76d5349e145390c000000000000000000000000034ccb61f3681ec897374cb8d642e758a52d8fbffb368df5140000000000000000000000000000000000000000000000005330d215b66842c40000000000000000000000000000000000000000000000007cc94210ecf637d8000000000000000000000000000000000000000000000000a661a42b6cd08588000000000000000000000000000000000000000000000000cffa1426a35e7a9c000000000000000000000000000000000000000000000000f99276412338c84c000000000000000000000000000000000000000000000001232ae63c59c6bd600000000000000000000000000000000000000000000000014cc356379054b274000000000000000000000000000000000000000000000001765bb852102f00240000000000000000000000000000000000000000000000019ff4284d46bcf538000000000000000000000000000000000000000000000001c98c8a67c69742e8000000000000000000000000000000000000000000000001f324fa62fd2537fc0000000000000000000000000000000000000000000000021cbd5c7d7cff85ac0000000000000000000000000000000000000000000000024655cc78b38d7ac00000000000000000000000000000000000000000000000026fee3c73ea1b6fd400000000000000000000000000000000000000000000000299869e8e69f5bd84000000000000000000000000000000000000000000000002c31f0e89a083b298000000000000000000000000000000000000000000000002ecb770a4205e0048000000000000000000000000000000000000000000000003164fe09f56ebf55c0000000000000000000000000000000000000000000000033fe842b9d6c6430c0000000000000000000000000000000000000000000000036980b2b50d543820000000000000000000000000000000000000000000000003931922b043e22d34000000000000000000000000000000000000000000000003bcb184cac3bc7ae4000000000000000000000000000000000000000000000003e649f4c5fa4a6ff80000000000000000000000000000000000000000000000040fe256e07a24bda8000000000000000000000000000000000000000000000004397ac6dbb0b2b2bc000000000000000000000000000000000000000000000004631328f6308d006c0000000000000000000000000000000000000000000000048cab98f1671af580000000000000000000000000000000000000000000000000130ee8e717904440000000000000000000000000000000000000000000000000130ee8e717904440000000000000000000000000000000000000000000000000130ee8e717904440000000000000000000000000000000000000000000000000130ee8e717904440000000000000000000000000000000000000000000000000809b9680afdb9a74000000000000000000000000000000000000000000000000b0892dba76ee882c000000000000000000000000000000000000000000000000e076b713874dce80000000000000000000000000000000000000000000000001472a9e29bf2c93a00000000000000000000000000000000000000000000000017a8491b4db1bf630000000000000000000000000000000000000000000000001adde853ff70b58c000000000000000000000000000000000000000000000000214926c562eea1de000000000000000000000000000000000000000000000000247ec5fe14ad980700000000000000000000000000000000000000000000000027b46536c66c8e3000000000000000000000000000000000000000000000000027b46536c66c8e3000000000000000000000000000000000000000000000000027b46536c66c8e3000000000000000000000000000000000000000000000000027b46536c66c8e3000000000000000000000000000000000000000000000000027b46536c66c8e3000000000000000000000000000000000000000000000000027b46536c66c8e3000000000000000000000000000000000000000000000000027b46536c66c8e3000000000000000000000000000000000000000000000000027b46536c66c8e3000000000000000000000000000000000000000000000000027b46536c66c8e3000000000000000000000000000000000000000000000000027b46536c66c8e3000000000000000000000000000000000000000000000000027b46536c66c8e3000000000000000000000000000000000000000000000000027b46536c66c8e3000000000000000000000000000000000000000000000000027b46536c66c8e3000000000000000000000000000000000000000000000000027b46536c66c8e3000000000000000000000000000000000000000000000000027b46536c66c8e3000000000000000000000000000000000000000000000000027b46536c66c8e3000000000000000000000000000000000000000000000000027b46536c66c8e3000000000000000000000000000000000000000000000000027b46536c66c8e3000000000000000000000000000000000000000000000000027b46536c66c8e3000000000000000000000000000000000000000000000000027b46536c66c8e3000000000000000000000000000000000000000000000000027b46536c66c8e3000000000000000000000000000000000000000000000000027b46536c66c8e3000000000000000000000000000000000000000000000000027b46536c66c8e3000000000000000000000000000000000000000000000000027b46536c66c8e3000000000000000000000000000000000000000000000000027b46536c66c8e3000000000000000000000000000000000000000000000000027b46536c66c8e3000000000000000000000000000000000000000000000000027b46536c66c8e3000000000000000000000000000000000000000000000000027b46536c66c8e3000000000000000000000000000000000000000000000000027b46536c66c8e30000000000000000000000000000000000000000000000000059ff4bd17d7e97a000000000000000000000000000000000000000000000000059ff4bd17d7e97a000000000000000000000000000000000000000000000000117fdcc59cf9acef8000000000000000000000000000000000000000000000001d5fc4ce221b7065000000000000000000000000000000000000000000000000293fadb4b2a86e50c00000000000000000000000000000000000000000000000351f95bd37ca31c640000000000000000000000000000000000000000000000040ff7dc5bcebf53bc000000000000000000000000000000000000000000000004cdf65ce420db8b140000000000000000000000000000000000000000000000058bf4eb4d29ab69d000000000000000000000000000000000000000000000000649f36bd57bc7a12800000000000000000000000000000000000000000000000707f1ec5dcde3d88000000000000000000000000000000000000000000000000707f1ec5dcde3d88000000000000000000000000000000000000000000000000707f1ec5dcde3d88000000000000000000000000000000000000000000000000707f1ec5dcde3d88000000000000000000000000000000000000000000000000707f1ec5dcde3d88000000000000000000000000000000000000000000000000707f1ec5dcde3d88000000000000000000000000000000000000000000000000707f1ec5dcde3d88000000000000000000000000000000000000000000000000707f1ec5dcde3d88000000000000000000000000000000000000000000000000707f1ec5dcde3d88000000000000000000000000000000000000000000000000707f1ec5dcde3d88000000000000000000000000000000000000000000000000707f1ec5dcde3d88000000000000000000000000000000000000000000000000707f1ec5dcde3d88000000000000000000000000000000000000000000000000707f1ec5dcde3d88000000000000000000000000000000000000000000000000707f1ec5dcde3d88000000000000000000000000000000000000000000000000707f1ec5dcde3d88000000000000000000000000000000000000000000000000707f1ec5dcde3d88000000000000000000000000000000000000000000000000707f1ec5dcde3d88000000000000000000000000000000000000000000000000707f1ec5dcde3d88000000000000000000000000000000000000000000000000707f1ec5dcde3d88000000000000000000000000000000000000000000000000707f1ec5dcde3d88000000000000000000000000000000000000000000000000707f1ec5dcde3d88000000000000000000000000000000000000000000000000707f1ec5dcde3d88000000000000000000000000000000000000000000000000707f1ec5dcde3d88000000000000000000000000000000000000000000000000707f1ec5dcde3d88000000000000000000000000000000000000000000000000707f1ec5dcde3d88000000000000000000000000000000000000000000000000707f1ec5dcde3d88000000000000000000000000000000000000000000000000707f1ec5dcde3d88000000000000000000000000000000000000000000000000707f1ec5dcde3d88000000000000000000000000000000000000000000000000707f1ec5dcde3d88000000000000000000000000000000000000000000000000707f1ec5dcde3d88000000000000000000000000000000000000000000000000707f1ec5dcde3d8800000000000000000000000000000000000000000000000001fc3842bd1f071c00000000000000000000000000000000000000000000000004f68ca6d8cd91c600000000000000000000000000000000000000000000000007f0e10af47c1c700000000000000000000000000000000000000000000000000aeb356f102aa71a0000000000000000000000000000000000000000000000000de589d32bd931c400000000000000000000000000000000000000000000000010dfde374787bc6e00000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000006f2c4e995ec98e200000000000000000000000000000000000000000000000006f2c4e995ec98e200000000000000000000000000000000000000000000000006f2c4e995ec98e20000000000000000000000000000000000000000000000000e6fe2ce8631191a40000000000000000000000000000000000000000000000015ed019181e0d3c8c000000000000000000000000000000000000000000000001beab2bca3ecbc9340000000000000000000000000000000000000000000000021e864c5d163dfd40000000000000000000000000000000000000000000000002c645c1e5e198ee7c0000000000000000000000000000000000000000000000033e17a034e5e0f200000000000000000000000000000000000000000000000003b5e97e83ea28f5840000000000000000000000000000000000000000000000042dbb6ab3a524a06c000000000000000000000000000000000000000000000004a58d4902a96ca3f00000000000000000000000000000000000000000000000051d5f2751adb4a7740000000000000000000000000000000000000000000000059531138168b0525c0000000000000000000000000000000000000000000000060d02f1d06cf855e000000000000000000000000000000000000000000000000684d4d01f71405964000000000000000000000000000000000000000000000006fca6bc4f2c3c044c00000000000000000000000000000000000000000000000774789a9e308407d0000000000000000000000000000000000000000000000007ec4a78ed34cc0b54000000000000000000000000000000000000000000000008641c651cefc7b63c000000000000000000000000000000000000000000000008dbee436bf40fb9c000000000000000000000000000000000000000000000000953c021baf857bd44000000000000000000000000000000000000000000000009cb920deab353682c00000000000000000000000000000000000000000000000a4363ec39b79b6bb000000000000000000000000000000000000000000000000abb35ca88bbe36f3400000000000000000000000000000000000000000000000b3307b6b876df1a1c00000000000000000000000000000000000000000000000baad995077b271da000000000000000000000000000000000000000000000000c22ab73567f6f212400000000000000000000000000000000000000000000000c9a7d5f863a6acc0c00000000000000000000000000000000000000000000000d124f3dd53eb2cf9000000000000000000000000000000000000000000000000d8a211c2442fad31400000000000000000000000000000000000000000000000e01f30853fdf67dfc00000000000000000000000000000000000000000000000e79c4e6a3023e818000000000000000000000000000000000000000000000000e79c4e6a3023e818000000000000000000000000000000000000000000000000e79c4e6a3023e818000000000000000000000000000000000000000000000000e79c4e6a3023e818000000000000000000000000000000000000000000000000e79c4e6a3023e818000000000000000000000000000000000000000000000000e79c4e6a3023e818000000000000000000000000000000000000000000000000e79c4e6a3023e818000000000000000000000000000000000000000000000000e79c4e6a3023e818000000000000000000000000000000000000000000000000e79c4e6a3023e818000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c3bff14ef7d663400000000000000000000000000000000000000000000000038780c0a95ae73cc00000000000000000000000000000000000000000000000054b40b1f852bda0000000000000000000000000000000000000000000000000070f00a3474a940340000000000000000000000000000000000000000000000008d2c172a1ada4dcc000000000000000000000000000000000000000000000000a968163f0a57b400000000000000000000000000000000000000000000000000c5a41553f9d51a34000000000000000000000000000000000000000000000000e1e02249a00627cc000000000000000000000000000000000000000000000000fe1c215e8f838e000000000000000000000000000000000000000000000000011a5820737f00f43400000000000000000000000000000000000000000000000136942d69253201cc00000000000000000000000000000000000000000000000152d02c7e14af68000000000000000000000000000000000000000000000000016f0c2b93042cce340000000000000000000000000000000000000000000000018b483888aa5ddbcc000000000000000000000000000000000000000000000001a784379d99db4200000000000000000000000000000000000000000000000001c3c036b28958a834000000000000000000000000000000000000000000000001dffc43a82f89b5cc000000000000000000000000000000000000000000000001fc3842bd1f071c00000000000000000000000000000000000000000000000002187441d20e84823400000000000000000000000000000000000000000000000234b04ec7b4b58fcc00000000000000000000000000000000000000000000000250ec4ddca432f6000000000000000000000000000000000000000000000000026d284cf193b05c34000000000000000000000000000000000000000000000002896459e739e169cc000000000000000000000000000000000000000000000002a5a058fc295ed000000000000000000000000000000000000000000000000002c1dc581118dc3634000000000000000000000000000000000000000000000002de186506bf0d43cc000000000000000000000000000000000000000000000002fa54641bae8aaa00000000000000000000000000000000000000000000000003169063309e08103400000000000000000000000000000000000000000000000332cc702644391dcc0000000000000000000000000000000000000000000000034f086f3b33b684000000000000000000000000000000000000000000000000034f086f3b33b684000000000000000000000000000000000000000000000000034f086f3b33b684000000000000000000000000000000000000000000000000034f086f3b33b684000000000000000000000000000000000000000000000000034f086f3b33b684000000000000000000000000000000000000000000000000034f086f3b33b684000000000000000000000000000000000000000000000000034f086f3b33b684000000000000000000000000000000000000000000000000034f086f3b33b68400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a784379d99db42000000000000000000000000000000000000000000000000034f086f3b33b68400000000000000000000000000000000000000000000000004f68ca6d8cd91c6000000000000000000000000000000000000000000000000069e10de76676d08000000000000000000000000000000000000000000000000084595161401484a00000000000000000000000000000000000000000000000009ed194db19b238c0000000000000000000000000000000000000000000000000b949d854f34fece0000000000000000000000000000000000000000000000000d3c21bcecceda100000000000000000000000000000000000000000000000000ee3a5f48a68b552000000000000000000000000000000000000000000000000108b2a2c280290940000000000000000000000000000000000000000000000001232ae63c59c6bd600000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329b6336471800000000000000000000000000000000000000000000000013da329ba784379d99db42000000000000000000000000000000000000000000000000034f086f3b33b68400000000000000000000000000000000000000000000000004f68ca6d8cd91c6000000000000000000000000000000000000000000000000069e10de76676d08000000000000000000000000000000000000000000000000084595161401484a00000000000000000000000000000000000000000000000009ed194db19b238c0000000000000000000000000000000000000000000000000b949d854f34fece0000000000000000000000000000000000000000000000000d3c21bcecceda100000000000000000000000000000000000000000000000000ee3a5f48a68b552000000000000000000000000000000000000000000000000108b2a2c280290940000000000000000000000000000000000000000000000001232ae63c59c6bd600000000000000000000000000000000000000000000000013da329b633647180000000000000000000000000000000000000000000000001581b6d300d0225a00000000000000000000000000000000000000000000000017293b0a9e69fd9c00000000000000000000000000000000000000000000000018d0bf423c03d8de0000000000000000000000000000000000000000000000001a784379d99db4200000000000000000000000000000000000000000000000001c1fc7b177378f620000000000000000000000000000000000000000000000001dc74be914d16aa40000000000000000000000000000000000000000000000001f6ed020b26b45e6000000000000000000000000000000000000000000000000211654585005212800000000000000000000000000000000000000000000000022bdd88fed9efc6a00000000000000000000000000000000000000000000000024655cc78b38d7ac000000000000000000000000000000000000000000000000260ce0ff28d2b2ee00000000000000000000000000000000000000000000000027b46536c66c8e30000000000000000000000000000000000000000000000000295be96e640669720000000000000000000000000000000000000000000000002b036da601a044b40000000000000000000000000000000000000000000000002caaf1dd9f3a1ff60000000000000000000000000000000000000000000000002e5276153cd3fb3800000000000000000000000000000000000000000000000009ed194db19b238c00000000000000000000000000000000000000000000000009ed194db19b238c00000000000000000000000000000000000000000000000009ed194db19b238c00000000000000000000000000000000000000000000000009ed194db19b238c0000000000000000000000000000000000000000000000000d711243e08215784000000000000000000000000000000000000000000000000f330f2dfdab2ba980000000000000000000000000000000000000000000000010f50b3a0f690764800000000000000000000000000000000000000000000000147904303e4ff950c00000000000000000000000000000000000000000000000163b011a5b790f8200000000000000000000000000000000000000000000000017fcfd266d36eb3d0000000000000000000000000000000000000000000000001a54f82b3357ce5dc000000000000000000000000000000000000000000000001cacf40e04e3ebf4c000000000000000000000000000000000000000000000001f04ef12cb04cf15800000000000000000000000000000000000000000000000215cea179125b23640000000000000000000000000000000000000000000000023b4e5fa62b1cfcd400000000000000000000000000000000000000000000000260ce0ff28d2b2ee0000000000000000000000000000000000000000000000002864dc03eef3960ec000000000000000000000000000000000000000000000002abcd7e6c07fb3a5c000000000000000000000000000000000000000000000002d14d2eb86a096c68000000000000000000000000000000000000000000000002f6ccdf04cc179e740000000000000000000000000000000000000000000000031c4c9d31e4d977e400000000000000000000000000000000000000000000000341cc4d7e46e7a9f0000000000000000000000000000000000000000000000003674bfdcaa8f5dbfc0000000000000000000000000000000000000000000000038ccbbbf7c1b7b56c000000000000000000000000000000000000000000000003b24b6c4423c5e778000000000000000000000000000000000000000000000003d7cb1c9085d41984000000000000000000000000000000000000000000000003fd4adabd9e95f2f400000000000000000000000000000000000000000000000422ca8b0a00a4250000000000000000000000000000000000000000000000000422ca8b0a00a4250000000000000000000000000000000000000000000000000422ca8b0a00a4250000000000000000000000000000000000000000000000000422ca8b0a00a4250000000000000000000000000000000000000000000000000422ca8b0a00a4250000000000000000000000000000000000000000000000000422ca8b0a00a4250000000000000000000000000000000000000000000000000422ca8b0a00a4250000000000000000000000000000000000000000000000000422ca8b0a00a4250000000000000000000000000000000000000000000000000422ca8b0a00a4250000000000000000000000000000000000000000000000000422ca8b0a00a4250000000000000000000000000000000000000000000000000422ca8b0a00a4250000000000000000000000000000000000000000000000000422ca8b0a00a4250000000000000000000000000000000000000000000000000422ca8b0a00a4250000000000000000000000000000000000000000000000000422ca8b0a00a4250000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000b58724e715b5598eccc754a840086e14687f7dd4000000000000000000000000eedd1c9c83ea498f27dfe7f369114ab1356d6f7a0000000000000000000000000e5d10e9ef3e364f5b5248507bf1f5df073486b200000000000000000000000034ccb61f3681ec897374cb8d642e758a52d8fb7400000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}