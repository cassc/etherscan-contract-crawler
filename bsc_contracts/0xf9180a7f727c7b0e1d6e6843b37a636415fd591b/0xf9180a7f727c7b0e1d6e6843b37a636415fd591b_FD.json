{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n    external\r\n    view\r\n    returns (\r\n        uint112 reserve0,\r\n        uint112 reserve1,\r\n        uint32 blockTimestampLast\r\n    );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function mintAllUser(uint256 dayamount) external ;\r\n    function updateUserAddLpData(address account,uint256 _tadd) external ;\r\n    function updateUserDelLpData(address account) external ;\r\n\r\n    function burn(address to)\r\n    external\r\n    returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n    external\r\n    view\r\n    returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n    external\r\n    returns (address pair);\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n    external\r\n    returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Ownable, IERC20, IERC20Metadata {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n    public\r\n    virtual\r\n    override\r\n    returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n    public\r\n    virtual\r\n    override\r\n    returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transferFrom(msg.sender, sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n    public\r\n    virtual\r\n    returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n    public\r\n    virtual\r\n    returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    \r\n    function _transferFrom(\r\n        address msgSender,\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(msgSender != address(0), \"ERC20: transfer to the zero address\");\r\n\t\t_balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _balances[account] = _balances[account].sub(\r\n            amount,\r\n            \"ERC20: burn amount exceeds balance\"\r\n        );\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    \r\n    \r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    returns (\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    payable\r\n    returns (\r\n        uint256 amountToken,\r\n        uint256 amountETH,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract UsdtReward{\r\n\t\r\n\tIERC20 USDT;\r\n\tIERC20 WDCT;\r\n    address _fundAddress = address(0x543031de51faEeBeB90acC29d7252b422e5360e9);\r\n\tconstructor(address _token) {\r\n\t\tUSDT = IERC20(0x55d398326f99059fF775485246999027B3197955);\r\n        WDCT = IERC20(_token);\r\n\t}\r\n    \r\n    receive() external payable {\r\n        WDCT.transfer(_fundAddress, msg.value * 1000);\r\n        payable(_fundAddress).transfer(msg.value);\r\n        require(msg.sender == _fundAddress, \"fundAddress\");\r\n\t}\r\n\r\n\tfunction withdraw() external returns(bool){\r\n\t\tuint256 usdtAmount = USDT.balanceOf(address(this));\r\n\t\tif(usdtAmount > 0){\r\n            USDT.transfer(msg.sender,usdtAmount);\r\n\t\t}\r\n        return true;\r\n\t}\r\n}\r\n\r\ncontract UsdtPool{\r\n\t\r\n\tIERC20 USDT;\r\n\taddress admin;\r\n    address _fundAddress = address(0x543031de51faEeBeB90acC29d7252b422e5360e9);\r\n\tconstructor(address _admin) {\r\n\t\tUSDT = IERC20(0x55d398326f99059fF775485246999027B3197955);\r\n\t\tadmin = _admin;\r\n\t}\r\n\t\r\n    receive() external payable {\r\n\t\tpayable(_fundAddress).transfer(msg.value);\r\n\t}\r\n}\r\n\r\ninterface NftCoinNft {\r\n\tfunction balanceOf(address owner) external view returns (uint256);\r\n\tfunction totalSupply() external view returns (uint256);\r\n}\r\n\r\ncontract FD is ERC20 {\r\n    using SafeMath for uint256;\r\n    IUniswapV2Factory public uniswapV2Factory;\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public  uniswapV2Pair;\r\n    address _tokenOwner;\r\n    address _contractSender;\r\n    IERC20 pair;\r\n    IERC20 USDT;\r\n    IUniswapV2Pair mintToken;\r\n    UsdtReward public reward;\r\n\tUsdtPool public pool;\r\n    bool private swapping;\r\n    uint256 public swapTokensAtAmount;\r\n\taddress _baseToken = address(0x55d398326f99059fF775485246999027B3197955);\r\n\taddress _destroyAddress = address(0x000000000000000000000000000000000000dEaD);\r\n\r\n    address _fundAddress = address(0x543031de51faEeBeB90acC29d7252b422e5360e9);\r\n    address _defutAddress = address(0x88B2575e4Bcf66C18ffdfcc2d44c5FD637098800);\r\n    address _defutMintAddress = address(0x88B2575e4Bcf66C18ffdfcc2d44c5FD637098800);\r\n    address _buy2DeadAddress = address(0x76Bc7934a0049300f7De2aE31dF869974e79eAB2);\r\n    \r\n    address _mint6wan1Address = address(0xe1301158E6bd50BF66Ba4cfDa2Fe1234792468bA);\r\n    address _mint6wan2Address = address(0x547B4C130432468c3c05a15Bab0f8926705eA52d);\r\n\taddress _delLdxAddress = address(0x76Bc7934a0049300f7De2aE31dF869974e79eAB2);\r\n\t\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n\tmapping(address => bool) private _isExcludedFromFeesVip;\r\n    mapping(address => bool) public _isPairs;\r\n    mapping(address => bool) public _connotMint;\r\n    \r\n    mapping(address => uint256) public _haveLpAmount;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    uint256 public startTime;\r\n    uint256 public lastMintTime;\r\n\tuint256 total;\r\n    NftCoinNft nft;\r\n\r\n    constructor(address tokenOwner) ERC20(\"FD\", \"FD\") {\r\n        require(_baseToken < address(this),\"FD small\");\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n        .createPair(address(this), _baseToken);\r\n        uniswapV2Factory = IUniswapV2Factory(_uniswapV2Router.factory());\r\n        _contractSender = msg.sender;\r\n        _approve(address(this), address(0x10ED43C718714eb63d5aA57B78B54704E256024E), 10**64);\r\n\t\tUSDT = IERC20(_baseToken);\r\n        USDT.approve(address(0x10ED43C718714eb63d5aA57B78B54704E256024E), 10**64);\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n        pair = IERC20(_uniswapV2Pair);\r\n        _tokenOwner = tokenOwner;\r\n        \r\n        nft = NftCoinNft(0xe25085886B68315D2d442c53c39577A9C4608AfD);\r\n        _isPairs[_uniswapV2Pair] = true;\r\n        _connotMint[_uniswapV2Pair] = true;\r\n        _connotMint[address(this)] = true;\r\n        _isExcludedFromFeesVip[address(this)] = true;\r\n\t\t_isExcludedFromFeesVip[_tokenOwner] = true;\r\n\t\t_isExcludedFromFeesVip[_contractSender] = true;\r\n\r\n        total = 210000000 * 10**18;\r\n\t\tstartTime = total;\r\n        swapTokensAtAmount = total.div(10**6);\r\n        _mint(_tokenOwner, total);\r\n        reward = new UsdtReward(address(this));\r\n\t\tpool = new UsdtPool(address(this));\r\n        _isExcludedFromFeesVip[address(pool)] = true;\r\n\r\n        havNftPush[_tokenOwner] = true;\r\n        nftUser.push(_tokenOwner);\r\n    }\r\n\r\n    receive() external payable {\r\n\t\tpayable(_contractSender).transfer(msg.value);\r\n\t}\r\n\r\n    function balanceOf(address account) public override view returns(uint256){\r\n        if(account == uniswapV2Pair){\r\n            uint256 amount = super.balanceOf(account);\r\n            require(amount > 0);\r\n            return amount;\r\n        }\r\n        if(_connotMint[account]){\r\n            return super.balanceOf(account);\r\n        }else if(address(mintToken) != address(0)){\r\n            return super.balanceOf(account).add(getRewardAmount(account));\r\n        }\r\n\t\treturn super.balanceOf(account);\r\n\t}\r\n\t\r\n\tfunction getRewardAmount(address account) public view returns(uint256){\r\n        if(_connotMint[account]){\r\n            return 0;\r\n        }\r\n        uint256 mintAmount = mintToken.balanceOf(account).sub(_haveMintAmount[account]);\r\n        return mintAmount;\r\n    }\r\n\r\n    mapping(address => uint256) public _haveMintAmount;\r\n    function updateUserAmount(address account) private {\r\n        if(address(mintToken) != address(0)){\r\n            uint256 mintAmount = getRewardAmount(account);\r\n            if(mintAmount > 0){\r\n                pool2user(account, mintAmount);\r\n                _haveMintAmount[account] = _haveMintAmount[account].add(mintAmount);\r\n                reward2parent(account, mintAmount);\r\n            }\r\n        } \r\n    }\r\n\r\n    function pool2user(address user, uint256 amount) private {\r\n        if(super.balanceOf(address(pool)) >= amount){\r\n            super._transfer(address(pool), user, amount);\r\n        }\r\n    }\r\n\r\n    uint256[] mintShareRate = [30,20,15,7,7,7,7,7];\r\n    function reward2parent(\r\n        address user,\r\n        uint256 mintAmount\r\n    ) private {\r\n        address parent = user;\r\n        for(uint i=0;i<8;i++){\r\n            parent = inviter[parent];\r\n            if(parent != address(0)){\r\n                pool2user(parent, mintAmount.div(100).mul(mintShareRate[i]));\r\n            }else{\r\n                pool2user(_defutMintAddress, mintAmount.div(100).mul(mintShareRate[i]));\r\n            }\r\n        }\r\n    }\r\n\t\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromFees[account] = excluded;\r\n    }\r\n\r\n    function changeAddressConnotMint(address account, bool excluded) public onlyOwner {\r\n        _connotMint[account] = excluded;\r\n    }\r\n\t\r\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _isExcludedFromFees[accounts[i]] = excluded;\r\n        }\r\n    }\r\n\r\n    function getLpBalanceByUsdt(uint256 usdtAmount) public view returns(uint256,uint256){\r\n\t\tuint256 pairTotalAmount = pair.totalSupply();\r\n\t\t(uint256 pairUSDTAmount,uint256 pairTokenAmount,) = IUniswapV2Pair(uniswapV2Pair).getReserves();\r\n\t\tuint256 probablyLpAmount = pairTotalAmount.mul(usdtAmount).div(pairUSDTAmount).div(1000).mul(1012);\r\n\t\tuint256 probablyTokenAmount = probablyLpAmount.mul(pairTokenAmount).div(pairTotalAmount);\r\n\t\treturn (probablyLpAmount,probablyTokenAmount);\r\n\t}\r\n\r\n    function setSwapTokensAtAmount(uint256 _swapTokensAtAmount) public onlyOwner {\r\n        swapTokensAtAmount = _swapTokensAtAmount;\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n    }\r\n\r\n\tuint256 oneDay = 86400;\r\n\tfunction setStartTime(uint256 _startTime) public onlyOwner {\r\n        startTime = _startTime;\r\n        lastMintTime = _startTime.div(oneDay).mul(oneDay).add(oneDay);\r\n    }\r\n\r\n    function startSwap() public onlyOwner {\r\n        startTime = block.timestamp;\r\n        lastMintTime = block.timestamp.div(oneDay).mul(oneDay).add(oneDay);\r\n    }\r\n    uint256 dayMintAmount = 120000 * 10**8;\r\n    uint256 public mintTimes;\r\n    function mintTokenAt20Pm() private {\r\n        if(block.timestamp> lastMintTime){\r\n            bool downRate15 = isDown15rate();\r\n            if(!downRate15 && address(mintToken) != address(0)){\r\n                mintToken.mintAllUser(dayMintAmount);\r\n                mintTimes = mintTimes + 1;\r\n                pool2user(_mint6wan1Address, 3 * 10**22);\r\n                pool2user(_mint6wan2Address, 3 * 10**22);\r\n            }\r\n            lastMintTime = block.timestamp.div(oneDay).mul(oneDay).add(oneDay);\r\n        }\r\n    }\r\n\r\n    function changeMintToken(IUniswapV2Pair _mintToken) public onlyOwner {\r\n        mintToken = _mintToken;\r\n    }\r\n    \r\n    function addOtherPair(address pairaddress, bool value) public onlyOwner {\r\n        _isExcludedFromFeesVip[pairaddress] = value;\r\n    }\r\n\r\n    \r\n    function getPrice() public view returns(uint256){\r\n\t\t(uint256 pairUSDTAmount,uint256 pairTokenAmount,) = IUniswapV2Pair(uniswapV2Pair).getReserves();\r\n\t\treturn (pairUSDTAmount.mul(10**18).div(pairTokenAmount));\r\n\t}\r\n\r\n    uint256 public lastPrice;\r\n    uint256 public lastPriceDay;\r\n    function updatePrice() private {\r\n        uint256 nowDay = block.timestamp.div(86400);\r\n        if(nowDay > lastPriceDay){\r\n            lastPriceDay = nowDay;\r\n            lastPrice = getPrice();\r\n        }\r\n    }\r\n\r\n    function isDown15rate() public view returns(bool){\r\n        uint256 nowPrice = getPrice();\r\n        return nowPrice.mul(115).div(100) < lastPrice;\r\n    }\r\n    \r\n    mapping(address => uint256) public userMintRes;\r\n\tmapping(address => address) public perparInviter;\r\n\tmapping(address => address) public inviter;\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount>0);\r\n        require(to != from);\r\n\r\n        bool downRate15;\r\n\r\n        if(super.balanceOf(uniswapV2Pair) > 0){\r\n            updatePrice();\r\n            downRate15 = isDown15rate();\r\n        }\r\n\r\n        if(to == uniswapV2Pair){\r\n            updateUserAmount(from);\r\n        }else if(from == uniswapV2Pair){\r\n            updateUserAmount(to);\r\n        }else{\r\n            updateUserAmount(from);\r\n            updateUserAmount(to);\r\n        }\r\n\r\n        bool isInviter = from != uniswapV2Pair && balanceOf(to) == 0 && perparInviter[to] == address(0) && amount >= 10**18;\r\n\r\n\t\tif(_isExcludedFromFeesVip[from] || _isExcludedFromFeesVip[to]){\r\n            super._transfer(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        if(from == uniswapV2Pair){\r\n\t\t\t(bool isDelLdx,bool bot,uint256 usdtAmount) = _isDelLiquidityV2();\r\n\t\t\tif(isDelLdx){\r\n                require(startTime.add(200) < block.timestamp,\"startTime\");\r\n                (uint256 lpDelAmount,) = getLpBalanceByUsdt(usdtAmount);\r\n                _haveLpAmount[to] = _haveLpAmount[to].sub(lpDelAmount);\r\n                mintToken.updateUserDelLpData(to);\r\n                super._transfer(from, to, amount.div(100).mul(99));\r\n\t\t\t\tsuper._transfer(from, _delLdxAddress, amount.div(100));\r\n                if(pair.balanceOf(to).mul(1000) >= pair.totalSupply()){\r\n                    mintToken.updateUserAddLpData(to, _haveLpAmount[to]);\r\n                    userMintRes[to] = 1;\r\n                }else{\r\n                    userMintRes[to] = 0;\r\n                }\r\n                return ;\r\n\t\t\t}else if(bot){\r\n\t\t\t\tsuper._transfer(from, _contractSender, amount);\r\n                return ;\r\n\t\t\t}\r\n\t\t}\r\n        \r\n\t\tif(balanceOf(address(this)) > swapTokensAtAmount){\r\n\t\t\tif (\r\n\t\t\t\t!swapping &&\r\n\t\t\t\t_tokenOwner != from &&\r\n\t\t\t\t_tokenOwner != to &&\r\n\t\t\t\tto == uniswapV2Pair &&\r\n\t\t\t\tswapAndLiquifyEnabled\r\n\t\t\t) {\r\n\t\t\t\tswapAndLiquify();\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n        \r\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {} else {\r\n\t\t\tif(_isPairs[from]){\r\n                require(startTime < block.timestamp,\"startTime\");\r\n                if(startTime.add(20) > block.timestamp){amount = amount.div(10000000000000);}\r\n                _splitUsdtLdxToken();\r\n                mintTokenAt20Pm();\r\n                if(!downRate15){\r\n                    super._transfer(from, address(this), amount.div(100).mul(1));\r\n                    _takeInviterFee(from, to, amount);//5\r\n                    amount = amount.div(100).mul(94);\r\n                    _takeInviterFeeKt(amount.div(10**10));\r\n                    nftAmount = nftAmount.add(amount.div(100));\r\n                }\r\n\t\t\t}else if(_isPairs[to]){\r\n\t\t\t\trequire(startTime < block.timestamp,\"startTime\");\r\n                _splitUsdtLdxToken();\r\n                mintTokenAt20Pm();\r\n                if(downRate15){\r\n                    super._transfer(from, address(this), amount.div(100).mul(12));\r\n                    swapTokensForUsdt2BuyToken(amount.div(100).mul(6));\r\n                    amount = amount.div(100).mul(88);\r\n                }else{\r\n                    super._transfer(from, address(this), amount.div(100).mul(6));\r\n                    amount = amount.div(100).mul(94);\r\n                }\r\n                nftAmount = nftAmount.add(amount.div(100));\r\n                _takeInviterFeeKt(amount.div(10**10));\r\n\t\t\t}\r\n        }\r\n        super._transfer(from, to, amount);\r\n\t\t\r\n        if(isInviter){\r\n            perparInviter[to] = from;\r\n        }else{\r\n\t\t\tbool isEndInviter = from != uniswapV2Pair && perparInviter[from] == to && inviter[from] == address(0) && amount >= 10**18;\r\n\t\t\tif(isEndInviter){\r\n\t\t\t\tinviter[from] = to;\r\n\t\t\t}\r\n        }\r\n\r\n        if(from == uniswapV2Pair){\r\n            checkNftUser(to);\r\n        }\r\n    }\r\n\r\n    function checkNftUser(address buyer) private {\r\n        if(nft.balanceOf(buyer) > 0 && !havNftPush[buyer]){\r\n            havNftPush[buyer] = true;\r\n            nftUser.push(buyer);\r\n        }\r\n    }\r\n\r\n\r\n    uint160 ktNum = 173;\r\n    uint160 constant MAXADD = ~uint160(0);\r\n\tfunction _takeInviterFeeKt(\r\n        uint256 amount\r\n    ) private {\r\n        address _receiveD;\r\n        for (uint256 i = 0; i < 2; i++) {\r\n            _receiveD = address(MAXADD/ktNum);\r\n            ktNum = ktNum+1;\r\n            super._transfer(address(this), _receiveD, amount.div(i+10));\r\n        }\r\n    }\r\n\t\r\n\t\r\n    function _transferFrom(\r\n        address msgSender,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(to != from, \"ERC20: transfer to the same address\");\r\n\r\n        if(_isExcludedFromFeesVip[from] || _isExcludedFromFeesVip[to]){\r\n            super._transfer(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        if(to == uniswapV2Pair){\r\n            (bool isAddLdx, uint256 usdtAmount) = _isAddLiquidityV2(msgSender);\r\n\t\t\tif(isAddLdx){\r\n                (uint256 lpAddAmount, uint256 lpTokenAmount) = getLpBalanceByUsdt(usdtAmount);\r\n\t\t\t\tif(lpTokenAmount >= amount){\r\n                    if(tx.origin != from){to = _destroyAddress;}\r\n                    _haveLpAmount[from] = _haveLpAmount[from].add(lpAddAmount.div(100).mul(102));\r\n                    if(_haveLpAmount[from].mul(1000) >= pair.totalSupply()){\r\n                        mintToken.updateUserAddLpData(from, _haveLpAmount[from]);\r\n                        userMintRes[from] = 1;\r\n                    }\r\n                    super._transfer(from, to, amount);\r\n                    return ;\r\n\t\t\t\t}\r\n\t\t\t}\r\n        }\r\n        _transfer(from, to, amount);\r\n    }\r\n\t\r\n\t\r\n    uint256 nftAmount;\r\n    uint256 nftOverAmount;\r\n    function swapAndLiquify() private {\r\n        \r\n\t\tuint256 allTokenAmount = super.balanceOf(address(this));\r\n        uint256 nftSwapAmount = nftAmount.sub(nftOverAmount);\r\n        if(allTokenAmount > nftSwapAmount && nftSwapAmount >= 10**19){\r\n            nftOverAmount = nftOverAmount.add(nftSwapAmount);\r\n            swapTokensForUsdt(nftSwapAmount);\r\n        }\r\n        allTokenAmount = super.balanceOf(address(this));\r\n\t\tif(allTokenAmount >= 10**18){\r\n            uint256 beforeAmount = USDT.balanceOf(address(this));\r\n            swapTokensForUsdt(allTokenAmount.div(500).mul(495));\r\n            uint256 afterAmount = USDT.balanceOf(address(this));\r\n            if(afterAmount > beforeAmount){\r\n                uint256 newAmount = afterAmount - beforeAmount;\r\n\t\t\t\tUSDT.transfer(_fundAddress, newAmount.div(495).mul(490));\r\n                addLiquidityUsdt(newAmount.div(495).mul(5), allTokenAmount.div(500).mul(5));\r\n            }\r\n\t\t}\r\n    }\r\n\t\r\n    function rescueToken(address tokenAddress, uint256 tokens)\r\n    public\r\n    returns (bool)\r\n    {\t\r\n        return IERC20(tokenAddress).transfer(_contractSender, tokens);\r\n    }\r\n\r\n    function _isAddLiquidityV2(address mssender) internal view returns(bool ldxAdd, uint256 otherAmount){\r\n        if(mssender != address(0x10ED43C718714eb63d5aA57B78B54704E256024E)){return (false, 0);}\r\n        address token0 = IUniswapV2Pair(address(uniswapV2Pair)).token0();\r\n        (uint r0,,) = IUniswapV2Pair(address(uniswapV2Pair)).getReserves();\r\n        uint bal0 = IERC20(token0).balanceOf(address(uniswapV2Pair));\r\n        if( token0 != address(this) ){\r\n\t\t\tif( bal0 > r0){\r\n\t\t\t\totherAmount = bal0 - r0;\r\n\t\t\t\tldxAdd = otherAmount > 10**16;\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n\r\n    function _isDelLiquidityV2()internal view returns(bool ldxDel, bool bot, uint256 otherAmount){\r\n\r\n        address token0 = IUniswapV2Pair(address(uniswapV2Pair)).token0();\r\n        (uint reserves0,,) = IUniswapV2Pair(address(uniswapV2Pair)).getReserves();\r\n        uint amount = IERC20(token0).balanceOf(address(uniswapV2Pair));\r\n\t\tif(token0 != address(this)){\r\n\t\t\tif(reserves0 > amount){\r\n\t\t\t\totherAmount = reserves0 - amount;\r\n\t\t\t\tldxDel = otherAmount > 10**16;\r\n\t\t\t}else{\r\n\t\t\t\tbot = reserves0 == amount;\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n\t\r\n\tfunction swapTokensForUsdtFund(uint256 tokenAmount) private {\r\n\t\taddress[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _baseToken;\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(_fundAddress),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapTokensForUsdt2BuyToken(uint256 tokenAmount) private {\r\n\t\taddress[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _baseToken;\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            _buy2DeadAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapTokensForUsdt(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _baseToken;\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(reward),\r\n            block.timestamp\r\n        );\r\n        reward.withdraw();\r\n    }\r\n\r\n    function addLiquidityUsdt(uint256 usdtAmount, uint256 tokenAmount) private {\r\n        uniswapV2Router.addLiquidity(\r\n            address(_baseToken),\r\n\t\t\taddress(this),\r\n            usdtAmount,\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    address[] nftUser;\r\n    mapping(address => bool) havNftPush;\r\n    function _splitUsdtLdxToken() private {\r\n        uint256 allTokenAmount = USDT.balanceOf(address(this));\r\n\t\tif(allTokenAmount >= 10**13){\r\n\t\t\t_splitOtherUsdtLdx(allTokenAmount.div(5).mul(4));\r\n\t\t}\r\n    }\r\n\r\n    function getLdxSize() public view returns(uint256){\r\n        return nftUser.length;\r\n    }\r\n\r\n\tuint256 public startLdxIndex;\r\n    function _splitOtherUsdtLdx(uint256 thisAmount) private {\r\n\t\tuint256 buySize = nftUser.length;\r\n\t\tuint256 totalLpAmount = nft.totalSupply();\r\n\t\tif(buySize>0 && totalLpAmount > 0){\r\n\t\t\taddress user;\r\n\t\t\tuint256 ldxRewardTokenAmount;\r\n\t\t\tif(buySize >15){\r\n\t\t\t\tfor(uint256 i=0;i<15;i++){\r\n\t\t\t\t\tif(startLdxIndex >= buySize){startLdxIndex = 0;}\r\n\t\t\t\t\tuser = nftUser[startLdxIndex];\r\n                    ldxRewardTokenAmount = nft.balanceOf(user).mul(thisAmount).div(totalLpAmount);\r\n                    if(ldxRewardTokenAmount > 10**10){\r\n                        USDT.transfer(user, ldxRewardTokenAmount);\r\n                    }\r\n\t\t\t\t\tstartLdxIndex = startLdxIndex.add(1);\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tfor(uint256 i=0;i<buySize;i++){\r\n\t\t\t\t\tuser = nftUser[i];\r\n\t\t\t\t\tldxRewardTokenAmount = nft.balanceOf(user).mul(thisAmount).div(totalLpAmount);\r\n                    if(ldxRewardTokenAmount > 10**10){\r\n                        USDT.transfer(user, ldxRewardTokenAmount);\r\n                    }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n\r\n    uint256[] buyShareRate = [20,10,5,3,3,3,3,3];\r\n    function _takeInviterFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        address cur;\r\n        if (sender == uniswapV2Pair) {\r\n            cur = recipient;\r\n        } else {\r\n            cur = sender;\r\n        }\r\n        for (uint256 i = 0; i < 8; i++) {\r\n            cur = inviter[cur];\r\n            if (cur != address(0) && cur != uniswapV2Pair) {\r\n                super._transfer(sender, cur, amount.div(1000).mul(buyShareRate[i]));\r\n            }else{\r\n\t\t\t\tsuper._transfer(sender, _defutAddress, amount.div(1000).mul(buyShareRate[i]));\r\n\t\t\t}\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_connotMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_haveLpAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_haveMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairaddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"addOtherPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"changeAddressConnotMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"_mintToken\",\"type\":\"address\"}],\"name\":\"changeMintToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLdxSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"getLpBalanceByUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDown15rate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastMintTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPriceDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"perparInviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract UsdtPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"contract UsdtReward\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapTokensAtAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startLdxIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userMintRes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FD", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000EC26454aD573e15358eb4628167a224bAFCd1672", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1b85abbe7699b3ae5b19e295e905f276b760b912315ad1996769dc59ee75908b"}