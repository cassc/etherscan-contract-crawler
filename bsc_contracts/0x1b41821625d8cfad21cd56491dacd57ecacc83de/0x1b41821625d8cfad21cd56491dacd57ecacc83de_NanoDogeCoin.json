{"SourceCode": "// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/AccessControl.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role, _msgSender());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        Strings.toHexString(uint160(account), 20),\r\n                        \" is missing role \",\r\n                        Strings.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\r\n        _roles[role].adminRole = adminRole;\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastvalue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastvalue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/AccessControlEnumerable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\r\n */\r\ninterface IAccessControlEnumerable {\r\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\r\n\r\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\r\n */\r\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\r\n        return _roleMembers[role].at(index);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\r\n        return _roleMembers[role].length();\r\n    }\r\n\r\n    /**\r\n     * @dev Overload {grantRole} to track enumerable memberships\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override {\r\n        super.grantRole(role, account);\r\n        _roleMembers[role].add(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload {revokeRole} to track enumerable memberships\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override {\r\n        super.revokeRole(role, account);\r\n        _roleMembers[role].remove(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload {renounceRole} to track enumerable memberships\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        super.renounceRole(role, account);\r\n        _roleMembers[role].remove(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload {_setupRole} to track enumerable memberships\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual override {\r\n        super._setupRole(role, account);\r\n        _roleMembers[role].add(account);\r\n    }\r\n}\r\n\r\n// File: contracts/pancakeswap/IPancakeFactory.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// File: contracts/pancakeswap/IPancakeERC20.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IPancakeERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\n// File: contracts/pancakeswap/IPancakePair.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\n\r\ninterface IPancakePair is IPancakeERC20 {\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File: contracts/pancakeswap/IPancakeRouter01.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external view returns (address);\r\n    function WETH() external view returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: contracts/pancakeswap/IPancakeRouter02.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/dividends/IDividendPayingToken.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IDividendPayingToken {\r\n  function dividendOf(address _owner) external view returns(uint256);\r\n  function distributeRewardDividends(uint256 amount) external;\r\n  function withdrawDividend() external;\r\n\r\n  event DividendsDistributed(address indexed from, uint256 weiAmount);\r\n  event DividendWithdrawn(address indexed to, uint256 weiAmount);\r\n}\r\n\r\n// File: contracts/dividends/IDividendPayingTokenOptional.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IDividendPayingTokenOptional {\r\n  function withdrawableDividendOf(address _owner) external view returns(uint256);\r\n  function withdrawnDividendOf(address _owner) external view returns(uint256);\r\n  function accumulativeDividendOf(address _owner) external view returns(uint256);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: contracts/pancakeswap/ERC20.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) internal _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 internal _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens.\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens.\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: contracts/dividends/DividendPayingToken.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\n\r\n\r\n\r\n\r\ncontract DividendPayingToken is\r\n  Ownable,\r\n  IDividendPayingToken,\r\n  IDividendPayingTokenOptional,\r\n  ERC20\r\n{\r\n  // With `magnitude`, we can properly distribute dividends even if the amount of received ether is small.\r\n  // For more discussion about choosing the value of `magnitude`,\r\n  //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\r\n  uint256 constant internal magnitude = 2**128;\r\n\r\n  uint256 internal magnifiedDividendPerShare;\r\n  uint256 internal lastAmount;\r\n\r\n  address public immutable _dividendToken;\r\n\r\n  // About dividendCorrection:\r\n  // If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\r\n  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\r\n  // When `balanceOf(_user)` is changed (via transferring tokens),\r\n  //   `dividendOf(_user)` should not be changed,\r\n  //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\r\n  // To keep the `dividendOf(_user)` unchanged, we add a correction term:\r\n  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\r\n  //   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\r\n  //   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\r\n  // So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\r\n  mapping(address => int256) internal magnifiedDividendCorrections;\r\n  mapping(address => uint256) internal withdrawnDividends;\r\n\r\n  uint256 public totalDividendsDistributed;\r\n\r\n  constructor(\r\n    string memory _name,\r\n    string memory _symbol,\r\n    address dividendToken_\r\n  ) ERC20(_name, _symbol) {\r\n    _dividendToken = dividendToken_;\r\n  }\r\n\r\n  function decimals() public pure override returns(uint8) {\r\n    return 9;\r\n  }\r\n\r\n  function distributeRewardDividends(uint256 amount)\r\n    external\r\n    override\r\n    onlyOwner\r\n  {\r\n    require(totalSupply() > 0);\r\n\r\n    if(amount > 0) {\r\n      magnifiedDividendPerShare += (amount * magnitude) / totalSupply();\r\n      totalDividendsDistributed += amount;\r\n\r\n      emit DividendsDistributed(msg.sender, amount);\r\n    }\r\n  }\r\n\r\n  /// @notice Withdraws the ether distributed to the sender.\r\n  /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\r\n  function withdrawDividend()\r\n    public\r\n    virtual\r\n    override\r\n  {\r\n    _withdrawDividendOfUser(payable(msg.sender));\r\n  }\r\n\r\n  /// @notice Withdraws the ether distributed to the sender.\r\n  /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\r\n  function _withdrawDividendOfUser(address payable user)\r\n    internal\r\n    returns(uint256)\r\n  {\r\n    uint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n\r\n    if(_withdrawableDividend > 0) {\r\n      withdrawnDividends[user] += _withdrawableDividend;\r\n\r\n      bool success = IERC20(_dividendToken).transfer(user, _withdrawableDividend);\r\n\r\n      if(!success) {\r\n        withdrawnDividends[user] -= _withdrawableDividend;\r\n        return 0;\r\n      }\r\n\r\n      emit DividendWithdrawn(user, _withdrawableDividend);\r\n      return _withdrawableDividend;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /// @notice View the amount of dividend in wei that an address can withdraw.\r\n  /// @param _owner The address of a token holder.\r\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\r\n  function dividendOf(address _owner)\r\n    public\r\n    view\r\n    override\r\n    returns(uint256)\r\n  {\r\n    return withdrawableDividendOf(_owner);\r\n  }\r\n\r\n  /// @notice View the amount of dividend in wei that an address can withdraw.\r\n  /// @param _owner The address of a token holder.\r\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\r\n  function withdrawableDividendOf(address _owner)\r\n    public\r\n    view\r\n    override\r\n    returns(uint256)\r\n  {\r\n    return accumulativeDividendOf(_owner) - withdrawnDividends[_owner];\r\n  }\r\n\r\n  /// @notice View the amount of dividend in wei that an address has withdrawn.\r\n  /// @param _owner The address of a token holder.\r\n  /// @return The amount of dividend in wei that `_owner` has withdrawn.\r\n  function withdrawnDividendOf(address _owner)\r\n    public\r\n    view\r\n    override\r\n    returns(uint256)\r\n  {\r\n    return withdrawnDividends[_owner];\r\n  }\r\n\r\n  /// @notice View the amount of dividend in wei that an address has earned in total.\r\n  /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\r\n  /// = (magnifiedDividendPerShare * balanceOf(_owner) + magnifiedDividendCorrections[_owner]) / magnitude\r\n  /// @param _owner The address of a token holder.\r\n  /// @return The amount of dividend in wei that `_owner` has earned in total.\r\n  function accumulativeDividendOf(address _owner)\r\n    public\r\n    view\r\n    override\r\n    returns(uint256)\r\n  {\r\n    int256 accumulativeDividends = int256(magnifiedDividendPerShare * balanceOf(_owner));\r\n    accumulativeDividends += magnifiedDividendCorrections[_owner];\r\n\r\n    return uint256(accumulativeDividends) / magnitude;\r\n  }\r\n\r\n  /// @dev Internal function that transfer tokens from one address to another.\r\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\r\n  /// @param from The address to transfer from.\r\n  /// @param to The address to transfer to.\r\n  /// @param value The amount to be transferred.\r\n  function _transfer(address from, address to, uint256 value)\r\n    internal\r\n    virtual\r\n    override\r\n  {\r\n    int256 _magCorrection = int256(magnifiedDividendPerShare * value);\r\n\r\n    magnifiedDividendCorrections[from] += _magCorrection;\r\n    magnifiedDividendCorrections[to] -= _magCorrection;\r\n  }\r\n\r\n  function _distributeDividendTokens(address account, uint256 value) internal {\r\n    require(account != address(0), 'ZERO_ADDRESS');\r\n\r\n    _beforeTokenTransfer(address(0), account, value);\r\n\r\n    _totalSupply += value;\r\n    _balances[account] += value;\r\n    emit Transfer(address(0), account, value);\r\n\r\n    _afterTokenTransfer(address(0), account, value);\r\n\r\n    magnifiedDividendCorrections[account] -= int256(magnifiedDividendPerShare * value);\r\n  }\r\n\r\n  function _destroyDividendTokens(address account, uint256 value) internal {\r\n    require(account != address(0), 'ZERO_ADDRESS');\r\n\r\n    _beforeTokenTransfer(account, address(0), value);\r\n\r\n    uint256 accountBalance = _balances[account];\r\n\r\n    require(accountBalance >= value, 'Destroy amount exceeds balance');\r\n\r\n    unchecked {\r\n      _balances[account] = accountBalance - value;\r\n    }\r\n\r\n    _totalSupply -= value;\r\n\r\n    emit Transfer(account, address(0), value);\r\n\r\n    _afterTokenTransfer(account, address(0), value);\r\n\r\n    magnifiedDividendCorrections[account] += int256(magnifiedDividendPerShare * value);\r\n  }\r\n\r\n  function _setBalance(address account, uint256 newBalance) internal {\r\n    uint256 currentBalance = balanceOf(account);\r\n\r\n    if(newBalance > currentBalance) {\r\n      uint256 rewardAmount = newBalance - currentBalance;\r\n      _distributeDividendTokens(account, rewardAmount);\r\n    } else if(newBalance < currentBalance) {\r\n      uint256 burnAmount = currentBalance - newBalance;\r\n      _destroyDividendTokens(account, burnAmount);\r\n    }\r\n  }\r\n\r\n  receive() external payable {}\r\n}\r\n\r\n// File: contracts/dividends/DividendTracker.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\n\r\nlibrary IterableMapping {\r\n  // iterable mapping from address to uint;\r\n  struct Map {\r\n    address[] keys;\r\n    mapping(address => uint) values;\r\n    mapping(address => uint) indexOf;\r\n    mapping(address => bool) inserted;\r\n  }\r\n\r\n  function get(Map storage map, address key)\r\n    internal\r\n    view\r\n    returns(uint)\r\n  {\r\n    return map.values[key];\r\n  }\r\n\r\n  function getIndexOfKey(Map storage map, address key)\r\n    internal\r\n    view\r\n    returns(int)\r\n  {\r\n    if(!map.inserted[key]) {\r\n      return -1;\r\n    }\r\n\r\n    return int(map.indexOf[key]);\r\n  }\r\n\r\n  function getKeyAtIndex(Map storage map, uint index)\r\n    internal\r\n    view\r\n    returns(address)\r\n  {\r\n    return map.keys[index];\r\n  }\r\n\r\n  function size(Map storage map)\r\n    internal\r\n    view\r\n    returns(uint)\r\n  {\r\n    return map.keys.length;\r\n  }\r\n\r\n  function set(Map storage map, address key, uint val) internal {\r\n    if(map.inserted[key]) {\r\n      map.values[key] = val;\r\n    } else {\r\n      map.inserted[key] = true;\r\n      map.values[key] = val;\r\n      map.indexOf[key] = map.keys.length;\r\n      map.keys.push(key);\r\n    }\r\n  }\r\n\r\n  function remove(Map storage map, address key) internal {\r\n    if(!map.inserted[key]) {\r\n      return;\r\n    }\r\n\r\n    delete map.inserted[key];\r\n    delete map.values[key];\r\n\r\n    uint index = map.indexOf[key];\r\n    uint lastIndex = map.keys.length - 1;\r\n    address lastKey = map.keys[lastIndex];\r\n\r\n    map.indexOf[lastKey] = index;\r\n    delete map.indexOf[key];\r\n\r\n    map.keys[index] = lastKey;\r\n    map.keys.pop();\r\n  }\r\n}\r\n\r\ncontract DividendTracker is DividendPayingToken {\r\n  using IterableMapping for IterableMapping.Map;\r\n\r\n  IterableMapping.Map private tokenHoldersMap;\r\n  uint256 public lastProcessedIndex;\r\n\r\n  mapping(address => bool) public excludedFromDividends;\r\n  mapping(address => uint256) public lastClaimTimes;\r\n\r\n  uint256 public claimWait;\r\n  uint256 public immutable minimumTokenBalanceForDividends;\r\n\r\n  event ExcludeFromDividends(address indexed account);\r\n\r\n  event ClaimWaitUpdated(\r\n    uint256 indexed newValue,\r\n    uint256 indexed oldValue\r\n  );\r\n\r\n  event Claim(\r\n    address indexed account,\r\n    uint256 amount,\r\n    bool indexed automatic\r\n  );\r\n\r\n  constructor(\r\n    string memory name_,\r\n    string memory symbol_,\r\n    address dividendTokenAddress_,\r\n    uint256 claimWait_\r\n  ) DividendPayingToken(\r\n    string(abi.encodePacked(name_, ': Dividend Tracker')),\r\n    string(abi.encodePacked(symbol_, '_DIVIDEND_TRACKER')),\r\n\r\n    dividendTokenAddress_\r\n  ) {\r\n    claimWait = claimWait_;\r\n    minimumTokenBalanceForDividends = 1_000_000_000 * 10**9; // must hold 1 billion tokens which equates to 0.0001% of the total NanoDogeCoin supply\r\n  }\r\n\r\n  function _transfer(address, address, uint256)\r\n    internal\r\n    pure\r\n    override\r\n  {\r\n    require(false, 'DividendTracker: No transfers allowed');\r\n  }\r\n\r\n  function withdrawDividend()\r\n    public\r\n    pure\r\n    override\r\n  {\r\n    require(false, 'DividendTracker: withdrawDividend disabled. Use the \\'claim\\' function on the main contract.');\r\n  }\r\n\r\n  function excludeFromDividends(address account) external onlyOwner {\r\n    require(!excludedFromDividends[account]);\r\n    excludedFromDividends[account] = true;\r\n\r\n    _setBalance(account, 0);\r\n    tokenHoldersMap.remove(account);\r\n\r\n    emit ExcludeFromDividends(account);\r\n  }\r\n\r\n  function updateClaimWait(uint256 newClaimWait) external onlyOwner {\r\n    require(newClaimWait >= 3600 && newClaimWait <= 86400, 'DividendTracker: claimWait must be updated to between 1 and 24 hours');\r\n    require(newClaimWait != claimWait, 'DividendTracker: Cannot update claimWait to same value');\r\n\r\n    emit ClaimWaitUpdated(newClaimWait, claimWait);\r\n\r\n    claimWait = newClaimWait;\r\n  }\r\n\r\n  function getLastProcessedIndex()\r\n    external\r\n    view\r\n    returns(uint256)\r\n  {\r\n    return lastProcessedIndex;\r\n  }\r\n\r\n  function getNumberOfTokenHolders()\r\n    external\r\n    view\r\n    returns(uint256)\r\n  {\r\n    return tokenHoldersMap.keys.length;\r\n  }\r\n\r\n  function getAccount(address _account)\r\n    public\r\n    view\r\n    returns(\r\n      address account,\r\n      int256 index,\r\n      int256 iterationsUntilProcessed,\r\n      uint256 withdrawableDividends,\r\n      uint256 totalDividends,\r\n      uint256 lastClaimTime,\r\n      uint256 nextClaimTime,\r\n      uint256 secondsUntilAutoClaimAvailable\r\n    )\r\n  {\r\n    account = _account;\r\n    index = tokenHoldersMap.getIndexOfKey(account);\r\n    iterationsUntilProcessed = -1;\r\n\r\n    if(index >= 0) {\r\n      if(uint256(index) > lastProcessedIndex) {\r\n        iterationsUntilProcessed = index - int256(lastProcessedIndex);\r\n      } else {\r\n        uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length > lastProcessedIndex\r\n          ? tokenHoldersMap.keys.length - lastProcessedIndex\r\n          : 0;\r\n\r\n        iterationsUntilProcessed = index + int256(processesUntilEndOfArray);\r\n      }\r\n    }\r\n\r\n    withdrawableDividends = withdrawableDividendOf(account);\r\n    totalDividends = accumulativeDividendOf(account);\r\n\r\n    lastClaimTime = lastClaimTimes[account];\r\n\r\n    nextClaimTime = lastClaimTime > 0\r\n      ? lastClaimTime + claimWait\r\n      : 0;\r\n\r\n    secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp\r\n      ? nextClaimTime - block.timestamp\r\n      : 0;\r\n  }\r\n\r\n  function getAccountAtIndex(uint256 index)\r\n    public\r\n    view\r\n    returns(\r\n      address,\r\n      int256,\r\n      int256,\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256\r\n    )\r\n  {\r\n    if(index >= tokenHoldersMap.size()) {\r\n      return (0x0000000000000000000000000000000000000000, -1, -1, 0, 0, 0, 0, 0);\r\n    }\r\n\r\n    address account = tokenHoldersMap.getKeyAtIndex(index);\r\n\r\n    return getAccount(account);\r\n  }\r\n\r\n  function canAutoClaim(uint256 lastClaimTime)\r\n    private\r\n    view\r\n    returns(bool)\r\n  {\r\n    if(lastClaimTime > block.timestamp) {\r\n      return false;\r\n    }\r\n\r\n    return (block.timestamp - lastClaimTime) >= claimWait;\r\n  }\r\n\r\n  function setBalance(address payable account, uint256 newBalance)\r\n    external\r\n    onlyOwner\r\n  {\r\n    if(excludedFromDividends[account]) {\r\n      return;\r\n    }\r\n\r\n    if(newBalance >= minimumTokenBalanceForDividends) {\r\n      _setBalance(account, newBalance);\r\n      tokenHoldersMap.set(account, newBalance);\r\n    } else {\r\n      _setBalance(account, 0);\r\n      tokenHoldersMap.remove(account);\r\n    }\r\n\r\n    processAccount(account, true);\r\n  }\r\n\r\n  function process(uint256 gas)\r\n    public\r\n    returns(\r\n      uint256,\r\n      uint256,\r\n      uint256\r\n    )\r\n  {\r\n    uint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\r\n\r\n    if(numberOfTokenHolders == 0) {\r\n      return (0, 0, lastProcessedIndex);\r\n    }\r\n\r\n    uint256 _lastProcessedIndex = lastProcessedIndex;\r\n\r\n    uint256 gasUsed = 0;\r\n    uint256 gasLeft = gasleft();\r\n\r\n    uint256 iterations = 0;\r\n    uint256 claims = 0;\r\n\r\n    while(gasUsed < gas && iterations < numberOfTokenHolders) {\r\n      _lastProcessedIndex += 1;\r\n\r\n      if(_lastProcessedIndex >= tokenHoldersMap.keys.length) {\r\n        _lastProcessedIndex = 0;\r\n      }\r\n\r\n      address account = tokenHoldersMap.keys[_lastProcessedIndex];\r\n\r\n      if(canAutoClaim(lastClaimTimes[account])) {\r\n        if(processAccount(payable(account), true)) {\r\n          claims += 1;\r\n        }\r\n      }\r\n\r\n      iterations += 1;\r\n\r\n      uint256 newGasLeft = gasleft();\r\n\r\n      if(gasLeft > newGasLeft) {\r\n        gasUsed += (gasLeft - newGasLeft);\r\n      }\r\n\r\n      gasLeft = newGasLeft;\r\n    }\r\n\r\n    lastProcessedIndex = _lastProcessedIndex;\r\n\r\n    return (iterations, claims, lastProcessedIndex);\r\n  }\r\n\r\n  function processAccount(address payable account, bool automatic)\r\n    public\r\n    onlyOwner\r\n    returns(bool)\r\n  {\r\n    uint256 amount = _withdrawDividendOfUser(account);\r\n\r\n    if(amount > 0) {\r\n      lastClaimTimes[account] = block.timestamp;\r\n      emit Claim(account, amount, automatic);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n\r\n// File: contracts/INanoDogeCoin.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface INanoDogeCoin is IERC20, IERC20Metadata {\r\n  event UpdateDividendTracker(\r\n    address indexed newAddress,\r\n    address indexed oldAddress\r\n  );\r\n\r\n  event UpdateUniswapV2Router(\r\n    address indexed newAddress,\r\n    address indexed oldAddress\r\n  );\r\n\r\n  event ExcludeFromFees(\r\n    address indexed account,\r\n    bool isExcluded\r\n  );\r\n\r\n  event ExcludeMultipleAccountsFromFees(\r\n    address[] accounts,\r\n    bool isExcluded\r\n  );\r\n\r\n  event SetAutomatedMarketMakerPair(\r\n    address indexed pair,\r\n    bool indexed value\r\n  );\r\n\r\n  event LiquidityWalletUpdated(\r\n    address indexed newLiquidityWallet,\r\n    address indexed oldLiquidityWallet\r\n  );\r\n\r\n  event GasForProcessingUpdated(\r\n    uint256 indexed newValue,\r\n    uint256 indexed oldValue\r\n  );\r\n\r\n  event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n  event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n\r\n  event SwapAndLiquify(\r\n    uint256 half,\r\n    uint256 newBalance,\r\n    uint256 otherHalf\r\n  );\r\n\r\n  event ProcessedDividendTracker(\r\n    uint256 iterations,\r\n    uint256 claims,\r\n    uint256 lastProcessedIndex,\r\n    bool indexed automatic,\r\n    uint256 gas,\r\n    address indexed processor\r\n  );\r\n\r\n  event SniperCaught(address sniperAddress);\r\n\r\n  event SendDividends(\r\n    uint256 tokensSwapped,\r\n    uint256 amount\r\n  );\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue)\r\n    external\r\n    returns(bool);\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue)\r\n    external\r\n    returns(bool);\r\n\r\n  function isSniper(address account) external view returns(bool);\r\n\r\n  // There is no way to add to the blacklist except through the initial sniper check.\r\n  // But this can remove from the blacklist if someone human somehow made it onto the list.\r\n  function removeSniper(address account) external;\r\n  function setSniperProtectionEnabled(bool enabled) external;\r\n\r\n  // Adjusted to allow for smaller than 1%'s, as low as 0.1%\r\n  function setMaxTxPercent(uint256 _maxTxPercent) external;\r\n  function maxTxAmountUI() external view returns(uint256);\r\n  function setMaxWalletPercent(uint256 maxWalletPercent_) external;\r\n  function maxWalletUI() external view returns(uint256);\r\n  function setSwapAndLiquifyEnabled(bool _enabled) external;\r\n  function excludeFromDividends(address exclude) external;\r\n  function excludeFromFee(address account) external;\r\n  function includeInFee(address account) external;\r\n  function excludeFromMaxWallet(address account) external;\r\n  function includeInMaxWallet(address account) external;\r\n  function excludeFromMaxTx(address account) external;\r\n  function includeInMaxTx(address account) external;\r\n\r\n  function setDxSaleAddress(address dxRouter, address presaleRouter) external;\r\n  function setAutomatedMarketMakerPair(address pair, bool value) external;\r\n\r\n  function updateClaimWait(uint256 claimWait) external;\r\n\r\n  function getClaimWait() external view returns(uint256);\r\n\r\n  function getTotalDividendsDistributed() external view returns(uint256);\r\n  function withdrawableDividendOf(address account) external view returns(uint256);\r\n  function dividendRewardTokenBalanceOf(address account) external view returns(uint256);\r\n\r\n  function getAccountDividendsInfo(address account)\r\n    external\r\n    view\r\n    returns(\r\n      address,\r\n      int256,\r\n      int256,\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256\r\n    );\r\n\r\n  function getAccountDividendsInfoAtIndex(uint256 index)\r\n    external\r\n    view\r\n    returns(\r\n      address,\r\n      int256,\r\n      int256,\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256\r\n    );\r\n\r\n  function processDividendTracker(uint256 gas) external;\r\n  function claim() external;\r\n  function getLastProcessedIndex() external view returns(uint256);\r\n  function getNumberOfDividendTokenHolders() external view returns(uint256);\r\n\r\n  function isExcludedFromFee(address account) external view returns(bool);\r\n  function isExcludedFromMaxTx(address account) external view returns(bool);\r\n  function isExcludedFromMaxWallet(address account) external view returns(bool);\r\n  function withdrawLockedETH(address recipient) external;\r\n\r\n  // withdraw any tokens that are not supposed to be insided this contract.\r\n  function withdrawLockedTokens(address recipient, address _token) external;\r\n  function setMarketingWallet(address payable newWallet) external;\r\n  function setLiquidityWallet(address payable newWallet) external;\r\n  function updateDividendTracker(address newAddress) external;\r\n  function changeFees(uint256 liquidityFee, uint256 marketingFee, uint256 usdtFee)  external;\r\n}\r\n\r\n// File: contracts/NanoDogeCoin.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract NanoDogeCoin is\r\n  INanoDogeCoin,\r\n  Context,\r\n  AccessControlEnumerable,\r\n  ReentrancyGuard\r\n{\r\n  using Address for address;\r\n\r\n  mapping(address => uint256) private _balances;\r\n  mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n  mapping(address => bool) public automatedMarketMakerPairs;\r\n\r\n  mapping(address => bool) private _isExcludedFromFee;\r\n  mapping(address => bool) private _isExcludedFromMaxTx;\r\n  mapping(address => bool) private _isExcludedFromMaxWallet;\r\n  mapping(address => bool) private _liquidityHolders;\r\n  mapping(address => bool) private _isSniper;\r\n\r\n  uint256 private constant MAX = type(uint256).max;\r\n\r\n  uint8 private _decimals = 9;\r\n  uint256 private _totalSupply;\r\n\r\n  string private _name;\r\n  string private _symbol;\r\n\r\n  uint256 public _totalFee;\r\n  uint256 private _previousTotalFee;\r\n\r\n  uint256 public _marketingFee;\r\n  uint256 public _liquidityFee;\r\n  uint256 public _dividendRewardsFee;\r\n\r\n  uint256 private _withdrawableBalance;\r\n\r\n  DividendTracker public dividendTracker;\r\n  address private _dividendRewardToken;\r\n  uint256 public gasForProcessing = 300000;\r\n\r\n  IPancakeRouter02 public pancakeswapV2Router;\r\n  address public pancakeswapV2Pair;\r\n\r\n  address public burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n  address _marketingWallet;\r\n  address _liquidityWallet;\r\n\r\n  bool private swapping;\r\n  bool private setPresaleAddresses = true;\r\n  bool public maxWalletEnabled = true;\r\n\r\n  bool inSwapAndLiquify;\r\n  bool public swapAndLiquifyEnabled = true;\r\n\r\n  uint256 private _maxTxDivisor = 100;\r\n  uint256 private _maxTxAmount;\r\n  uint256 private _previousMaxTxAmount;\r\n\r\n  uint256 private _maxWalletDivisor = 100;\r\n  uint256 private _maxWalletAmount;\r\n  uint256 private _perviousMaxWalletAmount;\r\n\r\n  uint256 private _numTokensSellToAddToLiquidity;\r\n\r\n  bool private _sniperProtection = true;\r\n  bool private _hasLiqBeenAdded = false;\r\n  bool private _tradingEnabled = false;\r\n\r\n  uint256 private _liqAddBlock = 0;\r\n  uint256 private _snipeBlockAmount = 3;\r\n  uint256 private _manualSnipeBlock = 300;\r\n  uint256 public snipersCaught = 0;\r\n\r\n  modifier lockTheSwap {\r\n    inSwapAndLiquify = true;\r\n    _;\r\n    inSwapAndLiquify = false;\r\n  }\r\n\r\n  constructor(\r\n    string memory name_,\r\n    string memory symbol_,\r\n    uint256 supply_,\r\n    uint256 maxTxPercent_,\r\n    uint256 maxWalletPercent_,\r\n    uint256 liquidityThresholdPercentage_,\r\n\r\n    uint256 liquidityFee_,\r\n    uint256 marketingFee_,\r\n    uint256 dividendRewardsFee_,\r\n\r\n    address[3] memory addresses_,\r\n    address v2Router_\r\n  ) {\r\n    _name = name_;\r\n    _symbol = symbol_;\r\n    _totalSupply = supply_ * (10**uint256(_decimals));\r\n    _numTokensSellToAddToLiquidity = (_totalSupply * liquidityThresholdPercentage_) / 10000;\r\n\r\n    _dividendRewardToken = addresses_[0];\r\n    _marketingWallet = addresses_[1];\r\n    _liquidityWallet = addresses_[2];\r\n\r\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n\r\n    _setupDividendTracker();\r\n\r\n    setMaxTxPercent(maxTxPercent_);\r\n    setMaxWalletPercent(maxWalletPercent_);\r\n    changeFees(liquidityFee_, marketingFee_, dividendRewardsFee_);\r\n\r\n    _setupPancakeswap(v2Router_);\r\n    _setupExclusions();\r\n\r\n    _balances[_msgSender()] = _totalSupply;\r\n    emit Transfer(address(0), _msgSender(), _totalSupply);\r\n  }\r\n\r\n  function _setupPancakeswap(address _routerAddress) private {\r\n    pancakeswapV2Router = IPancakeRouter02(_routerAddress);\r\n\r\n    // create a pancakeswap pair for this new token\r\n    pancakeswapV2Pair = IPancakeFactory(pancakeswapV2Router.factory())\r\n      .createPair(address(this), pancakeswapV2Router.WETH());\r\n\r\n    _setAutomatedMarketMakerPair(pancakeswapV2Pair, true);\r\n  }\r\n\r\n  function _setupExclusions() private {\r\n    _isExcludedFromFee[msg.sender] = true;\r\n    _isExcludedFromFee[address(this)] = true;\r\n    _isExcludedFromFee[_marketingWallet] = true;\r\n    _liquidityHolders[msg.sender] = true;\r\n    _isExcludedFromMaxTx[msg.sender] = true;\r\n    _isExcludedFromMaxTx[address(this)] = true;\r\n    _isExcludedFromMaxTx[_marketingWallet] = true;\r\n    _isExcludedFromMaxWallet[msg.sender] = true;\r\n    _isExcludedFromMaxWallet[address(this)] = true;\r\n    _isExcludedFromMaxWallet[pancakeswapV2Pair] = true;\r\n    _isExcludedFromMaxWallet[_marketingWallet] = true;\r\n  }\r\n\r\n  function _setupDividendTracker() private {\r\n    dividendTracker = new DividendTracker(\r\n      _name,\r\n      _symbol,\r\n      _dividendRewardToken,\r\n      3600 // 1h claim\r\n    );\r\n\r\n    dividendTracker.excludeFromDividends(address(dividendTracker));\r\n    dividendTracker.excludeFromDividends(address(this));\r\n    dividendTracker.excludeFromDividends(msg.sender);\r\n    dividendTracker.excludeFromDividends(address(pancakeswapV2Router));\r\n  }\r\n\r\n  function name()\r\n    public\r\n    view\r\n    override\r\n    returns(string memory)\r\n  {\r\n    return _name;\r\n  }\r\n\r\n  function symbol()\r\n    public\r\n    view\r\n    override\r\n    returns(string memory)\r\n  {\r\n    return _symbol;\r\n  }\r\n\r\n  function decimals()\r\n    public\r\n    view\r\n    override\r\n    returns(uint8)\r\n  {\r\n    return _decimals;\r\n  }\r\n\r\n  function totalSupply()\r\n    public\r\n    view\r\n    override\r\n    returns(uint256)\r\n  {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address account)\r\n    public\r\n    view\r\n    override\r\n    returns(uint256)\r\n  {\r\n    return _balances[account];\r\n  }\r\n\r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n  )\r\n    public\r\n    view\r\n    override\r\n    returns(uint256)\r\n  {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  function approve(\r\n    address spender,\r\n    uint256 amount\r\n  )\r\n    public\r\n    override\r\n    returns(bool)\r\n  {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n\r\n  function transfer(\r\n    address recipient,\r\n    uint256 amount\r\n  )\r\n    public\r\n    override\r\n    returns(bool)\r\n  {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  )\r\n    public\r\n    override\r\n    returns(bool)\r\n  {\r\n    _transfer(sender, recipient, amount);\r\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\r\n    return true;\r\n  }\r\n\r\n  function increaseAllowance(\r\n    address spender,\r\n    uint256 addedValue\r\n  )\r\n    public\r\n    override\r\n    returns(bool)\r\n  {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n    return true;\r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue)\r\n    public\r\n    override\r\n    returns(bool)\r\n  {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);\r\n    return true;\r\n  }\r\n\r\n  function isSniper(address account)\r\n    public\r\n    view\r\n    override\r\n    returns(bool)\r\n  {\r\n    return _isSniper[account];\r\n  }\r\n\r\n  // There is no way to add to the blacklist except through the initial sniper check.\r\n  // But this can remove from the blacklist if someone human somehow made it onto the list.\r\n  function removeSniper(address account)\r\n    external\r\n    override\r\n    onlyRole(DEFAULT_ADMIN_ROLE)\r\n  {\r\n    require(_isSniper[account], 'Account is not a recorded sniper.');\r\n    _isSniper[account] = false;\r\n  }\r\n\r\n  function setSniperProtectionEnabled(bool enabled)\r\n    external\r\n    override\r\n    onlyRole(DEFAULT_ADMIN_ROLE)\r\n  {\r\n    _sniperProtection = enabled;\r\n  }\r\n\r\n  // developers have the option to pinpoint and exclude bots from trading on launch.\r\n  function addBotToList(address account) public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n    require(block.number - _liqAddBlock < _manualSnipeBlock);\r\n    _isSniper[account] = true;\r\n  }\r\n\r\n  function enableTrading() external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n    _tradingEnabled = true;\r\n  }\r\n\r\n  // adjusted to allow for smaller than 1%'s, as low as 0.1%\r\n  function setMaxTxPercent(uint256 maxTxPercent_)\r\n    public\r\n    override\r\n    onlyRole(DEFAULT_ADMIN_ROLE)\r\n  {\r\n    require(maxTxPercent_ >= 1); // cannot set to 0.\r\n\r\n    // division by 1000, set to 20 for 2%, set to 2 for 0.2%\r\n    _maxTxAmount = (_totalSupply * maxTxPercent_) / 1000;\r\n  }\r\n\r\n  function maxTxAmountUI()\r\n    external\r\n    view\r\n    override\r\n    returns(uint256)\r\n  {\r\n    return _maxTxAmount / uint256(_decimals);\r\n  }\r\n\r\n  // adjusted to allow for smaller than 1%'s, as low as 0.1%\r\n  function setMaxWalletPercent(uint256 maxWalletPercent_)\r\n    public\r\n    override\r\n    onlyRole(DEFAULT_ADMIN_ROLE)\r\n  {\r\n    require(maxWalletPercent_ >= 1); // cannot set to 0.\r\n\r\n    // division by 1000, set to 20 for 2%, set to 2 for 0.2%\r\n    _maxWalletAmount = (_totalSupply * maxWalletPercent_) / 1000;\r\n  }\r\n\r\n  function maxWalletUI()\r\n    external\r\n    view\r\n    override\r\n    returns(uint256)\r\n  {\r\n    return _maxWalletAmount / uint256(_decimals);\r\n  }\r\n\r\n  function setSwapAndLiquifyEnabled(bool _enabled)\r\n    external\r\n    override\r\n    onlyRole(DEFAULT_ADMIN_ROLE)\r\n  {\r\n    swapAndLiquifyEnabled = _enabled;\r\n    emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n  }\r\n\r\n  function excludeFromDividends(address exclude)\r\n    external\r\n    override\r\n    onlyRole(DEFAULT_ADMIN_ROLE)\r\n  {\r\n    dividendTracker.excludeFromDividends(address(exclude));\r\n  }\r\n\r\n  function excludeFromMaxWallet(address account)\r\n    external\r\n    override\r\n    onlyRole(DEFAULT_ADMIN_ROLE)\r\n  {\r\n    _isExcludedFromMaxWallet[account] = true;\r\n  }\r\n\r\n  function includeInMaxWallet(address account)\r\n    external\r\n    override\r\n    onlyRole(DEFAULT_ADMIN_ROLE)\r\n  {\r\n    _isExcludedFromMaxWallet[account] = false;\r\n  }\r\n\r\n  function excludeFromMaxTx(address account)\r\n    external\r\n    override\r\n    onlyRole(DEFAULT_ADMIN_ROLE)\r\n  {\r\n    _isExcludedFromMaxTx[account] = true;\r\n  }\r\n\r\n  function includeInMaxTx(address account)\r\n    external\r\n    override\r\n    onlyRole(DEFAULT_ADMIN_ROLE)\r\n  {\r\n    _isExcludedFromMaxTx[account] = false;\r\n  }\r\n\r\n  function excludeFromFee(address account)\r\n    external\r\n    override\r\n    onlyRole(DEFAULT_ADMIN_ROLE)\r\n  {\r\n    _isExcludedFromFee[account] = true;\r\n  }\r\n\r\n  function includeInFee(address account)\r\n    external\r\n    override\r\n    onlyRole(DEFAULT_ADMIN_ROLE)\r\n  {\r\n    _isExcludedFromFee[account] = false;\r\n  }\r\n\r\n  function setDxSaleAddress(address dxRouter, address presaleRouter)\r\n    external\r\n    override\r\n    onlyRole(DEFAULT_ADMIN_ROLE)\r\n  {\r\n    require(setPresaleAddresses == true, 'You can only set the presale addresses once!');\r\n\r\n    setPresaleAddresses = false;\r\n    _liquidityHolders[dxRouter] = true;\r\n    _isExcludedFromFee[dxRouter] = true;\r\n    _liquidityHolders[presaleRouter] = true;\r\n    _isExcludedFromFee[presaleRouter] = true;\r\n    _isExcludedFromMaxTx[dxRouter] = true;\r\n    _isExcludedFromMaxTx[presaleRouter] = true;\r\n    _isExcludedFromMaxWallet[dxRouter] = true;\r\n    _isExcludedFromMaxWallet[presaleRouter] = true;\r\n  }\r\n\r\n  function setAutomatedMarketMakerPair(address pair, bool value)\r\n    external\r\n    override\r\n    onlyRole(DEFAULT_ADMIN_ROLE)\r\n  {\r\n    require(\r\n      pair != pancakeswapV2Pair,\r\n      'NanoDoge: The PancakeSwap pair cannot be removed from automatedMarketMakerPairs'\r\n    );\r\n\r\n    _setAutomatedMarketMakerPair(pair, value);\r\n  }\r\n\r\n  function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n    require(\r\n      automatedMarketMakerPairs[pair] != value,\r\n      'NanoDoge: Automated market maker pair is already set to that value'\r\n    );\r\n\r\n    automatedMarketMakerPairs[pair] = value;\r\n\r\n    if(value) {\r\n      dividendTracker.excludeFromDividends(pair);\r\n    }\r\n\r\n    emit SetAutomatedMarketMakerPair(pair, value);\r\n  }\r\n\r\n  function updateClaimWait(uint256 claimWait)\r\n    external\r\n    override\r\n    onlyRole(DEFAULT_ADMIN_ROLE)\r\n  {\r\n    dividendTracker.updateClaimWait(claimWait);\r\n  }\r\n\r\n  function getClaimWait()\r\n    external\r\n    view\r\n    override\r\n    returns(uint256)\r\n  {\r\n    return dividendTracker.claimWait();\r\n  }\r\n\r\n  function getTotalDividendsDistributed()\r\n    external\r\n    view\r\n    override\r\n    returns(uint256)\r\n  {\r\n    return dividendTracker.totalDividendsDistributed();\r\n  }\r\n\r\n  function withdrawableDividendOf(address account)\r\n    external\r\n    view\r\n    override\r\n    returns(uint256)\r\n  {\r\n    return dividendTracker.withdrawableDividendOf(account);\r\n  }\r\n\r\n  function dividendRewardTokenBalanceOf(address account)\r\n    external\r\n    view\r\n    override\r\n    returns(uint256)\r\n  {\r\n    return dividendTracker.balanceOf(account);\r\n  }\r\n\r\n  function getAccountDividendsInfo(address account)\r\n    external\r\n    view\r\n    override\r\n    returns(\r\n      address,\r\n      int256,\r\n      int256,\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256\r\n    )\r\n  {\r\n    return dividendTracker.getAccount(account);\r\n  }\r\n\r\n  function getAccountDividendsInfoAtIndex(uint256 index)\r\n    external\r\n    view\r\n    override\r\n    returns(\r\n      address,\r\n      int256,\r\n      int256,\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256\r\n    )\r\n  {\r\n    return dividendTracker.getAccountAtIndex(index);\r\n  }\r\n\r\n  function processDividendTracker(uint256 gas) external override {\r\n    (\r\n      uint256 iterations,\r\n      uint256 claims,\r\n      uint256 lastProcessedIndex\r\n    ) = dividendTracker.process(gas);\r\n\r\n    emit ProcessedDividendTracker(\r\n      iterations,\r\n      claims,\r\n      lastProcessedIndex,\r\n      false,\r\n      gas,\r\n      tx.origin\r\n    );\r\n  }\r\n\r\n  function claim() external override {\r\n    dividendTracker.processAccount(payable(msg.sender), false);\r\n  }\r\n\r\n  function getLastProcessedIndex()\r\n    external\r\n    view\r\n    override\r\n    returns(uint256)\r\n  {\r\n    return dividendTracker.getLastProcessedIndex();\r\n  }\r\n\r\n  function getNumberOfDividendTokenHolders()\r\n    external\r\n    view\r\n    override\r\n    returns(uint256)\r\n  {\r\n    return dividendTracker.getNumberOfTokenHolders();\r\n  }\r\n\r\n  function _removeAllFee() private {\r\n    if(_totalFee == 0) {\r\n      return;\r\n    }\r\n\r\n    _previousTotalFee = _totalFee;\r\n    _totalFee = 0;\r\n  }\r\n\r\n  function _restoreAllFee() private {\r\n    _totalFee = _previousTotalFee;\r\n  }\r\n\r\n  function isExcludedFromFee(address account)\r\n    public\r\n    view\r\n    override\r\n    returns(bool)\r\n  {\r\n    return _isExcludedFromFee[account];\r\n  }\r\n\r\n  function isExcludedFromMaxTx(address account)\r\n    public\r\n    view\r\n    override\r\n    returns(bool)\r\n  {\r\n    return _isExcludedFromMaxTx[account];\r\n  }\r\n\r\n  function isExcludedFromMaxWallet(address account)\r\n    public\r\n    view\r\n    override\r\n    returns(bool)\r\n  {\r\n    return _isExcludedFromMaxWallet[account];\r\n  }\r\n\r\n  function checkWalletLimit(address to, uint256 amount)\r\n    internal\r\n    view\r\n  {\r\n    if(maxWalletEnabled) {\r\n      uint256 contractBalanceRecepient = balanceOf(to);\r\n\r\n      require(\r\n        contractBalanceRecepient + amount <= _maxWalletAmount || _isExcludedFromMaxWallet[to],\r\n        'Max Wallet Amount Exceeded'\r\n      );\r\n    }\r\n  }\r\n\r\n  function checkTxLimit(address from, address to, uint256 amount) internal view {\r\n    if(from == pancakeswapV2Pair) {\r\n      require(amount <= _maxTxAmount || _isExcludedFromMaxTx[to], 'TX Limit Exceeded');\r\n    } else {\r\n      require(amount <= _maxTxAmount || _isExcludedFromMaxTx[from], 'TX Limit Exceeded');\r\n    }\r\n  }\r\n\r\n  function _approve(\r\n    address owner,\r\n    address spender,\r\n    uint256 amount\r\n  ) private {\r\n    require(owner != address(0), 'ERC20: approve from the zero address');\r\n    require(spender != address(0), 'ERC20: approve to the zero address');\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  function _transfer(address from, address to, uint256 amount) private {\r\n    require(from != address(0), 'ERC20: transfer from the zero address');\r\n    require(to != address(0), 'ERC20: transfer to the zero address');\r\n    require(amount > 0, 'Transfer amount must be greater than zero');\r\n\r\n    if(!_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\r\n      require(_tradingEnabled, 'Trading is currently disabled');\r\n    }\r\n\r\n    checkWalletLimit(to, amount);\r\n    checkTxLimit(from, to, amount);\r\n\r\n    // is the token balance of this contract address over the min number of\r\n    // tokens that we need to initiate a swap + liquidity lock?\r\n    // also, don't get caught in a circular liquidity event.\r\n    // also, don't swap & liquify if sender is pancakeswap pair.\r\n    uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n    if(contractTokenBalance >= _maxTxAmount) {\r\n      contractTokenBalance = _maxTxAmount;\r\n    }\r\n\r\n    if(\r\n      (contractTokenBalance >= _numTokensSellToAddToLiquidity)\r\n        && !inSwapAndLiquify\r\n        && from != pancakeswapV2Pair\r\n        && swapAndLiquifyEnabled\r\n    ) {\r\n      // set inSwapAndLiquify to true so the contract isnt looping through adding liquididty\r\n      inSwapAndLiquify = true;\r\n\r\n      contractTokenBalance = _numTokensSellToAddToLiquidity;\r\n      uint256 swapForLiq = (contractTokenBalance * _liquidityFee) / _totalFee;\r\n      _swapAndLiquify(swapForLiq);\r\n\r\n      uint256 swapForDividends = (contractTokenBalance * _dividendRewardsFee) / _totalFee;\r\n      _swapAndSendTokenDividends(swapForDividends);\r\n\r\n      uint256 swapForMarketing = contractTokenBalance - swapForDividends - swapForLiq;\r\n      _swapTokensForMarketing(swapForMarketing);\r\n\r\n      // dust ETH after executing all swaps\r\n      _withdrawableBalance = address(this).balance;\r\n\r\n      inSwapAndLiquify = false;\r\n    }\r\n\r\n    // indicates if fee should be deducted from transfer\r\n    bool takeFee = true;\r\n\r\n    // if any account belongs to _isExcludedFromFee account then remove the fee\r\n    if(_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n      takeFee = false;\r\n    }\r\n\r\n    // transfer amount, it will take tax, burn, liquidity fee\r\n    _tokenTransfer(from, to, amount, takeFee);\r\n  }\r\n\r\n  function _swapAndLiquify(uint256 tokens) private {\r\n    // split the contract balance into halves\r\n    uint256 half = (tokens / 2);\r\n    uint256 otherHalf = tokens - half;\r\n\r\n    // capture the contract's current ETH balance.\r\n    // this is so that we can capture exactly the amount of ETH that the\r\n    // swap creates, and not make the liquidity event include any ETH that\r\n    // has been manually sent to the contract\r\n    uint256 initialBalance = address(this).balance;\r\n\r\n    // swap tokens for ETH\r\n    _swapTokensForETH(half);\r\n\r\n    // get the delta balance from the swap\r\n    uint256 deltaBalance = (address(this).balance - initialBalance);\r\n\r\n    // add liquidity to pancakeswap\r\n    _addLiquidity(otherHalf, deltaBalance);\r\n\r\n    emit SwapAndLiquify(half, deltaBalance, otherHalf);\r\n  }\r\n\r\n  function _swapTokensForETH(uint256 tokenAmount) private {\r\n    // generate the pancakeswap pair path of token -> weth\r\n    address[] memory path = new address[](2);\r\n    path[0] = address(this);\r\n    path[1] = pancakeswapV2Router.WETH();\r\n\r\n    _approve(address(this), address(pancakeswapV2Router), tokenAmount);\r\n\r\n    // make the swap\r\n    pancakeswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n      tokenAmount,\r\n      0, // accept any amount of ETH\r\n      path,\r\n      address(this),\r\n      block.timestamp\r\n    );\r\n  }\r\n\r\n  function _swapTokensForMarketing(uint256 tokenAmount) private {\r\n    // generate the pancakeswap pair path of token -> weth\r\n    address[] memory path = new address[](2);\r\n    path[0] = address(this);\r\n    path[1] = pancakeswapV2Router.WETH();\r\n\r\n    _approve(address(this), address(pancakeswapV2Router), tokenAmount);\r\n\r\n    // make the swap\r\n    pancakeswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n      tokenAmount,\r\n      0, // accept any amount of ETH\r\n      path,\r\n      _marketingWallet,\r\n      block.timestamp\r\n    );\r\n  }\r\n\r\n  function withdrawLockedETH(address recipient)\r\n    external\r\n    override\r\n    nonReentrant\r\n    onlyRole(DEFAULT_ADMIN_ROLE)\r\n  {\r\n    require(recipient != address(0), 'Cannot withdraw the ETH balance to the zero address');\r\n    require(_withdrawableBalance > 0, 'The ETH balance must be greater than 0');\r\n\r\n    uint256 amount = _withdrawableBalance;\r\n    _withdrawableBalance = 0;\r\n\r\n    (bool success,) = payable(recipient).call{value: amount}('');\r\n\r\n    if(!success) {\r\n      revert();\r\n    }\r\n  }\r\n\r\n  function _swapTokensForDividends(uint256 tokenAmount, address recipient) private {\r\n    // generate the pancakeswap pair path of weth -> dividend\r\n    address[] memory path = new address[](3);\r\n    path[0] = address(this);\r\n    path[1] = pancakeswapV2Router.WETH();\r\n    path[2] = _dividendRewardToken;\r\n\r\n    _approve(address(this), address(pancakeswapV2Router), tokenAmount);\r\n\r\n    // make the swap\r\n    pancakeswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n      tokenAmount,\r\n      0, // accept any amount of tokens\r\n      path,\r\n      recipient,\r\n      block.timestamp\r\n    );\r\n  }\r\n\r\n  // withdraw any tokens that are not supposed to be insided this contract.\r\n  function withdrawLockedTokens(address recipient, address _token)\r\n    external\r\n    override\r\n    onlyRole(DEFAULT_ADMIN_ROLE)\r\n  {\r\n    require(_token != pancakeswapV2Router.WETH());\r\n    require(_token != address(this));\r\n\r\n    uint256 amountToWithdraw = IERC20(_token).balanceOf(address(this));\r\n    IERC20(_token).transfer(payable(recipient), amountToWithdraw);\r\n  }\r\n\r\n  function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n    // approve token transfer to cover all possible scenarios\r\n    _approve(address(this), address(pancakeswapV2Router), tokenAmount);\r\n\r\n    // add the liquidity\r\n    pancakeswapV2Router.addLiquidityETH{value: ethAmount}(\r\n      address(this),\r\n      tokenAmount,\r\n      0, // slippage is unavoidable\r\n      0, // slippage is unavoidable\r\n      _liquidityWallet,\r\n      block.timestamp\r\n    );\r\n  }\r\n\r\n  function _checkLiquidityAdd(address from, address to) private {\r\n    // if liquidity is added by the _liquidityholders set trading enables to true and start the anti sniper timer\r\n    require(!_hasLiqBeenAdded, 'Liquidity already added and marked.');\r\n\r\n    if(_liquidityHolders[from] && to == pancakeswapV2Pair) {\r\n      _hasLiqBeenAdded = true;\r\n      _tradingEnabled = true;\r\n      _liqAddBlock = block.number;\r\n    }\r\n  }\r\n\r\n  // this method is responsible for taking all fee, if takeFee is true\r\n  function _tokenTransfer(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount,\r\n    bool takeFee\r\n  ) private {\r\n    // failsafe, disable the whole system if needed.\r\n    if(_sniperProtection) {\r\n      // if sender is a sniper address, reject the sell.\r\n      if(isSniper(sender)) {\r\n        revert('Sniper rejected.');\r\n      }\r\n\r\n      // check if this is the liquidity adding tx to startup.\r\n      if(!_hasLiqBeenAdded) {\r\n        _checkLiquidityAdd(sender, recipient);\r\n      } else {\r\n        if(\r\n          _liqAddBlock > 0\r\n            && sender == pancakeswapV2Pair\r\n            && !_liquidityHolders[sender]\r\n            && !_liquidityHolders[recipient]\r\n        ) {\r\n          if(block.number - _liqAddBlock < _snipeBlockAmount) {\r\n            _isSniper[recipient] = true;\r\n            snipersCaught++;\r\n            emit SniperCaught(recipient);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if(!takeFee) {\r\n      _removeAllFee();\r\n    }\r\n\r\n    _takeLiquidityAndTransfer(sender, recipient, amount);\r\n\r\n    try dividendTracker.setBalance(payable(sender), balanceOf(sender)) {} catch {}\r\n    try dividendTracker.setBalance(payable(recipient), balanceOf(recipient)) {} catch {}\r\n\r\n    if(!inSwapAndLiquify) {\r\n      uint256 gas = gasForProcessing;\r\n\r\n      try dividendTracker.process(gas) returns(\r\n        uint256 iterations,\r\n        uint256 claims,\r\n        uint256 lastProcessedIndex\r\n      ) {\r\n        emit ProcessedDividendTracker(\r\n          iterations,\r\n          claims,\r\n          lastProcessedIndex,\r\n          true,\r\n          gas,\r\n          tx.origin\r\n        );\r\n      } catch {}\r\n    }\r\n\r\n    if(!takeFee) {\r\n      _restoreAllFee();\r\n    }\r\n  }\r\n\r\n  function _takeLiquidityAndTransfer(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) private {\r\n    _balances[sender] -= amount;\r\n\r\n    uint256 liquidityAmount = (amount / 100) * _totalFee;\r\n    uint256 transferAmount = amount - liquidityAmount;\r\n\r\n    _balances[recipient] += transferAmount;\r\n\r\n    if(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) {\r\n      emit Transfer(sender, recipient, transferAmount);\r\n      return;\r\n    }\r\n\r\n    _balances[address(this)] += liquidityAmount;\r\n\r\n    emit Transfer(sender, address(this), liquidityAmount);\r\n    emit Transfer(sender, recipient, transferAmount);\r\n  }\r\n\r\n  function setMarketingWallet(address payable newWallet)\r\n    external\r\n    override\r\n    onlyRole(DEFAULT_ADMIN_ROLE)\r\n  {\r\n    require(_marketingWallet != newWallet, 'Wallet already set!');\r\n    _marketingWallet = newWallet;\r\n  }\r\n\r\n  function setLiquidityWallet(address payable newWallet)\r\n    external\r\n    override\r\n    onlyRole(DEFAULT_ADMIN_ROLE)\r\n  {\r\n    require(_liquidityWallet != newWallet, 'Wallet already set!');\r\n    _liquidityWallet = newWallet;\r\n  }\r\n\r\n  function updateDividendTracker(address newAddress)\r\n    external\r\n    override\r\n    onlyRole(DEFAULT_ADMIN_ROLE)\r\n  {\r\n    require(\r\n      newAddress != address(dividendTracker),\r\n      'NanoDogeCoin: The dividend tracker already has that address'\r\n    );\r\n\r\n    DividendTracker newDividendTracker = DividendTracker(payable(newAddress));\r\n\r\n    require(\r\n      newDividendTracker.owner() == address(this),\r\n      'NanoDogeCoin: The new dividend tracker must be owned by the token contract'\r\n    );\r\n\r\n    newDividendTracker.excludeFromDividends(address(newDividendTracker));\r\n    newDividendTracker.excludeFromDividends(address(this));\r\n    newDividendTracker.excludeFromDividends(msg.sender);\r\n    newDividendTracker.excludeFromDividends(address(pancakeswapV2Router));\r\n\r\n    emit UpdateDividendTracker(newAddress, address(dividendTracker));\r\n\r\n    dividendTracker = newDividendTracker;\r\n  }\r\n\r\n  function _swapAndSendTokenDividends(uint256 tokens) private {\r\n    _swapTokensForDividends(tokens, address(this));\r\n    uint256 dividends = IERC20(_dividendRewardToken).balanceOf(address(this));\r\n    bool success = IERC20(_dividendRewardToken).transfer(address(dividendTracker), dividends);\r\n\r\n    if(success) {\r\n      dividendTracker.distributeRewardDividends(dividends);\r\n      emit SendDividends(tokens, dividends);\r\n    }\r\n  }\r\n\r\n  function changeFees(\r\n    uint256 liquidityFee,\r\n    uint256 marketingFee,\r\n    uint256 dividendFee\r\n  )\r\n    public\r\n    override\r\n    onlyRole(DEFAULT_ADMIN_ROLE)\r\n  {\r\n    // fees are setup so they can not exceed 30% in total\r\n    // and specific limits for each one.\r\n    require(liquidityFee <= 5);\r\n    require(marketingFee <= 5);\r\n    require(dividendFee <= 20);\r\n\r\n    _liquidityFee = liquidityFee;\r\n    _marketingFee = marketingFee;\r\n    _dividendRewardsFee = dividendFee;\r\n\r\n    _totalFee = liquidityFee + marketingFee + dividendFee;\r\n  }\r\n\r\n  receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"supply_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTxPercent_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWalletPercent_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityThresholdPercentage_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dividendRewardsFee_\",\"type\":\"uint256\"},{\"internalType\":\"address[3]\",\"name\":\"addresses_\",\"type\":\"address[3]\"},{\"internalType\":\"address\",\"name\":\"v2Router_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeMultipleAccountsFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldLiquidityWallet\",\"type\":\"address\"}],\"name\":\"LiquidityWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sniperAddress\",\"type\":\"address\"}],\"name\":\"SniperCaught\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"half\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"otherHalf\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dividendRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addBotToList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dividendFee\",\"type\":\"uint256\"}],\"name\":\"changeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendRewardTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract DividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exclude\",\"type\":\"address\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountDividendsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccountDividendsInfoAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isSniper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmountUI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletUI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeswapV2Router\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeSniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dxRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"presaleRouter\",\"type\":\"address\"}],\"name\":\"setDxSaleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setLiquidityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent_\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWalletPercent_\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSniperProtectionEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snipersCaught\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimWait\",\"type\":\"uint256\"}],\"name\":\"updateClaimWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawLockedETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawLockedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NanoDogeCoin", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000038d7ea4c6800000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000f00000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000489df2e2918b1d323546495d5c51fa0651c3fc13000000000000000000000000489df2e2918b1d323546495d5c51fa0651c3fc1300000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000000000000000000000000000000000000000000d4e616e6f20446f6765636f696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034e44430000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://aa3e1634c8ea1cbcaa9cdc8daef4ec1db433d812d169155c6fa5ed6868096489"}