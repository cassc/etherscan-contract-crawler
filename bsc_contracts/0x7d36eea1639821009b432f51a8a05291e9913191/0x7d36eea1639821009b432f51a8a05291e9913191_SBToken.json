{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity =0.8.19;\r\n\r\n/// @notice Simple single owner authorization mixin.\r\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\r\nabstract contract Owned {\r\n    /*//////////////////////////////////////////////////////////////\r\n                                 EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            OWNERSHIP STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    address public owner;\r\n\r\n    modifier onlyOwner() virtual {\r\n        require(msg.sender == owner, \"UNAUTHORIZED\");\r\n\r\n        _;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                               CONSTRUCTOR\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                             OWNERSHIP LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        owner = newOwner;\r\n\r\n        emit OwnershipTransferred(msg.sender, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract ExcludedFromFeeList is Owned {\r\n    mapping(address => bool) internal _isExcludedFromFee;\r\n\r\n    event ExcludedFromFee(address account);\r\n    event IncludedToFee(address account);\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n        emit ExcludedFromFee(account);\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n        emit IncludedToFee(account);\r\n    }\r\n\r\n    function excludeMultipleAccountsFromFee(address[] calldata accounts) public onlyOwner {\r\n        for (uint256 i = 0; i < accounts.length;) {\r\n            _isExcludedFromFee[accounts[i]] = true;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract ERC20 {\r\n    /*//////////////////////////////////////////////////////////////\r\n                                 EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 amount\r\n    );\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            METADATA STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    uint8 public immutable decimals;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                              ERC20 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    uint256 public immutable totalSupply;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals,\r\n        uint256 _totalSupply\r\n    ) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        totalSupply = _totalSupply;\r\n        unchecked {\r\n            balanceOf[msg.sender] += _totalSupply;\r\n        }\r\n\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                               ERC20 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        _transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\r\n\r\n        if (allowed != type(uint256).max)\r\n            allowance[from][msg.sender] = allowed - amount;\r\n\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        balanceOf[from] -= amount;\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n        emit Transfer(from, to, amount);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function getAmountsOut(\r\n        uint256 amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function transferUSDT(address to, uint256 amount) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint value,\r\n        uint deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint amount0,\r\n        uint amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint);\r\n\r\n    function price1CumulativeLast() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n\r\n    function swap(\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\naddress constant USDT = 0x55d398326f99059fF775485246999027B3197955;\r\naddress constant ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\ncontract Distributor {\r\n    constructor() {\r\n        IERC20(USDT).approve(msg.sender, type(uint256).max);\r\n    }\r\n}\r\n\r\nabstract contract SimpleDexBaseUSDT {\r\n    bool public inSwapAndLiquify;\r\n    IUniswapV2Router constant uniswapV2Router = IUniswapV2Router(ROUTER);\r\n    address public immutable uniswapV2Pair;\r\n    Distributor public immutable distributor;\r\n\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor() {\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), USDT);\r\n        distributor = new Distributor();\r\n    }\r\n\r\n    function _isAddLiquidity(address _sender, uint256 _amount) internal view returns (bool isAdd) {\r\n        if (_sender == uniswapV2Pair) {\r\n            return false;\r\n        }\r\n        IUniswapV2Pair mainPair = IUniswapV2Pair(uniswapV2Pair);\r\n        (uint256 r0, uint256 r1,) = mainPair.getReserves();\r\n        uint256 bal = IERC20(USDT).balanceOf(address(mainPair));\r\n        if (r1 == 0) {\r\n            return bal > 0;\r\n        }\r\n        uint256 uamount;\r\n        if (_amount == 0) uamount = 1;\r\n        else uamount = _amount * r0 / r1;\r\n        isAdd = bal >= (r0 + uamount);\r\n    }\r\n\r\n    function minUSDAddliqAmount() public view returns (uint256 uamount) {\r\n        IUniswapV2Pair mainPair = IUniswapV2Pair(uniswapV2Pair);\r\n        (uint256 r0, uint256 r1,) = mainPair.getReserves();\r\n        uamount = 1 ether * r0 / r1;\r\n    }\r\n\r\n    function _isRemoveLiquidity(address _recipient) internal view returns (bool isRemove) {\r\n        if (_recipient == uniswapV2Pair) {\r\n            return false;\r\n        }\r\n        IUniswapV2Pair mainPair = IUniswapV2Pair(uniswapV2Pair);\r\n        (uint256 r0,,) = mainPair.getReserves();\r\n        uint256 bal = IERC20(USDT).balanceOf(address(mainPair));\r\n        isRemove = r0 > bal;\r\n    }\r\n\r\n    function _isSell(address _recipient) internal view returns (bool) {\r\n        return _recipient == uniswapV2Pair;\r\n    }\r\n\r\n    function _isBuy(address _sender) internal view returns (bool) {\r\n        return _sender == uniswapV2Pair;\r\n    }\r\n}\r\n\r\nabstract contract LpDividend is Owned, SimpleDexBaseUSDT, ERC20 {\r\n    mapping(address => bool) public isDividendExempt;\r\n    mapping(address => bool) public isInShareholders;\r\n    uint256 public minPeriod = 30 minutes;\r\n    uint256 public lastLPFeefenhongTime;\r\n    address private fromAddress;\r\n    address private toAddress;\r\n    uint256 distributorGasForLp = 600_000;\r\n    address[] public shareholders;\r\n    uint256 currentIndex;\r\n    mapping(address => uint256) public shareholderIndexes;\r\n    uint256 public minDistribution = 10000;\r\n\r\n    uint256 public lpAccumulateU;\r\n\r\n    function setlpAccumulateU(uint256 _lpAccumulateU) external onlyOwner {\r\n        require(IERC20(USDT).balanceOf(address(this)) >= _lpAccumulateU, \">bal\");\r\n        lpAccumulateU = _lpAccumulateU;\r\n    }\r\n\r\n    constructor() {\r\n        isDividendExempt[address(0)] = true;\r\n        isDividendExempt[address(0xdead)] = true;\r\n        isDividendExempt[0x407993575c91ce7643a4d4cCACc9A98c36eE1BBE] = true;\r\n    }\r\n\r\n    function excludeFromDividend(address account) external onlyOwner {\r\n        isDividendExempt[account] = true;\r\n    }\r\n\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external onlyOwner {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n    }\r\n\r\n    function setDistributorGasForLp(uint256 _distributorGasForLp) external onlyOwner {\r\n        distributorGasForLp = _distributorGasForLp;\r\n    }\r\n\r\n    function setToUsersLp(address sender, address recipient) internal {\r\n        if (fromAddress == address(0)) fromAddress = sender;\r\n        if (toAddress == address(0)) toAddress = recipient;\r\n        if (!isDividendExempt[fromAddress] && fromAddress != uniswapV2Pair) {\r\n            setShare(fromAddress);\r\n        }\r\n        if (!isDividendExempt[toAddress] && toAddress != uniswapV2Pair) {\r\n            setShare(toAddress);\r\n        }\r\n        fromAddress = sender;\r\n        toAddress = recipient;\r\n    }\r\n\r\n    function dividendToUsersLp(address sender) public {\r\n        uint256 total = lpAccumulateU;\r\n        if (\r\n            total >= minDistribution && sender != address(this) && IERC20(USDT).balanceOf(address(this)) >= total\r\n                && shareholders.length > 0 && lastLPFeefenhongTime + minPeriod <= block.timestamp\r\n        ) {\r\n            processLp(distributorGasForLp);\r\n            lastLPFeefenhongTime = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function setShare(address shareholder) private {\r\n        if (isInShareholders[shareholder]) {\r\n            if (IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) {\r\n                quitShare(shareholder);\r\n            }\r\n        } else {\r\n            if (IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) return;\r\n            addShareholder(shareholder);\r\n            isInShareholders[shareholder] = true;\r\n        }\r\n    }\r\n\r\n    function addShareholder(address shareholder) private {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        address lastLPHolder = shareholders[shareholders.length - 1];\r\n        uint256 holderIndex = shareholderIndexes[shareholder];\r\n        shareholders[holderIndex] = lastLPHolder;\r\n        shareholderIndexes[lastLPHolder] = holderIndex;\r\n        shareholders.pop();\r\n    }\r\n\r\n    function quitShare(address shareholder) private {\r\n        removeShareholder(shareholder);\r\n        isInShareholders[shareholder] = false;\r\n    }\r\n\r\n    function processLp(uint256 gas) private {\r\n        uint256 shareholderCount = shareholders.length;\r\n        uint256 nowbanance = lpAccumulateU;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n        uint256 theLpTotalSupply = IERC20(uniswapV2Pair).totalSupply();\r\n        uint256 lockAmount = IERC20(uniswapV2Pair).balanceOf(0x407993575c91ce7643a4d4cCACc9A98c36eE1BBE);\r\n        theLpTotalSupply -= lockAmount;\r\n        uint256 accumulate;\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            address theHolder = shareholders[currentIndex];\r\n            uint256 percent;\r\n            unchecked {\r\n                percent = (nowbanance * (IERC20(uniswapV2Pair).balanceOf(theHolder))) / theLpTotalSupply;\r\n            }\r\n            if (percent > 0) {\r\n                IERC20(USDT).transfer(theHolder, percent);\r\n                accumulate += percent;\r\n            }\r\n            unchecked {\r\n                ++currentIndex;\r\n                ++iterations;\r\n                gasUsed += gasLeft - gasleft();\r\n                gasLeft = gasleft();\r\n            }\r\n        }\r\n        lpAccumulateU -= accumulate;\r\n    }\r\n}\r\n\r\nabstract contract BurnHolder is Owned, SimpleDexBaseUSDT, ERC20 {\r\n    mapping(address => bool) public isInCoinHolders;\r\n    uint256 public minCoinHolderAmount = 0.5 ether;\r\n    uint256 public lastLPFeefenhongTimeCoinHolder;\r\n    address[] public allCoinHolder;\r\n    uint256 currentCoinHolderIndex;\r\n    mapping(address => uint256) public coinHolderIndexes;\r\n    mapping(address => uint256) public burnOf;\r\n    uint256 public totalAccumulate;\r\n    uint256 public burngas = 50_0000;\r\n    uint256 public burnPeriod = 60;\r\n    uint256 public minBurnDiv = 1 ether;\r\n\r\n    function setisCoinHolderParams(uint256 _minCoinHolderAmount) external onlyOwner {\r\n        minCoinHolderAmount = _minCoinHolderAmount;\r\n    }\r\n\r\n    function setBurnPeriod(uint256 _burnPeriod) external onlyOwner {\r\n        burnPeriod = _burnPeriod;\r\n    }\r\n\r\n    function settotalAccumulate(uint256 _totalAccumulate) external onlyOwner {\r\n        require(IERC20(USDT).balanceOf(address(this)) >= _totalAccumulate, \">bal\");\r\n        totalAccumulate = _totalAccumulate;\r\n    }\r\n\r\n    function setburngas(uint256 _burngas) external onlyOwner {\r\n        burngas = _burngas;\r\n    }\r\n\r\n    function setminBurnDiv(uint256 _minBurnDiv) external onlyOwner {\r\n        minBurnDiv = _minBurnDiv;\r\n    }\r\n\r\n    function dividendToBurnHolder(uint256 _gas) public {\r\n        uint256 total = totalAccumulate;\r\n        if (\r\n            msg.sender != address(this) && total >= minBurnDiv && allCoinHolder.length > 0\r\n                && IERC20(USDT).balanceOf(address(this)) >= total\r\n                && lastLPFeefenhongTimeCoinHolder + burnPeriod <= block.timestamp\r\n        ) {\r\n            processBurnHolder(_gas);\r\n            lastLPFeefenhongTimeCoinHolder = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function dividendToCoinHolderEff() public {\r\n        uint256 total = totalAccumulate;\r\n        if (\r\n            msg.sender != address(this) && allCoinHolder.length > 0 && total >= minBurnDiv\r\n                && IERC20(USDT).balanceOf(address(this)) >= total\r\n                && lastLPFeefenhongTimeCoinHolder + burnPeriod <= block.timestamp\r\n        ) {\r\n            processCoinHolderEff();\r\n            lastLPFeefenhongTimeCoinHolder = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function setToBurnHolder(address sender, uint256 _amount) internal {\r\n        burnOf[sender] += _amount;\r\n        setShareCoinHolders(sender);\r\n    }\r\n\r\n    function setShareCoinHolders(address shareholder) private {\r\n        if (!isInCoinHolders[shareholder]) {\r\n            if (burnOf[shareholder] < minCoinHolderAmount) return;\r\n            addShareholderCoinHolders(shareholder);\r\n            isInCoinHolders[shareholder] = true;\r\n        }\r\n    }\r\n\r\n    function addShareholderCoinHolders(address shareholder) private {\r\n        coinHolderIndexes[shareholder] = allCoinHolder.length;\r\n        allCoinHolder.push(shareholder);\r\n    }\r\n\r\n    function processBurnHolder(uint256 gas) private {\r\n        uint256 shareholderCount = allCoinHolder.length;\r\n        uint256 nowbanance = totalAccumulate;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n        uint256 theLpTotalSupply = balanceOf[address(0xdead)];\r\n        uint256 accumulate;\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentCoinHolderIndex >= shareholderCount) {\r\n                currentCoinHolderIndex = 0;\r\n            }\r\n            address theHolder = allCoinHolder[currentCoinHolderIndex];\r\n            uint256 trAmount;\r\n\r\n            unchecked {\r\n                trAmount = (nowbanance * (burnOf[theHolder])) / theLpTotalSupply;\r\n            }\r\n            if (trAmount > 0) {\r\n                IERC20(USDT).transfer(theHolder, trAmount);\r\n                accumulate += trAmount;\r\n            }\r\n\r\n            unchecked {\r\n                ++currentCoinHolderIndex;\r\n                ++iterations;\r\n                gasUsed += gasLeft - gasleft();\r\n                gasLeft = gasleft();\r\n            }\r\n        }\r\n        totalAccumulate -= accumulate;\r\n    }\r\n\r\n    function processCoinHolderEff() private {\r\n        uint256 shareholderCount = allCoinHolder.length;\r\n        uint256 nowbanance = totalAccumulate;\r\n\r\n        uint256 theLpTotalSupply = balanceOf[address(0xdead)];\r\n        uint256 accumulate;\r\n\r\n        for (uint256 i = 0; i < shareholderCount; i++) {\r\n            address theHolder = allCoinHolder[i];\r\n            uint256 trAmount;\r\n            uint256 holderBal = burnOf[theHolder];\r\n\r\n            unchecked {\r\n                trAmount = (nowbanance * holderBal) / theLpTotalSupply;\r\n            }\r\n            if (trAmount > 0) {\r\n                IERC20(USDT).transfer(theHolder, trAmount);\r\n                accumulate += trAmount;\r\n            }\r\n        }\r\n\r\n        totalAccumulate -= accumulate;\r\n    }\r\n}\r\n\r\nabstract contract FirstLaunch is Owned {\r\n    uint256 public launchedAt;\r\n    uint256 public launchedAtTimestamp;\r\n\r\n    function launch() internal {\r\n        require(launchedAt == 0, \"Already launched boi\");\r\n        launchedAt = block.number;\r\n        launchedAtTimestamp = block.timestamp;\r\n    }\r\n}\r\n\r\ncontract SBToken is ExcludedFromFeeList, LpDividend, BurnHolder, FirstLaunch {\r\n    uint256 public autoSellAmount = 0.39 ether;\r\n    uint256 public accumulationVolumes;\r\n    uint256 public lastSwapTime;\r\n    uint256 public minSwapPeriods = 1 minutes;\r\n\r\n    mapping(address => address) public inviter;\r\n    mapping(address => uint256) public recommendNum;\r\n    mapping(address => uint256) public buyAmount;\r\n\r\n    mapping(address => uint256) public liqValue;\r\n\r\n    mapping(address => bool) public isTokenholder;\r\n    uint256 public totalHolders;\r\n    bool public presale;\r\n\r\n    mapping(address => bool) public isHavLimitExempt;\r\n\r\n    function setAutoAmount(uint256 _autoSellAmount) external onlyOwner {\r\n        autoSellAmount = _autoSellAmount;\r\n    }\r\n\r\n    function setPresale() external onlyOwner {\r\n        presale = true;\r\n    }\r\n\r\n    function setMinSwapPeriods(uint256 _minSwapPeriods) external onlyOwner {\r\n        minSwapPeriods = _minSwapPeriods;\r\n    }\r\n\r\n    function shouldSwapAndLiquify() private view returns (bool) {\r\n        bool overMinTokenBalance = accumulationVolumes >= 10 ether;\r\n        if (overMinTokenBalance && !inSwapAndLiquify && lastSwapTime + minSwapPeriods <= block.timestamp) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function sellUToHouders() public {\r\n        if (shouldSwapAndLiquify()) {\r\n            swapAndLiquify();\r\n        }\r\n    }\r\n\r\n    function swapAndLiquify() internal lockTheSwap {\r\n        uint256 swapamount = autoSellAmount;\r\n        if (balanceOf[address(this)] >= swapamount) {\r\n            swapTokensForUSDT(swapamount);\r\n            accumulationVolumes -= 10 ether;\r\n            lastSwapTime = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function swapTokensForUSDT(uint256 tokenAmount) internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = address(USDT);\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(distributor),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amount = IERC20(USDT).balanceOf(address(distributor));\r\n        uint256 toMarket = amount / 3;\r\n        uint256 toLp = amount - toMarket;\r\n        uint256 unit = toMarket / 10;\r\n\r\n        uint256 toburnu = toLp / 2;\r\n        totalAccumulate += toburnu;\r\n        lpAccumulateU += toLp - toburnu;\r\n\r\n        IERC20(USDT).transferFrom(address(distributor), 0xc5825Db579Bb87d3F2774Ec845EB3c6287e0D0C8, unit);\r\n        IERC20(USDT).transferFrom(address(distributor), 0x6eDa75461C5EcF57818b85687f7c82501D056F11, unit * 3 / 2);\r\n        IERC20(USDT).transferFrom(address(distributor), 0xa42A5D660ae54311F29Ef341AeA15327Df630F81, unit * 3 / 2);\r\n        IERC20(USDT).transferFrom(address(distributor), 0xC021C4B152Cc261e94c319546B5b316A43Fa5495, unit * 1);\r\n        IERC20(USDT).transferFrom(address(distributor), 0xfb38A3CD34D82D2095c01BfCC031F839f80F325A, unit * 5);\r\n        IERC20(USDT).transferFrom(address(distributor), address(this), toLp);\r\n\r\n        super._transfer(uniswapV2Pair, address(0), tokenAmount);\r\n        IUniswapV2Pair(uniswapV2Pair).sync();\r\n    }\r\n\r\n    constructor() Owned(msg.sender) ERC20(unicode\"\u4e0c19\", unicode\"\u4e0c19\", 18, 10000 ether) {\r\n        require(USDT < address(this));\r\n        excludeFromFee(msg.sender);\r\n        excludeFromFee(address(this));\r\n        isHavLimitExempt[msg.sender] = true;\r\n        isHavLimitExempt[address(this)] = true;\r\n        isHavLimitExempt[address(0)] = true;\r\n        isHavLimitExempt[uniswapV2Pair] = true;\r\n        isHavLimitExempt[address(0xdead)] = true;\r\n        totalHolders = 1;\r\n        allowance[address(this)][address(uniswapV2Router)] = type(uint256).max;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override {\r\n        if (inSwapAndLiquify) {\r\n            super._transfer(sender, recipient, amount);\r\n            return;\r\n        }\r\n\r\n        if (recipient == address(0xdead)) {\r\n            super._transfer(sender, recipient, amount);\r\n            setToBurnHolder(sender, amount); // set burn user\r\n            return;\r\n        }\r\n\r\n        if (launchedAt == 0 && recipient == uniswapV2Pair) {\r\n            require(_isExcludedFromFee[sender]);\r\n            launch();\r\n        }\r\n\r\n        setToUsersLp(sender, recipient); // set lp user\r\n        bool isAddLiq = _isAddLiquidity(sender, 0.5 ether);\r\n        bool isRemLiq = _isRemoveLiquidity(recipient);\r\n\r\n        if (!isTokenholder[recipient] && amount > 0) {\r\n            isTokenholder[recipient] = true;\r\n            totalHolders += 1;\r\n        }\r\n\r\n        if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) {\r\n            bool shouldInvite = (\r\n                balanceOf[recipient] == 0 && recipient != uniswapV2Pair && inviter[recipient] == address(0)\r\n                    && amount >= 1 gwei\r\n            );\r\n            if (shouldInvite) {\r\n                inviter[recipient] = sender;\r\n            }\r\n\r\n            if (sender == uniswapV2Pair || recipient == uniswapV2Pair) {\r\n                if (!isAddLiq && !isRemLiq) {\r\n                    accumulationVolumes += amount;\r\n                }\r\n            }\r\n\r\n            super._transfer(sender, recipient, amount);\r\n            dividendToUsersLp(sender); // div lp\r\n            dividendToBurnHolder(burngas);\r\n            if (balanceOf[sender] == 0) {\r\n                isTokenholder[recipient] = false;\r\n                if (totalHolders >= 1) totalHolders -= 1;\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (isAddLiq) {\r\n            super._transfer(sender, recipient, amount);\r\n            dividendToUsersLp(sender); // div lp\r\n            liqValue[sender] += amount;\r\n            return;\r\n        }\r\n\r\n        if (!_isExcludedFromFee[recipient]) {\r\n            require(balanceOf[recipient] + amount <= 5 ether || isHavLimitExempt[recipient], \"HAV Limit Exceeded\");\r\n        }\r\n\r\n        if (isRemLiq) {\r\n            super._transfer(sender, recipient, amount);\r\n            dividendToUsersLp(sender); // div lp\r\n            dividendToBurnHolder(burngas);\r\n            liqValue[recipient] -= amount;\r\n            return;\r\n        }\r\n\r\n        if (sender != uniswapV2Pair && burnOf[sender] < 0.5 ether && recommendNum[sender] < 2 && (totalHolders < 2000))\r\n        {\r\n            require(balanceOf[sender] > 1 ether, \"at least 1 coin\");\r\n            if (amount > balanceOf[sender] - 1 ether) {\r\n                amount = balanceOf[sender] - 1 ether;\r\n            }\r\n        }\r\n\r\n        if (_isSell(recipient)) {\r\n            dividendToUsersLp(sender); // div lp\r\n            dividendToBurnHolder(burngas);\r\n            sellUToHouders();\r\n            accumulationVolumes += amount;\r\n            super._transfer(sender, recipient, amount);\r\n            if (balanceOf[sender] == 0) {\r\n                isTokenholder[recipient] = false;\r\n                if (totalHolders >= 1) totalHolders -= 1;\r\n            }\r\n        } else if (_isBuy(sender)) {\r\n            require(presale, \"presale\");\r\n            accumulationVolumes += amount;\r\n            super._transfer(sender, recipient, amount);\r\n            buyAmount[recipient] += amount;\r\n            if (buyAmount[recipient] >= 1 ether) {\r\n                address upt = inviter[recipient];\r\n                if (upt != address(0)) {\r\n                    recommendNum[upt] += 1;\r\n                }\r\n            }\r\n        } else {\r\n            bool shouldInvite = (balanceOf[recipient] == 0 && inviter[recipient] == address(0) && amount >= 1 gwei);\r\n            if (shouldInvite) {\r\n                inviter[recipient] = sender;\r\n            }\r\n            super._transfer(sender, recipient, amount);\r\n            dividendToUsersLp(sender); // div lp\r\n            dividendToBurnHolder(burngas);\r\n            if (balanceOf[sender] == 0) {\r\n                isTokenholder[recipient] = false;\r\n                if (totalHolders >= 1) totalHolders -= 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    struct Users {\r\n        address account;\r\n        uint256 bal;\r\n    }\r\n\r\n    struct Too {\r\n        address z;\r\n        address o;\r\n    }\r\n\r\n    function multiTransfer(Users[] calldata users) external onlyOwner {\r\n        address from = msg.sender;\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            uint256 amount = users[i].bal;\r\n            address to = users[i].account;\r\n\r\n            balanceOf[from] -= amount;\r\n            balanceOf[to] += amount;\r\n            isTokenholder[to] = true;\r\n            emit Transfer(from, to, amount);\r\n        }\r\n        totalHolders = users.length;\r\n    }\r\n\r\n    function setMultiRecommendNumt(Users[] calldata users) external onlyOwner {\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            recommendNum[users[i].account] = users[i].bal;\r\n        }\r\n    }\r\n\r\n    function setMultiinviter(Too[] calldata users) external onlyOwner {\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            inviter[users[i].z] = users[i].o;\r\n        }\r\n    }\r\n\r\n    function setMultiBurnOf(Users[] calldata users) external onlyOwner {\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            burnOf[users[i].account] = users[i].bal;\r\n        }\r\n    }\r\n\r\n    function setMultiBuyAmount(Users[] calldata users) external onlyOwner {\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            buyAmount[users[i].account] = users[i].bal;\r\n        }\r\n    }\r\n\r\n    function setMultiAllCoinHolder(address[] calldata users) external onlyOwner {\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            coinHolderIndexes[users[i]] = i;\r\n            allCoinHolder.push(users[i]);\r\n            isInCoinHolders[users[i]] = true;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludedFromFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IncludedToFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accumulationVolumes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allCoinHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"burnOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burngas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"coinHolderIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract Distributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"dividendToBurnHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendToCoinHolderEff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"dividendToUsersLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"excludeMultipleAccountsFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwapAndLiquify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHavLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isInCoinHolders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isInShareholders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTokenholder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLPFeefenhongTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLPFeefenhongTimeCoinHolder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSwapTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAtTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liqValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpAccumulateU\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBurnDiv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minCoinHolderAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSwapPeriods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minUSDAddliqAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"uamount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bal\",\"type\":\"uint256\"}],\"internalType\":\"struct SBToken.Users[]\",\"name\":\"users\",\"type\":\"tuple[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"recommendNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellUToHouders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_autoSellAmount\",\"type\":\"uint256\"}],\"name\":\"setAutoAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnPeriod\",\"type\":\"uint256\"}],\"name\":\"setBurnPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_distributorGasForLp\",\"type\":\"uint256\"}],\"name\":\"setDistributorGasForLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSwapPeriods\",\"type\":\"uint256\"}],\"name\":\"setMinSwapPeriods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"setMultiAllCoinHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bal\",\"type\":\"uint256\"}],\"internalType\":\"struct SBToken.Users[]\",\"name\":\"users\",\"type\":\"tuple[]\"}],\"name\":\"setMultiBurnOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bal\",\"type\":\"uint256\"}],\"internalType\":\"struct SBToken.Users[]\",\"name\":\"users\",\"type\":\"tuple[]\"}],\"name\":\"setMultiBuyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bal\",\"type\":\"uint256\"}],\"internalType\":\"struct SBToken.Users[]\",\"name\":\"users\",\"type\":\"tuple[]\"}],\"name\":\"setMultiRecommendNumt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"z\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"o\",\"type\":\"address\"}],\"internalType\":\"struct SBToken.Too[]\",\"name\":\"users\",\"type\":\"tuple[]\"}],\"name\":\"setMultiinviter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burngas\",\"type\":\"uint256\"}],\"name\":\"setburngas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minCoinHolderAmount\",\"type\":\"uint256\"}],\"name\":\"setisCoinHolderParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpAccumulateU\",\"type\":\"uint256\"}],\"name\":\"setlpAccumulateU\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBurnDiv\",\"type\":\"uint256\"}],\"name\":\"setminBurnDiv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalAccumulate\",\"type\":\"uint256\"}],\"name\":\"settotalAccumulate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shareholderIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shareholders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAccumulate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SBToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://712e737fdb2e866ff46d5f6fa2f6e16a8802a00fbf0c77f00ee1f264e4f0165b"}