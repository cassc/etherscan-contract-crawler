{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ZeroXCross.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./helpers/errors.sol\\\";\\r\\nimport \\\"./ImplBase.sol\\\";\\r\\nimport \\\"./MiddlewareImplBase.sol\\\";\\r\\n\\r\\n/**\\r\\n// @title Movr Regisrtry Contract.\\r\\n// @notice This is the main contract that is called using fund movr.\\r\\n// This contains all the bridge and middleware ids.\\r\\n// RouteIds signify which bridge to be used.\\r\\n// Middleware Id signifies which aggregator will be used for swapping if required.\\r\\n*/\\r\\ncontract ZeroXCross is Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    address private constant NATIVE_TOKEN_ADDRESS =\\r\\n    address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\r\\n\\r\\n    ///@notice RouteData stores information for a route\\r\\n    struct RouteData {\\r\\n        address route;\\r\\n        bool isEnabled;\\r\\n        bool isMiddleware;\\r\\n    }\\r\\n    RouteData[] public routes;\\r\\n    modifier onlyExistingRoute(uint256 _routeId) {\\r\\n        require(\\r\\n            routes[_routeId].route != address(0),\\r\\n            MovrErrors.ROUTE_NOT_FOUND\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _owner) Ownable() {\\r\\n        // first route is for direct bridging\\r\\n        routes.push(RouteData(NATIVE_TOKEN_ADDRESS, true, true));\\r\\n        transferOwnership(_owner);\\r\\n    }\\r\\n\\r\\n    // Function to receive Ether. msg.data must be empty\\r\\n    receive() external payable {}\\r\\n\\r\\n    //\\r\\n    // Events\\r\\n    //\\r\\n    event NewRouteAdded(\\r\\n        uint256 routeID,\\r\\n        address route,\\r\\n        bool isEnabled,\\r\\n        bool isMiddleware\\r\\n    );\\r\\n    event RouteDisabled(uint256 routeID);\\r\\n    event ExecutionCompleted(\\r\\n        uint256 middlewareID,\\r\\n        uint256 bridgeID,\\r\\n        uint256 inputAmount\\r\\n    );\\r\\n\\r\\n    /**\\r\\n    // @param id route id of middleware to be used\\r\\n    // @param optionalNativeAmount is the amount of native asset that the route requires\\r\\n    // @param inputToken token address which will be swapped to\\r\\n    // BridgeRequest inputToken\\r\\n    // @param data to be used by middleware\\r\\n    */\\r\\n    struct MiddlewareRequest {\\r\\n        uint256 id;\\r\\n        uint256 optionalNativeAmount;\\r\\n        address inputToken;\\r\\n        bytes data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    // @param id route id of bridge to be used\\r\\n    // @param optionalNativeAmount optinal native amount, to be used\\r\\n    // when bridge needs native token along with ERC20\\r\\n    // @param inputToken token addresss which will be bridged\\r\\n    // @param data bridgeData to be used by bridge\\r\\n    */\\r\\n    struct BridgeRequest {\\r\\n        uint256 id;\\r\\n        uint256 optionalNativeAmount;\\r\\n        address inputToken;\\r\\n        bytes data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    // @param receiverAddress Recipient address to recieve funds on destination chain\\r\\n    // @param toChainId Destination ChainId\\r\\n    // @param amount amount to be swapped if middlewareId is 0  it will be\\r\\n    // the amount to be bridged\\r\\n    // @param middlewareRequest middleware Requestdata\\r\\n    // @param bridgeRequest bridge request data\\r\\n    */\\r\\n    struct UserRequest {\\r\\n        address receiverAddress;\\r\\n        uint256 toChainId;\\r\\n        uint256 amount;\\r\\n        MiddlewareRequest middlewareRequest;\\r\\n        BridgeRequest bridgeRequest;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    // @notice function responsible for calling the respective implementation\\r\\n    // depending on the bridge to be used\\r\\n    // If the middlewareId is 0 then no swap is required,\\r\\n    // we can directly bridge the source token to wherever required,\\r\\n    // else, we first call the Swap Impl Base for swapping to the required\\r\\n    // token and then start the bridging\\r\\n    // @dev It is required for isMiddleWare to be true for route 0 as it is a special case\\r\\n    // @param _userRequest calldata follows the input data struct\\r\\n    */\\r\\n    function outboundTransferTo(UserRequest calldata _userRequest)\\r\\n    external\\r\\n    payable\\r\\n    {\\r\\n        require(_userRequest.amount != 0, MovrErrors.INVALID_AMT);\\r\\n\\r\\n        // make sure bridge ID is not 0\\r\\n        require(\\r\\n            _userRequest.bridgeRequest.id != 0,\\r\\n            MovrErrors.INVALID_BRIDGE_ID\\r\\n        );\\r\\n\\r\\n        // make sure bridge input is provided\\r\\n        require(\\r\\n            _userRequest.bridgeRequest.inputToken != address(0),\\r\\n            MovrErrors.ADDRESS_0_PROVIDED\\r\\n        );\\r\\n\\r\\n        // load middleware info and validate\\r\\n        RouteData memory middlewareInfo = routes[\\r\\n        _userRequest.middlewareRequest.id\\r\\n        ];\\r\\n        require(\\r\\n            middlewareInfo.route != address(0) &&\\r\\n            middlewareInfo.isEnabled &&\\r\\n            middlewareInfo.isMiddleware,\\r\\n            MovrErrors.ROUTE_NOT_ALLOWED\\r\\n        );\\r\\n\\r\\n        // load bridge info and validate\\r\\n        RouteData memory bridgeInfo = routes[_userRequest.bridgeRequest.id];\\r\\n        require(\\r\\n            bridgeInfo.route != address(0) &&\\r\\n            bridgeInfo.isEnabled &&\\r\\n            !bridgeInfo.isMiddleware,\\r\\n            MovrErrors.ROUTE_NOT_ALLOWED\\r\\n        );\\r\\n\\r\\n        emit ExecutionCompleted(\\r\\n            _userRequest.middlewareRequest.id,\\r\\n            _userRequest.bridgeRequest.id,\\r\\n            _userRequest.amount\\r\\n        );\\r\\n\\r\\n        // if middlewareID is 0 it means we dont want to perform a action before bridging\\r\\n        // and directly want to move for bridging\\r\\n        if (_userRequest.middlewareRequest.id == 0) {\\r\\n            // perform the bridging\\r\\n            ImplBase(bridgeInfo.route).outboundTransferTo{value: msg.value}(\\r\\n                _userRequest.amount,\\r\\n                msg.sender,\\r\\n                _userRequest.receiverAddress,\\r\\n                _userRequest.bridgeRequest.inputToken,\\r\\n                _userRequest.toChainId,\\r\\n                _userRequest.bridgeRequest.data\\r\\n            );\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // we first perform an action using the middleware\\r\\n        // we determine if the input asset is a native asset, if yes we pass\\r\\n        // the amount as value, else we pass the optionalNativeAmount\\r\\n        uint256 _amountOut = MiddlewareImplBase(middlewareInfo.route)\\r\\n        .performAction{\\r\\n        value: _userRequest.middlewareRequest.inputToken ==\\r\\n        NATIVE_TOKEN_ADDRESS\\r\\n        ? _userRequest.amount +\\r\\n        _userRequest.middlewareRequest.optionalNativeAmount\\r\\n        : _userRequest.middlewareRequest.optionalNativeAmount\\r\\n        }(\\r\\n            msg.sender,\\r\\n            _userRequest.middlewareRequest.inputToken,\\r\\n            _userRequest.amount,\\r\\n            address(this),\\r\\n            _userRequest.middlewareRequest.data\\r\\n        );\\r\\n\\r\\n        // we mutate this variable if the input asset to bridge Impl is NATIVE\\r\\n        uint256 nativeInput = _userRequest.bridgeRequest.optionalNativeAmount;\\r\\n\\r\\n        // if the input asset is ERC20, we need to grant the bridge implementation approval\\r\\n        if (_userRequest.bridgeRequest.inputToken != NATIVE_TOKEN_ADDRESS) {\\r\\n            IERC20(_userRequest.bridgeRequest.inputToken).safeIncreaseAllowance(\\r\\n                bridgeInfo.route,\\r\\n                _amountOut\\r\\n            );\\r\\n        } else {\\r\\n            // if the input asset is native we need to set it as value\\r\\n            nativeInput =\\r\\n            _amountOut +\\r\\n            _userRequest.bridgeRequest.optionalNativeAmount;\\r\\n        }\\r\\n\\r\\n        // send off to bridge\\r\\n        ImplBase(bridgeInfo.route).outboundTransferTo{value: nativeInput}(\\r\\n            _amountOut,\\r\\n            address(this),\\r\\n            _userRequest.receiverAddress,\\r\\n            _userRequest.bridgeRequest.inputToken,\\r\\n            _userRequest.toChainId,\\r\\n            _userRequest.bridgeRequest.data\\r\\n        );\\r\\n    }\\r\\n\\r\\n    //\\r\\n    // Route management functions\\r\\n    //\\r\\n\\r\\n    /// @notice add routes to the registry.\\r\\n    function addRoutes(RouteData[] calldata _routes)\\r\\n    external\\r\\n    onlyOwner\\r\\n    returns (uint256[] memory)\\r\\n    {\\r\\n        require(_routes.length != 0, MovrErrors.EMPTY_INPUT);\\r\\n        uint256[] memory _routeIds = new uint256[](_routes.length);\\r\\n        for (uint256 i = 0; i < _routes.length; i++) {\\r\\n            require(\\r\\n                _routes[i].route != address(0),\\r\\n                MovrErrors.ADDRESS_0_PROVIDED\\r\\n            );\\r\\n            routes.push(_routes[i]);\\r\\n            _routeIds[i] = routes.length - 1;\\r\\n            emit NewRouteAdded(\\r\\n                i,\\r\\n                _routes[i].route,\\r\\n                _routes[i].isEnabled,\\r\\n                _routes[i].isMiddleware\\r\\n            );\\r\\n        }\\r\\n\\r\\n        return _routeIds;\\r\\n    }\\r\\n\\r\\n    ///@notice disables the route  if required.\\r\\n    function disableRoute(uint256 _routeId)\\r\\n    external\\r\\n    onlyOwner\\r\\n    onlyExistingRoute(_routeId)\\r\\n    {\\r\\n        routes[_routeId].isEnabled = false;\\r\\n        emit RouteDisabled(_routeId);\\r\\n    }\\r\\n\\r\\n    function rescueFunds(\\r\\n        address _token,\\r\\n        address _receiverAddress,\\r\\n        uint256 _amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(_token).safeTransfer(_receiverAddress, _amount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nlibrary MovrErrors {\\r\\n    string internal constant ADDRESS_0_PROVIDED = \\\"ADDRESS_0_PROVIDED\\\";\\r\\n    string internal constant EMPTY_INPUT = \\\"EMPTY_INPUT\\\";\\r\\n    string internal constant LENGTH_MISMATCH = \\\"LENGTH_MISMATCH\\\";\\r\\n    string internal constant INVALID_VALUE = \\\"INVALID_VALUE\\\";\\r\\n    string internal constant INVALID_AMT = \\\"INVALID_AMT\\\";\\r\\n\\r\\n    string internal constant IMPL_NOT_FOUND = \\\"IMPL_NOT_FOUND\\\";\\r\\n    string internal constant ROUTE_NOT_FOUND = \\\"ROUTE_NOT_FOUND\\\";\\r\\n    string internal constant IMPL_NOT_ALLOWED = \\\"IMPL_NOT_ALLOWED\\\";\\r\\n    string internal constant ROUTE_NOT_ALLOWED = \\\"ROUTE_NOT_ALLOWED\\\";\\r\\n    string internal constant INVALID_CHAIN_DATA = \\\"INVALID_CHAIN_DATA\\\";\\r\\n    string internal constant CHAIN_NOT_SUPPORTED = \\\"CHAIN_NOT_SUPPORTED\\\";\\r\\n    string internal constant TOKEN_NOT_SUPPORTED = \\\"TOKEN_NOT_SUPPORTED\\\";\\r\\n    string internal constant NOT_IMPLEMENTED = \\\"NOT_IMPLEMENTED\\\";\\r\\n    string internal constant INVALID_SENDER = \\\"INVALID_SENDER\\\";\\r\\n    string internal constant INVALID_BRIDGE_ID = \\\"INVALID_BRIDGE_ID\\\";\\r\\n    string internal constant MIDDLEWARE_ACTION_FAILED =\\r\\n    \\\"MIDDLEWARE_ACTION_FAILED\\\";\\r\\n    string internal constant VALUE_SHOULD_BE_ZERO = \\\"VALUE_SHOULD_BE_ZERO\\\";\\r\\n    string internal constant VALUE_SHOULD_NOT_BE_ZERO = \\\"VALUE_SHOULD_NOT_BE_ZERO\\\";\\r\\n    string internal constant VALUE_NOT_ENOUGH = \\\"VALUE_NOT_ENOUGH\\\";\\r\\n    string internal constant VALUE_NOT_EQUAL_TO_AMOUNT = \\\"VALUE_NOT_EQUAL_TO_AMOUNT\\\";\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/ImplBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./helpers/errors.sol\\\";\\r\\n\\r\\n/**\\r\\n@title Abstract Implementation Contract.\\r\\n@notice All Bridge Implementation will follow this interface.\\r\\n*/\\r\\nabstract contract ImplBase is Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    address public registry;\\r\\n    address public constant NATIVE_TOKEN_ADDRESS =\\r\\n    address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\r\\n    event UpdateRegistryAddress(address indexed registryAddress);\\r\\n\\r\\n    constructor(address _registry) Ownable() {\\r\\n        registry = _registry;\\r\\n    }\\r\\n\\r\\n    modifier onlyRegistry() {\\r\\n        require(msg.sender == registry, MovrErrors.INVALID_SENDER);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function updateRegistryAddress(address newRegistry) external onlyOwner {\\r\\n        registry = newRegistry;\\r\\n        emit UpdateRegistryAddress(newRegistry);\\r\\n    }\\r\\n\\r\\n    function rescueFunds(\\r\\n        address token,\\r\\n        address userAddress,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(token).safeTransfer(userAddress, amount);\\r\\n    }\\r\\n\\r\\n    function outboundTransferTo(\\r\\n        uint256 _amount,\\r\\n        address _from,\\r\\n        address _receiverAddress,\\r\\n        address _token,\\r\\n        uint256 _toChainId,\\r\\n        bytes memory _extraData\\r\\n    ) external payable virtual;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/MiddlewareImplBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./helpers/errors.sol\\\";\\r\\n\\r\\n/**\\r\\n// @title Abstract Contract for middleware services.\\r\\n// @notice All middleware services will follow this interface.\\r\\n*/\\r\\nabstract contract MiddlewareImplBase is Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    address public immutable registry;\\r\\n\\r\\n    /// @notice only registry address is required.\\r\\n    constructor(address _registry) Ownable() {\\r\\n        registry = _registry;\\r\\n    }\\r\\n\\r\\n    modifier onlyRegistry {\\r\\n        require(msg.sender == registry, MovrErrors.INVALID_SENDER);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function performAction(\\r\\n        address from,\\r\\n        address fromToken,\\r\\n        uint256 amount,\\r\\n        address receiverAddress,\\r\\n        bytes memory data\\r\\n    ) external payable virtual returns (uint256);\\r\\n\\r\\n    function rescueFunds(\\r\\n        address token,\\r\\n        address userAddress,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(token).safeTransfer(userAddress, amount);\\r\\n    }\\r\\n\\r\\n    function withdrewNative() external onlyOwner{\\r\\n        payable (msg.sender).transfer(address(this).balance);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"middlewareID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bridgeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"}],\"name\":\"ExecutionCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"routeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"route\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isMiddleware\",\"type\":\"bool\"}],\"name\":\"NewRouteAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"routeID\",\"type\":\"uint256\"}],\"name\":\"RouteDisabled\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"route\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isMiddleware\",\"type\":\"bool\"}],\"internalType\":\"struct ZeroXCross.RouteData[]\",\"name\":\"_routes\",\"type\":\"tuple[]\"}],\"name\":\"addRoutes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_routeId\",\"type\":\"uint256\"}],\"name\":\"disableRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optionalNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ZeroXCross.MiddlewareRequest\",\"name\":\"middlewareRequest\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optionalNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ZeroXCross.BridgeRequest\",\"name\":\"bridgeRequest\",\"type\":\"tuple\"}],\"internalType\":\"struct ZeroXCross.UserRequest\",\"name\":\"_userRequest\",\"type\":\"tuple\"}],\"name\":\"outboundTransferTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiverAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"routes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"route\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isMiddleware\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ZeroXCross", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000790c90c83206e257bb3b326f35757d993759aae", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}