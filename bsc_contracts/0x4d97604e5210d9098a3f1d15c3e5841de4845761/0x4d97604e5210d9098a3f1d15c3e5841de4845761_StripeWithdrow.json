{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/stripe-withdrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\n// Uncomment this line to use console.log\\n// import \\\"hardhat/console.sol\\\";\\ninterface IERC20 {\\n    function transfer(address to, uint value) external returns (bool);\\n\\n    function balanceOf(address owner) external view returns (uint);\\n}\\n\\ncontract StripeWithdrow {\\n    address public owner;\\n    mapping(string => bool) public orderIds;\\n    mapping(string => bool) public currencies;\\n    mapping(string => address) public currenciesContracts;\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"!Auth\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        owner = msg.sender;\\n        currencies[\\\"BNB\\\"] = true;\\n        currencies[\\\"RTO\\\"] = true;\\n        currenciesContracts[\\\"RTO\\\"] = 0x5A341DCF49e161CC73591f02e5f8CDE8A29733fb;\\n    }\\n\\n    function addCurrency(\\n        string memory symb,\\n        address sc,\\n        bool isActive\\n    ) external onlyOwner {\\n        currencies[symb] = isActive;\\n        currenciesContracts[symb] = sc;\\n    }\\n\\n    function withdraw(\\n        string memory orderId,\\n        address to,\\n        string memory currencySymb,\\n        uint256 amount\\n    ) public onlyOwner {\\n        require(!orderIds[orderId], \\\"order id should be unique\\\");\\n        orderIds[orderId] = true;\\n        require(currencies[currencySymb], \\\"this currency not support\\\");\\n\\n        if (keccak256(bytes(currencySymb)) == keccak256(bytes(\\\"BNB\\\"))) {\\n            (bool success, ) = payable(to).call{value: amount}(\\\"\\\");\\n            require(success, \\\"Transfer failed\\\");\\n        } else {\\n            address tokenContractAddress = currenciesContracts[currencySymb];\\n            require(\\n                tokenContractAddress != address(0),\\n                \\\"Token contract address is invalid\\\"\\n            );\\n            IERC20 token = IERC20(tokenContractAddress);\\n            require(token.transfer(to, amount), \\\"Token transfer failed\\\");\\n        }\\n    }\\n\\n    function lock() public payable {}\\n\\n    function unlock(address tokenContractAddress) public onlyOwner {\\n        payable(owner).transfer(address(this).balance);\\n        IERC20 token = IERC20(tokenContractAddress);\\n        uint256 contractBalance = token.balanceOf(address(this));\\n        token.transfer(owner, contractBalance);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 50\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symb\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"sc\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"addCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"currencies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"currenciesContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"orderIds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"orderId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"currencySymb\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StripeWithdrow", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "50", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}