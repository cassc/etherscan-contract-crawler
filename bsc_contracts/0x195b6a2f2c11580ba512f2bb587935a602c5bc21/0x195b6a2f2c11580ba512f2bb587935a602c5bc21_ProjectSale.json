{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToBytes32Map storage map, bytes32 key, bytes32 value) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToBytes32Map storage map) internal view returns (bytes32[] memory) {\\n        return map._keys.values();\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToUintMap storage map, uint256 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(UintToUintMap storage map, uint256 key, string memory errorMessage) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToUintMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToAddressMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(AddressToUintMap storage map, address key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(AddressToUintMap storage map) internal view returns (address[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToUintMap storage map, bytes32 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToUintMap storage map) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/allocation/AbstractAllocationProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"contracts/allocation/IAllocationProvider.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title AbstractAllocationProvider\\r\\n * @author Finceptor\\r\\n * @notice Contract implments allocation provider interface assuming that\\r\\n * {_calculateAllocation} function is implemented.\\r\\n * @dev Derived contracts must implement {_calculateAllocation} function.\\r\\n */\\r\\nabstract contract AbstractAllocationProvider is IAllocationProvider, Ownable, ReentrancyGuard {\\r\\n    struct Allocation {\\r\\n        uint8 generation;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    /// @notice Mapping of accounts to allocations\\r\\n    mapping(address => Allocation) private _allocations;\\r\\n    /// @notice Total allocation reserved\\r\\n    uint256 private _totalAllocation;\\r\\n    /// @notice Current generation\\r\\n    uint8 private _generation = 1;\\r\\n\\r\\n    function allocationOf(address _account) public view returns (uint256) {\\r\\n        Allocation memory allocation = _allocations[_account];\\r\\n        if (allocation.generation == _generation) {\\r\\n            return allocation.amount;\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function totalAllocation() public view returns (uint256) {\\r\\n        return _totalAllocation;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to grant an allocation to an account\\r\\n     * @dev This function's behavior can be customized by overriding the internal _grantAllocation function.\\r\\n     * @param account to grant allocation to\\r\\n     * @param amount allocation amount\\r\\n     */\\r\\n    function grantAllocation(address account, uint256 amount) public onlyOwner {\\r\\n        require(\\r\\n            account != address(0),\\r\\n            \\\"AbstractAllocationProvider: beneficiary is the zero address\\\"\\r\\n        );\\r\\n        require(amount > 0, \\\"AbstractAllocationProvider: amount is 0\\\");\\r\\n        uint allocation = allocationOf(account) + amount;\\r\\n        _setAllocation(account, allocation);\\r\\n    }\\r\\n\\r\\n    function takeSnapshot(address[] memory accounts) public virtual onlyOwner nonReentrant {\\r\\n        for (uint256 i = 0; i < accounts.length; i++) {\\r\\n            uint256 amount = _calculateAllocation(accounts[i]);\\r\\n            grantAllocation(accounts[i], amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function reset() public onlyOwner {\\r\\n        _generation += 1;\\r\\n        _totalAllocation = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to revoke an allocation from an account\\r\\n     * @dev This function can only be called by the owner.\\r\\n     * @param account The account to revoke the allocation from\\r\\n     */\\r\\n    function revokeAllocation(address account) public onlyOwner {\\r\\n        require(\\r\\n            account != address(0),\\r\\n            \\\"AbstractAllocationProvider: beneficiary is the zero address\\\"\\r\\n        );\\r\\n        _setAllocation(account, 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal function to grant an allocation to an account\\r\\n     * @dev This function can be overridden to add functionality to the granting of an allocation.\\r\\n     * @param account The account to grant the allocation to\\r\\n     */\\r\\n    function _calculateAllocation(address account) internal view virtual returns (uint256);\\r\\n\\r\\n    function _setAllocation(address account, uint256 amount) private {\\r\\n        Allocation memory allocation = _allocations[account];\\r\\n        if (allocation.generation == _generation) {\\r\\n            _totalAllocation = _totalAllocation - allocation.amount + amount;\\r\\n        } else {\\r\\n            _totalAllocation = _totalAllocation + amount;\\r\\n        }\\r\\n        _allocations[account] = Allocation(_generation, amount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/allocation/CreditAllocationProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport \\\"contracts/allocation/AbstractAllocationProvider.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title CreditAllocationProvider\\r\\n * @notice Contract that provides an allocation system based on credit token balances\\r\\n * @dev This contract is expanded from AbstractAllocationProvider.\\r\\n */\\r\\ncontract CreditAllocationProvider is ReentrancyGuard, AbstractAllocationProvider {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    IERC20 public immutable creditToken;\\r\\n\\r\\n    constructor(address _creditToken) {\\r\\n        require(_creditToken != address(0), \\\"Credit token address cannot be 0\\\");\\r\\n        creditToken = IERC20(_creditToken);\\r\\n    }\\r\\n\\r\\n    function _calculateAllocation(address _user) internal view override returns (uint256) {\\r\\n        return creditToken.balanceOf(_user);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/allocation/DirectAllocationProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport \\\"contracts/allocation/AbstractAllocationProvider.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title DirectAllocationProvider\\r\\n * @author Finceptor\\r\\n */\\r\\ncontract DirectAllocationProvider is AbstractAllocationProvider {\\r\\n    /**\\r\\n     * @notice grants allocation to multiple accounts\\r\\n     * @param accounts accounts to grant allocation to\\r\\n     * @param allocations allocations to grant\\r\\n     */\\r\\n    function grantBatchAllocation(\\r\\n        address[] memory accounts,\\r\\n        uint256[] memory allocations\\r\\n    ) external onlyOwner {\\r\\n        require(\\r\\n            accounts.length == allocations.length,\\r\\n            \\\"DirectAllocationProvider: accounts and allocations must be the same length\\\"\\r\\n        );\\r\\n        for (uint256 i = 0; i < accounts.length; i++) {\\r\\n            grantAllocation(accounts[i], allocations[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice This function is not used in the direct allocation version of allocation provider\\r\\n     * @param account is the account to calculate in other versions of Allocation providers\\r\\n     */\\r\\n    function _calculateAllocation(address account) internal pure override returns (uint256) {\\r\\n        // ssh - Not used\\r\\n        account;\\r\\n        revert(\\r\\n            \\\"DirectAllocationProvider: cannot calculate allocation on direct allocation provider. Use grantBatchAllocation instead.\\\"\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/allocation/IAllocationProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.16;\\r\\n\\r\\ninterface IAllocationProvider {\\r\\n    /**\\r\\n     * @dev Returns allocation in USD of `_account`\\r\\n     * @param _account Account to check\\r\\n     * @return Allocation of `_account`\\r\\n     */\\r\\n    function allocationOf(address _account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns total allocation in USD\\r\\n     * @return Total allocation\\r\\n     */\\r\\n    function totalAllocation() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/allocation/IAllocationProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.16;\\r\\n\\r\\ninterface IAllocationProxy {\\r\\n    /**\\r\\n     * @dev Returns total allocation in USD of `_account`\\r\\n     * @param _account Account to check\\r\\n     * @return Allocation of `_account`\\r\\n     */\\r\\n    function allocationOf(address _account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns credit allocation in USD\\r\\n     * @return Credit allocation\\r\\n     */\\r\\n    function creditAllocationOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns direct allocation in USD\\r\\n     * @return Direct allocation\\r\\n     */\\r\\n    function directAllocationOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns relative(staking) allocation in USD\\r\\n     * @return Relative allocation\\r\\n     */\\r\\n    function relativeAllocationOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns total allocation in USD\\r\\n     * @return Total allocation\\r\\n     */\\r\\n    function totalAllocation() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/allocation/StakingAllocationProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport \\\"contracts/staking/IStakingStats.sol\\\";\\r\\nimport \\\"contracts/allocation/AbstractAllocationProvider.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title StakingAllocationProvider\\r\\n * @author Finceptor\\r\\n * @notice grants allocation based on the amount staked, total rewards generated and stake duration\\r\\n * @dev The allocation is calculated as the square root of the sum of the following parameters:\\r\\n * - Amount staked\\r\\n * - Total rewards generated\\r\\n * - Stake duration\\r\\n * The parameters are weighted by the following multipliers:\\r\\n * - Alfa\\r\\n * - Beta\\r\\n * - Theta\\r\\n * The sum of the multipliers must be 1 ether\\r\\n */\\r\\ncontract StakingAllocationProvider is AbstractAllocationProvider {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /// @notice Staking contract\\r\\n    IStakingStats public immutable _staking;\\r\\n\\r\\n    /// @notice Alfa parameter used for the multiplier of stake amount\\r\\n    uint256 public _alfa;\\r\\n    /// @notice Beta parameter used for the multiplier of total rewards generated\\r\\n    uint256 public _beta;\\r\\n    /// @notice Teta parameter used for the multiplier of stake duration\\r\\n    uint256 public _theta;\\r\\n\\r\\n    /**\\r\\n     * @notice Constructor of the contract that initializes:\\r\\n     * - Staking contract\\r\\n     * - Credit token contract\\r\\n     * - Alfa parameter\\r\\n     * - Beta parameter\\r\\n     * - Teta parameter\\r\\n     * @param staking_ Staking contract address\\r\\n     * @param alfa_ Alfa parameter\\r\\n     * @param beta_ Beta parameter\\r\\n     * @param theta_ Teta parameter\\r\\n     */\\r\\n    constructor(address staking_, uint256 alfa_, uint256 beta_, uint256 theta_) {\\r\\n        require(staking_ != address(0), \\\"StakingAllocationProvider: Staking address cannot be 0\\\");\\r\\n        require(\\r\\n            alfa_ + beta_ + theta_ == 1 ether,\\r\\n            \\\"StakingAllocationProvider: Alfa, beta and teta must sum 1 ether\\\"\\r\\n        );\\r\\n        _staking = IStakingStats(staking_);\\r\\n        _alfa = alfa_;\\r\\n        _beta = beta_;\\r\\n        _theta = theta_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to set the parameters used for the allocation calculation\\r\\n     * @dev The sum of the multipliers must be 1 ether and can be called only by owner\\r\\n     * @param alfa_ Alfa parameter\\r\\n     * @param beta_ Beta parameter\\r\\n     * @param theta_ Teta parameter\\r\\n     */\\r\\n    function setParameters(uint256 alfa_, uint256 beta_, uint256 theta_) external onlyOwner {\\r\\n        require(\\r\\n            alfa_ + beta_ + theta_ == 1 ether,\\r\\n            \\\"StakingAllocationProvider: Alfa, beta and teta must sum 1 ether\\\"\\r\\n        );\\r\\n        _alfa = alfa_;\\r\\n        _beta = beta_;\\r\\n        _theta = theta_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate allocation based on amount staked, total rewards generated and stake duration\\r\\n     * @param account staker\\r\\n     */\\r\\n    function _calculateAllocation(\\r\\n        address account\\r\\n    ) internal view virtual override returns (uint256) {\\r\\n        uint256 param1 = (_staking.stakedOf(account) * _alfa) / 1e18;\\r\\n        uint256 param2 = (_staking.getTotalRewardsGenerated(account) * _beta) / 1e18;\\r\\n        uint256 param3 = (_staking.getUserStakeDuration(account) * _theta);\\r\\n\\r\\n        uint256 tot = param1 + param2 + param3;\\r\\n        return tot;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to calculate the square root of a number.\\r\\n     * @dev This function is based on the Babylonian method.\\r\\n     * @param y Number to calculate the square root\\r\\n     * @return z Square root of the number\\r\\n     */\\r\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\r\\n        if (y > 3) {\\r\\n            z = y;\\r\\n            uint256 x = y / 2 + 1;\\r\\n            while (x < z) {\\r\\n                z = x;\\r\\n                x = (y / x + x) / 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/kyc/IKYCProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.16;\\r\\n\\r\\ninterface IKYCProvider {\\r\\n    /**\\r\\n     * @dev Emitted when `_account` is added to whitelist\\r\\n     */\\r\\n    event Whitelisted(address indexed _account, uint256 _timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `_account` is removed from whitelist\\r\\n     */\\r\\n    event Blacklisted(address indexed _account, uint256 _timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if `_account` is KYC approve\\r\\n     * @param _account Account to check\\r\\n     */\\r\\n    function isWhitelisted(address _account) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Adds `_account` to whitelist\\r\\n     * @param _account Account to add to whitelist\\r\\n     */\\r\\n    function addToWhitelist(address _account) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Adds `_accounts` to whitelist in a single transaction\\r\\n     */\\r\\n    function batchAddToWhitelist(address[] memory _accounts) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Removes `_account` from whitelist\\r\\n     * @param _account Account to remove from whitelist\\r\\n     */\\r\\n    function removeFromWhitelist(address _account) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Removes `_accounts` from whitelist in a single transaction\\r\\n     * @param _accounts Accounts to remove from whitelist\\r\\n     */\\r\\n    function batchRemoveFromWhitelist(address[] memory _accounts) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/projectSale/AbstractProjectSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport \\\"./IProjectSale.sol\\\";\\r\\n\\r\\nabstract contract AbstractProjectSale is IProjectSale {\\r\\n    struct SaleTimes {\\r\\n        uint256 registerStart;\\r\\n        uint256 registerEnd;\\r\\n        uint256 stakingRoundStart;\\r\\n        uint256 stakingRoundEnd;\\r\\n        uint256 publicRoundStart;\\r\\n        uint256 publicRoundEnd;\\r\\n        uint256 vestingTge;\\r\\n        uint256 vestingStart;\\r\\n        uint256 vestingEnd;\\r\\n    }\\r\\n\\r\\n    SaleTimes public saleTimes;\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if block time isn't between `registerStart` and `registerEnd`\\r\\n     */\\r\\n    modifier onlyDuringRegisteration() {\\r\\n        require(\\r\\n            block.timestamp >= saleTimes.registerStart,\\r\\n            \\\"ProjectSale: registration period has not started yet\\\"\\r\\n        );\\r\\n        require(\\r\\n            block.timestamp <= saleTimes.registerEnd,\\r\\n            \\\"ProjectSale: registration period has ended\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(SaleTimes memory _saleTimes) {\\r\\n        require(\\r\\n            _saleTimes.registerStart < _saleTimes.registerEnd,\\r\\n            \\\"ProjectSale: registerStart must be before registerEnd\\\"\\r\\n        );\\r\\n        require(\\r\\n            _saleTimes.registerEnd <= _saleTimes.stakingRoundStart,\\r\\n            \\\"ProjectSale: registerEnd must be before stakingRoundStart\\\"\\r\\n        );\\r\\n        require(\\r\\n            _saleTimes.stakingRoundStart < _saleTimes.stakingRoundEnd,\\r\\n            \\\"ProjectSale: stakingRoundStart must be before stakingRoundEnd\\\"\\r\\n        );\\r\\n        require(\\r\\n            _saleTimes.stakingRoundEnd <= _saleTimes.publicRoundStart,\\r\\n            \\\"ProjectSale: stakingRoundEnd must be before publicRoundStart\\\"\\r\\n        );\\r\\n        require(\\r\\n            _saleTimes.publicRoundStart < _saleTimes.publicRoundEnd,\\r\\n            \\\"ProjectSale: publicRoundStart must be before publicRoundEnd\\\"\\r\\n        );\\r\\n        require(\\r\\n            _saleTimes.publicRoundEnd <= _saleTimes.vestingTge,\\r\\n            \\\"ProjectSale: publicRoundEnd must be before vestingTge\\\"\\r\\n        );\\r\\n        require(\\r\\n            _saleTimes.vestingTge <= _saleTimes.vestingStart,\\r\\n            \\\"ProjectSale: vestingTge must be before vestingStart\\\"\\r\\n        );\\r\\n        require(\\r\\n            _saleTimes.vestingStart < _saleTimes.vestingEnd,\\r\\n            \\\"ProjectSale: vestingStart must be before vestingEnd\\\"\\r\\n        );\\r\\n        saleTimes = _saleTimes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to update the times after setting.\\r\\n     * Should have admin role.\\r\\n     *\\r\\n     * @param _saleTimes The new sale times\\r\\n     */\\r\\n    function updateTimes(SaleTimes memory _saleTimes) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if time is between staking round\\r\\n     * @return True if time is between staking round\\r\\n     */\\r\\n    function isStakingRound() public view returns (bool) {\\r\\n        return\\r\\n            block.timestamp >= saleTimes.stakingRoundStart &&\\r\\n            block.timestamp <= saleTimes.stakingRoundEnd;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if time is between public round\\r\\n     * @return True if time is between public round\\r\\n     */\\r\\n    function isPublicRound() public view returns (bool) {\\r\\n        return\\r\\n            block.timestamp >= saleTimes.publicRoundStart &&\\r\\n            block.timestamp <= saleTimes.publicRoundEnd;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/projectSale/IProjectSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.16;\\r\\n\\r\\ninterface IProjectSale {\\r\\n    /**\\r\\n     * @dev Emitted when `_account` registers to sale\\r\\n     */\\r\\n    event Registered(address _account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `_account` deposits `_amount` USD pegged coin\\r\\n     */\\r\\n    event Deposit(address _account, uint256 _amount);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `_account` deposits `_amount` credit token\\r\\n     */\\r\\n    event CreditDeposit(address _account, uint256 _amount);\\r\\n\\r\\n    /**\\r\\n     * @dev Register to sale\\r\\n     *\\r\\n     * Emits a {Registered} event.\\r\\n     */\\r\\n    function register() external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if `_account` is registered\\r\\n     * @param _account Account to check\\r\\n     */\\r\\n    function isRegistered(address _account) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns amount of pegged tokens to be transferred to deposit `_amount` pegged token\\r\\n     * @param _amount Amount of USD to deposit.\\r\\n     * @return Amount of pegged tokens to be transferred to deposit `_amount` pegged token\\r\\n     */\\r\\n    function depositAmountWithFees(uint256 _amount) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Deposit USD\\r\\n     * @param _amount Amount of USD to deposit.\\r\\n     *\\r\\n     * Emits a {Deposit} event.\\r\\n     */\\r\\n    function deposit(uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Deposit credit token\\r\\n     * @param _amount Amount of credit to deposit.\\r\\n     *\\r\\n     * Emits a {Deposit} event.\\r\\n     */\\r\\n    function creditDeposit(uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns USD deposited by `_account`\\r\\n     * @param _account Account to check\\r\\n     */\\r\\n    function depositedOf(address _account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns credit deposited by `_account`\\r\\n     * @param _account Account to check\\r\\n     * @return Credit deposited by `_account`\\r\\n     */\\r\\n    function creditDepositedOf(address _account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns depositable USD of `_account`\\r\\n     * @param _account Account to check\\r\\n     * @return Depositable USD of `_account`\\r\\n     */\\r\\n    function depositableOf(address _account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns credit depositable of an account.\\r\\n     * @param _account Account to check\\r\\n     * @return Credit depositable of an account\\r\\n     */\\r\\n    function creditDepositableOf(address _account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns current sale value in terms of pegged token\\r\\n     * @return uint256 current sale value\\r\\n     */\\r\\n    function totalSaleValue() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns total sale value cap in terms of pegged token\\r\\n     * @return uint256 total sale value\\r\\n     */\\r\\n    function totalSaleValueCap() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Function to view the total public sale deposited of a user\\r\\n     * @param _account is the address to check.\\r\\n     * @return uint256 is the total public sale deposited.\\r\\n     */\\r\\n    function publicSaleDepositedOf(address _account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns staking round allocation of user, excluding credit token allocation\\r\\n     * @return uint256 staking round allocation of user\\r\\n     */\\r\\n    function stakingRoundAllocationOf(address _account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns credit token allocation of user\\r\\n     * @return uint256 credit token allocation of user\\r\\n     */\\r\\n    function creditAllocationOf(address _account) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/projectSale/ProjectSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"contracts/allocation/IAllocationProvider.sol\\\";\\r\\nimport \\\"contracts/kyc/IKYCProvider.sol\\\";\\r\\nimport \\\"contracts/vesting/Vesting.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\r\\nimport \\\"contracts/allocation/IAllocationProxy.sol\\\";\\r\\nimport \\\"contracts/allocation/StakingAllocationProvider.sol\\\";\\r\\nimport \\\"contracts/allocation/CreditAllocationProvider.sol\\\";\\r\\nimport \\\"contracts/allocation/DirectAllocationProvider.sol\\\";\\r\\nimport \\\"contracts/projectSale/AbstractProjectSale.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\r\\nimport \\\"contracts/staking/IStakingAmounts.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ProjectSale contract\\r\\n * @author Finceptor\\r\\n * @notice This contract is responsible for the sale of a project' tokens.\\r\\n * @dev Used with the following contracts:\\r\\n * - KYCProvider\\r\\n * - SplittedVesting\\r\\n * - StakingAllocationProvider\\r\\n */\\r\\ncontract ProjectSale is AbstractProjectSale, ReentrancyGuard, Pausable, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using EnumerableMap for EnumerableMap.AddressToUintMap;\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    struct Providers {\\r\\n        /// @notice External providers for allocation and KYC\\r\\n        address kycProvider;\\r\\n        /// @notice allocation provider external contracts\\r\\n        address allocationProvider;\\r\\n    }\\r\\n\\r\\n    struct SaleDetails {\\r\\n        /// @notice Total value of tokens to be sold\\r\\n        uint256 totalSaleValueCap;\\r\\n        /// @notice Price of the project token\\r\\n        uint256 projectTokenPrice;\\r\\n        /// @notice Amount of project tokens to be sold\\r\\n        uint256 projectTokenAmount;\\r\\n        /// @notice Address to claim deposited funds\\r\\n        address saleClaimAddress;\\r\\n        /// @notice Address to claim fees\\r\\n        address feeClaimAddress;\\r\\n        /// @notice Total current value of tokens sold\\r\\n        uint256 totalSaleValue;\\r\\n        /// @notice Pubic sale deposit cap per user\\r\\n        uint256 publicSaleDepositCap;\\r\\n        IStakingAmounts stakingAmounts;\\r\\n        uint256 minStake;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sale status enum\\r\\n     * @dev `NOT_FINALIZED` sale has not been finalized yet\\r\\n     * @dev `FINALIZED` sale has been finalized\\r\\n     */\\r\\n    enum SaleStatus {\\r\\n        NOT_FINALIZED,\\r\\n        FINALIZED\\r\\n    }\\r\\n\\r\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\r\\n\\r\\n    /// @notice Sale status\\r\\n    SaleStatus private _saleStatus;\\r\\n    /// @notice Fee to be taken on public round deposits\\r\\n    uint8 private constant PUBLIC_ROUND_FEE = 10; // 10%\\r\\n\\r\\n    /// @notice External providers for allocation, KYC\\r\\n    Providers public providers;\\r\\n    /// @notice Sale details\\r\\n    SaleDetails public saleDetails;\\r\\n\\r\\n    /// @notice Splitting vesting contract that handles vesting to multiple users\\r\\n    Vesting public immutable vestingContract;\\r\\n\\r\\n    /// @notice Credit reserve address to be used for credit deposits\\r\\n    address public immutable creditReserve;\\r\\n    /// @notice Credit token to be used for credit deposits\\r\\n    ERC20Burnable public immutable creditToken;\\r\\n    /// @notice USD token to be used for staking and public round deposits\\r\\n    IERC20 public immutable usdToken;\\r\\n    /// @notice Project token to be sold\\r\\n    IERC20 public immutable projectToken;\\r\\n\\r\\n    /// @notice Address to claim deposited funds\\r\\n    address public saleClaimAddress;\\r\\n    /// @notice Address to claim fees\\r\\n    address public feeClaimAddress;\\r\\n\\r\\n    /// @notice Mapping of deposited values of addresses\\r\\n    EnumerableMap.AddressToUintMap private _depositBalances;\\r\\n    /// @notice Mapping of credit deposited values of addresses\\r\\n    EnumerableMap.AddressToUintMap private _creditDepositBalances;\\r\\n    /// @notice Public sale deposit balances\\r\\n    mapping(address => uint256) private _publicSaleDepositBalances;\\r\\n\\r\\n    /// @notice Mapping of registered addresses\\r\\n    EnumerableSet.AddressSet private _participants;\\r\\n\\r\\n    /**\\r\\n     * @notice Modifier to check if the address is whitelisted or not\\r\\n     */\\r\\n    modifier onlyWhiteListed(address _account) {\\r\\n        require(\\r\\n            IKYCProvider(providers.kycProvider).isWhitelisted(_account),\\r\\n            \\\"ProjectSale: account is not whitelisted\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Modifier to make sure the `finalizeSale()` function is only being called once.\\r\\n     */\\r\\n    modifier onlyOnce() {\\r\\n        require(_saleStatus == SaleStatus.NOT_FINALIZED, \\\"ProjectSale: sale is finalized\\\");\\r\\n        _;\\r\\n        _saleStatus = SaleStatus.FINALIZED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Constructor for ProjectSale contract that initializes the sale.\\r\\n     * @param _saleTimes Sale times\\r\\n     * @param _providers External providers for allocation and KYC\\r\\n     * @param _vestingPeriodsInSec Vesting periods in seconds\\r\\n     * @param _creditReserve Address of credit reserve\\r\\n     * @param _creditToken Address of credit token\\r\\n     * @param _usdToken Address of USD token\\r\\n     * @param _projectToken Address of project token\\r\\n     * @param _projectTokenPrice Price of project token\\r\\n     * @param _projectTokenAmount Amount of project tokens to be sold\\r\\n     * @param _totalSaleValueCap Total value of tokens to be sold\\r\\n     * @param _saleClaimAddress Address to claim deposited funds\\r\\n     * @param _feeClaimAddress Address to claim fees\\r\\n     * @dev _projectTokenPrice * _projectTokenAmount == _totalSaleValueCap\\r\\n     */\\r\\n    constructor(\\r\\n        SaleTimes memory _saleTimes,\\r\\n        Providers memory _providers,\\r\\n        uint256 _vestingPeriodsInSec,\\r\\n        address _creditReserve,\\r\\n        address _creditToken,\\r\\n        address _usdToken,\\r\\n        address _projectToken,\\r\\n        uint256 _projectTokenPrice,\\r\\n        uint256 _projectTokenAmount,\\r\\n        uint256 _totalSaleValueCap,\\r\\n        address _saleClaimAddress,\\r\\n        address _feeClaimAddress\\r\\n    ) AbstractProjectSale(_saleTimes) {\\r\\n        require(\\r\\n            (_projectTokenPrice * _projectTokenAmount) / (10 ** 18) == _totalSaleValueCap,\\r\\n            \\\"ProjectSale: invalid sale value\\\"\\r\\n        );\\r\\n        require(\\r\\n            address(_providers.allocationProvider) != address(0),\\r\\n            \\\"ProjectSale: allocation provider cannot be zero address\\\"\\r\\n        );\\r\\n        require(\\r\\n            address(_providers.kycProvider) != address(0),\\r\\n            \\\"ProjectSale: kyc provider cannot be zero address\\\"\\r\\n        );\\r\\n\\r\\n        // Sale Details\\r\\n        creditReserve = _creditReserve;\\r\\n        creditToken = ERC20Burnable(_creditToken);\\r\\n        usdToken = IERC20(_usdToken);\\r\\n        projectToken = IERC20(_projectToken);\\r\\n        saleDetails.totalSaleValueCap = _totalSaleValueCap;\\r\\n        saleDetails.projectTokenPrice = _projectTokenPrice;\\r\\n        saleDetails.projectTokenAmount = _projectTokenAmount;\\r\\n        saleDetails.publicSaleDepositCap = 250 * (10 ** 18);\\r\\n        _saleStatus = SaleStatus.NOT_FINALIZED;\\r\\n\\r\\n        // External providers for allocation and KYC\\r\\n        providers = _providers;\\r\\n\\r\\n        feeClaimAddress = _feeClaimAddress;\\r\\n        saleClaimAddress = _saleClaimAddress;\\r\\n\\r\\n        // Create the splitting vesting contract\\r\\n        uint256 durationInSec = saleTimes.vestingEnd - saleTimes.vestingStart;\\r\\n        vestingContract = new Vesting(\\r\\n            address(projectToken),\\r\\n            saleTimes.vestingTge,\\r\\n            saleTimes.vestingStart,\\r\\n            durationInSec,\\r\\n            _vestingPeriodsInSec\\r\\n        );\\r\\n        vestingContract.grantRole(DEFAULT_ADMIN_ROLE, owner());\\r\\n    }\\r\\n\\r\\n    function setStakingAmounts(address _stakingAmounts, uint256 _minStake) external onlyOwner {\\r\\n        require(\\r\\n            address(_stakingAmounts) != address(0),\\r\\n            \\\"ProjectSale: staking amounts cannot be zero address\\\"\\r\\n        );\\r\\n        saleDetails.stakingAmounts = IStakingAmounts(_stakingAmounts);\\r\\n        saleDetails.minStake = _minStake;\\r\\n    }\\r\\n\\r\\n    function updateKycProvider(address _kycProvider) external onlyOwner {\\r\\n        require(_kycProvider != address(0), \\\"ProjectSale: kyc provider cannot be zero address\\\");\\r\\n        providers.kycProvider = _kycProvider;\\r\\n    }\\r\\n\\r\\n    function updateAllocationProvider(address _allocationProvider) external onlyOwner {\\r\\n        require(\\r\\n            _allocationProvider != address(0),\\r\\n            \\\"ProjectSale: allocation provider cannot be zero address\\\"\\r\\n        );\\r\\n        providers.allocationProvider = _allocationProvider;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Fuction to update sale times.\\r\\n     * @dev Can only be called by the owner. And when sale is not finalized.\\r\\n     * @param _saleTimes New sale times.\\r\\n     */\\r\\n    function updateTimes(SaleTimes memory _saleTimes) external override onlyOwner {\\r\\n        require(_saleStatus == SaleStatus.NOT_FINALIZED, \\\"ProjectSale: sale is finalized\\\");\\r\\n        require(\\r\\n            _saleTimes.registerStart < _saleTimes.registerEnd &&\\r\\n                _saleTimes.stakingRoundStart < _saleTimes.stakingRoundEnd &&\\r\\n                _saleTimes.publicRoundStart < _saleTimes.publicRoundEnd &&\\r\\n                _saleTimes.vestingStart < _saleTimes.vestingEnd,\\r\\n            \\\"ProjectSale: invalid time\\\"\\r\\n        );\\r\\n        require(\\r\\n            _saleTimes.registerEnd < _saleTimes.stakingRoundStart &&\\r\\n                _saleTimes.stakingRoundEnd < _saleTimes.publicRoundStart &&\\r\\n                _saleTimes.publicRoundEnd < _saleTimes.vestingStart,\\r\\n            \\\"ProjectSale: invalid time\\\"\\r\\n        );\\r\\n\\r\\n        saleTimes = _saleTimes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Fuction to update public sale deposit cap.\\r\\n     * @dev Can only be called by the owner.\\r\\n     * @param _publicSaleDepositCap New public sale deposit cap.\\r\\n     */\\r\\n    function setPublicSaleCap(uint256 _publicSaleDepositCap) external onlyOwner {\\r\\n        require(_publicSaleDepositCap > 0, \\\"ProjectSale: cap cannot be zero\\\");\\r\\n        saleDetails.publicSaleDepositCap = _publicSaleDepositCap;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Fuction to update sale funds receiver address.\\r\\n     * @dev Can only be called by the owner.\\r\\n     * @param _newAddress New sale funds receiver address.\\r\\n     */\\r\\n    function updateSaleClaimAddress(address _newAddress) external onlyOwner {\\r\\n        require(_newAddress != address(0), \\\"ProjectSale: address cannot be zero\\\");\\r\\n        saleClaimAddress = _newAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Fuction to update fee funds receiver address.\\r\\n     * @dev Can only be called by the owner.\\r\\n     * @param _newAddress New fee funds receiver address.\\r\\n     */\\r\\n    function updateFeeClaimAddress(address _newAddress) external onlyOwner {\\r\\n        require(_newAddress != address(0), \\\"ProjectSale: address cannot be zero\\\");\\r\\n        feeClaimAddress = _newAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Registers the sender to the sale.\\r\\n     * @dev Only allowed during registeration period.\\r\\n     */\\r\\n    function register() external override whenNotPaused onlyDuringRegisteration {\\r\\n        require(!isRegistered(msg.sender), \\\"ProjectSale: already registered\\\");\\r\\n        _participants.add(msg.sender);\\r\\n        emit Registered(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Registers the given address to the sale.\\r\\n     * @dev Only allowed before staking period start and by the contract owner.\\r\\n     * @param _user Address to be registered.\\r\\n     */\\r\\n    function adminRegister(address _user) external onlyOwner whenNotPaused {\\r\\n        require(!isRegistered(_user), \\\"ProjectSale: already registered\\\");\\r\\n        _participants.add(_user);\\r\\n        emit Registered(_user);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Registers the given addresses to the sale.\\r\\n     * @dev Only allowed before staking period start and by the contract owner.\\r\\n     * @param _users Addresses to be registered.\\r\\n     */\\r\\n    function batchAdminRegister(address[] memory _users) external onlyOwner whenNotPaused {\\r\\n        for (uint256 i = 0; i < _users.length; i++) {\\r\\n            require(!isRegistered(_users[i]), \\\"ProjectSale: already registered\\\");\\r\\n            _participants.add(_users[i]);\\r\\n            emit Registered(_users[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to deposit tokens to the sale.\\r\\n     * Deposits from whitelisted account are allowed\\r\\n     * if it is during the staking round and the account is registered or\\r\\n     * if it is during the public round.\\r\\n     * @dev Also includes depositable amount from credit token,\\r\\n     * `creditDeposit()` should be used first if user has credit.\\r\\n     * @param _amount is the amount of tokens to be deposited\\r\\n     */\\r\\n    function deposit(\\r\\n        uint256 _amount\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n        whenNotPaused\\r\\n        onlyWhiteListed(msg.sender) //@note Give alloc to staker, registers, whitelist ortak kume\\r\\n    {\\r\\n        require(_amount > 0, \\\"ProjectSale: amount is zero\\\");\\r\\n        require(\\r\\n            (isStakingRound() && isRegistered(msg.sender)) || isPublicRound(),\\r\\n            \\\"ProjectSale: not allowed to deposit\\\"\\r\\n        );\\r\\n        uint256 depositableAmount = depositableOf(msg.sender);\\r\\n\\r\\n        uint256 fee;\\r\\n        if (isPublicRound()) {\\r\\n            require(\\r\\n                saleDetails.stakingAmounts.stakedOf(msg.sender) >= saleDetails.minStake,\\r\\n                \\\"ProjectSale: You do not have enough Staked FINC to participate in the Public Sale\\\"\\r\\n            );\\r\\n            require(\\r\\n                _publicSaleDepositBalances[msg.sender] + _amount <=\\r\\n                    saleDetails.publicSaleDepositCap,\\r\\n                \\\"ProjectSale: amount exceeds depositable amount\\\"\\r\\n            );\\r\\n            if (_amount > depositableAmount) {\\r\\n                _amount = depositableAmount;\\r\\n            }\\r\\n            //@note add investable amount check\\r\\n            fee = (_amount * PUBLIC_ROUND_FEE) / 100;\\r\\n            _publicSaleDepositBalances[msg.sender] += _amount;\\r\\n        } else {\\r\\n            require(_amount <= depositableAmount, \\\"ProjectSale: amount exceeds depositable amount\\\");\\r\\n        }\\r\\n\\r\\n        (bool found, uint256 _deposited) = _depositBalances.tryGet(msg.sender);\\r\\n        if (found) {\\r\\n            _depositBalances.set(msg.sender, _deposited + _amount);\\r\\n        } else {\\r\\n            _depositBalances.set(msg.sender, _amount);\\r\\n        }\\r\\n        vestingContract.addShares(msg.sender, _amount);\\r\\n\\r\\n        saleDetails.totalSaleValue += _amount;\\r\\n        usdToken.safeTransferFrom(msg.sender, saleClaimAddress, _amount);\\r\\n        if (fee > 0) {\\r\\n            require(\\r\\n                usdToken.balanceOf(msg.sender) >= fee,\\r\\n                \\\"ProjectSale: insufficient balance for fee\\\"\\r\\n            );\\r\\n            usdToken.safeTransferFrom(msg.sender, feeClaimAddress, fee);\\r\\n        }\\r\\n        emit Deposit(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to deposit tokens to the sale from credit token.\\r\\n     * Deposits from whitelisted account are allowed\\r\\n     * if it is during the staking round and the account is registered.\\r\\n     * Public round deposit is not allowed.\\r\\n     * @param _amount is the amount of tokens to be deposited\\r\\n     */\\r\\n    function creditDeposit(\\r\\n        uint256 _amount\\r\\n    ) external nonReentrant whenNotPaused onlyWhiteListed(msg.sender) {\\r\\n        require(_amount > 0, \\\"ProjectSale: amount is zero\\\");\\r\\n        require(\\r\\n            isStakingRound() && isRegistered(msg.sender),\\r\\n            \\\"ProjectSale: credit not allowed to deposit\\\"\\r\\n        );\\r\\n        require(\\r\\n            saleDetails.totalSaleValue + _amount <= saleDetails.totalSaleValueCap,\\r\\n            \\\"ProjectSale: amount exceeds total sale value cap\\\"\\r\\n        );\\r\\n        uint256 depositableAmount = creditDepositableOf(msg.sender);\\r\\n        require(_amount <= depositableAmount, \\\"ProjectSale: amount exceeds depositable amount\\\");\\r\\n\\r\\n        (bool found, uint256 _deposited) = _creditDepositBalances.tryGet(msg.sender);\\r\\n        if (found) {\\r\\n            _creditDepositBalances.set(msg.sender, _deposited + _amount);\\r\\n        } else {\\r\\n            _creditDepositBalances.set(msg.sender, _amount);\\r\\n        }\\r\\n        vestingContract.addShares(msg.sender, _amount);\\r\\n\\r\\n        saleDetails.totalSaleValue += _amount;\\r\\n        creditToken.burnFrom(msg.sender, _amount);\\r\\n        usdToken.safeTransferFrom(creditReserve, saleClaimAddress, _amount);\\r\\n        emit CreditDeposit(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to finalize sale and transfer tokens to Vesting.\\r\\n     * @dev Only allowed after the sale is over and only once.\\r\\n     * Only the owner can call this function.\\r\\n     * The caller must have the tokens to be transferred to vesting.\\r\\n     */\\r\\n    function finalizeSale() external onlyOwner onlyOnce {\\r\\n        revert(\\\"Do it Manually\\\");\\r\\n        require(block.timestamp > saleTimes.publicRoundEnd, \\\"ProjectSale: sale is not over\\\");\\r\\n        _pause();\\r\\n\\r\\n        // Transfer the tokens to the vestingContract\\r\\n        uint256 tokensSold = (saleDetails.totalSaleValue * (10 ** 18)) /\\r\\n            (saleDetails.projectTokenPrice);\\r\\n        projectToken.safeTransferFrom(msg.sender, vestingContract.getReleaser(), tokensSold);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to get the total number of participants.\\r\\n     * @return uint256 is the total number of participants.\\r\\n     */\\r\\n    function participantCount() external view returns (uint256) {\\r\\n        return _participants.length();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to get the participant at the given index.\\r\\n     * @param index is the index of the participant.\\r\\n     * @return address is the participant.\\r\\n     */\\r\\n    function participantAt(uint256 index) external view returns (address) {\\r\\n        require(index < _participants.length(), \\\"ProjectSale: index out of bounds\\\");\\r\\n        return _participants.at(index);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to get participants between the given indexes.\\r\\n     * @param start is the start index.\\r\\n     * @param end is the end index.\\r\\n     * @return address[] is the array of participants.\\r\\n     */\\r\\n    function participantsBetween(\\r\\n        uint256 start,\\r\\n        uint256 end\\r\\n    ) external view returns (address[] memory) {\\r\\n        require(start <= end, \\\"ProjectSale: start > end\\\");\\r\\n        require(end <= _participants.length(), \\\"ProjectSale: index out of bounds\\\");\\r\\n        address[] memory _participantsArray = new address[](end - start);\\r\\n        for (uint256 i = start; i < end; i++) {\\r\\n            _participantsArray[i - start] = _participants.at(i);\\r\\n        }\\r\\n        return _participantsArray;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to view the vesting contract address.\\r\\n     * @dev If the sale is not finalized, the address is zero.\\r\\n     * @return address is the vesting contract address.\\r\\n     */\\r\\n    function getVestingContract() external view returns (address) {\\r\\n        return address(vestingContract);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to view the total sale value\\r\\n     * @return uint256 is the total sale value.\\r\\n     */\\r\\n    function totalSaleValue() external view returns (uint256) {\\r\\n        return saleDetails.totalSaleValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to view the total sale value cap\\r\\n     * @return uint256 is the total sale value cap.\\r\\n     */\\r\\n    function totalSaleValueCap() external view returns (uint256) {\\r\\n        return saleDetails.totalSaleValueCap;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to view the total public sale deposited of a user\\r\\n     * @param _account is the address to check.\\r\\n     * @return uint256 is the total public sale deposited.\\r\\n     */\\r\\n    function publicSaleDepositedOf(address _account) external view returns (uint256) {\\r\\n        return _publicSaleDepositBalances[_account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to view the final deposit value of any given amount with fees included.\\r\\n     * @param _amount is the amount to check.\\r\\n     * @return uint256 is the final deposit value with fees.\\r\\n     */\\r\\n    function depositAmountWithFees(uint256 _amount) external view override returns (uint256) {\\r\\n        if (\\r\\n            block.timestamp >= saleTimes.publicRoundStart &&\\r\\n            block.timestamp <= saleTimes.publicRoundEnd\\r\\n        ) {\\r\\n            return (_amount * (100 + PUBLIC_ROUND_FEE)) / 100;\\r\\n        }\\r\\n        return _amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to see if an address is registered or not.\\r\\n     * @param _account is the address to check.\\r\\n     * @return bool is if the address is registered or not.\\r\\n     */\\r\\n    function isRegistered(address _account) public view override returns (bool) {\\r\\n        return _participants.contains(_account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to see total deposited amount of an address.\\r\\n     * @param _account is the address to check.\\r\\n     * @return uint256 is the total deposited amount.\\r\\n     */\\r\\n    function depositedOf(address _account) public view override returns (uint256) {\\r\\n        (bool success, uint256 _deposited) = _depositBalances.tryGet(_account);\\r\\n        if (success) {\\r\\n            return _deposited;\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to see total deposited amount of a user in terms of credit token.\\r\\n     * @param _account is the address to check.\\r\\n     * @return uint256 is the total deposited amount in terms of credit token.\\r\\n     */\\r\\n    function creditDepositedOf(address _account) public view override returns (uint256) {\\r\\n        (bool success, uint256 _deposited) = _creditDepositBalances.tryGet(_account);\\r\\n        if (success) {\\r\\n            return _deposited;\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to see remaining depositable amount from direct and staking alloction of an address.\\r\\n     * @dev If its the public round, every address gets the same amount.\\r\\n     * @param _account is the address to check.\\r\\n     * @return uint256 is the remaining depositable amount.\\r\\n     */\\r\\n    function depositableOf(address _account) public view override returns (uint256) {\\r\\n        if (isRegistered(_account) && isStakingRound()) {\\r\\n            return stakingRoundAllocationOf(_account);\\r\\n        } else if (isPublicRound()) {\\r\\n            return\\r\\n                saleDetails.publicSaleDepositCap - _publicSaleDepositBalances[_account] <\\r\\n                    saleDetails.totalSaleValueCap - saleDetails.totalSaleValue\\r\\n                    ? saleDetails.publicSaleDepositCap - _publicSaleDepositBalances[_account]\\r\\n                    : saleDetails.totalSaleValueCap - saleDetails.totalSaleValue;\\r\\n        } else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to see remaining depositable amount from credit alloction of an address.\\r\\n     * @dev Only relevant in the staking round. Returns zero outside of staking round.\\r\\n     * @param _account is the address to check.\\r\\n     * @return uint256 is the remaining depositable amount.\\r\\n     */\\r\\n    function creditDepositableOf(address _account) public view override returns (uint256) {\\r\\n        if (!IKYCProvider(providers.kycProvider).isWhitelisted(_account)) {\\r\\n            return 0;\\r\\n        } else if (isRegistered(_account) && isStakingRound()) {\\r\\n            return creditAllocationOf(_account);\\r\\n        } else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to see remaining depositable amount from direct and staking alloction of an address.\\r\\n     * @dev Only relevant in the staking round.\\r\\n     * @param _account is the address to check.\\r\\n     * @return uint256 is the remaining depositable amount.\\r\\n     */\\r\\n    function stakingRoundAllocationOf(address _account) public view override returns (uint256) {\\r\\n        return\\r\\n            IAllocationProxy(providers.allocationProvider).directAllocationOf(_account) +\\r\\n            IAllocationProxy(providers.allocationProvider).relativeAllocationOf(_account) -\\r\\n            depositedOf(_account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to see remaining depositable amount from credit token alllocation of a user.\\r\\n     * @dev Only relevant in the staking round.\\r\\n     * @param _account is the address to check.\\r\\n     * @return uint256 is the remaining depositable amount.\\r\\n     */\\r\\n    function creditAllocationOf(address _account) public view override returns (uint256) {\\r\\n        return\\r\\n            IAllocationProxy(providers.allocationProvider).creditAllocationOf(_account) -\\r\\n            creditDepositedOf(_account);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/staking/IStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.16;\\r\\n\\r\\n/**\\r\\n * @dev Interface of OPN Staking.\\r\\n */\\r\\ninterface IStaking {\\r\\n    /**\\r\\n     * @dev Emitted when a user stakes `_amount` of tokens.\\r\\n     */\\r\\n    event Staked(address _from, uint256 _amount);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a user withdraws `_amount` of tokens.\\r\\n     */\\r\\n    event Withdrawn(address _from, uint256 _amount);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a user claims rewards.\\r\\n     */\\r\\n    event RewardClaimed(address _from, uint256 _amount);\\r\\n\\r\\n    /**\\r\\n     * @dev Stakes `_amount` of tokens.\\r\\n     * @param _amount Amount of tokens to stake.\\r\\n     *\\r\\n     * Emits a {Staked} event.\\r\\n     */\\r\\n    function stake(uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraws `_amount` of tokens.\\r\\n     * @param _amount Amount of tokens to withdraw.\\r\\n     *\\r\\n     * Emits a {Withdrawn} event.\\r\\n     */\\r\\n    function withdraw(uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Claims rewards.\\r\\n     *\\r\\n     * Emits a {RewardClaimed} event.\\r\\n     */\\r\\n    function claimReward() external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens staked by `_address`.\\r\\n     * @param _address Address to check.\\r\\n     */\\r\\n    function stakedOf(address _address) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of rewards earned by `_address`.\\r\\n     * @param _address Address to check.\\r\\n     */\\r\\n    function rewardOf(address _address) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total amount of tokens staked.\\r\\n     */\\r\\n    function totalStaked() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns current APR\\r\\n     */\\r\\n    function getAPR() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/staking/IStakingAmounts.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.16;\\r\\n\\r\\n/**\\r\\n * @dev Interface of Staking Amounts .\\r\\n */\\r\\ninterface IStakingAmounts {\\r\\n    /**\\r\\n     * @dev Returns the total staked amount for a user\\r\\n     * @param _user Address of the user\\r\\n     * @return uint256 Total staked amount for the user\\r\\n     *\\r\\n     */\\r\\n    function stakedOf(address _user) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total staked amount for all users\\r\\n     * @return uint256 Total staked amount for all users\\r\\n     *\\r\\n     */\\r\\n    function totalStaked() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/staking/IStakingStats.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport \\\"./IStaking.sol\\\";\\r\\n\\r\\ninterface IStakingStats is IStaking {\\r\\n    /**\\r\\n     * @dev Returns the total amount of rewards a wallet has generated. Including claimed rewards.\\r\\n     */\\r\\n    function getTotalRewardsGenerated(address _address) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total amount of time a wallet has staked. Including withdrawn tokens.\\r\\n     * This resets when user withdraws all tokens.\\r\\n     */\\r\\n    function getUserStakeDuration(address _address) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of participants.\\r\\n     */\\r\\n    function numberOfParticipants() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addresses between `_start` and `_end`.\\r\\n     */\\r\\n    function addresses(uint256 _start, uint256 _end) external view returns (address[] memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/vesting/IVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.16;\\r\\n\\r\\ninterface IVesting {\\r\\n    event Claimed(address account, uint256 amount);\\r\\n    event Refunded(address account, uint256 amount);\\r\\n    event RefundRequested(address account);\\r\\n    event SharesAdded(address account, uint256 amount);\\r\\n    event SharesUpdated(address account, uint256 newShares);\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers currently claimable tokens to the sender\\r\\n     * emits {Claimed} event.\\r\\n     */\\r\\n    function claim() external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns `true` if users can request a refund\\r\\n     */\\r\\n    function canRequestRefund() external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev checks if `_acount` has requested a refund\\r\\n     */\\r\\n    function hasRequestedRefund(address _account) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Gets and stores a refund request for the sender\\r\\n     * emits {RefundRequested} event.\\r\\n     */\\r\\n    function requestRefund() external;\\r\\n\\r\\n    /**\\r\\n     * @notice Sets `_amount` shares to `_account` independent of their previous shares.\\r\\n     * @dev Even if `_account` has shares, it will be set to `_amount`.\\r\\n     * emits {SharesUpdated} event.\\r\\n     * @param _account The account to set shares to\\r\\n     * @param _amount The amount of shares to set\\r\\n     */\\r\\n    function setShares(address _account, uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Adds `_amount` shares to `_account`.\\r\\n     * @dev If `_account` has no shares, it will be added to the list of shareholders.\\r\\n     * emits {SharesAdded} event.\\r\\n     * @param _account The account to add shares to\\r\\n     * @param _amount The amount of shares to add\\r\\n     */\\r\\n    function addShares(address _account, uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Removes `_amount` shares from `_account`.\\r\\n     * @dev If `_account` has no shares, it will be removed from the list of shareholders.\\r\\n     * emits {SharesUpdated} event.\\r\\n     * @param _account The account to remove shares from\\r\\n     */\\r\\n    function removeShares(address _account) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns amount of tokens that can be claimed by `_account`\\r\\n     */\\r\\n    function claimableOf(address _account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns total amount of tokens that can be claimed by `_account`\\r\\n     */\\r\\n    function totalClaimableOf(address _account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns amount of tokens that has been claimed by `_account`\\r\\n     */\\r\\n    function claimedOf(address _account) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/vesting/Releaser.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Releaser\\r\\n */\\r\\ncontract Releaser is Ownable, Pausable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    IERC20 private immutable _token;\\r\\n    address private immutable _beneficiary;\\r\\n    uint256 private _erc20Released;\\r\\n    uint256 private _start;\\r\\n    uint256 private _duration;\\r\\n    uint256 private _periods;\\r\\n\\r\\n    event ERC20Released(address _token, uint256 _amount);\\r\\n\\r\\n    /**\\r\\n     * @dev Set the beneficiary, start timestamp and vesting duration of the vesting wallet.\\r\\n     */\\r\\n    constructor(\\r\\n        address beneficiaryAddress,\\r\\n        address erc20Token,\\r\\n        uint256 startTimestamp,\\r\\n        uint256 durationSeconds,\\r\\n        uint256 periodInSeconds\\r\\n    ) {\\r\\n        require(erc20Token != address(0), \\\"Releaser: token cannot be the zero address\\\");\\r\\n        require(beneficiaryAddress != address(0), \\\"Releaser: beneficiary is zero address\\\");\\r\\n        require(startTimestamp >= block.timestamp, \\\"Releaser: start is before current time\\\");\\r\\n        require(durationSeconds > 0, \\\"Releaser: duration should be larger than 0\\\");\\r\\n        require(\\r\\n            durationSeconds >= periodInSeconds,\\r\\n            \\\"Releaser: duration should be larger than period\\\"\\r\\n        );\\r\\n\\r\\n        _token = IERC20(erc20Token);\\r\\n        _beneficiary = beneficiaryAddress;\\r\\n        _start = startTimestamp;\\r\\n        _duration = durationSeconds;\\r\\n        _periods = periodInSeconds;\\r\\n    }\\r\\n\\r\\n    function updateStartTime(uint256 startTimestamp) external onlyOwner {\\r\\n        require(startTimestamp >= block.timestamp, \\\"Releaser: start is before current time\\\");\\r\\n        _start = startTimestamp;\\r\\n    }\\r\\n\\r\\n    function updateDuration(uint256 durationSeconds) external onlyOwner {\\r\\n        require(durationSeconds > 0, \\\"Releaser: duration should be larger than 0\\\");\\r\\n        _duration = durationSeconds;\\r\\n    }\\r\\n\\r\\n    function updatePeriods(uint256 periodInSeconds) external onlyOwner {\\r\\n        _periods = periodInSeconds;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Release the tokens that have already vested.\\r\\n     *\\r\\n     * Emits a {ERC20Released} event.\\r\\n     */\\r\\n    function release() external virtual {\\r\\n        uint256 _releasable = vestedAmount(block.timestamp) - released();\\r\\n        _erc20Released += _releasable;\\r\\n        emit ERC20Released(ERC20token(), _releasable);\\r\\n        _token.safeTransfer(beneficiary(), _releasable);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw the tokens that have already vested.\\r\\n     * Only in emergency or refund period.\\r\\n     * @param _to Address to withdraw tokens to. This will be the owner of main Vesting contract.\\r\\n     * @param _amount Amount of tokens to withdraw.\\r\\n     */\\r\\n    function emergencyWithdraw(address _to, uint256 _amount) external onlyOwner {\\r\\n        _token.safeTransfer(_to, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calculates the amount of tokens that has already vested.\\r\\n     */\\r\\n    function vestedAmount(uint256 timestamp) public view virtual returns (uint256) {\\r\\n        uint256 offset = _start % _periods;\\r\\n        uint256 residue = (timestamp % _periods);\\r\\n        uint256 scheduled = timestamp - residue + offset;\\r\\n        return _vestingSchedule(_token.balanceOf(address(this)) + released(), scheduled);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the token address.\\r\\n     */\\r\\n    function ERC20token() public view virtual returns (address) {\\r\\n        return address(_token);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the beneficiary address.\\r\\n     */\\r\\n    function beneficiary() public view virtual returns (address) {\\r\\n        return _beneficiary;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the start timestamp.\\r\\n     */\\r\\n    function start() public view virtual returns (uint256) {\\r\\n        return _start;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the vesting duration.\\r\\n     */\\r\\n    function duration() public view virtual returns (uint256) {\\r\\n        return _duration;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the vesting periods.\\r\\n     */\\r\\n    function periods() public view virtual returns (uint256) {\\r\\n        return _periods;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Amount of token already released\\r\\n     */\\r\\n    function released() public view virtual returns (uint256) {\\r\\n        return _erc20Released;\\r\\n    }\\r\\n\\r\\n    function releasable() public view virtual returns (uint256) {\\r\\n        return vestedAmount(block.timestamp) - released();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Virtual implementation of the vesting formula. This returns the amount vested, as a function of time, for\\r\\n     * an asset given its total historical allocation.\\r\\n     */\\r\\n    function _vestingSchedule(\\r\\n        uint256 _totalAllocation,\\r\\n        uint256 _timestamp\\r\\n    ) internal view virtual returns (uint256) {\\r\\n        if (_timestamp < start()) {\\r\\n            return 0;\\r\\n        } else if (_timestamp > start() + duration()) {\\r\\n            return _totalAllocation;\\r\\n        } else {\\r\\n            return (_totalAllocation * (_timestamp - start())) / duration();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/vesting/Vesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"contracts/vesting/IVesting.sol\\\";\\r\\nimport \\\"contracts/vesting/Releaser.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Vesting\\r\\n */\\r\\ncontract Vesting is IVesting, Pausable, AccessControl, ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    bool private _isRefundOpen;\\r\\n\\r\\n    bytes32 public constant PROJECT_SALE = keccak256(\\\"PROJECT_SALE\\\");\\r\\n    uint256 public tge;\\r\\n\\r\\n    uint8 public boost;\\r\\n    mapping(address => bool) public isBoosted;\\r\\n\\r\\n    Releaser private releaser;\\r\\n    IERC20 private token;\\r\\n\\r\\n    uint256 private _totalShares;\\r\\n    uint256 private _totalReleased;\\r\\n\\r\\n    mapping(address => uint256) private _shares;\\r\\n    mapping(address => uint256) private _released;\\r\\n    EnumerableSet.AddressSet private _refundees;\\r\\n\\r\\n    event PaymentReleased(address to, uint256 amount);\\r\\n\\r\\n    modifier onlyInRefundPeriod() {\\r\\n        require(_isRefundOpen, \\\"Refund is not open\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _token,\\r\\n        uint256 _tge,\\r\\n        uint256 _cliff,\\r\\n        uint256 _durationInSec,\\r\\n        uint256 _periodInSeconds\\r\\n    ) {\\r\\n        require(_token != address(0), \\\"Token address cannot be 0\\\");\\r\\n        require(_tge > block.timestamp, \\\"TGE cannot be in the past\\\");\\r\\n        require(_cliff >= block.timestamp, \\\"Cliff cannot be in the past\\\");\\r\\n        require(_durationInSec > 0, \\\"Duration cannot be 0\\\");\\r\\n\\r\\n        releaser = new Releaser(address(this), _token, _cliff, _durationInSec, _periodInSeconds);\\r\\n        token = IERC20(_token);\\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n        _grantRole(PROJECT_SALE, msg.sender);\\r\\n        _isRefundOpen = false;\\r\\n        boost = 10;\\r\\n        tge = _tge;\\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw(\\r\\n        uint256 _amount,\\r\\n        bool _fromReleaser\\r\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        if (_fromReleaser) {\\r\\n            releaser.emergencyWithdraw(msg.sender, _amount);\\r\\n        } else {\\r\\n            token.safeTransfer(msg.sender, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function replaceWallet(\\r\\n        address _oldWallet,\\r\\n        address _newWallet\\r\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(_oldWallet != address(0), \\\"Vesting: old wallet is the zero address\\\");\\r\\n        require(_newWallet != address(0), \\\"Vesting: new wallet is the zero address\\\");\\r\\n        require(_shares[_oldWallet] > 0, \\\"Vesting: old wallet has no shares\\\");\\r\\n\\r\\n        uint256 oldShares = _shares[_oldWallet];\\r\\n        _shares[_oldWallet] = 0;\\r\\n        _shares[_newWallet] = oldShares;\\r\\n\\r\\n        uint256 oldReleased = _released[_oldWallet];\\r\\n        _released[_oldWallet] = 0;\\r\\n        _released[_newWallet] = oldReleased;\\r\\n\\r\\n        isBoosted[_newWallet] = isBoosted[_oldWallet];\\r\\n        isBoosted[_oldWallet] = false;\\r\\n\\r\\n        emit SharesUpdated(_oldWallet, 0);\\r\\n        emit SharesUpdated(_newWallet, oldShares);\\r\\n    }\\r\\n\\r\\n    function updateTimes(\\r\\n        uint256 _tge,\\r\\n        uint256 _cliff,\\r\\n        uint256 _durationInSec,\\r\\n        uint256 _periodInSeconds\\r\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        if (_tge > 0) {\\r\\n            require(_tge > block.timestamp, \\\"TGE cannot be in the past\\\");\\r\\n            tge = _tge;\\r\\n        }\\r\\n        if (_cliff > 0) {\\r\\n            require(_cliff >= block.timestamp, \\\"Cliff cannot be in the past\\\");\\r\\n            releaser.updateStartTime(_cliff);\\r\\n        }\\r\\n        if (_durationInSec > 0) {\\r\\n            releaser.updateDuration(_durationInSec);\\r\\n        }\\r\\n        if (_periodInSeconds > 0) {\\r\\n            releaser.updatePeriods(_periodInSeconds);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setBoost(uint8 _boost) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        boost = _boost;\\r\\n    }\\r\\n\\r\\n    function addBoostedUsers(address[] memory _accounts) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\r\\n            isBoosted[_accounts[i]] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeBoostedUsers(address[] memory _accounts) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\r\\n            isBoosted[_accounts[i]] = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function airdrop(address[] memory _accounts) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        releaser.release();\\r\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\r\\n            uint256 payment = releasable(_accounts[i]);\\r\\n            if (payment > 0) {\\r\\n                _release(_accounts[i]);\\r\\n                emit Claimed(_accounts[i], payment);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IVesting-claim}.\\r\\n     */\\r\\n    function claim() external nonReentrant whenNotPaused {\\r\\n        require(block.timestamp >= tge, \\\"Vesting: TGE has not happened yet\\\");\\r\\n        releaser.release();\\r\\n        uint256 payment = releasable(msg.sender);\\r\\n        _release(msg.sender);\\r\\n        emit Claimed(msg.sender, payment);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IVesting-requestRefund}.\\r\\n     */\\r\\n    function requestRefund() external onlyInRefundPeriod {\\r\\n        require(claimedOf(msg.sender) == 0, \\\"Vesting: account has already claimed\\\");\\r\\n        _refundees.add(msg.sender);\\r\\n        emit RefundRequested(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to remove shares from an arrayof accounts and transfer the tokens to the admin.\\r\\n     * emits {Refunded} event.\\r\\n     * @param _accounts addresses of the accounts.\\r\\n     */\\r\\n    function refundUsers(address[] memory _accounts) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\r\\n            refundUser(_accounts[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ACCESS CONTROL FUNCTIONS\\r\\n\\r\\n    function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    function allowRefund() external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        _isRefundOpen = true;\\r\\n    }\\r\\n\\r\\n    function disallowRefund() external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        _isRefundOpen = false;\\r\\n    }\\r\\n\\r\\n    function batchSetShares(address[] memory _accounts, uint256[] memory _shares_) external {\\r\\n        require(_accounts.length == _shares_.length, \\\"Vesting: arrays length mismatch\\\");\\r\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\r\\n            setShares(_accounts[i], _shares_[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function batchAddShares(address[] memory _accounts, uint256[] memory _shares_) external {\\r\\n        require(_accounts.length == _shares_.length, \\\"Vesting: arrays length mismatch\\\");\\r\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\r\\n            addShares(_accounts[i], _shares_[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function batchRemoveShares(address[] memory _accounts) external {\\r\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\r\\n            removeShares(_accounts[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IVesting-claimableOf}.\\r\\n     */\\r\\n    function claimableOf(address _account) external view returns (uint256) {\\r\\n        return releasable(_account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to get the vesting releaser contract.\\r\\n     * @return address of the releaser contract.\\r\\n     */\\r\\n    function getReleaser() external view returns (address) {\\r\\n        return address(releaser);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to get the vesting token contract.\\r\\n     * @return address of the token contract.\\r\\n     */\\r\\n    function getTokenAddress() external view returns (address) {\\r\\n        return address(token);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the amount of shares held by an account.\\r\\n     */\\r\\n    function shares(address account) external view returns (uint256) {\\r\\n        return _shares[account];\\r\\n    }\\r\\n\\r\\n    function getTotalShares() external view returns (uint256) {\\r\\n        return _totalShares;\\r\\n    }\\r\\n\\r\\n    function getRefundeeNumber() external view returns (uint256) {\\r\\n        return _refundees.length();\\r\\n    }\\r\\n\\r\\n    function getRefundees(uint _start, uint _end) external view returns (address[] memory) {\\r\\n        uint256 refundeesCount = _refundees.length();\\r\\n        require(_start >= 0, \\\"Vesting: start is negative\\\");\\r\\n        require(_start < refundeesCount, \\\"Vesting: start is greater than refundees length\\\");\\r\\n        if (_end > refundeesCount) {\\r\\n            _end = refundeesCount;\\r\\n        }\\r\\n\\r\\n        address[] memory _refs = new address[](_end - _start);\\r\\n        for (uint i = _start; i < _end; i++) {\\r\\n            _refs[i - _start] = _refundees.at(i);\\r\\n        }\\r\\n        return _refs;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IVesting-setShares}.\\r\\n     */\\r\\n    function setShares(address _account, uint256 shares_) public onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(_account != address(0), \\\"Vesting: account is the zero address\\\");\\r\\n        require(shares_ > 0, \\\"Vesting: shares are 0\\\");\\r\\n\\r\\n        uint256 oldShares = _shares[_account];\\r\\n        _shares[_account] = shares_;\\r\\n        _totalShares = _totalShares + shares_ - oldShares;\\r\\n        emit SharesUpdated(_account, shares_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IVesting-addShares}.\\r\\n     */\\r\\n    function addShares(address _account, uint256 _amount) public onlyRole(PROJECT_SALE) {\\r\\n        require(_account != address(0), \\\"Vesting: account is the zero address\\\");\\r\\n        require(_amount > 0, \\\"Vesting: shares are 0\\\");\\r\\n\\r\\n        if (isBoosted[_account]) {\\r\\n            _amount += (_amount * boost) / 100;\\r\\n        }\\r\\n        _shares[_account] += _amount;\\r\\n        _totalShares += _amount;\\r\\n        emit SharesAdded(_account, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IVesting-removeShares}.\\r\\n     */\\r\\n    function removeShares(address _account) public onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        _removeShares(_account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to remove shares from an account and transfer the tokens to the admin.\\r\\n     * emits {Refunded} event.\\r\\n     * @param _account address of the account.\\r\\n     */\\r\\n    function refundUser(address _account) public onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        if (claimedOf(_account) > 0) {\\r\\n            return;\\r\\n        } else {\\r\\n            releaser.release();\\r\\n            uint256 payment = releasable(_account);\\r\\n            uint256 notClaimed = totalClaimableOf(_account);\\r\\n            _removeShares(_account);\\r\\n\\r\\n            releaser.emergencyWithdraw(msg.sender, notClaimed - payment);\\r\\n            token.safeTransfer(msg.sender, payment);\\r\\n            emit Refunded(_account, notClaimed);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IVesting-totalClaimableOf}.\\r\\n     */\\r\\n    function totalClaimableOf(address _account) public view returns (uint256) {\\r\\n        uint256 totalAmount = token.balanceOf(address(this)) +\\r\\n            token.balanceOf(address(releaser)) +\\r\\n            _totalReleased;\\r\\n        return _shareOf(_account, totalAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IVesting-claimedOf}.\\r\\n     */\\r\\n    function claimedOf(address _account) public view returns (uint256) {\\r\\n        return _released[_account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\\r\\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\\r\\n     * contract.\\r\\n     */\\r\\n    function _release(address account) internal virtual {\\r\\n        require(_shares[account] > 0, \\\"Vesting: account has no shares\\\");\\r\\n\\r\\n        uint256 payment = releasable(account);\\r\\n\\r\\n        require(payment != 0, \\\"Vesting: account is not due payment\\\");\\r\\n\\r\\n        _released[account] += payment;\\r\\n        _totalReleased += payment;\\r\\n\\r\\n        token.safeTransfer(account, payment);\\r\\n        emit PaymentReleased(account, payment);\\r\\n    }\\r\\n\\r\\n    function _removeShares(address _account) internal {\\r\\n        require(_account != address(0), \\\"Vesting: account is the zero address\\\");\\r\\n\\r\\n        uint256 oldShares = _shares[_account];\\r\\n        _shares[_account] = 0;\\r\\n        _totalShares -= oldShares;\\r\\n        emit SharesUpdated(_account, 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the amount of shares in tokens with respect to total amounts.\\r\\n     * @param _account address of the account.\\r\\n     * @param _amount amount of total tokens.\\r\\n     * @return amount of tokens account can receive.\\r\\n     */\\r\\n    function _shareOf(address _account, uint256 _amount) internal view returns (uint256) {\\r\\n        return (_amount * _shares[_account]) / _totalShares;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the amount of payee's releasable `token` tokens. `token` should be the address of an\\r\\n     * IERC20 contract.\\r\\n     */\\r\\n    function releasable(address account) internal view returns (uint256) {\\r\\n        uint256 totalReceived = token.balanceOf(address(this)) +\\r\\n            _totalReleased +\\r\\n            releaser.releasable();\\r\\n        return _pendingPayment(account, totalReceived, _released[account]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\\r\\n     * already released amounts.\\r\\n     */\\r\\n    function _pendingPayment(\\r\\n        address account,\\r\\n        uint256 totalReceived,\\r\\n        uint256 alreadyReleased\\r\\n    ) private view returns (uint256) {\\r\\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\\r\\n    }\\r\\n\\r\\n    function canRequestRefund() external view override returns (bool) {\\r\\n        return _isRefundOpen;\\r\\n    }\\r\\n\\r\\n    function hasRequestedRefund(address _account) external view override returns (bool) {\\r\\n        return _refundees.contains(_account);\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"registerStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registerEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingRoundStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingRoundEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicRoundStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicRoundEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingEnd\",\"type\":\"uint256\"}],\"internalType\":\"struct AbstractProjectSale.SaleTimes\",\"name\":\"_saleTimes\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"kycProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allocationProvider\",\"type\":\"address\"}],\"internalType\":\"struct ProjectSale.Providers\",\"name\":\"_providers\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_vestingPeriodsInSec\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_creditReserve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_creditToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_projectToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_projectTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSaleValueCap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_saleClaimAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeClaimAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CreditDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"adminRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"batchAdminRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"creditAllocationOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"creditDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"creditDepositableOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"creditDepositedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditReserve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditToken\",\"outputs\":[{\"internalType\":\"contract ERC20Burnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositAmountWithFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"depositableOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"depositedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeClaimAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublicRound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStakingRound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"participantAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"participantCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"participantsBetween\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"providers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"kycProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allocationProvider\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"publicSaleDepositedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleClaimAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSaleValueCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"saleClaimAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeClaimAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSaleValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleDepositCap\",\"type\":\"uint256\"},{\"internalType\":\"contract IStakingAmounts\",\"name\":\"stakingAmounts\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minStake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"registerStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registerEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingRoundStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingRoundEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicRoundStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicRoundEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingEnd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_publicSaleDepositCap\",\"type\":\"uint256\"}],\"name\":\"setPublicSaleCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingAmounts\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"}],\"name\":\"setStakingAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"stakingRoundAllocationOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSaleValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSaleValueCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_allocationProvider\",\"type\":\"address\"}],\"name\":\"updateAllocationProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateFeeClaimAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kycProvider\",\"type\":\"address\"}],\"name\":\"updateKycProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateSaleClaimAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"registerStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registerEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingRoundStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingRoundEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicRoundStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicRoundEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingEnd\",\"type\":\"uint256\"}],\"internalType\":\"struct AbstractProjectSale.SaleTimes\",\"name\":\"_saleTimes\",\"type\":\"tuple\"}],\"name\":\"updateTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingContract\",\"outputs\":[{\"internalType\":\"contract Vesting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ProjectSale", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000065955a5000000000000000000000000000000000000000000000000000000000659d435000000000000000000000000000000000000000000000000000000000659fe6500000000000000000000000000000000000000000000000000000000065a137d00000000000000000000000000000000000000000000000000000000065a145e00000000000000000000000000000000000000000000000000000000065a297600000000000000000000000000000000000000000000000000000000065a297610000000000000000000000000000000000000000000000000000000065a297620000000000000000000000000000000000000000000000000000000065a3e8e20000000000000000000000004bb49ce2b4623f5287c08954969b5c9d756e375200000000000000000000000094e0575af58923a90ffd2b03c87b2d5bc601d8d900000000000000000000000000000000000000000000000000000000000151800000000000000000000000008287ede6a77053e65b2c32bed889044e7595adb300000000000000000000000055d398326f99059ff775485246999027b319795500000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000d69ee2e508363fed57f89917d5ca03e715ee551900000000000000000000000000000000000000000000000006f05b59d3b20000000000000000000000000000000000000000000000003f870857a3e0e3800000000000000000000000000000000000000000000000001fc3842bd1f071c000000000000000000000000000005402e8523a99c97275a96a11d8d69b824ea9c89d0000000000000000000000005402e8523a99c97275a96a11d8d69b824ea9c89d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}