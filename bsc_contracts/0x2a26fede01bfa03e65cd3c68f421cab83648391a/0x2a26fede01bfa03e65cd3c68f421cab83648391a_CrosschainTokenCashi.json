{"SourceCode": "// File: contracts/token/ERC20Basic.sol\r\n\r\npragma solidity <0.6 >=0.4.21;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n// File: contracts/token/ERC20.sol\r\n\r\npragma solidity <0.6 >=0.4.21;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n// File: contracts/iotube/CrosschainTokenCashierRouter.sol\r\n\r\npragma solidity <6.0 >=0.4.24;\r\n\r\n\r\ninterface ICashier {\r\n    function depositTo(address _token, address _to, uint256 _amount) external payable;\r\n}\r\n\r\ninterface ICrosschainToken {\r\n    function deposit(uint256 _amount) external;\r\n    function coToken() external view returns (ERC20);\r\n}\r\n\r\ncontract CrosschainTokenCashierRouter {\r\n\r\n    ICashier public cashier;\r\n\r\n    constructor(ICashier _cashier) public {\r\n        cashier = _cashier;\r\n    }\r\n\r\n    function approveCrosschainToken(address _crosschainToken) public {\r\n        ERC20 token = ICrosschainToken(_crosschainToken).coToken();\r\n        require(token.approve(_crosschainToken, uint256(-1)), \"failed to approve allowance to crosschain token\");\r\n        require(ERC20(_crosschainToken).approve(address(cashier), uint256(-1)), \"failed to approve allowance to cashier\");\r\n    }\r\n\r\n    function depositTo(address _crosschainToken, address _to, uint256 _amount) public payable {\r\n        require(_crosschainToken != address(0), \"invalid token\");\r\n        ERC20 token = ICrosschainToken(_crosschainToken).coToken();\r\n        require(safeTransferFrom(address(token), msg.sender, address(this), _amount), \"failed to transfer token\");\r\n        ICrosschainToken(_crosschainToken).deposit(_amount);\r\n        cashier.depositTo.value(msg.value)(_crosschainToken, _to, _amount);\r\n    }\r\n\r\n    function safeTransferFrom(address _token, address _from, address _to, uint256 _amount) internal returns (bool) {\r\n        // selector = bytes4(keccak256(bytes('transferFrom(address,address,uint256)')))\r\n        (bool success, bytes memory data) = _token.call(abi.encodeWithSelector(0x23b872dd, _from, _to, _amount));\r\n        return success && (data.length == 0 || abi.decode(data, (bool)));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ICashier\",\"name\":\"_cashier\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_crosschainToken\",\"type\":\"address\"}],\"name\":\"approveCrosschainToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cashier\",\"outputs\":[{\"internalType\":\"contract ICashier\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_crosschainToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositTo\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "CrosschainTokenCashierRouter", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000797f1465796fd89ea7135e76dbc7cdb136bba1ca", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://1e500ac1f26e6832aa8f8c6b2dbd26b52b2fa2c5fb4e49d950af0602072dadc7"}