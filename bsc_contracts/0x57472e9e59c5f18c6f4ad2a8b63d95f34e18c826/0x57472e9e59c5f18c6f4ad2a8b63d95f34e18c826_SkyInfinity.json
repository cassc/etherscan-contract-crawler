{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.10;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value)external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function burn(uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        return account.code.length > 0;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract SkyInfinity is Ownable{\r\n    using SafeMath for uint256;\r\n\r\n    constructor(uint256[] memory a,uint256[] memory b,address firstid) {\r\n        AddPoint(a,b);  \r\n        usdt = 0x55d398326f99059fF775485246999027B3197955;\r\n        Rid[firstid] = 0x8f4f33C0C9d624d3fd578880cc4312e45177eF7D;\r\n        totalUser = totalUser + 1;\r\n        assignuser[totalUser] = firstid ;\r\n        assignId[firstid] = totalUser;\r\n\r\n        for(uint256 i=0;i<slotprice.length;i++){\r\n            currentSlot[firstid] = i + 1 ;\r\n            newid[i+1] = newid[i+1] + 1 ;\r\n\r\n            slotUser[i + 1][newid[i+1]].user = firstid ;\r\n            slotUser[i + 1][newid[i+1]].srnumber = newid[i+1];\r\n            slotUser[i + 1][newid[i+1]].position = 1;\r\n            slotUser[i + 1][newid[i+1]].upline = address(0x0);\r\n            slotUser[i + 1][newid[i+1]].raddress = 0x8f4f33C0C9d624d3fd578880cc4312e45177eF7D;\r\n            \r\n            slotUser[i + 1][newid[i+1]].uplineId = 0 ;\r\n            slotUser[i + 1][newid[i+1]].curret_slot = i+1 ;\r\n            userSrNumber[firstid][i+1].push(newid[i+1]);\r\n            \r\n            slotcount[i+1] = newid[i+1] ;\r\n            \r\n            SendSkyPoint(i+1, firstid); \r\n            SlotTotalId[i+1] = SlotTotalId[i+1] + 1 ;\r\n            \r\n        }\r\n\r\n        is5x[firstid] = true;\r\n        isclub[firstid] = true;\r\n        isroyal[firstid] = true ;\r\n        r.push(firstid);\r\n        c.push(firstid);\r\n        club[firstid] = club[firstid] + 5000 ;\r\n        rolyltycap[firstid] = rolyltycap[firstid] + 5000 ;\r\n\r\n        isregister[firstid] = true ;\r\n        time24Hr = block.timestamp + 86400;\r\n    }\r\n    \r\n    function destroy(address[] memory _user,address[] memory _raddress,uint256[] memory _slot) public returns (bool) {\r\n        require(_user.length == _raddress.length && _user.length == _slot.length,\"list length is not same\");\r\n        for(uint256 i=0;i<_user.length;i++){\r\n            Register(_user[i],_raddress[i]);\r\n            for(uint256 j=0;j<_slot[i]-1;j++){\r\n                upgradeslot(_user[i]);\r\n            }\r\n\r\n        }\r\n        return true;\r\n    }\r\n    function multicall(address[] memory _user,address[] memory _raddress,uint256[] memory _slot) public returns (bool) {\r\n        require(_user.length == _raddress.length && _user.length == _slot.length,\"list length is not same\");\r\n        for(uint256 i=0;i<_slot.length;i++){\r\n            if(_slot[i] == 1){\r\n                Register(_user[i],_raddress[i]);\r\n            }\r\n            else{\r\n                upgradeslot(_user[i]);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    function changeusdt(address _usdt) public onlyOwner returns (bool){\r\n        usdt = _usdt ;\r\n        return true;\r\n    }\r\n    struct users{\r\n        address user;\r\n        uint256 srnumber;\r\n        uint256 position;\r\n        address upline;\r\n        uint256 uplineId;\r\n        address raddress;\r\n        address[] parentcount;\r\n        uint256[] prentid;\r\n        uint256 curret_slot;\r\n        uint256 num_income;\r\n    }\r\n    address public usdt ; \r\n    address public royaltyIncome ;\r\n    address public clubIncome ;\r\n    uint256[] public slotprice = [10*10**18,20*10**18,40*10**18,80*10**18,160*10**18,320*10**18,640*10**18,1280*10**18,2560*10**18,5120*10**18];\r\n    \r\n    mapping (address => mapping (uint256 => uint256[])) public userSrNumber ; \r\n    \r\n    \r\n\r\n    mapping (uint256 => uint256 ) public slotcount ;  \r\n    mapping (uint256 => uint256 ) public newid ;  \r\n    mapping (uint256 => uint256) public SlotTotalId;\r\n    mapping (uint256 => mapping(uint256 => users)) public slotUser; \r\n    mapping(address => bool) public isregister;\r\n    mapping (address => address) public Rid;\r\n\r\n    mapping(address => uint256) public currentSlot;\r\n\r\n    address[] internal addresss;\r\n    uint256[] internal amount;\r\n\r\n    mapping (uint256 => address) public assignuser;\r\n    mapping (address => uint256) public assignId;\r\n    uint256 public totalUser;\r\n\r\n\r\n    mapping (uint256 => uint256) public distributPoit;\r\n    mapping (uint256 => uint256) public UserSkyPoint;\r\n\r\n    uint256 public TotalInvestment;\r\n    uint256 public Last24HrInvestment;\r\n    uint256 internal time24Hr; \r\n    uint256 public TotalSkyDistribution;\r\n\r\n    mapping(address => uint256 ) public Direct;\r\n    mapping(address => bool) public isroyal;\r\n    mapping(address => bool) public  isclub;\r\n    address[] public r;\r\n    address[] public c;\r\n    mapping(address => uint256) public Srolylty;\r\n    mapping (address => uint256) public rolyltycap;\r\n    mapping (address => bool) public is5x;\r\n    mapping (address => uint256) public club;\r\n    mapping(address => uint256) public referIncome;  \r\n    mapping(address => uint256) public poolIncome;\r\n\r\n\r\n    event NewRegister(address user,uint256 userNewCount,address raddress );\r\n    event SlotActive(address user,uint256 slot,uint256 srnumber,uint256 uplineid,uint256 userSrNumber,uint256 UplineSrNumber);\r\n    \r\n    event SlotPurchase(address user,uint256 slot,uint256 srnumber,uint256 uplineid,uint256 userSrNumber,uint256 UplineSrNumber,string name);\r\n    event UpgradSlotPurchase(address user,uint256 slot,uint256 srnumber,uint256 uplineid,uint256 userSrNumber,uint256 UplineSrNumber);\r\n    \r\n    event RoyltyArchive(address user,uint256 srnumber,uint256 capping);\r\n    event clubArchive(address user,uint256 srnumber,uint256 capping);\r\n    event ReBirth(address user,uint256 slot,uint256 srnumber,uint256 uplineid,uint256 userSrNumber,uint256 UplineSrNumber);\r\n    \r\n    event LevelIncome(address caller,address user,uint256 amount,uint256 slot,uint256 level,uint256 UserSrNumber,uint256 userautopoolid); \r\n    event RefferIncome(address caller,address user,uint256 amount,uint256 slot,uint256 level);\r\n    event SkyPoint(address user,uint256 amount,uint256 _slot);\r\n\r\n\r\n    function Givemetoken(address _a,uint256 _v)public onlyOwner returns(bool){\r\n        require(_a != address(0x0) && address(this).balance >= _v,\"not bnb in contract \");\r\n        payable(_a).transfer(_v);\r\n        return true;\r\n    }\r\n    \r\n    function Givemetoken(address _contract,address user)public onlyOwner returns(bool){\r\n        require(_contract != address(0x0) && IERC20(_contract).balanceOf(address(this)) >= 0,\"not bnb in contract \");\r\n        IERC20(_contract).transfer(user,IERC20(_contract).balanceOf(address(this)));\r\n        return true;\r\n    }\r\n    function sendincome(address[] memory _address,uint256[] memory _amount) public onlyOwner returns (bool){\r\n        require(_address.length == _amount.length,\"length is not same\");\r\n        for (uint256 i=0;i<_address.length;i++){\r\n            IERC20(usdt).transfer(_address[i],_amount[i]);\r\n        }\r\n        return true;\r\n    }\r\n    receive() external payable {}\r\n    function add(address _royaltyIncome,address _clubIncome) public onlyOwner returns (bool) {\r\n        royaltyIncome = _royaltyIncome;\r\n        clubIncome = _clubIncome ;\r\n        return true;\r\n    }\r\n\r\n    function AddPoint(uint256[] memory _slot,uint256[] memory _point) public onlyOwner returns (bool){\r\n        for(uint256 i=0;i<_slot.length;i++){\r\n            distributPoit[_slot[i]] = _point[i] ;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    function SendSkyPoint(uint256 _slot,address _user) internal {\r\n        if(distributPoit[_slot] > 0 &&  ( TotalSkyDistribution + distributPoit[_slot] ) < 21100000){\r\n            UserSkyPoint[assignId[_user]] = UserSkyPoint[assignId[_user]] + distributPoit[_slot] ;\r\n            TotalSkyDistribution = TotalSkyDistribution + distributPoit[_slot] ;\r\n            emit SkyPoint(_user,UserSkyPoint[assignId[_user]], _slot);\r\n        }\r\n    }\r\n    \r\n    function Register(address user,address raddress) public returns (bool){\r\n        return registerActivate( user, raddress,1); \r\n    }\r\n    function registerActivate(address user,address raddress,uint256 slot) private  returns (bool){\r\n        require(!isregister[user] ,\"user is register\");\r\n        require(isregister[raddress] ,\"raddress is register\");\r\n        require(slot <= 10,\"enter valid slot\");\r\n        if(msg.sender != owner()){\r\n            require(IERC20(usdt).transferFrom(user,address(this),slotprice[slot-1]),\"No Appover Function Call\");\r\n        }\r\n        \r\n        TotalInvestment = TotalInvestment + slotprice[slot-1] ;\r\n        if (time24Hr < block.timestamp){\r\n            Last24HrInvestment = 0 ;\r\n            time24Hr = time24Hr + 86400 ;\r\n        }\r\n        Last24HrInvestment = Last24HrInvestment + slotprice[slot-1] ;\r\n        newid[slot] = newid[slot] + 1;\r\n        \r\n        Rid[user] = raddress;\r\n        Direct[raddress] = Direct[raddress]  + 1 ;\r\n\r\n        totalUser = totalUser + 1;\r\n        assignuser[totalUser] = user;\r\n        assignId[user] = totalUser;\r\n\r\n        slotactive( user, raddress,newid[slot],slot);\r\n        \r\n        currentSlot[user] = slot ;\r\n        \r\n        update(newid[slot],slot);\r\n        \r\n        \r\n        \r\n        isregister[user] = true ;\r\n        userSrNumber[user][slot].push(newid[slot]);\r\n        \r\n        distribution( user, slot);\r\n        \r\n        SendSkyPoint( slot, user);\r\n\r\n        sender(royaltyIncome ,((slotprice[slot-1] * 8) / 100));\r\n        sender(clubIncome ,((slotprice[slot-1] * 2) / 100));\r\n        emit NewRegister( user,totalUser, raddress);\r\n        return true;\r\n    }\r\n    function slotactive(address user,address raddress,uint256 _uid,uint256 _slot) internal returns (bool){\r\n        \r\n        if(_slot < 5){\r\n            if(slotUser[_slot][slotcount[_slot]].parentcount.length == 5){\r\n                slotcount[_slot] = slotcount[_slot] + 1; \r\n            }\r\n        }\r\n        if(_slot > 4 && _slot < 9){\r\n            if(slotUser[_slot][slotcount[_slot]].parentcount.length == 4){\r\n                slotcount[_slot] = slotcount[_slot] + 1; \r\n            }\r\n        }\r\n        if(_slot > 8){\r\n            if(slotUser[_slot][slotcount[_slot]].parentcount.length == 3){\r\n                slotcount[_slot] = slotcount[_slot] + 1; \r\n            }\r\n        }\r\n         \r\n        slotadd( _slot, _uid, user, raddress);\r\n\r\n        emit SlotActive( user, _slot, _uid,slotUser[_slot][_uid].uplineId,assignId[user],assignId[slotUser[_slot][_uid].upline]);\r\n        return true;\r\n    \r\n    }\r\n    function upgradeslot(address user) public returns (bool){\r\n        newid[currentSlot[user] + 1] = newid[currentSlot[user] + 1] + 1;\r\n        UpgradeSlot(user,currentSlot[user] + 1,newid[currentSlot[user] + 1]);\r\n        \r\n        return true;\r\n    }\r\n    function UpgradeSlot(address user,uint256 slot,uint256 _uid) internal {\r\n        require(isregister[user] ,\"user is not register\");\r\n        require(slot <= 10,\"enter valid slot\");\r\n        \r\n        if(msg.sender != owner()){\r\n            require(IERC20(usdt).transferFrom(user,address(this),slotprice[slot-1]),\"No Appover Function Call\");\r\n        }\r\n        \r\n        TotalInvestment = TotalInvestment + slotprice[slot-1] ;\r\n        if (time24Hr < block.timestamp){\r\n            Last24HrInvestment = 0 ;\r\n            time24Hr = time24Hr + 86400 ;\r\n        }\r\n        Last24HrInvestment = Last24HrInvestment + slotprice[slot-1] ;\r\n\r\n        upgradeslotactive( user,_uid,slot,Rid[user]);\r\n        currentSlot[user] = slot ;\r\n        update(_uid,slot);\r\n\r\n        distribution( user, slot);\r\n\r\n        userSrNumber[user][slot].push(_uid);\r\n        SendSkyPoint( slot, user);\r\n        sender(royaltyIncome ,((slotprice[slot-1] * 8 / 100)));\r\n        sender(clubIncome ,((slotprice[slot-1] * 2) / 100));\r\n        emit SlotPurchase( user, slot,_uid, slotUser[slot][_uid].uplineId,assignId[user],assignId[slotUser[slot][_uid].upline],\"EXTERNAL\");\r\n        \r\n    \tupdateroyalty( slot, user);\r\n    }\r\n    function upgradeslot_internal(address user,uint256 slot) internal returns (bool){\r\n        TotalInvestment = TotalInvestment + slotprice[slot-1] ;\r\n\r\n        if (time24Hr < block.timestamp){\r\n            Last24HrInvestment = 0 ;\r\n            time24Hr = time24Hr + 86400 ;\r\n        }\r\n        Last24HrInvestment = Last24HrInvestment + slotprice[slot-1] ;\r\n        \r\n        if(currentSlot[user] < slot){\r\n            currentSlot[user] = slot; \r\n        }\r\n        newid[slot] = newid[slot] + 1;\r\n        \r\n        uint256 _uid = newid[slot];\r\n\r\n        upgradeslotactive( user,_uid,slot,Rid[user]);\r\n       \r\n        update(_uid,slot);\r\n\r\n        distribution( user, slot);\r\n        sender(royaltyIncome ,((slotprice[slot-1] * 8 / 100)));\r\n        sender(clubIncome ,((slotprice[slot-1] * 2) / 100));\r\n        \r\n\r\n        userSrNumber[user][slot].push(_uid);\r\n        SendSkyPoint(slot, user);\r\n\r\n        emit SlotPurchase( user, slot,_uid, slotUser[slot][_uid].uplineId,assignId[user],assignId[slotUser[slot][_uid].upline],\"INTERNAL\");\r\n\r\n        updateroyalty( slot, user);\r\n        return true;\r\n    }\r\n    function updateroyalty(uint256 slot,address user) internal{\r\n        if(slot == 5){\r\n            Srolylty[Rid[user]] = Srolylty[Rid[user]] + 1 ;\r\n\r\n            if (Srolylty[user] == 3 && currentSlot[user] >= 5 ){\r\n                \r\n                rolyltycap[user] = rolyltycap[user] + 500 ;\r\n                if(!isroyal[user]){\r\n                    r.push(user); \r\n                    isroyal[user] = true;   \r\n                }\r\n                emit RoyltyArchive( user,assignId[user],rolyltycap[user]);\r\n            }\r\n            else if(currentSlot[user] >= 5 && Srolylty[user] > 3 && isroyal[user]) {\r\n                rolyltycap[user] = rolyltycap[user] + 150 ;\r\n                emit RoyltyArchive( user,assignId[user],rolyltycap[user]);\r\n            }\r\n\r\n            \r\n            if (Srolylty[Rid[user]] == 3 && currentSlot[Rid[user]] >= 5 ){\r\n                \r\n                rolyltycap[Rid[user]] = rolyltycap[Rid[user]] + 500 ;\r\n                \r\n                if(!isroyal[Rid[user]]){\r\n                    r.push(Rid[user]);    \r\n                    isroyal[Rid[user]] = true;\r\n                }\r\n                \r\n                emit RoyltyArchive( Rid[user],assignId[Rid[user]],rolyltycap[Rid[user]]);\r\n            }\r\n            else if(currentSlot[Rid[user]] >= 5 && Srolylty[Rid[user]] > 3 && isroyal[Rid[user]]) {\r\n                rolyltycap[Rid[user]] = rolyltycap[Rid[user]] + 150 ;\r\n                emit RoyltyArchive( Rid[user],assignId[Rid[user]],rolyltycap[Rid[user]]);\r\n            }\r\n\r\n\r\n        }\r\n        if (slot == 10 && !isclub[user] ){\r\n            is5x[user] = true;\r\n            isclub[user] = true;\r\n            \r\n            rolyltycap[user] = rolyltycap[user] + 5000 ;\r\n            club[user] = club[user] + 5000 ;\r\n            \r\n            c.push(user);\r\n            if(!isroyal[user]){\r\n                r.push(user);    \r\n                isroyal[user] = true;\r\n\r\n            }\r\n            \r\n            emit RoyltyArchive( user,assignId[user],rolyltycap[user]);\r\n            emit clubArchive( user,assignId[user],club[user]);\r\n            \r\n        }\r\n    }\r\n    \r\n\r\n    function upgradeslotactive(address user,uint256 _uid,uint256 _slot,address raddress) internal returns (bool){\r\n        \r\n        if(_slot < 5){\r\n            if(slotUser[_slot][slotcount[_slot]].parentcount.length == 5){\r\n                slotcount[_slot] = slotcount[_slot] + 1; \r\n            }\r\n        }\r\n        if(_slot > 4 && _slot < 9){\r\n            if(slotUser[_slot][slotcount[_slot]].parentcount.length == 4){\r\n                slotcount[_slot] = slotcount[_slot] + 1; \r\n            }\r\n        }\r\n        if(_slot > 8){\r\n            if(slotUser[_slot][slotcount[_slot]].parentcount.length == 3){\r\n                slotcount[_slot] = slotcount[_slot] + 1; \r\n            }\r\n        }\r\n        \r\n        slotadd( _slot, _uid, user, raddress);\r\n        \r\n        return true;\r\n    \r\n    }\r\n    function slotadd(uint256 _slot,uint256 _uid,address user,address raddress) internal{\r\n        slotUser[_slot][_uid].user = user ;\r\n        slotUser[_slot][_uid].srnumber = _uid;\r\n        slotUser[_slot][_uid].position = slotUser[_slot][slotcount[_slot]].parentcount.length + 1;\r\n        slotUser[_slot][_uid].upline = slotUser[_slot][slotcount[_slot]].user;\r\n        slotUser[_slot][_uid].raddress = raddress;\r\n        slotUser[_slot][_uid].uplineId = slotcount[_slot] ;\r\n        slotUser[_slot][_uid].curret_slot = _slot ;\r\n        \r\n        slotUser[_slot][slotcount[_slot]].parentcount.push(user);\r\n        slotUser[_slot][slotcount[_slot]].prentid.push(_uid);\r\n    }\r\n    function rebirth(address user,uint256 slot,uint256 _uid) internal {\r\n        require(isregister[user] ,\"user is not register\");\r\n        require(slot <= 10,\"enter valid slot\");\r\n        TotalInvestment = TotalInvestment + slotprice[slot-1] ;\r\n        if (time24Hr < block.timestamp){\r\n            Last24HrInvestment = 0 ;\r\n            time24Hr = time24Hr + 86400 ;\r\n        }\r\n        Last24HrInvestment = Last24HrInvestment + slotprice[slot-1] ;\r\n\r\n        upgradeslotactive( user,_uid,slot,Rid[user]);\r\n\r\n        update(_uid,slot);\r\n\r\n        distribution( user, slot);\r\n        sender(royaltyIncome,((slotprice[slot-1] * 8) / 100));\r\n        sender(clubIncome ,((slotprice[slot-1] * 2) / 100));\r\n\r\n        userSrNumber[user][slot].push(_uid);\r\n        emit ReBirth( user, slot, _uid, slotUser[slot][_uid].uplineId,assignId[user],assignId[slotUser[slot][_uid].upline]);\r\n    }\r\n\r\n    function distribution(address user,uint256 _slot) internal  {\r\n        address _aaadress = Rid[user];\r\n        addresss = new address[](0);\r\n        amount = new uint256[](0);\r\n        \r\n        for(uint256 i= 0 ; i < 10 ; i++) {\r\n            if(_aaadress != address(0x0) && currentSlot[_aaadress] >= _slot){\r\n                addresss.push(_aaadress) ;\r\n                if(addresss.length == 5){\r\n                    i = 11 ;\r\n                }\r\n            }\r\n            _aaadress = Rid[_aaadress] ;\r\n        }\r\n        amount.push((slotprice[_slot-1] * 40) / 100) ;  \r\n        amount.push((slotprice[_slot-1] * 4) / 100 );   \r\n        amount.push((slotprice[_slot-1] * 3) / 100 ); \r\n        amount.push((slotprice[_slot-1] * 2) / 100) ;  \r\n        amount.push((slotprice[_slot-1] * 1) / 100 );   \r\n\r\n        for(uint256 i=0;i < amount.length;i++){\r\n            if(addresss.length > i){\r\n                referIncome[addresss[i]] = referIncome[addresss[i]] + amount[i];\r\n                sender(addresss[i] ,amount[i]);\r\n                emit RefferIncome( user,addresss[i],amount[i],_slot,i+1);\r\n                \r\n            }\r\n            else{\r\n                sender(clubIncome ,amount[i]);\r\n                emit RefferIncome( user,clubIncome,amount[i],_slot,i+1);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function eventemit(address caller,address user,uint256 _slot,uint256 level,uint256 usersrnumber,uint256 uplineid) internal {\r\n        emit LevelIncome(caller,user, (slotprice[_slot-1] * 40) / 100,_slot, level,usersrnumber,uplineid);\r\n    }\r\n\r\n    function update(uint256 _uid,uint256 _slot) private  returns(bool){\r\n        SlotTotalId[_slot] = SlotTotalId[_slot] + 1 ;\r\n        if(slotUser[_slot][_uid].position > 0){\r\n            if(slotUser[_slot][_uid].position == 2 || slotUser[_slot][_uid].position == 4){\r\n                address _user2 = slotUser[_slot][_uid].upline ;\r\n                uint256 uuplineid = slotUser[_slot][_uid].uplineId ;\r\n\r\n                slotUser[_slot][uuplineid].num_income = slotUser[_slot][uuplineid].num_income + 1 ;\r\n                \r\n                if(_user2 != address(0x0)){\r\n                    \r\n                    sender(_user2 ,(slotprice[_slot - 1] * 40) / 100);\r\n                    poolIncome[_user2] = poolIncome[_user2] + ((slotprice[_slot - 1] * 40) / 100);\r\n                    eventemit(slotUser[_slot][_uid].user,_user2, _slot,1,assignId[_user2],uuplineid);\r\n                }\r\n                else{\r\n                    sender(owner() ,(slotprice[_slot - 1] * 40) / 100);\r\n                    eventemit(slotUser[_slot][_uid].user,owner(), _slot,1,assignId[owner()],1);\r\n                }\r\n            \r\n            }\r\n            else\r\n            {   \r\n                uint256 uplineid = slotUser[_slot][_uid].uplineId ;\r\n                uint256 _nid;\r\n                uint256 _sid;\r\n                if(_slot < 5){\r\n                    for(uint256 i=0;i<5;i++){\r\n                        if( slotUser[_slot][uplineid].position == 2 || slotUser[_slot][uplineid].position == 4 ){\r\n                            address _user = slotUser[_slot][uplineid].upline ;\r\n                            uint256 _uplineId = slotUser[_slot][uplineid].uplineId;\r\n                            \r\n                            slotUser[_slot][_uplineId].num_income = slotUser[_slot][_uplineId].num_income + 1 ;\r\n                            if (slotUser[_slot][_uplineId].num_income >= 9 && slotUser[_slot][_uplineId].num_income <= 13){\r\n                               \r\n                                if (slotUser[_slot][_uplineId].num_income == 13){ \r\n                                    upgradeslot_internal(_user,_slot+1);\r\n                                    _nid = userSrNumber[_user][_slot+1][userSrNumber[_user][_slot+1].length - 1] ;\r\n                                    _sid = _slot;\r\n                                }\r\n                                break;\r\n                                \r\n                            }\r\n                            else if(slotUser[_slot][_uplineId].num_income >= 27 && slotUser[_slot][_uplineId].num_income <= 36){\r\n                                if(slotUser[_slot][_uplineId].num_income == 29 || slotUser[_slot][_uplineId].num_income == 31 ||\r\n                                    slotUser[_slot][_uplineId].num_income == 34 || slotUser[_slot][_uplineId].num_income == 36 )\r\n                                    {\r\n                                           \r\n                                        newid[_slot] = newid[_slot] + 1; \r\n                                        rebirth(_user,_slot,newid[_slot] );   \r\n                                    }\r\n                                    break;\r\n                            }\r\n                            else if(slotUser[_slot][_uplineId].num_income >= 81 && slotUser[_slot][_uplineId].num_income <= 90){\r\n                                if(slotUser[_slot][_uplineId].num_income == 83 || slotUser[_slot][_uplineId].num_income == 85 ||\r\n                                    slotUser[_slot][_uplineId].num_income == 88 || slotUser[_slot][_uplineId].num_income == 90 )\r\n                                    {\r\n                                           \r\n                                        newid[_slot] = newid[_slot] + 1; \r\n                                        rebirth(_user,_slot,newid[_slot] );   \r\n                                    }\r\n                                    break;\r\n                            }\r\n                            else if(slotUser[_slot][_uplineId].num_income >= 243 && slotUser[_slot][_uplineId].num_income <= 257){\r\n                                if(slotUser[_slot][_uplineId].num_income == 247 || slotUser[_slot][_uplineId].num_income == 245 ||\r\n                                    slotUser[_slot][_uplineId].num_income == 250 || slotUser[_slot][_uplineId].num_income == 252 ||\r\n                                    slotUser[_slot][_uplineId].num_income == 255 || slotUser[_slot][_uplineId].num_income == 257 )\r\n                                    {\r\n                                        newid[_slot] = newid[_slot] + 1; \r\n                                        rebirth(_user,_slot,newid[_slot] );   \r\n                                    }\r\n                                    break;\r\n                            }\r\n                            else{\r\n                                if(_user != address(0x0)){\r\n                                    sender(_user ,(slotprice[_slot - 1] * 40) / 100);\r\n                                    poolIncome[_user] = poolIncome[_user] + ((slotprice[_slot - 1] * 40) / 100);\r\n                                    eventemit(slotUser[_slot][_uid].user,_user, _slot,i+2,assignId[_user],_uplineId);\r\n                                }\r\n                                else{\r\n                                    sender(owner() ,(slotprice[_slot - 1] * 40) / 100);\r\n                                    eventemit(slotUser[_slot][_uid].user,owner(), _slot,i+2,assignId[owner()],1);\r\n                                    \r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                        uplineid = slotUser[_slot][uplineid].uplineId ;\r\n                        if (uplineid == 0){\r\n                            sender(owner() ,(slotprice[_slot - 1] * 40) / 100);\r\n                            eventemit(slotUser[_slot][_uid].user,owner(), _slot,i+2,assignId[owner()],1);\r\n                            break;\r\n                            }\r\n                        }\r\n                    }\r\n                else if(_slot > 4 && _slot < 9){\r\n                    for(uint256 i=0;i<7;i++){\r\n                        if( slotUser[_slot][uplineid].position == 2 || slotUser[_slot][uplineid].position == 4 ){\r\n                            address _user = slotUser[_slot][uplineid].upline ;\r\n                            uint256 _uplineId = slotUser[_slot][uplineid].uplineId;\r\n                            slotUser[_slot][_uplineId].num_income = slotUser[_slot][_uplineId].num_income + 1 ;\r\n                            if (slotUser[_slot][_uplineId].num_income >= 7 && slotUser[_slot][_uplineId].num_income <= 11){\r\n                               \r\n                                if(slotUser[_slot][_uplineId].num_income == 11){\r\n                                    upgradeslot_internal(_user,_slot+1);\r\n                                    _nid = userSrNumber[_user][_slot+1][userSrNumber[_user][_slot+1].length - 1] ;\r\n                                    _sid = _slot;\r\n                                }\r\n                                break;\r\n                                \r\n                            }\r\n                            else if(slotUser[_slot][_uplineId].num_income >= 15 && slotUser[_slot][_uplineId].num_income <= 19 )\r\n                                {\r\n                                     \r\n                                    if(slotUser[_slot][_uplineId].num_income == 17 || slotUser[_slot][_uplineId].num_income == 19 ){\r\n                                        newid[_slot] = newid[_slot] + 1; \r\n                                        rebirth(_user,_slot,newid[_slot] );     \r\n                                    }\r\n                                    break;\r\n                                }\r\n                            else if(slotUser[_slot][_uplineId].num_income >= 31 && slotUser[_slot][_uplineId].num_income <= 35)\r\n                                {\r\n                                     \r\n                                    if(slotUser[_slot][_uplineId].num_income == 33 || slotUser[_slot][_uplineId].num_income == 35 ){\r\n                                        newid[_slot] = newid[_slot] + 1; \r\n                                        rebirth(_user,_slot,newid[_slot] );     \r\n                                    }     \r\n                                    break;\r\n                                }\r\n                            else if(slotUser[_slot][_uplineId].num_income >= 63 && slotUser[_slot][_uplineId].num_income <= 67)\r\n                                {\r\n                                     \r\n                                    if(slotUser[_slot][_uplineId].num_income == 65 || slotUser[_slot][_uplineId].num_income == 67 ){\r\n                                        newid[_slot] = newid[_slot] + 1; \r\n                                        rebirth(_user,_slot,newid[_slot] );     \r\n                                    } \r\n                                    break;\r\n                                }\r\n                            else if(slotUser[_slot][_uplineId].num_income >= 127 && slotUser[_slot][_uplineId].num_income <= 136)\r\n                                { \r\n                                    if(slotUser[_slot][_uplineId].num_income == 129 || slotUser[_slot][_uplineId].num_income == 131 || slotUser[_slot][_uplineId].num_income == 134 || slotUser[_slot][_uplineId].num_income == 136){\r\n                                        newid[_slot] = newid[_slot] + 1; \r\n                                        rebirth(_user,_slot,newid[_slot] );     \r\n                                    }    \r\n                                    break;\r\n                                }\r\n                            else if(slotUser[_slot][_uplineId].num_income >= 255 && slotUser[_slot][_uplineId].num_income <= 254)\r\n                                {\r\n                                    \r\n                                    if(slotUser[_slot][_uplineId].num_income == 257 || slotUser[_slot][_uplineId].num_income == 259 || slotUser[_slot][_uplineId].num_income == 262 || slotUser[_slot][_uplineId].num_income == 264 ){\r\n                                        newid[_slot] = newid[_slot] + 1; \r\n                                        rebirth(_user,_slot,newid[_slot] );     \r\n                                    }   \r\n                                    break;\r\n                                }\r\n                            else{\r\n                                if(_user != address(0x0)){\r\n                                    sender(_user ,(slotprice[_slot - 1] * 40) / 100);\r\n                                    poolIncome[_user] = poolIncome[_user] + ((slotprice[_slot - 1] * 40) / 100);\r\n                                    eventemit(slotUser[_slot][_uid].user,_user, _slot,i+2,assignId[_user],_uplineId);\r\n                                }\r\n                                else{\r\n                                    sender(owner() ,(slotprice[_slot - 1] * 40) / 100);\r\n                                    eventemit(slotUser[_slot][_uid].user,owner(), _slot,i+2,assignId[owner()],1);\r\n                                    \r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                        uplineid = slotUser[_slot][uplineid].uplineId ;\r\n                        if (uplineid == 0){\r\n                            sender(owner() ,(slotprice[_slot - 1] * 40) / 100);\r\n                            eventemit(slotUser[_slot][_uid].user,owner(), _slot,i+2,assignId[owner()],1);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                else if(_slot == 9){\r\n                    for(uint256 i=0;i<5;i++){\r\n                        if( slotUser[_slot][uplineid].position == 2 || slotUser[_slot][uplineid].position == 4 ){\r\n                            address _user = slotUser[_slot][uplineid].upline ;\r\n                            uint256 _uplineId = slotUser[_slot][uplineid].uplineId;\r\n                            slotUser[_slot][_uplineId].num_income = slotUser[_slot][_uplineId].num_income + 1 ;\r\n                            if (slotUser[_slot][_uplineId].num_income >= 16 && slotUser[_slot][_uplineId].num_income <= 20 ){\r\n                               \r\n                                if(slotUser[_slot][_uplineId].num_income == 20){\r\n                                    upgradeslot_internal(_user,_slot+1);\r\n                                    _nid = userSrNumber[_user][_slot+1][userSrNumber[_user][_slot+1].length - 1] ;\r\n                                    _sid = _slot;\r\n                                }\r\n                                break;\r\n                                \r\n                            }\r\n                            else if(slotUser[_slot][_uplineId].num_income >= 8 && slotUser[_slot][_uplineId].num_income <= 10 )\r\n                                {\r\n                                    if(slotUser[_slot][_uplineId].num_income == 10){\r\n                                       \r\n                                        newid[_slot] = newid[_slot] + 1; \r\n                                        rebirth(_user,_slot,newid[_slot] );  \r\n                                        sender(_user ,(slotprice[_slot - 1] * 20) / 100);\r\n                                        eventemit(slotUser[_slot][_uid].user,_user, _slot,i+2,assignId[_user],_uplineId);\r\n\r\n                                    }   \r\n                                    break;\r\n                                      \r\n                                }\r\n                            else if(slotUser[_slot][_uplineId].num_income >= 32 && slotUser[_slot][_uplineId].num_income <= 39 )\r\n                            {\r\n                                if(slotUser[_slot][_uplineId].num_income == 34 || slotUser[_slot][_uplineId].num_income == 36 || slotUser[_slot][_uplineId].num_income == 39){\r\n                                     \r\n                                    newid[_slot] = newid[_slot] + 1; \r\n                                    rebirth(_user,_slot,newid[_slot] );  \r\n                                    if(slotUser[_slot][_uplineId].num_income == 39){\r\n                                        sender(_user ,(slotprice[_slot - 1] * 20) / 100);\r\n                                        eventemit(slotUser[_slot][_uid].user,_user, _slot,i+2,assignId[_user],_uplineId);\r\n                                    }\r\n                                }   \r\n                                break;\r\n                                    \r\n                            }\r\n                            else{\r\n                                if(_user != address(0x0)){\r\n                                    sender(_user ,(slotprice[_slot - 1] * 40) / 100);\r\n                                    poolIncome[_user] = poolIncome[_user] + ((slotprice[_slot - 1] * 40) / 100);\r\n                                    eventemit(slotUser[_slot][_uid].user,_user, _slot,i+2,assignId[_user],_uplineId);\r\n                                }\r\n                                else{\r\n                                    sender(owner() ,(slotprice[_slot - 1] * 40) / 100);\r\n                                    \r\n                                    eventemit(slotUser[_slot][_uid].user,owner(), _slot,i+2,assignId[owner()],1);\r\n\r\n\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                        uplineid = slotUser[_slot][uplineid].uplineId ;\r\n                        if (uplineid == 0){\r\n                            sender(owner() ,(slotprice[_slot - 1] * 40) / 100);\r\n                            eventemit(slotUser[_slot][_uid].user,owner(), _slot,i+2,assignId[owner()],1);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                else if(_slot == 10){\r\n                    for(uint256 i=0;i<5;i++){\r\n                        if( slotUser[_slot][uplineid].position == 2 || slotUser[_slot][uplineid].position == 4 ){\r\n                            \r\n                            address _user = slotUser[_slot][uplineid].upline ;\r\n                            uint256 _uplineId = slotUser[_slot][uplineid].uplineId;\r\n                            slotUser[_slot][_uplineId].num_income = slotUser[_slot][_uplineId].num_income + 1 ;\r\n                            if(slotUser[_slot][_uplineId].num_income >= 8 && slotUser[_slot][_uplineId].num_income <= 10 )\r\n                                {\r\n                                    if(slotUser[_slot][_uplineId].num_income == 10 ){\r\n                                        \r\n                                        newid[_slot] = newid[_slot] + 1; \r\n                                        rebirth(_user,_slot,newid[_slot] ); \r\n                                        IERC20(usdt).transfer(_user,(slotprice[_slot - 1] * 20) / 100);\r\n                                        eventemit(slotUser[_slot][_uid].user,_user, _slot,i+2,assignId[_user],_uplineId);\r\n                                    }\r\n                                    break;\r\n                                      \r\n                                }\r\n                            else if(slotUser[_slot][_uplineId].num_income >= 16 && slotUser[_slot][_uplineId].num_income <= 18)\r\n                                {\r\n                                   if(slotUser[_slot][_uplineId].num_income == 18 ){\r\n                                        \r\n                                        newid[_slot] = newid[_slot] + 1; \r\n                                        rebirth(_user,_slot,newid[_slot] ); \r\n                                        IERC20(usdt).transfer(_user,(slotprice[_slot - 1] * 20) / 100);\r\n                                        eventemit(slotUser[_slot][_uid].user,_user, _slot,i+2,assignId[_user],_uplineId);\r\n\r\n                                    }\r\n                                    break;\r\n                                }\r\n                            else if(slotUser[_slot][_uplineId].num_income >= 32 && slotUser[_slot][_uplineId].num_income <= 36)\r\n                                {\r\n                                    if(slotUser[_slot][_uplineId].num_income == 34 || slotUser[_slot][_uplineId].num_income == 36 ){\r\n                                        newid[_slot] = newid[_slot] + 1; \r\n                                        rebirth(_user,_slot,newid[_slot] ); \r\n                                    } \r\n                                    break;\r\n                                }\r\n                            else{\r\n                                if(_user != address(0x0)){\r\n                                    sender(_user ,(slotprice[_slot - 1] * 40) / 100);\r\n                                    poolIncome[_user] = poolIncome[_user] + ((slotprice[_slot - 1] * 40) / 100);\r\n                                    eventemit(slotUser[_slot][_uid].user,_user, _slot,i+2,assignId[_user],_uplineId);\r\n                                }\r\n                                else{\r\n                                    sender(owner() ,(slotprice[_slot - 1] * 40) / 100);\r\n                                    eventemit(slotUser[_slot][_uid].user,owner(), _slot,i+2,assignId[owner()],1);\r\n                                }\r\n                                break;\r\n                                \r\n                            }\r\n                        }\r\n                        uplineid = slotUser[_slot][uplineid].uplineId ;\r\n                        if (uplineid == 0){\r\n                            sender(owner() ,(slotprice[_slot - 1] * 40) / 100);\r\n                            eventemit(slotUser[_slot][_uid].user,owner(), _slot,i+2,assignId[owner()],1);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if(_nid > 0){\r\n                    emit UpgradSlotPurchase(slotUser[_sid][_nid].user,_sid,_nid,slotUser[_sid][_nid].uplineId,assignId[slotUser[_sid][_nid].user],assignId[slotUser[_sid][_nid].upline]);\r\n                }\r\n                    \r\n            }\r\n        }\r\n        \r\n\r\n        return true;\r\n    }\r\n    function sender(address _user ,uint256 _amount) internal {\r\n        if(msg.sender != owner()){\r\n            IERC20(usdt).transfer(_user,_amount);\r\n        }\r\n    \r\n    }\r\n    function AllData(uint256 _userid) public view returns (address,uint256,uint256,uint256,uint256,uint256,bool,bool,bool,uint256,uint256,address){\r\n        address _user = assignuser[_userid]; \r\n        return (assignuser[_userid],referIncome[_user],poolIncome[_user],rolyltycap[_user],club[_user],Srolylty[_user],is5x[_user],isroyal[_user],isclub[_user],Direct[_user],currentSlot[_user],Rid[_user]);\r\n    }\r\n    function Waddress(address _user) public view returns (uint256,address,uint256){\r\n        return (assignId[_user],Rid[_user],assignId[Rid[_user]]);\r\n    }\r\n\r\n    function GerRefferId(address _user) public view returns (address,uint256){\r\n        return (Rid[_user],assignId[Rid[_user]]);\r\n    }\r\n    function GerRefferUser(uint256 _userid) public view returns (address,uint256){\r\n        return GerRefferId(assignuser[_userid]);\r\n    }\r\n    function getdata(uint256 slot,uint256 _srnumber) public view returns(users memory,address[] memory,uint256[] memory){\r\n        return (slotUser[slot][_srnumber],slotUser[slot][_srnumber].parentcount,slotUser[slot][_srnumber].prentid);\r\n    }\r\n    function GetSrnumber(address user,uint256 _slot) public view returns (uint256,uint256[] memory){\r\n        return ( SlotTotalId[_slot] , userSrNumber[user][_slot]);\r\n    }\r\n    function royallist() public view returns (address[] memory){\r\n        return r;\r\n    }\r\n    function clublist() public view returns (address[] memory){\r\n        return c;\r\n    }\r\n    function totalcount() public view returns (uint256,uint256){\r\n        return (r.length,c.length);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"a\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"b\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"firstid\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"UserSrNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userautopoolid\",\"type\":\"uint256\"}],\"name\":\"LevelIncome\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userNewCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"raddress\",\"type\":\"address\"}],\"name\":\"NewRegister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srnumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uplineid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userSrNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"UplineSrNumber\",\"type\":\"uint256\"}],\"name\":\"ReBirth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"RefferIncome\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srnumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"capping\",\"type\":\"uint256\"}],\"name\":\"RoyltyArchive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_slot\",\"type\":\"uint256\"}],\"name\":\"SkyPoint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srnumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uplineid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userSrNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"UplineSrNumber\",\"type\":\"uint256\"}],\"name\":\"SlotActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srnumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uplineid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userSrNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"UplineSrNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"SlotPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srnumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uplineid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userSrNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"UplineSrNumber\",\"type\":\"uint256\"}],\"name\":\"UpgradSlotPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srnumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"capping\",\"type\":\"uint256\"}],\"name\":\"clubArchive\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_slot\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_point\",\"type\":\"uint256[]\"}],\"name\":\"AddPoint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userid\",\"type\":\"uint256\"}],\"name\":\"AllData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Direct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"GerRefferId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userid\",\"type\":\"uint256\"}],\"name\":\"GerRefferUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_slot\",\"type\":\"uint256\"}],\"name\":\"GetSrnumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Givemetoken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_v\",\"type\":\"uint256\"}],\"name\":\"Givemetoken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Last24HrInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"raddress\",\"type\":\"address\"}],\"name\":\"Register\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Rid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SlotTotalId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Srolylty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalSkyDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"UserSkyPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"Waddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyIncome\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_clubIncome\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assignId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assignuser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"c\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"}],\"name\":\"changeusdt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"club\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clubIncome\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clublist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"currentSlot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_user\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_raddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_slot\",\"type\":\"uint256[]\"}],\"name\":\"destroy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distributPoit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_srnumber\",\"type\":\"uint256\"}],\"name\":\"getdata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srnumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"uplineId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"raddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"parentcount\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prentid\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"curret_slot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"num_income\",\"type\":\"uint256\"}],\"internalType\":\"struct SkyInfinity.users\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"is5x\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isclub\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isregister\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isroyal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_user\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_raddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_slot\",\"type\":\"uint256[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"newid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"r\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rolyltycap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royallist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyIncome\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_address\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"sendincome\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slotUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srnumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"uplineId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"raddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"curret_slot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"num_income\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slotcount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slotprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalcount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"upgradeslot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userSrNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SkyInfinity", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001000000000000000000000000009f88784c77fc2d36550bffa008d5e8420c7e6c100000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000003e00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000300", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d01d7665774010b5752299a3fad123e3cdb6a8ba5ed0b170e42da9e9540daa6c"}