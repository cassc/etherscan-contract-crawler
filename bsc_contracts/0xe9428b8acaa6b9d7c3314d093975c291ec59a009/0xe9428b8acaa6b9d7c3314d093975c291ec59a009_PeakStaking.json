{"SourceCode": "pragma solidity 0.5.17;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\ncontract MinterRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor () internal {\r\n        _addMinter(_msgSender());\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(_msgSender()), \"MinterRole: caller does not have the Minter role\");\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(_msgSender());\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\r\n * which have permission to mint (create) new tokens as they see fit.\r\n *\r\n * At construction, the deployer of the contract is the only minter.\r\n */\r\ncontract ERC20Mintable is ERC20, MinterRole {\r\n    /**\r\n     * @dev See {ERC20-_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the {MinterRole}.\r\n     */\r\n    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\r\n        _mint(account, amount);\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Extension of {ERC20Mintable} that adds a cap to the supply of tokens.\r\n */\r\ncontract ERC20Capped is ERC20Mintable {\r\n    uint256 private _cap;\r\n\r\n    /**\r\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\r\n     * set once during construction.\r\n     */\r\n    constructor (uint256 cap) public {\r\n        require(cap > 0, \"ERC20Capped: cap is 0\");\r\n        _cap = cap;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the cap on the token's total supply.\r\n     */\r\n    function cap() public view returns (uint256) {\r\n        return _cap;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20Mintable-mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `value` must not cause the total supply to go over the cap.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(totalSupply().add(value) <= _cap, \"ERC20Capped: cap exceeded\");\r\n        super._mint(account, value);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\ncontract ERC20Burnable is Context, ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_burnFrom}.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public {\r\n        _burnFrom(account, amount);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract PeakToken is ERC20, ERC20Detailed, ERC20Capped, ERC20Burnable {\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint8 decimals,\r\n        uint256 cap\r\n    ) ERC20Detailed(name, symbol, decimals) ERC20Capped(cap) public {}\r\n}\r\n\r\ninterface IPancakeSwapOracle {\r\n    function update() external returns (bool success);\r\n\r\n    function consult(address token, uint256 amountIn)\r\n        external\r\n        view\r\n        returns (uint256 amountOut);\r\n}\r\n\r\ncontract SignerRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event SignerAdded(address indexed account);\r\n    event SignerRemoved(address indexed account);\r\n\r\n    Roles.Role private _signers;\r\n\r\n    constructor () internal {\r\n        _addSigner(_msgSender());\r\n    }\r\n\r\n    modifier onlySigner() {\r\n        require(isSigner(_msgSender()), \"SignerRole: caller does not have the Signer role\");\r\n        _;\r\n    }\r\n\r\n    function isSigner(address account) public view returns (bool) {\r\n        return _signers.has(account);\r\n    }\r\n\r\n    function addSigner(address account) public onlySigner {\r\n        _addSigner(account);\r\n    }\r\n\r\n    function renounceSigner() public {\r\n        _removeSigner(_msgSender());\r\n    }\r\n\r\n    function _addSigner(address account) internal {\r\n        _signers.add(account);\r\n        emit SignerAdded(account);\r\n    }\r\n\r\n    function _removeSigner(address account) internal {\r\n        _signers.remove(account);\r\n        emit SignerRemoved(account);\r\n    }\r\n}\r\n\r\ncontract PeakReward is SignerRole {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    event Register(address user, address referrer);\r\n    event RankChange(address user, uint256 oldRank, uint256 newRank);\r\n    event PayCommission(\r\n        address referrer,\r\n        address recipient,\r\n        address token,\r\n        uint256 amount,\r\n        uint8 level\r\n    );\r\n    event ChangedCareerValue(address user, uint256 changeAmount, bool positive);\r\n    event ReceiveRankReward(address user, uint256 peakReward);\r\n\r\n    modifier regUser(address user) {\r\n        if (!isUser[user]) {\r\n            isUser[user] = true;\r\n            emit Register(user, address(0));\r\n        }\r\n        _;\r\n    }\r\n\r\n    uint256 internal constant COMMISSION_RATE = 20 * (10**16); // 20%\r\n    uint256 internal constant PEAK_PRECISION = 10**8;\r\n    uint256 public constant PEAK_MINT_CAP = 25000000 * PEAK_PRECISION; // 25 million PEAK\r\n    uint256 internal constant BUSD_PRECISION = 10**18;\r\n    uint8 internal constant COMMISSION_LEVELS = 8;\r\n\r\n    mapping(address => address) public referrerOf;\r\n    mapping(address => bool) public isUser;\r\n    mapping(address => uint256) public careerValue; // AKA DSV\r\n    mapping(address => uint256) public rankOf;\r\n    mapping(uint256 => mapping(uint256 => uint256)) public rankReward; // (beforeRank, afterRank) => rewardInPeak\r\n    mapping(address => mapping(uint256 => uint256)) public downlineRanks; // (referrer, rank) => numReferredUsersWithRank\r\n\r\n    uint256[] public commissionPercentages;\r\n    uint256[] public commissionStakeRequirements;\r\n    uint256 public mintedPeakTokens;\r\n\r\n    address public marketPeakWallet;\r\n    PeakStaking public peakStaking;\r\n    PeakToken public peakToken;\r\n    address public stablecoin;\r\n    IPancakeSwapOracle public oracle;\r\n\r\n    constructor(\r\n        address _marketPeakWallet,\r\n        address _peakStaking,\r\n        address _peakToken,\r\n        address _stablecoin,\r\n        address _oracle\r\n    ) public {\r\n        // initialize commission percentages for each level\r\n        commissionPercentages.push(10 * (10**16)); // 10%\r\n        commissionPercentages.push(4 * (10**16)); // 4%\r\n        commissionPercentages.push(2 * (10**16)); // 2%\r\n        commissionPercentages.push(1 * (10**16)); // 1%\r\n        commissionPercentages.push(1 * (10**16)); // 1%\r\n        commissionPercentages.push(1 * (10**16)); // 1%\r\n        commissionPercentages.push(5 * (10**15)); // 0.5%\r\n        commissionPercentages.push(5 * (10**15)); // 0.5%\r\n\r\n        // initialize commission stake requirements for each level\r\n        commissionStakeRequirements.push(0);\r\n        commissionStakeRequirements.push(PEAK_PRECISION.mul(2000));\r\n        commissionStakeRequirements.push(PEAK_PRECISION.mul(4000));\r\n        commissionStakeRequirements.push(PEAK_PRECISION.mul(6000));\r\n        commissionStakeRequirements.push(PEAK_PRECISION.mul(7000));\r\n        commissionStakeRequirements.push(PEAK_PRECISION.mul(8000));\r\n        commissionStakeRequirements.push(PEAK_PRECISION.mul(9000));\r\n        commissionStakeRequirements.push(PEAK_PRECISION.mul(10000));\r\n\r\n        // initialize rank rewards\r\n        for (uint256 i = 0; i < 8; i = i.add(1)) {\r\n            uint256 rewardInBUSD = 0;\r\n            for (uint256 j = i.add(1); j <= 8; j = j.add(1)) {\r\n                if (j == 1) {\r\n                    rewardInBUSD = rewardInBUSD.add(BUSD_PRECISION.mul(100));\r\n                } else if (j == 2) {\r\n                    rewardInBUSD = rewardInBUSD.add(BUSD_PRECISION.mul(300));\r\n                } else if (j == 3) {\r\n                    rewardInBUSD = rewardInBUSD.add(BUSD_PRECISION.mul(600));\r\n                } else if (j == 4) {\r\n                    rewardInBUSD = rewardInBUSD.add(BUSD_PRECISION.mul(1200));\r\n                } else if (j == 5) {\r\n                    rewardInBUSD = rewardInBUSD.add(BUSD_PRECISION.mul(2400));\r\n                } else if (j == 6) {\r\n                    rewardInBUSD = rewardInBUSD.add(BUSD_PRECISION.mul(7500));\r\n                } else if (j == 7) {\r\n                    rewardInBUSD = rewardInBUSD.add(BUSD_PRECISION.mul(15000));\r\n                } else {\r\n                    rewardInBUSD = rewardInBUSD.add(BUSD_PRECISION.mul(50000));\r\n                }\r\n                rankReward[i][j] = rewardInBUSD;\r\n            }\r\n        }\r\n\r\n        marketPeakWallet = _marketPeakWallet;\r\n        peakStaking = PeakStaking(_peakStaking);\r\n        peakToken = PeakToken(_peakToken);\r\n        stablecoin = _stablecoin;\r\n        oracle = IPancakeSwapOracle(_oracle);\r\n    }\r\n\r\n      /**\r\n        @notice Registers a group of referrals relationship.\r\n        @param users The array of users\r\n        @param referrers The group of referrers of `users`\r\n     */\r\n    function multiRefer(address[] calldata users, address[] calldata referrers) external onlySigner {\r\n      require(users.length == referrers.length, \"PeakReward: arrays length are not equal\");\r\n      for (uint256 i = 0; i < users.length; i++) {\r\n        refer(users[i], referrers[i]);\r\n      }\r\n    }\r\n\r\n    /**\r\n        @notice Registers a referral relationship\r\n        @param user The user who is being referred\r\n        @param referrer The referrer of `user`\r\n     */\r\n    function refer(address user, address referrer) public onlySigner {\r\n        require(!isUser[user], \"PeakReward: referred is already a user\");\r\n        require(user != referrer, \"PeakReward: can't refer self\");\r\n        require(\r\n            user != address(0) && referrer != address(0),\r\n            \"PeakReward: 0 address\"\r\n        );\r\n\r\n        isUser[user] = true;\r\n        isUser[referrer] = true;\r\n\r\n        referrerOf[user] = referrer;\r\n        downlineRanks[referrer][0] = downlineRanks[referrer][0].add(1);\r\n\r\n        emit Register(user, referrer);\r\n    }\r\n\r\n    function canRefer(address user, address referrer)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return\r\n            !isUser[user] &&\r\n            user != referrer &&\r\n            user != address(0) &&\r\n            referrer != address(0);\r\n    }\r\n\r\n    /**\r\n        @notice Distributes commissions to a referrer and their referrers\r\n        @param referrer The referrer who will receive commission\r\n        @param commissionToken The ERC20 token that the commission is paid in\r\n        @param rawCommission The raw commission that will be distributed amongst referrers\r\n        @param returnLeftovers If true, leftover commission is returned to the sender. If false, leftovers will be paid to MarketPeak.\r\n     */\r\n    function payCommission(\r\n        address referrer,\r\n        address commissionToken,\r\n        uint256 rawCommission,\r\n        bool returnLeftovers\r\n    ) public regUser(referrer) onlySigner returns (uint256 leftoverAmount) {\r\n        // transfer the raw commission from `msg.sender`\r\n        IERC20 token = IERC20(commissionToken);\r\n        token.safeTransferFrom(msg.sender, address(this), rawCommission);\r\n\r\n        // payout commissions to referrers of different levels\r\n        address ptr = referrer;\r\n        uint256 commissionLeft = rawCommission;\r\n        uint8 i = 0;\r\n        while (ptr != address(0) && i < COMMISSION_LEVELS) {\r\n            if (_peakStakeOf(ptr) >= commissionStakeRequirements[i]) {\r\n                // referrer has enough stake, give commission\r\n                uint256 com = rawCommission.mul(commissionPercentages[i]).div(\r\n                    COMMISSION_RATE\r\n                );\r\n                if (com > commissionLeft) {\r\n                    com = commissionLeft;\r\n                }\r\n                token.safeTransfer(ptr, com);\r\n                commissionLeft = commissionLeft.sub(com);\r\n                if (commissionToken == address(peakToken)) {\r\n                    incrementCareerValueInPeak(ptr, com);\r\n                } else if (commissionToken == stablecoin) {\r\n                    incrementCareerValueInBusd(ptr, com);\r\n                }\r\n                emit PayCommission(referrer, ptr, commissionToken, com, i);\r\n            }\r\n\r\n            ptr = referrerOf[ptr];\r\n            i += 1;\r\n        }\r\n\r\n        // handle leftovers\r\n        if (returnLeftovers) {\r\n            // return leftovers to `msg.sender`\r\n            token.safeTransfer(msg.sender, commissionLeft);\r\n            return commissionLeft;\r\n        } else {\r\n            // give leftovers to MarketPeak wallet\r\n            token.safeTransfer(marketPeakWallet, commissionLeft);\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n        @notice Increments a user's career value\r\n        @param user The user\r\n        @param incCV The CV increase amount, in Busd\r\n     */\r\n    function incrementCareerValueInBusd(address user, uint256 incCV)\r\n        public\r\n        regUser(user)\r\n        onlySigner\r\n    {\r\n        careerValue[user] = careerValue[user].add(incCV);\r\n        emit ChangedCareerValue(user, incCV, true);\r\n    }\r\n\r\n    /**\r\n        @notice Increments a user's career value\r\n        @param user The user\r\n        @param incCVInPeak The CV increase amount, in PEAK tokens\r\n     */\r\n    function incrementCareerValueInPeak(address user, uint256 incCVInPeak)\r\n        public\r\n        regUser(user)\r\n        onlySigner\r\n    {\r\n        uint256 peakPriceInBusd = _getPeakPriceInBusd();\r\n        uint256 incCVInBusd = incCVInPeak.mul(peakPriceInBusd).div(\r\n            PEAK_PRECISION\r\n        );\r\n        careerValue[user] = careerValue[user].add(incCVInBusd);\r\n        emit ChangedCareerValue(user, incCVInBusd, true);\r\n    }\r\n\r\n    /**\r\n        @notice Returns a user's rank in the PeakDeFi system based only on career value\r\n        @param user The user whose rank will be queried\r\n     */\r\n    function cvRankOf(address user) public view returns (uint256) {\r\n        uint256 cv = careerValue[user];\r\n        if (cv < BUSD_PRECISION.mul(100)) {\r\n            return 0;\r\n        } else if (cv < BUSD_PRECISION.mul(250)) {\r\n            return 1;\r\n        } else if (cv < BUSD_PRECISION.mul(750)) {\r\n            return 2;\r\n        } else if (cv < BUSD_PRECISION.mul(1500)) {\r\n            return 3;\r\n        } else if (cv < BUSD_PRECISION.mul(3000)) {\r\n            return 4;\r\n        } else if (cv < BUSD_PRECISION.mul(10000)) {\r\n            return 5;\r\n        } else if (cv < BUSD_PRECISION.mul(50000)) {\r\n            return 6;\r\n        } else if (cv < BUSD_PRECISION.mul(150000)) {\r\n            return 7;\r\n        } else {\r\n            return 8;\r\n        }\r\n    }\r\n\r\n    function rankUp(address user) external {\r\n        // verify rank up conditions\r\n        uint256 currentRank = rankOf[user];\r\n        uint256 cvRank = cvRankOf(user);\r\n        require(cvRank > currentRank, \"PeakReward: career value is not enough!\");\r\n        require(downlineRanks[user][currentRank] >= 2 || currentRank == 0, \"PeakReward: downlines count and requirement not passed!\");\r\n\r\n        // Target rank always should be +1 rank from current rank\r\n        uint256 targetRank = currentRank + 1;\r\n\r\n        // increase user rank\r\n        rankOf[user] = targetRank;\r\n        emit RankChange(user, currentRank, targetRank);\r\n\r\n        address referrer = referrerOf[user];\r\n        if (referrer != address(0)) {\r\n            downlineRanks[referrer][targetRank] = downlineRanks[referrer][targetRank]\r\n                .add(1);\r\n            downlineRanks[referrer][currentRank] = downlineRanks[referrer][currentRank]\r\n                .sub(1);\r\n        }\r\n\r\n        // give user rank reward\r\n        uint256 rewardInPeak = rankReward[currentRank][targetRank]\r\n            .mul(PEAK_PRECISION)\r\n            .div(_getPeakPriceInBusd());\r\n        if (mintedPeakTokens.add(rewardInPeak) <= PEAK_MINT_CAP) {\r\n            // mint if under cap, do nothing if over cap\r\n            mintedPeakTokens = mintedPeakTokens.add(rewardInPeak);\r\n            peakToken.mint(user, rewardInPeak);\r\n            emit ReceiveRankReward(user, rewardInPeak);\r\n        }\r\n    }\r\n\r\n    function canRankUp(address user) external view returns (bool) {\r\n        uint256 currentRank = rankOf[user];\r\n        uint256 cvRank = cvRankOf(user);\r\n        return\r\n            (cvRank > currentRank) &&\r\n            (downlineRanks[user][currentRank] >= 2 || currentRank == 0);\r\n    }\r\n\r\n    /**\r\n        @notice Returns a user's current staked PEAK amount, scaled by `PEAK_PRECISION`.\r\n        @param user The user whose stake will be queried\r\n     */\r\n    function _peakStakeOf(address user) internal view returns (uint256) {\r\n        return peakStaking.userStakeAmount(user);\r\n    }\r\n\r\n    /**\r\n        @notice Returns the price of PEAK token in Busd, scaled by `BUSD_PRECISION`.\r\n     */\r\n    function _getPeakPriceInBusd() internal returns (uint256) {\r\n        oracle.update();\r\n\r\n        uint256 priceInBUSD = oracle.consult(address(peakToken), PEAK_PRECISION);\r\n        if (priceInBUSD == 0) {\r\n            return BUSD_PRECISION.mul(3).div(10);\r\n        }\r\n\r\n        return priceInBUSD;\r\n    }\r\n}\r\n\r\ncontract PeakStaking {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for PeakToken;\r\n\r\n    event CreateStake(\r\n        uint256 idx,\r\n        address user,\r\n        address referrer,\r\n        uint256 stakeAmount,\r\n        uint256 stakeTimeInDays,\r\n        uint256 interestAmount\r\n    );\r\n    event ReceiveStakeReward(uint256 idx, address user, uint256 rewardAmount);\r\n    event WithdrawReward(uint256 idx, address user, uint256 rewardAmount);\r\n    event WithdrawStake(uint256 idx, address user);\r\n\r\n    uint256 internal constant PRECISION = 10**18;\r\n    uint256 internal constant PEAK_PRECISION = 10**8;\r\n    uint256 internal constant INTEREST_SLOPE = 2 * (10**8);       // Interest rate factor drops to 0 at 5B mintedPeakTokens\r\n    uint256 internal constant BIGGER_BONUS_DIVISOR = 10**15;      // biggerBonus = stakeAmount / (10 million peak)\r\n    uint256 internal constant MAX_BIGGER_BONUS = 10**17;          // biggerBonus <= 10%\r\n    uint256 internal constant DAILY_BASE_REWARD = 15 * (10**14);  // dailyBaseReward = 0.0015\r\n    uint256 internal constant DAILY_GROWING_REWARD = 10**12;      // dailyGrowingReward = 1e-6\r\n    uint256 internal constant MAX_STAKE_PERIOD = 1000;            // Max staking time is 1000 days\r\n    uint256 internal constant MIN_STAKE_PERIOD = 10;              // Min staking time is 10 days\r\n    uint256 internal constant DAY_IN_SECONDS = 86400;\r\n    uint256 internal constant COMMISSION_RATE = 20 * (10**16);      // 20%\r\n    uint256 internal constant REFERRAL_STAKER_BONUS = 3 * (10**16); // 3%\r\n    uint256 internal constant YEAR_IN_DAYS = 365;\r\n    uint256 public constant PEAK_MINT_CAP = 275000000 * PEAK_PRECISION;           // 275 million PEAK\r\n\r\n    struct Stake {\r\n        address staker;\r\n        uint256 stakeAmount;\r\n        uint256 interestAmount;\r\n        uint256 withdrawnInterestAmount;\r\n        uint256 stakeTimestamp;\r\n        uint256 stakeTimeInDays;\r\n        bool active;\r\n    }\r\n    Stake[] public stakeList;\r\n    mapping(address => uint256) public userStakeAmount;\r\n    uint256 public mintedPeakTokens;\r\n    bool public initialized;\r\n\r\n    PeakToken public peakToken;\r\n    PeakReward public peakReward;\r\n\r\n    constructor(address _peakToken) public {\r\n        peakToken = PeakToken(_peakToken);\r\n    }\r\n\r\n    function init(address _peakReward) public {\r\n        require(!initialized, \"PeakStaking: Already initialized\");\r\n        initialized = true;\r\n\r\n        peakReward = PeakReward(_peakReward);\r\n    }\r\n\r\n    function stake(\r\n        uint256 stakeAmount,\r\n        uint256 stakeTimeInDays,\r\n        address referrer\r\n    ) public returns (uint256 stakeIdx) {\r\n        require(\r\n            stakeTimeInDays >= MIN_STAKE_PERIOD,\r\n            \"PeakStaking: stakeTimeInDays < MIN_STAKE_PERIOD\"\r\n        );\r\n        require(\r\n            stakeTimeInDays <= MAX_STAKE_PERIOD,\r\n            \"PeakStaking: stakeTimeInDays > MAX_STAKE_PERIOD\"\r\n        );\r\n\r\n        // record stake\r\n        uint256 interestAmount = getInterestAmount(\r\n            stakeAmount,\r\n            stakeTimeInDays\r\n        );\r\n        stakeIdx = stakeList.length;\r\n        stakeList.push(\r\n            Stake({\r\n                staker: msg.sender,\r\n                stakeAmount: stakeAmount,\r\n                interestAmount: interestAmount,\r\n                withdrawnInterestAmount: 0,\r\n                stakeTimestamp: now,\r\n                stakeTimeInDays: stakeTimeInDays,\r\n                active: true\r\n            })\r\n        );\r\n        mintedPeakTokens = mintedPeakTokens.add(interestAmount);\r\n        userStakeAmount[msg.sender] = userStakeAmount[msg.sender].add(\r\n            stakeAmount\r\n        );\r\n\r\n        // transfer PEAK from msg.sender\r\n        peakToken.safeTransferFrom(msg.sender, address(this), stakeAmount);\r\n\r\n        // mint PEAK interest\r\n        peakToken.mint(address(this), interestAmount);\r\n\r\n        // handle referral\r\n        if (peakReward.canRefer(msg.sender, referrer)) {\r\n            peakReward.refer(msg.sender, referrer);\r\n        }\r\n        address actualReferrer = peakReward.referrerOf(msg.sender);\r\n        if (actualReferrer != address(0)) {\r\n            // pay referral bonus to referrer\r\n            uint256 rawCommission = interestAmount.mul(COMMISSION_RATE).div(\r\n                PRECISION\r\n            );\r\n            peakToken.mint(address(this), rawCommission);\r\n            peakToken.safeApprove(address(peakReward), rawCommission);\r\n            uint256 leftoverAmount = peakReward.payCommission(\r\n                actualReferrer,\r\n                address(peakToken),\r\n                rawCommission,\r\n                true\r\n            );\r\n            peakToken.burn(leftoverAmount);\r\n\r\n            // pay referral bonus to staker\r\n            uint256 referralStakerBonus = interestAmount\r\n                .mul(REFERRAL_STAKER_BONUS)\r\n                .div(PRECISION);\r\n            peakToken.mint(msg.sender, referralStakerBonus);\r\n\r\n            mintedPeakTokens = mintedPeakTokens.add(\r\n                rawCommission.sub(leftoverAmount).add(referralStakerBonus)\r\n            );\r\n\r\n            emit ReceiveStakeReward(stakeIdx, msg.sender, referralStakerBonus);\r\n        }\r\n\r\n        require(mintedPeakTokens <= PEAK_MINT_CAP, \"PeakStaking: reached cap\");\r\n\r\n        emit CreateStake(\r\n            stakeIdx,\r\n            msg.sender,\r\n            actualReferrer,\r\n            stakeAmount,\r\n            stakeTimeInDays,\r\n            interestAmount\r\n        );\r\n    }\r\n\r\n    function withdraw(uint256 stakeIdx) public {\r\n        Stake storage stakeObj = stakeList[stakeIdx];\r\n        require(\r\n            stakeObj.staker == msg.sender,\r\n            \"PeakStaking: Sender not staker\"\r\n        );\r\n        require(stakeObj.active, \"PeakStaking: Not active\");\r\n\r\n        // calculate amount that can be withdrawn\r\n        uint256 stakeTimeInSeconds = stakeObj.stakeTimeInDays.mul(\r\n            DAY_IN_SECONDS\r\n        );\r\n        uint256 withdrawAmount;\r\n        if (now >= stakeObj.stakeTimestamp.add(stakeTimeInSeconds)) {\r\n            // matured, withdraw all\r\n            withdrawAmount = stakeObj\r\n                .stakeAmount\r\n                .add(stakeObj.interestAmount)\r\n                .sub(stakeObj.withdrawnInterestAmount);\r\n            stakeObj.active = false;\r\n            stakeObj.withdrawnInterestAmount = stakeObj.interestAmount;\r\n            userStakeAmount[msg.sender] = userStakeAmount[msg.sender].sub(\r\n                stakeObj.stakeAmount\r\n            );\r\n\r\n            emit WithdrawReward(\r\n                stakeIdx,\r\n                msg.sender,\r\n                stakeObj.interestAmount.sub(stakeObj.withdrawnInterestAmount)\r\n            );\r\n            emit WithdrawStake(stakeIdx, msg.sender);\r\n        } else {\r\n            // not mature, partial withdraw\r\n            withdrawAmount = stakeObj\r\n                .interestAmount\r\n                .mul(uint256(now).sub(stakeObj.stakeTimestamp))\r\n                .div(stakeTimeInSeconds)\r\n                .sub(stakeObj.withdrawnInterestAmount);\r\n\r\n            // record withdrawal\r\n            stakeObj.withdrawnInterestAmount = stakeObj\r\n                .withdrawnInterestAmount\r\n                .add(withdrawAmount);\r\n\r\n            emit WithdrawReward(stakeIdx, msg.sender, withdrawAmount);\r\n        }\r\n\r\n        // withdraw interest to sender\r\n        peakToken.safeTransfer(msg.sender, withdrawAmount);\r\n    }\r\n\r\n    function getInterestAmount(uint256 stakeAmount, uint256 stakeTimeInDays)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 earlyFactor = _earlyFactor(mintedPeakTokens);\r\n        uint256 biggerBonus = stakeAmount.mul(PRECISION).div(\r\n            BIGGER_BONUS_DIVISOR\r\n        );\r\n        if (biggerBonus > MAX_BIGGER_BONUS) {\r\n            biggerBonus = MAX_BIGGER_BONUS;\r\n        }\r\n\r\n        // convert yearly bigger bonus to stake time\r\n        biggerBonus = biggerBonus.mul(stakeTimeInDays).div(YEAR_IN_DAYS);\r\n\r\n        uint256 longerBonus = _longerBonus(stakeTimeInDays);\r\n        uint256 interestRate = biggerBonus.add(longerBonus).mul(earlyFactor).div(\r\n            PRECISION\r\n        );\r\n        uint256 interestAmount = stakeAmount.mul(interestRate).div(PRECISION);\r\n        return interestAmount;\r\n    }\r\n\r\n    function _longerBonus(uint256 stakeTimeInDays)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return\r\n            DAILY_BASE_REWARD.mul(stakeTimeInDays).add(\r\n                DAILY_GROWING_REWARD\r\n                    .mul(stakeTimeInDays)\r\n                    .mul(stakeTimeInDays.add(1))\r\n                    .div(2)\r\n            );\r\n    }\r\n\r\n    function _earlyFactor(uint256 _mintedPeakTokens)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 tmp = INTEREST_SLOPE.mul(_mintedPeakTokens).div(PEAK_PRECISION);\r\n        if (tmp > PRECISION) {\r\n            return 0;\r\n        }\r\n        return PRECISION.sub(tmp);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_peakToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeTimeInDays\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"}],\"name\":\"CreateStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"ReceiveStakeReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"WithdrawStake\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"PEAK_MINT_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTimeInDays\",\"type\":\"uint256\"}],\"name\":\"getInterestAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_peakReward\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintedPeakTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"peakReward\",\"outputs\":[{\"internalType\":\"contract PeakReward\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"peakToken\",\"outputs\":[{\"internalType\":\"contract PeakToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTimeInDays\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeIdx\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnInterestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTimeInDays\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeIdx\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PeakStaking", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000630d98424efe0ea27fb1b3ab7741907dffeaad78", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://4f3bd73ecba2721999c82139b6139bb91129ee0777c9248b247ee8c336d85829"}