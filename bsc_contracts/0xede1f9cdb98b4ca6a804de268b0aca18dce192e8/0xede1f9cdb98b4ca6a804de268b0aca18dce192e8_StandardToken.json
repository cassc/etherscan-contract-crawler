{"SourceCode": "// File: token/Token.sol\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2021-10-25\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2021-10-22\r\n */\r\n\r\n// File: presale/SafeMath.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a, 'SafeMath:INVALID_ADD');\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b <= a, 'SafeMath:OVERFLOW_SUB');\r\n        c = a - b;\r\n    }\r\n\r\n    function mul(\r\n        uint256 a,\r\n        uint256 b,\r\n        uint256 decimal\r\n    ) internal pure returns (uint256) {\r\n        uint256 dc = 10**decimal;\r\n        uint256 c0 = a * b;\r\n        require(a == 0 || c0 / a == b, 'SafeMath: multiple overflow');\r\n        uint256 c1 = c0 + (dc / 2);\r\n        require(c1 >= c0, 'SafeMath: multiple overflow');\r\n        uint256 c2 = c1 / dc;\r\n        return c2;\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        uint256 decimal\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, 'SafeMath: division by zero');\r\n        uint256 dc = 10**decimal;\r\n        uint256 c0 = a * dc;\r\n        require(a == 0 || c0 / a == dc, 'SafeMath: division internal');\r\n        uint256 c1 = c0 + (b / 2);\r\n        require(c1 >= c0, 'SafeMath: division internal');\r\n        uint256 c2 = c1 / b;\r\n        return c2;\r\n    }\r\n}\r\n\r\n// File: presale/Token.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\nabstract contract ERC20Interface {\r\n    function totalSupply() public view virtual returns (uint256);\r\n\r\n    function balanceOf(address tokenOwner) public view virtual returns (uint256 balance);\r\n\r\n    function allowance(address tokenOwner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint256 remaining);\r\n\r\n    function transfer(address to, uint256 tokens) public virtual returns (bool success);\r\n\r\n    function approve(address spender, uint256 tokens)\r\n        public\r\n        virtual\r\n        returns (bool success);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokens\r\n    ) public virtual returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n}\r\n\r\nabstract contract ApproveAndCallFallBack {\r\n    function receiveApproval(\r\n        address from,\r\n        uint256 tokens,\r\n        address token,\r\n        bytes memory data\r\n    ) public virtual;\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract Pausable is Owned {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\ncontract StandardToken is ERC20Interface, Owned, Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    address public dev;\r\n    address public antisnipe;\r\n    string public symbol;\r\n    string public name;\r\n    uint8 public decimals;\r\n    uint256 public total_supply;\r\n    uint256 public rate_receiver; // (!) input value precision follow \"decimals\"\r\n    uint256 public rate_max_transfer; // (!) input value precision follow \"decimals\"\r\n    uint256 public total_mint;\r\n    bool public is_mintable;\r\n    bool public antisnipeEnabled;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    mapping(address => bool) public tax_list;\r\n    mapping(address => bool) public tax_whitelist;\r\n    mapping(address => bool) public antiWhale_list;\r\n    mapping(address => bool) public minter_list;\r\n\r\n    event UpdateMintable(bool status);\r\n    event UpdateDevAddress(address dev);\r\n    event UpdateTaxAddress(address target_address, bool status);\r\n    event UpdateTaxWhitelist(address target_address, bool status);\r\n    event UpdateRateReceiver(uint256 rate);\r\n    event UpdateRateMaxTransfer(uint256 rate);\r\n    event UpdateAntiWhaleList(address account, bool status);\r\n    event UpdateMinter(address minter, bool status);\r\n\r\n    constructor(\r\n        address _dev,\r\n        uint256 _rate_receiver,\r\n        uint256 _rate_max_transfer\r\n    ) public {\r\n        symbol = 'HP';\r\n        name = 'Heropark';\r\n        decimals = 18;\r\n        total_supply = 10000000000 * 10**uint256(decimals);\r\n        dev = _dev;\r\n        rate_receiver = _rate_receiver;\r\n        rate_max_transfer = _rate_max_transfer;\r\n        is_mintable = true;\r\n        antisnipeEnabled = true;\r\n\r\n        minter_list[msg.sender] = true;\r\n    }\r\n\r\n    modifier antiWhale(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) {\r\n        if (maxTransferAmount() > 0) {\r\n            if (antiWhale_list[from] || antiWhale_list[to]) {\r\n                require(\r\n                    amount <= maxTransferAmount(),\r\n                    'antiWhale: Transfer amount exceeds the maxTransferAmount'\r\n                );\r\n            }\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier isMinter() {\r\n        require(minter_list[msg.sender], 'Not allowed to mint');\r\n        _;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return total_supply.sub(balances[address(0)]);\r\n    }\r\n\r\n    function circulateSupply() public view returns (uint256) {\r\n        return total_mint.sub(balances[address(0)]);\r\n    }\r\n\r\n    function balanceOf(address tokenOwner)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256 balance)\r\n    {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    function approve(address spender, uint256 tokens)\r\n        public\r\n        override\r\n        whenNotPaused\r\n        returns (bool success)\r\n    {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 tokens)\r\n        public\r\n        override\r\n        whenNotPaused\r\n        antiWhale(msg.sender, to, tokens)\r\n        returns (bool success)\r\n    {\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        _transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokens\r\n    ) public override whenNotPaused antiWhale(from, to, tokens) returns (bool success) {\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        _transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    function setAntisnipeAddress(address _address) external onlyOwner {\r\n        antisnipe = _address;\r\n    }\r\n\r\n    function setAntisnipeDisable() external onlyOwner {\r\n        require(antisnipeEnabled);\r\n        antisnipeEnabled = false;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokens\r\n    ) internal {\r\n        if (antisnipeEnabled && address(antisnipe) != address(0)) {\r\n            require(IAntisnipe(antisnipe).assureCanTransfer(msg.sender, from, to, tokens, owner));\r\n        }\r\n        \r\n        /*\r\n         * fullfill all requirment below to apply fee\r\n         * 1. \"from\" or \"to\" address is in blacklist\r\n         * 2. \"from\" or \"to\" address is not in whitelist\r\n         */\r\n        if (\r\n            (tax_list[from] || tax_list[to]) &&\r\n            !(tax_whitelist[from] || tax_whitelist[to])\r\n        ) {\r\n            // send token by calculate allocation to receiver\r\n            uint256 amount = tokens.mul(rate_receiver, decimals);\r\n            balances[to] = balances[to].add(amount);\r\n            emit Transfer(from, to, amount);\r\n\r\n            // send remaining token to dev\r\n            uint256 amount_dev = tokens.sub(amount);\r\n            if (amount_dev > 0) {\r\n                balances[dev] = balances[dev].add(amount_dev);\r\n                emit Transfer(from, dev, amount_dev);\r\n            }\r\n        } else {\r\n            // send full amount to receiver\r\n            balances[to] = balances[to].add(tokens);\r\n            emit Transfer(from, to, tokens);\r\n        }\r\n    }\r\n\r\n    function allowance(address tokenOwner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256 remaining)\r\n    {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    function approveAndCall(\r\n        address spender,\r\n        uint256 tokens,\r\n        bytes memory data\r\n    ) public whenNotPaused returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(\r\n            msg.sender,\r\n            tokens,\r\n            address(this),\r\n            data\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function updateMinter(address minter, bool status) public onlyOwner {\r\n        minter_list[minter] = status;\r\n        emit UpdateMinter(minter, status);\r\n    }\r\n\r\n    function mint(address _address, uint256 amount) public isMinter {\r\n        _mint(_address, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), 'mint to the zero address');\r\n        require(is_mintable, 'not mintable');\r\n        uint256 tmp_total = total_mint.add(amount);\r\n        require(tmp_total <= total_supply, 'total supply exceed');\r\n\r\n        balances[account] = balances[account].add(amount);\r\n        total_mint = total_mint.add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function transferAnyERC20Token(address tokenAddress, uint256 tokens)\r\n        public\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n\r\n    function maxTransferAmount() public view returns (uint256) {\r\n        return circulateSupply().mul(rate_max_transfer, decimals);\r\n    }\r\n\r\n    function updateRateMaxTransfer(uint256 rate) public onlyOwner returns (bool) {\r\n        rate_max_transfer = rate;\r\n        emit UpdateRateMaxTransfer(rate_max_transfer);\r\n        return true;\r\n    }\r\n\r\n    function updateMintable(bool status) public onlyOwner returns (bool) {\r\n        is_mintable = status;\r\n        emit UpdateMintable(status);\r\n        return true;\r\n    }\r\n\r\n    function updateDevAddress(address _dev) public onlyOwner returns (bool) {\r\n        dev = _dev;\r\n        emit UpdateDevAddress(_dev);\r\n        return true;\r\n    }\r\n\r\n    function updateTaxAddress(address _address, bool status)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        tax_list[_address] = status;\r\n        emit UpdateTaxAddress(_address, status);\r\n        return true;\r\n    }\r\n\r\n    function updateTaxWhitelist(address _address, bool status)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        tax_whitelist[_address] = status;\r\n        emit UpdateTaxWhitelist(_address, status);\r\n        return true;\r\n    }\r\n\r\n    function updateAntiWhaleList(address _address, bool status)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        antiWhale_list[_address] = status;\r\n        emit UpdateAntiWhaleList(_address, status);\r\n        return true;\r\n    }\r\n\r\n    function updateRateReceiver(uint256 _rate_receiver) public onlyOwner returns (bool) {\r\n        rate_receiver = _rate_receiver;\r\n        emit UpdateRateReceiver(_rate_receiver);\r\n        return true;\r\n    }\r\n\r\n    fallback() external payable {\r\n        revert();\r\n    }\r\n}\r\n\r\ninterface IAntisnipe {\r\n    function assureCanTransfer(\r\n        address sender,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        address owner\r\n    ) external returns (bool response);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate_receiver\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate_max_transfer\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"UpdateAntiWhaleList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dev\",\"type\":\"address\"}],\"name\":\"UpdateDevAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"UpdateMintable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"UpdateMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"UpdateRateMaxTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"UpdateRateReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"UpdateTaxAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"UpdateTaxWhitelist\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"antiWhale_list\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antisnipe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antisnipeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulateSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"is_mintable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransferAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minter_list\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate_max_transfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate_receiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAntisnipeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAntisnipeDisable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tax_list\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tax_whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateAntiWhaleList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"}],\"name\":\"updateDevAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateMintable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"updateRateMaxTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate_receiver\",\"type\":\"uint256\"}],\"name\":\"updateRateReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateTaxAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateTaxWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StandardToken", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004d9b9714743b57e055cfd826f338d842313dceaa0000000000000000000000000000000000000000000000000c7d713b49da00000000000000000000000000000000000000000000000000000de0b6b3a7640000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://48aa7bf18d87dc5e1c1edbcfc0094fcfbdad38722080eab7ff0991e2f593b279"}