{"SourceCode": "{\"CrowdWorldContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity \\u003e=0.4.23 \\u003c0.9.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ncontract CrowdWorld {\\r\\n    IERC20 public usdt;\\r\\n    struct Ref {\\r\\n        address[] referrals;\\r\\n    }\\r\\n    struct User {\\r\\n        uint id;\\r\\n        address referrer;\\r\\n        uint8 partnercount;\\r\\n        uint8 maxlevel;\\r\\n        uint directbonus;\\r\\n        uint levelbonus;\\r\\n        uint worldpoolincome;\\r\\n        uint magicpoolincome;\\r\\n        uint royaltybonus;\\r\\n        uint[] levelWiseUsers;\\r\\n        uint totalEarn;\\r\\n        uint8 teamCount;\\r\\n        bool isRoyalty;\\r\\n        mapping(uint8 =\\u003e address[]) partners;\\r\\n        mapping(uint8 =\\u003e bool) activeLevels;\\r\\n        mapping(uint8 =\\u003e Ref) referrals;\\r\\n        mapping(uint256 =\\u003e uint[]) worldpool;\\r\\n        mapping(uint256 =\\u003e uint[]) magicpool;\\r\\n        mapping(uint256 =\\u003e mapping(uint256 =\\u003e uint[])) magicpoolupgrade;\\r\\n    }\\r\\n    struct LevelIncomeReport {\\r\\n        uint fromid;\\r\\n        address fromaddress;\\r\\n        uint slot;\\r\\n        uint level;\\r\\n        uint amount;\\r\\n        uint timestamp;\\r\\n        uint types;\\r\\n    }\\r\\n\\r\\n    struct wpools {\\r\\n      uint id; // userID\\r\\n      uint wid; // autopoolID\\r\\n      address myAddress; // user address\\r\\n      uint level;\\r\\n      uint currectID; // refe ID\\r\\n      address currectRefAddress; // refe address\\r\\n      uint id1; // user 1 \\r\\n      uint id2; // user 2\\r\\n      uint id3; // user 3\\r\\n    }\\r\\n\\r\\n    struct magicpools {\\r\\n      uint id; // userID\\r\\n      uint wid; // autopoolID\\r\\n      address myAddress; // user address\\r\\n      uint level;\\r\\n      uint currectID; // refe ID\\r\\n      address currectRefAddress; // refe address\\r\\n      uint id1; // user 1 \\r\\n      uint id2; // user 2\\r\\n      uint id3; // user 3\\r\\n      uint id4; // user 4\\r\\n      uint id5; // user 5\\r\\n      uint id6; // user 6\\r\\n    }\\r\\n\\r\\n    struct magicpoolsUpgrade {\\r\\n      uint id; // userID\\r\\n      uint wid; // autopoolID\\r\\n      address myAddress; // user address\\r\\n      uint level;\\r\\n      uint levelUP;\\r\\n      uint currectID; // refe ID\\r\\n      address currectRefAddress; // refe address\\r\\n      uint id1; // user 1 \\r\\n      uint id2; // user 2\\r\\n      uint id3; // user 3\\r\\n      uint id4; // user 4\\r\\n      uint id5; // user 5\\r\\n      uint id6; // user 6\\r\\n    }\\r\\n    \\r\\n    mapping(address =\\u003e User) public users;\\r\\n    mapping(uint =\\u003e address) public userIds;\\r\\n\\r\\n    mapping(uint =\\u003e wpools) public Wpools;\\r\\n    mapping(uint =\\u003e address) public worldIds;\\r\\n\\r\\n    mapping(uint =\\u003e magicpools) public Magicpools;\\r\\n    mapping(uint =\\u003e address) public magicIds;\\r\\n\\r\\n    mapping(uint =\\u003e magicpoolsUpgrade) public MagicpoolsUpgrade;\\r\\n    mapping(uint =\\u003e address) public magicUpgradeIds;\\r\\n\\r\\n    mapping(address =\\u003e uint) public balances;\\r\\n    mapping(address =\\u003e LevelIncomeReport[]) public LevelIncomeTransactions;\\r\\n    mapping(uint8 =\\u003e mapping(uint256 =\\u003e uint)) public x3vId_number;\\r\\n    mapping(uint8 =\\u003e uint256) public x3CurrentvId;\\r\\n    mapping(uint8 =\\u003e uint256) public x3Index;\\r\\n    mapping(uint8 =\\u003e mapping(uint256 =\\u003e uint)) public x6vId_number;\\r\\n    mapping(uint8 =\\u003e uint256) public x6CurrentvId;\\r\\n    mapping(uint8 =\\u003e uint256) public x6Index;\\r\\n    mapping(uint8 =\\u003e mapping(uint256 =\\u003e mapping(uint8 =\\u003e uint))) public x6vId_number_upgrade;\\r\\n    mapping(uint8 =\\u003e mapping(uint256 =\\u003e uint256)) public x6CurrentvId_upgrade;\\r\\n    mapping(uint8 =\\u003e mapping(uint256 =\\u003e uint256)) public x6Index_upgrade;\\r\\n    \\r\\n    uint public lapsedIncome = 0 ether;\\r\\n    uint public royaltyUserCount = 1;\\r\\n    uint public lastUserId = 2;\\r\\n    uint public worldId = 1;\\r\\n    uint public magicId = 1;\\r\\n    uint public magicupgradeId = 1;\\r\\n    uint public diamondPackagePrice = 15 ether;\\r\\n    uint8 public constant LAST_LEVEL = 10;\\r\\n    address public owner;\\r\\n    uint8[5] private distribution = [0, 25, 25, 25, 25]; // [1]=direct income,[2]=level income,[3]=worldpool income,[4]=magical income\\r\\n    uint[11] public packageprice = [0, 21 ether, 41 ether, 81 ether, 161 ether, 321 ether, 641 ether, 1281 ether, 2561 ether, 5121 ether, 10241 ether];\\r\\n    uint[10] public packageUpgradeprice = [0, 10 ether, 20 ether, 40 ether, 80 ether, 160 ether, 320 ether, 640 ether, 1280 ether, 2560 ether];\\r\\n    uint8[16] private levelPercentage = [0,10,10,10,10,10,5,5,5,5,5,5,5,5,5,5];\\r\\n\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Not the contract owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address ownerAddress, IERC20 _usdtAddress) public {\\r\\n        usdt = _usdtAddress;\\r\\n        owner = ownerAddress;\\r\\n        User memory user = User({\\r\\n            id: 1,\\r\\n            referrer: address(0),\\r\\n            partnercount: 0,\\r\\n            maxlevel: 10,\\r\\n            directbonus: 0,\\r\\n            levelbonus: 0,\\r\\n            worldpoolincome: 0,\\r\\n            magicpoolincome: 0,\\r\\n            royaltybonus: 0,\\r\\n            levelWiseUsers: new uint[](16),\\r\\n            totalEarn: 0,\\r\\n            teamCount: 0,\\r\\n            isRoyalty: true\\r\\n        }); \\r\\n        users[ownerAddress] = user;\\r\\n        userIds[1] = ownerAddress;\\r\\n\\r\\n        for (uint8 i = 1; i \\u003c= LAST_LEVEL; i++) {\\r\\n            x3vId_number[i][1]=worldId;\\r\\n            x3Index[i]=1;\\r\\n            x3CurrentvId[i]=1;   \\r\\n\\r\\n            x6vId_number[i][1]=magicId;\\r\\n            x6Index[i]=1;\\r\\n            x6CurrentvId[i]=1;\\r\\n            for(uint8 i1 = 1; i1 \\u003c= 10; i1++){\\r\\n                x6vId_number_upgrade[i][1][i1]=magicupgradeId;\\r\\n                x6Index_upgrade[i][i1]=1;\\r\\n                x6CurrentvId_upgrade[i][i1]=1;\\r\\n\\r\\n                users[ownerAddress].magicpoolupgrade[i][i1].push(magicupgradeId);\\r\\n\\r\\n                magicpoolsUpgrade memory magicpoolsUpgradeInstance = magicpoolsUpgrade({\\r\\n                    id: 1, // userID\\r\\n                    wid: magicupgradeId, // autopoolID\\r\\n                    myAddress: ownerAddress, // user address\\r\\n                    level: i,\\r\\n                    levelUP: i1,\\r\\n                    currectID: 0, // refe ID\\r\\n                    currectRefAddress: address(0), // refe address\\r\\n                    id1: 0, // user 1 \\r\\n                    id2: 0, // user 2\\r\\n                    id3: 0, // user 3\\r\\n                    id4: 0, // user 4\\r\\n                    id5: 0, // user 5\\r\\n                    id6: 0 // user 6\\r\\n                });\\r\\n                magicUpgradeIds[magicupgradeId] = ownerAddress;\\r\\n                MagicpoolsUpgrade[magicupgradeId] = magicpoolsUpgradeInstance;\\r\\n                magicupgradeId++;\\r\\n\\r\\n            }\\r\\n            users[ownerAddress].activeLevels[i] = true;\\r\\n\\r\\n            users[ownerAddress].worldpool[i].push(worldId);\\r\\n            wpools memory wpool = wpools({\\r\\n             id: 1, // userID\\r\\n             wid: worldId, // autopoolID\\r\\n             myAddress: ownerAddress, // user address\\r\\n             level: i,\\r\\n             currectID: 0, // refe ID\\r\\n             currectRefAddress: address(0), // refe address\\r\\n             id1: 0, // user 1 \\r\\n             id2: 0, // user 2\\r\\n             id3: 0 // user 3\\r\\n            });\\r\\n            worldIds[worldId] = ownerAddress;\\r\\n            Wpools[worldId] = wpool;\\r\\n            worldId++;\\r\\n\\r\\n            users[ownerAddress].magicpool[i].push(magicId);\\r\\n            magicpools memory magicpool = magicpools({\\r\\n             id: 1, // userID\\r\\n             wid: magicId, // autopoolID\\r\\n             myAddress: ownerAddress, // user address\\r\\n             level: i,\\r\\n             currectID: 0, // refe ID\\r\\n             currectRefAddress: address(0), // refe address\\r\\n             id1: 0, // user 1 \\r\\n             id2: 0, // user 2\\r\\n             id3: 0, // user 3\\r\\n             id4: 0, // user 4\\r\\n             id5: 0, // user 5\\r\\n             id6: 0 // user 6\\r\\n            });\\r\\n            magicIds[magicId] = ownerAddress;\\r\\n            Magicpools[magicId] = magicpool;\\r\\n            magicId++;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function registrationExt(address referrerAddress, uint256 amount) external {\\r\\n        require(!isUserExists(msg.sender), \\\"User already exists\\\");\\r\\n        require(isUserExists(referrerAddress), \\\"Referrer does not exist\\\");\\r\\n        require(amount == packageprice[1], \\\"Registration cost must be 1 ether\\\");\\r\\n        require(usdt.allowance(msg.sender, address(this)) \\u003e= amount, \\\"Insufficient allowance\\\");\\r\\n        require(usdt.transferFrom(msg.sender, address(this), amount), \\\"Transfer failed\\\");\\r\\n        registration(msg.sender, referrerAddress);\\r\\n    }\\r\\n\\r\\n    function registration(address userAddress, address referrerAddress) private {\\r\\n\\r\\n        User memory user = User({\\r\\n            id: lastUserId,\\r\\n            referrer: referrerAddress,\\r\\n            partnercount: 0,\\r\\n            maxlevel: 1,\\r\\n            directbonus: 0,\\r\\n            levelbonus: 0,\\r\\n            worldpoolincome: 0,\\r\\n            magicpoolincome: 0,\\r\\n            royaltybonus: 0,\\r\\n            levelWiseUsers: new uint[](16),\\r\\n            totalEarn: 0,\\r\\n            teamCount: 0,\\r\\n            isRoyalty: false\\r\\n        });\\r\\n        users[userAddress] = user;\\r\\n        users[userAddress].referrer = referrerAddress;\\r\\n        users[userAddress].activeLevels[1] = true;\\r\\n        userIds[lastUserId] = userAddress;\\r\\n        users[referrerAddress].partners[0].push(userAddress);\\r\\n        users[referrerAddress].referrals[0].referrals.push(userAddress);\\r\\n        users[referrerAddress].partnercount++;\\r\\n        lastUserId++;\\r\\n        updateUplinesCount(msg.sender);\\r\\n        //emit Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id);\\r\\n        distributebonus(userAddress,referrerAddress, 1);\\r\\n        uint freex3AutoPoolReferrer = findFreex3AutoPoolReferrer(1);\\r\\n        updateX3AutoPoolReferrer(userAddress, freex3AutoPoolReferrer, 1);\\r\\n        uint freex6AutoPoolReferrer = findFreex6AutoPoolReferrer(1);\\r\\n        updateX6AutoPoolReferrer(userAddress, freex6AutoPoolReferrer, 1,0);\\r\\n        checkAndAssignRoyalty();\\r\\n    }\\r\\n\\r\\n    function BuyPackage(uint8 level,uint256 amount) external {\\r\\n      require(isUserExists(msg.sender), \\\"User does not exist. Register first.\\\");\\r\\n      require(usdt.allowance(msg.sender, address(this)) \\u003e= amount, \\\"Insufficient allowance\\\");\\r\\n      require(usdt.transferFrom(msg.sender, address(this), amount), \\\"Transfer failed\\\");\\r\\n      require(amount == packageprice[level], \\\"Package cost not valid\\\");        \\r\\n      require(level \\u003e 1 \\u0026\\u0026 level \\u003c= LAST_LEVEL, \\\"Invalid level\\\");\\r\\n      require(!users[msg.sender].activeLevels[level], \\\"Level already activated\\\");\\r\\n        \\r\\n      BuyM4Matrix(msg.sender, level);\\r\\n    }\\r\\n\\r\\n    function BuyM4Matrix(address userAddress, uint8 level) private { \\r\\n        users[userAddress].activeLevels[level] = true;\\r\\n        users[userAddress].maxlevel = level;\\r\\n        distributebonus(userAddress,users[userAddress].referrer, level);\\r\\n        uint freex3AutoPoolReferrer = findFreex3AutoPoolReferrer(level);\\r\\n        updateX3AutoPoolReferrer(userAddress, freex3AutoPoolReferrer, level);\\r\\n        uint freex6AutoPoolReferrer = findFreex6AutoPoolReferrer(level);\\r\\n        updateX6AutoPoolReferrer(userAddress, freex6AutoPoolReferrer, level,0);\\r\\n    }\\r\\n\\r\\n    function distributebonus(address userAddress,address referrerAddress, uint8 level) private {\\r\\n        uint ownerAmt = 1 ether;\\r\\n        transferAmount(owner, ownerAmt, 0);\\r\\n\\r\\n        uint price = packageprice[level]-1 ether;\\r\\n        uint amount = (price*distribution[1])/100;\\r\\n        transferAmount(referrerAddress, amount, 1);\\r\\n        uint LevelDistributeAmount = (price*distribution[2])/100;\\r\\n        levelIncomeDistribute(userAddress,users[userAddress].id,LevelDistributeAmount,level,1,0);        \\r\\n    }    \\r\\n\\r\\n    function checkAndAssignRoyalty() internal {\\r\\n        // Iterate through all registered users\\r\\n        uint totalUsers = lastUserId-1;\\r\\n        for (uint256 i = 1; i \\u003c= totalUsers; i++) {\\r\\n            address userAddress = userIds[i];\\r\\n            User storage user = users[userAddress];\\r\\n            // Check conditions for royalty assignment\\r\\n            if (user.partnercount \\u003e= 20 \\u0026\\u0026 user.teamCount \\u003e= 400 \\u0026\\u0026 !user.isRoyalty) {\\r\\n                user.isRoyalty = true;\\r\\n                royaltyUserCount++;\\r\\n            }\\r\\n        }\\r\\n    }  \\r\\n\\r\\n    function levelIncomeDistribute(address userAddress, uint referrerId, uint amount, uint8 level, uint8 types, uint8 levelUP) internal {\\r\\n        uint256 income = amount;\\r\\n        address user;\\r\\n        uint currentRecipient;\\r\\n        uint myID;\\r\\n        address currentRecipient_1;\\r\\n        uint recipient = referrerId;\\r\\n\\r\\n        for (uint8 i = 1; i \\u003c= 15; i++) {\\r\\n            uint256 uplinesComm = (income * levelPercentage[i]) / 100;\\r\\n\\r\\n            if (types == 1 \\u0026\\u0026 levelUP == 0) {\\r\\n                //currentRecipient = users[userIds[referrerId]].referrer;\\r\\n                currentRecipient = recipient;\\r\\n                user = userAddress;\\r\\n                currentRecipient_1 = users[userIds[currentRecipient]].referrer;\\r\\n                myID = 0;\\r\\n            } else if (types == 2) {\\r\\n                currentRecipient = recipient;\\r\\n                user = userAddress;\\r\\n                currentRecipient_1 = Wpools[currentRecipient].myAddress;\\r\\n                myID = currentRecipient;\\r\\n            }\\r\\n            else if (types == 3) {\\r\\n                currentRecipient = recipient;\\r\\n                user = userAddress;\\r\\n                currentRecipient_1 = Magicpools[currentRecipient].myAddress;\\r\\n                myID = currentRecipient;\\r\\n            }\\r\\n            else if (types == 4) {\\r\\n                currentRecipient = recipient;\\r\\n                user = userAddress;\\r\\n                currentRecipient_1 = MagicpoolsUpgrade[currentRecipient].myAddress;\\r\\n                myID = currentRecipient;\\r\\n            }\\r\\n\\r\\n            if (currentRecipient_1 != address(0) \\u0026\\u0026 currentRecipient_1 != address(0x0)) {\\r\\n                if (users[currentRecipient_1].activeLevels[level]) {\\r\\n                    LevelIncomeReport memory newLevelReport = LevelIncomeReport({\\r\\n                        fromid: users[user].id,\\r\\n                        fromaddress: user,\\r\\n                        slot: level,\\r\\n                        level: i,\\r\\n                        amount: uplinesComm,\\r\\n                        timestamp: block.timestamp,\\r\\n                        types: types\\r\\n                    });\\r\\n\\r\\n                    LevelIncomeTransactions[currentRecipient_1].push(newLevelReport);\\r\\n                    transferAmount(currentRecipient_1, uplinesComm, 2);\\r\\n                } else {\\r\\n                    transferAmount(owner, uplinesComm, 0);\\r\\n                }\\r\\n            } else {\\r\\n                transferAmount(owner, uplinesComm, 0);\\r\\n            }\\r\\n\\r\\n            if (types == 1 \\u0026\\u0026 levelUP == 0) {\\r\\n                recipient = users[currentRecipient_1].id;\\r\\n            } else if(types == 2) {\\r\\n                recipient = Wpools[myID].currectID;\\r\\n            } else if(types == 3) {\\r\\n                recipient = Magicpools[myID].currectID;\\r\\n            } else if(types == 4) {\\r\\n                recipient = MagicpoolsUpgrade[myID].currectID;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function updateUplinesCount(address userAddress) internal {\\r\\n        User storage user = users[userAddress];\\r\\n        address upline = user.referrer;        \\r\\n        for (uint i = 1; i \\u003c= 16 \\u0026\\u0026 upline != address(0); i++) {\\r\\n            User storage uplineUser = users[upline];\\r\\n            uplineUser.teamCount += 1;\\r\\n            uplineUser.levelWiseUsers[i - 1] += 1;\\r\\n            upline = uplineUser.referrer;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Worldpool payout code start //\\r\\n    function updateX3AutoPoolReferrer(address userAddress, uint referrerId, uint8 level) private{\\r\\n        uint256 newIndex=x3Index[level]+1;\\r\\n        x3vId_number[level][newIndex]=worldId;\\r\\n        x3Index[level]=newIndex;\\r\\n        uint price = packageprice[level]-1 ether;\\r\\n        uint256 worldpoolincome=(price*distribution[3])/100;\\r\\n        users[userAddress].worldpool[level].push(worldId);\\r\\n        wpools memory wpool = wpools({\\r\\n            id: users[userAddress].id, // userID\\r\\n            wid: worldId, // autopoolID\\r\\n            myAddress: userAddress, // user address\\r\\n            level: level,\\r\\n            currectID: Wpools[referrerId].wid, // refe ID\\r\\n            currectRefAddress: Wpools[referrerId].myAddress, // // refe address\\r\\n            id1: 0, // user 1 \\r\\n            id2: 0, // user 2\\r\\n            id3: 0 // user 3\\r\\n        });\\r\\n        worldIds[worldId] = userAddress;\\r\\n        Wpools[worldId] = wpool;        \\r\\n\\r\\n        if(Wpools[referrerId].id1==0){\\r\\n          Wpools[referrerId].id1 = worldId;\\r\\n          transferAmount(Wpools[referrerId].myAddress, worldpoolincome, 3);\\r\\n          worldId++;  \\r\\n        }\\r\\n        else if(Wpools[referrerId].id2==0){\\r\\n          Wpools[referrerId].id2 = worldId;\\r\\n          uint upline = Wpools[Wpools[referrerId].currectID].wid;\\r\\n          levelIncomeDistribute(userAddress,upline,worldpoolincome,level,2,0);\\r\\n          worldId++;   \\r\\n        }\\r\\n        else if(Wpools[referrerId].id3==0){\\r\\n          Wpools[referrerId].id3 = worldId;  \\r\\n          worldId++;\\r\\n          x3CurrentvId[level]=x3CurrentvId[level]+1;     \\r\\n          uint freeAutoPoolReferrer = findFreex3AutoPoolReferrer(level);\\r\\n          updateX3AutoPoolReferrer(Wpools[referrerId].myAddress, freeAutoPoolReferrer,level);\\r\\n        }        \\r\\n    }  \\r\\n\\r\\n    function findFreex3AutoPoolReferrer(uint8 level) public view returns(uint){\\r\\n            uint id=x3CurrentvId[level];\\r\\n            return x3vId_number[level][id];\\r\\n    } \\r\\n     \\r\\n    function usersWorldAutoPool(address userAddress, uint8 level) public view returns (uint, uint[] memory) {\\r\\n        return (users[userAddress].worldpool[level].length,users[userAddress].worldpool[level]);\\r\\n    }\\r\\n    // Worldpool payout code end //\\r\\n    // magicpool payout code start //\\r\\n    function updateX6AutoPoolReferrer(address userAddress, uint referrerId, uint8 level,uint8 levelUP) private{\\r\\n      if(levelUP==0){\\r\\n        uint256 newIndex=x6Index[level]+1;\\r\\n        x6vId_number[level][newIndex]=magicId;\\r\\n        x6Index[level]=newIndex;\\r\\n        uint price = packageprice[level]-1 ether;\\r\\n        uint256 magicpoolincome=(price*distribution[4])/100;\\r\\n        users[userAddress].magicpool[level].push(magicId);\\r\\n        magicpools memory magicpool = magicpools({\\r\\n            id: users[userAddress].id, // userID\\r\\n            wid: magicId, // autopoolID\\r\\n            myAddress: userAddress, // user address\\r\\n            level: level,            \\r\\n            currectID: Magicpools[referrerId].wid, // refe ID\\r\\n            currectRefAddress: Magicpools[referrerId].myAddress, // refe address\\r\\n            id1: 0, // user 1 \\r\\n            id2: 0, // user 2\\r\\n            id3: 0, // user 3\\r\\n            id4: 0, // user 4\\r\\n            id5: 0, // user 5\\r\\n            id6: 0  // user 6\\r\\n        });\\r\\n        magicIds[magicId] = userAddress;\\r\\n        Magicpools[magicId] = magicpool;\\r\\n        if(Magicpools[referrerId].id1==0){\\r\\n          Magicpools[referrerId].id1 = magicId;\\r\\n          transferAmount(Magicpools[referrerId].myAddress, magicpoolincome, 4);\\r\\n          magicId++;  \\r\\n        }\\r\\n        else if(Magicpools[referrerId].id2==0){\\r\\n          Magicpools[referrerId].id2 = magicId;\\r\\n          // Amount hold\\r\\n          magicId++;  \\r\\n        }\\r\\n        else if(Magicpools[referrerId].id3==0){\\r\\n          Magicpools[referrerId].id3 = magicId;\\r\\n          uint findFreex6AutoPoolReferrer_upgrade = findFreex6AutoPoolReferrer_upgrade(level,level);\\r\\n          updateX6AutoPoolReferrer(Magicpools[referrerId].myAddress, findFreex6AutoPoolReferrer_upgrade,level,level); \\r\\n          magicId++;  \\r\\n        }\\r\\n        else if(Magicpools[referrerId].id4==0){\\r\\n          Magicpools[referrerId].id4 = magicId;\\r\\n          royaltyCommDistribute(magicpoolincome);\\r\\n          magicId++;  \\r\\n        }\\r\\n        else if(Magicpools[referrerId].id5==0){\\r\\n          Magicpools[referrerId].id5 = magicId;\\r\\n          uint upline = Magicpools[Magicpools[referrerId].currectID].wid;\\r\\n          levelIncomeDistribute(userAddress,upline,magicpoolincome,level,3,0);\\r\\n          magicId++;  \\r\\n        }\\r\\n        else if(Magicpools[referrerId].id6==0){\\r\\n          Magicpools[referrerId].id6 = magicId;\\r\\n          magicId++;\\r\\n          x6CurrentvId[level]=x6CurrentvId[level]+1;\\r\\n          uint freeAutoPoolReferrer = findFreex6AutoPoolReferrer(level);\\r\\n          updateX6AutoPoolReferrer(Magicpools[referrerId].myAddress, freeAutoPoolReferrer,level,0);            \\r\\n        }\\r\\n      } \\r\\n      else{\\r\\n            uint256 newIndex=x6Index_upgrade[level][levelUP]+1;\\r\\n            x6vId_number_upgrade[level][newIndex][levelUP]=magicupgradeId;\\r\\n            x6Index_upgrade[level][levelUP]=newIndex;\\r\\n            uint256 magicpoolincome=packageUpgradeprice[levelUP];\\r\\n            users[userAddress].magicpoolupgrade[level][levelUP].push(magicupgradeId);\\r\\n            magicpoolsUpgrade memory magicpoolUp = magicpoolsUpgrade({\\r\\n                id: users[userAddress].id, // userID\\r\\n                wid: magicupgradeId, // autopoolID\\r\\n                myAddress: userAddress, // user address\\r\\n                level: level,\\r\\n                levelUP: levelUP,\\r\\n                currectID: MagicpoolsUpgrade[referrerId].wid, // refe ID\\r\\n                currectRefAddress: MagicpoolsUpgrade[referrerId].myAddress, // refe address\\r\\n                id1: 0, // user 1 \\r\\n                id2: 0, // user 2\\r\\n                id3: 0, // user 3\\r\\n                id4: 0, // user 4\\r\\n                id5: 0, // user 5\\r\\n                id6: 0 // user 6\\r\\n            });\\r\\n            magicUpgradeIds[magicupgradeId] = userAddress;\\r\\n            MagicpoolsUpgrade[magicupgradeId] = magicpoolUp;\\r\\n            if(MagicpoolsUpgrade[referrerId].id1==0){\\r\\n                MagicpoolsUpgrade[referrerId].id1 = magicupgradeId;\\r\\n                transferAmount(MagicpoolsUpgrade[referrerId].myAddress, magicpoolincome, 4);\\r\\n                magicupgradeId++;  \\r\\n            }\\r\\n            else if(MagicpoolsUpgrade[referrerId].id2==0){\\r\\n              MagicpoolsUpgrade[referrerId].id2 = magicupgradeId;\\r\\n              // Amount hold\\r\\n              magicupgradeId++;  \\r\\n            }\\r\\n            else if(MagicpoolsUpgrade[referrerId].id3==0){\\r\\n              MagicpoolsUpgrade[referrerId].id3 = magicupgradeId;\\r\\n              uint8 up = levelUP + 1;\\r\\n              magicupgradeId++;\\r\\n              uint findFreex6AutoPoolReferrer_upgrade = findFreex6AutoPoolReferrer_upgrade(level,up);\\r\\n              updateX6AutoPoolReferrer(MagicpoolsUpgrade[referrerId].myAddress, findFreex6AutoPoolReferrer_upgrade,level,up); \\r\\n                \\r\\n            }\\r\\n            else if(MagicpoolsUpgrade[referrerId].id4==0){\\r\\n              MagicpoolsUpgrade[referrerId].id4 = magicupgradeId;\\r\\n              royaltyCommDistribute(magicpoolincome);\\r\\n              magicupgradeId++;  \\r\\n            }\\r\\n            else if(MagicpoolsUpgrade[referrerId].id5==0){\\r\\n              MagicpoolsUpgrade[referrerId].id5 = magicupgradeId;\\r\\n              uint upline = MagicpoolsUpgrade[MagicpoolsUpgrade[referrerId].currectID].wid;\\r\\n              levelIncomeDistribute(userAddress,upline,magicpoolincome,level,4,0);\\r\\n              magicupgradeId++;  \\r\\n            }\\r\\n            else if(MagicpoolsUpgrade[referrerId].id6==0){\\r\\n              MagicpoolsUpgrade[referrerId].id6 = magicupgradeId;\\r\\n              magicupgradeId++;\\r\\n              x6CurrentvId_upgrade[level][levelUP]=x6CurrentvId_upgrade[level][levelUP]+1;\\r\\n              uint findFreex6AutoPoolReferrer_upgrade = findFreex6AutoPoolReferrer_upgrade(level,level);\\r\\n              updateX6AutoPoolReferrer(MagicpoolsUpgrade[referrerId].myAddress, findFreex6AutoPoolReferrer_upgrade,level,level); \\r\\n                \\r\\n            }           \\r\\n      }\\r\\n    }  \\r\\n\\r\\n    function findFreex6AutoPoolReferrer(uint8 level) public view returns(uint){\\r\\n            uint256 id=x6CurrentvId[level];\\r\\n            return x6vId_number[level][id];\\r\\n    } \\r\\n\\r\\n    function findFreex6AutoPoolReferrer_upgrade(uint8 level,uint8 levelUP) public view returns(uint){\\r\\n            uint256 id=x6CurrentvId_upgrade[level][levelUP];\\r\\n            return x6vId_number_upgrade[level][id][levelUP];\\r\\n    }\\r\\n\\r\\n    function usersMagicAutoPool(address userAddress, uint8 level) public view returns (uint, uint[] memory) {\\r\\n        return (users[userAddress].magicpool[level].length,users[userAddress].magicpool[level]);\\r\\n    }\\r\\n\\r\\n    function usersMagicAutoPool_upgrade(address userAddress, uint8 level,uint8 levelUP) public view returns(uint, uint[] memory) {\\r\\n        return (users[userAddress].magicpoolupgrade[level][levelUP].length,users[userAddress].magicpoolupgrade[level][levelUP]);\\r\\n    }\\r\\n\\r\\n    // magicpool payout code end //\\r\\n\\r\\n    function royaltyCommDistribute(uint256 amount) private {       \\r\\n        // Distribute the amount equally among royalty users\\r\\n        uint256 creatorAmt = (amount*40)/100;\\r\\n        transferAmount(owner, creatorAmt, 0);\\r\\n        \\r\\n        uint256 amt = (amount*60)/100;\\r\\n        uint256 perUserAmt = amt / royaltyUserCount;\\r\\n        // Transfer the amount to each royalty user\\r\\n        for (uint256 i = 1; i \\u003c= lastUserId - 1; i++) {\\r\\n            address userAddress = userIds[i];\\r\\n            if (users[userAddress].isRoyalty) {\\r\\n                // Check if isRoyalty is true before calling transferAmount\\r\\n                transferAmount(userAddress, perUserAmt, 5);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n\\r\\n    function isUserExists(address user) public view returns (bool) {\\r\\n        return (users[user].id != 0);\\r\\n    }\\r\\n\\r\\n    function levelWiseUsers(address userAddress) public view returns(uint[] memory) {\\r\\n        return (users[userAddress].levelWiseUsers);\\r\\n    }\\r\\n\\r\\n    function usersActiveLevels(address userAddress, uint8 level) public view returns(bool) {\\r\\n        return users[userAddress].activeLevels[level];\\r\\n    }\\r\\n\\r\\n    function userspartner(address userAddress) public view returns(address[] memory) {\\r\\n        return (users[userAddress].partners[0]);\\r\\n    }\\r\\n\\r\\n    function transferAmount(address receiver, uint dividend, uint types) private {\\r\\n        if (types == 1) {\\r\\n            users[receiver].directbonus += dividend;\\r\\n        }\\r\\n        else if (types == 2) {\\r\\n            users[receiver].levelbonus += dividend;\\r\\n        } \\r\\n        else if (types == 3) {\\r\\n            users[receiver].worldpoolincome += dividend;\\r\\n        } \\r\\n        else if (types == 4) {\\r\\n            users[receiver].magicpoolincome += dividend;\\r\\n        }\\r\\n        else if (types == 5) {\\r\\n            users[receiver].royaltybonus += dividend;\\r\\n        }\\r\\n        else {\\r\\n           lapsedIncome += dividend;\\r\\n        }\\r\\n\\r\\n        users[receiver].totalEarn += dividend;\\r\\n        require(usdt.transfer(receiver, dividend), \\\"USDT transfer failed\\\");\\r\\n    }\\r\\n}\\r\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity \\u003e=0.4.23 \\u003c0.9.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_usdtAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyPackage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LAST_LEVEL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LevelIncomeTransactions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fromid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Magicpools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"myAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currectID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currectRefAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id5\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id6\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MagicpoolsUpgrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"myAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelUP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currectID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currectRefAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id5\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id6\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Wpools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"myAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currectID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currectRefAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id3\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"diamondPackagePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findFreex3AutoPoolReferrer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findFreex6AutoPoolReferrer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"levelUP\",\"type\":\"uint8\"}],\"name\":\"findFreex6AutoPoolReferrer_upgrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lapsedIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"levelWiseUsers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"magicId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"magicIds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"magicUpgradeIds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"magicupgradeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packageUpgradeprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packageprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"registrationExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"royaltyUserCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"partnercount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxlevel\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"directbonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelbonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"worldpoolincome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"magicpoolincome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"royaltybonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarn\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"teamCount\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isRoyalty\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveLevels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersMagicAutoPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"levelUP\",\"type\":\"uint8\"}],\"name\":\"usersMagicAutoPool_upgrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersWorldAutoPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"userspartner\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"worldId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"worldIds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"x3CurrentvId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"x3Index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"x3vId_number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"x6CurrentvId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"x6CurrentvId_upgrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"x6Index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"x6Index_upgrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"x6vId_number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"x6vId_number_upgrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CrowdWorld", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000231a6b5c699eda281209ed9c3b1a049fcebe9d6e00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://16b52cfac65e0447b01e910b71a2bb4f39674c3f6520775faed1dcaf4c5ffe86"}