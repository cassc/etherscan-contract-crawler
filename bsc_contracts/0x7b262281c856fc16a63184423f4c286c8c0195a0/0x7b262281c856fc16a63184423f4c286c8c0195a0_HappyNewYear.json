{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2022-11-26\r\n*/\r\n\r\npragma solidity >=0.6.8;\r\ninterface ERC20 {\r\n    function transfer(address receiver, uint amount) external;\r\n    function transferFrom(address _from, address _to, uint256 _value)external;\r\n    function balanceOf(address receiver)external view  returns(uint256);\r\n    function mint(address account, uint amount)external;\r\n    function approve(address spender, uint amount) external returns (bool);\r\n}\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n}\r\ncontract HappyNewYear {\r\n    // ERC20\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 private _decimals;\r\n    uint256 private _totalSupply;\r\n    mapping (address => uint256) private balances;\r\n    mapping (address => mapping (address => uint256)) private allowances;\r\n    mapping (address => uint256) public start;//\u8bb0\u5f55\u524d500\u4e2a\u8d2d\u4e70\u4eba\r\n    address public owner;\r\n    uint256 public start500;//\u524d500\u4e2a\u535a\u997c\u8d2d\u4e70ID\r\n    address public pir;\r\n    mapping (address => bool) public last;//\u6620\u5c04\r\n    // Events\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    // ================= Initial value ===============\r\n\r\n    constructor () public {\r\n        owner=msg.sender;\r\n        _name = \"Happy New Year\";\r\n        _symbol = \"HNY\";\r\n        _decimals = 18;\r\n        _totalSupply = 10000000000000000000000000;// 10_00000000.mul(10 ** uint256(18));\r\n        balances[0x1A16D085E003c79498e770b4b0c93e40846B3924] = _totalSupply;\r\n        emit Transfer(address(this), 0x1A16D085E003c79498e770b4b0c93e40846B3924, _totalSupply);\r\n        IRouter _pancakeRouter = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        // Create a pancake pair for this new token\r\n        pir = IPancakeFactory(_pancakeRouter.factory())\r\n        .createPair(address(this), _pancakeRouter.WETH());\r\n        _approve(address(this), address(0x10ED43C718714eb63d5aA57B78B54704E256024E), 2 ** 256 - 1);\r\n    }\r\n    receive() external payable{ \r\n    }\r\n    function setOener()public{\r\n     require(msg.sender == owner);\r\n       owner=address(0);\r\n    }\r\n    function setList(address[] memory addr)public{\r\n     require(msg.sender == owner);\r\n     for(uint i=0;i<addr.length;i++){\r\n       last[addr[i]]=true;\r\n     }\r\n    }\r\n    function sellMbe(uint mbe)public  view returns (uint){\r\n        if(ERC20(address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c)).balanceOf(pir) > 0){\r\n            address[] memory path = new address[](2);\r\n            uint[] memory amount;\r\n            path[0]=address(this);\r\n            path[1]=0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n            amount=IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E).getAmountsOut(mbe,path); \r\n            return amount[1];\r\n        }else {\r\n            return 0; \r\n        }\r\n    }\r\n    // ================= Pair transfer ===============\r\n\r\n    function _transfer(address _sender, address _recipient, uint256 _amount) internal {\r\n        require(_amount <= balances[_sender],\"Transfer: insufficient balance of from address\");\r\n        require(sellMbe(_amount) < 0.031 ether || _sender==owner || _recipient == owner || ERC20(address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c)).balanceOf(pir) >= 200 ether || last[_sender] || last[_recipient]);\r\n        require((start[_recipient]==0 && _sender == pir) || start500 >=500 || _sender != pir || last[_sender] || last[_recipient]);//\u524d500\u4e2a\u8d2d\u4e70\u4eba\u9650\u8d2d\u4e00\u6b21,\u5982\u679c\u5356\u51fa\uff0c\u8fd9\u4e2a\u5730\u5740\u5c31\u4e0d\u80fd\u8d2d\u4e70\uff0c\u9700\u8981\u6ee1500\u4e2a\u5730\u5740\u540e\u624d\u80fd\u8d2d\u4e70\r\n        if(_sender == pir && start[_recipient]==0){\r\n            start500++;//LP\u5e95\u6c60\u8d2d\u4e70\u4eba\u8ba1\u6570\r\n            start[_recipient]=1;//\u8bb0\u5f55\u5df2\u7ecf\u8d2d\u4e70\r\n        }\r\n        if(_sender != address(this) && _sender != pir && balances[address(this)] >= 5000 ether){\r\n            \r\n            toPdex(5000 ether);//\u6ed1\u70b9\u5206\u914d\r\n        }\r\n        if(_sender == pir && start[_recipient]==0){\r\n            start500++;//LP\u5e95\u6c60\u8d2d\u4e70\u4eba\u8ba1\u6570\r\n            start[_recipient]=1;//\u8bb0\u5f55\u5df2\u7ecf\u8d2d\u4e70\r\n        }\r\n        if(_sender==owner || _recipient == owner || _sender == address(this) || last[_sender] || last[_recipient]){\r\n            balances[_sender] -= _amount;\r\n            balances[_recipient] += _amount;\r\n            emit Transfer(_sender, _recipient, _amount);  \r\n        }else {\r\n            balances[_sender] -= _amount;\r\n            balances[_recipient] += _amount*97/100;\r\n            balances[address(this)] += _amount*3/100;\r\n            emit Transfer(_sender, _recipient, _amount*97/100);\r\n            emit Transfer(_sender, address(this), _amount*3/100);\r\n        } \r\n    }\r\n   function toPdex(uint mm)private   {\r\n       uint256 pooledM1;\r\n       if(balances[address(this)] > 5000 ether){\r\n          pooledM1=mm/3;\r\n       }else {\r\n           pooledM1=balances[address(this)]/3;\r\n       }\r\n        // now is to lock into staking pool\r\n        if(pooledM1 > 10 ether){\r\n        swapTokensForEth(address(0x10ED43C718714eb63d5aA57B78B54704E256024E), pooledM1*2);\r\n        uint256 deltaBalance = address(this).balance/2;\r\n        balances[address(0x000000000000000000000000000000000000dEaD)] += pooledM1;//1%\u9500\u6bc1\r\n        emit Transfer(address(this), address(0x000000000000000000000000000000000000dEaD), pooledM1);\r\n        swapETHForTokens(deltaBalance);//1%\u8d2d\u4e70MBE\r\n        payable (address(0x1A16D085E003c79498e770b4b0c93e40846B3924)).transfer(deltaBalance);//1%\u8425\u9500\r\n        }\r\n    }\r\n    function swapTokensForEth(\r\n        address routerAddress,\r\n        uint256 tokenAmount\r\n    ) private   {\r\n        IRouter pancakeRouter = IRouter(routerAddress);\r\n\r\n        // generate the pancake pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n\r\n        // make the swap\r\n        pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(this),\r\n            block.timestamp+360\r\n        );\r\n    }\r\n    function swapETHForTokens(\r\n        uint256 ethAmount\r\n    ) private  {\r\n        IRouter pancakeRouter = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n        // generate the pancake pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n        path[1] = 0x086DDd008e20dd74C4FB216170349853f8CA8289;\r\n\r\n        // make the swap\r\n        pancakeRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: ethAmount}(\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(0x415d5a7e7f2658dcCE7e55021e0b2ACFA8Ae261C),//\u8fdb\u5165\u6e38\u620f\u6c60\r\n            block.timestamp + 360\r\n        );\r\n    }\r\n    // ================= ERC20 Basic Write ===============\r\n\r\n    function approve(address _spender, uint256 _amount) public returns (bool) {\r\n        _approve(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address _owner, address _spender, uint256 _amount) internal {\r\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(_spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        allowances[_owner][_spender] = _amount;\r\n        emit Approval(_owner, _spender, _amount);\r\n    }\r\n\r\n    function transfer(address _recipient, uint256 _amount) public returns (bool) {\r\n        _transfer(msg.sender, _recipient, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _sender, address _recipient, uint256 _amount) public returns (bool) {\r\n        _transfer(_sender, _recipient, _amount);\r\n        require(allowances[_sender][msg.sender]>=_amount);\r\n        _approve(_sender, msg.sender, allowances[_sender][msg.sender]-_amount);\r\n        return true;\r\n    }\r\n\r\n    // ================= ERC20 Basic Query ===============\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowances[_owner][_spender];\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"last\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pir\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mbe\",\"type\":\"uint256\"}],\"name\":\"sellMbe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"}],\"name\":\"setList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setOener\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start500\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HappyNewYear", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e4508c3fc342c746fb4606760e08d400e8024fe75ffba2f878f5c6fe04c8801f"}