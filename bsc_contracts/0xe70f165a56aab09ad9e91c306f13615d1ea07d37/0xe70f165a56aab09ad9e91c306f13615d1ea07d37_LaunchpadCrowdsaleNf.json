{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/LaunchpadCrowdsaleNft.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// Copyright 2021 Enjinstarter\\npragma solidity ^0.7.6;\\npragma abicoder v2; // solhint-disable-line\\n\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"./CappedTokenSoldCrowdsaleHelper.sol\\\";\\nimport \\\"./LaunchpadWhitelistCrowdsaleHelper.sol\\\";\\nimport \\\"./NoDeliveryCrowdsale.sol\\\";\\nimport \\\"./TimedCrowdsaleHelper.sol\\\";\\nimport \\\"./interfaces/ILaunchpadCrowdsaleNft.sol\\\";\\n\\n/**\\n * @title LaunchpadCrowdsaleNft\\n * @author Enjinstarter\\n * @dev Launchpad crowdsale where there is no delivery of tokens in each purchase.\\n */\\ncontract LaunchpadCrowdsaleNft is\\n    NoDeliveryCrowdsale,\\n    CappedTokenSoldCrowdsaleHelper,\\n    TimedCrowdsaleHelper,\\n    LaunchpadWhitelistCrowdsaleHelper,\\n    Pausable,\\n    ILaunchpadCrowdsaleNft\\n{\\n    using SafeMath for uint256;\\n\\n    // https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits\\n    // slither-disable-next-line too-many-digits\\n    address public constant DEAD_ADDRESS =\\n        0x000000000000000000000000000000000000dEaD;\\n\\n    struct LaunchpadCrowdsaleInfo {\\n        uint256 tokenCap;\\n        address whitelistContract;\\n    }\\n\\n    address public governanceAccount;\\n    address public crowdsaleAdmin;\\n\\n    // max 1 lot\\n    constructor(\\n        address wallet_,\\n        LaunchpadCrowdsaleInfo memory crowdsaleInfo,\\n        LotsInfo memory lotsInfo,\\n        Timeframe memory timeframe,\\n        PaymentTokenInfo[] memory paymentTokensInfo\\n    )\\n        Crowdsale(wallet_, DEAD_ADDRESS, lotsInfo, paymentTokensInfo, false)\\n        CappedTokenSoldCrowdsaleHelper(crowdsaleInfo.tokenCap)\\n        TimedCrowdsaleHelper(timeframe)\\n        LaunchpadWhitelistCrowdsaleHelper(crowdsaleInfo.whitelistContract)\\n    {\\n        governanceAccount = msg.sender;\\n        crowdsaleAdmin = msg.sender;\\n    }\\n\\n    modifier onlyBy(address account) {\\n        require(\\n            msg.sender == account,\\n            \\\"LaunchpadCrowdsaleNft: sender unauthorized\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @param paymentToken ERC20 payment token address\\n     * @param lots Number of lots of token being sold\\n     */\\n    function buyTokens(address paymentToken, uint256 lots) external override {\\n        _buyTokensFor(msg.sender, paymentToken, lots, \\\"\\\");\\n    }\\n\\n    /**\\n     * @param beneficiary Recipient of the token purchase\\n     * @param paymentToken ERC20 payment token address\\n     * @param lots Number of lots of token being sold\\n     */\\n    function buyTokensFor(\\n        address beneficiary,\\n        address paymentToken,\\n        uint256 lots\\n    ) external override {\\n        _buyTokensFor(beneficiary, paymentToken, lots, \\\"\\\");\\n    }\\n\\n    function pause() external override onlyBy(crowdsaleAdmin) {\\n        _pause();\\n    }\\n\\n    function unpause() external override onlyBy(crowdsaleAdmin) {\\n        _unpause();\\n    }\\n\\n    function extendTime(uint256 newClosingTime)\\n        external\\n        override\\n        onlyBy(crowdsaleAdmin)\\n    {\\n        _extendTime(newClosingTime);\\n    }\\n\\n    function setGovernanceAccount(address account)\\n        external\\n        override\\n        onlyBy(governanceAccount)\\n    {\\n        require(account != address(0), \\\"LaunchpadCrowdsaleNft: zero account\\\");\\n\\n        governanceAccount = account;\\n    }\\n\\n    function setCrowdsaleAdmin(address account)\\n        external\\n        override\\n        onlyBy(governanceAccount)\\n    {\\n        require(account != address(0), \\\"LaunchpadCrowdsaleNft: zero account\\\");\\n\\n        crowdsaleAdmin = account;\\n    }\\n\\n    /**\\n     * @return availableLots Available number of lots for beneficiary\\n     */\\n    function getAvailableLotsFor(address beneficiary)\\n        external\\n        view\\n        override\\n        returns (uint256 availableLots)\\n    {\\n        if (!whitelisted(beneficiary)) {\\n            return 0;\\n        }\\n\\n        availableLots = _getAvailableTokensFor(beneficiary).div(\\n            lotSize(beneficiary)\\n        );\\n    }\\n\\n    /**\\n     * @return remainingTokens Remaining number of tokens for crowdsale\\n     */\\n    function getRemainingTokens()\\n        external\\n        view\\n        override\\n        returns (uint256 remainingTokens)\\n    {\\n        remainingTokens = tokenCap().sub(tokensSold);\\n    }\\n\\n    /**\\n     * @dev Extend parent behavior to update purchased amount of tokens by beneficiary.\\n     * @param beneficiary Token purchaser\\n     * @param paymentToken ERC20 payment token address\\n     * @param weiAmount Amount in wei of ERC20 payment token\\n     * @param tokenAmount Number of tokens to be purchased\\n     */\\n    function _updatePurchasingState(\\n        address beneficiary,\\n        address paymentToken,\\n        uint256 weiAmount,\\n        uint256 tokenAmount\\n    ) internal override {\\n        super._updatePurchasingState(\\n            beneficiary,\\n            paymentToken,\\n            weiAmount,\\n            tokenAmount\\n        );\\n\\n        _updateBeneficiaryTokensPurchased(beneficiary, tokenAmount);\\n    }\\n\\n    /**\\n     * @param beneficiary Address receiving the tokens\\n     * @return maxLots_ maximum number of lots for token being sold\\n     */\\n    function _maxLots(address beneficiary)\\n        internal\\n        view\\n        override\\n        returns (uint256 maxLots_)\\n    {\\n        maxLots_ = getBeneficiaryCap(beneficiary).div(lotSize(beneficiary));\\n    }\\n\\n    /**\\n     * @param beneficiary Token beneficiary\\n     * @param paymentToken ERC20 payment token address\\n     * @param weiAmount Amount of wei contributed\\n     * @param tokenAmount Number of tokens to be purchased\\n     */\\n    function _preValidatePurchase(\\n        address beneficiary,\\n        address paymentToken,\\n        uint256 weiAmount,\\n        uint256 tokenAmount\\n    )\\n        internal\\n        view\\n        override\\n        whenNotPaused\\n        onlyWhileOpen\\n        tokenCapNotExceeded(tokensSold, tokenAmount)\\n        isWhitelisted(beneficiary)\\n    {\\n        // TODO: Investigate why modifier and require() don't work consistently for beneficiaryCapNotExceeded()\\n        if (\\n            getTokensPurchasedBy(beneficiary).add(tokenAmount) >\\n            getBeneficiaryCap(beneficiary)\\n        ) {\\n            revert(\\\"LaunchpadCrowdsaleNft: beneficiary cap exceeded\\\");\\n        }\\n\\n        super._preValidatePurchase(\\n            beneficiary,\\n            paymentToken,\\n            weiAmount,\\n            tokenAmount\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/CappedTokenSoldCrowdsaleHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// Copyright 2021 Enjinstarter\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title CappedTokenSoldCrowdsaleHelper\\n * @author Enjinstarter\\n * @dev Helper for crowdsale with a limit for total tokens sold.\\n */\\ncontract CappedTokenSoldCrowdsaleHelper {\\n    using SafeMath for uint256;\\n\\n    uint256 private _tokenCap;\\n\\n    /**\\n     * @param tokenCap_ Max amount of tokens to be sold\\n     */\\n    constructor(uint256 tokenCap_) {\\n        require(tokenCap_ > 0, \\\"CappedTokenSoldHelper: zero cap\\\");\\n        _tokenCap = tokenCap_;\\n    }\\n\\n    modifier tokenCapNotExceeded(uint256 tokensSold, uint256 tokenAmount) {\\n        require(\\n            tokensSold.add(tokenAmount) <= _tokenCap,\\n            \\\"CappedTokenSoldHelper: cap exceeded\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Checks whether the token cap has been reached.\\n     * @return tokenCapReached_ Whether the token cap was reached\\n     */\\n    function tokenCapReached(uint256 tokensSold)\\n        external\\n        view\\n        returns (bool tokenCapReached_)\\n    {\\n        tokenCapReached_ = (tokensSold >= _tokenCap);\\n    }\\n\\n    /**\\n     * @return tokenCap_ the token cap of the crowdsale.\\n     */\\n    function tokenCap() public view returns (uint256 tokenCap_) {\\n        tokenCap_ = _tokenCap;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/LaunchpadWhitelistCrowdsaleHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// Copyright 2021 Enjinstarter\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/ILaunchpadWhitelist.sol\\\";\\n\\n/**\\n * @title LaunchpadWhitelistCrowdsaleHelper\\n * @author Enjinstarter\\n * @dev Helper for crowdsale in which only whitelisted users can contribute.\\n */\\ncontract LaunchpadWhitelistCrowdsaleHelper {\\n    using SafeMath for uint256;\\n\\n    address public whitelistContract;\\n\\n    mapping(address => uint256) private _tokensPurchased;\\n\\n    /**\\n     * @param whitelistContract_ whitelist contract address\\n     */\\n    constructor(address whitelistContract_) {\\n        require(\\n            whitelistContract_ != address(0),\\n            \\\"LaunchpadWhitelistCrowdsaleHelper: zero whitelist address\\\"\\n        );\\n\\n        whitelistContract = whitelistContract_;\\n    }\\n\\n    // TODO: Investigate why modifier and require() don't work consistently for beneficiaryCapNotExceeded()\\n    /*\\n    modifier beneficiaryCapNotExceeded(\\n        address beneficiary,\\n        uint256 tokenAmount\\n    ) {\\n        require(\\n            _tokensPurchased[beneficiary].add(tokenAmount) <=\\n                ILaunchpadWhitelist(whitelistContract).whitelistedAmountFor(\\n                    beneficiary\\n                ),\\n            \\\"LaunchpadWhitelistCrowdsaleHelper: beneficiary cap exceeded\\\"\\n        );\\n        _;\\n    }\\n    */\\n\\n    modifier isWhitelisted(address account) {\\n        require(\\n            ILaunchpadWhitelist(whitelistContract).isWhitelisted(account),\\n            \\\"LaunchpadWhitelistCrowdsaleHelper: account not whitelisted\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @return tokenCap Cap for beneficiary in wei\\n     */\\n    function getBeneficiaryCap(address beneficiary)\\n        public\\n        view\\n        returns (uint256 tokenCap)\\n    {\\n        require(\\n            beneficiary != address(0),\\n            \\\"LaunchpadWhitelistCrowdsaleHelper: zero beneficiary address\\\"\\n        );\\n\\n        tokenCap = ILaunchpadWhitelist(whitelistContract).whitelistedAmountFor(\\n            beneficiary\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tokens purchased so far by specific beneficiary.\\n     * @param beneficiary Address of contributor\\n     * @return tokensPurchased Tokens purchased by beneficiary so far in wei\\n     */\\n    function getTokensPurchasedBy(address beneficiary)\\n        public\\n        view\\n        returns (uint256 tokensPurchased)\\n    {\\n        require(\\n            beneficiary != address(0),\\n            \\\"LaunchpadWhitelistCrowdsaleHelper: zero beneficiary address\\\"\\n        );\\n\\n        tokensPurchased = _tokensPurchased[beneficiary];\\n    }\\n\\n    function whitelisted(address account)\\n        public\\n        view\\n        returns (bool whitelisted_)\\n    {\\n        require(\\n            account != address(0),\\n            \\\"LaunchpadWhitelistCrowdsaleHelper: zero account\\\"\\n        );\\n\\n        whitelisted_ = ILaunchpadWhitelist(whitelistContract).isWhitelisted(\\n            account\\n        );\\n    }\\n\\n    /**\\n     * @param beneficiary Address of contributor\\n     * @param tokenAmount Amount in wei of token being purchased\\n     */\\n    function _updateBeneficiaryTokensPurchased(\\n        address beneficiary,\\n        uint256 tokenAmount\\n    ) internal {\\n        _tokensPurchased[beneficiary] = _tokensPurchased[beneficiary].add(\\n            tokenAmount\\n        );\\n    }\\n\\n    /**\\n     * @return availableTokens Available number of tokens for purchase by beneficiary\\n     */\\n    function _getAvailableTokensFor(address beneficiary)\\n        internal\\n        view\\n        returns (uint256 availableTokens)\\n    {\\n        availableTokens = getBeneficiaryCap(beneficiary).sub(\\n            getTokensPurchasedBy(beneficiary)\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/NoDeliveryCrowdsale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// Copyright 2021 Enjinstarter\\npragma solidity ^0.7.6;\\n\\nimport \\\"./Crowdsale.sol\\\";\\n\\n/**\\n * @title NoDeliveryCrowdsale\\n * @author Enjinstarter\\n * @dev Extension of Crowdsale contract where purchased tokens are not delivered.\\n */\\nabstract contract NoDeliveryCrowdsale is Crowdsale {\\n    /**\\n     * @dev Overrides delivery by not delivering tokens upon purchase.\\n     */\\n    function _deliverTokens(address, uint256) internal pure override {\\n        return;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TimedCrowdsaleHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// Copyright 2021 Enjinstarter\\npragma solidity ^0.7.6;\\npragma abicoder v2; // solhint-disable-line\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title TimedCrowdsaleHelper\\n * @author Enjinstarter\\n * @dev Helper for crowdsale accepting contributions only within a time frame.\\n */\\ncontract TimedCrowdsaleHelper {\\n    using SafeMath for uint256;\\n\\n    struct Timeframe {\\n        uint256 openingTime;\\n        uint256 closingTime;\\n    }\\n\\n    Timeframe private _timeframe;\\n\\n    /**\\n     * Event for crowdsale extending\\n     * @param prevClosingTime old closing time\\n     * @param newClosingTime new closing time\\n     */\\n    event TimedCrowdsaleExtended(\\n        uint256 prevClosingTime,\\n        uint256 newClosingTime\\n    );\\n\\n    /**\\n     * @dev Reverts if not in crowdsale time range.\\n     */\\n    modifier onlyWhileOpen() {\\n        require(isOpen(), \\\"TimedCrowdsaleHelper: not open\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor, takes crowdsale opening and closing times.\\n     * @param timeframe Crowdsale opening and closing times\\n     */\\n    constructor(Timeframe memory timeframe) {\\n        require(\\n            timeframe.openingTime >= block.timestamp,\\n            \\\"TimedCrowdsaleHelper: opening time is before current time\\\"\\n        );\\n        require(\\n            timeframe.closingTime > timeframe.openingTime,\\n            \\\"TimedCrowdsaleHelper: closing time is before opening time\\\"\\n        );\\n\\n        _timeframe.openingTime = timeframe.openingTime;\\n        _timeframe.closingTime = timeframe.closingTime;\\n    }\\n\\n    /**\\n     * @return the crowdsale opening time.\\n     */\\n    function openingTime() external view returns (uint256) {\\n        return _timeframe.openingTime;\\n    }\\n\\n    /**\\n     * @return the crowdsale closing time.\\n     */\\n    function closingTime() public view returns (uint256) {\\n        return _timeframe.closingTime;\\n    }\\n\\n    /**\\n     * @return true if the crowdsale is open, false otherwise.\\n     */\\n    function isOpen() public view returns (bool) {\\n        return\\n            block.timestamp >= _timeframe.openingTime &&\\n            block.timestamp <= _timeframe.closingTime;\\n    }\\n\\n    /**\\n     * @dev Checks whether the period in which the crowdsale is open has already elapsed.\\n     * @return Whether crowdsale period has elapsed\\n     */\\n    function hasClosed() public view returns (bool) {\\n        return block.timestamp > _timeframe.closingTime;\\n    }\\n\\n    /**\\n     * @dev Extend crowdsale.\\n     * @param newClosingTime Crowdsale closing time\\n     */\\n    // https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code\\n    // slither-disable-next-line dead-code\\n    function _extendTime(uint256 newClosingTime) internal {\\n        require(!hasClosed(), \\\"TimedCrowdsaleHelper: already closed\\\");\\n        uint256 oldClosingTime = _timeframe.closingTime;\\n        require(\\n            newClosingTime > oldClosingTime,\\n            \\\"TimedCrowdsaleHelper: before current closing time\\\"\\n        );\\n\\n        _timeframe.closingTime = newClosingTime;\\n\\n        emit TimedCrowdsaleExtended(oldClosingTime, newClosingTime);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILaunchpadCrowdsaleNft.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// Copyright 2021 Enjinstarter\\npragma solidity ^0.7.6;\\n\\nimport \\\"./ICrowdsale.sol\\\";\\n\\n/**\\n * @title ILaunchpadCrowdsaleNft\\n * @author Enjinstarter\\n */\\ninterface ILaunchpadCrowdsaleNft is ICrowdsale {\\n    function buyTokens(address paymentToken, uint256 lots) external;\\n\\n    function buyTokensFor(\\n        address beneficiary,\\n        address paymentToken,\\n        uint256 lots\\n    ) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function extendTime(uint256 newClosingTime) external;\\n\\n    function setGovernanceAccount(address account) external;\\n\\n    function setCrowdsaleAdmin(address account) external;\\n\\n    function getAvailableLotsFor(address beneficiary)\\n        external\\n        view\\n        returns (uint256 availableLots);\\n\\n    function getRemainingTokens()\\n        external\\n        view\\n        returns (uint256 remainingTokens);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILaunchpadWhitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// Copyright 2021 Enjinstarter\\npragma solidity ^0.7.6;\\n\\n/**\\n * @title ILaunchpadWhitelist\\n * @author Enjinstarter\\n */\\ninterface ILaunchpadWhitelist {\\n    event WhitelistedAdded(address indexed account, uint256 amount);\\n\\n    event WhitelistedRemoved(address indexed account);\\n\\n    function addWhitelisted(address account, uint256 amount) external;\\n\\n    function removeWhitelisted(address account) external;\\n\\n    function addWhitelistedBatch(\\n        address[] memory accounts,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    function removeWhitelistedBatch(address[] memory accounts) external;\\n\\n    function setGovernanceAccount(address account) external;\\n\\n    function setWhitelistAdmin(address account) external;\\n\\n    function isWhitelisted(address account)\\n        external\\n        view\\n        returns (bool isWhitelisted_);\\n\\n    function whitelistedAmountFor(address account)\\n        external\\n        view\\n        returns (uint256 whitelistedAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/Crowdsale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// Copyright 2021 Enjinstarter\\npragma solidity ^0.7.6;\\npragma abicoder v2; // solhint-disable-line\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/ICrowdsale.sol\\\";\\n\\n/**\\n * @title Crowdsale\\n * @author Enjinstarter\\n * @dev Crowdsale is a base contract for managing a token crowdsale,\\n * allowing investors to purchase tokens with ERC20 tokens. This contract implements\\n * such functionality in its most fundamental form and can be extended to provide additional\\n * functionality and/or custom behavior.\\n * The external interface represents the basic interface for purchasing tokens, and conforms\\n * the base architecture for crowdsales. It is *not* intended to be modified / overridden.\\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\\n * the methods to add functionality. Consider using 'super' where appropriate to concatenate\\n * behavior.\\n */\\ncontract Crowdsale is ReentrancyGuard, ICrowdsale {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant MAX_NUM_PAYMENT_TOKENS = 10;\\n    // https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits\\n    // slither-disable-next-line too-many-digits\\n    address public constant NATIVE_TOKEN_ADDRESS =\\n        0x0000000000000000000000000000000000000000;\\n    uint256 public constant TOKEN_MAX_DECIMALS = 18;\\n    uint256 public constant TOKEN_SELLING_SCALE = 10**TOKEN_MAX_DECIMALS;\\n\\n    // Amount of tokens sold\\n    uint256 public tokensSold;\\n\\n    // The token being sold\\n    // https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-are-too-similar\\n    // slither-disable-next-line similar-names\\n    address private _tokenSelling;\\n\\n    // Lot size and maximum number of lots for token being sold\\n    LotsInfo private _lotsInfo;\\n\\n    // True if native token is allowed for payment\\n    bool private _allowNativeTokenPayment;\\n\\n    // Payment tokens\\n    // https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-are-too-similar\\n    // slither-disable-next-line similar-names\\n    address[] private _paymentTokens;\\n\\n    // Payment token decimals\\n    // https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-are-too-similar\\n    // slither-disable-next-line similar-names\\n    mapping(address => uint256) private _paymentDecimals;\\n\\n    // Indicates whether ERC20 token is acceptable for payment\\n    mapping(address => bool) private _isPaymentTokens;\\n\\n    // Address where funds are collected\\n    address private _wallet;\\n\\n    // How many weis one token costs for each ERC20 payment token\\n    mapping(address => uint256) private _rates;\\n\\n    // Amount of wei raised for each payment token\\n    mapping(address => uint256) private _weiRaised;\\n\\n    /**\\n     * @dev Rates will denote how many weis one token costs for each ERC20 payment token.\\n     * For USDC or USDT payment token which has 6 decimals, minimum rate will\\n     * be 1000000000000 which will correspond to a price of USD0.000001 per token.\\n     * @param wallet_ Address where collected funds will be forwarded to\\n     * @param tokenSelling_ Address of the token being sold\\n     * @param lotsInfo Lot size in wei and maximum number of lots for token being sold\\n     * @param paymentTokensInfo Addresses, decimals, rates and lot sizes of ERC20 tokens acceptable for payment\\n     * @param allowNativeTokenPayment True if native token is allowed for payment\\n     */\\n    constructor(\\n        address wallet_,\\n        address tokenSelling_,\\n        LotsInfo memory lotsInfo,\\n        PaymentTokenInfo[] memory paymentTokensInfo,\\n        bool allowNativeTokenPayment\\n    ) {\\n        require(wallet_ != address(0), \\\"Crowdsale: zero wallet address\\\");\\n        require(\\n            tokenSelling_ != address(0),\\n            \\\"Crowdsale: zero token selling address\\\"\\n        );\\n        require(lotsInfo.lotSize > 0, \\\"Crowdsale: zero lot size\\\");\\n        require(lotsInfo.maxLots > 0, \\\"Crowdsale: zero max lots\\\");\\n        require(paymentTokensInfo.length > 0, \\\"Crowdsale: zero payment tokens\\\");\\n        require(\\n            paymentTokensInfo.length < MAX_NUM_PAYMENT_TOKENS,\\n            \\\"Crowdsale: exceed max payment tokens\\\"\\n        );\\n\\n        _wallet = wallet_;\\n        _tokenSelling = tokenSelling_;\\n        _lotsInfo = lotsInfo;\\n        _allowNativeTokenPayment = allowNativeTokenPayment;\\n\\n        for (uint256 i = 0; i < paymentTokensInfo.length; i++) {\\n            uint256 paymentDecimal = paymentTokensInfo[i].paymentDecimal;\\n            require(\\n                paymentDecimal <= TOKEN_MAX_DECIMALS,\\n                \\\"Crowdsale: decimals exceed 18\\\"\\n            );\\n            address paymentToken = paymentTokensInfo[i].paymentToken;\\n            require(\\n                paymentToken != address(0) ||\\n                    (allowNativeTokenPayment &&\\n                        paymentDecimal == TOKEN_MAX_DECIMALS),\\n                \\\"Crowdsale: zero payment token address\\\"\\n            );\\n            uint256 rate_ = paymentTokensInfo[i].rate;\\n            require(rate_ > 0, \\\"Crowdsale: zero rate\\\");\\n\\n            _isPaymentTokens[paymentToken] = true;\\n            _paymentTokens.push(paymentToken);\\n            _paymentDecimals[paymentToken] = paymentDecimal;\\n            _rates[paymentToken] = rate_;\\n        }\\n    }\\n\\n    /**\\n     * @return tokenSelling_ the token being sold\\n     */\\n    function tokenSelling()\\n        external\\n        view\\n        override\\n        returns (address tokenSelling_)\\n    {\\n        tokenSelling_ = _tokenSelling;\\n    }\\n\\n    /**\\n     * @return wallet_ the address where funds are collected\\n     */\\n    function wallet() external view override returns (address wallet_) {\\n        wallet_ = _wallet;\\n    }\\n\\n    /**\\n     * @return paymentTokens_ the payment tokens, 0x0000000000000000000000000000000000000000 for native token\\n     */\\n    function paymentTokens()\\n        external\\n        view\\n        override\\n        returns (address[] memory paymentTokens_)\\n    {\\n        paymentTokens_ = _paymentTokens;\\n    }\\n\\n    /**\\n     * @param paymentToken ERC20 payment token address, 0x0000000000000000000000000000000000000000 for native token\\n     * @return rate_ how many weis one token costs for specified ERC20 payment token\\n     */\\n    function rate(address paymentToken)\\n        external\\n        view\\n        override\\n        returns (uint256 rate_)\\n    {\\n        require(\\n            paymentToken != address(0) || _allowNativeTokenPayment,\\n            \\\"Crowdsale: zero payment token address\\\"\\n        );\\n        require(\\n            isPaymentToken(paymentToken),\\n            \\\"Crowdsale: payment token unaccepted\\\"\\n        );\\n\\n        rate_ = _rate(paymentToken);\\n    }\\n\\n    /**\\n     * @param beneficiary Address receiving the tokens\\n     * @return maxLots_ maximum number of lots for token being sold\\n     */\\n    function maxLots(address beneficiary)\\n        external\\n        view\\n        override\\n        returns (uint256 maxLots_)\\n    {\\n        maxLots_ = _maxLots(beneficiary);\\n    }\\n\\n    /**\\n     * @param paymentToken ERC20 payment token address, 0x0000000000000000000000000000000000000000 for native token\\n     * @return weiRaised_ the amount of wei raised\\n     */\\n    function weiRaisedFor(address paymentToken)\\n        external\\n        view\\n        override\\n        returns (uint256 weiRaised_)\\n    {\\n        weiRaised_ = _weiRaisedFor(paymentToken);\\n    }\\n\\n    /**\\n     * @dev Override to extend the way in which payment token is converted to tokens.\\n     * @param lots Number of lots of token being sold\\n     * @param beneficiary Address receiving the tokens\\n     * @return tokenAmount Number of tokens being sold that will be purchased\\n     */\\n    function getTokenAmount(uint256 lots, address beneficiary)\\n        external\\n        view\\n        override\\n        returns (uint256 tokenAmount)\\n    {\\n        require(lots > 0, \\\"Crowdsale: zero lots\\\");\\n        require(\\n            beneficiary != address(0),\\n            \\\"Crowdsale: zero beneficiary address\\\"\\n        );\\n\\n        tokenAmount = _getTokenAmount(lots, beneficiary);\\n    }\\n\\n    /**\\n     * @dev Override to extend the way in which payment token is converted to tokens.\\n     * @param paymentToken ERC20 payment token address, 0x0000000000000000000000000000000000000000 for native token\\n     * @param lots Number of lots of token being sold\\n     * @param beneficiary Address receiving the tokens\\n     * @return weiAmount Amount in wei of ERC20 payment token\\n     */\\n    function getWeiAmount(\\n        address paymentToken,\\n        uint256 lots,\\n        address beneficiary\\n    ) external view override returns (uint256 weiAmount) {\\n        require(\\n            paymentToken != address(0) || _allowNativeTokenPayment,\\n            \\\"Crowdsale: zero payment token address\\\"\\n        );\\n        require(lots > 0, \\\"Crowdsale: zero lots\\\");\\n        require(\\n            beneficiary != address(0),\\n            \\\"Crowdsale: zero beneficiary address\\\"\\n        );\\n        require(\\n            isPaymentToken(paymentToken),\\n            \\\"Crowdsale: payment token unaccepted\\\"\\n        );\\n\\n        weiAmount = _getWeiAmount(paymentToken, lots, beneficiary);\\n    }\\n\\n    /**\\n     * @param beneficiary Address receiving the tokens\\n     * @return lotSize_ lot size of token being sold in wei\\n     */\\n    function lotSize(address beneficiary)\\n        public\\n        view\\n        override\\n        returns (uint256 lotSize_)\\n    {\\n        require(\\n            beneficiary != address(0),\\n            \\\"Crowdsale: zero beneficiary address\\\"\\n        );\\n\\n        lotSize_ = _lotSize(beneficiary);\\n    }\\n\\n    /**\\n     * @param paymentToken ERC20 payment token address, 0x0000000000000000000000000000000000000000 for native token\\n     * @return isPaymentToken_ whether token is accepted for payment\\n     */\\n    function isPaymentToken(address paymentToken)\\n        public\\n        view\\n        override\\n        returns (bool isPaymentToken_)\\n    {\\n        require(\\n            paymentToken != address(0) || _allowNativeTokenPayment,\\n            \\\"Crowdsale: zero payment token address\\\"\\n        );\\n\\n        isPaymentToken_ = _isPaymentTokens[paymentToken];\\n    }\\n\\n    /**\\n     * @dev low level token purchase ***DO NOT OVERRIDE***\\n     * This function has a non-reentrancy guard, so it shouldn't be called by\\n     * another `nonReentrant` function.\\n     * @param beneficiary Recipient of the token purchase\\n     * @param paymentToken ERC20 payment token address\\n     * @param lots Number of lots of token being sold\\n     * @param nonEthAddress Recipient address on non ETH blockchain\\n     */\\n    function _buyTokensFor(\\n        address beneficiary,\\n        address paymentToken,\\n        uint256 lots,\\n        string memory nonEthAddress\\n    ) internal nonReentrant {\\n        require(\\n            beneficiary != address(0),\\n            \\\"Crowdsale: zero beneficiary address\\\"\\n        );\\n        require(\\n            paymentToken != address(0),\\n            \\\"Crowdsale: zero payment token address\\\"\\n        );\\n        require(lots > 0, \\\"Crowdsale: zero lots\\\");\\n        require(\\n            isPaymentToken(paymentToken),\\n            \\\"Crowdsale: payment token unaccepted\\\"\\n        );\\n\\n        // calculate token amount to be created\\n        uint256 tokenAmount = _getTokenAmount(lots, beneficiary);\\n        // calculate wei amount to transfer to wallet\\n        uint256 weiAmount = _getWeiAmount(paymentToken, lots, beneficiary);\\n\\n        _preValidatePurchase(beneficiary, paymentToken, weiAmount, tokenAmount);\\n\\n        // update state\\n        _weiRaised[paymentToken] = _weiRaised[paymentToken].add(weiAmount);\\n        tokensSold = tokensSold.add(tokenAmount);\\n\\n        _updatePurchasingState(\\n            beneficiary,\\n            paymentToken,\\n            weiAmount,\\n            tokenAmount\\n        );\\n\\n        emit TokensPurchased(\\n            msg.sender,\\n            beneficiary,\\n            paymentToken,\\n            lots,\\n            weiAmount,\\n            tokenAmount,\\n            nonEthAddress\\n        );\\n\\n        _processPurchase(beneficiary, tokenAmount);\\n        _forwardFunds(paymentToken, weiAmount);\\n        _postValidatePurchase(\\n            beneficiary,\\n            paymentToken,\\n            weiAmount,\\n            tokenAmount\\n        );\\n    }\\n\\n    /**\\n     * @dev low level token purchase using native token ***DO NOT OVERRIDE***\\n     * This function has a non-reentrancy guard, so it shouldn't be called by\\n     * another `nonReentrant` function.\\n     * @param beneficiary Recipient of the token purchase\\n     * @param nonEthAddress Recipient address on non ETH blockchain\\n     */\\n    function _nativeBuyTokensFor(\\n        address beneficiary,\\n        string memory nonEthAddress\\n    ) internal nonReentrant {\\n        require(\\n            beneficiary != address(0),\\n            \\\"Crowdsale: zero beneficiary address\\\"\\n        );\\n        require(msg.value > 0, \\\"Crowdsale: zero native token\\\");\\n        require(\\n            isPaymentToken(NATIVE_TOKEN_ADDRESS),\\n            \\\"Crowdsale: payment token unaccepted\\\"\\n        );\\n\\n        uint256 weiAmount = msg.value;\\n        uint256 lots = _getLotsFor(\\n            NATIVE_TOKEN_ADDRESS,\\n            weiAmount,\\n            beneficiary\\n        );\\n        require(lots > 0, \\\"Crowdsale: zero lots\\\");\\n\\n        // calculate token amount to be created\\n        uint256 tokenAmount = _getTokenAmount(lots, beneficiary);\\n\\n        _preValidatePurchase(\\n            beneficiary,\\n            NATIVE_TOKEN_ADDRESS,\\n            weiAmount,\\n            tokenAmount\\n        );\\n\\n        // update state\\n        _weiRaised[NATIVE_TOKEN_ADDRESS] = _weiRaised[NATIVE_TOKEN_ADDRESS].add(\\n            weiAmount\\n        );\\n        tokensSold = tokensSold.add(tokenAmount);\\n\\n        _updatePurchasingState(\\n            beneficiary,\\n            NATIVE_TOKEN_ADDRESS,\\n            weiAmount,\\n            tokenAmount\\n        );\\n\\n        emit TokensPurchased(\\n            msg.sender,\\n            beneficiary,\\n            NATIVE_TOKEN_ADDRESS,\\n            lots,\\n            weiAmount,\\n            tokenAmount,\\n            nonEthAddress\\n        );\\n\\n        _processPurchase(beneficiary, tokenAmount);\\n        _nativeForwardFunds(weiAmount);\\n        _postValidatePurchase(\\n            beneficiary,\\n            NATIVE_TOKEN_ADDRESS,\\n            weiAmount,\\n            tokenAmount\\n        );\\n    }\\n\\n    /**\\n     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends\\n     * its tokens.\\n     * param beneficiary Address performing the token purchase\\n     * param tokenAmount Number of tokens to be emitted\\n     */\\n    // https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code\\n    // slither-disable-next-line dead-code\\n    function _deliverTokens(\\n        address, /* beneficiary */\\n        uint256 /* tokenAmount */\\n    ) internal virtual {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Executed when a purchase has been validated and is ready to be executed. Doesn't necessarily emit/send\\n     * tokens.\\n     * @param beneficiary Address receiving the tokens\\n     * @param tokenAmount Number of tokens to be purchased\\n     */\\n    function _processPurchase(address beneficiary, uint256 tokenAmount)\\n        internal\\n        virtual\\n    {\\n        _deliverTokens(beneficiary, tokenAmount);\\n    }\\n\\n    /**\\n     * @dev Override for extensions that require an internal state to check for validity (current user contributions,\\n     * etc.)\\n     * @param beneficiary Address receiving the tokens\\n     * @param paymentToken ERC20 payment token address, 0x0000000000000000000000000000000000000000 for native token\\n     * @param weiAmount Amount in wei of ERC20 payment token\\n     * @param tokenAmount Number of tokens to be purchased\\n     */\\n    function _updatePurchasingState(\\n        address beneficiary,\\n        address paymentToken,\\n        uint256 weiAmount,\\n        uint256 tokenAmount\\n    ) internal virtual {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Determines how ERC20 payment token is stored/forwarded on purchases.\\n     */\\n    function _forwardFunds(address paymentToken, uint256 weiAmount)\\n        internal\\n        virtual\\n    {\\n        uint256 amount = weiAmount;\\n        if (_paymentDecimals[paymentToken] < TOKEN_MAX_DECIMALS) {\\n            uint256 decimalsDiff = uint256(TOKEN_MAX_DECIMALS).sub(\\n                _paymentDecimals[paymentToken]\\n            );\\n            amount = weiAmount.div(10**decimalsDiff);\\n        }\\n\\n        IERC20(paymentToken).safeTransferFrom(msg.sender, _wallet, amount);\\n    }\\n\\n    /**\\n     * @dev Determines how native payment token is stored/forwarded on purchases.\\n     */\\n    function _nativeForwardFunds(uint256 weiAmount) internal virtual {\\n        Address.sendValue(payable(_wallet), weiAmount);\\n    }\\n\\n    /**\\n     * @param paymentToken ERC20 payment token address, 0x0000000000000000000000000000000000000000 for native token\\n     * @return weiRaised_ the amount of wei raised\\n     */\\n    function _weiRaisedFor(address paymentToken)\\n        internal\\n        view\\n        virtual\\n        returns (uint256 weiRaised_)\\n    {\\n        require(\\n            paymentToken != address(0) || _allowNativeTokenPayment,\\n            \\\"Crowdsale: zero payment token address\\\"\\n        );\\n        require(\\n            isPaymentToken(paymentToken),\\n            \\\"Crowdsale: payment token unaccepted\\\"\\n        );\\n\\n        weiRaised_ = _weiRaised[paymentToken];\\n    }\\n\\n    /**\\n     * @param paymentToken ERC20 payment token address, 0x0000000000000000000000000000000000000000 for native token\\n     * @return rate_ how many weis one token costs for specified ERC20 payment token\\n     */\\n    function _rate(address paymentToken)\\n        internal\\n        view\\n        virtual\\n        returns (uint256 rate_)\\n    {\\n        rate_ = _rates[paymentToken];\\n    }\\n\\n    /**\\n     * @return lotSize_ lot size of token being sold in wei\\n     */\\n    function _lotSize(address)\\n        internal\\n        view\\n        virtual\\n        returns (uint256 lotSize_)\\n    {\\n        lotSize_ = _lotsInfo.lotSize;\\n    }\\n\\n    /**\\n     * @return maxLots_ maximum number of lots for token being sold\\n     */\\n    function _maxLots(address)\\n        internal\\n        view\\n        virtual\\n        returns (uint256 maxLots_)\\n    {\\n        maxLots_ = _lotsInfo.maxLots;\\n    }\\n\\n    /**\\n     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met.\\n     * Use `super` in contracts that inherit from Crowdsale to extend their validations.\\n     * Example from CappedCrowdsale.sol's _preValidatePurchase method:\\n     *     super._preValidatePurchase(beneficiary, weiAmount);\\n     *     require(weiRaised().add(weiAmount) <= cap);\\n     * @param beneficiary Address performing the token purchase\\n     * @param paymentToken ERC20 payment token address, 0x0000000000000000000000000000000000000000 for native token\\n     * @param weiAmount Amount in wei of ERC20 payment token\\n     * @param tokenAmount Number of tokens to be purchased\\n     */\\n    function _preValidatePurchase(\\n        address beneficiary,\\n        address paymentToken,\\n        uint256 weiAmount,\\n        uint256 tokenAmount\\n    ) internal view virtual {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Validation of an executed purchase. Observe state and use revert statements to undo/rollback when valid\\n     * conditions are not met.\\n     * @param beneficiary Address performing the token purchase\\n     * @param paymentToken ERC20 payment token address, 0x0000000000000000000000000000000000000000 for native token\\n     * @param weiAmount Amount in wei of ERC20 payment token\\n     * @param tokenAmount Number of tokens to be purchased\\n     */\\n    function _postValidatePurchase(\\n        address beneficiary,\\n        address paymentToken,\\n        uint256 weiAmount,\\n        uint256 tokenAmount\\n    ) internal view virtual {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Override to extend the way in which payment token is converted to tokens.\\n     * @param lots Number of lots of token being sold\\n     * @param beneficiary Address receiving the tokens\\n     * @return tokenAmount Number of tokens that will be purchased in wei\\n     */\\n    function _getTokenAmount(uint256 lots, address beneficiary)\\n        internal\\n        view\\n        virtual\\n        returns (uint256 tokenAmount)\\n    {\\n        tokenAmount = lots.mul(lotSize(beneficiary));\\n    }\\n\\n    /**\\n     * @dev Override to extend the way in which payment token is converted to tokens.\\n     * @param paymentToken ERC20 payment token address, 0x0000000000000000000000000000000000000000 for native token\\n     * @param lots Number of lots of token being sold\\n     * @param beneficiary Address receiving the tokens\\n     * @return weiAmount Amount in wei of ERC20 payment token\\n     */\\n    function _getWeiAmount(\\n        address paymentToken,\\n        uint256 lots,\\n        address beneficiary\\n    ) internal view virtual returns (uint256 weiAmount) {\\n        uint256 rate_ = _rate(paymentToken);\\n        uint256 tokenAmount = _getTokenAmount(lots, beneficiary);\\n        weiAmount = tokenAmount.mul(rate_).div(TOKEN_SELLING_SCALE);\\n    }\\n\\n    /**\\n     * @dev Override to extend the way in which payment token is converted to tokens.\\n     * @param paymentToken ERC20 payment token address, 0x0000000000000000000000000000000000000000 for native token\\n     * @param weiAmount Wei amount of payment token\\n     * @param beneficiary Address receiving the tokens\\n     * @return lots Number of lots of token that will be purchased\\n     */\\n    function _getLotsFor(\\n        address paymentToken,\\n        uint256 weiAmount,\\n        address beneficiary\\n    ) internal view virtual returns (uint256 lots) {\\n        uint256 rate_ = _rate(paymentToken);\\n        lots = weiAmount.mul(TOKEN_SELLING_SCALE).div(\\n            rate_.mul(lotSize(beneficiary))\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICrowdsale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// Copyright 2021 Enjinstarter\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title ICrowdsale\\n * @author Enjinstarter\\n */\\ninterface ICrowdsale {\\n    struct LotsInfo {\\n        uint256 lotSize; // in wei\\n        uint256 maxLots;\\n    }\\n\\n    struct PaymentTokenInfo {\\n        address paymentToken;\\n        uint256 paymentDecimal;\\n        uint256 rate;\\n    }\\n\\n    /**\\n     * Event for token purchase logging\\n     * @param purchaser who paid for the tokens\\n     * @param beneficiary who got the tokens\\n     * @param paymentToken address of ERC20 token used for payment\\n     * @param lots number of lots to purchase\\n     * @param weiAmount weis paid for purchase\\n     * @param tokenAmount amount of tokens purchased\\n     * @param nonEthAddress recipient address on non ETH blockchain\\n     */\\n    event TokensPurchased(\\n        address indexed purchaser,\\n        address indexed beneficiary,\\n        address indexed paymentToken,\\n        uint256 lots,\\n        uint256 weiAmount,\\n        uint256 tokenAmount,\\n        string nonEthAddress\\n    );\\n\\n    function tokenSelling() external view returns (address tokenSelling_);\\n\\n    function wallet() external view returns (address wallet_);\\n\\n    function paymentTokens()\\n        external\\n        view\\n        returns (address[] memory paymentTokens_);\\n\\n    function rate(address paymentToken) external view returns (uint256 rate_);\\n\\n    function lotSize(address beneficiary)\\n        external\\n        view\\n        returns (uint256 lotSize_);\\n\\n    function maxLots(address beneficiary)\\n        external\\n        view\\n        returns (uint256 maxLots_);\\n\\n    function weiRaisedFor(address paymentToken)\\n        external\\n        view\\n        returns (uint256 weiRaised_);\\n\\n    function isPaymentToken(address paymentToken)\\n        external\\n        view\\n        returns (bool isPaymentToken_);\\n\\n    function getTokenAmount(uint256 lots, address beneficiary)\\n        external\\n        view\\n        returns (uint256 tokenAmount);\\n\\n    function getWeiAmount(\\n        address paymentToken,\\n        uint256 lots,\\n        address beneficiary\\n    ) external view returns (uint256 weiAmount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenCap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"whitelistContract\",\"type\":\"address\"}],\"internalType\":\"struct LaunchpadCrowdsaleNft.LaunchpadCrowdsaleInfo\",\"name\":\"crowdsaleInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lotSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLots\",\"type\":\"uint256\"}],\"internalType\":\"struct ICrowdsale.LotsInfo\",\"name\":\"lotsInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"openingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closingTime\",\"type\":\"uint256\"}],\"internalType\":\"struct TimedCrowdsaleHelper.Timeframe\",\"name\":\"timeframe\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"paymentDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"internalType\":\"struct ICrowdsale.PaymentTokenInfo[]\",\"name\":\"paymentTokensInfo\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevClosingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newClosingTime\",\"type\":\"uint256\"}],\"name\":\"TimedCrowdsaleExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lots\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"nonEthAddress\",\"type\":\"string\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_NUM_PAYMENT_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NATIVE_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_MAX_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_SELLING_SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lots\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lots\",\"type\":\"uint256\"}],\"name\":\"buyTokensFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crowdsaleAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newClosingTime\",\"type\":\"uint256\"}],\"name\":\"extendTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getAvailableLotsFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"availableLots\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getBeneficiaryCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenCap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remainingTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lots\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getTokensPurchasedBy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensPurchased\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lots\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getWeiAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"isPaymentToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPaymentToken_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"lotSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lotSize_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"maxLots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxLots_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"paymentTokens_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setCrowdsaleAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setGovernanceAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenCap_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensSold\",\"type\":\"uint256\"}],\"name\":\"tokenCapReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"tokenCapReached_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSelling\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenSelling_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wallet_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"weiRaisedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weiRaised_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"whitelisted_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LaunchpadCrowdsaleNft", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009b71f950eebf52a80c4479f6efc39c4b1d0891a10000000000000000000000000000000000000000000108b2a2c280290940000000000000000000000000000029f799f99850c3a6ba5d07d6830a16b03a21d7e40000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000637ec210000000000000000000000000000000000000000000000000000000006380139000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d560000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000008e1bc9bf040000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}