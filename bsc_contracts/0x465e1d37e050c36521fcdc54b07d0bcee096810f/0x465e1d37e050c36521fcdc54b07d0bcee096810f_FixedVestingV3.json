{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20Metadata} from \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IFixedVestingFactoryV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IFixedVestingFactoryV3 {\\n  function owner() external view returns (address);\\n  function beacon() external view returns (address);\\n  function vestingGateway() external view returns (address);\\n  function allVestingsLength() external view returns (uint256);\\n  function allStablesLength() external view returns (uint256);\\n  function allVestings(uint256) external view returns (address);\\n  function allStables(uint256) external view returns (address);\\n  function stableIndex(address) external view returns (uint256);\\n  function isStableSupported(address) external view returns (bool);\\n  function isKnown(address) external view returns (bool);\\n\\n  function createVesting(\\n    address,\\n    address,\\n    address,\\n    uint256,\\n    uint256,\\n    uint256[] calldata,\\n    uint256[] calldata\\n  ) external returns (address);\\n  function setStable(address) external;\\n  function removeStable(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IFixedVestingV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IFixedVestingFactoryV3} from '../interface/IFixedVestingFactoryV3.sol';\\nimport {IVestingGateway} from '../interface/IVestingGateway.sol';\\n\\ninterface IFixedVestingV3 {\\n  function sold() external view returns (uint256);\\n  function tokenPrice() external view returns (uint256);\\n  function lastRefundAt() external view returns (uint256);\\n  function buyers(uint256) external view returns (address);\\n  function token() external view returns (address);\\n  function projectOwner() external view returns (address);\\n  function stable() external view returns (address);\\n  function factory() external view returns (IFixedVestingFactoryV3);\\n  function projectPayment() external view returns (uint256, uint256, bool);\\n  function vestingGateway() external view returns (IVestingGateway);\\n  function vestings(uint256) external view returns (uint256, uint256);\\n  function invoice(address) external view returns (uint128, uint128, uint256, uint256);\\n  function buyerLength() external view returns (uint256);\\n  function vestingLength() external view returns (uint256);\\n  function refundLength() external view returns (uint256);\\n  function vestingRunning() external view returns (uint256, uint256);\\n  function totalRatio() external view returns (uint256);\\n  function isRefunder(address) external view returns (uint256);\\n  function refundableAmount(address) external view returns (uint256);\\n  function estimateCrossFee(uint240, address, uint256) external view returns (uint256, uint256);\\n\\n  function init(address, address, address, uint256, uint256, uint256[] calldata, uint256[] calldata) external;\\n  function newVesting(uint256[] calldata, uint256[] calldata) external;\\n  function updateVestingDatetimes(uint256[] calldata, uint256[] calldata) external;\\n  function updateVestingRatios(uint256[] calldata, uint256[] calldata) external;\\n  function removeLastVestingRound() external;\\n  function newBuyers(address[] calldata, uint256[] calldata) external;\\n  function replaceBuyers(address[] calldata, address[] calldata) external;\\n  function removeBuyers(address[] calldata) external;\\n  function replacePurchases(address[] calldata, uint256[] calldata) external;\\n  function claimToken() external;\\n  function refund(uint240) external payable;\\n  function payToProject(uint240) external;\\n  function emergencyWithdraw(address, address, uint256) external;\\n\\n  function setTokenPrice(uint256) external;\\n  function setStable(address) external;\\n  function setLastRefundAt(uint256) external;\\n  function setToken(address) external;\\n  function setProjectOwner(address) external;\\n  function togglePause() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IVestingGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IVestingGateway {\\n  struct FactoryList {\\n    address fixedFactory;\\n    address linearFactory;\\n  }\\n\\n  struct DstChain {\\n    uint240 chainID;\\n    uint16 lzChainID;\\n    address refundTreasury;\\n  }\\n\\n  function native() external view returns (address);\\n  function gasForDestinationLzReceive() external view returns (uint256);\\n  function crossFee_d2() external view returns (uint256);\\n\\n  function factory() external view returns (address, address);\\n  function allDstChainsSupportedLength() external view returns (uint256);\\n  function isChainIDSupported(uint240) external view returns (bool);\\n  function crossChainData(uint240) external view returns (DstChain memory);\\n  function estimateFees(uint240, address, address, address, uint256) external view returns (uint256, uint256);\\n\\n  function releaseToken(uint240, address, address, uint256) external payable;\\n  function assetWithdraw(address payable, address, uint256) external;\\n\\n  function setRemote(uint240[] calldata, uint16[] calldata, address[] calldata) external;\\n  function setGasForDestinationLzReceive(uint256) external;\\n  function setCrossFee_d2(uint256) external;\\n\\n  function setFixedFactory(address) external;\\n  function setLinearFactory(address) external;\\n  function togglePause() external;\\n}\\n\"\r\n    },\r\n    \"contracts/vesting/FixedVestingV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {Initializable} from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport {PausableUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol';\\nimport {ReentrancyGuardUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol';\\nimport {ERC165} from '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\nimport {IERC20Metadata} from '@openzeppelin/contracts/interfaces/IERC20Metadata.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport {IFixedVestingFactoryV3} from '../interface/IFixedVestingFactoryV3.sol';\\nimport {IFixedVestingV3} from '../interface/IFixedVestingV3.sol';\\nimport {IVestingGateway} from '../interface/IVestingGateway.sol';\\n\\ncontract FixedVestingV3 is Initializable, PausableUpgradeable, ReentrancyGuardUpgradeable, ERC165, IFixedVestingV3 {\\n  using SafeERC20 for IERC20Metadata;\\n\\n  uint256 public override sold;\\n  uint256 public override tokenPrice; // Use stable decimal\\n  uint256 public override lastRefundAt; // epoch\\n\\n  Detail[] public override vestings;\\n  mapping(address => Bought) public override invoice;\\n\\n  RefundDetail[] internal refunds;\\n  mapping(address => uint256) internal refundIndex;\\n\\n  address[] public override buyers;\\n\\n  address public override token;\\n  address public override projectOwner;\\n  address public override stable;\\n\\n  IFixedVestingFactoryV3 public factory;\\n  ProjectPayment public override projectPayment;\\n  IVestingGateway public override vestingGateway;\\n\\n  struct ProjectPayment {\\n    uint256 tokenReturned;\\n    uint256 stablePaid;\\n    bool isPaid;\\n  }\\n\\n  struct Detail {\\n    uint256 datetime;\\n    uint256 ratio_d2;\\n  }\\n\\n  struct RefundDetail {\\n    address buyer;\\n    uint256 stableRefunded;\\n  }\\n\\n  struct Bought {\\n    uint128 buyerIndex;\\n    uint128 completed_d2; // in percent (2 decimal)\\n    uint256 purchased;\\n    uint256 claimed;\\n  }\\n\\n  error InvalidSender(address who);\\n\\n  event Claim(address buyer, uint256 completed_d2, uint256 purchased, uint256 claimed);\\n  event Refund(\\n    uint240 dstChainID,\\n    address buyer,\\n    uint256 completed_d2,\\n    uint256 purchased,\\n    uint256 claimed,\\n    uint256 stableRefunded\\n  );\\n  event PayToProject(uint240 dstChainID, address projectOwner, uint256 tokenReturned, uint256 stablePaid);\\n\\n  modifier onlyFactoryOwner() {\\n    if (_msgSender() != factory.owner()) revert InvalidSender(_msgSender());\\n    _;\\n  }\\n\\n  /**\\n   * @dev Initialize vesting token distribution\\n   * @param _token Token project address\\n   * @param _stable Stable token address\\n   * @param _tokenPrice Token price (in stable decimal)\\n   * @param _lastRefundAt Last datetime to refund (epoch)\\n   * @param _projectOwner Project owner address\\n   * @param _datetime Vesting datetime (epoch)\\n   * @param _ratio_d2 Vesting ratio in percent (decimal 2)\\n   */\\n  function init(\\n    address _token,\\n    address _stable,\\n    address _projectOwner,\\n    uint256 _tokenPrice,\\n    uint256 _lastRefundAt,\\n    uint256[] calldata _datetime,\\n    uint256[] calldata _ratio_d2\\n  ) external override initializer {\\n    factory = IFixedVestingFactoryV3(_msgSender());\\n    vestingGateway = IVestingGateway(factory.vestingGateway());\\n\\n    _setToken(_token);\\n    _setStable(_stable);\\n    _setTokenPrice(_tokenPrice);\\n    _setLastRefundAt(_lastRefundAt);\\n    _setProjectOwner(_projectOwner);\\n    _newVesting(_datetime, _ratio_d2);\\n  }\\n\\n  /**\\n   * @dev Calculate stable token amount have to be paid\\n   */\\n  function _calculateStableAmount(uint256 tokenAmount) internal view virtual returns (uint256) {\\n    return (tokenAmount * tokenPrice) / (10 ** IERC20Metadata(token).decimals());\\n  }\\n\\n  /**\\n   * @dev Set token project\\n   * @param _token Token project address\\n   */\\n  function _setToken(address _token) internal virtual {\\n    token = _token;\\n  }\\n\\n  /**\\n   * @dev Set stable project\\n   * @param _stable Stable project address\\n   */\\n  function _setStable(address _stable) internal virtual {\\n    require(factory.isStableSupported(_stable), '!stable');\\n    stable = _stable;\\n  }\\n\\n  /**\\n   * @dev Set last refund project\\n   * @param _lastRefundAt Last refund project\\n   */\\n  function _setLastRefundAt(uint256 _lastRefundAt) internal virtual {\\n    require(_lastRefundAt > block.timestamp, 'bad');\\n    lastRefundAt = _lastRefundAt;\\n  }\\n\\n  /**\\n   * @dev Set token pice project\\n   * @param _tokenPrice Token project address\\n   */\\n  function _setTokenPrice(uint256 _tokenPrice) internal virtual {\\n    require(_tokenPrice > 0, 'bad');\\n    tokenPrice = _tokenPrice;\\n  }\\n\\n  /**\\n   * @dev Set project owner to receive returned token & stable\\n   * @param _projectOwner Token project address\\n   */\\n  function _setProjectOwner(address _projectOwner) internal virtual {\\n    projectOwner = _projectOwner;\\n  }\\n\\n  /**\\n   * @dev Insert new vestings\\n   * @param _datetime Vesting datetime\\n   * @param _ratio_d2 Vesting ratio in percent (decimal 2)\\n   */\\n  function _newVesting(uint256[] calldata _datetime, uint256[] calldata _ratio_d2) internal virtual {\\n    require(_datetime.length == _ratio_d2.length, 'misslength');\\n\\n    if (vestingLength() == 0) vestings.push();\\n\\n    for (uint256 i = 0; i < _datetime.length; ++i) {\\n      if (i != _datetime.length - 1) require(_datetime[i] < _datetime[i + 1], 'bad');\\n      vestings.push(Detail(_datetime[i], _ratio_d2[i]));\\n    }\\n  }\\n\\n  function _sendStable(uint240 _dstChainID, address _buyer, uint256 _stablePaid) internal virtual {\\n    require(stable != address(0), '!stable');\\n    if (_dstChainID == uint240(block.chainid)) {\\n      IERC20Metadata(stable).safeTransfer(_buyer, _stablePaid);\\n    } else {\\n      require(vestingGateway.isChainIDSupported(_dstChainID), '!chainID');\\n      vestingGateway.releaseToken{value: msg.value}(_dstChainID, _buyer, stable, _stablePaid);\\n    }\\n  }\\n\\n  function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n    return _interfaceId == type(IFixedVestingV3).interfaceId || super.supportsInterface(_interfaceId);\\n  }\\n\\n  /**\\n   * @dev Get length of buyer\\n   */\\n  function buyerLength() external view virtual override returns (uint256 length) {\\n    length = buyers.length;\\n  }\\n\\n  /**\\n   * @dev Get length of vesting\\n   */\\n  function vestingLength() public view virtual override returns (uint256 length) {\\n    length = vestings.length;\\n    if (length > 0) length -= 1;\\n  }\\n\\n  /**\\n   * @dev Get length of buyer refund\\n   */\\n  function refundLength() public view virtual override returns (uint256 length) {\\n    length = refunds.length;\\n  }\\n\\n  /**\\n   * @dev Estimate cross chain fees\\n   */\\n  function estimateCrossFee(\\n    uint240 _dstChainID,\\n    address _user,\\n    uint256 _amount\\n  ) external view virtual override returns (uint256 fees, uint256 tax) {\\n    (fees, tax) = vestingGateway.estimateFees(_dstChainID, address(this), _user, stable, _amount);\\n  }\\n\\n  /**\\n   * @dev Get vesting runnning\\n   */\\n  function vestingRunning() public view virtual override returns (uint256 round, uint256 totalPercent_d2) {\\n    uint256 vestingSize = vestingLength();\\n    uint256 total;\\n    for (uint256 i = 1; i <= vestingSize; ++i) {\\n      Detail memory temp = vestings[i];\\n      total += temp.ratio_d2;\\n\\n      if (\\n        (i < vestingSize && temp.datetime <= block.timestamp && block.timestamp <= vestings[i + 1].datetime) ||\\n        (i == vestingSize && block.timestamp >= temp.datetime)\\n      ) {\\n        round = i;\\n        totalPercent_d2 = total;\\n        break;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Calculate total ratio\\n   */\\n  function totalRatio() public view virtual override returns (uint256 total) {\\n    uint256 vestingSize = vestingLength();\\n    for (uint256 i = 1; i <= vestingSize; ++i) {\\n      Detail memory temp = vestings[i];\\n      total += temp.ratio_d2;\\n    }\\n  }\\n\\n  function isRefunder(address _buyer) public view virtual override returns (uint256) {\\n    if (refundLength() == 0) return 0;\\n\\n    RefundDetail memory refundData = refunds[refundIndex[_buyer]];\\n    if (refundData.buyer != _buyer) return 0;\\n    return refundData.stableRefunded;\\n  }\\n\\n  function refundableAmount(address _buyer) public view virtual override returns (uint256) {\\n    Bought memory temp = invoice[_buyer];\\n\\n    if (\\n      block.timestamp > lastRefundAt || // expired\\n      token == address(0) || // token has not set yet\\n      tokenPrice == 0 || //\u00a0tokenPrice has not set yet\\n      totalRatio() != 10000 || // vesting ratio not equals to 100%\\n      temp.purchased == 0 || // purchase nothing\\n      temp.purchased == temp.claimed || // already claim all vesting\\n      isRefunder(_buyer) > 0 // already refund\\n    ) return 0;\\n\\n    uint256 tokenReturned = temp.purchased - temp.claimed;\\n    return _calculateStableAmount(tokenReturned);\\n  }\\n\\n  /**\\n   * @dev Token claim\\n   */\\n  function claimToken() external virtual override nonReentrant whenNotPaused {\\n    (uint256 round, uint256 totalPercent_d2) = vestingRunning();\\n\\n    address buyer = _msgSender();\\n    Bought memory temp = invoice[buyer];\\n\\n    require(round > 0 && token != address(0) && totalRatio() == 10000, 'bad');\\n    require(temp.purchased > 0, '!buyer');\\n    require(temp.completed_d2 < totalPercent_d2, 'claimed');\\n    require(isRefunder(buyer) == 0, 'refunded');\\n\\n    uint256 amountToClaim;\\n    if (temp.completed_d2 == 0) {\\n      amountToClaim = (temp.purchased * totalPercent_d2) / 10000;\\n    } else {\\n      amountToClaim = ((temp.claimed * totalPercent_d2) / temp.completed_d2) - temp.claimed;\\n    }\\n\\n    require(IERC20Metadata(token).balanceOf(address(this)) >= amountToClaim && amountToClaim > 0, 'insufficient');\\n\\n    uint256 claimAmount = temp.claimed + amountToClaim;\\n    invoice[buyer].claimed = claimAmount;\\n    invoice[buyer].completed_d2 = uint128(totalPercent_d2);\\n\\n    IERC20Metadata(token).safeTransfer(buyer, amountToClaim);\\n\\n    emit Claim(buyer, totalPercent_d2, temp.purchased, claimAmount);\\n  }\\n\\n  /**\\n   * @dev Token refund\\n   */\\n  function refund(uint240 _dstChainID) external payable virtual override nonReentrant whenNotPaused {\\n    address buyer = _msgSender();\\n    Bought memory temp = invoice[buyer];\\n\\n    uint256 stablePaid = refundableAmount(buyer);\\n    require(stablePaid > 0, '!refund');\\n\\n    refundIndex[buyer] = refunds.length;\\n    refunds.push(RefundDetail(buyer, stablePaid));\\n\\n    projectPayment.tokenReturned += (temp.purchased - temp.claimed);\\n    projectPayment.stablePaid -= stablePaid;\\n\\n    // refund stable\\n    _sendStable(_dstChainID, buyer, stablePaid);\\n\\n    emit Refund(_dstChainID, buyer, temp.completed_d2, temp.purchased, temp.claimed, stablePaid);\\n  }\\n\\n  /**\\n   * @dev Token payment to project owner\\n   */\\n  function payToProject(uint240 _dstChainID) external virtual override nonReentrant whenNotPaused {\\n    require(block.timestamp > lastRefundAt && totalRatio() == 10000, '!claimable');\\n\\n    address sender = _msgSender();\\n    if (sender != projectOwner) revert InvalidSender(sender);\\n\\n    ProjectPayment memory temp = projectPayment;\\n    require(!temp.isPaid, 'paid');\\n\\n    projectPayment.isPaid = true;\\n\\n    // return token\\n    if (temp.tokenReturned > 0) {\\n      require(token != address(0), '!token');\\n      IERC20Metadata(token).safeTransfer(sender, temp.tokenReturned);\\n    }\\n\\n    // pay stable if possible\\n    if (temp.stablePaid > 0) _sendStable(_dstChainID, sender, temp.stablePaid);\\n\\n    emit PayToProject(_dstChainID, sender, temp.tokenReturned, temp.stablePaid);\\n  }\\n\\n  /**\\n   * @dev Insert new vestings\\n   * @param _datetime Vesting datetime\\n   * @param _ratio_d2 Vesting ratio in percent (decimal 2)\\n   */\\n  function newVesting(\\n    uint256[] calldata _datetime,\\n    uint256[] calldata _ratio_d2\\n  ) external virtual override onlyFactoryOwner {\\n    _newVesting(_datetime, _ratio_d2);\\n  }\\n\\n  /**\\n   * @dev Update vestings datetime\\n   * @param _vestingRound Vesting round\\n   * @param _newDatetime new datetime in epoch\\n   */\\n  function updateVestingDatetimes(\\n    uint256[] calldata _vestingRound,\\n    uint256[] calldata _newDatetime\\n  ) external virtual override onlyFactoryOwner {\\n    uint256 vestingSize = vestingLength();\\n\\n    require(_vestingRound.length == _newDatetime.length && _vestingRound.length <= vestingSize, 'misslength');\\n\\n    (uint256 round, ) = vestingRunning();\\n\\n    for (uint256 i = 0; i < _vestingRound.length; ++i) {\\n      if (_vestingRound[i] > vestingSize || round >= _vestingRound[i]) continue;\\n\\n      vestings[_vestingRound[i]].datetime = _newDatetime[i];\\n    }\\n  }\\n\\n  /**\\n   * @dev Update vestings ratio\\n   * @param _vestingRound Vesting round\\n   * @param _newRatio_d2 New ratio in percent (decimal 2)\\n   */\\n  function updateVestingRatios(\\n    uint256[] calldata _vestingRound,\\n    uint256[] calldata _newRatio_d2\\n  ) external virtual override onlyFactoryOwner {\\n    uint256 vestingSize = vestingLength();\\n    require(_vestingRound.length == _newRatio_d2.length && _vestingRound.length <= vestingSize, 'misslength');\\n\\n    (uint256 round, ) = vestingRunning();\\n\\n    for (uint256 i = 0; i < _vestingRound.length; ++i) {\\n      if (_vestingRound[i] > vestingSize || round >= _vestingRound[i]) continue;\\n\\n      vestings[_vestingRound[i]].ratio_d2 = _newRatio_d2[i];\\n    }\\n  }\\n\\n  /**\\n   * @dev Remove last vesting round\\n   */\\n  function removeLastVestingRound() external virtual override onlyFactoryOwner {\\n    vestings.pop();\\n  }\\n\\n  /**\\n   * @dev Insert new buyers & purchases\\n   * @param _buyer Buyer address\\n   * @param _purchased Buyer purchase\\n   */\\n  function newBuyers(\\n    address[] calldata _buyer,\\n    uint256[] calldata _purchased\\n  ) external virtual override onlyFactoryOwner {\\n    require(_buyer.length == _purchased.length && token != address(0) && tokenPrice > 0, 'misslength');\\n\\n    uint256 soldTemp = sold;\\n    for (uint128 i = 0; i < _buyer.length; ++i) {\\n      if (_buyer[i] == address(0) || _purchased[i] == 0) continue;\\n\\n      Bought memory temp = invoice[_buyer[i]];\\n\\n      if (temp.purchased == 0) {\\n        invoice[_buyer[i]].buyerIndex = uint128(buyers.length);\\n        buyers.push(_buyer[i]);\\n      }\\n\\n      invoice[_buyer[i]].purchased = temp.purchased + _purchased[i];\\n      soldTemp += _purchased[i];\\n    }\\n\\n    sold = soldTemp;\\n    projectPayment.stablePaid = _calculateStableAmount(soldTemp);\\n  }\\n\\n  /**\\n   * @dev Replace buyers address\\n   * @param _oldBuyer Old address\\n   * @param _newBuyer New purchase\\n   */\\n  function replaceBuyers(\\n    address[] calldata _oldBuyer,\\n    address[] calldata _newBuyer\\n  ) external virtual override onlyFactoryOwner {\\n    require(_oldBuyer.length == _newBuyer.length && buyers.length > 0, 'misslength');\\n\\n    for (uint128 i = 0; i < _oldBuyer.length; ++i) {\\n      Bought memory temp = invoice[_oldBuyer[i]];\\n\\n      if (temp.purchased == 0 || _oldBuyer[i] == address(0) || _newBuyer[i] == address(0)) continue;\\n\\n      buyers[temp.buyerIndex] = _newBuyer[i];\\n      invoice[_newBuyer[i]] = temp;\\n      delete invoice[_oldBuyer[i]];\\n\\n      uint256 refundOldBuyerIndex = refundIndex[_oldBuyer[i]];\\n      if (refunds.length == 0 || (refunds.length > 0 && refunds[refundOldBuyerIndex].buyer != _oldBuyer[i])) continue;\\n\\n      refunds[refundOldBuyerIndex].buyer = _newBuyer[i];\\n      refundIndex[_newBuyer[i]] = refundOldBuyerIndex;\\n      delete refundIndex[_oldBuyer[i]];\\n    }\\n  }\\n\\n  /**\\n   * @dev Remove buyers\\n   * @param _buyer Buyer address\\n   */\\n  function removeBuyers(address[] calldata _buyer) external virtual override onlyFactoryOwner {\\n    require(buyers.length > 0 && token != address(0) && tokenPrice > 0, 'bad');\\n\\n    uint256 soldTemp = sold;\\n    for (uint128 i = 0; i < _buyer.length; ++i) {\\n      Bought memory temp = invoice[_buyer[i]];\\n\\n      if (temp.purchased == 0 || _buyer[i] == address(0)) continue;\\n\\n      soldTemp -= temp.purchased;\\n\\n      address addressToMove = buyers[buyers.length - 1];\\n\\n      buyers[temp.buyerIndex] = addressToMove;\\n      invoice[addressToMove].buyerIndex = temp.buyerIndex;\\n\\n      buyers.pop();\\n      delete invoice[_buyer[i]];\\n    }\\n\\n    sold = soldTemp;\\n    projectPayment.stablePaid = _calculateStableAmount(soldTemp);\\n  }\\n\\n  /**\\n   * @dev Replace buyers purchase\\n   * @param _buyer Buyer address\\n   * @param _newPurchased new purchased\\n   */\\n  function replacePurchases(\\n    address[] calldata _buyer,\\n    uint256[] calldata _newPurchased\\n  ) external virtual override onlyFactoryOwner {\\n    require(\\n      _buyer.length == _newPurchased.length && buyers.length > 0 && token != address(0) && tokenPrice > 0,\\n      'misslength'\\n    );\\n\\n    uint256 soldTemp = sold;\\n    for (uint128 i = 0; i < _buyer.length; ++i) {\\n      Bought memory temp = invoice[_buyer[i]];\\n\\n      if (temp.purchased == 0 || temp.completed_d2 > 0 || _buyer[i] == address(0) || _newPurchased[i] == 0) continue;\\n\\n      soldTemp = soldTemp - temp.purchased + _newPurchased[i];\\n      invoice[_buyer[i]].purchased = _newPurchased[i];\\n    }\\n\\n    sold = soldTemp;\\n    projectPayment.stablePaid = _calculateStableAmount(soldTemp);\\n  }\\n\\n  /**\\n   * @dev Set token price project\\n   * @dev If refund is done on another chain, use 18 as default decimal\\n   * @dev Otherwise, use stable decimal\\n   * @param _tokenPrice Token project address\\n   */\\n  function setTokenPrice(uint256 _tokenPrice) external virtual override onlyFactoryOwner {\\n    _setTokenPrice(_tokenPrice);\\n  }\\n\\n  /**\\n   * @dev Set stable project\\n   * @param _stable Token project address\\n   */\\n  function setStable(address _stable) external virtual override onlyFactoryOwner {\\n    _setStable(_stable);\\n  }\\n\\n  /**\\n   * @dev Set lastRefundAt project\\n   * @param _lastRefundAt Last refund project address\\n   */\\n  function setLastRefundAt(uint256 _lastRefundAt) external virtual override onlyFactoryOwner {\\n    _setLastRefundAt(_lastRefundAt);\\n  }\\n\\n  /**\\n   * @dev Set token project\\n   * @param _token Token project address\\n   */\\n  function setToken(address _token) external virtual override onlyFactoryOwner {\\n    require(_token != address(0), 'bad');\\n    _setToken(_token);\\n  }\\n\\n  /**\\n   * @dev Set project owner to receive returned token & stable\\n   * @param _projectOwner Token project address\\n   */\\n  function setProjectOwner(address _projectOwner) external virtual override onlyFactoryOwner {\\n    require(_projectOwner != address(0), 'bad');\\n    _setProjectOwner(_projectOwner);\\n  }\\n\\n  /**\\n   * @dev Emergency condition to withdraw any token\\n   * @param _token Token address\\n   * @param _target Target address\\n   * @param _amount Amount to withdraw\\n   */\\n  function emergencyWithdraw(\\n    address _token,\\n    address _target,\\n    uint256 _amount\\n  ) external virtual override nonReentrant onlyFactoryOwner {\\n    require(_target != address(0), 'bad');\\n\\n    uint256 contractBalance = uint256(IERC20Metadata(_token).balanceOf(address(this)));\\n    if (_amount > contractBalance) _amount = contractBalance;\\n\\n    IERC20Metadata(_token).safeTransfer(_target, _amount);\\n  }\\n\\n  /**\\n   * @dev Pause vesting activity\\n   */\\n  function togglePause() external virtual override onlyFactoryOwner {\\n    if (paused()) {\\n      _unpause();\\n    } else {\\n      _pause();\\n    }\\n  }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"InvalidSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"completed_d2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint240\",\"name\":\"dstChainID\",\"type\":\"uint240\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"projectOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenReturned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stablePaid\",\"type\":\"uint256\"}],\"name\":\"PayToProject\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint240\",\"name\":\"dstChainID\",\"type\":\"uint240\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"completed_d2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableRefunded\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"buyerLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint240\",\"name\":\"_dstChainID\",\"type\":\"uint240\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"estimateCrossFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IFixedVestingFactoryV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_projectOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastRefundAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_datetime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ratio_d2\",\"type\":\"uint256[]\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"invoice\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"buyerIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"completed_d2\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"isRefunder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRefundAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_buyer\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_purchased\",\"type\":\"uint256[]\"}],\"name\":\"newBuyers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_datetime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ratio_d2\",\"type\":\"uint256[]\"}],\"name\":\"newVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint240\",\"name\":\"_dstChainID\",\"type\":\"uint240\"}],\"name\":\"payToProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenReturned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stablePaid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPaid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint240\",\"name\":\"_dstChainID\",\"type\":\"uint240\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"refundableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_buyer\",\"type\":\"address[]\"}],\"name\":\"removeBuyers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLastVestingRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_oldBuyer\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_newBuyer\",\"type\":\"address[]\"}],\"name\":\"replaceBuyers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_buyer\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_newPurchased\",\"type\":\"uint256[]\"}],\"name\":\"replacePurchases\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lastRefundAt\",\"type\":\"uint256\"}],\"name\":\"setLastRefundAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_projectOwner\",\"type\":\"address\"}],\"name\":\"setProjectOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stable\",\"type\":\"address\"}],\"name\":\"setStable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_vestingRound\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_newDatetime\",\"type\":\"uint256[]\"}],\"name\":\"updateVestingDatetimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_vestingRound\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_newRatio_d2\",\"type\":\"uint256[]\"}],\"name\":\"updateVestingRatios\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingGateway\",\"outputs\":[{\"internalType\":\"contract IVestingGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingRunning\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPercent_d2\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"datetime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio_d2\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FixedVestingV3", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}