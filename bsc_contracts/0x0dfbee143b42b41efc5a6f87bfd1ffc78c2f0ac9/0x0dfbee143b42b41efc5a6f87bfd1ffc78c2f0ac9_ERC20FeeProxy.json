{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/contracts/ERC20FeeProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC20FeeProxy\\n * @notice This contract performs an ERC20 token transfer, with a Fee sent to a third address and stores a reference\\n */\\ncontract ERC20FeeProxy {\\n  // Event to declare a transfer with a reference\\n  event TransferWithReferenceAndFee(\\n    address tokenAddress,\\n    address to,\\n    uint256 amount,\\n    bytes indexed paymentReference,\\n    uint256 feeAmount,\\n    address feeAddress\\n  );\\n\\n  // Fallback function returns funds to the sender\\n  receive() external payable {\\n    revert(\\\"not payable receive\\\");\\n  }\\n\\n  /**\\n    * @notice Performs a ERC20 token transfer with a reference\\n              and a transfer to a second address for the payment of a fee\\n    * @param _tokenAddress Address of the ERC20 token smart contract\\n    * @param _to Transfer recipient\\n    * @param _amount Amount to transfer\\n    * @param _paymentReference Reference of the payment related\\n    * @param _feeAmount The amount of the payment fee\\n    * @param _feeAddress The fee recipient\\n    */\\n  function transferFromWithReferenceAndFee(\\n    address _tokenAddress,\\n    address _to,\\n    uint256 _amount,\\n    bytes calldata _paymentReference,\\n    uint256 _feeAmount,\\n    address _feeAddress\\n    ) external\\n    {\\n    require(safeTransferFrom(_tokenAddress, _to, _amount), \\\"payment transferFrom() failed\\\");\\n    if (_feeAmount > 0 && _feeAddress != address(0)) {\\n      require(safeTransferFrom(_tokenAddress, _feeAddress, _feeAmount), \\\"fee transferFrom() failed\\\");\\n    }\\n    emit TransferWithReferenceAndFee(\\n      _tokenAddress,\\n      _to,\\n      _amount,\\n      _paymentReference,\\n      _feeAmount,\\n      _feeAddress\\n    );\\n  }\\n\\n  /**\\n   * @notice Call transferFrom ERC20 function and validates the return data of a ERC20 contract call.\\n   * @dev This is necessary because of non-standard ERC20 tokens that don't have a return value.\\n   * @return result The return value of the ERC20 call, returning true for non-standard tokens\\n   */\\n  function safeTransferFrom(address _tokenAddress, address _to, uint256 _amount) internal returns (bool result) {\\n    /* solium-disable security/no-inline-assembly */\\n    // check if the address is a contract\\n    assembly {\\n      if iszero(extcodesize(_tokenAddress)) { revert(0, 0) }\\n    }\\n    \\n    // solium-disable-next-line security/no-low-level-calls\\n    (bool success, ) = _tokenAddress.call(abi.encodeWithSignature(\\n      \\\"transferFrom(address,address,uint256)\\\",\\n      msg.sender,\\n      _to,\\n      _amount\\n    ));\\n\\n    assembly {\\n        switch returndatasize()\\n        case 0 { // not a standard erc20\\n            result := 1\\n        }\\n        case 32 { // standard erc20\\n            returndatacopy(0, 0, 32)\\n            result := mload(0)\\n        }\\n        default { // anything else, should revert for safety\\n            revert(0, 0)\\n        }\\n    }\\n\\n    require(success, \\\"transferFrom() has been reverted\\\");\\n\\n    /* solium-enable security/no-inline-assembly */\\n    return result;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"paymentReference\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeAddress\",\"type\":\"address\"}],\"name\":\"TransferWithReferenceAndFee\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_paymentReference\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"transferFromWithReferenceAndFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ERC20FeeProxy", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}