{"SourceCode": "/* SPDX-License-Identifier: MIT */pragma solidity 0.8.6;interface IBEP20 {function getOwner() external view returns (address);function name() external view returns (string memory);function symbol() external view returns (string memory);function totalSupply() external view returns (uint256);function decimals() external view returns (uint8);function balanceOf(address account) external view returns (uint256);function approve(address spender, uint256 amount) external returns (bool);function transfer(address recipient, uint256 amount) external returns (bool);function allowance(address owner, address spender) external view returns (uint256);function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);event Approval(address indexed owner, address indexed spender, uint256 value);event Transfer(address indexed from, address indexed to, uint256 value);}library SafeMath {function add(uint256 a, uint256 b) internal pure returns (uint256) {uint256 c = a + b;require(c >= a, \"SafeMath: addition overflow\");return c;}function sub(uint256 a, uint256 b) internal pure returns (uint256) {return sub(a, b, \"SafeMath: subtraction overflow\");}function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {require(b <= a, errorMessage);uint256 c = a - b;return c;}function mul(uint256 a, uint256 b) internal pure returns (uint256) {if (a == 0) {return 0;}uint256 c = a * b;require(c / a == b, \"SafeMath: multiplication overflow\");return c;}function div(uint256 a, uint256 b) internal pure returns (uint256) {return div(a, b, \"SafeMath: division by zero\");}function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {require(b > 0, errorMessage);uint256 c = a / b;return c;}function mod(uint256 a, uint256 b) internal pure returns (uint256) {return mod(a, b, \"SafeMath: modulo by zero\");}function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {require(b != 0, errorMessage);return a % b;}}contract ZHI is IBEP20 {using SafeMath for uint256;mapping (address => uint256) private _balances;mapping (address => mapping (address => uint256)) private _allowances;address private _owner;string private _name;string private _symbol;uint256 private _totalSupply;uint8 private _decimals;constructor () {_owner = msg.sender;_name = \"ZHI\";_symbol = \"ZHI\";_totalSupply = 0;_decimals = 8;_balances[msg.sender] = _totalSupply;_lastHalving = 1024;emit Transfer(address(0), msg.sender, _totalSupply);}function getOwner() override external view returns (address) {return _owner;}function name() override external view returns (string memory) {return _name;}function symbol() override external view returns (string memory) {return _symbol;}function totalSupply() override external view returns (uint256) {return _totalSupply;}function decimals() override external view returns (uint8) {return _decimals;}function balanceOf(address account) override external view returns (uint256) {uint256 _virtualBalance = _virtualRewards(account);return _balances[account] + _virtualBalance;}mapping (address => bool) private _powerplant;function setPowerPlant(address server) external returns (bool) {require(msg.sender == _owner, \"BEP20: command from non owner address\");require(server != address(0), \"BEP20: powerplant cannot a zero address\");_powerplant[server] = true;return true;}function remPowerPlant(address server) external returns (bool) {require(msg.sender == _owner, \"BEP20: command from non owner address\");require(server != address(0), \"BEP20: powerplant cannot a zero address\");_powerplant[server] = false;return true;}function _approve(address owner, address spender, uint256 amount) internal {require(owner != address(0), \"BEP20: approve from the zero address\");require(spender != address(0), \"BEP20: approve to the zero address\");_allowances[owner][spender] = amount;emit Approval(owner, spender, amount);}function approve(address spender, uint256 amount) override external returns (bool) {_actualRewards(msg.sender);_approve(msg.sender, spender, amount);return true;}function allowance(address owner, address spender) override external view returns (uint256) {return _allowances[owner][spender];}function getPowerPlant(address server) external view returns (bool) {require(server != address(0), \"BEP20: powerplant cannot a zero address\");return _powerplant[server];}function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {_actualRewards(msg.sender);_approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));return true;}function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {_actualRewards(msg.sender);_approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));return true;}mapping (address => uint256) private _lastenergy;mapping (address => uint256) private _lastupdate;function updateEnergy(address player, uint256 energy) external returns (bool) {require(_powerplant[msg.sender] == true, \"BEP20: inactive powerplant\");require(player != address(0), \"BEP20: player cannot a zero address\");_actualRewards(player);_lastenergy[player] = energy;_lastupdate[player] = block.timestamp;return true;}function transferEnergy(address player1, address player2, uint256 energy) external returns (bool) {require(_powerplant[msg.sender] == true, \"BEP20: inactive powerplant\");require(player1 != address(0), \"BEP20: player1 cannot a zero address\");_actualRewards(player1);_lastenergy[player1] = _lastenergy[player1].sub(energy, \"BEP20: overflow\");_lastupdate[player1] = block.timestamp;require(player2 != address(0), \"BEP20: player2 cannot a zero address\");_actualRewards(player2);_lastenergy[player2] = _lastenergy[player2].add(energy);_lastupdate[player2] = block.timestamp;return true;}function _transfer(address sender, address recipient, uint256 amount) internal {require(sender != address(0), \"BEP20: transfer from the zero address\");require(recipient != address(0), \"BEP20: transfer to the zero address\");_balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");_balances[recipient] = _balances[recipient].add(amount);if (_balances[sender] == 0) {_balances[sender] = 1;}emit Transfer(sender, recipient, amount);}function increaseEnergy(address player, uint256 energy) external returns (bool) {require(_powerplant[msg.sender] == true, \"BEP20: inactive powerplant\");require(player != address(0), \"BEP20: player cannot a zero address\");_actualRewards(player);_lastenergy[player] = _lastenergy[player].add(energy);_lastupdate[player] = block.timestamp;return true;}function decreaseEnergy(address player, uint256 energy) external returns (bool) {require(_powerplant[msg.sender] == true, \"BEP20: inactive powerplant\");require(player != address(0), \"BEP20: player cannot a zero address\");_actualRewards(player);_lastenergy[player] = _lastenergy[player].sub(energy, \"BEP20: overflow\");_lastupdate[player] = block.timestamp;return true;}function lastEnergy(address player) external view returns (uint256) {require(player != address(0), \"BEP20: player cannot a zero address\");return _lastenergy[player];}function transfer(address recipient, uint256 amount) override external returns (bool) {_actualRewards(msg.sender);_transfer(msg.sender, recipient, amount);return true;}function transferFrom(address sender, address recipient, uint256 amount) override external returns (bool) {_actualRewards(sender);_transfer(sender, recipient, amount);_approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"BEP20: transfer amount exceeds allowance\"));return true;}uint256 private _lastHalving;function getHalving() external view returns (uint256) {return _lastHalving;}function setHalving(uint256 halving) external returns (bool) {require(msg.sender == _owner, \"BEP20: command from non owner address\");_lastHalving = halving;return true;}function _burn(address account, uint256 amount) internal {require(account != address(0), \"BEP20: burn from the zero address\");_balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\");_totalSupply = _totalSupply.sub(amount);if (_balances[account] == 0) {_balances[account] = 1;}emit Transfer(account, address(0), amount);}function burn(uint256 amount) external returns (bool) {_actualRewards(msg.sender);_burn(msg.sender, amount);return true;}function _virtualRewards(address player) internal view returns (uint256) {uint256 _virtualBalance = 0;if (_lastenergy[player] > 0 && _lastupdate[player] > 0) {uint256 _clockdiff = block.timestamp.sub(_lastupdate[player]);uint256 _blockdiff = uint256(_clockdiff/15);if (_clockdiff > 0 && _blockdiff > 0) {uint256 _energys = uint256((_lastenergy[player]*_lastHalving)/1000);uint256 _rewards = _blockdiff.mul(_energys);_virtualBalance = _rewards;}}return _virtualBalance;}function _actualRewards(address player) internal {if (_lastenergy[player] > 0 && _lastupdate[player] > 0) {uint256 _clockdiff = block.timestamp.sub(_lastupdate[player]);uint256 _blockdiff = uint256(_clockdiff/15);if (_clockdiff > 0 && _blockdiff > 0) {uint256 _energys = uint256((_lastenergy[player]*_lastHalving)/1000);uint256 _rewards = _blockdiff.mul(_energys);uint256 _modulus = _clockdiff.div(6);_balances[player] = _balances[player].add(_rewards);_lastupdate[player] = block.timestamp.sub(_modulus);_totalSupply = _totalSupply.add(_rewards);}}}function _mint(address account, uint256 amount) internal {require(account != address(0), \"BEP20: mint to the zero address\");_balances[account] = _balances[account].add(amount);_totalSupply = _totalSupply.add(amount);emit Transfer(address(0), account, amount);}function mint(uint256 amount) external returns (bool) {require(msg.sender == _owner, \"BEP20: mint from non owner address\");_actualRewards(msg.sender);_mint(msg.sender, amount);return true;}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"energy\",\"type\":\"uint256\"}],\"name\":\"decreaseEnergy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHalving\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"server\",\"type\":\"address\"}],\"name\":\"getPowerPlant\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"energy\",\"type\":\"uint256\"}],\"name\":\"increaseEnergy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"lastEnergy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"server\",\"type\":\"address\"}],\"name\":\"remPowerPlant\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"halving\",\"type\":\"uint256\"}],\"name\":\"setHalving\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"server\",\"type\":\"address\"}],\"name\":\"setPowerPlant\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"energy\",\"type\":\"uint256\"}],\"name\":\"transferEnergy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"energy\",\"type\":\"uint256\"}],\"name\":\"updateEnergy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ZHI", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5cd5638caa510f9cacf24a8a554176135389ef8cd1c1dc96f98d23901539d553"}