{"SourceCode": "// File: contracts\\libs\\ReentrancyGuard.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts\\libs\\IERC20.sol\r\n\r\npragma solidity >=0.4.0;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the erc20 token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts\\libs\\SafeMath.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts\\libs\\Address.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\libs\\SafeERC20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeERC20: decreased allowance below zero\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\libs\\IUniswapAmm.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: contracts\\libs\\Context.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts\\libs\\Ownable.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts\\libs\\ERC20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-ERC20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory tokenName, string memory tokenSymbol) {\r\n        _name = tokenName;\r\n        _symbol = tokenSymbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external override view returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() public override view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() public override view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() public override view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public virtual override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public virtual override view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public override view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\")\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {ERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {ERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(\r\n            account,\r\n            _msgSender(),\r\n            _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\")\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts\\LiquidifyHelper.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract LiquidifyHelper is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address public _token0;\r\n    address public _token1;\r\n\r\n    IUniswapV2Router02 public _swapRouter;\r\n\r\n    constructor() {\r\n        _swapRouter = IUniswapV2Router02(\r\n            address(0x10ED43C718714eb63d5aA57B78B54704E256024E)\r\n        );\r\n    }\r\n\r\n    function setSwapRouter(address newSwapRouter) external onlyOwner {\r\n        require(newSwapRouter != address(0), \"Invalid swap router\");\r\n        _swapRouter = IUniswapV2Router02(newSwapRouter);\r\n    }\r\n\r\n    function setTokenPair(address token0, address token1) external onlyOwner {\r\n        IERC20(token0).balanceOf(address(this));\r\n        IERC20(token1).balanceOf(address(this));\r\n        _token0 = token0;\r\n        _token1 = token1;\r\n    }\r\n\r\n    //to recieve ETH from swapRouter when swaping\r\n    receive() external payable {}\r\n\r\n    function liquifyAndBurn() external onlyOwner {\r\n        uint256 token0Amount = IERC20(_token0).balanceOf(address(this));\r\n        uint256 token1Amount = IERC20(_token1).balanceOf(address(this));\r\n        if (token0Amount > 0 && token1Amount > 0) {\r\n            addLiquidityAndBurn(token0Amount, token1Amount);\r\n        }\r\n    }\r\n\r\n    function addLiquidityAndBurn(uint256 token0Amount, uint256 token1Amount)\r\n        internal\r\n    {\r\n        require(_token0 != address(0), \"Invalid token 0\");\r\n        require(_token1 != address(0), \"Invalid token 1\");\r\n\r\n        // approve token transfer to cover all possible scenarios\r\n        IERC20(_token0).approve(address(_swapRouter), token0Amount);\r\n        IERC20(_token1).approve(address(_swapRouter), token1Amount);\r\n\r\n        // add the liquidity\r\n        _swapRouter.addLiquidity(\r\n            _token0,\r\n            _token1,\r\n            token0Amount,\r\n            token1Amount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            DEAD,\r\n            block.timestamp.add(300)\r\n        );\r\n    }\r\n\r\n    function recoverToken(address tokenAddress, uint256 tokenAmount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        // do not allow recovering self token\r\n        require(tokenAddress != address(this), \"Self withdraw\");\r\n        IERC20(tokenAddress).transfer(owner(), tokenAmount);\r\n    }\r\n}\r\n\r\n// File: contracts\\HearnToken.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\ncontract HearnToken is ERC20(\"HEARN\", \"HEARN\") {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address constant ZERO = address(0);\r\n    address constant BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n    \r\n    uint16 public MaxLiqFee = 3000; // 30% max\r\n    uint16 public MaxMarketingFee = 3000; // 30% max\r\n\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _isExcludedFromAntiBot;\r\n\r\n    uint256 public constant MAX_TX_AMOUNT_MIN_LIMIT = 1 ether;\r\n    uint256 public constant MAX_WALLET_AMOUNT_MIN_LIMIT = 100 ether;\r\n    uint256 public _maxTxAmount = 10000 ether;\r\n    uint256 public _maxWalletAmount = 100000 ether;\r\n\r\n    uint16 public _liquidityFee = 1000; // Fee for Liquidity\r\n    uint16 public _marketingFee = 1000; // Fee for Marketing\r\n\r\n    IUniswapV2Router02 public _swapRouter;\r\n    address public _hearnBnbPair;\r\n    address public _hearnBusdPair;\r\n\r\n    address public _marketingWallet;\r\n    address private _operator;\r\n\r\n    bool _inSwapAndLiquify;\r\n    bool public _swapAndLiquifyEnabled = true;\r\n\r\n    uint256 public _numTokensSellToAddToLiquidity = 1000 ether;\r\n\r\n    LiquidifyHelper public _liquidifyHelper;\r\n\r\n    event OperatorTransferred(\r\n        address indexed previousOperator,\r\n        address indexed newOperator\r\n    );\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event LiquifyAndBurned(\r\n        uint256 tokensSwapped,\r\n        uint256 busdReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    event MarketingFeeTrasferred(\r\n        address indexed marketingWallet,\r\n        uint256 tokensSwapped,\r\n        uint256 busdAmount\r\n    );\r\n\r\n    modifier lockTheSwap() {\r\n        _inSwapAndLiquify = true;\r\n        _;\r\n        _inSwapAndLiquify = false;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(\r\n            operator() == _msgSender(),\r\n            \"HEARN: caller is not the operator\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor() payable {\r\n        _marketingWallet = _msgSender();\r\n        _operator = _msgSender();\r\n\r\n        _swapRouter = IUniswapV2Router02(\r\n            address(0x10ED43C718714eb63d5aA57B78B54704E256024E)\r\n        );\r\n        // Create a uniswap pair for this new token\r\n        _hearnBnbPair = IUniswapV2Factory(_swapRouter.factory()).createPair(\r\n            address(this),\r\n            _swapRouter.WETH()\r\n        );\r\n        _hearnBusdPair = IUniswapV2Factory(_swapRouter.factory()).createPair(\r\n            address(this),\r\n            BUSD\r\n        );\r\n\r\n        _isExcludedFromFee[_msgSender()] = true;\r\n        _isExcludedFromFee[DEAD] = true;\r\n        _isExcludedFromFee[ZERO] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        _isExcludedFromAntiBot[_msgSender()] = true;\r\n        _isExcludedFromAntiBot[DEAD] = true;\r\n        _isExcludedFromAntiBot[ZERO] = true;\r\n        _isExcludedFromAntiBot[address(this)] = true;\r\n        _isExcludedFromAntiBot[address(_swapRouter)] = true;\r\n        _isExcludedFromAntiBot[address(_hearnBnbPair)] = true;\r\n        _isExcludedFromAntiBot[address(_hearnBusdPair)] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens and assigns them to `to`, increasing\r\n     * the total supply.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `msg.sender` must be the token operator\r\n     */\r\n    function mint(address to, uint256 amount)\r\n        external\r\n        onlyOperator\r\n        returns (bool)\r\n    {\r\n        _mint(to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\r\n     * the total supply.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `msg.sender` must be the token operator\r\n     */\r\n    function mint(uint256 amount) external onlyOperator returns (bool) {\r\n        _mint(_msgSender(), amount);\r\n        return true;\r\n    }\r\n\r\n    function operator() public view virtual returns (address) {\r\n        return _operator;\r\n    }\r\n\r\n    function transferOperator(address newOperator) public virtual onlyOperator {\r\n        require(\r\n            newOperator != address(0),\r\n            \"HEARN: new operator is the zero address\"\r\n        );\r\n        emit OperatorTransferred(_operator, newOperator);\r\n        _operator = newOperator;\r\n        // Exclude new operator from anti bot and fee\r\n        _isExcludedFromAntiBot[_operator] = true;\r\n        _isExcludedFromFee[_operator] = true;\r\n    }\r\n\r\n    function excludeFromFee(address account) external onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) external onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function excludeFromAntiBot(address account) external onlyOwner {\r\n        _isExcludedFromAntiBot[account] = true;\r\n    }\r\n\r\n    function includeInAntiBot(address account) external onlyOwner {\r\n        _isExcludedFromAntiBot[account] = false;\r\n    }\r\n\r\n    function setAntiBotConfiguration(\r\n        uint256 maxTxAmount,\r\n        uint256 maxWalletAmount\r\n    ) external onlyOwner {\r\n        require(\r\n            maxTxAmount >= MAX_TX_AMOUNT_MIN_LIMIT,\r\n            \"Max tx amount too small\"\r\n        );\r\n        require(\r\n            maxWalletAmount >= MAX_WALLET_AMOUNT_MIN_LIMIT,\r\n            \"Max wallet amount too small\"\r\n        );\r\n        _maxTxAmount = maxTxAmount;\r\n        _maxWalletAmount = maxWalletAmount;\r\n    }\r\n\r\n    function setAllFeePercent(uint16 liquidityFee, uint16 marketingFee)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(liquidityFee <= MaxLiqFee, \"Liquidity fee overflow\");\r\n        require(marketingFee <= MaxMarketingFee, \"Buyback fee overflow\");\r\n        _liquidityFee = liquidityFee;\r\n        _marketingFee = marketingFee;\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        _swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function setMarketingWallet(address newMarketingWallet) external onlyOwner {\r\n        require(newMarketingWallet != address(0), \"ZERO ADDRESS\");\r\n        _marketingWallet = newMarketingWallet;\r\n    }\r\n\r\n    function setLiquidifyHelper(LiquidifyHelper newLiquidifyHelper)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            address(newLiquidifyHelper) != address(0),\r\n            \"Invalid liquidify helper\"\r\n        );\r\n\r\n        // Include old liquidify helper into anti bot\r\n        if (address(_liquidifyHelper) != address(0)) {\r\n            _isExcludedFromAntiBot[address(_liquidifyHelper)] = false;\r\n        }\r\n        _liquidifyHelper = newLiquidifyHelper;\r\n        // Exclude new liquidify helper from anti bot\r\n        _isExcludedFromAntiBot[address(_liquidifyHelper)] = true;\r\n    }\r\n\r\n    function setSwapRouter(address newSwapRouter) external onlyOwner {\r\n        require(newSwapRouter != address(0), \"Invalid swap router\");\r\n\r\n        // Include old router and pairs into anti bot\r\n        _isExcludedFromAntiBot[address(_swapRouter)] = false;\r\n        _isExcludedFromAntiBot[address(_hearnBnbPair)] = false;\r\n        _isExcludedFromAntiBot[address(_hearnBusdPair)] = false;\r\n\r\n        _swapRouter = IUniswapV2Router02(newSwapRouter);\r\n        _liquidifyHelper.setSwapRouter(newSwapRouter);\r\n\r\n        // Create a uniswap pair for this new token\r\n        _hearnBnbPair = IUniswapV2Factory(_swapRouter.factory()).createPair(\r\n            address(this),\r\n            _swapRouter.WETH()\r\n        );\r\n        _hearnBusdPair = IUniswapV2Factory(_swapRouter.factory()).createPair(\r\n            address(this),\r\n            BUSD\r\n        );\r\n\r\n        // Exclude new router and pairs from anti bot\r\n        _isExcludedFromAntiBot[address(_swapRouter)] = false;\r\n        _isExcludedFromAntiBot[address(_hearnBnbPair)] = false;\r\n        _isExcludedFromAntiBot[address(_hearnBusdPair)] = false;\r\n    }\r\n\r\n    function setNumTokensSellToAddToLiquidity(\r\n        uint256 numTokensSellToAddToLiquidity\r\n    ) external onlyOwner {\r\n        require(numTokensSellToAddToLiquidity > 0, \"Invalid input\");\r\n        _numTokensSellToAddToLiquidity = numTokensSellToAddToLiquidity;\r\n    }\r\n\r\n    //to recieve ETH from swapRouter when swaping\r\n    receive() external payable {}\r\n\r\n    function isExcludedFromFee(address account) external view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function isExcludedFromAntiBot(address account)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _isExcludedFromAntiBot[account];\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from zero address\");\r\n        require(to != address(0), \"ERC20: transfer to zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if (!_isExcludedFromAntiBot[from]) {\r\n            require(amount <= _maxTxAmount, \"Too many tokens are going to transferred\");\r\n        }\r\n        if (!_isExcludedFromAntiBot[to]) {\r\n            require(balanceOf(to).add(amount) <= _maxWalletAmount, \"Too many tokens are going to be stored in target account\");\r\n        }\r\n\r\n        // is the token balance of this contract address over the min number of\r\n        // tokens that we need to initiate a swap + liquidity lock?\r\n        // also, don't get caught in a circular liquidity event.\r\n        // also, don't swap & liquify if sender is uniswap pair.\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool tokenBeingSold = to == _hearnBnbPair || to == _hearnBusdPair;\r\n\r\n        if (!_inSwapAndLiquify && tokenBeingSold && _swapAndLiquifyEnabled) {\r\n            if (contractTokenBalance >= _numTokensSellToAddToLiquidity) {\r\n                contractTokenBalance = _numTokensSellToAddToLiquidity;\r\n                // add liquidity, send to marketing wallet\r\n                swapAndLiquify(contractTokenBalance);\r\n            }\r\n        }\r\n\r\n        // indicates if fee should be deducted from transfer\r\n        // if any account belongs to _isExcludedFromFee account then remove the fee\r\n        bool takeFee = !_isExcludedFromFee[from] &&\r\n            !_isExcludedFromFee[to] &&\r\n            tokenBeingSold;\r\n\r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        //This needs to be distributed among marketing wallet and liquidity\r\n        if (_liquidityFee == 0 && _marketingFee == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 marketingBalance = contractTokenBalance.mul(_marketingFee).div(\r\n            uint256(_marketingFee).add(_liquidityFee)\r\n        );\r\n        if (marketingBalance > 0) {\r\n            contractTokenBalance = contractTokenBalance.sub(marketingBalance);\r\n            uint256 busdAmount = swapTokensForBusd(\r\n                marketingBalance,\r\n                _marketingWallet\r\n            );\r\n            emit MarketingFeeTrasferred(\r\n                _marketingWallet,\r\n                marketingBalance,\r\n                busdAmount\r\n            );\r\n        }\r\n\r\n        if (contractTokenBalance > 0) {\r\n            // split the contract balance into halves\r\n            uint256 half = contractTokenBalance.div(2);\r\n            uint256 otherHalf = contractTokenBalance.sub(half);\r\n\r\n            // tokens and busd are sent to liquidify helper contract and added to liquidity to be burned\r\n            super._transfer(\r\n                address(this),\r\n                address(_liquidifyHelper),\r\n                otherHalf\r\n            );\r\n            // swap tokens for BUSD\r\n            uint256 busdAmount = swapTokensForBusd(\r\n                half,\r\n                address(_liquidifyHelper)\r\n            );\r\n\r\n            // add liquidity to pancakeswap\r\n            if (otherHalf > 0 && busdAmount > 0) {\r\n                _liquidifyHelper.liquifyAndBurn();\r\n                emit LiquifyAndBurned(half, busdAmount, otherHalf);\r\n            }\r\n        }\r\n    }\r\n\r\n    function swapTokensForBusd(uint256 tokenAmount, address to)\r\n        private\r\n        returns (uint256 busdAmount)\r\n    {\r\n        // generate the uniswap pair path of token -> busd\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = BUSD;\r\n\r\n        _approve(address(this), address(_swapRouter), tokenAmount);\r\n\r\n        // capture the contract's current BUSD balance.\r\n        // this is so that we can capture exactly the amount of BUSD that the\r\n        // swap creates, and not make the liquidity event include any BUSD that\r\n        // has been manually sent to the contract\r\n        uint256 balanceBefore = IERC20(BUSD).balanceOf(to);\r\n\r\n        // make the swap\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of BUSD\r\n            path,\r\n            to,\r\n            block.timestamp.add(300)\r\n        );\r\n\r\n        // how much BUSD did we just swap into?\r\n        busdAmount = IERC20(BUSD).balanceOf(to).sub(balanceBefore);\r\n    }\r\n\r\n    function addLiquidityAndBurn(uint256 tokenAmount, uint256 busdAmount)\r\n        private\r\n    {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(_swapRouter), tokenAmount);\r\n        IERC20(BUSD).approve(address(_swapRouter), busdAmount);\r\n\r\n        // add the liquidity\r\n        _swapRouter.addLiquidity(\r\n            address(this),\r\n            BUSD,\r\n            tokenAmount,\r\n            busdAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            DEAD,\r\n            block.timestamp.add(300)\r\n        );\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        if (takeFee) {\r\n            uint256 feeAmount = amount\r\n                .mul(uint256(_liquidityFee).add(_marketingFee))\r\n                .div(10000);\r\n            if (feeAmount > 0) {\r\n                super._transfer(sender, address(this), feeAmount);\r\n                amount = amount.sub(feeAmount);\r\n            }\r\n        }\r\n        if (amount > 0) {\r\n            super._transfer(sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    function recoverToken(address tokenAddress, uint256 tokenAmount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        // do not allow recovering self token\r\n        require(tokenAddress != address(this), \"Self withdraw\");\r\n        IERC20(tokenAddress).transfer(owner(), tokenAmount);\r\n    }\r\n}\r\n\r\n// File: contracts\\StakingPool.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract StakingPool is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using SafeERC20 for HearnToken;\r\n\r\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    LiquidifyHelper public liquidifyHelper;\r\n\r\n    // Whether a limit is set for users\r\n    bool public hasUserLimit;\r\n\r\n    // Whether it is initialized\r\n    bool public isInitialized;\r\n\r\n    IUniswapV2Router02 public swapRouter;\r\n\r\n    // staking token allocation strategy\r\n    uint16 public buybackPercent = 9000;\r\n    uint16 public liquidifyPercent = 1000;\r\n\r\n    // staking token allocation strategy when referral link used\r\n    uint16 public referralBuybackPercent = 9000;\r\n    uint16 public referralUplinePercent = 500;\r\n    uint16 public referralLiquidifyPercent = 500;\r\n\r\n    // Accrued token per share\r\n    uint256 public accTokenPerShare;\r\n\r\n    // The block number when CAKE mining ends.\r\n    uint256 public bonusEndBlock;\r\n\r\n    // The block number when CAKE mining starts.\r\n    uint256 public startBlock;\r\n\r\n    // The block number of the last pool update\r\n    uint256 public lastRewardBlock;\r\n\r\n    // The last block time when the emission value updated\r\n    uint256 public emissionValueUpdatedAt;\r\n\r\n    uint16 public constant MAX_DEPOSIT_FEE = 2000;\r\n    uint256 public constant MAX_EMISSION_RATE = 10**10;\r\n\r\n    // The deposit fee\r\n    uint16 public depositFee;\r\n\r\n    // The fee address\r\n    address public feeAddress;\r\n\r\n    // The dev address\r\n    address public devAddress;\r\n\r\n    // The pool limit (0 if none)\r\n    uint256 public poolLimitPerUser;\r\n\r\n    // CAKE tokens created per block.\r\n    uint256 public rewardPerBlock;\r\n\r\n    // The precision factor\r\n    uint256 public PRECISION_FACTOR;\r\n\r\n    // The reward token\r\n    HearnToken public rewardToken;\r\n\r\n    // The staked token\r\n    IERC20 public stakedToken;\r\n\r\n    // Total supply of staked token\r\n    uint256 public stakedSupply;\r\n\r\n    // Total buy back staked token amount\r\n    uint256 public totalBuyback;\r\n\r\n    // Total bought back reward token amount\r\n    uint256 public totalBoughtback;\r\n\r\n    // Total liquidified amount\r\n    uint256 public totalLiquidify;\r\n\r\n    // Referral commissions over the protocol\r\n    uint256 public totalReferralCommissions;\r\n\r\n    // Info of each user that stakes tokens (stakedToken)\r\n    mapping(address => UserInfo) public userInfo;\r\n\r\n    struct UserInfo {\r\n        uint256 amount; // How many staked tokens the user has provided\r\n        uint256 rewardDebt; // Reward debt\r\n        address referrer; // Referrer\r\n        uint256 referralCommissionEarned; // Earned from referral commission\r\n        uint256 totalEarned; // All-time reward token earned\r\n    }\r\n\r\n    enum EmissionUpdateMode {\r\n        MANUAL,\r\n        AUTO\r\n    }\r\n\r\n    event AdminTokenRecovery(address tokenRecovered, uint256 amount);\r\n    event Deposited(address indexed user, uint256 amount);\r\n    event EmergencyRewardWithdrawn(uint256 amount);\r\n    event NewStartAndEndBlocks(uint256 startBlock, uint256 endBlock);\r\n    event RewardPerBlockUpdated(\r\n        EmissionUpdateMode mode,\r\n        uint256 oldValue,\r\n        uint256 newValue\r\n    );\r\n    event NewDepositFee(uint16 oldFee, uint16 newFee);\r\n    event NewFeeAddress(address oldAddress, address newAddress);\r\n    event NewDevAddress(address oldAddress, address newAddress);\r\n    event NewPoolLimit(uint256 oldLimit, uint256 newLimit);\r\n    event RewardsStop(uint256 blockNumber);\r\n\r\n    constructor() {\r\n        swapRouter = IUniswapV2Router02(\r\n            address(0x10ED43C718714eb63d5aA57B78B54704E256024E)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Initialize the contract\r\n     * @param _stakedToken: staked token address\r\n     * @param _rewardToken: reward token address\r\n     * @param _rewardPerBlock: reward per block (in rewardToken)\r\n     * @param _startBlock: start block\r\n     * @param _bonusEndBlock: end block\r\n     * @param _poolLimitPerUser: pool limit per user in stakedToken (if any, else 0)\r\n     * @param _depositFee: deposit fee\r\n     * @param _feeAddress: fee address\r\n     * @param _devAddress: dev address\r\n     * @param _admin: admin address with ownership\r\n     */\r\n    function initialize(\r\n        IERC20 _stakedToken,\r\n        HearnToken _rewardToken,\r\n        uint256 _rewardPerBlock,\r\n        uint256 _startBlock,\r\n        uint256 _bonusEndBlock,\r\n        uint256 _poolLimitPerUser,\r\n        uint16 _depositFee,\r\n        address _feeAddress,\r\n        address _devAddress,\r\n        address _admin\r\n    ) external onlyOwner {\r\n        require(!isInitialized, \"Already initialized\");\r\n        require(_feeAddress != address(0), \"Invalid fee address\");\r\n        require(_devAddress != address(0), \"Invalid dev address\");\r\n        uint256 rewardDecimals = uint256(_rewardToken.decimals());\r\n        require(\r\n            _rewardPerBlock <= MAX_EMISSION_RATE.mul(10**rewardDecimals),\r\n            \"Out of maximum emission value\"\r\n        );\r\n\r\n        _stakedToken.balanceOf(address(this));\r\n        _rewardToken.balanceOf(address(this));\r\n        // require(_stakedToken != _rewardToken, \"stakedToken must be different from rewardToken\");\r\n        require(_startBlock > block.number, \"startBlock cannot be in the past\");\r\n        require(\r\n            _startBlock < _bonusEndBlock,\r\n            \"startBlock must be lower than endBlock\"\r\n        );\r\n\r\n        // Make this contract initialized\r\n        isInitialized = true;\r\n\r\n        stakedToken = _stakedToken;\r\n        rewardToken = _rewardToken;\r\n\r\n        rewardPerBlock = _rewardPerBlock;\r\n        emissionValueUpdatedAt = block.timestamp;\r\n        emit RewardPerBlockUpdated(\r\n            EmissionUpdateMode.MANUAL,\r\n            0,\r\n            rewardPerBlock\r\n        );\r\n\r\n        startBlock = _startBlock;\r\n        bonusEndBlock = _bonusEndBlock;\r\n\r\n        require(_depositFee <= MAX_DEPOSIT_FEE, \"Invalid deposit fee\");\r\n        depositFee = _depositFee;\r\n\r\n        feeAddress = _feeAddress;\r\n        devAddress = _devAddress;\r\n\r\n        if (_poolLimitPerUser > 0) {\r\n            hasUserLimit = true;\r\n            poolLimitPerUser = _poolLimitPerUser;\r\n        }\r\n\r\n        uint256 decimalsRewardToken = uint256(rewardToken.decimals());\r\n        require(decimalsRewardToken < 30, \"Must be inferior to 30\");\r\n\r\n        PRECISION_FACTOR = uint256(10**(uint256(30).sub(decimalsRewardToken)));\r\n\r\n        // Set the lastRewardBlock as the startBlock\r\n        lastRewardBlock = startBlock;\r\n\r\n        // Transfer ownership to the admin address who becomes owner of the contract\r\n        transferOwnership(_admin);\r\n    }\r\n\r\n    /**\r\n     * @notice Deposit staked tokens and collect reward tokens (if any)\r\n     * @param _amount: amount to deposit (in staking token)\r\n     * @param _referrer: referrer\r\n     */\r\n    function deposit(uint256 _amount, address _referrer) external nonReentrant {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n\r\n        if (hasUserLimit) {\r\n            require(\r\n                _amount.add(user.amount) <= poolLimitPerUser,\r\n                \"User amount above limit\"\r\n            );\r\n        }\r\n\r\n        _updatePool();\r\n\r\n        if (user.amount > 0) {\r\n            uint256 pending = user\r\n                .amount\r\n                .mul(accTokenPerShare)\r\n                .div(PRECISION_FACTOR)\r\n                .sub(user.rewardDebt);\r\n            if (pending > 0) {\r\n                safeRewardTransfer(msg.sender, pending);\r\n                user.totalEarned = user.totalEarned.add(pending);\r\n            }\r\n        }\r\n\r\n        if (_amount > 0) {\r\n            uint256 balanceBefore = stakedToken.balanceOf(address(this));\r\n            stakedToken.safeTransferFrom(msg.sender, address(this), _amount);\r\n            _amount = stakedToken.balanceOf(address(this)).sub(balanceBefore);\r\n            uint256 feeAmount = 0;\r\n\r\n            if (depositFee > 0) {\r\n                feeAmount = _amount.mul(depositFee).div(10000);\r\n                if (feeAmount > 0) {\r\n                    stakedToken.safeTransfer(feeAddress, feeAmount);\r\n                }\r\n            }\r\n\r\n            user.amount = user.amount.add(_amount).sub(feeAmount);\r\n            stakedSupply = stakedSupply.add(_amount).sub(feeAmount);\r\n            handleDeposits(msg.sender, _referrer, _amount);\r\n        }\r\n\r\n        user.rewardDebt = user.amount.mul(accTokenPerShare).div(\r\n            PRECISION_FACTOR\r\n        );\r\n\r\n        emit Deposited(msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Handle deposits to buyback tokens and liquidify, upline\r\n     * @param _from: address which did deposit\r\n     * @param _referrer: referrer address\r\n     * @param _amount: deposited amount\r\n     */\r\n    function handleDeposits(\r\n        address _from,\r\n        address _referrer,\r\n        uint256 _amount\r\n    ) internal {\r\n        // When there is a referrer\r\n        UserInfo storage user = userInfo[_from];\r\n        if (\r\n            user.referrer != _referrer &&\r\n            _referrer != _from &&\r\n            _referrer != address(0)\r\n        ) {\r\n            user.referrer = _referrer;\r\n        }\r\n        if (user.referrer != address(0)) {\r\n            uint256 uplineAmount = _amount.mul(referralUplinePercent).div(\r\n                10000\r\n            );\r\n            if (uplineAmount > 0) {\r\n                stakedToken.safeTransfer(user.referrer, uplineAmount);\r\n                totalReferralCommissions = totalReferralCommissions.add(\r\n                    uplineAmount\r\n                );\r\n                UserInfo storage referrer = userInfo[user.referrer];\r\n                referrer.referralCommissionEarned = referrer\r\n                    .referralCommissionEarned\r\n                    .add(uplineAmount);\r\n                _amount = _amount.sub(uplineAmount);\r\n            }\r\n        }\r\n\r\n        if (liquidifyPercent + buybackPercent == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 liquidifyAmount = _amount.mul(liquidifyPercent).div(\r\n            liquidifyPercent + buybackPercent\r\n        );\r\n        uint256 halfAmount = liquidifyAmount.div(2);\r\n        uint256 buybackAmount = _amount.sub(liquidifyAmount);\r\n\r\n        if (halfAmount > 0) {\r\n            stakedToken.safeTransfer(\r\n                address(liquidifyHelper),\r\n                liquidifyAmount.sub(halfAmount)\r\n            );\r\n            uint256 swappedAmount = swapStakeTokenForRewardToken(\r\n                halfAmount,\r\n                address(liquidifyHelper)\r\n            );\r\n            if (swappedAmount > 0) {\r\n                liquidifyHelper.liquifyAndBurn();\r\n                totalLiquidify = totalLiquidify.add(liquidifyAmount);\r\n            }\r\n        }\r\n\r\n        if (buybackAmount > 0) {\r\n            uint256 boughtBackAmount = swapStakeTokenForRewardToken(\r\n                buybackAmount,\r\n                DEAD\r\n            );\r\n            totalBuyback = totalBuyback.add(buybackAmount);\r\n            totalBoughtback = totalBoughtback.add(boughtBackAmount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Safe reward transfer, just in case if rounding error causes pool to not have enough reward tokens.\r\n     * @param _to receiver address\r\n     * @param _amount amount to transfer\r\n     */\r\n    function safeRewardTransfer(address _to, uint256 _amount) internal {\r\n        uint256 rewardBalance = rewardToken.balanceOf(address(this));\r\n        if (_amount > rewardBalance) {\r\n            rewardToken.safeTransfer(_to, rewardBalance);\r\n        } else {\r\n            rewardToken.safeTransfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw all reward tokens\r\n     * @dev Only callable by owner. Needs to be for emergency.\r\n     */\r\n    function emergencyRewardWithdraw(uint256 _amount) external onlyOwner {\r\n        require(\r\n            startBlock > block.number || bonusEndBlock < block.number,\r\n            \"Not allowed to remove reward tokens while pool is live\"\r\n        );\r\n        safeRewardTransfer(msg.sender, _amount);\r\n\r\n        emit EmergencyRewardWithdrawn(_amount);\r\n    }\r\n\r\n    /**\r\n     * @notice It allows the admin to recover wrong tokens sent to the contract\r\n     * @param _tokenAddress: the address of the token to withdraw\r\n     * @param _tokenAmount: the number of tokens to withdraw\r\n     * @dev This function is only callable by admin.\r\n     */\r\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _tokenAddress != address(stakedToken),\r\n            \"Cannot be staked token\"\r\n        );\r\n        require(\r\n            _tokenAddress != address(rewardToken),\r\n            \"Cannot be reward token\"\r\n        );\r\n\r\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\r\n\r\n        emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\r\n    }\r\n\r\n    /*\r\n     * @notice Stop rewards\r\n     * @dev Only callable by owner\r\n     */\r\n    function stopReward() external onlyOwner {\r\n        require(startBlock < block.number, \"Pool has not started\");\r\n        require(block.number <= bonusEndBlock, \"Pool has ended\");\r\n        bonusEndBlock = block.number;\r\n\r\n        emit RewardsStop(block.number);\r\n    }\r\n\r\n    /**\r\n     * @notice Update swap router\r\n     * @dev Only callable by owner\r\n     */\r\n    function updateSwapRouter(address newSwapRouter) external onlyOwner {\r\n        require(newSwapRouter != address(0), \"Invalid swap router\");\r\n        swapRouter = IUniswapV2Router02(newSwapRouter);\r\n        liquidifyHelper.setSwapRouter(newSwapRouter);\r\n    }\r\n\r\n    /**\r\n     * @notice Update liquidify helper\r\n     * @dev Only callable by owner\r\n     */\r\n    function updateLiquidifyHelper(LiquidifyHelper newLiquidifyHelper)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            address(newLiquidifyHelper) != address(0),\r\n            \"Invalid liquidify helper\"\r\n        );\r\n        liquidifyHelper = newLiquidifyHelper;\r\n    }\r\n\r\n    /**\r\n     * @notice Update staking token allocation percents\r\n     * @param _buybackPercent: buyback percent\r\n     * @param _liquidifyPercent: liquidify percent\r\n     * @dev Only callable by owner\r\n     */\r\n    function updateAllocationPercents(\r\n        uint16 _buybackPercent,\r\n        uint16 _liquidifyPercent\r\n    ) external onlyOwner {\r\n        require(_buybackPercent + _liquidifyPercent == 10000, \"Invalid input\");\r\n        buybackPercent = _buybackPercent;\r\n        liquidifyPercent = _liquidifyPercent;\r\n    }\r\n\r\n    /**\r\n     * @notice Update staking token allocation percents when referral link used\r\n     * @param _buybackPercent: buyback percent\r\n     * @param _uplinePercent: upline percent\r\n     * @param _liquidifyPercent: liquidify percent\r\n     * @dev Only callable by owner\r\n     */\r\n    function updateReferralAllocationPercents(\r\n        uint16 _buybackPercent,\r\n        uint16 _uplinePercent,\r\n        uint16 _liquidifyPercent\r\n    ) external onlyOwner {\r\n        require(\r\n            _buybackPercent + _liquidifyPercent + _uplinePercent == 10000,\r\n            \"Invalid input\"\r\n        );\r\n        referralBuybackPercent = _buybackPercent;\r\n        referralLiquidifyPercent = _liquidifyPercent;\r\n        referralUplinePercent = _uplinePercent;\r\n    }\r\n\r\n    /*\r\n     * @notice Update pool limit per user\r\n     * @dev Only callable by owner.\r\n     * @param _hasUserLimit: whether the limit remains forced\r\n     * @param _poolLimitPerUser: new pool limit per user\r\n     */\r\n    function updatePoolLimitPerUser(\r\n        bool _hasUserLimit,\r\n        uint256 _poolLimitPerUser\r\n    ) external onlyOwner {\r\n        require(hasUserLimit, \"Must be set\");\r\n        if (_hasUserLimit) {\r\n            require(\r\n                _poolLimitPerUser > poolLimitPerUser,\r\n                \"New limit must be higher\"\r\n            );\r\n            emit NewPoolLimit(poolLimitPerUser, _poolLimitPerUser);\r\n            poolLimitPerUser = _poolLimitPerUser;\r\n        } else {\r\n            hasUserLimit = _hasUserLimit;\r\n            emit NewPoolLimit(poolLimitPerUser, 0);\r\n            poolLimitPerUser = 0;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @notice Update reward per block\r\n     * @dev Only callable by owner.\r\n     * @param _rewardPerBlock: the reward per block\r\n     */\r\n    function updateRewardPerBlock(uint256 _rewardPerBlock) external onlyOwner {\r\n        uint256 rewardDecimals = uint256(rewardToken.decimals());\r\n        require(\r\n            _rewardPerBlock <= MAX_EMISSION_RATE.mul(10**rewardDecimals),\r\n            \"Out of maximum emission value\"\r\n        );\r\n        _updatePool();\r\n        emit RewardPerBlockUpdated(\r\n            EmissionUpdateMode.MANUAL,\r\n            rewardPerBlock,\r\n            _rewardPerBlock\r\n        );\r\n        rewardPerBlock = _rewardPerBlock;\r\n        emissionValueUpdatedAt = block.timestamp;\r\n    }\r\n\r\n    /*\r\n     * @notice Update deposit fee\r\n     * @dev Only callable by owner.\r\n     * @param _depositFee: the deposit fee\r\n     */\r\n    function updateDepositFee(uint16 _depositFee) external onlyOwner {\r\n        require(_depositFee <= MAX_DEPOSIT_FEE, \"Invalid deposit fee\");\r\n        emit NewDepositFee(depositFee, _depositFee);\r\n        depositFee = _depositFee;\r\n    }\r\n\r\n    /*\r\n     * @notice Update fee address\r\n     * @dev Only callable by owner.\r\n     * @param _feeAddress: the fee address\r\n     */\r\n    function updateFeeAddress(address _feeAddress) external onlyOwner {\r\n        require(_feeAddress != address(0), \"Invalid zero address\");\r\n        require(feeAddress != _feeAddress, \"Same fee address already set\");\r\n        emit NewFeeAddress(feeAddress, _feeAddress);\r\n        feeAddress = _feeAddress;\r\n    }\r\n\r\n    /*\r\n     * @notice Update dev address\r\n     * @dev Only callable by owner.\r\n     * @param _devAddress: the dev address\r\n     */\r\n    function updateDevAddress(address _devAddress) external onlyOwner {\r\n        require(_devAddress != address(0), \"Invalid zero address\");\r\n        require(devAddress != _devAddress, \"Same dev address already set\");\r\n        emit NewDevAddress(devAddress, _devAddress);\r\n        devAddress = _devAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice It allows the admin to update start and end blocks\r\n     * @dev This function is only callable by owner.\r\n     * @param _startBlock: the new start block\r\n     * @param _bonusEndBlock: the new end block\r\n     */\r\n    function updateStartAndEndBlocks(\r\n        uint256 _startBlock,\r\n        uint256 _bonusEndBlock\r\n    ) external onlyOwner {\r\n        require(block.number < startBlock, \"Pool has started\");\r\n        require(\r\n            _startBlock < _bonusEndBlock,\r\n            \"New startBlock must be lower than new endBlock\"\r\n        );\r\n        require(\r\n            block.number < _startBlock,\r\n            \"New startBlock must be higher than current block\"\r\n        );\r\n\r\n        startBlock = _startBlock;\r\n        bonusEndBlock = _bonusEndBlock;\r\n\r\n        // Set the lastRewardBlock as the startBlock\r\n        lastRewardBlock = startBlock;\r\n\r\n        emit NewStartAndEndBlocks(_startBlock, _bonusEndBlock);\r\n    }\r\n\r\n    /*\r\n     * @notice View function to see pending reward on frontend.\r\n     * @param _user: user address\r\n     * @return Pending reward for a given user\r\n     */\r\n    function pendingReward(address _user) external view returns (uint256) {\r\n        UserInfo storage user = userInfo[_user];\r\n        if (block.number > lastRewardBlock && stakedSupply != 0) {\r\n            uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\r\n\r\n            uint256 currentRewardPerBlock = viewEmissionValue();\r\n            uint256 cakeReward = multiplier.mul(currentRewardPerBlock);\r\n            uint256 adjustedTokenPerShare = accTokenPerShare.add(\r\n                cakeReward.mul(PRECISION_FACTOR).div(stakedSupply)\r\n            );\r\n            return\r\n                user\r\n                    .amount\r\n                    .mul(adjustedTokenPerShare)\r\n                    .div(PRECISION_FACTOR)\r\n                    .sub(user.rewardDebt);\r\n        } else {\r\n            return\r\n                user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(\r\n                    user.rewardDebt\r\n                );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Emission value should be reduced by 2% every 30 days\r\n     * @return Current emission value\r\n     */\r\n    function viewEmissionValue() public view returns (uint256) {\r\n        if (block.timestamp > emissionValueUpdatedAt) {\r\n            uint256 times = block.timestamp.sub(emissionValueUpdatedAt).div(\r\n                30 days\r\n            );\r\n            if (times > 0) {\r\n                uint256 deltaValue = rewardPerBlock.mul(2).mul(times).div(100);\r\n                uint256 newRewardPerBlock;\r\n                if (rewardPerBlock > deltaValue) {\r\n                    newRewardPerBlock = rewardPerBlock.sub(deltaValue);\r\n                } else {\r\n                    newRewardPerBlock = rewardPerBlock.mul(2).div(100);\r\n                }\r\n                return newRewardPerBlock;\r\n            }\r\n        }\r\n        return rewardPerBlock;\r\n    }\r\n\r\n    /*\r\n     * @notice Update reward variables of the given pool to be up-to-date.\r\n     */\r\n    function _updatePool() internal {\r\n        if (block.number <= lastRewardBlock) {\r\n            return;\r\n        }\r\n\r\n        if (stakedSupply == 0) {\r\n            lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n\r\n        uint256 currentRewardPerBlock = viewEmissionValue();\r\n        if (currentRewardPerBlock != rewardPerBlock) {\r\n            emit RewardPerBlockUpdated(\r\n                EmissionUpdateMode.AUTO,\r\n                rewardPerBlock,\r\n                currentRewardPerBlock\r\n            );\r\n            rewardPerBlock = currentRewardPerBlock;\r\n            emissionValueUpdatedAt = block.timestamp;\r\n        }\r\n\r\n        uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\r\n        uint256 cakeReward = multiplier.mul(rewardPerBlock);\r\n\r\n        rewardToken.mint(devAddress, cakeReward.div(10)); // 10% minted to dev wallet\r\n        rewardToken.mint(cakeReward);\r\n\r\n        accTokenPerShare = accTokenPerShare.add(\r\n            cakeReward.mul(PRECISION_FACTOR).div(stakedSupply)\r\n        );\r\n        lastRewardBlock = block.number;\r\n    }\r\n\r\n    /*\r\n     * @notice Return reward multiplier over the given _from to _to block.\r\n     * @param _from: block to start\r\n     * @param _to: block to finish\r\n     */\r\n    function _getMultiplier(uint256 _from, uint256 _to)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (_to <= bonusEndBlock) {\r\n            return _to.sub(_from);\r\n        } else if (_from >= bonusEndBlock) {\r\n            return 0;\r\n        } else {\r\n            return bonusEndBlock.sub(_from);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Swap staked token to the reward amount and burn them\r\n     * @return _outAmount\r\n     */\r\n    function swapStakeTokenForRewardToken(uint256 _inAmount, address _to)\r\n        internal\r\n        returns (uint256 _outAmount)\r\n    {\r\n        // generate the uniswap pair path of staked token -> reward token\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(stakedToken);\r\n        path[1] = address(rewardToken);\r\n\r\n        stakedToken.approve(address(swapRouter), _inAmount);\r\n\r\n        uint256 balanceBefore = rewardToken.balanceOf(_to);\r\n\r\n        // make the swap\r\n        swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            _inAmount,\r\n            0, // accept any amount of HEARN\r\n            path,\r\n            _to,\r\n            block.timestamp.add(300)\r\n        );\r\n        _outAmount = rewardToken.balanceOf(_to).sub(balanceBefore);\r\n    }\r\n\r\n    /**\r\n     * @notice Add liquidity and burn them\r\n     */\r\n    function addLiquidityAndBurn(\r\n        uint256 stakedTokenAmount,\r\n        uint256 rewardTokenAmount\r\n    ) internal {\r\n        // approve token transfer to cover all possible scenarios\r\n        stakedToken.approve(address(swapRouter), stakedTokenAmount);\r\n        rewardToken.approve(address(swapRouter), rewardTokenAmount);\r\n\r\n        // add the liquidity\r\n        swapRouter.addLiquidity(\r\n            address(stakedToken),\r\n            address(rewardToken),\r\n            stakedTokenAmount,\r\n            rewardTokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            DEAD,\r\n            block.timestamp.add(300)\r\n        );\r\n    }\r\n\r\n    //to recieve ETH from swapRouter when swaping\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenRecovered\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminTokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyRewardWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newFee\",\"type\":\"uint16\"}],\"name\":\"NewDepositFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"NewDevAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"NewFeeAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"NewPoolLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"NewStartAndEndBlocks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum StakingPool.EmissionUpdateMode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"RewardPerBlockUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RewardsStop\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_DEPOSIT_FEE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_EMISSION_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accTokenPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackPercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyRewardWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionValueUpdatedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasUserLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"contract HearnToken\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolLimitPerUser\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_depositFee\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidifyHelper\",\"outputs\":[{\"internalType\":\"contract LiquidifyHelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidifyPercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLimitPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverWrongTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralBuybackPercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralLiquidifyPercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralUplinePercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract HearnToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBoughtback\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyback\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReferralCommissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_buybackPercent\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_liquidifyPercent\",\"type\":\"uint16\"}],\"name\":\"updateAllocationPercents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_depositFee\",\"type\":\"uint16\"}],\"name\":\"updateDepositFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"updateDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"updateFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract LiquidifyHelper\",\"name\":\"newLiquidifyHelper\",\"type\":\"address\"}],\"name\":\"updateLiquidifyHelper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_hasUserLimit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_poolLimitPerUser\",\"type\":\"uint256\"}],\"name\":\"updatePoolLimitPerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_buybackPercent\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_uplinePercent\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_liquidifyPercent\",\"type\":\"uint16\"}],\"name\":\"updateReferralAllocationPercents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"}],\"name\":\"updateStartAndEndBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSwapRouter\",\"type\":\"address\"}],\"name\":\"updateSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralCommissionEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewEmissionValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "StakingPool", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://274da4d689da47f8301e2f4295c1075f0a774e90c60f0fa3f826a1b33dfec261"}