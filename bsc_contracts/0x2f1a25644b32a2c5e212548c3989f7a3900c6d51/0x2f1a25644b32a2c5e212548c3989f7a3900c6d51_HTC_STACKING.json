{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.8.0;\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\npragma solidity ^0.8.0;\r\n\r\ncontract HTC_STACKING {\r\n    using SafeMath for uint256;\r\n    address payable  public owner;\r\n     event Stacking(address erc20contract, uint256 to, string orderId);\r\n     event Withdrawamount(uint amountInWei,address  toAddr);\r\n     event Removestacking(uint _amount, address  toAddr,address _token_);\r\n     event NewOwner( address  toAddr);  \r\n    constructor( address payable ownAcc){\r\n        owner = ownAcc;      \r\n    }\r\n      \r\n       modifier onlyOwner() {\r\n        require(msg.sender==owner, \"Only Call by Owner\");\r\n        _;\r\n     }\r\n      \r\n       function getContractBalance() public view returns(uint){\r\n        return address(this).balance;\r\n       }\r\n\r\n       function stacking(address _token_ ,uint256 _amount,string calldata orderId)  public payable\r\n       {       \r\n               require(_amount >0 , \"Invalid Amount\");       \r\n               IERC20  HTC = IERC20(_token_);\r\n               uint256 allowance = HTC.allowance(msg.sender, address(this));\r\n               require(allowance >= _amount, \"Check the token allowance\");       \r\n               HTC.transferFrom( msg.sender,address(this), _amount);             \r\n               emit  Stacking(_token_,_amount,orderId);\r\n      }\r\n\r\n      function withdrawamount(uint amountInWei,address payable toAddr) public{\r\n        require(msg.sender == owner, \"Unauthorised\");\r\n        if(amountInWei>getContractBalance()){\r\n            amountInWei = getContractBalance();\r\n        }\r\n        toAddr.transfer(amountInWei);\r\n        emit Withdrawamount(amountInWei,toAddr);\r\n    }\r\n\r\n    function removestacking(uint _amount, address  toAddr,address _token_ ) public onlyOwner{\r\n         require(msg.sender == owner , \"Unauthorised\");\r\n         require(toAddr != address(0), \"ERC20: burn to the zero address\");\r\n         require(_amount >0 , \"Invalid Amount\");\r\n             IERC20  HTC = IERC20(_token_);         \r\n             HTC.transfer( toAddr, _amount);   \r\n              emit Removestacking(_amount,toAddr,_token_);\r\n    }\r\n  \r\n    function changeownership(address  payable addr) public{\r\n        require(msg.sender == owner, \"Unauthorised\");\r\n         require(addr != address(0), \"ERC20: burn to the zero address\");\r\n        owner = addr;   \r\n        emit  NewOwner(addr);\r\n    }\r\n\r\n  \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"ownAcc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toAddr\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token_\",\"type\":\"address\"}],\"name\":\"Removestacking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"orderId\",\"type\":\"string\"}],\"name\":\"Stacking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toAddr\",\"type\":\"address\"}],\"name\":\"Withdrawamount\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"changeownership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token_\",\"type\":\"address\"}],\"name\":\"removestacking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"orderId\",\"type\":\"string\"}],\"name\":\"stacking\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInWei\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"toAddr\",\"type\":\"address\"}],\"name\":\"withdrawamount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HTC_STACKING", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004f2be48225e24d7fc871b702a846df7edb4b0f61", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8d8178a0cc307bf8463977b0371027f32ef0a1f2328b4bff705a72af73bdf673"}