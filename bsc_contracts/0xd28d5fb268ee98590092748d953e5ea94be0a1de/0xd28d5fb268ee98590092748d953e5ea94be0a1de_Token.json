{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-08-19\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// File: contracts/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n\r\n\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IBEP20.sol\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IBEP20 {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts/TokenSale.sol\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\n\r\n\r\ncontract Whitelist {\r\n    mapping(address => bool) public whitelist;\r\n\r\n    function _addToWhitelist(address _beneficiary) internal {\r\n        whitelist[_beneficiary] = true;\r\n    }\r\n\r\n    function _addManyToWhitelist(address[] memory _beneficiaries) internal {\r\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\r\n            whitelist[_beneficiaries[i]] = true;\r\n        }\r\n    }\r\n\r\n    function _removeFromWhitelist(address _beneficiary) internal {\r\n        whitelist[_beneficiary] = false;\r\n    }\r\n\r\n    function _removeManyFromWhitelist(address[] memory _beneficiaries)\r\n        internal\r\n    {\r\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\r\n            whitelist[_beneficiaries[i]] = false;\r\n        }\r\n    }\r\n}\r\n\r\ncontract Pausable {\r\n    bool public paused;\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"sale is paused\");\r\n        _;\r\n    }\r\n\r\n    function _pauseSale() internal {\r\n        require(!paused, \"Sale already paused\");\r\n        paused = true;\r\n    }\r\n\r\n    function _unPauseSale() internal {\r\n        require(paused, \"Sale is not paused\");\r\n        paused = false;\r\n    }\r\n}\r\n\r\ncontract TokenSale is Whitelist, Ownable, Pausable {\r\n    uint256 public presaleRate;\r\n    uint256 public publicsaleRate;\r\n\r\n    uint256 public presaleTimestamp;\r\n    uint256 public publicsaleStartTimestamp;\r\n    uint256 public publicsaleEndTimestamp;\r\n\r\n    uint256 public unverifiedLimit;\r\n    uint256 public verifiedLimit;\r\n\r\n    uint256 public walletCut;\r\n    uint256 public charityCut;\r\n\r\n    address payable public wallet;\r\n    address payable public charityWallet;\r\n    address public whitelister;\r\n\r\n    IBEP20 public token;\r\n\r\n    mapping(address => uint256) public contributions;\r\n\r\n    event TokenPurchase(\r\n        address indexed purchaser,\r\n        address indexed beneficiary,\r\n        uint256 value,\r\n        uint256 amount\r\n    );\r\n\r\n    constructor(\r\n        uint256 _publicsaleRate,\r\n        uint256 _presaleRate,\r\n        uint256 _presaleTimestamp,\r\n        uint256 _publicsaleStartTimestamp,\r\n        uint256 _publicsaleEndTimestamp,\r\n        uint256 _unverifiedLimit,\r\n        uint256 _verifiedLimit,\r\n        uint256 _walletCut,\r\n        uint256 _charityCut,\r\n        address payable _wallet,\r\n        address payable _charityWallet,\r\n        address _token\r\n    ) {\r\n        require(_publicsaleRate > 0);\r\n        require(_presaleRate > 0);\r\n        require(_wallet != address(0) && _charityWallet != address(0));\r\n        require(address(_token) != address(0));\r\n\r\n        presaleRate = _presaleRate;\r\n        publicsaleRate = _publicsaleRate;\r\n\r\n        unverifiedLimit = _unverifiedLimit;\r\n        verifiedLimit = _verifiedLimit;\r\n\r\n        presaleTimestamp = _presaleTimestamp;\r\n        publicsaleStartTimestamp = _publicsaleStartTimestamp;\r\n        publicsaleEndTimestamp = _publicsaleEndTimestamp;\r\n\r\n        setCuts(_walletCut, _charityCut);\r\n\r\n        whitelister = msg.sender;\r\n        charityWallet = _charityWallet;\r\n        wallet = _wallet;\r\n\r\n        token = IBEP20(_token);\r\n    }\r\n\r\n    modifier onlyWhitelister() {\r\n        require(msg.sender == whitelister, \"only Whitelister\");\r\n        _;\r\n    }\r\n\r\n    function setWhiteListerAddress(address _whitelister) external onlyOwner {\r\n        whitelister = _whitelister;\r\n    }\r\n\r\n    function pauseSale() external onlyOwner {\r\n        _pauseSale();\r\n    }\r\n\r\n    function unPauseSale() external onlyOwner {\r\n        _unPauseSale();\r\n    }\r\n\r\n    function setCuts(uint256 _walletCut, uint256 _charityCut) public onlyOwner {\r\n        /*\r\n        sets the Cuts for The fundsWallet and the charityWallet\r\n            Percentages are calculated in Bips (Basis Points)\r\n            Examples : \r\n                100 % = 10000 pibs\r\n                15.5% = 1550 pibs\r\n                2.57% = 257 pibs\r\n        Note: Sum of the Cuts should be 10000 \r\n        */\r\n        require(_walletCut + _charityCut == 10000, \"cuts should sum to 10000\");\r\n        walletCut = _walletCut;\r\n        charityCut = _charityCut;\r\n    }\r\n\r\n    function buyTokens(address beneficiary)\r\n        public\r\n        payable\r\n        whenNotPaused\r\n        \r\n    {\r\n        uint256 weiAmount = msg.value;\r\n        _preValidatePurchase(beneficiary, weiAmount);\r\n        uint256 tokens = _getTokenAmount(weiAmount);\r\n        _updatePurchasingState(beneficiary, weiAmount);\r\n        _processPurchase(beneficiary, tokens);\r\n        _forwardFunds();\r\n\r\n        emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n    }\r\n\r\n    function _preValidatePurchase(address beneficiary, uint256 _weiAmount)\r\n        internal\r\n        view\r\n    {\r\n        require(block.timestamp > presaleTimestamp, \"sale hasn't started\");\r\n        require(block.timestamp < publicsaleEndTimestamp, \"sale is over\");\r\n        require(beneficiary != address(0));\r\n        require(_weiAmount != 0);\r\n\r\n        uint256 total = contributions[beneficiary] + _weiAmount;\r\n        require(total <= verifiedLimit, \"Exceed max amount\");\r\n\r\n        if (total > unverifiedLimit) {\r\n            require(whitelist[beneficiary], \"Not verified\");\r\n        }\r\n\r\n    }\r\n\r\n    function _updatePurchasingState(address _beneficiary, uint256 _weiAmount)\r\n        internal\r\n    {\r\n        contributions[_beneficiary] += _weiAmount;\r\n    }\r\n\r\n    function _getTokenAmount(uint256 _weiAmount)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _weiAmount * getRate();\r\n    }\r\n\r\n    function getRate() public view returns (uint256) {\r\n        if (block.timestamp < publicsaleStartTimestamp) {\r\n            return presaleRate;\r\n        }\r\n        return publicsaleRate;\r\n    }\r\n\r\n    function _processPurchase(address _beneficiary, uint256 _tokenAmount)\r\n        internal\r\n    {\r\n        bool success = token.transfer(_beneficiary, _tokenAmount);\r\n        require(success, \"Transfer Failed\");\r\n    }\r\n\r\n    function _forwardFunds() internal {\r\n        _splitFunds(msg.value);\r\n    }\r\n\r\n    function withdrowFunds() external onlyOwner {\r\n        uint256 amount = address(this).balance;\r\n        _splitFunds(amount);\r\n    }\r\n\r\n    function _splitFunds(uint256 _amount) internal {\r\n        uint256 walletAmount = (_amount * walletCut) / 10000;\r\n        uint256 charityAmount = (_amount * charityCut) / 10000;\r\n        _safeTransfer(charityWallet, charityAmount);\r\n        _safeTransfer(wallet, walletAmount);\r\n    }\r\n\r\n    function _safeTransfer(address _to, uint256 _value) internal {\r\n        (bool success, ) = _to.call{value: _value}(\"\");\r\n        require(success, \"Transfer Failed.\");\r\n    }\r\n\r\n    function addToWhitelist(address _beneficiary) external onlyWhitelister {\r\n        _addToWhitelist(_beneficiary);\r\n    }\r\n\r\n    function addManyToWhitelist(address[] memory _beneficiaries)\r\n        external\r\n        onlyWhitelister\r\n    {\r\n        _addManyToWhitelist(_beneficiaries);\r\n    }\r\n\r\n    function removeFromWhitelist(address _beneficiary)\r\n        external\r\n        onlyWhitelister\r\n    {\r\n        _removeFromWhitelist(_beneficiary);\r\n    }\r\n\r\n    function removeManyFromWhitelist(address[] memory _beneficiaries)\r\n        external\r\n        onlyWhitelister\r\n    {\r\n        _removeManyFromWhitelist(_beneficiaries);\r\n    }\r\n\r\n    function setPresaleTimeStamp(uint256 _newTimestamp) external onlyOwner {\r\n        require(block.timestamp < presaleTimestamp, \"presale already started\");\r\n        presaleTimestamp = _newTimestamp;\r\n    }\r\n\r\n    function setPublicsaleStartTimeStamp(uint256 _newTimestamp)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            block.timestamp < publicsaleStartTimestamp,\r\n            \"publicsale Already started\"\r\n        );\r\n\r\n        require(\r\n            _newTimestamp > presaleTimestamp,\r\n            \"Publicsale should be after presale\"\r\n        );\r\n        require(\r\n            block.timestamp < _newTimestamp,\r\n            \"Timestamp should be in the future\"\r\n        );\r\n        publicsaleStartTimestamp = _newTimestamp;\r\n    }\r\n\r\n    function setPublicsaleEndTimeStamp(uint256 _newTimestamp)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(block.timestamp < publicsaleEndTimestamp, \"sale finished\");\r\n\r\n        require(\r\n            _newTimestamp > publicsaleStartTimestamp,\r\n            \"Publicsale should be after publicsale start timestamp\"\r\n        );\r\n        require(\r\n            block.timestamp < _newTimestamp,\r\n            \"Timestamp should be in the future\"\r\n        );\r\n        publicsaleStartTimestamp = _newTimestamp;\r\n    }\r\n\r\n    function setUnverifiedLimit(uint256 _newLimit) external onlyOwner {\r\n        require(_newLimit != unverifiedLimit, \"new limit equals old limit\");\r\n        require(_newLimit != 0, \"new limit = 0\");\r\n\r\n        unverifiedLimit = _newLimit;\r\n    }\r\n\r\n    function setVerifiedLimit(uint256 _newLimit) external onlyOwner {\r\n        require(_newLimit != verifiedLimit, \"new limit equals old limit\");\r\n        require(_newLimit != 0, \"new limit = 0\");\r\n\r\n        verifiedLimit = _newLimit;\r\n    }\r\n\r\n    function setWallet(address payable _newWallet) external onlyOwner {\r\n        require(_newWallet != address(0), \"address 0\");\r\n        wallet = _newWallet;\r\n    }\r\n\r\n    function setCharityWallet(address payable _newWallet) external onlyOwner {\r\n        require(_newWallet != address(0), \"address 0\");\r\n        charityWallet = _newWallet;\r\n    }\r\n\r\n    function claimRemainingTokens() external onlyOwner {\r\n        require(\r\n            block.timestamp > publicsaleEndTimestamp,\r\n            \"sale is not finished\"\r\n        );\r\n        bool success = token.transfer(\r\n            msg.sender,\r\n            token.balanceOf(address(this))\r\n        );\r\n        require(success, \"Transfer Failed\");\r\n    }\r\n\r\n    function recoverBEP20(address tokenAddress, uint256 tokenAmount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(tokenAddress != address(token));\r\n        IBEP20(tokenAddress).transfer(msg.sender, tokenAmount);\r\n    }\r\n\r\n    fallback() external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    receive() external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n}\r\n\r\n// File: contracts/TokenLocker.sol\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\n\r\n\r\ncontract TokenLocker  is  Ownable{\r\n\r\n    struct LockedData {\r\n        uint256 amount;\r\n        uint256 unlockDate;\r\n        bool claimed;\r\n    }\r\n\r\n    IBEP20  public immutable  TOKEN;\r\n    mapping(address =>  LockedData []) public records;\r\n\r\n    constructor(address _token){\r\n        TOKEN = IBEP20(_token);\r\n        transferOwnership(owner());\r\n    }\r\n\r\n\r\n    function unlock(uint256 index, address _claimer) public onlyOwner returns(bool){\r\n        require(block.timestamp > records[_claimer][index].unlockDate, \"too Early\");\r\n        require(!records[_claimer][index].claimed, \"already Claimed.\");\r\n\r\n        LockedData storage frozen_balance = records[_claimer][index];\r\n        frozen_balance.claimed = true;\r\n        uint256 amount = frozen_balance.amount;\r\n        bool sucess = TOKEN.transfer(_claimer, amount);\r\n        require(sucess);\r\n        return sucess;\r\n    }\r\n\r\n\r\n    function lock(address _locker, uint256 amount, uint256 unlockDate, address _claimer) external onlyOwner returns(bool){\r\n        require(unlockDate > block.timestamp, \"unlock date must be in the future\");\r\n        require(amount > 0, \"amount 0\");\r\n        LockedData memory locked_data = LockedData(amount, unlockDate, false);\r\n        records[_claimer].push(locked_data);\r\n        bool sucess = TOKEN.transferFrom(_locker, address(this), amount);\r\n        require(sucess);\r\n        return true;\r\n    }\r\n\r\n    function claimable(uint256 index, address _claimer) public view returns(bool, uint){\r\n        if(records[_claimer].length <= index){\r\n            return (false, 0);\r\n        }\r\n        LockedData memory lockedBalance = records[_claimer][index];\r\n        if (lockedBalance.claimed || lockedBalance.unlockDate > block.timestamp){\r\n            return (false, 0);\r\n        }\r\n        return (true, lockedBalance.amount);\r\n    }\r\n\r\n    function unlockAllClaimableTokens(address _claimer) external returns(uint256){\r\n        LockedData [] memory lockedData = records[_claimer];\r\n        require(getListLength(_claimer) > 0, \"No locked Balance\");\r\n        uint256 totalAmount = 0;\r\n        for(uint256 i = 0; i < lockedData.length; i++){\r\n            (bool cond, uint256 amount) = claimable(i, _claimer);\r\n            if(cond){\r\n                unlock(i, _claimer);\r\n                totalAmount += amount;\r\n            }\r\n        }\r\n        require(totalAmount > 0, \"No Claimable Tokens\");\r\n        return totalAmount;\r\n    }\r\n\r\n    function amountOfClaimableTokens(address _claimer) external view returns(uint){\r\n        if(getListLength(_claimer) == 0){\r\n            return 0;\r\n        }\r\n\r\n        LockedData [] memory lockedData = records[_claimer];\r\n        uint256 totalAmount = 0;\r\n        for(uint256 i = 0; i < lockedData.length; i++){\r\n            (bool cond, uint256 amount) = claimable(i, _claimer);\r\n            if(cond){\r\n                totalAmount += amount;\r\n            }\r\n        }\r\n        if(totalAmount == 0){\r\n            return 0;\r\n        }\r\n        return totalAmount;\r\n    }\r\n\r\n    function getListLength(address _claimer) public view returns(uint256){\r\n        return records[_claimer].length;\r\n    }\r\n\r\n}\r\n// File: contracts/interfaces/IBEP20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IBEP20Metadata is IBEP20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: contracts/BEP20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract BEP20 is Context, IBEP20, IBEP20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: contracts/Token.sol\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Token is BEP20, Ownable {\r\n    TokenLocker public tokenLocker;\r\n    TokenSale public tokenSale;\r\n    mapping(address => uint256) public lockedBalance;\r\n\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 initialSupply\r\n    ) BEP20(name, symbol) {\r\n        _mint(msg.sender, initialSupply);\r\n        tokenLocker = new TokenLocker(address(this));\r\n    }\r\n\r\n    function setTokenSale(address payable tokenSale_) external onlyOwner {\r\n        tokenSale = TokenSale(tokenSale_);\r\n    }\r\n\r\n    function setTokenLocker(address tokenLocker_) external onlyOwner {\r\n        require(tokenLocker_ != address(0), \"0 address\");\r\n        tokenLocker = TokenLocker(tokenLocker_);\r\n    }\r\n\r\n    function sendLockedTokens(\r\n        address _account,\r\n        uint256 _timestamp,\r\n        uint256 _amount\r\n    ) external onlyOwner {\r\n        /*\r\n            TokenLocker contract call\r\n            lock(address freezer, uint256 amount, uint256 unlockDate, address _claimer) returns bool\r\n        */\r\n        require(_amount > 0, \"amount 0\");\r\n        _locked_add(_account, _amount);\r\n        _approve(msg.sender, address(tokenLocker), _amount);\r\n        bool success = tokenLocker.lock(\r\n            msg.sender,\r\n            _amount,\r\n            _timestamp,\r\n            _account\r\n        );\r\n        require(success, \"\");\r\n    }\r\n\r\n    function unlockTokens(address _account, uint256 _index) external {\r\n        /*\r\n            TokenLocker contract call\r\n            unfreez(uint256 index, address _claimer) public returns(uint)\r\n        */\r\n        require(lockedBalance[_account] > 0, \"No locked Balance\");\r\n\r\n        (bool claimable, uint256 amount) = tokenLocker.claimable(\r\n            _index,\r\n            _account\r\n        );\r\n        require(claimable, \"not Claimable\");\r\n        _locked_sub(_account, amount);\r\n        bool success = tokenLocker.unlock(_index, _account);\r\n        require(success);\r\n        \r\n        \r\n        \r\n    }\r\n    \r\n\r\n    function unlockAllTokens(address _account) external {\r\n        require(lockedBalance[_account] > 0, \"No locked Balance\");\r\n        uint256 amount = tokenLocker.unlockAllClaimableTokens(_account);\r\n        _locked_sub(_account, amount);\r\n        require(amount > 0);\r\n   \r\n    }\r\n    \r\n    function amountOfClaimableTokens(address _account)external view returns (uint){\r\n        return tokenLocker.amountOfClaimableTokens(_account);\r\n    }\r\n\r\n    function _locked_add(address _account, uint256 _amount)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        lockedBalance[_account] += _amount;\r\n        return true;\r\n    }\r\n\r\n    function _locked_sub(address _account, uint256 _amount)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        lockedBalance[_account] -= _amount;\r\n        return true;\r\n    }\r\n\r\n    function recoverBEP20(address tokenAddress, uint256 tokenAmount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        IBEP20(tokenAddress).transfer(msg.sender, tokenAmount);\r\n    }\r\n\r\n    fallback() external payable {\r\n        tokenSale.buyTokens{value: msg.value}(msg.sender);\r\n    }\r\n\r\n    receive() external payable {\r\n        tokenSale.buyTokens{value: msg.value}(msg.sender);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"amountOfClaimableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverBEP20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendLockedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLocker_\",\"type\":\"address\"}],\"name\":\"setTokenLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"tokenSale_\",\"type\":\"address\"}],\"name\":\"setTokenSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLocker\",\"outputs\":[{\"internalType\":\"contract TokenLocker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSale\",\"outputs\":[{\"internalType\":\"contract TokenSale\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unlockAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"unlockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000013491386a834cc1dc8b20907a80000000000000000000000000000000000000000000000000000000000000000000000006474357696e65000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034743570000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cd717e1b1e09623276c9b311ff6c7426ab908c2dd498e9097ee4dc96b2f74866"}