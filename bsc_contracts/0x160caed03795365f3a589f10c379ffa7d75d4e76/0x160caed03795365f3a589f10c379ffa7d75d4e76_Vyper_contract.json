{"SourceCode": "# @version 0.2.11\r\n# (c) Curve.Fi, 2020\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\ninterface CurveToken:\r\n    def totalSupply() -> uint256: view\r\n    def mint(_to: address, _value: uint256) -> bool: nonpayable\r\n    def burnFrom(_to: address, _value: uint256) -> bool: nonpayable\r\n\r\n\r\ninterface FeeConverter:\r\n    def convertFees(i: uint256, j: uint256): nonpayable\r\n    def notify(addr: address): nonpayable\r\n\r\n\r\n# Events\r\nevent TokenExchange:\r\n    buyer: indexed(address)\r\n    sold_id: int128\r\n    tokens_sold: uint256\r\n    bought_id: int128\r\n    tokens_bought: uint256\r\n\r\n\r\nevent AddLiquidity:\r\n    provider: indexed(address)\r\n    token_amounts: uint256[N_COINS]\r\n    fees: uint256[N_COINS]\r\n    invariant: uint256\r\n    token_supply: uint256\r\n\r\nevent RemoveLiquidity:\r\n    provider: indexed(address)\r\n    token_amounts: uint256[N_COINS]\r\n    fees: uint256[N_COINS]\r\n    token_supply: uint256\r\n\r\nevent RemoveLiquidityOne:\r\n    provider: indexed(address)\r\n    token_amount: uint256\r\n    coin_amount: uint256\r\n\r\nevent RemoveLiquidityImbalance:\r\n    provider: indexed(address)\r\n    token_amounts: uint256[N_COINS]\r\n    fees: uint256[N_COINS]\r\n    invariant: uint256\r\n    token_supply: uint256\r\n\r\nevent CommitNewAdmin:\r\n    deadline: indexed(uint256)\r\n    admin: indexed(address)\r\n\r\nevent NewAdmin:\r\n    admin: indexed(address)\r\n\r\n\r\nevent CommitNewFee:\r\n    deadline: indexed(uint256)\r\n    fee: uint256\r\n    admin_fee: uint256\r\n\r\nevent NewFee:\r\n    fee: uint256\r\n    admin_fee: uint256\r\n\r\nevent RampA:\r\n    old_A: uint256\r\n    new_A: uint256\r\n    initial_time: uint256\r\n    future_time: uint256\r\n\r\nevent StopRampA:\r\n    A: uint256\r\n    t: uint256\r\n\r\n\r\n# This can (and needs to) be changed at compile time\r\nN_COINS: constant(int128) = 3  # <- change\r\n\r\nFEE_DENOMINATOR: constant(uint256) = 10 ** 10\r\nLENDING_PRECISION: constant(uint256) = 10 ** 18\r\nPRECISION: constant(uint256) = 10 ** 18  # The precision to convert to\r\nPRECISION_MUL: constant(uint256[N_COINS]) = [1, 1, 1]\r\nRATES: constant(uint256[N_COINS]) = [1000000000000000000, 1000000000000000000, 1000000000000000000]\r\nFEE_INDEX: constant(int128) = 2  # Which coin may potentially have fees (USDT)\r\n\r\nMAX_ADMIN_FEE: constant(uint256) = 10 * 10 ** 9\r\nMAX_FEE: constant(uint256) = 5 * 10 ** 9\r\nMAX_A: constant(uint256) = 10 ** 6\r\nMAX_A_CHANGE: constant(uint256) = 10\r\n\r\nADMIN_ACTIONS_DELAY: constant(uint256) = 3 * 86400\r\nMIN_RAMP_TIME: constant(uint256) = 86400\r\n\r\ncoins: public(address[N_COINS])\r\nbalances: public(uint256[N_COINS])\r\nfee: public(uint256)  # fee * 1e10\r\nadmin_fee: public(uint256)  # admin_fee * 1e10\r\n\r\nowner: public(address)\r\nfee_converter: public(address)\r\ntoken: CurveToken\r\n\r\ninitial_A: public(uint256)\r\nfuture_A: public(uint256)\r\ninitial_A_time: public(uint256)\r\nfuture_A_time: public(uint256)\r\n\r\nadmin_actions_deadline: public(uint256)\r\ntransfer_ownership_deadline: public(uint256)\r\nfuture_fee: public(uint256)\r\nfuture_admin_fee: public(uint256)\r\nfuture_owner: public(address)\r\n\r\nis_killed: bool\r\nkill_deadline: uint256\r\nKILL_DEADLINE_DT: constant(uint256) = 2 * 30 * 86400\r\n\r\n\r\n@external\r\ndef __init__(\r\n    _owner: address,\r\n    _coins: address[N_COINS],\r\n    _pool_token: address,\r\n    _A: uint256,\r\n    _fee: uint256,\r\n    _admin_fee: uint256,\r\n    _fee_converter: address,\r\n):\r\n    \"\"\"\r\n    @notice Contract constructor\r\n    @param _owner Contract owner address\r\n    @param _coins Addresses of ERC20 conracts of coins\r\n    @param _pool_token Address of the token representing LP share\r\n    @param _A Amplification coefficient multiplied by n * (n - 1)\r\n    @param _fee Fee to charge for exchanges\r\n    @param _admin_fee Admin fee\r\n    \"\"\"\r\n    for i in range(N_COINS):\r\n        assert _coins[i] != ZERO_ADDRESS\r\n    self.coins = _coins\r\n    self.initial_A = _A\r\n    self.future_A = _A\r\n    self.fee = _fee\r\n    self.admin_fee = _admin_fee\r\n    self.owner = _owner\r\n    self.kill_deadline = block.timestamp + KILL_DEADLINE_DT\r\n    self.token = CurveToken(_pool_token)\r\n    self.fee_converter = _fee_converter\r\n\r\n\r\n@view\r\n@internal\r\ndef _A() -> uint256:\r\n    \"\"\"\r\n    Handle ramping A up or down\r\n    \"\"\"\r\n    t1: uint256 = self.future_A_time\r\n    A1: uint256 = self.future_A\r\n\r\n    if block.timestamp < t1:\r\n        A0: uint256 = self.initial_A\r\n        t0: uint256 = self.initial_A_time\r\n        # Expressions in uint256 cannot have negative numbers, thus \"if\"\r\n        if A1 > A0:\r\n            return A0 + (A1 - A0) * (block.timestamp - t0) / (t1 - t0)\r\n        else:\r\n            return A0 - (A0 - A1) * (block.timestamp - t0) / (t1 - t0)\r\n\r\n    else:  # when t1 == 0 or block.timestamp >= t1\r\n        return A1\r\n\r\n\r\n@view\r\n@external\r\ndef A() -> uint256:\r\n    return self._A()\r\n\r\n\r\n@view\r\n@internal\r\ndef _xp() -> uint256[N_COINS]:\r\n    result: uint256[N_COINS] = RATES\r\n    for i in range(N_COINS):\r\n        result[i] = result[i] * self.balances[i] / LENDING_PRECISION\r\n    return result\r\n\r\n\r\n@pure\r\n@internal\r\ndef _xp_mem(_balances: uint256[N_COINS]) -> uint256[N_COINS]:\r\n    result: uint256[N_COINS] = RATES\r\n    for i in range(N_COINS):\r\n        result[i] = result[i] * _balances[i] / PRECISION\r\n    return result\r\n\r\n\r\n@pure\r\n@internal\r\ndef get_D(xp: uint256[N_COINS], amp: uint256) -> uint256:\r\n    S: uint256 = 0\r\n    for _x in xp:\r\n        S += _x\r\n    if S == 0:\r\n        return 0\r\n\r\n    Dprev: uint256 = 0\r\n    D: uint256 = S\r\n    Ann: uint256 = amp * N_COINS\r\n    for _i in range(255):\r\n        D_P: uint256 = D\r\n        for _x in xp:\r\n            D_P = D_P * D / (_x * N_COINS)  # If division by 0, this will be borked: only withdrawal will work. And that is good\r\n        Dprev = D\r\n        D = (Ann * S + D_P * N_COINS) * D / ((Ann - 1) * D + (N_COINS + 1) * D_P)\r\n        # Equality with the precision of 1\r\n        if D > Dprev:\r\n            if D - Dprev <= 1:\r\n                break\r\n        else:\r\n            if Dprev - D <= 1:\r\n                break\r\n    return D\r\n\r\n\r\n@view\r\n@internal\r\ndef get_D_mem(_balances: uint256[N_COINS], amp: uint256) -> uint256:\r\n    return self.get_D(self._xp_mem(_balances), amp)\r\n\r\n\r\n@view\r\n@external\r\ndef get_virtual_price() -> uint256:\r\n    \"\"\"\r\n    Returns portfolio virtual price (for calculating profit)\r\n    scaled up by 1e18\r\n    \"\"\"\r\n    D: uint256 = self.get_D(self._xp(), self._A())\r\n    # D is in the units similar to DAI (e.g. converted to precision 1e18)\r\n    # When balanced, D = n * x_u - total virtual value of the portfolio\r\n    token_supply: uint256 = self.token.totalSupply()\r\n    return D * PRECISION / token_supply\r\n\r\n\r\n@view\r\n@external\r\ndef calc_token_amount(amounts: uint256[N_COINS], deposit: bool) -> uint256:\r\n    \"\"\"\r\n    Simplified method to calculate addition or reduction in token supply at\r\n    deposit or withdrawal without taking fees into account (but looking at\r\n    slippage).\r\n    Needed to prevent front-running, not for precise calculations!\r\n    \"\"\"\r\n    _balances: uint256[N_COINS] = self.balances\r\n    amp: uint256 = self._A()\r\n    D0: uint256 = self.get_D_mem(_balances, amp)\r\n    for i in range(N_COINS):\r\n        if deposit:\r\n            _balances[i] += amounts[i]\r\n        else:\r\n            _balances[i] -= amounts[i]\r\n    D1: uint256 = self.get_D_mem(_balances, amp)\r\n    token_amount: uint256 = self.token.totalSupply()\r\n    diff: uint256 = 0\r\n    if deposit:\r\n        diff = D1 - D0\r\n    else:\r\n        diff = D0 - D1\r\n    return diff * token_amount / D0\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef add_liquidity(amounts: uint256[N_COINS], min_mint_amount: uint256):\r\n    assert not self.is_killed  # dev: is killed\r\n\r\n    fees: uint256[N_COINS] = empty(uint256[N_COINS])\r\n    _fee: uint256 = self.fee * N_COINS / (4 * (N_COINS - 1))\r\n    _admin_fee: uint256 = self.admin_fee\r\n    amp: uint256 = self._A()\r\n\r\n    token_supply: uint256 = self.token.totalSupply()\r\n    # Initial invariant\r\n    D0: uint256 = 0\r\n    old_balances: uint256[N_COINS] = self.balances\r\n    if token_supply > 0:\r\n        D0 = self.get_D_mem(old_balances, amp)\r\n    new_balances: uint256[N_COINS] = old_balances\r\n\r\n    for i in range(N_COINS):\r\n        in_amount: uint256 = amounts[i]\r\n        if token_supply == 0:\r\n            assert in_amount > 0  # dev: initial deposit requires all coins\r\n        in_coin: address = self.coins[i]\r\n\r\n        # Take coins from the sender\r\n        if in_amount > 0:\r\n            if i == FEE_INDEX:\r\n                in_amount = ERC20(in_coin).balanceOf(self)\r\n\r\n            # \"safeTransferFrom\" which works for ERC20s which return bool or not\r\n            _response: Bytes[32] = raw_call(\r\n                in_coin,\r\n                concat(\r\n                    method_id(\"transferFrom(address,address,uint256)\"),\r\n                    convert(msg.sender, bytes32),\r\n                    convert(self, bytes32),\r\n                    convert(amounts[i], bytes32),\r\n                ),\r\n                max_outsize=32,\r\n            )  # dev: failed transfer\r\n            if len(_response) > 0:\r\n                assert convert(_response, bool)  # dev: failed transfer\r\n\r\n            if i == FEE_INDEX:\r\n                in_amount = ERC20(in_coin).balanceOf(self) - in_amount\r\n\r\n        new_balances[i] = old_balances[i] + in_amount\r\n\r\n    # Invariant after change\r\n    D1: uint256 = self.get_D_mem(new_balances, amp)\r\n    assert D1 > D0\r\n\r\n    # We need to recalculate the invariant accounting for fees\r\n    # to calculate fair user's share\r\n    D2: uint256 = D1\r\n    if token_supply > 0:\r\n        # Only account for fees if we are not the first to deposit\r\n        for i in range(N_COINS):\r\n            ideal_balance: uint256 = D1 * old_balances[i] / D0\r\n            difference: uint256 = 0\r\n            if ideal_balance > new_balances[i]:\r\n                difference = ideal_balance - new_balances[i]\r\n            else:\r\n                difference = new_balances[i] - ideal_balance\r\n            fees[i] = _fee * difference / FEE_DENOMINATOR\r\n            self.balances[i] = new_balances[i] - (fees[i] * _admin_fee / FEE_DENOMINATOR)\r\n            new_balances[i] -= fees[i]\r\n        D2 = self.get_D_mem(new_balances, amp)\r\n    else:\r\n        self.balances = new_balances\r\n\r\n    # Calculate, how much pool tokens to mint\r\n    mint_amount: uint256 = 0\r\n    if token_supply == 0:\r\n        mint_amount = D1  # Take the dust if there was any\r\n    else:\r\n        mint_amount = token_supply * (D2 - D0) / D0\r\n\r\n    assert mint_amount >= min_mint_amount, \"Slippage screwed you\"\r\n\r\n    # Mint pool tokens\r\n    self.token.mint(msg.sender, mint_amount)\r\n\r\n    log AddLiquidity(msg.sender, amounts, fees, D1, token_supply + mint_amount)\r\n\r\n\r\n@view\r\n@internal\r\ndef get_y(i: int128, j: int128, x: uint256, xp_: uint256[N_COINS]) -> uint256:\r\n    # x in the input is converted to the same price/precision\r\n\r\n    assert i != j       # dev: same coin\r\n    assert j >= 0       # dev: j below zero\r\n    assert j < N_COINS  # dev: j above N_COINS\r\n\r\n    # should be unreachable, but good for safety\r\n    assert i >= 0\r\n    assert i < N_COINS\r\n\r\n    amp: uint256 = self._A()\r\n    D: uint256 = self.get_D(xp_, amp)\r\n    c: uint256 = D\r\n    S_: uint256 = 0\r\n    Ann: uint256 = amp * N_COINS\r\n\r\n    _x: uint256 = 0\r\n    for _i in range(N_COINS):\r\n        if _i == i:\r\n            _x = x\r\n        elif _i != j:\r\n            _x = xp_[_i]\r\n        else:\r\n            continue\r\n        S_ += _x\r\n        c = c * D / (_x * N_COINS)\r\n    c = c * D / (Ann * N_COINS)\r\n    b: uint256 = S_ + D / Ann  # - D\r\n    y_prev: uint256 = 0\r\n    y: uint256 = D\r\n    for _i in range(255):\r\n        y_prev = y\r\n        y = (y*y + c) / (2 * y + b - D)\r\n        # Equality with the precision of 1\r\n        if y > y_prev:\r\n            if y - y_prev <= 1:\r\n                break\r\n        else:\r\n            if y_prev - y <= 1:\r\n                break\r\n    return y\r\n\r\n\r\n@view\r\n@external\r\ndef get_dy(i: int128, j: int128, dx: uint256) -> uint256:\r\n    # dx and dy in c-units\r\n    rates: uint256[N_COINS] = RATES\r\n    xp: uint256[N_COINS] = self._xp()\r\n\r\n    x: uint256 = xp[i] + (dx * rates[i] / PRECISION)\r\n    y: uint256 = self.get_y(i, j, x, xp)\r\n    dy: uint256 = (xp[j] - y - 1) * PRECISION / rates[j]\r\n    _fee: uint256 = self.fee * dy / FEE_DENOMINATOR\r\n    return dy - _fee\r\n\r\n\r\n@view\r\n@external\r\ndef get_dy_underlying(i: int128, j: int128, dx: uint256) -> uint256:\r\n    # dx and dy in underlying units\r\n    xp: uint256[N_COINS] = self._xp()\r\n    precisions: uint256[N_COINS] = PRECISION_MUL\r\n\r\n    x: uint256 = xp[i] + dx * precisions[i]\r\n    y: uint256 = self.get_y(i, j, x, xp)\r\n    dy: uint256 = (xp[j] - y - 1) / precisions[j]\r\n    _fee: uint256 = self.fee * dy / FEE_DENOMINATOR\r\n    return dy - _fee\r\n\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef exchange(i: int128, j: int128, dx: uint256, min_dy: uint256):\r\n    assert not self.is_killed  # dev: is killed\r\n    rates: uint256[N_COINS] = RATES\r\n\r\n    old_balances: uint256[N_COINS] = self.balances\r\n    xp: uint256[N_COINS] = self._xp_mem(old_balances)\r\n\r\n    # Handling an unexpected charge of a fee on transfer (USDT, PAXG)\r\n    dx_w_fee: uint256 = dx\r\n    input_coin: address = self.coins[i]\r\n\r\n    if i == FEE_INDEX:\r\n        dx_w_fee = ERC20(input_coin).balanceOf(self)\r\n\r\n    # \"safeTransferFrom\" which works for ERC20s which return bool or not\r\n    _response: Bytes[32] = raw_call(\r\n        input_coin,\r\n        concat(\r\n            method_id(\"transferFrom(address,address,uint256)\"),\r\n            convert(msg.sender, bytes32),\r\n            convert(self, bytes32),\r\n            convert(dx, bytes32),\r\n        ),\r\n        max_outsize=32,\r\n    )  # dev: failed transfer\r\n    if len(_response) > 0:\r\n        assert convert(_response, bool)  # dev: failed transfer\r\n\r\n    if i == FEE_INDEX:\r\n        dx_w_fee = ERC20(input_coin).balanceOf(self) - dx_w_fee\r\n\r\n    x: uint256 = xp[i] + dx_w_fee * rates[i] / PRECISION\r\n    y: uint256 = self.get_y(i, j, x, xp)\r\n\r\n    dy: uint256 = xp[j] - y - 1  # -1 just in case there were some rounding errors\r\n    dy_fee: uint256 = dy * self.fee / FEE_DENOMINATOR\r\n\r\n    # Convert all to real units\r\n    dy = (dy - dy_fee) * PRECISION / rates[j]\r\n    assert dy >= min_dy, \"Exchange resulted in fewer coins than expected\"\r\n\r\n    dy_admin_fee: uint256 = dy_fee * self.admin_fee / FEE_DENOMINATOR\r\n    dy_admin_fee = dy_admin_fee * PRECISION / rates[j]\r\n\r\n    # Change balances exactly in same way as we change actual ERC20 coin amounts\r\n    self.balances[i] = old_balances[i] + dx_w_fee\r\n    # When rounding errors happen, we undercharge admin fee in favor of LP\r\n    self.balances[j] = old_balances[j] - dy - dy_admin_fee\r\n\r\n    # \"safeTransfer\" which works for ERC20s which return bool or not\r\n    _response = raw_call(\r\n        self.coins[j],\r\n        concat(\r\n            method_id(\"transfer(address,uint256)\"),\r\n            convert(msg.sender, bytes32),\r\n            convert(dy, bytes32),\r\n        ),\r\n        max_outsize=32,\r\n    )  # dev: failed transfer\r\n    if len(_response) > 0:\r\n        assert convert(_response, bool)  # dev: failed transfer\r\n\r\n    log TokenExchange(msg.sender, i, dx, j, dy)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef remove_liquidity(_amount: uint256, min_amounts: uint256[N_COINS]):\r\n    total_supply: uint256 = self.token.totalSupply()\r\n    amounts: uint256[N_COINS] = empty(uint256[N_COINS])\r\n    fees: uint256[N_COINS] = empty(uint256[N_COINS])  # Fees are unused but we've got them historically in event\r\n\r\n    for i in range(N_COINS):\r\n        value: uint256 = self.balances[i] * _amount / total_supply\r\n        assert value >= min_amounts[i], \"Withdrawal resulted in fewer coins than expected\"\r\n        self.balances[i] -= value\r\n        amounts[i] = value\r\n\r\n        # \"safeTransfer\" which works for ERC20s which return bool or not\r\n        _response: Bytes[32] = raw_call(\r\n            self.coins[i],\r\n            concat(\r\n                method_id(\"transfer(address,uint256)\"),\r\n                convert(msg.sender, bytes32),\r\n                convert(value, bytes32),\r\n            ),\r\n            max_outsize=32,\r\n        )  # dev: failed transfer\r\n        if len(_response) > 0:\r\n            assert convert(_response, bool)  # dev: failed transfer\r\n\r\n    self.token.burnFrom(msg.sender, _amount)  # dev: insufficient funds\r\n\r\n    log RemoveLiquidity(msg.sender, amounts, fees, total_supply - _amount)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef remove_liquidity_imbalance(amounts: uint256[N_COINS], max_burn_amount: uint256):\r\n    assert not self.is_killed  # dev: is killed\r\n\r\n    token_supply: uint256 = self.token.totalSupply()\r\n    assert token_supply != 0  # dev: zero total supply\r\n    _fee: uint256 = self.fee * N_COINS / (4 * (N_COINS - 1))\r\n    _admin_fee: uint256 = self.admin_fee\r\n    amp: uint256 = self._A()\r\n\r\n    old_balances: uint256[N_COINS] = self.balances\r\n    new_balances: uint256[N_COINS] = old_balances\r\n    D0: uint256 = self.get_D_mem(old_balances, amp)\r\n    for i in range(N_COINS):\r\n        new_balances[i] -= amounts[i]\r\n    D1: uint256 = self.get_D_mem(new_balances, amp)\r\n    fees: uint256[N_COINS] = empty(uint256[N_COINS])\r\n    for i in range(N_COINS):\r\n        ideal_balance: uint256 = D1 * old_balances[i] / D0\r\n        difference: uint256 = 0\r\n        if ideal_balance > new_balances[i]:\r\n            difference = ideal_balance - new_balances[i]\r\n        else:\r\n            difference = new_balances[i] - ideal_balance\r\n        fees[i] = _fee * difference / FEE_DENOMINATOR\r\n        self.balances[i] = new_balances[i] - (fees[i] * _admin_fee / FEE_DENOMINATOR)\r\n        new_balances[i] -= fees[i]\r\n    D2: uint256 = self.get_D_mem(new_balances, amp)\r\n\r\n    token_amount: uint256 = (D0 - D2) * token_supply / D0\r\n    assert token_amount != 0  # dev: zero tokens burned\r\n    token_amount += 1  # In case of rounding errors - make it unfavorable for the \"attacker\"\r\n    assert token_amount <= max_burn_amount, \"Slippage screwed you\"\r\n\r\n    self.token.burnFrom(msg.sender, token_amount)  # dev: insufficient funds\r\n    for i in range(N_COINS):\r\n        if amounts[i] != 0:\r\n\r\n            # \"safeTransfer\" which works for ERC20s which return bool or not\r\n            _response: Bytes[32] = raw_call(\r\n                self.coins[i],\r\n                concat(\r\n                    method_id(\"transfer(address,uint256)\"),\r\n                    convert(msg.sender, bytes32),\r\n                    convert(amounts[i], bytes32),\r\n                ),\r\n                max_outsize=32,\r\n            )  # dev: failed transfer\r\n            if len(_response) > 0:\r\n                assert convert(_response, bool)  # dev: failed transfer\r\n\r\n    log RemoveLiquidityImbalance(msg.sender, amounts, fees, D1, token_supply - token_amount)\r\n\r\n\r\n@view\r\n@internal\r\ndef get_y_D(A_: uint256, i: int128, xp: uint256[N_COINS], D: uint256) -> uint256:\r\n    \"\"\"\r\n    Calculate x[i] if one reduces D from being calculated for xp to D\r\n\r\n    Done by solving quadratic equation iteratively.\r\n    x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\r\n    x_1**2 + b*x_1 = c\r\n\r\n    x_1 = (x_1**2 + c) / (2*x_1 + b)\r\n    \"\"\"\r\n    # x in the input is converted to the same price/precision\r\n\r\n    assert i >= 0  # dev: i below zero\r\n    assert i < N_COINS  # dev: i above N_COINS\r\n\r\n    c: uint256 = D\r\n    S_: uint256 = 0\r\n    Ann: uint256 = A_ * N_COINS\r\n\r\n    _x: uint256 = 0\r\n    for _i in range(N_COINS):\r\n        if _i != i:\r\n            _x = xp[_i]\r\n        else:\r\n            continue\r\n        S_ += _x\r\n        c = c * D / (_x * N_COINS)\r\n    c = c * D / (Ann * N_COINS)\r\n    b: uint256 = S_ + D / Ann\r\n    y_prev: uint256 = 0\r\n    y: uint256 = D\r\n    for _i in range(255):\r\n        y_prev = y\r\n        y = (y*y + c) / (2 * y + b - D)\r\n        # Equality with the precision of 1\r\n        if y > y_prev:\r\n            if y - y_prev <= 1:\r\n                break\r\n        else:\r\n            if y_prev - y <= 1:\r\n                break\r\n    return y\r\n\r\n\r\n@view\r\n@internal\r\ndef _calc_withdraw_one_coin(_token_amount: uint256, i: int128) -> (uint256, uint256):\r\n    # First, need to calculate\r\n    # * Get current D\r\n    # * Solve Eqn against y_i for D - _token_amount\r\n    amp: uint256 = self._A()\r\n    _fee: uint256 = self.fee * N_COINS / (4 * (N_COINS - 1))\r\n    precisions: uint256[N_COINS] = PRECISION_MUL\r\n    total_supply: uint256 = self.token.totalSupply()\r\n\r\n    xp: uint256[N_COINS] = self._xp()\r\n\r\n    D0: uint256 = self.get_D(xp, amp)\r\n    D1: uint256 = D0 - _token_amount * D0 / total_supply\r\n    xp_reduced: uint256[N_COINS] = xp\r\n\r\n    new_y: uint256 = self.get_y_D(amp, i, xp, D1)\r\n    dy_0: uint256 = (xp[i] - new_y) / precisions[i]  # w/o fees\r\n\r\n    for j in range(N_COINS):\r\n        dx_expected: uint256 = 0\r\n        if j == i:\r\n            dx_expected = xp[j] * D1 / D0 - new_y\r\n        else:\r\n            dx_expected = xp[j] - xp[j] * D1 / D0\r\n        xp_reduced[j] -= _fee * dx_expected / FEE_DENOMINATOR\r\n\r\n    dy: uint256 = xp_reduced[i] - self.get_y_D(amp, i, xp_reduced, D1)\r\n    dy = (dy - 1) / precisions[i]  # Withdraw less to account for rounding errors\r\n\r\n    return dy, dy_0 - dy\r\n\r\n\r\n@view\r\n@external\r\ndef calc_withdraw_one_coin(_token_amount: uint256, i: int128) -> uint256:\r\n    return self._calc_withdraw_one_coin(_token_amount, i)[0]\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef remove_liquidity_one_coin(_token_amount: uint256, i: int128, min_amount: uint256):\r\n    \"\"\"\r\n    Remove _amount of liquidity all in a form of coin i\r\n    \"\"\"\r\n    assert not self.is_killed  # dev: is killed\r\n\r\n    dy: uint256 = 0\r\n    dy_fee: uint256 = 0\r\n    dy, dy_fee = self._calc_withdraw_one_coin(_token_amount, i)\r\n    assert dy >= min_amount, \"Not enough coins removed\"\r\n\r\n    self.balances[i] -= (dy + dy_fee * self.admin_fee / FEE_DENOMINATOR)\r\n    self.token.burnFrom(msg.sender, _token_amount)  # dev: insufficient funds\r\n\r\n    # \"safeTransfer\" which works for ERC20s which return bool or not\r\n    _response: Bytes[32] = raw_call(\r\n        self.coins[i],\r\n        concat(\r\n            method_id(\"transfer(address,uint256)\"),\r\n            convert(msg.sender, bytes32),\r\n            convert(dy, bytes32),\r\n        ),\r\n        max_outsize=32,\r\n    )  # dev: failed transfer\r\n    if len(_response) > 0:\r\n        assert convert(_response, bool)  # dev: failed transfer\r\n\r\n    log RemoveLiquidityOne(msg.sender, _token_amount, dy)\r\n\r\n\r\n### Admin functions ###\r\n@external\r\ndef ramp_A(_future_A: uint256, _future_time: uint256):\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    assert block.timestamp >= self.initial_A_time + MIN_RAMP_TIME\r\n    assert _future_time >= block.timestamp + MIN_RAMP_TIME  # dev: insufficient time\r\n\r\n    _initial_A: uint256 = self._A()\r\n    assert (_future_A > 0) and (_future_A < MAX_A)\r\n    assert ((_future_A >= _initial_A) and (_future_A <= _initial_A * MAX_A_CHANGE)) or\\\r\n           ((_future_A < _initial_A) and (_future_A * MAX_A_CHANGE >= _initial_A))\r\n    self.initial_A = _initial_A\r\n    self.future_A = _future_A\r\n    self.initial_A_time = block.timestamp\r\n    self.future_A_time = _future_time\r\n\r\n    log RampA(_initial_A, _future_A, block.timestamp, _future_time)\r\n\r\n\r\n@external\r\ndef stop_ramp_A():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n\r\n    current_A: uint256 = self._A()\r\n    self.initial_A = current_A\r\n    self.future_A = current_A\r\n    self.initial_A_time = block.timestamp\r\n    self.future_A_time = block.timestamp\r\n    # now (block.timestamp < t1) is always False, so we return saved A\r\n\r\n    log StopRampA(current_A, block.timestamp)\r\n\r\n\r\n@external\r\ndef commit_new_fee(new_fee: uint256, new_admin_fee: uint256):\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    assert self.admin_actions_deadline == 0  # dev: active action\r\n    assert new_fee <= MAX_FEE  # dev: fee exceeds maximum\r\n    assert new_admin_fee <= MAX_ADMIN_FEE  # dev: admin fee exceeds maximum\r\n\r\n    _deadline: uint256 = block.timestamp + ADMIN_ACTIONS_DELAY\r\n    self.admin_actions_deadline = _deadline\r\n    self.future_fee = new_fee\r\n    self.future_admin_fee = new_admin_fee\r\n\r\n    log CommitNewFee(_deadline, new_fee, new_admin_fee)\r\n\r\n\r\n@external\r\ndef apply_new_fee():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    assert block.timestamp >= self.admin_actions_deadline  # dev: insufficient time\r\n    assert self.admin_actions_deadline != 0  # dev: no active action\r\n\r\n    self.admin_actions_deadline = 0\r\n    _fee: uint256 = self.future_fee\r\n    _admin_fee: uint256 = self.future_admin_fee\r\n    self.fee = _fee\r\n    self.admin_fee = _admin_fee\r\n\r\n    log NewFee(_fee, _admin_fee)\r\n\r\n\r\n@external\r\ndef revert_new_parameters():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n\r\n    self.admin_actions_deadline = 0\r\n\r\n\r\n@external\r\ndef commit_transfer_ownership(_owner: address):\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    assert self.transfer_ownership_deadline == 0  # dev: active transfer\r\n\r\n    _deadline: uint256 = block.timestamp + ADMIN_ACTIONS_DELAY\r\n    self.transfer_ownership_deadline = _deadline\r\n    self.future_owner = _owner\r\n\r\n    log CommitNewAdmin(_deadline, _owner)\r\n\r\n\r\n@external\r\ndef apply_transfer_ownership():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    assert block.timestamp >= self.transfer_ownership_deadline  # dev: insufficient time\r\n    assert self.transfer_ownership_deadline != 0  # dev: no active transfer\r\n\r\n    self.transfer_ownership_deadline = 0\r\n    _owner: address = self.future_owner\r\n    self.owner = _owner\r\n\r\n    log NewAdmin(_owner)\r\n\r\n\r\n@external\r\ndef revert_transfer_ownership():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n\r\n    self.transfer_ownership_deadline = 0\r\n\r\n\r\n@view\r\n@external\r\ndef admin_balances(i: uint256) -> uint256:\r\n    return ERC20(self.coins[i]).balanceOf(self) - self.balances[i]\r\n\r\n\r\n@external\r\ndef withdraw_admin_fees():\r\n    fee_converter: address = self.fee_converter\r\n    for i in range(N_COINS):\r\n        c: address = self.coins[i]\r\n        value: uint256 = ERC20(c).balanceOf(self) - self.balances[i]\r\n        if value > 0:\r\n            # \"safeTransfer\" which works for ERC20s which return bool or not\r\n            _response: Bytes[32] = raw_call(\r\n                c,\r\n                concat(\r\n                    method_id(\"transfer(address,uint256)\"),\r\n                    convert(fee_converter, bytes32),\r\n                    convert(value, bytes32),\r\n                ),\r\n                max_outsize=32,\r\n            )  # dev: failed transfer\r\n            if len(_response) > 0:\r\n                assert convert(_response, bool)  # dev: failed transfer\r\n            if i != 0:\r\n                FeeConverter(fee_converter).convertFees(i, 0)\r\n    FeeConverter(fee_converter).notify(self.coins[0])\r\n\r\n\r\n@external\r\ndef kill_me():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    assert self.kill_deadline > block.timestamp  # dev: deadline has passed\r\n    self.is_killed = True\r\n\r\n\r\n@external\r\ndef unkill_me():\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    self.is_killed = False", "ABI": "[{\"name\":\"TokenExchange\",\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\",\"indexed\":true},{\"name\":\"sold_id\",\"type\":\"int128\",\"indexed\":false},{\"name\":\"tokens_sold\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"bought_id\",\"type\":\"int128\",\"indexed\":false},{\"name\":\"tokens_bought\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"AddLiquidity\",\"inputs\":[{\"name\":\"provider\",\"type\":\"address\",\"indexed\":true},{\"name\":\"token_amounts\",\"type\":\"uint256[3]\",\"indexed\":false},{\"name\":\"fees\",\"type\":\"uint256[3]\",\"indexed\":false},{\"name\":\"invariant\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"token_supply\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"RemoveLiquidity\",\"inputs\":[{\"name\":\"provider\",\"type\":\"address\",\"indexed\":true},{\"name\":\"token_amounts\",\"type\":\"uint256[3]\",\"indexed\":false},{\"name\":\"fees\",\"type\":\"uint256[3]\",\"indexed\":false},{\"name\":\"token_supply\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"RemoveLiquidityOne\",\"inputs\":[{\"name\":\"provider\",\"type\":\"address\",\"indexed\":true},{\"name\":\"token_amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"coin_amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"RemoveLiquidityImbalance\",\"inputs\":[{\"name\":\"provider\",\"type\":\"address\",\"indexed\":true},{\"name\":\"token_amounts\",\"type\":\"uint256[3]\",\"indexed\":false},{\"name\":\"fees\",\"type\":\"uint256[3]\",\"indexed\":false},{\"name\":\"invariant\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"token_supply\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"CommitNewAdmin\",\"inputs\":[{\"name\":\"deadline\",\"type\":\"uint256\",\"indexed\":true},{\"name\":\"admin\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"NewAdmin\",\"inputs\":[{\"name\":\"admin\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"CommitNewFee\",\"inputs\":[{\"name\":\"deadline\",\"type\":\"uint256\",\"indexed\":true},{\"name\":\"fee\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"admin_fee\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"NewFee\",\"inputs\":[{\"name\":\"fee\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"admin_fee\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"RampA\",\"inputs\":[{\"name\":\"old_A\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"new_A\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"initial_time\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"future_time\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"StopRampA\",\"inputs\":[{\"name\":\"A\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"t\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_coins\",\"type\":\"address[3]\"},{\"name\":\"_pool_token\",\"type\":\"address\"},{\"name\":\"_A\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_admin_fee\",\"type\":\"uint256\"},{\"name\":\"_fee_converter\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"A\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":5106},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_virtual_price\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":1132771},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"calc_token_amount\",\"inputs\":[{\"name\":\"amounts\",\"type\":\"uint256[3]\"},{\"name\":\"deposit\",\"type\":\"bool\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":4506209},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"add_liquidity\",\"inputs\":[{\"name\":\"amounts\",\"type\":\"uint256[3]\"},{\"name\":\"min_mint_amount\",\"type\":\"uint256\"}],\"outputs\":[],\"gas\":6950840},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_dy\",\"inputs\":[{\"name\":\"i\",\"type\":\"int128\"},{\"name\":\"j\",\"type\":\"int128\"},{\"name\":\"dx\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2672568},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_dy_underlying\",\"inputs\":[{\"name\":\"i\",\"type\":\"int128\"},{\"name\":\"j\",\"type\":\"int128\"},{\"name\":\"dx\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2672270},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"exchange\",\"inputs\":[{\"name\":\"i\",\"type\":\"int128\"},{\"name\":\"j\",\"type\":\"int128\"},{\"name\":\"dx\",\"type\":\"uint256\"},{\"name\":\"min_dy\",\"type\":\"uint256\"}],\"outputs\":[],\"gas\":2816580},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"min_amounts\",\"type\":\"uint256[3]\"}],\"outputs\":[],\"gas\":192419},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity_imbalance\",\"inputs\":[{\"name\":\"amounts\",\"type\":\"uint256[3]\"},{\"name\":\"max_burn_amount\",\"type\":\"uint256\"}],\"outputs\":[],\"gas\":6947760},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"calc_withdraw_one_coin\",\"inputs\":[{\"name\":\"_token_amount\",\"type\":\"uint256\"},{\"name\":\"i\",\"type\":\"int128\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":1162},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity_one_coin\",\"inputs\":[{\"name\":\"_token_amount\",\"type\":\"uint256\"},{\"name\":\"i\",\"type\":\"int128\"},{\"name\":\"min_amount\",\"type\":\"uint256\"}],\"outputs\":[],\"gas\":4022793},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"ramp_A\",\"inputs\":[{\"name\":\"_future_A\",\"type\":\"uint256\"},{\"name\":\"_future_time\",\"type\":\"uint256\"}],\"outputs\":[],\"gas\":151582},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"stop_ramp_A\",\"inputs\":[],\"outputs\":[],\"gas\":148300},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"commit_new_fee\",\"inputs\":[{\"name\":\"new_fee\",\"type\":\"uint256\"},{\"name\":\"new_admin_fee\",\"type\":\"uint256\"}],\"outputs\":[],\"gas\":110158},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"apply_new_fee\",\"inputs\":[],\"outputs\":[],\"gas\":96939},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"revert_new_parameters\",\"inputs\":[],\"outputs\":[],\"gas\":21592},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"commit_transfer_ownership\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"outputs\":[],\"gas\":74330},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"apply_transfer_ownership\",\"inputs\":[],\"outputs\":[],\"gas\":60407},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"revert_transfer_ownership\",\"inputs\":[],\"outputs\":[],\"gas\":21682},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admin_balances\",\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3178},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw_admin_fees\",\"inputs\":[],\"outputs\":[],\"gas\":28794},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"kill_me\",\"inputs\":[],\"outputs\":[],\"gas\":37665},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"unkill_me\",\"inputs\":[],\"outputs\":[],\"gas\":21802},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"coins\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":1887},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balances\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":1917},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"fee\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":1838},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admin_fee\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":1868},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":1898},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"fee_converter\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":1928},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"initial_A\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":1958},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"future_A\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":1988},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"initial_A_time\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2018},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"future_A_time\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2048},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admin_actions_deadline\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2078},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"transfer_ownership_deadline\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2108},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"future_fee\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2138},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"future_admin_fee\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2168},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"future_owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2198}]", "ContractName": "Vyper_contract", "CompilerVersion": "vyper:0.2.11", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "000000000000000000000000abc00210a691ce0f3d7d0602d7d84aea4d91cdfd000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d560000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d00000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000af4de8e872131ae328ce21d909c74705d3aaf45200000000000000000000000000000000000000000000000000000000000005dc00000000000000000000000000000000000000000000000000000000003d0900000000000000000000000000000000000000000000000000000000012a05f200000000000000000000000000604348a7e98113e14c318605c458fbfb3b0dd3f6", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}