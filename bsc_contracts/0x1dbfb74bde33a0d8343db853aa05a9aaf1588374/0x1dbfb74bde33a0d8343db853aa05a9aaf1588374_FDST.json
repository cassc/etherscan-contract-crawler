{"SourceCode": "// SPDX-License-Identifier: Unlicensed \r\n// This contract is not open source and can not be used/forked without permission\r\n\r\n\r\npragma solidity 0.8.19;\r\n \r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;}\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;}\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;}\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;}\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {require(b <= a, errorMessage);\r\n            return a - b;}}\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {require(b > 0, errorMessage);\r\n            return a / b;}}\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; \r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nlibrary Address {\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"insufficient balance\");\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"unable to send, recipient reverted\");\r\n    }\r\n    \r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"low-level call failed\");\r\n    }\r\n    \r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"low-level call with value failed\");\r\n    }\r\n    \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"insufficient balance for call\");\r\n        require(isContract(target), \"call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    \r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"low-level static call failed\");\r\n    }\r\n    \r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"static call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"low-level delegate call failed\");\r\n    }\r\n    \r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"delegate call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                 assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\ncontract FDST is Context, IERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    address private _owner = payable(0xA1a2d3113024D41504b00b93D81341b7181a845c);\r\n    address public Wallet_Liquidity = _owner;\r\n    address public Wallet_Tokens = _owner;\r\n    address payable public Wallet_Marketing = payable(_owner);\r\n\r\n    // Token Info\r\n    string private  _name = \"Freedom Deployment Strategy Token\";\r\n    string private  _symbol = \"FDST\";\r\n    uint256 private _decimals = 18;\r\n    uint256 private _tTotal = 100_000_000_000 * 10 ** _decimals;\r\n\r\n    // Project links\r\n    string private _Website;\r\n    string private _Telegram;\r\n    string private _LP_Locker_URL;\r\n\r\n    // Wallet and transaction limits\r\n    uint256 private max_Hold = _tTotal;\r\n    uint256 private max_Tran = _tTotal;\r\n\r\n    // Fees\r\n    uint256 public _Fee__Buy_Burn;\r\n    uint256 public _Fee__Buy_Liquidity;\r\n    uint256 public _Fee__Buy_Marketing;\r\n    uint256 public _Fee__Buy_Reflection;\r\n    uint256 public _Fee__Buy_Tokens;\r\n\r\n    uint256 public _Fee__Sell_Burn;\r\n    uint256 public _Fee__Sell_Liquidity;\r\n    uint256 public _Fee__Sell_Marketing;\r\n    uint256 public _Fee__Sell_Reflection;\r\n    uint256 public _Fee__Sell_Tokens;\r\n\r\n    // Total fees that are processed on buys and sells for swap and liquify calculations\r\n    uint256 private _SwapFeeTotal_Buy;\r\n    uint256 private _SwapFeeTotal_Sell;\r\n\r\n    // Supply Tracking for RFI\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n\r\n    // Set factory\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n\r\n    constructor () {\r\n    \r\n\r\n    // Set PancakeSwap Router Address\r\n    IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n    // Create initial liquidity pair with BNB on PancakeSwap factory\r\n    uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n    uniswapV2Router = _uniswapV2Router;\r\n\r\n    // Wallets excluded from holding limits\r\n    _isLimitExempt[_owner] = true;\r\n    _isLimitExempt[address(this)] = true;\r\n    _isLimitExempt[Wallet_Burn] = true;\r\n    _isLimitExempt[uniswapV2Pair] = true;\r\n    _isLimitExempt[Wallet_Tokens] = true;\r\n\r\n    // Wallets excluded from fees\r\n    _isExcludedFromFee[_owner] = true;\r\n    _isExcludedFromFee[address(this)] = true;\r\n    _isExcludedFromFee[Wallet_Burn] = true;\r\n\r\n    // Set the initial liquidity pair\r\n    _isPair[uniswapV2Pair] = true;    \r\n\r\n    // Exclude from Rewards\r\n    _isExcluded[Wallet_Burn] = true;\r\n    _isExcluded[uniswapV2Pair] = true;\r\n    _isExcluded[address(this)] = true;\r\n\r\n    // Push excluded wallets to array\r\n    _excluded.push(Wallet_Burn);\r\n    _excluded.push(uniswapV2Pair);\r\n    _excluded.push(address(this));\r\n\r\n    // Wallets granted access before trade is open\r\n    _isWhiteListed[_owner] = true;\r\n\r\n    // Transfer token supply to owner wallet\r\n    _rOwned[_owner] = _rTotal;\r\n\r\n    // Emit Supply Transfer to Owner\r\n    emit Transfer(address(0), _owner, _tTotal);\r\n\r\n    // Emit ownership transfer\r\n    emit OwnershipTransferred(address(0), _owner);\r\n\r\n    }\r\n\r\n    \r\n    // Events\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event updated_Wallet_Limits(uint256 Max_Transaction, uint256 Max_Wallet);\r\n    event updated_Buy_fees(uint256 Marketing, uint256 Liquidity, uint256 Reflection, uint256 Burn, uint256 Tokens);\r\n    event updated_Sell_fees(uint256 Marketing, uint256 Liquidity, uint256 Reflection, uint256 Burn, uint256 Tokens);\r\n    event updated_SwapAndLiquify_Enabled(bool Swap_and_Liquify_Enabled);\r\n    event updated_trade_Open(bool Trade_Open);\r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\r\n\r\n\r\n    // Restrict function to contract owner only \r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    // Address mappings\r\n    mapping (address => uint256) private _tOwned;                               // Tokens Owned\r\n    mapping (address => uint256) private _rOwned;                               // Reflected balance\r\n    mapping (address => mapping (address => uint256)) private _allowances;      // Allowance to spend another wallets tokens\r\n    mapping (address => bool) public _isExcludedFromFee;                        // Wallets that do not pay fees\r\n    mapping (address => bool) public _isExcluded;                               // Excluded from RFI rewards\r\n    mapping (address => bool) public _isWhiteListed;                            // Wallets that have access before trade is open\r\n    mapping (address => bool) public _isLimitExempt;                            // Wallets that are excluded from HOLD and TRANSFER limits\r\n    mapping (address => bool) public _isPair;                                   // Address is liquidity pair\r\n    address[] private _excluded;                                                // Array of wallets excluded from rewards\r\n\r\n    // Token information \r\n    function Project_Information() external view returns(address Owner_Wallet,\r\n                                                       uint256 Transaction_Limit,\r\n                                                       uint256 Max_Wallet,\r\n                                                       uint256 Fee_When_Buying,\r\n                                                       uint256 Fee_When_Selling,\r\n                                                       string memory Website,\r\n                                                       string memory Telegram,\r\n                                                       string memory Liquidity_Lock,\r\n                                                       string memory Contract_Created_By) {\r\n                                                           \r\n        string memory Creator = \"https://tokensbygen.com\";\r\n\r\n        uint256 Total_buy =  _Fee__Buy_Burn         +\r\n                             _Fee__Buy_Liquidity    +\r\n                             _Fee__Buy_Marketing    +\r\n                             _Fee__Buy_Reflection   +\r\n                             _Fee__Buy_Tokens       ;\r\n\r\n        uint256 Total_sell = _Fee__Sell_Burn        +\r\n                             _Fee__Sell_Liquidity   +\r\n                             _Fee__Sell_Marketing   +\r\n                             _Fee__Sell_Reflection  +\r\n                             _Fee__Sell_Tokens      ;\r\n\r\n        uint256 _max_Hold = max_Hold / 10 ** _decimals;\r\n        uint256 _max_Tran = max_Tran / 10 ** _decimals;\r\n\r\n        if (_max_Tran > _max_Hold) {\r\n\r\n            _max_Tran = _max_Hold;\r\n        }\r\n\r\n\r\n        // Return Token Data\r\n        return (_owner,\r\n                _max_Tran,\r\n                _max_Hold,\r\n                Total_buy,\r\n                Total_sell,\r\n                _Website,\r\n                _Telegram,\r\n                _LP_Locker_URL,\r\n                Creator);\r\n\r\n    }\r\n\r\n    // Burn (dead) address\r\n    address public constant Wallet_Burn = 0x000000000000000000000000000000000000dEaD; \r\n\r\n    // Fee processing triggers\r\n    uint256 private swapTrigger = 11;   \r\n    uint256 private swapCounter = 1;    \r\n    \r\n    // SwapAndLiquify - Automatically processing fees and adding liquidity                                   \r\n    bool public inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled; \r\n\r\n    // Launch settings\r\n    bool public tradeOpen;\r\n\r\n    // No fee on wallet-to-wallet transfers\r\n    bool public noFeeW2W = true;\r\n\r\n    // Take fee tracker\r\n    bool private takeFee;\r\n\r\n\r\n\r\n\r\n    // Prepare the contract for presale\r\n    function Contract_SetUp_01__Presale_Address(\r\n\r\n        address Presale_Contract_Address\r\n\r\n        ) external onlyOwner {\r\n        _isExcludedFromFee[Presale_Contract_Address] = true; \r\n        _isLimitExempt[Presale_Contract_Address] = true;\r\n        _isWhiteListed[Presale_Contract_Address] = true;\r\n\r\n    }\r\n\r\n    // Set Buy Fees\r\n    function Contract_SetUp_02__Fees_on_Buy(\r\n\r\n        uint256 Marketing_on_BUY, \r\n        uint256 Liquidity_on_BUY, \r\n        uint256 Reflection_on_BUY, \r\n        uint256 Burn_on_BUY,  \r\n        uint256 Tokens_on_BUY\r\n\r\n        ) external onlyOwner {\r\n\r\n        // Buyer protection: max fee can not be set over 9%\r\n        require (Marketing_on_BUY    + \r\n                 Liquidity_on_BUY    + \r\n                 Reflection_on_BUY   + \r\n                 Burn_on_BUY         + \r\n                 Tokens_on_BUY       <= 9, \"E01\"); // Buy fee is too high - Max is 9% \r\n\r\n        // Update fees\r\n        _Fee__Buy_Marketing  = Marketing_on_BUY;\r\n        _Fee__Buy_Liquidity  = Liquidity_on_BUY;\r\n        _Fee__Buy_Reflection = Reflection_on_BUY;\r\n        _Fee__Buy_Burn       = Burn_on_BUY;\r\n        _Fee__Buy_Tokens     = Tokens_on_BUY;\r\n\r\n        // Fees that will need to be processed during swap and liquify\r\n        _SwapFeeTotal_Buy    = _Fee__Buy_Marketing + _Fee__Buy_Liquidity;\r\n\r\n        emit updated_Buy_fees(_Fee__Buy_Marketing, _Fee__Buy_Liquidity, _Fee__Buy_Reflection, _Fee__Buy_Burn, _Fee__Buy_Tokens);\r\n    }\r\n\r\n    // Set Sell Fees\r\n    function Contract_SetUp_03__Fees_on_Sell(\r\n\r\n        uint256 Marketing_on_SELL,\r\n        uint256 Liquidity_on_SELL, \r\n        uint256 Reflection_on_SELL, \r\n        uint256 Burn_on_SELL,\r\n        uint256 Tokens_on_SELL\r\n\r\n        ) external onlyOwner {\r\n\r\n        // Buyer protection: max fee can not be set over 9% \r\n        require (Marketing_on_SELL  + \r\n                 Liquidity_on_SELL  + \r\n                 Reflection_on_SELL + \r\n                 Burn_on_SELL       + \r\n                 Tokens_on_SELL     <= 9, \"E02\"); // Sell fee is too high - Max is 9% \r\n\r\n        // Update fees\r\n        _Fee__Sell_Marketing  = Marketing_on_SELL;\r\n        _Fee__Sell_Liquidity  = Liquidity_on_SELL;\r\n        _Fee__Sell_Reflection = Reflection_on_SELL;\r\n        _Fee__Sell_Burn       = Burn_on_SELL;\r\n        _Fee__Sell_Tokens     = Tokens_on_SELL;\r\n\r\n        // Fees that will need to be processed during swap and liquify\r\n        _SwapFeeTotal_Sell   = _Fee__Sell_Marketing + _Fee__Sell_Liquidity;\r\n\r\n        emit updated_Sell_fees(_Fee__Sell_Marketing, _Fee__Sell_Liquidity, _Fee__Sell_Reflection, _Fee__Sell_Burn, _Fee__Sell_Tokens);\r\n    }\r\n\r\n    // Wallet Holding and Transaction Limits (Enter token amount excluding decimals - NOT PERCENT!)\r\n    function Contract_SetUp_04__Wallet_Limits(\r\n\r\n        uint256 Max_Tokens_Per_Transaction,\r\n        uint256 Max_Total_Tokens_Per_Wallet \r\n\r\n        ) external onlyOwner {\r\n\r\n        // Buyer protection - Limits must be set to greater than 0.5% of total supply\r\n        require(Max_Tokens_Per_Transaction  >= _tTotal / 200 / 10 ** _decimals, \"E03\"); // Min possible transaction limit is 0.5% of supply\r\n        require(Max_Total_Tokens_Per_Wallet >= _tTotal / 200 / 10 ** _decimals, \"E04\"); // Min possible holding limit is 0.5% of supply\r\n        \r\n        max_Tran = Max_Tokens_Per_Transaction  * 10 ** _decimals;\r\n        max_Hold = Max_Total_Tokens_Per_Wallet * 10 ** _decimals;\r\n\r\n        emit updated_Wallet_Limits(max_Tran, max_Hold);\r\n\r\n    }\r\n\r\n    // Open trade: Buyer Protection - one way switch - trade can not be paused once opened\r\n    function Contract_SetUp_05__OpenTrade() external onlyOwner {\r\n\r\n        tradeOpen = true;\r\n        swapAndLiquifyEnabled = true;\r\n\r\n        emit updated_trade_Open(tradeOpen);\r\n        emit updated_SwapAndLiquify_Enabled(swapAndLiquifyEnabled);\r\n\r\n    }\r\n\r\n    // Update Project links and LP lock URL\r\n    function Contract_SetUp_06__Update_Project_Links(\r\n\r\n        string memory Website_URL, \r\n        string memory Telegram_URL, \r\n        string memory Liquidity_Locker_URL\r\n\r\n        ) external onlyOwner{\r\n\r\n        _Website         = Website_URL;\r\n        _Telegram        = Telegram_URL;\r\n        _LP_Locker_URL   = Liquidity_Locker_URL;\r\n\r\n    }\r\n\r\n\r\n    // Project Wallets\r\n    function Contract_SetUp_07__Update_Project_Wallets(\r\n\r\n        address Token_Fee_Wallet, \r\n        address payable Marketing_Fee_Wallet, \r\n        address Liquidity_Collection_Wallet\r\n\r\n        ) external onlyOwner {\r\n\r\n        // Update Token Fee Wallet\r\n        require(Token_Fee_Wallet != address(0), \"E05\"); // Enter a valid wallet address\r\n        Wallet_Tokens = Token_Fee_Wallet;\r\n\r\n        // Make limit exempt\r\n        _isLimitExempt[Token_Fee_Wallet] = true;\r\n\r\n        // Update Marketing Fee Wallet\r\n        require(Marketing_Fee_Wallet != address(0), \"E06\"); // Enter a valid wallet address\r\n        Wallet_Marketing = payable(Marketing_Fee_Wallet);\r\n\r\n        // To send the auto liquidity tokens directly to burn update to 0x000000000000000000000000000000000000dEaD\r\n        require(Liquidity_Collection_Wallet != address(0), \"E07\"); // Enter a valid wallet address\r\n        Wallet_Liquidity = Liquidity_Collection_Wallet;\r\n\r\n    }\r\n\r\n    /*\r\n    \r\n    ---------------------------------\r\n    No FEE WALLET TO WALLET TRANSFERS\r\n    ---------------------------------\r\n\r\n    Default = true\r\n\r\n    Having no fee on wallet-to-wallet transfers means that people can move tokens between wallets, \r\n    or send them to friends etc without incurring a fee. \r\n\r\n    NOTE: No-fee on wallet-to-wallet transfers is not compatible with Renouncing Ownership!  \r\n\r\n    */\r\n\r\n    function Option__No_Fee_Wallet_Transfers(bool true_or_false) public onlyOwner {\r\n        noFeeW2W = true_or_false;\r\n    }\r\n\r\n\r\n\r\n    // Setting an address as a liquidity pair\r\n    function Maintenance__Add_Liquidity_Pair(\r\n\r\n        address Wallet_Address,\r\n        bool true_or_false)\r\n\r\n         external onlyOwner {\r\n        _isPair[Wallet_Address] = true_or_false;\r\n        _isLimitExempt[Wallet_Address] = true_or_false;\r\n    } \r\n\r\n    // Transfer the contract to to a new owner\r\n    function Maintenance__Transfer_Ownership(address payable newOwner) public onlyOwner {\r\n\r\n        require(newOwner != address(0), \"E08\"); // Enter a valid wallet address\r\n\r\n        // Remove old owner status \r\n        _isLimitExempt[owner()]     = false;\r\n        _isExcludedFromFee[owner()] = false;\r\n        _isWhiteListed[owner()]     = false;\r\n\r\n\r\n        // Emit ownership transfer\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n\r\n        // Transfer owner\r\n        _owner = newOwner;\r\n\r\n        // Set new owner status\r\n        _isLimitExempt[owner()]     = true;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isWhiteListed[owner()]     = true;\r\n\r\n    }\r\n\r\n    // Renounce ownership of the contract \r\n    function Maintenance__Renounce_Ownership() public virtual onlyOwner {\r\n\r\n        // Remove old owner status \r\n        _isLimitExempt[owner()]     = false;\r\n        _isExcludedFromFee[owner()] = false;\r\n        _isWhiteListed[owner()]     = false;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    // Contract will process fees into Marketing and Liquidity etc. automatically (default = true)\r\n    function Processing__Auto_Process(bool true_or_false) external onlyOwner {\r\n        swapAndLiquifyEnabled = true_or_false;\r\n        emit updated_SwapAndLiquify_Enabled(true_or_false);\r\n    }\r\n\r\n    // Manually process fees\r\n    function Processing__Process_Now (uint256 Percent_of_Tokens_to_Process) external onlyOwner {\r\n        require(!inSwapAndLiquify, \"E09\"); // Already in swap\r\n        require(Percent_of_Tokens_to_Process <= 100, \"E10\"); // Sanity check on percent value - max 100!\r\n        uint256 tokensOnContract = balanceOf(address(this));\r\n        uint256 sendTokens = tokensOnContract * Percent_of_Tokens_to_Process / 100;\r\n        swapAndLiquify(sendTokens);\r\n\r\n    }\r\n\r\n    // Update count for swap trigger - Number of transactions to wait before processing accumulated fees (default is 10)\r\n    function Processing__Swap_Trigger_Count(uint256 Transaction_Count) external onlyOwner {\r\n        // Counter is reset to 1 (not 0) to save gas, so add one to swapTrigger\r\n        swapTrigger = Transaction_Count + 1;\r\n    }\r\n\r\n    // Remove random tokens from the contract\r\n    function Processing__Remove_Random_Tokens(\r\n\r\n        address random_Token_Address,\r\n        uint256 number_of_Tokens\r\n\r\n        ) external onlyOwner {\r\n            // To avoid exploit, native token must be processed by contract only\r\n            require (random_Token_Address != address(this), \"E11\"); // Can not remove the native token\r\n            IERC20(random_Token_Address).transfer(msg.sender, number_of_Tokens);\r\n            \r\n    }\r\n\r\n    /*\r\n\r\n    ------------------\r\n    REFLECTION REWARDS\r\n    ------------------\r\n\r\n    The following functions are used to exclude or include a wallet in the reflection rewards.\r\n    By default, all wallets are included. \r\n\r\n    Wallets that are excluded:\r\n\r\n            The Burn address \r\n            The Liquidity Pair\r\n            The Contract Address\r\n\r\n    ----------------------------------------\r\n    *** WARNING - DoS 'OUT OF GAS' Risk! ***\r\n    ----------------------------------------\r\n\r\n    A reflections contract needs to loop through all excluded wallets to correctly process several functions. \r\n    This loop can break the contract if it runs out of gas before completion.\r\n\r\n    To prevent this, keep the number of wallets that are excluded from rewards to an absolute minimum. \r\n    In addition to the default excluded wallets, you may need to exclude the address of any locked tokens.\r\n\r\n    */\r\n\r\n    // Wallet will not get reflections\r\n    function Rewards_Exclude_Wallet(address account) public onlyOwner() {\r\n        require(!_isExcluded[account], \"E12\"); // Account is already excluded\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    // Wallet will get reflections - DEFAULT\r\n    function Rewards_Include_Wallet(address account) external onlyOwner() {\r\n        require(_isExcluded[account], \"E13\"); // Account is already included\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Excludes wallet from fees - Default false\r\n    function Wallet_Settings__Exclude_From_Fees(\r\n\r\n        address Wallet_Address,\r\n        bool true_or_false\r\n\r\n        ) external onlyOwner {\r\n        require(Wallet_Address != address(0), \"E14\"); // Enter a valid BSC wallet\r\n        _isExcludedFromFee[Wallet_Address] = true_or_false;\r\n\r\n    }\r\n\r\n    // Excludes wallet from transaction and holding limits - Default false\r\n    function Wallet_Settings__Exempt_From_Limits(\r\n\r\n        address Wallet_Address,\r\n        bool true_or_false\r\n\r\n        ) external onlyOwner {  \r\n        require(Wallet_Address != address(0), \"E15\"); // Enter a valid BSC wallet\r\n        _isLimitExempt[Wallet_Address] = true_or_false;\r\n    }\r\n\r\n    // Grants access when trade is closed - Default false (true for contract owner)\r\n    function Wallet_Settings__PreLaunch_Access(\r\n\r\n        address Wallet_Address,\r\n        bool true_or_false\r\n\r\n        ) external onlyOwner {  \r\n        require(Wallet_Address != address(0), \"E16\"); // Enter a valid BSC wallet\r\n        _isWhiteListed[Wallet_Address] = true_or_false;\r\n    }\r\n\r\n    /*\r\n\r\n    -----------------------------\r\n    BEP20 STANDARD AND COMPLIANCE\r\n    -----------------------------\r\n\r\n    */\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"Decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n   \r\n    function tokenFromReflection(uint256 _rAmount) internal view returns(uint256) {\r\n        require(_rAmount <= _rTotal, \"E17\"); // rAmount can not be greater than rTotal\r\n        uint256 currentRate =  _getRate();\r\n        return _rAmount / currentRate;\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply / tSupply;\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;      \r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply - _rOwned[_excluded[i]];\r\n            tSupply = tSupply - _tOwned[_excluded[i]];\r\n        }\r\n        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"Allowance exceeded\"));\r\n        return true;\r\n    }\r\n\r\n    // Transfer BNB via call to reduce possibility of future 'out of gas' errors\r\n    function send_BNB(address _to, uint256 _amount) internal returns (bool SendSuccess) {\r\n                                \r\n        (SendSuccess,) = payable(_to).call{value: _amount}(\"\");\r\n\r\n    }\r\n\r\n    /*\r\n\r\n    ---------------\r\n    TOKEN TRANSFERS\r\n    ---------------\r\n\r\n    */\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n      ) private {\r\n\r\n\r\n        if (!tradeOpen){\r\n\r\n            /* \r\n\r\n            Before trade is open, the initial liquidity can be added by a whitelisted wallet or contract (owner is whitelisted by default)\r\n            This prevents a non-whitelisted token holder from a pre-sale or airdrop from maliciously setting the token price\r\n            Once the initially liquidity is added, tokens can not move to the LP pair, this prevents anybody from selling tokens before trade is open\r\n\r\n            NB: After setting the price and adding the initial liquidity, more LP can not be added until trade is open\r\n\r\n            */\r\n\r\n            require(_isWhiteListed[from] || _isWhiteListed[to], \"E18\"); // Trade not open!\r\n\r\n            uint LP_Supply = IERC20(uniswapV2Pair).totalSupply();\r\n\r\n            if(LP_Supply > 0){\r\n\r\n                // Whitelisted wallet or contract can add the initial LP\r\n                // Once initial LP is added, more tokens can not move into the LP before trade is open (prevents owner from selling before trade is open)\r\n                require(to != uniswapV2Pair, \"E19\"); // Whitelisted wallets can not sell tokens before trade is open\r\n\r\n            } \r\n\r\n        } \r\n\r\n        // Wallet Limit\r\n        if (!_isLimitExempt[to] && from != owner())\r\n            {\r\n            uint256 heldTokens = balanceOf(to);\r\n            require((heldTokens + amount) <= max_Hold, \"E20\"); // Purchase would exceed max permitted wallet\r\n            }\r\n\r\n\r\n        // Transaction limit - To send over the transaction limit the sender AND the recipient must be limit exempt\r\n        if (!_isLimitExempt[to] || !_isLimitExempt[from])\r\n            {\r\n            require(amount <= max_Tran, \"E21\"); // Amount is over transaction limit\r\n            }\r\n\r\n\r\n        // Compliance and safety checks\r\n        require(from != address(0), \"E22\"); // Must be a valid address\r\n        require(to != address(0), \"E23\"); // Must be a valid address\r\n        require(amount > 0, \"E24\"); // Amount must be greater than 0\r\n\r\n\r\n\r\n        // Check if fee processing is possible\r\n        if( _isPair[to] &&\r\n            !inSwapAndLiquify &&\r\n            swapAndLiquifyEnabled\r\n            )\r\n            {\r\n\r\n            // Check that enough transactions have passed since last swap\r\n                if(swapCounter >= swapTrigger){\r\n\r\n                // Check number of tokens on contract\r\n                uint256 contractTokens = balanceOf(address(this));\r\n\r\n                // Only trigger fee processing if there are tokens to swap!\r\n                if (contractTokens > 0){\r\n\r\n                    // Limit number of tokens that can be swapped \r\n                    if (contractTokens <= max_Tran){\r\n                        swapAndLiquify (contractTokens);\r\n                        } else {\r\n                        swapAndLiquify (max_Tran);\r\n                        }\r\n                    }\r\n                }  \r\n            }\r\n\r\n\r\n        // Set takeFee to true if not already set\r\n        if (!takeFee){\r\n            takeFee = true;\r\n        }\r\n        \r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to] || (noFeeW2W && !_isPair[to] && !_isPair[from])){\r\n            takeFee = false;\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n\r\n    }\r\n\r\n    /*\r\n    \r\n    ------------\r\n    PROCESS FEES\r\n    ------------\r\n\r\n    */\r\n\r\n    function swapAndLiquify(uint256 Tokens) private {\r\n\r\n        // Lock swapAndLiquify function\r\n        inSwapAndLiquify        = true;  \r\n\r\n        uint256 _FeesTotal      = _SwapFeeTotal_Buy + _SwapFeeTotal_Sell;\r\n        uint256 LP_Tokens       = Tokens * (_Fee__Buy_Liquidity + _Fee__Sell_Liquidity) / _FeesTotal / 2;\r\n        uint256 Swap_Tokens     = Tokens - LP_Tokens;\r\n\r\n        // Swap tokens for BNB\r\n        uint256 contract_BNB    = address(this).balance;\r\n        swapTokensForBNB(Swap_Tokens);\r\n        uint256 returned_BNB    = address(this).balance - contract_BNB;\r\n\r\n        // Double fees instead of halving LP fee to prevent rounding errors if fee is an odd number\r\n        uint256 fee_Split = _FeesTotal * 2 - (_Fee__Buy_Liquidity + _Fee__Sell_Liquidity);\r\n\r\n        // Calculate the BNB values for each fee (excluding Marketing wallet)\r\n        uint256 BNB_Liquidity   = returned_BNB * (_Fee__Buy_Liquidity     + _Fee__Sell_Liquidity)       / fee_Split;\r\n\r\n        // Add liquidity \r\n        if (LP_Tokens != 0){\r\n            addLiquidity(LP_Tokens, BNB_Liquidity);\r\n            emit SwapAndLiquify(LP_Tokens, BNB_Liquidity, LP_Tokens);\r\n        }\r\n        \r\n        // Send remaining BNB to Marketing wallet\r\n        contract_BNB = address(this).balance;\r\n\r\n        if(contract_BNB > 0){\r\n\r\n            send_BNB(Wallet_Marketing, contract_BNB);\r\n        }\r\n\r\n        // Reset transaction counter (reset to 1 not 0 to save gas)\r\n        swapCounter = 1;\r\n\r\n        // Unlock swapAndLiquify function\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    // Swap tokens for BNB\r\n    function swapTokensForBNB(uint256 tokenAmount) private {\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, \r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    // Add liquidity and send Cake LP tokens to liquidity collection wallet\r\n    function addLiquidity(uint256 tokenAmount, uint256 BNBAmount) private {\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.addLiquidityETH{value: BNBAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, \r\n            0,\r\n            Wallet_Liquidity, \r\n            block.timestamp\r\n        );\r\n    } \r\n\r\n    /*\r\n    \r\n    ----------------------------------\r\n    TRANSFER TOKENS AND CALCULATE FEES\r\n    ----------------------------------\r\n\r\n    */\r\n\r\n    uint256 private rAmount;\r\n\r\n    uint256 private tBurn;\r\n    uint256 private tTokens;\r\n    uint256 private tReflect;\r\n    uint256 private tSwapFeeTotal;\r\n\r\n    uint256 private rBurn;\r\n    uint256 private rReflect;\r\n    uint256 private rTokens;\r\n    uint256 private rSwapFeeTotal;\r\n\r\n    uint256 private tTransferAmount;\r\n    uint256 private rTransferAmount;\r\n\r\n    // Transfer Tokens and Calculate Fees\r\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount, bool Fee) private {\r\n  \r\n        if (Fee){\r\n\r\n            if(_isPair[recipient]){\r\n\r\n                // Sell fees\r\n                tBurn           = tAmount * _Fee__Sell_Burn       / 100;\r\n                tTokens         = tAmount * _Fee__Sell_Tokens     / 100;\r\n                tReflect        = tAmount * _Fee__Sell_Reflection / 100;\r\n                tSwapFeeTotal   = tAmount * _SwapFeeTotal_Sell    / 100;\r\n\r\n            } else {\r\n\r\n                // Buy fees\r\n                tBurn           = tAmount * _Fee__Buy_Burn        / 100;\r\n                tTokens         = tAmount * _Fee__Buy_Tokens      / 100;\r\n                tReflect        = tAmount * _Fee__Buy_Reflection  / 100;\r\n                tSwapFeeTotal   = tAmount * _SwapFeeTotal_Buy     / 100;\r\n\r\n            }\r\n\r\n        } else {\r\n\r\n                // No fee - wallet to wallet transfer or exempt wallet \r\n                tBurn           = 0;\r\n                tTokens         = 0;\r\n                tReflect        = 0;\r\n                tSwapFeeTotal   = 0;\r\n\r\n        }\r\n\r\n        // Calculate reflected fees for RFI\r\n        uint256 RFI     = _getRate(); \r\n\r\n        rAmount         = tAmount       * RFI;\r\n        rBurn           = tBurn         * RFI;\r\n        rTokens         = tTokens       * RFI;\r\n        rReflect        = tReflect      * RFI;\r\n        rSwapFeeTotal   = tSwapFeeTotal * RFI;\r\n\r\n        tTransferAmount = tAmount - (tBurn + tTokens + tReflect + tSwapFeeTotal);\r\n        rTransferAmount = rAmount - (rBurn + rTokens + rReflect + rSwapFeeTotal);\r\n\r\n        \r\n        // Swap tokens based on RFI status of sender and recipient\r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n\r\n            _tOwned[sender] -= tAmount;\r\n            _rOwned[sender] -= rAmount;\r\n\r\n            _rOwned[recipient] += rTransferAmount;\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n\r\n            _rOwned[sender] -= rAmount;\r\n\r\n            _tOwned[recipient] += tTransferAmount;\r\n            _rOwned[recipient] += rTransferAmount;\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n\r\n            _rOwned[sender] -= rAmount;\r\n            _rOwned[recipient] += rTransferAmount;\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n\r\n            _tOwned[sender] -= tAmount;\r\n            _rOwned[sender] -= rAmount;\r\n\r\n            _tOwned[recipient] += tTransferAmount;\r\n            _rOwned[recipient] += rTransferAmount;\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n        } else {\r\n\r\n            _rOwned[sender] -= rAmount;\r\n\r\n            _rOwned[recipient] += rTransferAmount;\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n        }\r\n\r\n\r\n        // Take reflections\r\n        if(tReflect > 0){\r\n\r\n            _rTotal -= rReflect;\r\n            _tFeeTotal += tReflect;\r\n        }\r\n\r\n        // Take tokens\r\n        if(tTokens > 0){\r\n\r\n            _rOwned[Wallet_Tokens] += rTokens;\r\n            if(_isExcluded[Wallet_Tokens])\r\n            _tOwned[Wallet_Tokens] += tTokens;\r\n\r\n        }\r\n\r\n        // Take fees that require processing during swap and liquify\r\n        if(tSwapFeeTotal > 0){\r\n\r\n            _rOwned[address(this)] += rSwapFeeTotal;\r\n            if(_isExcluded[address(this)])\r\n            _tOwned[address(this)] += tSwapFeeTotal;\r\n\r\n            // Increase the transaction counter\r\n            swapCounter++;\r\n                \r\n        }\r\n\r\n        // Handle tokens for burn\r\n        if(tBurn > 0){\r\n\r\n            // Send Tokens to Burn Wallet\r\n            _rOwned[Wallet_Burn] += rBurn;\r\n            if(_isExcluded[Wallet_Burn])\r\n            _tOwned[Wallet_Burn] += tBurn;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    // This function is required so that the contract can receive BNB during fee processing\r\n    receive() external payable {}\r\n\r\n\r\n}\r\n\r\n/*\r\n\r\n\r\nCustom Contract by Gen\r\n\r\n    Telegram: https://t.me/GenTokens_GEN\r\n    Website: https://TokensByGen.com\r\n\r\n    Not open source - Can not be used or forked without permission.\r\n\r\n\r\n*/", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Marketing\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Reflection\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Burn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Tokens\",\"type\":\"uint256\"}],\"name\":\"updated_Buy_fees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Marketing\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Reflection\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Burn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Tokens\",\"type\":\"uint256\"}],\"name\":\"updated_Sell_fees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Swap_and_Liquify_Enabled\",\"type\":\"bool\"}],\"name\":\"updated_SwapAndLiquify_Enabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Max_Transaction\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Max_Wallet\",\"type\":\"uint256\"}],\"name\":\"updated_Wallet_Limits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Trade_Open\",\"type\":\"bool\"}],\"name\":\"updated_trade_Open\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Presale_Contract_Address\",\"type\":\"address\"}],\"name\":\"Contract_SetUp_01__Presale_Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Marketing_on_BUY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Liquidity_on_BUY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Reflection_on_BUY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Burn_on_BUY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Tokens_on_BUY\",\"type\":\"uint256\"}],\"name\":\"Contract_SetUp_02__Fees_on_Buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Marketing_on_SELL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Liquidity_on_SELL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Reflection_on_SELL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Burn_on_SELL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Tokens_on_SELL\",\"type\":\"uint256\"}],\"name\":\"Contract_SetUp_03__Fees_on_Sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Max_Tokens_Per_Transaction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Max_Total_Tokens_Per_Wallet\",\"type\":\"uint256\"}],\"name\":\"Contract_SetUp_04__Wallet_Limits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Contract_SetUp_05__OpenTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"Website_URL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Telegram_URL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Liquidity_Locker_URL\",\"type\":\"string\"}],\"name\":\"Contract_SetUp_06__Update_Project_Links\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Token_Fee_Wallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"Marketing_Fee_Wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"Liquidity_Collection_Wallet\",\"type\":\"address\"}],\"name\":\"Contract_SetUp_07__Update_Project_Wallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet_Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Maintenance__Add_Liquidity_Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Maintenance__Renounce_Ownership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"Maintenance__Transfer_Ownership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Option__No_Fee_Wallet_Transfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Processing__Auto_Process\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Percent_of_Tokens_to_Process\",\"type\":\"uint256\"}],\"name\":\"Processing__Process_Now\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"random_Token_Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number_of_Tokens\",\"type\":\"uint256\"}],\"name\":\"Processing__Remove_Random_Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Transaction_Count\",\"type\":\"uint256\"}],\"name\":\"Processing__Swap_Trigger_Count\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Project_Information\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"Owner_Wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Transaction_Limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Max_Wallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Fee_When_Buying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Fee_When_Selling\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"Website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Telegram\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Liquidity_Lock\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Contract_Created_By\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Rewards_Exclude_Wallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Rewards_Include_Wallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Burn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Liquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Marketing\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet_Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Wallet_Settings__Exclude_From_Fees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet_Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Wallet_Settings__Exempt_From_Limits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet_Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Wallet_Settings__PreLaunch_Access\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Buy_Burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Buy_Liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Buy_Marketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Buy_Reflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Buy_Tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Sell_Burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Sell_Liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Sell_Marketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Sell_Reflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Sell_Tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwapAndLiquify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noFeeW2W\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FDST", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://026d32e83ee781e2cfc448004d2cbb282ff8ef43f107b4bea76f98f2224480fc"}