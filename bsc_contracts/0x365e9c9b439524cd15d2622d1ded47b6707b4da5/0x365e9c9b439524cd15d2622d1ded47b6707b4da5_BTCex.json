{"SourceCode": "pragma solidity ^0.4.24;\r\n\r\n// File: contracts\\openzeppelin-solidity\\contracts\\ownership\\Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts\\openzeppelin-solidity\\contracts\\lifecycle\\Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: contracts\\openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts\\openzeppelin-solidity\\contracts\\math\\SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts\\openzeppelin-solidity\\contracts\\token\\ERC20\\BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) internal balances;\r\n\r\n  uint256 internal totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: contracts\\openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: contracts\\openzeppelin-solidity\\contracts\\token\\ERC20\\StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts\\openzeppelin-solidity\\contracts\\token\\ERC20\\MintableToken.sol\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier hasMintPermission() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    public\r\n    hasMintPermission\r\n    canMint\r\n    returns (bool)\r\n  {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() public onlyOwner canMint returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts\\openzeppelin-solidity\\contracts\\token\\ERC20\\BurnableToken.sol\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    _burn(msg.sender, _value);\r\n  }\r\n\r\n  function _burn(address _who, uint256 _value) internal {\r\n    require(_value <= balances[_who]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    balances[_who] = balances[_who].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(_who, _value);\r\n    emit Transfer(_who, address(0), _value);\r\n  }\r\n}\r\n\r\n// File: contracts\\AccountLockableToken.sol\r\n\r\n/**\r\n * @title Account Lockable Token\r\n */\r\ncontract AccountLockableToken is Ownable {\r\n    mapping(address => bool) public lockStates;\r\n\r\n    event LockAccount(address indexed lockAccount);\r\n    event UnlockAccount(address indexed unlockAccount);\r\n\r\n    /**\r\n     * @dev Throws if called by locked account\r\n     */\r\n    modifier whenNotLocked() {\r\n        require(!lockStates[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Lock target account\r\n     * @param _target Target account to lock\r\n     */\r\n    function lockAccount(address _target) public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(_target != owner);\r\n        require(!lockStates[_target]);\r\n\r\n        lockStates[_target] = true;\r\n\r\n        emit LockAccount(_target);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Unlock target account\r\n     * @param _target Target account to unlock\r\n     */\r\n    function unlockAccount(address _target) public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(_target != owner);\r\n        require(lockStates[_target]);\r\n\r\n        lockStates[_target] = false;\r\n\r\n        emit UnlockAccount(_target);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts\\WithdrawableToken.sol\r\n\r\n/**\r\n * @title Withdrawable token\r\n * @dev Token that can be the withdrawal.\r\n */\r\ncontract WithdrawableToken is BasicToken, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    bool public withdrawingFinished = false;\r\n\r\n    event Withdraw(address _from, address _to, uint256 _value);\r\n    event WithdrawFinished();\r\n\r\n    modifier canWithdraw() {\r\n        require(!withdrawingFinished);\r\n        _;\r\n    }\r\n\r\n    modifier hasWithdrawPermission() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw the amount of tokens to onwer.\r\n     * @param _from address The address which owner want to withdraw tokens form.\r\n     * @param _value uint256 the amount of tokens to be transferred.\r\n     */\r\n    function withdraw(address _from, uint256 _value) public\r\n        hasWithdrawPermission\r\n        canWithdraw\r\n        returns (bool)\r\n    {\r\n        require(_value <= balances[_from]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[owner] = balances[owner].add(_value);\r\n\r\n        emit Transfer(_from, owner, _value);\r\n        emit Withdraw(_from, owner, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw the amount of tokens to another.\r\n     * @param _from address The address which owner want to withdraw tokens from.\r\n     * @param _to address The address which owner want to transfer to.\r\n     * @param _value uint256 the amount of tokens to be transferred.\r\n     */\r\n    function withdrawFrom(address _from, address _to, uint256 _value) public\r\n        hasWithdrawPermission\r\n        canWithdraw\r\n        returns (bool)\r\n    {\r\n        require(_value <= balances[_from]);\r\n        require(_to != address(0));\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        emit Transfer(_from, _to, _value);\r\n        emit Withdraw(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stop withdrawing new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function finishingWithdrawing() public\r\n        onlyOwner\r\n        canWithdraw\r\n        returns (bool)\r\n    {\r\n        withdrawingFinished = true;\r\n\r\n        emit WithdrawFinished();\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts\\MilestoneLockToken.sol\r\n\r\n/**\r\n * @title Milestone Lock Token\r\n * @dev Token lock that can be the milestone policy applied.\r\n */\r\ncontract MilestoneLockToken is StandardToken, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct Policy {\r\n        uint256 kickOff;\r\n        uint256[] periods;\r\n        uint8[] percentages;\r\n    }\r\n\r\n    struct MilestoneLock {\r\n        uint8[] policies;\r\n        uint256[] standardBalances;\r\n    }\r\n\r\n    uint8 constant MAX_POLICY = 100;\r\n    uint256 constant MAX_PERCENTAGE = 100;\r\n\r\n    mapping(uint8 => Policy) internal policies;\r\n    mapping(address => MilestoneLock) internal milestoneLocks;\r\n\r\n    event SetPolicyKickOff(uint8 policy, uint256 kickOff);\r\n    event PolicyAdded(uint8 policy);\r\n    event PolicyRemoved(uint8 policy);\r\n    event PolicyAttributeAdded(uint8 policy, uint256 period, uint8 percentage);\r\n    event PolicyAttributeRemoved(uint8 policy, uint256 period);\r\n    event PolicyAttributeModified(uint8 policy, uint256 period, uint8 percentage);\r\n\r\n    /**\r\n     * @dev Transfer token for a specified address when enough available unlock balance.\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) public\r\n        returns (bool)\r\n    {\r\n        require(getAvailableBalance(msg.sender) >= _value);\r\n\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another when enough available unlock balance.\r\n     * @param _from address The address which you want to send tokens from.\r\n     * @param _to address The address which you want to transfer to.\r\n     * @param _value uint256 the amount of tokens to be transferred.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public\r\n        returns (bool)\r\n    {\r\n        require(getAvailableBalance(_from) >= _value);\r\n\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Distribute the amounts of tokens to from owner's balance with the milestone policy to a policy-free user.\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     * @param _policy index of milestone policy to apply.\r\n     */\r\n    function distributeWithPolicy(address _to, uint256 _value, uint8 _policy) public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(_to != address(0));\r\n        require(_value <= balances[owner]);\r\n        require(_policy < MAX_POLICY);\r\n        require(_checkPolicyEnabled(_policy));\r\n\r\n        balances[owner] = balances[owner].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        _setMilestoneTo(_to, _value, _policy);\r\n\r\n        emit Transfer(owner, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev add milestone policy.\r\n     * @param _policy index of the milestone policy you want to add.\r\n     * @param _periods periods of the milestone you want to add.\r\n     * @param _percentages unlock percentages of the milestone you want to add.\r\n     */\r\n    function addPolicy(uint8 _policy, uint256[] _periods, uint8[] _percentages) public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(_policy < MAX_POLICY);\r\n        require(!_checkPolicyEnabled(_policy));\r\n        require(_periods.length > 0);\r\n        require(_percentages.length > 0);\r\n        require(_periods.length == _percentages.length);\r\n\r\n        policies[_policy].periods = _periods;\r\n        policies[_policy].percentages = _percentages;\r\n\r\n        emit PolicyAdded(_policy);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove milestone policy.\r\n     * @param _policy index of the milestone policy you want to remove.\r\n     */\r\n    function removePolicy(uint8 _policy) public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(_policy < MAX_POLICY);\r\n\r\n        delete policies[_policy];\r\n\r\n        emit PolicyRemoved(_policy);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev get milestone policy information.\r\n     * @param _policy index of milestone policy.\r\n     */\r\n    function getPolicy(uint8 _policy) public\r\n        view\r\n        returns (uint256 kickOff, uint256[] periods, uint8[] percentages)\r\n    {\r\n        require(_policy < MAX_POLICY);\r\n\r\n        return (\r\n            policies[_policy].kickOff,\r\n            policies[_policy].periods,\r\n            policies[_policy].percentages\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev set milestone policy's kickoff time.\r\n     * @param _policy index of milestone poicy.\r\n     * @param _time kickoff time of policy.\r\n     */\r\n    function setKickOff(uint8 _policy, uint256 _time) public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(_policy < MAX_POLICY);\r\n        require(_checkPolicyEnabled(_policy));\r\n\r\n        policies[_policy].kickOff = _time;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev add attribute to milestone policy.\r\n     * @param _policy index of milestone policy.\r\n     * @param _period period of policy attribute.\r\n     * @param _percentage percentage of unlocking when reaching policy.\r\n     */\r\n    function addPolicyAttribute(uint8 _policy, uint256 _period, uint8 _percentage) public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(_policy < MAX_POLICY);\r\n        require(_checkPolicyEnabled(_policy));\r\n\r\n        Policy storage policy = policies[_policy];\r\n\r\n        for (uint256 i = 0; i < policy.periods.length; i++) {\r\n            if (policy.periods[i] == _period) {\r\n                revert();\r\n                return false;\r\n            }\r\n        }\r\n\r\n        policy.periods.push(_period);\r\n        policy.percentages.push(_percentage);\r\n\r\n        emit PolicyAttributeAdded(_policy, _period, _percentage);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove attribute from milestone policy.\r\n     * @param _policy index of milestone policy attribute.\r\n     * @param _period period of target policy.\r\n     */\r\n    function removePolicyAttribute(uint8 _policy, uint256 _period) public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(_policy < MAX_POLICY);\r\n\r\n        Policy storage policy = policies[_policy];\r\n        \r\n        for (uint256 i = 0; i < policy.periods.length; i++) {\r\n            if (policy.periods[i] == _period) {\r\n                _removeElementAt256(policy.periods, i);\r\n                _removeElementAt8(policy.percentages, i);\r\n\r\n                emit PolicyAttributeRemoved(_policy, _period);\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        revert();\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev modify attribute from milestone policy.\r\n     * @param _policy index of milestone policy.\r\n     * @param _period period of target policy attribute.\r\n     * @param _percentage percentage to modified.\r\n     */\r\n    function modifyPolicyAttribute(uint8 _policy, uint256 _period, uint8 _percentage) public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(_policy < MAX_POLICY);\r\n\r\n        Policy storage policy = policies[_policy];\r\n        for (uint256 i = 0; i < policy.periods.length; i++) {\r\n            if (policy.periods[i] == _period) {\r\n                policy.percentages[i] = _percentage;\r\n\r\n                emit PolicyAttributeModified(_policy, _period, _percentage);\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        revert();\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev get policy's locked percentage of milestone policy from now.\r\n     * @param _policy index of milestone policy for calculate locked percentage.\r\n     */\r\n    function getPolicyLockedPercentage(uint8 _policy) public view\r\n        returns (uint256)\r\n    {\r\n        require(_policy < MAX_POLICY);\r\n\r\n        Policy storage policy = policies[_policy];\r\n\r\n        if (policy.periods.length == 0) {\r\n            return 0;\r\n        }\r\n        \r\n        if (policy.kickOff == 0 ||\r\n            policy.kickOff > now) {\r\n            return MAX_PERCENTAGE;\r\n        }\r\n\r\n        uint256 unlockedPercentage = 0;\r\n        for (uint256 i = 0; i < policy.periods.length; i++) {\r\n            if (policy.kickOff.add(policy.periods[i]) <= now) {\r\n                unlockedPercentage =\r\n                    unlockedPercentage.add(policy.percentages[i]);\r\n            }\r\n        }\r\n\r\n        if (unlockedPercentage > MAX_PERCENTAGE) {\r\n            return 0;\r\n        }\r\n\r\n        return MAX_PERCENTAGE.sub(unlockedPercentage);\r\n    }\r\n\r\n    /**\r\n     * @dev change account's milestone policy.\r\n     * @param _from address for milestone policy applyed from.\r\n     * @param _prevPolicy index of original milestone policy.\r\n     * @param _newPolicy index of milestone policy to be changed.\r\n     */\r\n    function modifyMilestoneFrom(address _from, uint8 _prevPolicy, uint8 _newPolicy) public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(_from != address(0));\r\n        require(_prevPolicy != _newPolicy);\r\n        require(_prevPolicy < MAX_POLICY);\r\n        require(_checkPolicyEnabled(_prevPolicy));\r\n        require(_newPolicy < MAX_POLICY);\r\n        require(_checkPolicyEnabled(_newPolicy));\r\n\r\n        uint256 prevPolicyIndex = _getAppliedPolicyIndex(_from, _prevPolicy);\r\n        require(prevPolicyIndex < MAX_POLICY);\r\n\r\n        _setMilestoneTo(_from, milestoneLocks[_from].standardBalances[prevPolicyIndex], _newPolicy);\r\n\r\n        milestoneLocks[_from].standardBalances[prevPolicyIndex] = 0;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove milestone policy from account.\r\n     * @param _from address for applied milestone policy removes from.\r\n     * @param _policy index of milestone policy remove. \r\n     */\r\n    function removeMilestoneFrom(address _from, uint8 _policy) public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(_from != address(0));\r\n        require(_policy < MAX_POLICY);\r\n\r\n        uint256 policyIndex = _getAppliedPolicyIndex(_from, _policy);\r\n        require(policyIndex < MAX_POLICY);\r\n\r\n        milestoneLocks[_from].standardBalances[policyIndex] = 0;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev get accounts milestone policy state information.\r\n     * @param _account address for milestone policy applied.\r\n     */\r\n    function getUserMilestone(address _account) public\r\n        view\r\n        returns (uint8[] accountPolicies, uint256[] standardBalances)\r\n    {\r\n        return (\r\n            milestoneLocks[_account].policies,\r\n            milestoneLocks[_account].standardBalances\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev available unlock balance.\r\n     * @param _account address for available unlock balance.\r\n     */\r\n    function getAvailableBalance(address _account) public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return balances[_account].sub(getTotalLockedBalance(_account));\r\n    }\r\n\r\n    /**\r\n     * @dev calcuate locked balance of milestone policy from now.\r\n     * @param _account address for lock balance.\r\n     * @param _policy index of applied milestone policy.\r\n     */\r\n    function getLockedBalance(address _account, uint8 _policy) public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(_policy < MAX_POLICY);\r\n\r\n        uint256 policyIndex = _getAppliedPolicyIndex(_account, _policy);\r\n        if (policyIndex >= MAX_POLICY) {\r\n            return 0;\r\n        }\r\n\r\n        MilestoneLock storage milestoneLock = milestoneLocks[_account];\r\n        if (milestoneLock.standardBalances[policyIndex] == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 lockedPercentage =\r\n            getPolicyLockedPercentage(milestoneLock.policies[policyIndex]);\r\n        return milestoneLock.standardBalances[policyIndex].div(MAX_PERCENTAGE).mul(lockedPercentage);\r\n    }\r\n\r\n    /**\r\n     * @dev calcuate locked balance of milestone policy from now.\r\n     * @param _account address for lock balance.\r\n     */\r\n    function getTotalLockedBalance(address _account) public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        MilestoneLock storage milestoneLock = milestoneLocks[_account];\r\n\r\n        uint256 totalLockedBalance = 0;\r\n        for (uint256 i = 0; i < milestoneLock.policies.length; i++) {\r\n            totalLockedBalance = totalLockedBalance.add(\r\n                getLockedBalance(_account, milestoneLock.policies[i])\r\n            );\r\n        }\r\n\r\n        return totalLockedBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev check for policy is enabled\r\n     * @param _policy index of milestone policy.\r\n     */\r\n    function _checkPolicyEnabled(uint8 _policy) internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return (policies[_policy].periods.length > 0);\r\n    }\r\n\r\n    /**\r\n     * @dev get milestone policy index applied to a user.\r\n     * @param _to address The address which you want get to.\r\n     * @param _policy index of milestone policy applied.\r\n     */\r\n    function _getAppliedPolicyIndex(address _to, uint8 _policy) internal\r\n        view\r\n        returns (uint8)\r\n    {\r\n        require(_policy < MAX_POLICY);\r\n\r\n        MilestoneLock storage milestoneLock = milestoneLocks[_to];\r\n        for (uint8 i = 0; i < milestoneLock.policies.length; i++) {\r\n            if (milestoneLock.policies[i] == _policy) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return MAX_POLICY;\r\n    }\r\n\r\n    /**\r\n     * @dev set milestone policy applies to a user.\r\n     * @param _to address The address which \r\n     * @param _value The amount to apply\r\n     * @param _policy index of milestone policy to apply.\r\n     */\r\n    function _setMilestoneTo(address _to, uint256 _value, uint8 _policy) internal\r\n    {\r\n        uint8 policyIndex = _getAppliedPolicyIndex(_to, _policy);\r\n        if (policyIndex < MAX_POLICY) {\r\n            milestoneLocks[_to].standardBalances[policyIndex] = \r\n                milestoneLocks[_to].standardBalances[policyIndex].add(_value);\r\n        } else {\r\n            milestoneLocks[_to].policies.push(_policy);\r\n            milestoneLocks[_to].standardBalances.push(_value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev utility for uint256 array\r\n     * @param _array target array\r\n     * @param _index array index to remove\r\n     */\r\n    function _removeElementAt256(uint256[] storage _array, uint256 _index) internal\r\n        returns (bool)\r\n    {\r\n        if (_array.length <= _index) {\r\n            return false;\r\n        }\r\n\r\n        for (uint256 i = _index; i < _array.length - 1; i++) {\r\n            _array[i] = _array[i + 1];\r\n        }\r\n\r\n        delete _array[_array.length - 1];\r\n        _array.length--;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev utility for uint8 array\r\n     * @param _array target array\r\n     * @param _index array index to remove\r\n     */\r\n    function _removeElementAt8(uint8[] storage _array, uint256 _index) internal\r\n        returns (bool)\r\n    {\r\n        if (_array.length <= _index) {\r\n            return false;\r\n        }\r\n\r\n        for (uint256 i = _index; i < _array.length - 1; i++) {\r\n            _array[i] = _array[i + 1];\r\n        }\r\n\r\n        delete _array[_array.length - 1];\r\n        _array.length--;\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts\\BTCex.sol\r\n\r\n/**\r\n * @title BTCex token\r\n */\r\ncontract BTCex is\r\n    Pausable,\r\n    MintableToken,\r\n    BurnableToken,\r\n    AccountLockableToken,\r\n    WithdrawableToken,\r\n    MilestoneLockToken\r\n{\r\n    uint256 constant MAX_SUFFLY = 21000000;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\r\n    constructor() public\r\n    {\r\n        name = \"BTCex\";\r\n        symbol = \"BTCX\";\r\n        decimals = 18;\r\n        totalSupply_ = MAX_SUFFLY * (10 ** uint(decimals));\r\n\r\n        balances[owner] = totalSupply_;\r\n\r\n        emit Transfer(address(0), owner, totalSupply_);\r\n    }\r\n\r\n    function() public\r\n    {\r\n        revert();\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token for a specified address when if not paused and not locked account\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) public\r\n        whenNotPaused\r\n        whenNotLocked\r\n        returns (bool)\r\n    {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to anther when if not paused and not locked account\r\n     * @param _from address The address which you want to send tokens from.\r\n     * @param _to address The address which you want to transfer to.\r\n     * @param _value uint256 the amount of tokens to be transferred.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public\r\n        whenNotPaused\r\n        whenNotLocked\r\n        returns (bool)\r\n    {\r\n        require(!lockStates[_from]);\r\n\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\r\n       when if not paused and not locked account\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public\r\n        whenNotPaused\r\n        whenNotLocked\r\n        returns (bool)\r\n    {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender when if not paused and not locked account\r\n     * @param _spender address which will spend the funds.\r\n     * @param _addedValue amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint256 _addedValue) public\r\n        whenNotPaused\r\n        whenNotLocked\r\n        returns (bool)\r\n    {\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * @param _spender address which will spend the funds.\r\n     * @param _subtractedValue amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public\r\n        whenNotPaused\r\n        whenNotLocked\r\n        returns (bool)\r\n    {\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Distribute the amount of tokens to owner's balance.\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function distribute(address _to, uint256 _value) public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(_to != address(0));\r\n        require(_value <= balances[owner]);\r\n\r\n        balances[owner] = balances[owner].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        emit Transfer(owner, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens by owner.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public\r\n        onlyOwner\r\n    {\r\n        super.burn(_value);\r\n    }\r\n\r\n    /**\r\n     * @dev batch to the policy to account's available balance.\r\n     * @param _policy index of milestone policy to apply.\r\n     * @param _addresses The addresses to apply.\r\n     */\r\n    function batchToApplyMilestone(uint8 _policy, address[] _addresses) public\r\n        onlyOwner\r\n        returns (bool[])\r\n    {\r\n        require(_policy < MAX_POLICY);\r\n        require(_checkPolicyEnabled(_policy));\r\n        require(_addresses.length > 0);\r\n\r\n        bool[] memory results = new bool[](_addresses.length);\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            results[i] = false;\r\n            if (_addresses[i] != address(0)) {\r\n                uint256 availableBalance = getAvailableBalance(_addresses[i]);\r\n                results[i] = (availableBalance > 0);\r\n                if (results[i]) {\r\n                    _setMilestoneTo(_addresses[i], availableBalance, _policy);\r\n                }\r\n            }\r\n        }\r\n\r\n        return results;\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_policy\",\"type\":\"uint8\"},{\"name\":\"_period\",\"type\":\"uint256\"},{\"name\":\"_percentage\",\"type\":\"uint8\"}],\"name\":\"addPolicyAttribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_policy\",\"type\":\"uint8\"}],\"name\":\"getPolicy\",\"outputs\":[{\"name\":\"kickOff\",\"type\":\"uint256\"},{\"name\":\"periods\",\"type\":\"uint256[]\"},{\"name\":\"percentages\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_policy\",\"type\":\"uint8\"}],\"name\":\"removeMilestoneFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getUserMilestone\",\"outputs\":[{\"name\":\"accountPolicies\",\"type\":\"uint8[]\"},{\"name\":\"standardBalances\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_policy\",\"type\":\"uint8\"}],\"name\":\"getPolicyLockedPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockStates\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"lockAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishingWithdrawing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_policy\",\"type\":\"uint8\"},{\"name\":\"_periods\",\"type\":\"uint256[]\"},{\"name\":\"_percentages\",\"type\":\"uint8[]\"}],\"name\":\"addPolicy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAvailableBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_policy\",\"type\":\"uint8\"},{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"batchToApplyMilestone\",\"outputs\":[{\"name\":\"\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_policy\",\"type\":\"uint8\"}],\"name\":\"distributeWithPolicy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_policy\",\"type\":\"uint8\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setKickOff\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_policy\",\"type\":\"uint8\"}],\"name\":\"removePolicy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"unlockAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_prevPolicy\",\"type\":\"uint8\"},{\"name\":\"_newPolicy\",\"type\":\"uint8\"}],\"name\":\"modifyMilestoneFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_policy\",\"type\":\"uint8\"},{\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"removePolicyAttribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_policy\",\"type\":\"uint8\"}],\"name\":\"getLockedBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getTotalLockedBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_policy\",\"type\":\"uint8\"},{\"name\":\"_period\",\"type\":\"uint256\"},{\"name\":\"_percentage\",\"type\":\"uint8\"}],\"name\":\"modifyPolicyAttribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"policy\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"kickOff\",\"type\":\"uint256\"}],\"name\":\"SetPolicyKickOff\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"policy\",\"type\":\"uint8\"}],\"name\":\"PolicyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"policy\",\"type\":\"uint8\"}],\"name\":\"PolicyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"policy\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"percentage\",\"type\":\"uint8\"}],\"name\":\"PolicyAttributeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"policy\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"PolicyAttributeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"policy\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"percentage\",\"type\":\"uint8\"}],\"name\":\"PolicyAttributeModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"WithdrawFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"lockAccount\",\"type\":\"address\"}],\"name\":\"LockAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"unlockAccount\",\"type\":\"address\"}],\"name\":\"UnlockAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "BTCex", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://72558f82f3d16a5989023705bf30d6beb85c827bf25b4ddd0cb596702961c9a8"}