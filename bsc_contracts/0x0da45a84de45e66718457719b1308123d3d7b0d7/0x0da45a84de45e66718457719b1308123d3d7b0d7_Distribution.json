{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Bridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Interfaces/IBridgeFactory.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"erc721a/contracts/ERC721A.sol\\\";\\n\\ncontract Bridge is ERC721A, Ownable {\\n    address public paymentToken;\\n    address public bridgeFactory;\\n\\n    uint256 public maxSupply;\\n    uint256 public maxPerWallet;\\n    uint256 public maxPreSale;\\n    uint256 public nftPrice;\\n    uint256 public projectId;\\n\\n    uint256 public immutable SCALE = 100;\\n\\n    bytes32 private merkleRoot;\\n    string public baseTokenUri;\\n\\n    bool public easyTransfer;\\n    bool public isPresaleStage;\\n\\n    uint256[] public discountQuantities;\\n    address[] public mintingDistributionRecipients;\\n    address[] public nftHolders;\\n\\n    event UpdateMaxPerWallet(uint256 projectid, uint256 newMax);\\n    event UpdatedNftPrice(uint256 projectid, uint256 newPrice);\\n    event UpdatedMerkleRoot(bytes32 newRoot);\\n    event InitalDistributionRecipients(uint256 projectId, address[] recipients, uint256[] percentages);\\n    event AdjustedDistributionRecipient(\\n        address newRecipient,\\n        uint256 recipientPercentage,\\n        address[] recipients,\\n        uint256[] percentages\\n    );\\n    event ProjectDeployed(\\n        address projectAddress,\\n        uint256 projectId,\\n        uint256 price,\\n        uint256 supply,\\n        uint256 maxAmountPerWallet,\\n        uint256 maxPreSale,\\n        bool hasPresale\\n    );\\n    event UpdatedTokenURI(string newURI);\\n    event PublicSaleActivated();\\n    event UpdatedMaxPreSale(uint256 projectid, uint256 newMax);\\n    event TokensMinted(address owner, uint256 projectid, uint256 price, uint256 quantity);\\n    event TokenTransfered(address from, address to, uint256 tokenId, uint256 projectId);\\n    event PaymentTokenUpdated(address paymentToken);\\n    event WithPaperMintingAddressesUpdated(address withPaperMintingAddress, bool approved);\\n    event BridgeFactoryUpdated(address bridgeFactory);\\n\\n    mapping(address => uint256) public addressToDistributionPercentage;\\n    mapping(uint256 => uint256) public discountQuantityToPercentage;\\n    mapping(address => uint256) public numberOfMintedNFTSPerUser;\\n    mapping(address => bool) public approvedWithpaperAddresses;\\n\\n    constructor(\\n        uint256 _projectid,\\n        bool[] memory _booleans,\\n        string[] memory _tokenDetails,\\n        uint256[] memory _quantities,\\n        bytes32 _merkleRoot,\\n        uint256[] memory _discountQuantites,\\n        uint256[] memory _discountPercentages,\\n        address[] memory _mintingDistributionRecipients,\\n        uint256[] memory _recipientsMintingPercentage,\\n        address _newOwner\\n    ) ERC721A(_tokenDetails[0], _tokenDetails[1]) {\\n        _transferOwnership(_newOwner);\\n\\n        bridgeFactory = msg.sender;\\n\\n        isPresaleStage = _booleans[0];\\n        easyTransfer = _booleans[1];\\n\\n        maxSupply = _quantities[0];\\n        maxPerWallet = _quantities[1];\\n        nftPrice = _quantities[2];\\n        maxPreSale = _quantities[3];\\n        projectId = _projectid;\\n\\n        merkleRoot = _merkleRoot;\\n        discountQuantities = _discountQuantites;\\n        mintingDistributionRecipients = _mintingDistributionRecipients;\\n\\n        baseTokenUri = _tokenDetails[2];\\n\\n        for (uint256 x = 0; x < _discountPercentages.length; x++) {\\n            discountQuantityToPercentage[_discountQuantites[x]] = _discountPercentages[x];\\n        }\\n        for (uint256 x = 0; x < _recipientsMintingPercentage.length; x++) {\\n            addressToDistributionPercentage[_mintingDistributionRecipients[x]] = _recipientsMintingPercentage[x];\\n        }\\n\\n        emit ProjectDeployed(address(this), _projectid, nftPrice, maxSupply, maxPerWallet, maxPreSale, isPresaleStage);\\n        emit InitalDistributionRecipients(_projectid, _mintingDistributionRecipients, _recipientsMintingPercentage);\\n    }\\n\\n    function _startTokenId() internal view virtual override returns (uint256) {\\n        return 1;\\n    }\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return baseTokenUri;\\n    }\\n\\n    function tokenURI(uint256 _tokenId) public view override returns (string memory) {\\n        if (!_exists(_tokenId)) revert URIQueryForNonexistentToken();\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? baseURI : \\\"\\\";\\n    }\\n\\n    //----------------------------------------------------------------------------------------------------------------------\\n    //---------------------------------------------STATE-CHANGING FUNCTIONS-------------------------------------------------\\n    //----------------------------------------------------------------------------------------------------------------------\\n\\n    function updateWithPaperMintingAddresses(address _mintingAddress, bool _approved) public noZeroAddress(_mintingAddress){\\n        require(IBridgeFactory(bridgeFactory).isAdmin(msg.sender), \\\"Not bridge admin\\\");\\n        approvedWithpaperAddresses[_mintingAddress] = _approved;\\n\\n        emit WithPaperMintingAddressesUpdated(_mintingAddress, _approved);\\n    }\\n\\n    /// @dev WithPaper wallets should have no restrictions on minting quantity\\n    function withpaperPreMint(\\n        address _to,\\n        uint256 _quantity,\\n        uint256 _price,\\n        bytes32[] calldata _merkleProof\\n    ) external isPreMint isWithPaperApprovedAddress isWhitelisted(_merkleProof, _to) isBelowMaxSupply(_quantity) {\\n        _mint(_to, _quantity, _price);\\n    }\\n\\n    function generalPreMint(\\n        uint256 _quantity,\\n        uint256 _price,\\n        bytes32[] calldata _merkleProof\\n    ) external isPreMint isWhitelisted(_merkleProof, msg.sender) isBelowMaxSupply(_quantity) {\\n        require(super.balanceOf(msg.sender) + _quantity <= maxPreSale, \\\"Above max presale\\\");\\n        _mint(msg.sender, _quantity, _price);\\n    }\\n\\n    function withpaperPublicMint(\\n        address _to,\\n        uint256 _quantity,\\n        uint256 _price\\n    ) external isPublicMint isWithPaperApprovedAddress isBelowMaxSupply(_quantity) {\\n        _mint(_to, _quantity, _price);\\n    }\\n\\n    function generalPublicMint(uint256 _quantity, uint256 _price) external isPublicMint isBelowMaxSupply(_quantity) {\\n        require((numberOfMintedNFTSPerUser[msg.sender] + _quantity) <= maxPerWallet, \\\"Above max per wallet\\\");\\n        _mint(msg.sender, _quantity, _price);\\n    }\\n\\n    /**\\n     * @param _newRecipientArray holds the new recipient at index 0, the addresses following are current recipients who's percentages have changed\\n     * @param _newRecipientPercentages holds the new recipients percentage at index 0 with the following percentages aligning with the above recipients\\n     */\\n    function addAddressToMintingProceeds(\\n        address _newRecipient,\\n        uint256 _newPercentage,\\n        address[] memory _newRecipientArray,\\n        uint256[] memory _newRecipientPercentages\\n    ) external onlyOwner noZeroAddress(_newRecipient){\\n        uint256 newRecipientArrayLength = _newRecipientArray.length;\\n        uint256 newPercentagesLength = _newRecipientPercentages.length;\\n\\n        require(newRecipientArrayLength == newPercentagesLength, \\\"Array lengths do not match\\\");\\n        require(addressToDistributionPercentage[_newRecipient] == 0, \\\"Recipient already exists\\\");\\n\\n        uint256 totalDistributionPercentages = _verifyRecipientPercentage(newPercentagesLength, _newRecipientArray, _newRecipientPercentages);\\n        \\n        //Making sure all distribution uses the full 100%\\n        require(totalDistributionPercentages == (100 - _newPercentage), \\\"Distribution doesnt equal 100\\\");\\n\\n        for (uint256 x = 0; x < newRecipientArrayLength; x++) {\\n            addressToDistributionPercentage[_newRecipientArray[x]] = _newRecipientPercentages[x];\\n        }\\n\\n        mintingDistributionRecipients.push(_newRecipient);\\n        addressToDistributionPercentage[_newRecipient] = _newPercentage;\\n            \\n        emit AdjustedDistributionRecipient(\\n            _newRecipient,\\n            _newPercentage,\\n            mintingDistributionRecipients,\\n            _newRecipientPercentages\\n        );\\n    }\\n\\n    /**\\n     * @param _newRecipientArray holds the removed recipient at index 0, the addresses following are current recipients who's percentages have changed\\n     * @param _newRecipientPercentages number at index 0 is irrelavant and the following percentages aligning with the above recipients\\n     */\\n    function removeAddressFromMintingProceeds(\\n        address _removedAddress,\\n        address[] memory _newRecipientArray,\\n        uint256[] memory _newRecipientPercentages\\n    ) external onlyOwner noZeroAddress(_removedAddress) {\\n        require(addressToDistributionPercentage[_removedAddress] > 0, \\\"Recipient does not exist\\\");\\n\\n        uint256 newRecipientArrayLength = _newRecipientArray.length;\\n        uint256 newPercentagesLength = _newRecipientPercentages.length;\\n        uint256 mintingDistributionRecipientsLength = mintingDistributionRecipients.length;\\n        uint256 removalIndex;\\n\\n        require(newRecipientArrayLength == newPercentagesLength, \\\"Array lengths do not match\\\");\\n        \\n        uint256 totalDistributionPercentages = _verifyRecipientPercentage(newPercentagesLength, _newRecipientArray, _newRecipientPercentages);\\n\\n        require(totalDistributionPercentages == 100, \\\"Distribution doesnt equal 100\\\");\\n\\n        for (uint256 x = 0; x < mintingDistributionRecipientsLength; x++) {\\n            if (mintingDistributionRecipients[x] == _removedAddress) {\\n                removalIndex == x;\\n\\n                break;\\n            }\\n        }\\n\\n        mintingDistributionRecipients[removalIndex] = mintingDistributionRecipients[\\n            mintingDistributionRecipientsLength - 1\\n        ];\\n        mintingDistributionRecipients.pop();\\n        addressToDistributionPercentage[_removedAddress] = 0;\\n\\n        for (uint256 x = 0; x < newRecipientArrayLength; x++) {\\n            addressToDistributionPercentage[_newRecipientArray[x]] = _newRecipientPercentages[x];\\n        }\\n    }\\n\\n    function transferFrom(address _from, address _to, uint256 _tokenID) public payable override(ERC721A) {\\n        require(easyTransfer == true, \\\"EASY TRANSFER INNACTIVE\\\");\\n        super.transferFrom(_from, _to, _tokenID);\\n        emit TokenTransfered(_from, _to, _tokenID, projectId);\\n    }\\n\\n    //----------------------------------------------------------------------------------------------------------------------\\n    //----------------------------------------------------SETTER FUNCTIONS--------------------------------------------------\\n    //----------------------------------------------------------------------------------------------------------------------\\n\\n    function setTokenUri(string memory _baseTokenUri) external onlyOwner {\\n        baseTokenUri = _baseTokenUri;\\n        emit UpdatedTokenURI(_baseTokenUri);\\n    }\\n\\n    function setMerkleRoot(bytes32 _newRoot) external onlyOwner {\\n        merkleRoot = _newRoot;\\n        emit UpdatedMerkleRoot(_newRoot);\\n    }\\n\\n    function setMaxPerWallet(uint256 _newMax) external onlyOwner {\\n        maxPerWallet = _newMax;\\n        emit UpdateMaxPerWallet(projectId, _newMax);\\n    }\\n\\n    function setNFTPrice(uint256 _newPrice) external onlyOwner {\\n        nftPrice = _newPrice;\\n        emit UpdatedNftPrice(projectId, _newPrice);\\n    }\\n\\n    function setMintPublic() external onlyOwner {\\n        isPresaleStage = false;\\n        emit PublicSaleActivated();\\n    }\\n\\n    function setPreSale(uint256 _newMax) external onlyOwner {\\n        maxPreSale = _newMax;\\n        emit UpdatedMaxPreSale(projectId, _newMax);\\n    }\\n\\n    function updatePaymentToken(address _paymentToken) external onlyOwner noZeroAddress(_paymentToken) {\\n        paymentToken = _paymentToken;\\n        emit PaymentTokenUpdated(_paymentToken);\\n    }\\n\\n    function updateBridgeFactory(address _bridgeFactory) external noZeroAddress(_bridgeFactory){\\n        require(IBridgeFactory(bridgeFactory).isAdmin(msg.sender), \\\"Not bridge admin\\\");\\n\\n        bridgeFactory = _bridgeFactory;\\n\\n        emit BridgeFactoryUpdated(_bridgeFactory);\\n    }\\n\\n\\n\\n    //----------------------------------------------------------------------------------------------------------------------\\n    //----------------------------------------------------GETTER FUNCTIONS--------------------------------------------------\\n    //----------------------------------------------------------------------------------------------------------------------\\n\\n    function getDiscountedPrice(uint256 _quantity) public view returns (uint256) {\\n        uint256 discountPercentage = 0;\\n        uint256 currentIndex = discountQuantities.length;\\n        while (currentIndex > 0) {\\n            currentIndex--;\\n            if (discountQuantities[currentIndex] <= _quantity) {\\n                discountPercentage = discountQuantityToPercentage[discountQuantities[currentIndex]];\\n                break;\\n            }\\n        }\\n        uint256 discount = ((nftPrice * discountPercentage) / SCALE);\\n        uint256 amountPayable = (nftPrice - discount) * _quantity;\\n        return amountPayable;\\n    }\\n\\n    function getNFTHoldersArray() public view returns (address[] memory) {\\n        return nftHolders;\\n    }\\n\\n    function _verifyRecipientPercentage(\\n        uint256 _newPercentagesLength,\\n        address[] memory _newRecipientArray,\\n        uint256[] memory _newRecipientPercentages\\n    ) internal view returns(uint256) {\\n        uint256 totalDistributionPercentages = 0;\\n        for (uint256 x = 0; x < _newPercentagesLength; x++) {\\n            totalDistributionPercentages += _newRecipientPercentages[x];\\n            require(_newRecipientPercentages[x] <= 100, \\\"Percentage must be less than 100\\\");\\n            require(_newRecipientPercentages[x] > 0, \\\"Percentage must be bigger than 0\\\");\\n            require(addressToDistributionPercentage[_newRecipientArray[x]] > 0, \\\"Recipient does not exists\\\");\\n        }\\n        return totalDistributionPercentages;\\n    }\\n\\n    function _mint(address _to, uint256 _quantity, uint256 _price) internal {\\n        uint256 mintingDistributionRecipientsLength = mintingDistributionRecipients.length;\\n        uint256 amountPayable = getDiscountedPrice(_quantity);\\n        uint256 _amount;\\n\\n        require(_price >= amountPayable, \\\"Incorrect payment amount\\\");\\n\\n        if (numberOfMintedNFTSPerUser[_to] == 0) {\\n            nftHolders.push(_to);\\n        }\\n\\n        numberOfMintedNFTSPerUser[_to] += _quantity;\\n        IERC20(paymentToken).transferFrom(msg.sender, address(this), _price);\\n\\n        for (uint256 x = 0; x < mintingDistributionRecipientsLength; x++) {\\n            _amount = (_price * addressToDistributionPercentage[mintingDistributionRecipients[x]]) / SCALE;\\n            bool sent1 = IERC20(paymentToken).transfer(mintingDistributionRecipients[x], _amount);\\n            require(sent1, \\\"FAILED TO SEND\\\");\\n        }\\n\\n        _safeMint(_to, _quantity);\\n        emit TokensMinted(_to, projectId, _price, _quantity);\\n    }\\n\\n    modifier isPublicMint() {\\n        require(!isPresaleStage, \\\"Not in public mint\\\");\\n        _;\\n    }\\n\\n    modifier isPreMint() {\\n        require(isPresaleStage, \\\"Not in presale\\\");\\n        _;\\n    }\\n\\n    modifier isWithPaperApprovedAddress() {\\n        require(approvedWithpaperAddresses[msg.sender] == true, \\\"Not WithPaper Address\\\");\\n        _;\\n    }\\n\\n    modifier isWhitelisted(bytes32[] calldata _merkleProof, address _to) {\\n        require(MerkleProof.verify(_merkleProof, merkleRoot, keccak256(abi.encodePacked(_to))), \\\"Invalid merkle proof\\\");\\n        _;\\n    }\\n\\n    modifier isBelowMaxSupply(uint256 _quantity) {\\n        require((totalSupply() + _quantity) <= maxSupply, \\\"Mint above max supply\\\");\\n        _;\\n    }\\n\\n    modifier noZeroAddress(address _address) {\\n        require(_address != address(0), \\\"no zero address\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BridgeFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./Bridge.sol\\\";\\n\\ncontract BridgeFactory {\\n    enum PROJECTSTATUS {\\n        APPROVED,\\n        PENDING,\\n        REJECTED\\n    }\\n\\n    enum PARAMETER {\\n        WALLET,\\n        ADMIN\\n    }\\n\\n    struct Company {\\n        uint256 id;\\n        address wallet;\\n        address admin;\\n        string ipfsHash;\\n    }\\n\\n    struct Project {\\n        uint256 projectId;\\n        uint256 companyId;\\n        uint256 typeId;\\n        address projectAddress;\\n        PROJECTSTATUS status;\\n        string detailsHash;\\n    }\\n\\n    uint256 public companyNumber = 1;\\n    uint256 public projectNumber = 1;\\n    uint256 public numberOfProjectTypes;\\n    address public feeWalletAddress;\\n\\n    event CompanyCreated(uint256 companyId, address wallet, address admin, string ipfsHash);\\n    event ProjectApproved(address projAddress, address owner, uint256 projectId, uint256 feeWalletPercentage);\\n    event ProjectSubmitted(uint256 companyId, uint256 projectId, string detailHash);\\n    event ProjectRejected(uint256 projectId);\\n    event FeeWalletUpdated(address oldWallet, address newWallet);\\n    event CompanyDetailUpdated(uint256 companyId, PARAMETER parameter, address value);\\n    event ProjectHashUpdated(uint256 projectId, string detailHash);\\n    event AddedAdmin(address newAdmin);\\n    event RemovedAdmin(address oldAdmin);\\n    event NewProjectAdded(uint256 projectId, address projectAddress, string ipfsHash);\\n    event NewProjectTypeAdded(uint256 projectId, string projectType);\\n\\n    mapping(uint256 => Company) public companies;\\n    mapping(address => uint256) public companyOwner;\\n    mapping(uint256 => Project) public projects;\\n    mapping(uint256 => string) public projectTypes;\\n    mapping(address => bool) public isAdmin;\\n\\n    constructor(address _feeWalletAddress) {\\n        isAdmin[msg.sender] = true;\\n        feeWalletAddress = _feeWalletAddress;\\n\\n        emit FeeWalletUpdated(address(0), _feeWalletAddress);\\n        emit AddedAdmin(msg.sender);\\n    }\\n\\n    function approveProject(\\n        uint256 _projectId,\\n        //Position 0 - is pre sale; Position 1 - is easy transfer\\n        bool[] memory _booleans,\\n        //Position 0 - token name; Position 1 - token symbol; Position 2 - token uri; Position 3 - ipfsHash;\\n        string[] memory _tokenDetails,\\n        //Position 0 - max supply; Position 1 - max per wallet; Position 2 - NFT Price; Position 3 - max pre sale;\\n        uint256[] memory _quantities,\\n        bytes32 _merkleRoot,\\n        uint256[] memory _discountQuantities,\\n        uint256[] memory _discountPercentages,\\n        address[] memory _mintingDistributionRecipients,\\n        uint256[] memory _recipientsMintingPercentage,\\n        address _newOwner\\n    ) public isBridgeAdmin {\\n        Project storage projectStruct = projects[_projectId];\\n        projectStruct.status = PROJECTSTATUS.APPROVED;\\n        require(_discountQuantities.length == _discountPercentages.length, \\\"INVALID DISCOUNT INPUTS\\\");\\n        require(\\n            _mintingDistributionRecipients.length == _recipientsMintingPercentage.length,\\n            \\\"INVALID DISTRIBUTION INPUTS\\\"\\n        );\\n        uint256 totalPercentage;\\n        for (uint256 i = 0; i < _recipientsMintingPercentage.length; i++) {\\n            totalPercentage += _recipientsMintingPercentage[i];\\n        }\\n        require(totalPercentage == 100, \\\"INVALID DISTRIBUTION PERCENTAGES\\\");\\n\\n        Bridge project = new Bridge(\\n            projectStruct.projectId,\\n            _booleans,\\n            _tokenDetails,\\n            _quantities,\\n            _merkleRoot,\\n            _discountQuantities,\\n            _discountPercentages,\\n            _mintingDistributionRecipients,\\n            _recipientsMintingPercentage,\\n            _newOwner\\n        );\\n\\n        projectStruct.projectAddress = address(project);\\n        uint256 feeWalletAddressPercentage = 0;\\n\\n        projectStruct.detailsHash = _tokenDetails[3];\\n\\n        for (uint256 i = 0; i < _recipientsMintingPercentage.length; i++) {\\n            if (_mintingDistributionRecipients[i] == feeWalletAddress) {\\n                feeWalletAddressPercentage = _recipientsMintingPercentage[i];\\n            }\\n        }\\n\\n        emit ProjectApproved(address(project), _newOwner, projectStruct.projectId, feeWalletAddressPercentage);\\n    }\\n\\n    function submitProject(uint256 _companyId, uint256 _projectTypeId, string memory _ipfsHash) public {\\n        Company storage company = companies[_companyId];\\n        require(msg.sender == company.admin, \\\"Not company admin\\\");\\n\\n        projects[projectNumber] = Project({\\n            projectId: projectNumber,\\n            companyId: _companyId,\\n            typeId: _projectTypeId,\\n            projectAddress: address(0),\\n            status: PROJECTSTATUS.PENDING,\\n            detailsHash: _ipfsHash\\n        });\\n\\n        emit ProjectSubmitted(_companyId, projectNumber, _ipfsHash);\\n        projectNumber++;\\n    }\\n\\n    function updateProjectWithoutApproving(\\n        uint256 _projectTypeId,\\n        uint256 _companyId,\\n        address _projectAddress,\\n        string memory _detailsHash\\n    ) public isBridgeAdmin {\\n        projects[projectNumber] = Project({\\n            projectId: projectNumber,\\n            companyId: _companyId,\\n            typeId: _projectTypeId,\\n            projectAddress: _projectAddress,\\n            status: PROJECTSTATUS.APPROVED,\\n            detailsHash: _detailsHash\\n        });\\n\\n        projectNumber++;\\n\\n        emit NewProjectAdded(projectNumber - 1, _projectAddress, _detailsHash);\\n    }\\n\\n    function createCompany(address _wallet, address _admin, string memory _ipfsHash) public isBridgeAdmin {\\n        require(companyOwner[_admin] == 0, \\\"WALLET REGISTERED A COMPANY\\\");\\n        require(_wallet != address(0), \\\"zero address\\\");\\n        require(_admin != address(0), \\\"zero address\\\");\\n\\n        companyOwner[_admin] = companyNumber;\\n        companies[companyNumber] = Company({id: companyNumber, wallet: _wallet, admin: _admin, ipfsHash: _ipfsHash});\\n        emit CompanyCreated(companyNumber, _wallet, _admin, _ipfsHash);\\n\\n        companyNumber++;\\n    }\\n\\n    function rejectProject(uint256 _projectId) public isBridgeAdmin {\\n        require(_projectId <= projectNumber, \\\"Invalid project id\\\");\\n        Project storage project = projects[_projectId];\\n        require(project.status == PROJECTSTATUS.PENDING, \\\"PROJECT NOT PENDING\\\");\\n        project.status = PROJECTSTATUS.REJECTED;\\n        emit ProjectRejected(_projectId);\\n    }\\n\\n    function updateCompanyDetail(uint256 _companyId, PARAMETER _parameter, address value) public {\\n        require(_companyId < companyNumber, \\\"COMPANY NON EXISTENT\\\");\\n        require(value != address(0), \\\"zero address\\\");\\n\\n        Company storage company = companies[_companyId];\\n        require(msg.sender == company.admin, \\\"Not company admin\\\");\\n\\n        if (_parameter == PARAMETER.WALLET) {\\n            company.wallet = value;\\n        } else if (_parameter == PARAMETER.ADMIN) {\\n            company.admin = value;\\n            companyOwner[value] = _companyId;\\n            delete companyOwner[msg.sender];\\n        }\\n\\n        emit CompanyDetailUpdated(_companyId, _parameter, value);\\n    }\\n\\n    function updateFeeWalletAddress(address _wallet) public isBridgeAdmin {\\n        require(_wallet != address(0), \\\"zero address\\\");\\n        address oldWallet = feeWalletAddress;\\n        feeWalletAddress = _wallet;\\n        emit FeeWalletUpdated(oldWallet, _wallet);\\n    }\\n\\n    function updateProjectHash(uint256 _projectId, string memory _newHash) public {\\n        uint256 companyID = projects[_projectId].companyId;\\n        require(\\n            msg.sender == companies[companyID].admin || msg.sender == companies[companyID].wallet,\\n            \\\"Incorrect permissions\\\"\\n        );\\n\\n        projects[_projectId].detailsHash = _newHash;\\n\\n        emit ProjectHashUpdated(_projectId, _newHash);\\n    }\\n\\n    function getProjectAddress(uint256 _id) public view returns (address) {\\n        require(_id <= projectNumber, \\\"COMPANY NON EXISTENT\\\");\\n        return projects[_id].projectAddress;\\n    }\\n\\n    function addProjectType(string memory _type) public isBridgeAdmin {\\n        projectTypes[numberOfProjectTypes] = _type;\\n        numberOfProjectTypes++;\\n        emit NewProjectTypeAdded(numberOfProjectTypes - 1, _type);\\n    }\\n\\n    function addAdmin(address _newAdmin) public isBridgeAdmin {\\n        require(_newAdmin != address(0), \\\"Cannot add zero address\\\");\\n        isAdmin[_newAdmin] = true;\\n        emit AddedAdmin(_newAdmin);\\n    }\\n\\n    function removeAdmin(address _oldAdmin) public isBridgeAdmin {\\n        require(isAdmin[_oldAdmin] == true, \\\"Address not an admin\\\");\\n        isAdmin[_oldAdmin] = false;\\n        emit RemovedAdmin(_oldAdmin);\\n    }\\n\\n    modifier isBridgeAdmin() {\\n        require(isAdmin[msg.sender] == true, \\\"Not bridge admin\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Distribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"erc721a/contracts/ERC721A.sol\\\";\\nimport \\\"./Interfaces/IBridgeFactory.sol\\\";\\nimport \\\"./BridgeFactory.sol\\\";\\nimport \\\"./Interfaces/IBridge.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Distribution {\\n    address public bridgeFactoryAddress;\\n    address public paymentToken;\\n    address public owner;\\n\\n    //Map a project to its total profit per token\\n    mapping(uint256 => mapping(address => uint256)) public projectTotalProfitsPerToken;\\n\\n    //Map users address to payment token to amount claimed\\n    mapping(address => mapping(address => uint256)) public valueOfRewardsPerUserBeingClaimed;\\n\\n    event UpdatedOwner(address newOwner);\\n    event UpdatedBridgeFactory(address newFactoryAddress);\\n    event PaymentTokenUpdated(address paymentToken);\\n\\n    constructor(address _NFTFactoryAddress, address _paymentToken) {\\n        owner = msg.sender;\\n        bridgeFactoryAddress = _NFTFactoryAddress;\\n        paymentToken = _paymentToken;\\n    }\\n\\n    function addProfits(uint256 _projectID, uint256 _amount) external {\\n        BridgeFactory factoryInstance = BridgeFactory(bridgeFactoryAddress);\\n        require(factoryInstance.isAdmin(msg.sender) == true, \\\"Only Bridge Admin\\\");\\n\\n        require(_projectID <= factoryInstance.projectNumber(), \\\"ProjectID does not exist\\\");\\n        require(_projectID > 0, \\\"Invalid ID type\\\");\\n\\n        projectTotalProfitsPerToken[_projectID][paymentToken] +=   _amount;\\n\\n        IERC20(paymentToken).transferFrom(msg.sender, address(this), _amount); // Added this to transfer funds to the contract before it gets distributed\\n        _distributeProfits(_projectID, _amount);\\n    }\\n\\n    function _distributeProfits(uint256 _projectID, uint256 _amount) internal {\\n        IBridgeFactory factoryInstance = IBridgeFactory(bridgeFactoryAddress);\\n        IBridge bridgeInstance = IBridge(factoryInstance.getProjectAddress(_projectID));\\n\\n        address[] memory usersAddress = bridgeInstance.getNFTHoldersArray();\\n        uint256 totalSupply = bridgeInstance.totalSupply();\\n\\n        for (uint256 x = 0; x < usersAddress.length; x++) {\\n            require(bridgeInstance.balanceOf(usersAddress[x]) >= 1, \\\"Address does not own any NFTs\\\");\\n\\n            uint256 portionOfNFTSHeld = 10000 / ((totalSupply * 100) / bridgeInstance.balanceOf(usersAddress[x]));\\n            uint256 amount = (_amount * portionOfNFTSHeld) / 100;\\n\\n            valueOfRewardsPerUserBeingClaimed[usersAddress[x]][paymentToken] += amount;\\n\\n            IERC20(paymentToken).transfer(usersAddress[x], amount);\\n        }\\n    }\\n\\n    function updateOwner(address _newOwner) external onlyOwner {\\n        require(_newOwner != address(0), \\\"no zero address\\\");\\n        owner = _newOwner;\\n        emit UpdatedOwner(_newOwner);\\n    }\\n\\n    function updateBridgeFactoryAddress(address _newBridgeAddress) external onlyOwner {\\n        require(_newBridgeAddress != address(0), \\\"no zero address\\\");\\n        bridgeFactoryAddress = _newBridgeAddress;\\n        emit UpdatedBridgeFactory(_newBridgeAddress);\\n    }\\n\\n    function updatePaymentToken(address _paymentToken) external onlyOwner {\\n        require(_paymentToken != address(0), \\\"no zero address\\\");\\n        paymentToken = _paymentToken;\\n\\n        emit PaymentTokenUpdated(_paymentToken);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Incorrect caller\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/IBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport \\\"erc721a/contracts/IERC721A.sol\\\";\\n\\ninterface IBridge is IERC721A {\\n    function getNumberOfNFTsForUser(address _user) external view returns (uint256);\\n\\n    function getNumberOfNFTHolders() external view returns (uint256);\\n\\n    function getNFTHoldersArray() external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/IBridgeFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IBridgeFactory {\\n    function getProjectNumber() external view returns (uint256);\\n\\n    function getProjectAddress(uint256 id) external view returns (address);\\n\\n    function isAdmin(address _address) external view returns (bool);\\n\\n    function addCompanyNFTsSold(\\n        address _buyer,\\n        uint256 _tokenId,\\n        uint256 _companyID,\\n        uint256 _quantity,\\n        uint256 _price,\\n        uint256 _projectId\\n    ) external;\\n\\n    function addTotalRevueToCompany(uint256 _companyID, uint256 _price, uint256 _projectId) external;\\n\\n    function isOwner(address _projectAddress, address _sender) external view returns (bool);\\n\\n    function addProjectType(string memory _type) external;\\n\\n    function updateProjectWithoutApproving(\\n        uint256 _projectId,\\n        address _projectAddress,\\n        string memory _detailsHash\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"erc721a/contracts/ERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721 token receiver.\\n */\\ninterface ERC721A__IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC721A\\n *\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\n * Non-Fungible Token Standard, including the Metadata extension.\\n * Optimized for lower gas during batch mints.\\n *\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\n * starting from `_startTokenId()`.\\n *\\n * Assumptions:\\n *\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is IERC721A {\\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\\n    struct TokenApprovalRef {\\n        address value;\\n    }\\n\\n    // =============================================================\\n    //                           CONSTANTS\\n    // =============================================================\\n\\n    // Mask of an entry in packed address data.\\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant _BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\\n\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The bit position of `extraData` in packed ownership.\\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\\n\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\n\\n    // The mask of the lower 160 bits for addresses.\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\\n    // This limit is to prevent overflows on the address data entries.\\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\n    // is required to cause an overflow, which is unrealistic.\\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\n\\n    // The `Transfer` event signature is given by:\\n    // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    // =============================================================\\n    //                            STORAGE\\n    // =============================================================\\n\\n    // The next token ID to be minted.\\n    uint256 private _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 private _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned.\\n    // See {_packedOwnershipOf} implementation for details.\\n    //\\n    // Bits Layout:\\n    // - [0..159]   `addr`\\n    // - [160..223] `startTimestamp`\\n    // - [224]      `burned`\\n    // - [225]      `nextInitialized`\\n    // - [232..255] `extraData`\\n    mapping(uint256 => uint256) private _packedOwnerships;\\n\\n    // Mapping owner address to address data.\\n    //\\n    // Bits Layout:\\n    // - [0..63]    `balance`\\n    // - [64..127]  `numberMinted`\\n    // - [128..191] `numberBurned`\\n    // - [192..255] `aux`\\n    mapping(address => uint256) private _packedAddressData;\\n\\n    // Mapping from token ID to approved address.\\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // =============================================================\\n    //                          CONSTRUCTOR\\n    // =============================================================\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    // =============================================================\\n    //                   TOKEN COUNTING OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the starting token ID.\\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view virtual returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view virtual returns (uint256) {\\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\\n        // and it is initialized to `_startTokenId()`.\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view virtual returns (uint256) {\\n        return _burnCounter;\\n    }\\n\\n    // =============================================================\\n    //                    ADDRESS DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal virtual {\\n        uint256 packed = _packedAddressData[owner];\\n        uint256 auxCasted;\\n        // Cast `aux` with assembly to avoid redundant masking.\\n        assembly {\\n            auxCasted := aux\\n        }\\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\\n        _packedAddressData[owner] = packed;\\n    }\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes\\n        // of the XOR of all function selectors in the interface.\\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, it can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    // =============================================================\\n    //                     OWNERSHIPS OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal virtual {\\n        if (_packedOwnerships[index] == 0) {\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr)\\n                if (curr < _currentIndex) {\\n                    uint256 packed = _packedOwnerships[curr];\\n                    // If not burned.\\n                    if (packed & _BITMASK_BURNED == 0) {\\n                        // Invariant:\\n                        // There will always be an initialized ownership slot\\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\n                        // before an unintialized ownership slot\\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\n                        // Hence, `curr` will not underflow.\\n                        //\\n                        // We can directly compare the packed value.\\n                        // If the address is zero, packed will be zero.\\n                        while (packed == 0) {\\n                            packed = _packedOwnerships[--curr];\\n                        }\\n                        return packed;\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & _BITMASK_BURNED != 0;\\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\n    }\\n\\n    /**\\n     * @dev Packs ownership data into a single uint256.\\n     */\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\n     */\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\n        // For branchless setting of the `nextInitialized` flag.\\n        assembly {\\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      APPROVAL OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) public payable virtual override {\\n        address owner = ownerOf(tokenId);\\n\\n        if (_msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _tokenApprovals[tokenId].value = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId].value;\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted. See {_mint}.\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex && // If within bounds,\\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\n     */\\n    function _isSenderApprovedOrOwner(\\n        address approvedAddress,\\n        address owner,\\n        address msgSender\\n    ) private pure returns (bool result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\\n            // `msgSender == owner || msgSender == approvedAddress`.\\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\n     */\\n    function _getApprovedSlotAndAddress(uint256 tokenId)\\n        private\\n        view\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\n    {\\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\\n        assembly {\\n            approvedAddressSlot := tokenApproval.slot\\n            approvedAddress := sload(approvedAddressSlot)\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      TRANSFER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                to,\\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public payable virtual override {\\n        transferFrom(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token IDs\\n     * are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token IDs\\n     * have been transferred. This includes minting.\\n     * And also called after one token has been burned.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * `from` - Previous owner of the given token ID.\\n     * `to` - Target address that will receive the token.\\n     * `tokenId` - Token ID to be transferred.\\n     * `_data` - Optional data to send along with the call.\\n     *\\n     * Returns whether the call correctly returned the expected magic value.\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    // =============================================================\\n    //                        MINT OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _mint(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\n        // `tokenId` has a maximum limit of 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            uint256 toMasked;\\n            uint256 end = startTokenId + quantity;\\n\\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\\n            // The assembly, together with the surrounding Solidity code, have been\\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\\n            assembly {\\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n                toMasked := and(to, _BITMASK_ADDRESS)\\n                // Emit the `Transfer` event.\\n                log4(\\n                    0, // Start of data (0, since no data).\\n                    0, // End of data (0, since no data).\\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\\n                    0, // `address(0)`.\\n                    toMasked, // `to`.\\n                    startTokenId // `tokenId`.\\n                )\\n\\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\\n                // that overflows uint256 will make the loop run out of gas.\\n                // The compiler will optimize the `iszero` away for performance.\\n                for {\\n                    let tokenId := add(startTokenId, 1)\\n                } iszero(eq(tokenId, end)) {\\n                    tokenId := add(tokenId, 1)\\n                } {\\n                    // Emit the `Transfer` event. Similar to above.\\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\\n                }\\n            }\\n            if (toMasked == 0) revert MintToZeroAddress();\\n\\n            _currentIndex = end;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * This function is intended for efficient minting only during contract creation.\\n     *\\n     * It emits only one {ConsecutiveTransfer} as defined in\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\n     * instead of a sequence of {Transfer} event(s).\\n     *\\n     * Calling this function outside of contract creation WILL make your contract\\n     * non-compliant with the ERC721 standard.\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {ConsecutiveTransfer} event.\\n     */\\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\n\\n            _currentIndex = startTokenId + quantity;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * See {_mint}.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, quantity);\\n\\n        unchecked {\\n            if (to.code.length != 0) {\\n                uint256 end = _currentIndex;\\n                uint256 index = end - quantity;\\n                do {\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (index < end);\\n                // Reentrancy protection.\\n                if (_currentIndex != end) revert();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    // =============================================================\\n    //                        BURN OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        if (approvalCheck) {\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                from,\\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    // =============================================================\\n    //                     EXTRA DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Directly sets the extra data for the ownership data `index`.\\n     */\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\n        uint256 packed = _packedOwnerships[index];\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\n        uint256 extraDataCasted;\\n        // Cast `extraData` with assembly to avoid redundant masking.\\n        assembly {\\n            extraDataCasted := extraData\\n        }\\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\\n        _packedOwnerships[index] = packed;\\n    }\\n\\n    /**\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\n     * Intended to be overridden by the cosumer contract.\\n     *\\n     * `previousExtraData` - the value of `extraData` before transfer.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _extraData(\\n        address from,\\n        address to,\\n        uint24 previousExtraData\\n    ) internal view virtual returns (uint24) {}\\n\\n    /**\\n     * @dev Returns the next extra data for the packed ownership data.\\n     * The returned result is shifted into position.\\n     */\\n    function _nextExtraData(\\n        address from,\\n        address to,\\n        uint256 prevOwnershipPacked\\n    ) private view returns (uint256) {\\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\n    }\\n\\n    // =============================================================\\n    //                       OTHER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a uint256 to its ASCII string decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\\n            let m := add(mload(0x40), 0xa0)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, m)\\n            // Assign the `str` to the end.\\n            str := sub(m, 0x20)\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                str := sub(str, 1)\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"erc721a/contracts/IERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_NFTFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"PaymentTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFactoryAddress\",\"type\":\"address\"}],\"name\":\"UpdatedBridgeFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"UpdatedOwner\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addProfits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"projectTotalProfitsPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBridgeAddress\",\"type\":\"address\"}],\"name\":\"updateBridgeFactoryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"updateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"}],\"name\":\"updatePaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"valueOfRewardsPerUserBeingClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Distribution", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "00000000000000000000000014d460004e8ea6e21ffc08790862490bd8047c7d0000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}