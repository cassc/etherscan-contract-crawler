{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2021-04-14\r\n*/\r\n\r\npragma solidity ^0.6.0;\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n    \r\n    function ceil(uint256 a, uint256 m) internal pure returns (uint256 r) {\r\n        require(m != 0, \"SafeMath: to ceil number shall not be zero\");\r\n        return (a + m - 1) / m * m;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// BEP Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\n/**\r\n * @dev Interface of the BEP20 standard as defined in the EIP.\r\n */\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// 'BCROP ' BEP 20 token\r\n\r\n// Symbol      : BCROP\r\n// Name        : BSCCROP\r\n// Total supply: 21 M\r\n// Decimals    : 18\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// BEP20 Token, with the addition of symbol, name and decimals and assisted\r\n// token transfers\r\n// ----------------------------------------------------------------------------\r\ncontract BCROP is IBEP20 {\r\n    using SafeMath for uint256;\r\n   \r\n    string public symbol = \"BCROP\";\r\n    string public  name = \"BSCCROP\";\r\n    uint256 public decimals = 18;\r\n    \r\n    uint256 _totalSupply = 21000000 * 10 ** (decimals);\r\n    \r\n    address Advisors = 0x5c9b7B895262D711cC2656aEe7d190B930ba8126;\r\n    address Team = 0x3B7446Abb094281f9E641113D9f421F4fd950821;\r\n    address Marketing = 0x469292f0c13577Ba84323a391658a4a5a748ac4b;\r\n    address PublicSale = 0xC16DcfCfeb013be45BdCEDC956bbeBf3cF715c5c;\r\n    address Treasury = 0xD60F16ca4a50e19b192d0e6f2d56184f8799789e;\r\n    address StakeFarming = 0x305A3a0F217fc2c67cdA0E9F567fb7672dDb7706;\r\n    address Liquidity = 0x37E6cc43fAA4725C3AA7d52339098F8deded682b;\r\n    \r\n    uint256 transactionCost = 1; // 1% will be burned on every transaction\r\n    uint256 unLockPercentage = 25; \r\n    uint256 unLockPeriod =  90 days; \r\n    uint256 minSupply = 14000000 * 10 ** (decimals);\r\n    uint256 public deployTime;\r\n    \r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    mapping(address => locking) locked;\r\n    struct locking{\r\n        uint256 initial;\r\n        uint256 locked;\r\n    }\r\n   \r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor() public {\r\n        // 10% unlocked, remaining vested quaterly\r\n        balances[Advisors] =  balances[Advisors].add(1050000 * 10 ** (18)); // 5%\r\n        emit Transfer(address(0), Advisors, 1050000 * 10 ** (18));\r\n        locked[Advisors].initial = locked[Advisors].initial.add(945000 * 10 ** (decimals)); // 90% locked initially\r\n        locked[Advisors].locked = locked[Advisors].locked.add(945000 * 10 ** (decimals));\r\n        \r\n        // 20% unlocked, remaining vested quaterly\r\n        balances[Team] =  balances[Team].add(4200000  * 10 ** (18)); // 20%\r\n        emit Transfer(address(0), Team, 4200000  * 10 ** (18));\r\n        locked[Team].initial = locked[Team].initial.add(3360000 * 10 ** (decimals)); // 80% locked initially\r\n        locked[Team].locked = locked[Team].locked.add(3360000 * 10 ** (decimals));\r\n        \r\n        // 10% unlocked, remaining vested quaterly\r\n        balances[Marketing] =  balances[Marketing].add(1050000 * 10 ** (18)); // 5%\r\n        emit Transfer(address(0), Marketing, 1050000 * 10 ** (18));\r\n        locked[Marketing].initial = locked[Marketing].initial.add(945000 * 10 ** (decimals)); // 90% locked initially\r\n        locked[Marketing].locked = locked[Marketing].locked.add(945000 * 10 ** (decimals));\r\n        \r\n        // no vesting - all unlocked\r\n        balances[PublicSale] =  balances[PublicSale].add(2100000  * 10 ** (18)); // 10%\r\n        emit Transfer(address(0), PublicSale, 2100000  * 10 ** (18));\r\n        \r\n        // no vesting\r\n        balances[Treasury] =  balances[Treasury].add(5250000  * 10 ** (18)); // 25%\r\n        emit Transfer(address(0), Treasury, 5250000  * 10 ** (18));\r\n        \r\n        // no vesting\r\n        balances[StakeFarming] =  balances[StakeFarming].add(5250000 * 10 ** (18)); // 25%\r\n        emit Transfer(address(0), StakeFarming, 5250000 * 10 ** (18));\r\n        \r\n        // no vesting\r\n        balances[Liquidity] =  balances[Liquidity].add(2100000  * 10 ** (18)); // 10%\r\n        emit Transfer(address(0), Liquidity, 2100000  * 10 ** (18));\r\n        \r\n        deployTime = block.timestamp;\r\n        \r\n    }\r\n\r\n   \r\n    /** BEP20Interface function's implementation **/\r\n   \r\n    function totalSupply() external override view returns (uint256){\r\n       return _totalSupply;\r\n    }\r\n   \r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) external override view returns (uint256 balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint256 tokens) external override returns (bool success){\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender,spender,tokens);\r\n        return true;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) external override view returns (uint256 remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint256 tokens) public override returns (bool success) {\r\n        \r\n        require(address(to) != address(0), \"Invalid receiver address\");\r\n        require(balances[msg.sender] >= tokens, \"Insufficient senders balance\");\r\n\r\n        if (locked[msg.sender].locked > 0){\r\n            require(_checkTransfer(tokens, msg.sender));\r\n        }\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        \r\n        uint256 deduction = deductionsToApply(tokens, to);\r\n        burnTokens(deduction);\r\n        \r\n        balances[to] = balances[to].add(tokens.sub(deduction));\r\n        emit Transfer(msg.sender, to, tokens.sub(deduction));\r\n        return true;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    //\r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint256 tokens) external override returns (bool success){\r\n        require(tokens <= allowed[from][msg.sender], \"Insufficient allowance\"); //check allowance\r\n        require(balances[from] >= tokens, \"Insufficient senders balance\");\r\n\r\n        if (locked[from].locked != 0){\r\n            require(_checkTransfer(tokens, from), \"tokens are locked\");\r\n        }\r\n        \r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n      \r\n        uint256 deduction = deductionsToApply(tokens, to);\r\n        burnTokens(deduction);\r\n       \r\n        balances[to] = balances[to].add(tokens.sub(deduction));\r\n        emit Transfer(from, to, tokens.sub(deduction));\r\n        return true;\r\n    }\r\n    \r\n    function deductionsToApply(uint256 tokens, address to) private view returns(uint256){\r\n        uint256 deduction = 0;\r\n        \r\n        if(_totalSupply > minSupply && msg.sender != Team && msg.sender != Liquidity && msg.sender != Treasury && to != 0xcc3885FcFF76B622DEeBC9E53b475c129418D392 && to != 0xA854979DD9E65331a4f9AFF4E1421Ea3988D4beD){\r\n        \r\n            deduction = onePercent(tokens).mul(transactionCost);\r\n        \r\n            if(_totalSupply.sub(deduction) < minSupply)\r\n                deduction = _totalSupply.sub(minSupply);\r\n        }\r\n        \r\n        return deduction;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Burn the `value` amount of tokens\r\n    // ------------------------------------------------------------------------\r\n    function burnTokens(uint256 value) internal{\r\n        require(_totalSupply >= value); // burn the deducted tokens\r\n        _totalSupply = _totalSupply.sub(value);\r\n        emit Transfer(msg.sender, address(0), value);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Calculates onePercent of the uint256 amount sent\r\n    // ------------------------------------------------------------------------\r\n    function _checkTransfer(uint256 _tokens, address _user) internal returns(bool){\r\n        uint256 unLockedTokens = ((block.timestamp.sub(deployTime)).div(unLockPeriod)).mul(unLockPercentage);\r\n        if (unLockedTokens > 100){\r\n            unLockedTokens = 100;\r\n        }\r\n        locked[_user].locked = locked[_user].initial.sub(onePercent(locked[_user].initial).mul(unLockedTokens));\r\n        require(( balances[_user].sub(locked[_user].locked)) >= _tokens, \"tokens are locked\");\r\n        return true;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Calculates onePercent of the uint256 amount sent\r\n    // ------------------------------------------------------------------------\r\n    function onePercent(uint256 _tokens) internal pure returns (uint256){\r\n        uint256 roundValue = _tokens.ceil(100);\r\n        uint onePercentofTokens = roundValue.mul(100).div(100 * 10**uint(2));\r\n        return onePercentofTokens;\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BCROP", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8528e9e483a40a48204475ad457a4fba09a588d0b84b79a16ad14413d2bdcb3f"}