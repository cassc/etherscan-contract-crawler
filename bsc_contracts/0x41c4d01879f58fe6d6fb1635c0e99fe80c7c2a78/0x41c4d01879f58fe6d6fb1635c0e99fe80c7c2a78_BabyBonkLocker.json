{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\ncontract BabyBonkLocker is Context, Ownable{\r\n    \r\n    IBEP20 private tokenContract;\r\n\r\n    struct LockInfo {\r\n        uint256 amount;\r\n        uint256 unlockTimestamp;\r\n        address owner;\r\n    }\r\n    mapping(address=>LockInfo) private lockerBalance;\r\n\r\n    event TokenLocked(address indexed account, uint256 amount, uint256 lockDuration);\r\n\r\n    event TokenUnLocked(address indexed account, uint256 amount);\r\n\r\n    uint256 private lockerSize=0;\r\n\r\n    address[] private lockerAddresses;\r\n\r\n    uint8 constant _decimals = 9;\r\n\r\n    constructor(\r\n        address payable _token\r\n    ){\r\n        tokenContract=IBEP20(_token);\r\n    }\r\n    function lockerToken(\r\n        uint256 _amount,\r\n        uint256 _lockDuration\r\n    ) public {\r\n        require(_lockDuration>0,\"the lockDuration must be more than 0\");\r\n        require(checkAddressLocked(msg.sender),\"this address has locked,pls unlock\");\r\n        uint256 lockAmount=_amount*10**_decimals;\r\n        require(tokenContract.balanceOf(msg.sender)>=lockAmount,\"Token less amount\");\r\n        require(tokenContract.allowance(msg.sender,address(this))>=lockAmount, \"Token allowance not\");\r\n        require(tokenContract.transferFrom(msg.sender,address(this),lockAmount), \"Token transfer failed\");\r\n        uint256 unlockTimestamp = block.timestamp + _lockDuration;\r\n        lockerBalance[msg.sender] = LockInfo({\r\n            amount: lockAmount,\r\n            unlockTimestamp: unlockTimestamp,\r\n            owner:msg.sender\r\n        });\r\n        lockerAddresses.push(msg.sender);\r\n        lockerSize++;\r\n        emit TokenLocked(msg.sender, _amount, _lockDuration);   \r\n    }\r\n\r\n    function  unLockerToken() public {\r\n        LockInfo storage lockInfo = lockerBalance[msg.sender];\r\n        require(lockInfo.unlockTimestamp <= block.timestamp, \"Tokens still locked\");\r\n        require(tokenContract.approve(address(this),lockInfo.amount),\"unlock approve failed\");\r\n        require(tokenContract.transfer(msg.sender, lockInfo.amount), \"Token transfer failed\");\r\n        require(tokenContract.approve(address(this),0),\"unlock approve 0 failed\");\r\n\r\n        delete lockerBalance[msg.sender];\r\n        lockerSize--;\r\n        emit TokenUnLocked(msg.sender, lockInfo.amount);\r\n    }\r\n\r\n    function checkAddressLocked(address addr) public  view returns (bool) {\r\n        return lockerBalance[addr].unlockTimestamp ==0;\r\n    }\r\n    function lockerList() public view returns(LockInfo[] memory) {\r\n        uint256 length = lockerAddresses.length;\r\n        LockInfo[] memory lockInfos = new LockInfo[](length);\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            address addr = lockerAddresses[i];\r\n            lockInfos[i] = lockerBalance[addr];\r\n        }\r\n\r\n        return lockInfos;\r\n\r\n    }\r\n    function userLocker() public view returns(LockInfo memory){\r\n        return lockerBalance[msg.sender];\r\n    }\r\n\r\n    function getLockerSize() public view returns(uint256){\r\n        return lockerSize;\r\n    }\r\n\r\n    function getLockPool() public  view returns(uint256){\r\n        uint256 lockPool=0;\r\n        uint256 length = lockerAddresses.length;\r\n        for(uint256 i=0;i<length;i++){\r\n            address addr = lockerAddresses[i];\r\n            LockInfo memory lockInfo = lockerBalance[addr];\r\n            lockPool+=lockInfo.amount;\r\n        }\r\n        return lockPool/(10**_decimals);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"}],\"name\":\"TokenLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenUnLocked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"checkAddressLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockerSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockerList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct BabyBonkLocker.LockInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"}],\"name\":\"lockerToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unLockerToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userLocker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct BabyBonkLocker.LockInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BabyBonkLocker", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000bb2826ab03b6321e170f0558804f2b6488c98775", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fd0b429cf613d17254c4ba2ea929374e1f7e1397d426acfae8085e481e19a218"}