{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2021-10-07\r\n*/\r\n\r\npragma solidity ^0.4.26;\r\n\r\n\r\ncontract ERC20 {\r\n  function totalSupply() public constant returns (uint);\r\n  function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n  function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n  function transfer(address to, uint tokens) public returns (bool success);\r\n  function approve(address spender, uint tokens) public returns (bool success);\r\n  function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n  event Transfer(address indexed from, address indexed to, uint tokens);\r\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\ncontract BUSDJungle {\r\n\tusing SafeMath for uint256;\r\n\taddress busd = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n\r\n    uint256 public BANNA_TO_HARVEST=2592000;\r\n    uint256 PSN=10000;\r\n    uint256 PSNH=5000;\r\n    bool public initialized=false;\r\n    address public ceoAddress;\r\n    address public ceoAddress2;\r\n  \r\n    address public owner;\r\n    mapping (address => uint256) public bananaMonkeys;\r\n    mapping (address => uint256) public claimedBananas;\r\n    mapping (address => uint256) public lastReinvest;\r\n    mapping (address => address) public referrals;\r\n    uint256 public marketBananas;\r\n  \r\n  \r\n    uint256 constant public INVEST_MIN_AMOUNT = 1000000000000000000; // 0.05\r\n\tuint256 constant public PROJECT_FEE = 100;\r\n\tuint256 constant public PERCENT_STEP = 5;\r\n\tuint256 constant public PERCENTS_DIVIDER = 1000;\r\n\tuint256 constant public TIME_STEP = 1 days;\r\n\tuint256 public totalInvested;\r\n\tuint256 public totalRefBonus;\r\n\t\r\n\tPlan[] internal plans;\r\n\r\n    struct Plan {\r\n        uint256 time;\r\n        uint256 percent;\r\n    }\r\n\r\n\tstruct Deposit {\r\n        uint8 plan;\r\n\t\tuint256 amount;\r\n\t\tuint256 start;\r\n\t}\r\n\r\n\tstruct User {\r\n\t\tDeposit[] deposits;\r\n\t\tuint256 checkpoint;\r\n\t\taddress referrer;\r\n\t\tuint256[5] levels;\r\n\t\tuint256 bonus;\r\n\t\tuint256 totalBonus;\r\n\t\tuint256 withdrawn;\r\n\t}\r\n\t\r\n    address public commissionWallet;\r\n\r\n\r\n\tmapping (address => User) internal users;\r\n\tbool public started;\r\n\r\n \r\n \tevent Newbie(address user);\r\n\tevent NewDeposit(address indexed user, uint8 plan, uint256 amount);\r\n\tevent Withdrawn(address indexed user, uint256 amount);\r\n\tevent RefBonus(address indexed referrer, address indexed referral, uint256 indexed level, uint256 amount);\r\n\tevent FeePayed(address indexed user, uint256 totalAmount);\r\n\t\r\n  \r\n  \r\n  \r\n    constructor(address wallet) public{\r\n        ceoAddress=msg.sender;\r\n        ceoAddress2=address(wallet);\r\n        require(!isContract(wallet));\r\n        commissionWallet = wallet;\r\n        plans.push(Plan(10000, 30));\r\n        plans.push(Plan(40, 50));\r\n        plans.push(Plan(60, 45));\r\n        plans.push(Plan(90, 40));\r\n        owner = msg.sender;\r\n    }\r\n  \r\n  \r\n \tfunction planInvest(uint8 plan, address referrer,uint256 amount) public payable {\r\n        if (!started) {\r\n\t\t\tif (msg.sender == ceoAddress) {\r\n\t\t\t\tstarted = true;\r\n\t\t\t} else revert(\"Not started yet\");\r\n\t\t}\r\n\t\tERC20(busd).transferFrom(address(msg.sender), address(this), amount);\r\n\t\trequire(amount >= INVEST_MIN_AMOUNT);\r\n        require(plan < 4, \"Invalid plan\");\r\n  \t    uint256 fee = amount.mul(PROJECT_FEE).div(PERCENTS_DIVIDER);\r\n\t\tuint256 fee2=fee/2;\r\n   \t    ERC20(busd).transfer(ceoAddress, fee2);\r\n\t\tERC20(busd).transfer(ceoAddress2, fee-fee2);\r\n\t \temit FeePayed(msg.sender, fee);\r\n\t\t\r\n\r\n\t\tUser storage user = users[msg.sender];\r\n\t\t\r\n\t\tif (user.referrer == address(0)) {\r\n\t\t\tif (users[referrer].deposits.length > 0 && referrer != msg.sender) {\r\n\t\t\t\tuser.referrer = referrer;\r\n\t \t        uint256 reffer_bonus= msg.value.mul(PROJECT_FEE).div(PERCENTS_DIVIDER);\r\n\t\t\t \tERC20(busd).transfer(msg.sender, reffer_bonus);\r\n\t\t\t}\r\n        }\r\n\r\n\t\tif (user.deposits.length == 0) {\r\n\t\t\tuser.checkpoint = block.timestamp;\r\n\t\t\temit Newbie(msg.sender);\r\n\t\t}\r\n\r\n\t\tuser.deposits.push(Deposit(plan, amount, block.timestamp));\r\n\r\n\t\ttotalInvested = totalInvested.add(amount);\r\n\r\n\t\temit NewDeposit(msg.sender, plan, amount);\r\n\t}\r\n\t\r\n\t\r\n\tfunction planWithdraw() public payable{\r\n\t\tUser storage user = users[msg.sender];\r\n\r\n\t\tuint256 totalAmount = getUserDividends(msg.sender);\r\n\r\n\t\trequire(totalAmount > 0, \"User has no dividends\");\r\n        uint256 balance = ERC20(busd).balanceOf(address(this));\r\n\t\tif (balance < totalAmount) {\r\n\t\t\tuser.bonus = totalAmount.sub(balance);\r\n\t\t\tuser.totalBonus = user.totalBonus.add(user.bonus);\r\n\t\t\ttotalAmount = balance;\r\n\t\t}\r\n\t\tuser.checkpoint = block.timestamp;\r\n\t\tuser.withdrawn = user.withdrawn.add(totalAmount);\r\n\t\tuint256 fee = totalAmount.mul(PROJECT_FEE).div(PERCENTS_DIVIDER);\r\n\t\tuint256 fee2=fee/2;\r\n\t\tERC20(busd).transfer(ceoAddress, fee2);\r\n\t\tERC20(busd).transfer(ceoAddress2, fee-fee2);\r\n\t\tERC20(busd).transfer(msg.sender,totalAmount);\r\n\t\temit FeePayed(msg.sender, fee);\r\n\t    emit Withdrawn(msg.sender, totalAmount);\r\n\r\n\r\n\t}\r\n  \r\n\r\n  \r\n \tfunction getContractBalance() public view returns (uint256) {\r\n\t\treturn address(this).balance;\r\n\t}\r\n\r\n\tfunction getPlanInfo(uint8 plan) public view returns(uint256 time, uint256 percent) {\r\n\t require(owner == msg.sender, \"You cannot Start Function.\");\r\n\t\ttime = plans[plan].time;\r\n\t\tpercent = plans[plan].percent;\r\n\t}\r\n\r\n\tfunction getUserDividends(address userAddress) public view returns (uint256) {\r\n\t    require(owner == msg.sender, \"You cannot Start Function.\");\r\n\t    User storage user = users[userAddress];\r\n\r\n\t\tuint256 totalAmount;\r\n\r\n\t\tfor (uint256 i = 0; i < user.deposits.length; i++) {\r\n\t\t\tuint256 finish = user.deposits[i].start.add(plans[user.deposits[i].plan].time.mul(1 days));\r\n\t\t\tif (user.checkpoint < finish) {\r\n\t\t\t\tuint256 share = user.deposits[i].amount.mul(plans[user.deposits[i].plan].percent).div(PERCENTS_DIVIDER);\r\n\t\t\t\tuint256 from = user.deposits[i].start > user.checkpoint ? user.deposits[i].start : user.checkpoint;\r\n\t\t\t\tuint256 to = finish < block.timestamp ? finish : block.timestamp;\r\n\t\t\t\tif (from < to) {\r\n\t\t\t\t\ttotalAmount = totalAmount.add(share.mul(to.sub(from)).div(TIME_STEP));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn totalAmount;\r\n\t}\r\n\r\n\tfunction getUserTotalWithdrawn(address userAddress) public view returns (uint256) {\r\n\t require(owner == msg.sender, \"You cannot Start Function.\");\r\n\t\treturn users[userAddress].withdrawn;\r\n\t}\r\n\r\n\tfunction getUserCheckpoint(address userAddress) public view returns(uint256) {\r\n\t require(owner == msg.sender, \"You cannot Start Function.\");\r\n\t\treturn users[userAddress].checkpoint;\r\n\t}\r\n\r\n\tfunction getUserAmountOfDeposits(address userAddress) public view returns(uint256) {\r\n\t require(owner == msg.sender, \"You cannot Start Function.\");\r\n\t\treturn users[userAddress].deposits.length;\r\n\t}\r\n\r\n\tfunction getUserTotalDeposits(address userAddress) public view returns(uint256 amount) {\r\n\t require(owner == msg.sender, \"You cannot Start Function.\");\r\n\t\tfor (uint256 i = 0; i < users[userAddress].deposits.length; i++) {\r\n\t\t\tamount = amount.add(users[userAddress].deposits[i].amount);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getUserDepositInfo(address userAddress, uint256 index) public view returns(uint8 plan, uint256 percent, uint256 amount, uint256 start, uint256 finish) {\r\n\t require(owner == msg.sender, \"You cannot Start Function.\");\r\n\t User storage user = users[userAddress];\r\n\r\n\t\tplan = user.deposits[index].plan;\r\n\t\tpercent = plans[plan].percent;\r\n\t\tamount = user.deposits[index].amount;\r\n\t\tstart = user.deposits[index].start;\r\n\t\tfinish = user.deposits[index].start.add(plans[user.deposits[index].plan].time.mul(1 days));\r\n\t}\r\n\r\n\tfunction getSiteInfo() public view returns(uint256 _totalInvested, uint256 _totalBonus) {\r\n\t require(owner == msg.sender, \"You cannot Start Function.\");\r\n\t\treturn(totalInvested, totalRefBonus);\r\n\t}\r\n\r\n\tfunction getUserInfo(address userAddress) public view returns(uint256 totalDeposit, uint256 totalWithdrawn) {\r\n\t require(owner == msg.sender, \"You cannot Start Function.\");\r\n\t\treturn(getUserTotalDeposits(userAddress), getUserTotalWithdrawn(userAddress));\r\n\t}\r\n\t\r\n\tfunction isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n  \r\n    function sellBananas() public payable{\r\n        require(initialized);\r\n        uint256 hashBnb=getMyBananas();\r\n        uint256 bannasvalue=calculateBananaSell(hashBnb);\r\n        uint256 fee=devFee(bannasvalue);\r\n        uint256 fee2=fee/2;\r\n        claimedBananas[msg.sender]=0;\r\n        lastReinvest[msg.sender]=now;\r\n        marketBananas=SafeMath.add(marketBananas,hashBnb);\r\n        ERC20(busd).transfer(ceoAddress, fee2);\r\n        ERC20(busd).transfer(ceoAddress2, fee-fee2);\r\n        ERC20(busd).transfer(address(msg.sender),SafeMath.sub(bannasvalue,fee));\r\n    }\r\n\r\n    function reInvestBananas(address ref) public{\r\n        require(initialized);\r\n        if(ref == msg.sender) {\r\n            ref = address(0);\r\n        }\r\n        if(referrals[msg.sender]==address(0) && referrals[msg.sender]!=msg.sender){\r\n            referrals[msg.sender]=ref;\r\n        }\r\n        uint256 bananasused=getMyBananas();\r\n        uint256 newMonkeys=SafeMath.div(bananasused,BANNA_TO_HARVEST);\r\n        bananaMonkeys[msg.sender]=SafeMath.add(bananaMonkeys[msg.sender],newMonkeys);\r\n        claimedBananas[msg.sender]=0;\r\n        lastReinvest[msg.sender]=now;\r\n  \r\n        claimedBananas[referrals[msg.sender]]=SafeMath.add(claimedBananas[referrals[msg.sender]],SafeMath.div(bananasused,10));\r\n  \r\n        marketBananas=SafeMath.add(marketBananas,SafeMath.div(bananasused,5));\r\n    }\r\n\r\n    function buyMonkeys(address ref,uint256 amount) public payable {\r\n        require(initialized);\r\n        ERC20(busd).transferFrom(address(msg.sender), address(this), amount);\r\n        uint256 balance = ERC20(busd).balanceOf(address(this));\r\n\r\n        uint256 bananasBought=calculateMonkeysBuy(amount,SafeMath.sub(balance,amount));\r\n        bananasBought=SafeMath.sub(bananasBought,devFee(bananasBought));\r\n        uint256 fee=devFee(amount);\r\n        uint256 fee2=fee/2;\r\n        ERC20(busd).transfer(ceoAddress, fee2);\r\n        ERC20(busd).transfer(ceoAddress2, fee-fee2);\r\n        claimedBananas[msg.sender]=SafeMath.add(claimedBananas[msg.sender],bananasBought);\r\n        reInvestBananas(ref);\r\n    }\r\n  \r\n  \r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\r\n    }\r\n\r\n    function calculateBananaSell(uint256 bananas) public view returns(uint256){\r\n        return calculateTrade(bananas,marketBananas,ERC20(busd).balanceOf(address(this)));\r\n    }\r\n\r\n    function calculateMonkeysBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\r\n        return calculateTrade(eth,contractBalance,marketBananas);\r\n    }\r\n\r\n    function calcuateMonkeysBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculateMonkeysBuy(eth,ERC20(busd).balanceOf(address(this)));\r\n    }\r\n\r\n    function devFee(uint256 amount) public pure returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(amount,10),100);\r\n    }\r\n\r\n    function seedJungle(uint256 amount) public payable{\r\n        ERC20(busd).transferFrom(address(msg.sender), address(this), amount);\r\n        require(marketBananas==0);\r\n        initialized=true;\r\n        marketBananas=259200000000;\r\n    }\r\n\r\n    function getBalance() public view returns(uint256){\r\n        return ERC20(busd).balanceOf(address(this));\r\n    }\r\n\r\n    function getMyMonkeys() public view returns(uint256){\r\n        return bananaMonkeys[msg.sender];\r\n    }\r\n  \r\n    function getMyBananas() public view returns(uint256){\r\n        return SafeMath.add(claimedBananas[msg.sender],getBanansSinceLastReinvest(msg.sender));\r\n    }\r\n\r\n    function getBanansSinceLastReinvest(address adr) public view returns(uint256){\r\n        uint256 secondsPassed=min(BANNA_TO_HARVEST,SafeMath.sub(now,lastReinvest[adr]));\r\n        return SafeMath.mul(secondsPassed,bananaMonkeys[adr]);\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n /**\r\n * @dev Multiplies two numbers, throws on overflow.\r\n */\r\n function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n if (a == 0) {\r\n return 0;\r\n }\r\n uint256 c = a * b;\r\n assert(c / a == b);\r\n return c;\r\n }\r\n\r\n /**\r\n * @dev Integer division of two numbers, truncating the quotient.\r\n */\r\n function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n uint256 c = a / b;\r\n // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n return c;\r\n }\r\n\r\n /**\r\n * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n */\r\n function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n assert(b <= a);\r\n return a - b;\r\n }\r\n\r\n /**\r\n * @dev Adds two numbers, throws on overflow.\r\n */\r\n function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n uint256 c = a + b;\r\n assert(c >= a);\r\n return c;\r\n }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastReinvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getBanansSinceLastReinvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyMonkeys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rt\",\"type\":\"uint256\"},{\"name\":\"rs\",\"type\":\"uint256\"},{\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"plan\",\"type\":\"uint8\"},{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"planInvest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"reInvestBananas\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROJECT_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSiteInfo\",\"outputs\":[{\"name\":\"_totalInvested\",\"type\":\"uint256\"},{\"name\":\"_totalBonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERCENT_STEP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calcuateMonkeysBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"name\":\"totalWithdrawn\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"seedJungle\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRefBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketBananas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"bananas\",\"type\":\"uint256\"}],\"name\":\"calculateBananaSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BANNA_TO_HARVEST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedBananas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyBananas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commissionWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateMonkeysBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"planWithdraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"getPlanInfo\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"percent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyMonkeys\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellBananas\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserDepositInfo\",\"outputs\":[{\"name\":\"plan\",\"type\":\"uint8\"},{\"name\":\"percent\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"finish\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserCheckpoint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INVEST_MIN_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bananaMonkeys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"plan\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"FeePayed\",\"type\":\"event\"}]", "ContractName": "BUSDJungle", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000005eb1d63e66407c879ff94997ee24df0f759cefc6", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://9b25f5956a6954fa446445b00ba36ee7ef94d943297224ac2b6d6deea3cf948e"}