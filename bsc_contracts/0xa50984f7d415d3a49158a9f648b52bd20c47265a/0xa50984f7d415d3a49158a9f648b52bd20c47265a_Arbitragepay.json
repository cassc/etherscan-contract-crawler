{"SourceCode": "//SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.7.6;\r\n\r\ncontract Arbitragepay {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant INVEST_MIN_AMOUNT = 0.1 ether;\r\n    uint256 public constant INVEST_MAX_AMOUNT = 175 ether;\r\n    uint256 public constant BASE_PERCENT = 100; // 1% per day\r\n    uint256[] public DIRECT_REFERRAL_PERCENTS = [600, 700, 800,900,1000,1000,1100,1200,1300];\r\n    uint256[] public INDIRECT_REFERRAL = [350, 300,250,200,175, 150,125,100,50];\r\n    uint256[] public DepositSlab = [0.4 ether, 0.8 ether, 1.6 ether, 3.5 ether , 7 ether, 10.5 ether , 17.5 ether, 35 ether, 175 ether];\r\n    \r\n    uint256 public constant MARKETING_FEE = 2000;\r\n    uint256 public constant PERCENTS_DIVIDER = 10000;\r\n    uint256 public constant TIME_STEP = 1 days;\r\n    uint256 public LAUNCH_TIME;\r\n\r\n    \r\n\r\n    uint256 public totalUsers;\r\n    uint256 public totalInvested;\r\n    uint256 public totalWithdrawn;\r\n    uint256 public totalDeposits;\r\n\r\n    address payable public marketingAddress;\r\n    address payable public projectAddress;\r\n    address payable public owner;\r\n\r\n    struct Deposit {\r\n        uint256 amount;\r\n        uint256 start;\r\n    }\r\n\r\n    struct User {\r\n        Deposit[] deposits;\r\n        uint256 checkpoint;\r\n        address payable referrer;\r\n        uint256 bonus;\r\n        uint256 id;\r\n        uint256 returnedDividends;\r\n        uint256 available;\r\n        uint256 withdrawn;\r\n        uint256[10] structure;\r\n        uint256 direct_bonus;\r\n        bool is_networker;\r\n        bool hasUsersBonus;\r\n    }\r\n\r\n    mapping(address => User) public users;\r\n\r\n    event Newbie(address user);\r\n    event NewDeposit(address indexed user, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event RefBonus(\r\n        address indexed referrer,\r\n        address indexed referral,\r\n        uint256 indexed level,\r\n        uint256 amount\r\n    );\r\n    event FeePayed(address indexed user, uint256 totalAmount);\r\n\r\n    modifier beforeStarted() {\r\n        require(block.timestamp >= LAUNCH_TIME, \"!beforeStarted\");\r\n        _;\r\n    }\r\n\r\n    constructor(address payable marketingAddr) {\r\n        require(!isContract(marketingAddr), \"!marketingAddr\");\r\n      \r\n        owner = msg.sender;\r\n        marketingAddress = marketingAddr;\r\n\r\n        if (getChainID() == 97) {\r\n            LAUNCH_TIME = block.timestamp; // Test Network\r\n        } else {\r\n            LAUNCH_TIME = block.timestamp; \r\n        }\r\n    }\r\n\r\n    function invest(address payable referrer) public payable beforeStarted() {\r\n        require(msg.value >= INVEST_MIN_AMOUNT, \"!INVEST_MIN_AMOUNT\");\r\n        require(msg.value <= INVEST_MAX_AMOUNT, \"!INVEST_MAX_AMOUNT\");\r\n        \r\n\r\n        marketingAddress.transfer(\r\n            msg.value.mul(MARKETING_FEE).div(PERCENTS_DIVIDER)\r\n        );\r\n\r\n        \r\n\r\n        User storage user = users[msg.sender];\r\n\r\n        if (\r\n            user.referrer == address(0) &&\r\n            users[referrer].deposits.length > 0 &&\r\n            referrer != msg.sender\r\n        ) {\r\n            user.referrer = referrer;\r\n        }else if(user.referrer == address(0) && user.deposits.length == 0 ){\r\n\r\n            user.referrer = owner;\r\n        }\r\n\r\n        if (user.referrer != address(0)) {\r\n            address payable upline = user.referrer;\r\n            uint256 referral_index_joinee =  get_suitable_referral_index(msg.value);\r\n            for (uint256 i = 0; i < DepositSlab.length + 1; i++) {\r\n                if (upline != address(0)) {\r\n\r\n                    users[upline].structure[i]++;\r\n\r\n                    //update upliner limit to 300% if it has two directs\r\n                    if(users[upline].structure[0] > 1 && users[upline].is_networker == false)\r\n                    {\r\n                        users[upline].is_networker = true;\r\n                        uint256 userTotalDeposit =  getUserTotalDeposits(upline);\r\n                       \r\n                        users[upline].available = users[upline].available.add(userTotalDeposit);\r\n\r\n                    }\r\n                    uint256 index;\r\n                    uint256 upline_total_deposit =  getUserTotalDeposits(upline);\r\n                     uint256 referral_index_upline =  get_suitable_referral_index(upline_total_deposit);\r\n                        \r\n                        if(referral_index_joinee < referral_index_upline)\r\n                        {\r\n                             index = referral_index_joinee;\r\n                        }\r\n                        else\r\n                        {\r\n                             index = referral_index_upline;\r\n                        }\r\n\r\n                     \r\n                    if(i == 0)  // Direct referral commission time\r\n                    {\r\n                        \r\n                        uint256 amountt =\r\n                        msg.value.mul(DIRECT_REFERRAL_PERCENTS[index]).div(\r\n                            PERCENTS_DIVIDER\r\n                        );\r\n\r\n                        if (users[upline].available < amountt) {\r\n\r\n                             amountt = users[upline].available;\r\n                        }\r\n                        upline.transfer(amountt);\r\n                         users[upline].direct_bonus = users[upline].direct_bonus.add(amountt);\r\n\r\n                         users[upline].available = users[upline].available.sub(amountt);\r\n                       \r\n                        \r\n                    }else if (referral_index_upline.add(1) >= i){\r\n                        uint256 amount =\r\n                        msg.value.mul(INDIRECT_REFERRAL[i-1]).div(\r\n                            PERCENTS_DIVIDER\r\n                        );\r\n\r\n                        if(users[upline].available < amount) {\r\n\r\n                             amount = users[upline].available;\r\n                        }\r\n                        upline.transfer(amount);\r\n\r\n                        users[upline].bonus = users[upline].bonus.add(amount);\r\n                        users[upline].available = users[upline].available.sub(amount);\r\n\r\n                    }\r\n                    \r\n                    upline = users[upline].referrer;\r\n                } else break;\r\n            }\r\n\r\n        }\r\n\r\n        if (user.deposits.length == 0) {\r\n            user.checkpoint = block.timestamp.add(24 hours);\r\n           \r\n            totalUsers = totalUsers.add(1);\r\n            user.id = totalUsers;\r\n            user.hasUsersBonus = true;\r\n            user.returnedDividends = 0;\r\n            user.withdrawn = 0;\r\n            emit Newbie(msg.sender);\r\n        }\r\n\r\n        user.available = user.available.add(msg.value.mul(2)); // 200 % Max at the time of joinee\r\n        \r\n\r\n        user.deposits.push(Deposit(msg.value, block.timestamp.add(24 hours)));\r\n       \r\n\r\n        totalInvested = totalInvested.add(msg.value);\r\n        totalDeposits = totalDeposits.add(1);\r\n\r\n        emit NewDeposit(msg.sender, msg.value);\r\n    }\r\n\r\n    function withdraw() public beforeStarted() {\r\n        require(\r\n            getTimer(msg.sender) < block.timestamp,\r\n            \"withdrawal is available only once In a week\"\r\n        );\r\n        \r\n\r\n\r\n        User storage user = users[msg.sender];\r\n        uint256 totalAmount;\r\n        uint256 dividends;\r\n\r\n        for (uint256 i = 0; i < user.deposits.length; i++) {\r\n            if (user.available > 0) {\r\n                if (user.deposits[i].start > user.checkpoint) {\r\n                    dividends = (\r\n                        user.deposits[i].amount.mul(BASE_PERCENT).div(\r\n                            PERCENTS_DIVIDER\r\n                        )\r\n                    )\r\n                        .mul(block.timestamp.sub(user.deposits[i].start))\r\n                        .div(TIME_STEP);\r\n                } else {\r\n                    dividends = (\r\n                        user.deposits[i].amount.mul(BASE_PERCENT).div(\r\n                            PERCENTS_DIVIDER\r\n                        )\r\n                    )\r\n                        .mul(block.timestamp.sub(user.checkpoint))\r\n                        .div(TIME_STEP);\r\n                }\r\n\r\n                totalAmount = totalAmount.add(dividends);\r\n            }\r\n        }\r\n\r\n        totalAmount = totalAmount.add(user.returnedDividends);\r\n        if (user.available < totalAmount) {\r\n            totalAmount = user.available;\r\n        }\r\n\r\n        require(totalAmount >= 0.2 ether, \"Less then the minimum withdrawal\");\r\n\r\n                // transfer 5% referral on withdrawal\r\n        if(user.referrer != address(0))\r\n        {\r\n            uint256 w_fee = totalAmount.mul(5).div(100);\r\n             if(users[user.referrer].available < w_fee) {\r\n                w_fee = users[user.referrer].available;\r\n            }\r\n            user.referrer.transfer(w_fee);\r\n            users[user.referrer].bonus = users[user.referrer].bonus.add(w_fee);\r\n            users[user.referrer].available =  users[user.referrer].available.sub(w_fee);\r\n            totalAmount = totalAmount.sub(w_fee);\r\n        }\r\n\r\n        \r\n\r\n        uint256 contractBalance = address(this).balance;\r\n        if (contractBalance < totalAmount) {\r\n            totalAmount = contractBalance;\r\n        }\r\n\r\n        user.checkpoint = block.timestamp;\r\n\r\n        msg.sender.transfer(totalAmount);\r\n\r\n        user.available = user.available.sub(totalAmount);\r\n        user.withdrawn = user.withdrawn.add(totalAmount);\r\n        totalWithdrawn = totalWithdrawn.add(totalAmount);\r\n\r\n\r\n      \r\n\r\n        if (isActive(msg.sender)) {\r\n            user.hasUsersBonus = false;\r\n        } else {\r\n            user.id = totalUsers;\r\n        }\r\n\r\n        emit Withdrawn(msg.sender, totalAmount);\r\n    }\r\n\r\n    function getContractBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function get_suitable_referral_index(uint256 amt) public view returns(uint256 i)\r\n    {\r\n        for (  i = 0; i < DepositSlab.length; i++ )\r\n        {\r\n            if(amt <= DepositSlab[i])\r\n            {\r\n                return i;\r\n                \r\n            }\r\n\r\n        }\r\n    }\r\n   \r\n    function getUserDividends(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        User storage user = users[userAddress];\r\n\r\n      //  uint256 userPercentRate = getUserPercentRate(userAddress); // ultimately it returns Base percent rate\r\n      \r\n\r\n        uint256 totalDividends;\r\n        uint256 dividends;\r\n\r\n        for (uint256 i = 0; i < user.deposits.length; i++) {\r\n            if (user.available > 0) {\r\n                if (user.deposits[i].start > user.checkpoint) {\r\n                    dividends = (\r\n                        user.deposits[i].amount.mul(BASE_PERCENT).div(\r\n                            PERCENTS_DIVIDER\r\n                        )\r\n                    )\r\n                        .mul(block.timestamp.sub(user.deposits[i].start))\r\n                        .div(TIME_STEP);\r\n                } else {\r\n                    dividends = (\r\n                        user.deposits[i].amount.mul(BASE_PERCENT).div(\r\n                            PERCENTS_DIVIDER\r\n                        )\r\n                    )\r\n                        .mul(block.timestamp.sub(user.checkpoint))\r\n                        .div(TIME_STEP);\r\n                }\r\n\r\n                totalDividends = totalDividends.add(dividends);\r\n\r\n                /// no update of withdrawn because that is view function\r\n            }\r\n        }\r\n        totalDividends = totalDividends.add(user.returnedDividends);\r\n\r\n        if (totalDividends > user.available) {\r\n            totalDividends = user.available;\r\n        }\r\n\r\n        return totalDividends;\r\n    }\r\n\r\n    function getUserCheckpoint(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return users[userAddress].checkpoint;\r\n    }\r\n\r\n    function getUserReferrer(address userAddress)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return users[userAddress].referrer;\r\n    }\r\n\r\n    function getUserReferralBonus(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        return (users[userAddress].bonus,users[userAddress].direct_bonus);\r\n    }\r\n\r\n    function getUserAvailable(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return getUserDividends(userAddress);\r\n    }\r\n\r\n    function getAvailable(address userAddress) public view returns (uint256) {\r\n        return users[userAddress].available;\r\n    }\r\n\r\n    \r\n\r\n    function getUserAmountOfReferrals(address userAddress)\r\n        public\r\n        view\r\n        returns (\r\n            uint256[10] memory structure\r\n        )\r\n    {\r\n\r\n        for(uint8 i = 0; i < DIRECT_REFERRAL_PERCENTS.length; i++) {\r\n            structure[i] = users[userAddress].structure[i];\r\n        }\r\n        return (\r\n             structure\r\n        );\r\n    }\r\n\r\n    function getTimer(address userAddress) public view returns (uint256) {\r\n        return users[userAddress].checkpoint.add(7 days);\r\n    }\r\n\r\n    function getChainID() public pure returns (uint256) {\r\n        uint256 id;\r\n        assembly {\r\n            id := chainid()\r\n        }\r\n        return id;\r\n    }\r\n\r\n    function isActive(address userAddress) public view returns (bool) {\r\n        User memory user = users[userAddress];\r\n\r\n        if (user.available > 0) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function isNetworker(address userAddress) public view returns (bool) {\r\n        User memory user = users[userAddress];\r\n\r\n        if (user.is_networker) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getUserDepositInfo(address userAddress, uint256 index)\r\n        public\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        User storage user = users[userAddress];\r\n\r\n        return (user.deposits[index].amount, user.deposits[index].start);\r\n    }\r\n\r\n    function userHasBonus(address userAddress) public view returns (bool) {\r\n        return users[userAddress].hasUsersBonus;\r\n    }\r\n\r\n    function getUserAmountOfDeposits(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return users[userAddress].deposits.length;\r\n    }\r\n\r\n    function getUserTotalDeposits(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        User storage user = users[userAddress];\r\n\r\n        uint256 amount;\r\n\r\n        for (uint256 i = 0; i < user.deposits.length; i++) {\r\n            amount = amount.add(user.deposits[i].amount);\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    function getUserTotalWithdrawn(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        User storage user = users[userAddress];\r\n\r\n        return user.withdrawn;\r\n    }\r\n\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"marketingAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"FeePayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"DIRECT_REFERRAL_PERCENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"DepositSlab\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"INDIRECT_REFERRAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVEST_MAX_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVEST_MIN_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LAUNCH_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKETING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfReferrals\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"structure\",\"type\":\"uint256[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserDepositInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"get_suitable_referral_index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"isNetworker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"userHasBonus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"returnedDividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"direct_bonus\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"is_networker\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasUsersBonus\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Arbitragepay", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000ec7296b5d212d8220fddc0df2560e3a8e9be4dbb", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1fd8eab4c714a76fd02189cc39d44bf3f51454e4021811b04f1c31e81ff6d270"}