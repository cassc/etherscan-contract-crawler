{"SourceCode": "// SPDX-License-Identifier: none\r\npragma solidity ^0.8.17;\r\n/**     \r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\n\r\ninterface BEP20 {\r\n    function totalSupply() external view returns (uint theTotalSupply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function burn(uint _amount) external returns (bool success);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\ncontract Ownable {\r\n  address public owner;  \r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  constructor() {\r\n    owner = msg.sender;\r\n  }\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n}\r\ncontract SquidNetwork is Ownable { \r\n        \r\n    BEP20 token; \r\n    uint public buyPrice        = 1;\r\n    uint public buyPriceDecimal = 1;\r\n    address _contract = address(this);\r\n    constructor() {\r\n    }\r\n\r\n       struct Tariff {\r\n        uint time;\r\n        uint percent;\r\n    }\r\n\r\n    struct Deposit {\r\n        uint tariff;\r\n        uint amount;\r\n        uint at;\r\n    }\r\n\r\n    struct Investor {\r\n        bool registered;\r\n        Deposit[] deposits;\r\n        uint invested;\r\n        uint paidAt;\r\n        uint withdrawn;\r\n    }\r\n\r\n    mapping (address => Investor) public investors;\r\n    uint public totalInvested;\r\n    event DepositAt(address user, uint tariff, uint amount);  \r\n    event RegisterAt(address user, uint amount);  \r\n    event DonationAt(address user, uint amount);  \r\n\r\n    function transferOwnership(address _to) public {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        address oldOwner  = owner;\r\n        owner = _to;\r\n        emit OwnershipTransferred(oldOwner,_to);\r\n    }\r\n\r\n    function register() external payable {\r\n        uint tariff = 0;\r\n        require(msg.value >= 0);\r\n        if(investors[msg.sender].registered){\r\n            require(investors[msg.sender].deposits[0].tariff == tariff);\r\n        }\r\n    \r\n        uint tokenVal = msg.value;\r\n        \r\n        investors[msg.sender].invested += tokenVal;\r\n        totalInvested += tokenVal;\r\n        \r\n        investors[msg.sender].deposits.push(Deposit(tariff, tokenVal, block.timestamp));\r\n        emit DepositAt(msg.sender, tariff, msg.value);\r\n    }\r\n\r\n    function withdrawalBnb(address payable _to, uint _amount) external{\r\n        require(msg.sender == owner, \"Only owner\");\r\n        require(_amount != 0, \"Zero amount error\");\r\n        _amount = _amount*10**10;\r\n        _to.transfer(_amount);\r\n    }\r\n\r\n   \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tariff\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositAt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DonationAt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RegisterAt\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyPriceDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawalBnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SquidNetwork", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ac604d5080c267f14f275fab9f124accc12801a2fce76c7902284e31d1ad9403"}