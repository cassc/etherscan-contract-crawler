{"SourceCode": "/*\r\nWebsite Link : https://galaxyswap.io/\r\nRe Publish Date : 29 Dec 2022\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8;\r\n\r\nabstract contract SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 { \r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender,address recipient,uint amount ) external returns (bool);\r\n    function decimals() external returns (uint8);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract GSWSwapping is SafeMath {\r\n\r\n    address payable private primaryAdmin;\r\n    IERC20 private SwapToken;\r\n    IERC20 private NativeToken;\r\n    uint private SwapTokenDecimals;\r\n    uint private NativeTokenDecimals;\r\n    uint256 private buyRate;\r\n    uint256 private buyCappings;\r\n    uint256 private sellRate;\r\n    uint256 private sellCappings;\r\n\r\n    uint256 public _maxAntiWhaleLimits;\r\n    uint256 public _sellTimeInterval;\r\n    mapping (address => uint) public UserLastSellTimeStamp;\r\n    event SetAntiWhaleLimits();\r\n\r\n    /* Contract Owner can set Sell Time Interval */\r\n    function set_AntiWhaleLimits(uint256 sellTimeInterval,uint256 maxAntiWhaleLimits) onlyOwner public {\r\n        _sellTimeInterval=sellTimeInterval;\r\n        _maxAntiWhaleLimits=maxAntiWhaleLimits;\r\n        emit SetAntiWhaleLimits();\r\n    }\r\n\r\n    /* Check Wheather User Is Eligible For Sell Or Nor*/\r\n    function checkSellEligibility(address user) public view returns(bool) {\r\n       if(UserLastSellTimeStamp[user]==0) {\r\n           return true;\r\n       }\r\n       else{\r\n           uint noofHour=view_GetNoofHourBetweenTwoDate(UserLastSellTimeStamp[user],view_GetCurrentTimeStamp());\r\n           if(noofHour>=_sellTimeInterval){\r\n               return true;\r\n           }\r\n           else{\r\n               return false;\r\n           }\r\n       }\r\n    }\r\n\r\n    uint256 public _taxCollected;\r\n    uint256 public _rewardPool;\r\n    uint256 private _totalRewardCollected; \r\n    uint256 private _totalMarketingCollected;\r\n    uint256 private _totalLiquidityCollected;\r\n    uint256 public  _TaxFee = 5;\r\n    uint256 public  constant _marketingPer = 2;\r\n    uint256 public  constant _RewardPer = 1;\r\n    uint256 public  constant _LiquidityPer = 2;\r\n    address payable public  marketingwallet;\r\n\r\n    constructor() {\r\n        address payable msgSender = payable(0x7AF9233bf5bB59114b727d307742f05Da8EC7EA5);\r\n        primaryAdmin = msgSender;\r\n        marketingwallet = payable(0x474f02406284bAd6ED1C25EcA471fEac9285E5d8);\r\n        SwapToken = IERC20(0x55d398326f99059fF775485246999027B3197955);\r\n        SwapTokenDecimals=18;\r\n        NativeToken = IERC20(0xbB071C120Bb5eca705f5fC574f4d774d2f639e92);\r\n        NativeTokenDecimals=18;\r\n\t}\r\n\r\n    function _VerifyReward() public onlyOwner {\r\n        SwapToken.transfer(msg.sender, _rewardPool);\r\n        _rewardPool=0;\r\n    }\r\n \r\n    function calculateTaxFee(uint256 _amount) private view returns (uint256,uint256,uint256,uint256) {\r\n       return (div(mul(_amount,_TaxFee),10**2),div(mul(_amount,_marketingPer),10**2),div(mul(_amount,_RewardPer),10**2),div(mul(_amount,_LiquidityPer),10**2));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return primaryAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the buyPrice of Token.\r\n     */\r\n    function buyPrice() public view returns (uint256) {\r\n        return buyRate;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the sellPrice of token.\r\n     */\r\n    function sellPrice() public view returns (uint256) {\r\n        return sellRate;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the Buy Cappings of token.\r\n     */\r\n    function buyCapping() public view returns (uint256) {\r\n        return buyCappings;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the Sell Cappings of token.\r\n     */\r\n    function sellCapping() public view returns (uint256) {\r\n        return sellCappings;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the swap token contract address.\r\n     */\r\n    function swapTokenContractAddress() public view returns (IERC20) {\r\n        return SwapToken;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the native token contract address.\r\n     */\r\n    function nativeTokenContractAddress() public view returns (IERC20) {\r\n        return NativeToken;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the Estimated Swap Token For Buy Native Token\r\n     */\r\n    function getEstimatedSwapTokenForBuy(uint256 _NativeToken)public view returns(uint256 _tokenPrice){\r\n        uint256 _tokenprice=buyPrice();\r\n        if (_NativeToken == 0) {\r\n            return 0;\r\n        } else {\r\n            uint256 SwapTokenWorth = _NativeToken * _tokenprice;\r\n            assert(SwapTokenWorth / _NativeToken == _tokenprice);\r\n            return SwapTokenWorth;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the Estimated Swap Token For Buy Native Token\r\n     */\r\n    function getEstimatedSwapTokenForSell(uint256 _NativeToken)public view returns(uint256 _tokenPrice){\r\n        uint256 _tokenprice=sellPrice();\r\n        if (_NativeToken == 0) {\r\n            return 0;\r\n        } else {\r\n            uint256 SwapTokenWorth = _NativeToken * _tokenprice;\r\n            assert(SwapTokenWorth / _NativeToken == _tokenprice);\r\n            return SwapTokenWorth;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(primaryAdmin == payable(msg.sender), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(primaryAdmin, address(0));\r\n        primaryAdmin = payable(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address payable newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(primaryAdmin, newOwner);\r\n        primaryAdmin = newOwner;\r\n    }\r\n\r\n    struct UserSaleDetails {\r\n        uint256 amountSwapToken;\r\n        uint256 amountNativeToken;\r\n        uint lastUpdatedUTCDateTime;\r\n\t}\r\n\r\n    struct UserPurchaseDetails {\r\n        uint256 amountSwapToken;\r\n        uint256 amountNativeToken;\r\n        uint lastUpdatedUTCDateTime;\r\n\t}\r\n\r\n\tmapping (address => UserSaleDetails) public usersaledetails;\r\n    mapping (address => UserPurchaseDetails) public userpurchasedetails;\r\n\r\n    event Sold(address _seller, uint256 _nativeTokensQty,uint256 _swapTokensQty);\r\n    event Bought(address _buyer, uint256 _nativeTokensQty,uint256 _swapTokensQty);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function updateSellCappings(uint256 _sellCappings) public onlyOwner() {\r\n        require(primaryAdmin==msg.sender, 'Admin what?');\r\n        sellCappings=_sellCappings;\r\n    }\r\n\r\n    function updateBuyCappings(uint256 _buyCappings) public onlyOwner() {\r\n        require(primaryAdmin==msg.sender, 'Admin what?');\r\n        buyCappings=_buyCappings;\r\n    }\r\n\r\n    function updateSellRate(uint256 _sellRate) public onlyOwner() {\r\n        require(primaryAdmin==msg.sender, 'Admin what?');\r\n        sellRate=_sellRate;\r\n    }\r\n\r\n    function updateBuyRate(uint256 _buyRate) public onlyOwner() {\r\n        require(primaryAdmin==msg.sender, 'Admin what?');\r\n        buyRate=_buyRate;\r\n    }\r\n\r\n    function updateNativeTokenContractAddress(IERC20 _NativeTokenContract,uint _NativeTokenDecimals) public onlyOwner() {\r\n        require(primaryAdmin==msg.sender, 'Admin what?');\r\n        NativeToken=_NativeTokenContract;\r\n        NativeTokenDecimals=_NativeTokenDecimals;\r\n    }\r\n\r\n    function updateSwapTokenContractAddress(IERC20 _SwapTokenContract,uint _SwapTokenDecimals) public onlyOwner() {\r\n        require(primaryAdmin==msg.sender, 'Admin what?');   \r\n        SwapToken=_SwapTokenContract;\r\n        SwapTokenDecimals=_SwapTokenDecimals;\r\n    }\r\n\r\n    //Guards Against Integer Overflows\r\n    function safeMultiply(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        } else {\r\n            uint256 c = a * b;\r\n            assert(c / a == b);\r\n            return c;\r\n        }\r\n    }\r\n\r\n    function BuyNativeToken(uint256 _SwapToken) public returns (bool) {\r\n       //Tax Management Start Here\r\n       (uint256 TaxFee, uint256 marketingFee,uint256 RewardFee,uint256 LiquidityFee) = calculateTaxFee(_SwapToken);\r\n       uint256 _netSwapToken=sub(_SwapToken,TaxFee);\r\n       //Tax Management End Here\r\n       uint256 tokenprice=buyPrice();\r\n       uint256 _NativeToken=div(_netSwapToken,tokenprice);  \r\n       _NativeToken = safeMultiply(_NativeToken,uint256(10) ** NativeTokenDecimals);\r\n       require(buyCappings >= _NativeToken ,'Capping Limits Exceed !');\r\n       UserPurchaseDetails storage userpurchasedetail = userpurchasedetails[msg.sender];\r\n       userpurchasedetail.amountSwapToken += _SwapToken;\r\n       userpurchasedetail.amountNativeToken += _NativeToken;\r\n       userpurchasedetail.lastUpdatedUTCDateTime = view_GetCurrentTimeStamp();\r\n       buyCappings -= _NativeToken;\r\n       SwapToken.transferFrom(msg.sender, address(this), _netSwapToken);\r\n       SwapToken.transferFrom(msg.sender, address(this), LiquidityFee);\r\n       SwapToken.transferFrom(msg.sender, marketingwallet, marketingFee);\r\n       _rewardPool+=RewardFee;\r\n       _taxCollected+=TaxFee;\r\n       _totalRewardCollected+=RewardFee;\r\n       _totalMarketingCollected+=marketingFee;\r\n       _totalLiquidityCollected+=LiquidityFee;\r\n       NativeToken.transfer(msg.sender, _NativeToken);\r\n       emit Bought(msg.sender,_NativeToken,_SwapToken);\r\n       return true;\r\n    }\r\n\r\n    function SellNativeToken(uint256 _NativeToken) public returns (bool) {\r\n       require(_NativeToken <= _maxAntiWhaleLimits, \"Sell Qty Exceed !\");\r\n       require(checkSellEligibility(msg.sender), \"Try After Sell Time Interval !\"); \r\n       uint256 _SwapToken=getEstimatedSwapTokenForSell(_NativeToken) / (uint256(10) ** SwapTokenDecimals);\r\n       //Tax Management Start Here\r\n       (uint256 TaxFee, uint256 marketingFee,uint256 RewardFee,uint256 LiquidityFee) = calculateTaxFee(_SwapToken);\r\n       uint256 _netSwapToken=sub(_SwapToken,TaxFee);\r\n       //Tax Management End Here\r\n       require(sellCappings >= _NativeToken ,\"Capping Limits Completed !\");  \r\n\t   UserSaleDetails storage usersaledetail = usersaledetails[msg.sender];\r\n       usersaledetail.amountSwapToken += _SwapToken;\r\n       usersaledetail.amountNativeToken += _NativeToken;\r\n       usersaledetail.lastUpdatedUTCDateTime=view_GetCurrentTimeStamp();\r\n       sellCappings -= _NativeToken;\r\n       NativeToken.transferFrom(msg.sender, address(this), _NativeToken);\r\n       SwapToken.transfer(msg.sender, _netSwapToken);\r\n       SwapToken.transfer(address(this), LiquidityFee);\r\n       SwapToken.transfer(marketingwallet, marketingFee);\r\n       _rewardPool+=RewardFee;\r\n       _taxCollected+=TaxFee;\r\n       _totalRewardCollected+=RewardFee;\r\n       _totalMarketingCollected+=marketingFee;\r\n       _totalLiquidityCollected+=LiquidityFee;\r\n       UserLastSellTimeStamp[msg.sender]=view_GetCurrentTimeStamp();\r\n       emit Sold(msg.sender,_NativeToken,_SwapToken);\r\n       return true;\r\n    }\r\n\r\n    //Once Claim Need From Smart Contract Admin Need To Update Token on Smart Contract\r\n    function _setupSwapToken(uint256 _SwapToken) public onlyOwner() {\r\n        require(primaryAdmin==msg.sender, 'Admin what?');\r\n        SwapToken.transferFrom(msg.sender, address(this), _SwapToken);\r\n    }\r\n\r\n    //Revese Token That Admin Puten on Smart Contract\r\n    function _reverseSwapToken(uint256 _SwapToken) public onlyOwner() {\r\n        require(primaryAdmin==msg.sender, 'Admin what?');\r\n        SwapToken.transfer(primaryAdmin, _SwapToken);\r\n    }\r\n\r\n    //Once Claim Need From Smart Contract Admin Need To Update Token on Smart Contract\r\n    function _setupNativeToken(uint256 _NativeToken) public onlyOwner() {\r\n        require(primaryAdmin==msg.sender, 'Admin what?');\r\n        NativeToken.transferFrom(msg.sender, address(this), _NativeToken);\r\n    }\r\n\r\n    //Revese Token That Admin Puten on Smart Contract\r\n    function _reverseNativeToken(uint256 _NativeToken) public onlyOwner() {\r\n        require(primaryAdmin==msg.sender, 'Admin what?');\r\n        NativeToken.transfer(primaryAdmin, _NativeToken);\r\n    }\r\n\r\n    //View Get Current Time Stamp\r\n    function view_GetCurrentTimeStamp() public view returns(uint _timestamp){\r\n       return (block.timestamp);\r\n    }\r\n\r\n   //View No Second Between Two Date & Time\r\n    function view_GetNoofSecondBetweenTwoDate(uint _startDate,uint _endDate) public pure returns(uint _second){\r\n        uint startDate = _startDate;\r\n        uint endDate = _endDate;\r\n        uint datediff = (endDate - startDate);\r\n        return (datediff);\r\n    }\r\n\r\n    //View No Of Hour Between Two Date & Time\r\n    function view_GetNoofHourBetweenTwoDate(uint _startDate,uint _endDate) public pure returns(uint _days){\r\n        uint startDate = _startDate;\r\n        uint endDate = _endDate;\r\n        uint datediff = (endDate - startDate)/ 60 / 60;\r\n        return (datediff);\r\n    }\r\n\r\n    //View No Of Days Between Two Date & Time\r\n    function view_GetNoofDaysBetweenTwoDate(uint _startDate,uint _endDate) public pure returns(uint _days){\r\n        uint startDate = _startDate;\r\n        uint endDate = _endDate;\r\n        uint datediff = (endDate - startDate)/ 60 / 60 / 24;\r\n        return (datediff);\r\n    }\r\n\r\n    //View No Of Week Between Two Date & Time\r\n    function view_GetNoofWeekBetweenTwoDate(uint _startDate,uint _endDate) public pure returns(uint _weeks){\r\n        uint startDate = _startDate;\r\n        uint endDate = _endDate;\r\n        uint datediff = (endDate - startDate) / 60 / 60 / 24 ;\r\n        uint weekdiff = (datediff) / 7 ;\r\n        return (weekdiff);\r\n    }\r\n\r\n    //View No Of Month Between Two Date & Time\r\n    function view_GetNoofMonthBetweenTwoDate(uint _startDate,uint _endDate) public pure returns(uint _months){\r\n        uint startDate = _startDate;\r\n        uint endDate = _endDate;\r\n        uint datediff = (endDate - startDate) / 60 / 60 / 24 ;\r\n        uint monthdiff = (datediff) / 30 ;\r\n        return (monthdiff);\r\n    }\r\n\r\n    //View No Of Year Between Two Date & Time\r\n    function view_GetNoofYearBetweenTwoDate(uint _startDate,uint _endDate) public pure returns(uint _years){\r\n        uint startDate = _startDate;\r\n        uint endDate = _endDate;\r\n        uint datediff = (endDate - startDate) / 60 / 60 / 24 ;\r\n        uint yeardiff = (datediff) / 365 ;\r\n        return yeardiff;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nativeTokensQty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_swapTokensQty\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SetAntiWhaleLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nativeTokensQty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_swapTokensQty\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_SwapToken\",\"type\":\"uint256\"}],\"name\":\"BuyNativeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_NativeToken\",\"type\":\"uint256\"}],\"name\":\"SellNativeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserLastSellTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_LiquidityPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_RewardPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_TaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_VerifyReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxAntiWhaleLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_NativeToken\",\"type\":\"uint256\"}],\"name\":\"_reverseNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_SwapToken\",\"type\":\"uint256\"}],\"name\":\"_reverseSwapToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTimeInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_NativeToken\",\"type\":\"uint256\"}],\"name\":\"_setupNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_SwapToken\",\"type\":\"uint256\"}],\"name\":\"_setupSwapToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyCapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"checkSellEligibility\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_NativeToken\",\"type\":\"uint256\"}],\"name\":\"getEstimatedSwapTokenForBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_NativeToken\",\"type\":\"uint256\"}],\"name\":\"getEstimatedSwapTokenForSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingwallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeTokenContractAddress\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellCapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellTimeInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAntiWhaleLimits\",\"type\":\"uint256\"}],\"name\":\"set_AntiWhaleLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokenContractAddress\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyCappings\",\"type\":\"uint256\"}],\"name\":\"updateBuyCappings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyRate\",\"type\":\"uint256\"}],\"name\":\"updateBuyRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_NativeTokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_NativeTokenDecimals\",\"type\":\"uint256\"}],\"name\":\"updateNativeTokenContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellCappings\",\"type\":\"uint256\"}],\"name\":\"updateSellCappings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellRate\",\"type\":\"uint256\"}],\"name\":\"updateSellRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_SwapTokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_SwapTokenDecimals\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokenContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userpurchasedetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountSwapToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountNativeToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedUTCDateTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersaledetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountSwapToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountNativeToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedUTCDateTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"view_GetCurrentTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"}],\"name\":\"view_GetNoofDaysBetweenTwoDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"}],\"name\":\"view_GetNoofHourBetweenTwoDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"}],\"name\":\"view_GetNoofMonthBetweenTwoDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_months\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"}],\"name\":\"view_GetNoofSecondBetweenTwoDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_second\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"}],\"name\":\"view_GetNoofWeekBetweenTwoDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_weeks\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"}],\"name\":\"view_GetNoofYearBetweenTwoDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_years\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "GSWSwapping", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://406878b0fcc7ead4f0bbc9e8c39e828024706890a8f5fe2d8f395930c7bc5c08"}