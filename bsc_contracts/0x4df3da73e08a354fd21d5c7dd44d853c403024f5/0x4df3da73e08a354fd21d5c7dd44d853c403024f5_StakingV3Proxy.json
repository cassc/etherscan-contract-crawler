{"SourceCode": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity =0.8.19; \r\n\r\n\r\n/**\r\n * @title OwnedUpgradeabilityProxy\r\n * @dev This contract combines an upgradeability proxy with basic authorization control functionalities\r\n */\r\n \r\ncontract StakingV3Proxy {\r\n    /**\r\n     * @dev Event to show ownership has been transferred\r\n     * @param previousOwner representing the address of the previous owner\r\n     * @param newOwner representing the address of the new owner\r\n     */\r\n    event ProxyOwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n    /**\r\n     * @dev This event will be emitted every time the implementation gets upgraded\r\n     * @param implementation representing the address of the upgraded implementation\r\n     */\r\n    event Upgraded(address indexed implementation);\r\n\r\n    // Storage position of the address of the maintenance boolean\r\n    bytes32 private constant maintenancePosition = keccak256(\"com.proxy.maintenance\");\r\n    // Storage position of the address of the current implementation\r\n    bytes32 private constant implementationPosition = keccak256(\"com.proxy.implementation\");\r\n    // Storage position of the owner of the contract\r\n    bytes32 private constant proxyOwnerPosition = keccak256(\"com.proxy.owner\");\r\n\r\n    /**\r\n     * @dev the constructor sets the original owner of the contract to the sender account.\r\n     */\r\n    constructor() {\r\n        setUpgradeabilityOwner(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Tells if contract is on maintenance\r\n     * @return _maintenance if contract is on maintenance\r\n     */\r\n    function maintenance() public view returns (bool _maintenance) {\r\n        bytes32 position = maintenancePosition;\r\n        assembly {\r\n            _maintenance := sload(position)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sets if contract is on maintenance\r\n     */\r\n    function setMaintenance(bool _maintenance) external onlyProxyOwner {\r\n        bytes32 position = maintenancePosition;\r\n        assembly {\r\n            sstore(position, _maintenance)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tells the address of the owner\r\n     * @return owner the address of the owner\r\n     */\r\n    function proxyOwner() public view returns (address owner) {\r\n        bytes32 position = proxyOwnerPosition;\r\n        assembly {\r\n            owner := sload(position)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the address of the owner\r\n     */\r\n    function setUpgradeabilityOwner(address newProxyOwner) internal {\r\n        bytes32 position = proxyOwnerPosition;\r\n        assembly {\r\n            sstore(position, newProxyOwner)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferProxyOwnership(address newOwner) public onlyProxyOwner {\r\n        require(newOwner != address(0), 'OwnedUpgradeabilityProxy: INVALID');\r\n        emit ProxyOwnershipTransferred(proxyOwner(), newOwner);\r\n        setUpgradeabilityOwner(newOwner);\r\n    }\r\n\r\n    /*\r\n     * @dev Allows the proxy owner to upgrade the current version of the proxy.\r\n     * @param implementation representing the address of the new implementation to be set.\r\n     */\r\n    function upgradeTo(address newImplementation) public onlyProxyOwner {\r\n        _upgradeTo(newImplementation);\r\n    }\r\n\r\n    /*\r\n     * @dev Allows the proxy owner to upgrade the current version of the proxy and call the new implementation\r\n     * to initialize whatever is needed through a low level call.\r\n     * @param implementation representing the address of the new implementation to be set.\r\n     * @param data represents the msg.data to bet sent in the low level call. This parameter may include the function\r\n     * signature of the implementation to be called with the needed payload\r\n     */\r\n    function upgradeToAndCall(address newImplementation, bytes memory data) payable public onlyProxyOwner {\r\n        upgradeTo(newImplementation);\r\n        (bool success, ) = address(this).call{ value: msg.value }(data);\r\n        require(success, \"OwnedUpgradeabilityProxy: INVALID\");\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function allowing to perform a delegatecall to the given implementation.\r\n     * This function will return whatever the implementation call returns\r\n     */\r\n    fallback() external payable {\r\n        _fallback();\r\n    }\r\n\r\n    receive () external payable {\r\n        _fallback();\r\n    }\r\n\r\n    /**\r\n     * @dev Tells the address of the current implementation\r\n     * @return impl address of the current implementation\r\n     */\r\n    function implementation() public view returns (address impl) {\r\n        bytes32 position = implementationPosition;\r\n        assembly {\r\n            impl := sload(position)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the address of the current implementation\r\n     * @param newImplementation address representing the new implementation to be set\r\n     */\r\n    function setImplementation(address newImplementation) internal {\r\n        bytes32 position = implementationPosition;\r\n        assembly {\r\n            sstore(position, newImplementation)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrades the implementation address\r\n     * @param newImplementation representing the address of the new implementation to be set\r\n     */\r\n    function _upgradeTo(address newImplementation) internal {\r\n        address currentImplementation = implementation();\r\n        require(currentImplementation != newImplementation, 'OwnedUpgradeabilityProxy: INVALID');\r\n        setImplementation(newImplementation);\r\n        emit Upgraded(newImplementation);\r\n    }\r\n\r\n    function _fallback() internal {\r\n        if (maintenance()) {\r\n            require(msg.sender == proxyOwner(), 'OwnedUpgradeabilityProxy: FORBIDDEN');\r\n        }\r\n        address _impl = implementation();\r\n        require(_impl != address(0), 'OwnedUpgradeabilityProxy: INVALID');\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            calldatacopy(ptr, 0, calldatasize())\r\n            let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)\r\n            let size := returndatasize()\r\n            returndatacopy(ptr, 0, size)\r\n\r\n            switch result\r\n            case 0 { revert(ptr, size) }\r\n            default { return(ptr, size) }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyProxyOwner() {\r\n        require(msg.sender == proxyOwner(), 'OwnedUpgradeabilityProxy: FORBIDDEN');\r\n        _;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ProxyOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maintenance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_maintenance\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_maintenance\",\"type\":\"bool\"}],\"name\":\"setMaintenance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferProxyOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "StakingV3Proxy", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "1", "Implementation": "0xab108c490799795adf9f19c6a7bfed68df6679f0", "SwarmSource": "ipfs://c298b2a5725056471c7f0bbefdc537b2900ec2509a4a4ace50c960025bbc4f42"}