{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/access/Governable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ncontract Governable {\\n    address public gov;\\n\\n    constructor() public {\\n        gov = msg.sender;\\n    }\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"Governable: forbidden\\\");\\n        _;\\n    }\\n\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IPositionRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IPositionRouter {\\n    function increasePositionRequestKeysStart() external view returns (uint256);\\n    function decreasePositionRequestKeysStart() external view returns (uint256);\\n    function increasePositionRequestKeys(uint256 index) external view returns (bytes32);\\n    function decreasePositionRequestKeys(uint256 index) external view returns (bytes32);\\n    function executeIncreasePositions(uint256 _count, address payable _executionFeeReceiver) external;\\n    function executeDecreasePositions(uint256 _count, address payable _executionFeeReceiver) external;\\n    function getRequestQueueLengths() external view returns (uint256, uint256, uint256, uint256);\\n    function getIncreasePositionRequestPath(bytes32 _key) external view returns (address[] memory);\\n    function getDecreasePositionRequestPath(bytes32 _key) external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IVaultPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVaultPriceFeed {\\n    function adjustmentBasisPoints(address _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function isAdjustmentAdditive(address _token) external view returns (bool);\\n\\n    function setAdjustment(\\n        address _token,\\n        bool _isAdditive,\\n        uint256 _adjustmentBps\\n    ) external;\\n\\n    function setIsSecondaryPriceEnabled(bool _isEnabled) external;\\n\\n    function setSpreadBasisPoints(address _token, uint256 _spreadBasisPoints)\\n        external;\\n\\n    function setSpreadThresholdBasisPoints(uint256 _spreadThresholdBasisPoints)\\n        external;\\n\\n    function setFavorPrimaryPrice(bool _favorPrimaryPrice) external;\\n\\n    function setPriceSampleSpace(uint256 _priceSampleSpace) external;\\n\\n    function setMaxStrictPriceDeviation(uint256 _maxStrictPriceDeviation)\\n        external;\\n\\n    function getPrice(\\n        address _token,\\n        bool _maximise,\\n        bool _includeAmmPrice,\\n        bool _useSwapPricing\\n    ) external view returns (uint256);\\n\\n    function getPrimaryPrice(address _token, bool _maximise)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function setTokenConfig(\\n        address _token,\\n        address _priceFeed,\\n        uint256 _priceDecimals,\\n        bool _isStrictStable\\n    ) external;\\n\\n    function getLatestPrimaryPrice(address _token) external view returns (uint256);\\n\\n\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/FastPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\n\\nimport \\\"./interfaces/ISecondaryPriceFeed.sol\\\";\\nimport \\\"./interfaces/IFastPriceFeed.sol\\\";\\nimport \\\"./interfaces/IFastPriceEvents.sol\\\";\\nimport \\\"../core/interfaces/IVaultPriceFeed.sol\\\";\\nimport \\\"../core/interfaces/IPositionRouter.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\n\\npragma solidity 0.6.12;\\n\\ncontract FastPriceFeed is ISecondaryPriceFeed, IFastPriceFeed, Governable {\\n    using SafeMath for uint256;\\n\\n    // fit data in a uint256 slot to save gas costs\\n    struct PriceDataItem {\\n        uint160 refPrice; // Chainlink price\\n        uint32 refTime; // last updated at time\\n        uint32 cumulativeRefDelta; // cumulative Chainlink price delta\\n        uint32 cumulativeFastDelta; // cumulative fast price delta\\n    }\\n\\n    uint256 public constant PRICE_PRECISION = 10 ** 30;\\n\\n    uint256 public constant CUMULATIVE_DELTA_PRECISION = 10 * 1000 * 1000;\\n\\n    uint256 public constant MAX_REF_PRICE = type(uint160).max;\\n    uint256 public constant MAX_CUMULATIVE_REF_DELTA = type(uint32).max;\\n    uint256 public constant MAX_CUMULATIVE_FAST_DELTA = type(uint32).max;\\n\\n    // uint256(~0) is 256 bits of 1s\\n    // shift the 1s by (256 - 32) to get (256 - 32) 0s followed by 32 1s\\n    uint256 constant public BITMASK_32 = uint256(~0) >> (256 - 32);\\n\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n\\n    uint256 public constant MAX_PRICE_DURATION = 30 minutes;\\n\\n    bool public isInitialized;\\n    bool public isSpreadEnabled = false;\\n\\n    address public vaultPriceFeed;\\n    address public fastPriceEvents;\\n\\n    address public tokenManager;\\n\\n    uint256 public override lastUpdatedAt;\\n    uint256 public override lastUpdatedBlock;\\n\\n    uint256 public priceDuration;\\n    uint256 public maxPriceUpdateDelay;\\n    uint256 public spreadBasisPointsIfInactive;\\n    uint256 public spreadBasisPointsIfChainError;\\n    uint256 public minBlockInterval;\\n    uint256 public maxTimeDeviation;\\n\\n    uint256 public priceDataInterval;\\n\\n    // allowed deviation from primary price\\n    uint256 public maxDeviationBasisPoints;\\n\\n    uint256 public minAuthorizations;\\n    uint256 public disableFastPriceVoteCount = 0;\\n\\n    mapping (address => bool) public isUpdater;\\n\\n    mapping (address => uint256) public prices;\\n    mapping (address => PriceDataItem) public priceData;\\n    mapping (address => uint256) public maxCumulativeDeltaDiffs;\\n\\n    mapping (address => bool) public isSigner;\\n    mapping (address => bool) public disableFastPriceVotes;\\n\\n    // array of tokens used in setCompactedPrices, saves L1 calldata gas costs\\n    address[] public tokens;\\n    // array of tokenPrecisions used in setCompactedPrices, saves L1 calldata gas costs\\n    // if the token price will be sent with 3 decimals, then tokenPrecision for that token\\n    // should be 10 ** 3\\n    uint256[] public tokenPrecisions;\\n\\n    event DisableFastPrice(address signer);\\n    event EnableFastPrice(address signer);\\n    event PriceData(address token, uint256 refPrice, uint256 fastPrice, uint256 cumulativeRefDelta, uint256 cumulativeFastDelta);\\n    event MaxCumulativeDeltaDiffExceeded(address token, uint256 refPrice, uint256 fastPrice, uint256 cumulativeRefDelta, uint256 cumulativeFastDelta);\\n\\n    modifier onlySigner() {\\n        require(isSigner[msg.sender], \\\"FastPriceFeed: forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyUpdater() {\\n        require(isUpdater[msg.sender], \\\"FastPriceFeed: forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyTokenManager() {\\n        require(msg.sender == tokenManager, \\\"FastPriceFeed: forbidden\\\");\\n        _;\\n    }\\n\\n    constructor(\\n      uint256 _priceDuration,\\n      uint256 _maxPriceUpdateDelay,\\n      uint256 _minBlockInterval,\\n      uint256 _maxDeviationBasisPoints,\\n      address _fastPriceEvents,\\n      address _tokenManager\\n    ) public {\\n        require(_priceDuration <= MAX_PRICE_DURATION, \\\"FastPriceFeed: invalid _priceDuration\\\");\\n        priceDuration = _priceDuration;\\n        maxPriceUpdateDelay = _maxPriceUpdateDelay;\\n        minBlockInterval = _minBlockInterval;\\n        maxDeviationBasisPoints = _maxDeviationBasisPoints;\\n        fastPriceEvents = _fastPriceEvents;\\n        tokenManager = _tokenManager;\\n    }\\n\\n    function initialize(uint256 _minAuthorizations, address[] memory _signers, address[] memory _updaters) public onlyGov {\\n        require(!isInitialized, \\\"FastPriceFeed: already initialized\\\");\\n        isInitialized = true;\\n\\n        minAuthorizations = _minAuthorizations;\\n\\n        for (uint256 i = 0; i < _signers.length; i++) {\\n            address signer = _signers[i];\\n            isSigner[signer] = true;\\n        }\\n\\n        for (uint256 i = 0; i < _updaters.length; i++) {\\n            address updater = _updaters[i];\\n            isUpdater[updater] = true;\\n        }\\n    }\\n\\n    function setSigner(address _account, bool _isActive) external override onlyGov {\\n        isSigner[_account] = _isActive;\\n    }\\n\\n    function setUpdater(address _account, bool _isActive) external override onlyGov {\\n        isUpdater[_account] = _isActive;\\n    }\\n\\n    function setFastPriceEvents(address _fastPriceEvents) external onlyGov {\\n      fastPriceEvents = _fastPriceEvents;\\n    }\\n\\n    function setVaultPriceFeed(address _vaultPriceFeed) external override onlyGov {\\n      vaultPriceFeed = _vaultPriceFeed;\\n    }\\n\\n    function setMaxTimeDeviation(uint256 _maxTimeDeviation) external onlyGov {\\n        maxTimeDeviation = _maxTimeDeviation;\\n    }\\n\\n    function setPriceDuration(uint256 _priceDuration) external override onlyGov {\\n        require(_priceDuration <= MAX_PRICE_DURATION, \\\"FastPriceFeed: invalid _priceDuration\\\");\\n        priceDuration = _priceDuration;\\n    }\\n\\n    function setMaxPriceUpdateDelay(uint256 _maxPriceUpdateDelay) external override onlyGov {\\n        maxPriceUpdateDelay = _maxPriceUpdateDelay;\\n    }\\n\\n    function setSpreadBasisPointsIfInactive(uint256 _spreadBasisPointsIfInactive) external override onlyGov {\\n        spreadBasisPointsIfInactive = _spreadBasisPointsIfInactive;\\n    }\\n\\n    function setSpreadBasisPointsIfChainError(uint256 _spreadBasisPointsIfChainError) external override onlyGov {\\n        spreadBasisPointsIfChainError = _spreadBasisPointsIfChainError;\\n    }\\n\\n    function setMinBlockInterval(uint256 _minBlockInterval) external override onlyGov {\\n        minBlockInterval = _minBlockInterval;\\n    }\\n\\n    function setIsSpreadEnabled(bool _isSpreadEnabled) external override onlyGov {\\n        isSpreadEnabled = _isSpreadEnabled;\\n    }\\n\\n    function setLastUpdatedAt(uint256 _lastUpdatedAt) external onlyGov {\\n        lastUpdatedAt = _lastUpdatedAt;\\n    }\\n\\n    function setTokenManager(address _tokenManager) external onlyTokenManager {\\n        tokenManager = _tokenManager;\\n    }\\n\\n    function setMaxDeviationBasisPoints(uint256 _maxDeviationBasisPoints) external override onlyTokenManager {\\n        maxDeviationBasisPoints = _maxDeviationBasisPoints;\\n    }\\n\\n    function setMaxCumulativeDeltaDiffs(address[] memory _tokens,  uint256[] memory _maxCumulativeDeltaDiffs) external override onlyTokenManager {\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            maxCumulativeDeltaDiffs[token] = _maxCumulativeDeltaDiffs[i];\\n        }\\n    }\\n\\n    function setPriceDataInterval(uint256 _priceDataInterval) external override onlyTokenManager {\\n        priceDataInterval = _priceDataInterval;\\n    }\\n\\n    function setMinAuthorizations(uint256 _minAuthorizations) external onlyTokenManager {\\n        minAuthorizations = _minAuthorizations;\\n    }\\n\\n    function setTokens(address[] memory _tokens, uint256[] memory _tokenPrecisions) external onlyGov {\\n        require(_tokens.length == _tokenPrecisions.length, \\\"FastPriceFeed: invalid lengths\\\");\\n        tokens = _tokens;\\n        tokenPrecisions = _tokenPrecisions;\\n    }\\n\\n    function setPrices(address[] memory _tokens, uint256[] memory _prices, uint256 _timestamp) external onlyUpdater {\\n        bool shouldUpdate = _setLastUpdatedValues(_timestamp);\\n\\n        if (shouldUpdate) {\\n            address _fastPriceEvents = fastPriceEvents;\\n            address _vaultPriceFeed = vaultPriceFeed;\\n\\n            for (uint256 i = 0; i < _tokens.length; i++) {\\n                address token = _tokens[i];\\n                _setPrice(token, _prices[i], _vaultPriceFeed, _fastPriceEvents);\\n            }\\n        }\\n    }\\n\\n    function setCompactedPrices(uint256[] memory _priceBitArray, uint256 _timestamp) external onlyUpdater {\\n        bool shouldUpdate = _setLastUpdatedValues(_timestamp);\\n\\n        if (shouldUpdate) {\\n            address _fastPriceEvents = fastPriceEvents;\\n            address _vaultPriceFeed = vaultPriceFeed;\\n\\n            for (uint256 i = 0; i < _priceBitArray.length; i++) {\\n                uint256 priceBits = _priceBitArray[i];\\n\\n                for (uint256 j = 0; j < 8; j++) {\\n                    uint256 index = i * 8 + j;\\n                    if (index >= tokens.length) { return; }\\n\\n                    uint256 startBit = 32 * j;\\n                    uint256 price = (priceBits >> startBit) & BITMASK_32;\\n\\n                    address token = tokens[i * 8 + j];\\n                    uint256 tokenPrecision = tokenPrecisions[i * 8 + j];\\n                    uint256 adjustedPrice = price.mul(PRICE_PRECISION).div(tokenPrecision);\\n\\n                    _setPrice(token, adjustedPrice, _vaultPriceFeed, _fastPriceEvents);\\n                }\\n            }\\n        }\\n    }\\n\\n    function setPricesWithBits(uint256 _priceBits, uint256 _timestamp) external onlyUpdater {\\n        _setPricesWithBits(_priceBits, _timestamp);\\n    }\\n\\n    function setPricesWithBitsAndExecute(\\n        address _positionRouter,\\n        uint256 _priceBits,\\n        uint256 _timestamp,\\n        uint256 _endIndexForIncreasePositions,\\n        uint256 _endIndexForDecreasePositions,\\n        uint256 _maxIncreasePositions,\\n        uint256 _maxDecreasePositions\\n    ) external onlyUpdater {\\n        _setPricesWithBits(_priceBits, _timestamp);\\n\\n        IPositionRouter positionRouter = IPositionRouter(_positionRouter);\\n        uint256 maxEndIndexForIncrease = positionRouter.increasePositionRequestKeysStart().add(_maxIncreasePositions);\\n        uint256 maxEndIndexForDecrease = positionRouter.decreasePositionRequestKeysStart().add(_maxDecreasePositions);\\n\\n        if (_endIndexForIncreasePositions > maxEndIndexForIncrease) {\\n            _endIndexForIncreasePositions = maxEndIndexForIncrease;\\n        }\\n\\n        if (_endIndexForDecreasePositions > maxEndIndexForDecrease) {\\n            _endIndexForDecreasePositions = maxEndIndexForDecrease;\\n        }\\n\\n        positionRouter.executeIncreasePositions(_endIndexForIncreasePositions, payable(msg.sender));\\n        positionRouter.executeDecreasePositions(_endIndexForDecreasePositions, payable(msg.sender));\\n    }\\n\\n    function disableFastPrice() external onlySigner {\\n        require(!disableFastPriceVotes[msg.sender], \\\"FastPriceFeed: already voted\\\");\\n        disableFastPriceVotes[msg.sender] = true;\\n        disableFastPriceVoteCount = disableFastPriceVoteCount.add(1);\\n\\n        emit DisableFastPrice(msg.sender);\\n    }\\n\\n    function enableFastPrice() external onlySigner {\\n        require(disableFastPriceVotes[msg.sender], \\\"FastPriceFeed: already enabled\\\");\\n        disableFastPriceVotes[msg.sender] = false;\\n        disableFastPriceVoteCount = disableFastPriceVoteCount.sub(1);\\n\\n        emit EnableFastPrice(msg.sender);\\n    }\\n\\n    // under regular operation, the fastPrice (prices[token]) is returned and there is no spread returned from this function,\\n    // though VaultPriceFeed might apply its own spread\\n    //\\n    // if the fastPrice has not been updated within priceDuration then it is ignored and only _refPrice with a spread is used (spread: spreadBasisPointsIfInactive)\\n    // in case the fastPrice has not been updated for maxPriceUpdateDelay then the _refPrice with a larger spread is used (spread: spreadBasisPointsIfChainError)\\n    //\\n    // there will be a spread from the _refPrice to the fastPrice in the following cases:\\n    // - in case isSpreadEnabled is set to true\\n    // - in case the maxDeviationBasisPoints between _refPrice and fastPrice is exceeded\\n    // - in case watchers flag an issue\\n    // - in case the cumulativeFastDelta exceeds the cumulativeRefDelta by the maxCumulativeDeltaDiff\\n    function getPrice(address _token, uint256 _refPrice, bool _maximise) external override view returns (uint256) {\\n        if (block.timestamp > lastUpdatedAt.add(maxPriceUpdateDelay)) {\\n            if (_maximise) {\\n                return _refPrice.mul(BASIS_POINTS_DIVISOR.add(spreadBasisPointsIfChainError)).div(BASIS_POINTS_DIVISOR);\\n            }\\n\\n            return _refPrice.mul(BASIS_POINTS_DIVISOR.sub(spreadBasisPointsIfChainError)).div(BASIS_POINTS_DIVISOR);\\n        }\\n\\n        if (block.timestamp > lastUpdatedAt.add(priceDuration)) {\\n            if (_maximise) {\\n                return _refPrice.mul(BASIS_POINTS_DIVISOR.add(spreadBasisPointsIfInactive)).div(BASIS_POINTS_DIVISOR);\\n            }\\n\\n            return _refPrice.mul(BASIS_POINTS_DIVISOR.sub(spreadBasisPointsIfInactive)).div(BASIS_POINTS_DIVISOR);\\n        }\\n\\n        uint256 fastPrice = prices[_token];\\n        if (fastPrice == 0) { return _refPrice; }\\n\\n        uint256 diffBasisPoints = _refPrice > fastPrice ? _refPrice.sub(fastPrice) : fastPrice.sub(_refPrice);\\n        diffBasisPoints = diffBasisPoints.mul(BASIS_POINTS_DIVISOR).div(_refPrice);\\n\\n        // create a spread between the _refPrice and the fastPrice if the maxDeviationBasisPoints is exceeded\\n        // or if watchers have flagged an issue with the fast price\\n        bool hasSpread = !favorFastPrice(_token) || diffBasisPoints > maxDeviationBasisPoints;\\n\\n        if (hasSpread) {\\n            // return the higher of the two prices\\n            if (_maximise) {\\n                return _refPrice > fastPrice ? _refPrice : fastPrice;\\n            }\\n\\n            // return the lower of the two prices\\n            return _refPrice < fastPrice ? _refPrice : fastPrice;\\n        }\\n\\n        return fastPrice;\\n    }\\n\\n    function favorFastPrice(address _token) public view returns (bool) {\\n        if (isSpreadEnabled) {\\n            return false;\\n        }\\n\\n        if (disableFastPriceVoteCount >= minAuthorizations) {\\n            // force a spread if watchers have flagged an issue with the fast price\\n            return false;\\n        }\\n\\n        (/* uint256 prevRefPrice */, /* uint256 refTime */, uint256 cumulativeRefDelta, uint256 cumulativeFastDelta) = getPriceData(_token);\\n        if (cumulativeFastDelta > cumulativeRefDelta && cumulativeFastDelta.sub(cumulativeRefDelta) > maxCumulativeDeltaDiffs[_token]) {\\n            // force a spread if the cumulative delta for the fast price feed exceeds the cumulative delta\\n            // for the Chainlink price feed by the maxCumulativeDeltaDiff allowed\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n\\n    function getPriceData(address _token) public view returns (uint256, uint256, uint256, uint256) {\\n        PriceDataItem memory data = priceData[_token];\\n        return (uint256(data.refPrice), uint256(data.refTime), uint256(data.cumulativeRefDelta), uint256(data.cumulativeFastDelta));\\n    }\\n\\n    function _setPricesWithBits(uint256 _priceBits, uint256 _timestamp) private {\\n        bool shouldUpdate = _setLastUpdatedValues(_timestamp);\\n\\n        if (shouldUpdate) {\\n            address _fastPriceEvents = fastPriceEvents;\\n            address _vaultPriceFeed = vaultPriceFeed;\\n\\n            for (uint256 j = 0; j < 8; j++) {\\n                uint256 index = j;\\n                if (index >= tokens.length) { return; }\\n\\n                uint256 startBit = 32 * j;\\n                uint256 price = (_priceBits >> startBit) & BITMASK_32;\\n\\n                address token = tokens[j];\\n                uint256 tokenPrecision = tokenPrecisions[j];\\n                uint256 adjustedPrice = price.mul(PRICE_PRECISION).div(tokenPrecision);\\n\\n                _setPrice(token, adjustedPrice, _vaultPriceFeed, _fastPriceEvents);\\n            }\\n        }\\n    }\\n\\n    function _setPrice(address _token, uint256 _price, address _vaultPriceFeed, address _fastPriceEvents) private {\\n        if (_vaultPriceFeed != address(0)) {\\n            uint256 refPrice = IVaultPriceFeed(_vaultPriceFeed).getLatestPrimaryPrice(_token);\\n            uint256 fastPrice = prices[_token];\\n\\n            (uint256 prevRefPrice, uint256 refTime, uint256 cumulativeRefDelta, uint256 cumulativeFastDelta) = getPriceData(_token);\\n\\n            if (prevRefPrice > 0) {\\n                uint256 refDeltaAmount = refPrice > prevRefPrice ? refPrice.sub(prevRefPrice) : prevRefPrice.sub(refPrice);\\n                uint256 fastDeltaAmount = fastPrice > _price ? fastPrice.sub(_price) : _price.sub(fastPrice);\\n\\n                // reset cumulative delta values if it is a new time window\\n                if (refTime.div(priceDataInterval) != block.timestamp.div(priceDataInterval)) {\\n                    cumulativeRefDelta = 0;\\n                    cumulativeFastDelta = 0;\\n                }\\n\\n                cumulativeRefDelta = cumulativeRefDelta.add(refDeltaAmount.mul(CUMULATIVE_DELTA_PRECISION).div(prevRefPrice));\\n                cumulativeFastDelta = cumulativeFastDelta.add(fastDeltaAmount.mul(CUMULATIVE_DELTA_PRECISION).div(fastPrice));\\n            }\\n\\n            if (cumulativeFastDelta > cumulativeRefDelta && cumulativeFastDelta.sub(cumulativeRefDelta) > maxCumulativeDeltaDiffs[_token]) {\\n                emit MaxCumulativeDeltaDiffExceeded(_token, refPrice, fastPrice, cumulativeRefDelta, cumulativeFastDelta);\\n            }\\n\\n            _setPriceData(_token, refPrice, cumulativeRefDelta, cumulativeFastDelta);\\n            emit PriceData(_token, refPrice, fastPrice, cumulativeRefDelta, cumulativeFastDelta);\\n        }\\n\\n        prices[_token] = _price;\\n        _emitPriceEvent(_fastPriceEvents, _token, _price);\\n    }\\n\\n    function _setPriceData(address _token, uint256 _refPrice, uint256 _cumulativeRefDelta, uint256 _cumulativeFastDelta) private {\\n        require(_refPrice < MAX_REF_PRICE, \\\"FastPriceFeed: invalid refPrice\\\");\\n        // skip validation of block.timestamp, it should only be out of range after the year 2100\\n        require(_cumulativeRefDelta < MAX_CUMULATIVE_REF_DELTA, \\\"FastPriceFeed: invalid cumulativeRefDelta\\\");\\n        require(_cumulativeFastDelta < MAX_CUMULATIVE_FAST_DELTA, \\\"FastPriceFeed: invalid cumulativeFastDelta\\\");\\n\\n        priceData[_token] = PriceDataItem(\\n            uint160(_refPrice),\\n            uint32(block.timestamp),\\n            uint32(_cumulativeRefDelta),\\n            uint32(_cumulativeFastDelta)\\n        );\\n    }\\n\\n    function _emitPriceEvent(address _fastPriceEvents, address _token, uint256 _price) private {\\n        if (_fastPriceEvents == address(0)) {\\n            return;\\n        }\\n\\n        IFastPriceEvents(_fastPriceEvents).emitPriceEvent(_token, _price);\\n    }\\n\\n    function _setLastUpdatedValues(uint256 _timestamp) private returns (bool) {\\n        if (minBlockInterval > 0) {\\n            require(block.number.sub(lastUpdatedBlock) >= minBlockInterval, \\\"FastPriceFeed: minBlockInterval not yet passed\\\");\\n        }\\n\\n        uint256 _maxTimeDeviation = maxTimeDeviation;\\n        require(_timestamp > block.timestamp.sub(_maxTimeDeviation), \\\"FastPriceFeed: _timestamp below allowed range\\\");\\n        require(_timestamp < block.timestamp.add(_maxTimeDeviation), \\\"FastPriceFeed: _timestamp exceeds allowed range\\\");\\n\\n        // do not update prices if _timestamp is before the current lastUpdatedAt value\\n        if (_timestamp < lastUpdatedAt) {\\n            return false;\\n        }\\n\\n        lastUpdatedAt = _timestamp;\\n        lastUpdatedBlock = block.number;\\n\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/interfaces/IFastPriceEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IFastPriceEvents {\\n    function emitPriceEvent(address _token, uint256 _price) external;\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/interfaces/IFastPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IFastPriceFeed {\\n    function lastUpdatedAt() external view returns (uint256);\\n    function lastUpdatedBlock() external view returns (uint256);\\n    function setSigner(address _account, bool _isActive) external;\\n    function setUpdater(address _account, bool _isActive) external;\\n    function setPriceDuration(uint256 _priceDuration) external;\\n    function setMaxPriceUpdateDelay(uint256 _maxPriceUpdateDelay) external;\\n    function setSpreadBasisPointsIfInactive(uint256 _spreadBasisPointsIfInactive) external;\\n    function setSpreadBasisPointsIfChainError(uint256 _spreadBasisPointsIfChainError) external;\\n    function setMinBlockInterval(uint256 _minBlockInterval) external;\\n    function setIsSpreadEnabled(bool _isSpreadEnabled) external;\\n    function setMaxDeviationBasisPoints(uint256 _maxDeviationBasisPoints) external;\\n    function setMaxCumulativeDeltaDiffs(address[] memory _tokens,  uint256[] memory _maxCumulativeDeltaDiffs) external;\\n    function setPriceDataInterval(uint256 _priceDataInterval) external;\\n    function setVaultPriceFeed(address _vaultPriceFeed) external;\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/interfaces/ISecondaryPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface ISecondaryPriceFeed {\\n    function getPrice(address _token, uint256 _referencePrice, bool _maximise) external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPriceUpdateDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBlockInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDeviationBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fastPriceEvents\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"DisableFastPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"EnableFastPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fastPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumulativeRefDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumulativeFastDelta\",\"type\":\"uint256\"}],\"name\":\"MaxCumulativeDeltaDiffExceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fastPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumulativeRefDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumulativeFastDelta\",\"type\":\"uint256\"}],\"name\":\"PriceData\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BITMASK_32\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CUMULATIVE_DELTA_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CUMULATIVE_FAST_DELTA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CUMULATIVE_REF_DELTA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PRICE_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_REF_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableFastPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableFastPriceVoteCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"disableFastPriceVotes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFastPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fastPriceEvents\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"favorFastPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_refPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_maximise\",\"type\":\"bool\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getPriceData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAuthorizations\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_updaters\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSpreadEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isUpdater\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdatedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdatedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxCumulativeDeltaDiffs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDeviationBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPriceUpdateDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTimeDeviation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAuthorizations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBlockInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"priceData\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"refPrice\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"refTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"cumulativeRefDelta\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"cumulativeFastDelta\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceDataInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_priceBitArray\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"setCompactedPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fastPriceEvents\",\"type\":\"address\"}],\"name\":\"setFastPriceEvents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isSpreadEnabled\",\"type\":\"bool\"}],\"name\":\"setIsSpreadEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lastUpdatedAt\",\"type\":\"uint256\"}],\"name\":\"setLastUpdatedAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_maxCumulativeDeltaDiffs\",\"type\":\"uint256[]\"}],\"name\":\"setMaxCumulativeDeltaDiffs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDeviationBasisPoints\",\"type\":\"uint256\"}],\"name\":\"setMaxDeviationBasisPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPriceUpdateDelay\",\"type\":\"uint256\"}],\"name\":\"setMaxPriceUpdateDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTimeDeviation\",\"type\":\"uint256\"}],\"name\":\"setMaxTimeDeviation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAuthorizations\",\"type\":\"uint256\"}],\"name\":\"setMinAuthorizations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBlockInterval\",\"type\":\"uint256\"}],\"name\":\"setMinBlockInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceDataInterval\",\"type\":\"uint256\"}],\"name\":\"setPriceDataInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceDuration\",\"type\":\"uint256\"}],\"name\":\"setPriceDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceBits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"setPricesWithBits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_positionRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_priceBits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endIndexForIncreasePositions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endIndexForDecreasePositions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxIncreasePositions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDecreasePositions\",\"type\":\"uint256\"}],\"name\":\"setPricesWithBitsAndExecute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_spreadBasisPointsIfChainError\",\"type\":\"uint256\"}],\"name\":\"setSpreadBasisPointsIfChainError\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_spreadBasisPointsIfInactive\",\"type\":\"uint256\"}],\"name\":\"setSpreadBasisPointsIfInactive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenManager\",\"type\":\"address\"}],\"name\":\"setTokenManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenPrecisions\",\"type\":\"uint256[]\"}],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultPriceFeed\",\"type\":\"address\"}],\"name\":\"setVaultPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spreadBasisPointsIfChainError\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spreadBasisPointsIfInactive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenPrecisions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultPriceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FastPriceFeed", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000012c0000000000000000000000000000000000000000000000000000000000000e1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064000000000000000000000000b4a922970b942263793ee5d85477b72ef29f22fe000000000000000000000000fd9d305cc8614c87a7cafd41cb74077c2459cb60", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}