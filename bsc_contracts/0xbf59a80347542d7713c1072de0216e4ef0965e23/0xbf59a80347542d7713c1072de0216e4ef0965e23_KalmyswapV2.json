{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/KalmyswapV2.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\\nimport \\\"./Partnership.sol\\\";\\nimport \\\"./WhitelistFeeOnTransfer.sol\\\";\\nimport \\\"./interfaces/IUserStakingPrice.sol\\\";\\n\\ncontract KalmarTokenPriviledge is Partnership {\\n\\n    IUserStakingPrice userStakingPrice;\\n\\n    event UpdateUserStakingPriceAddr(address userStakingPriceAddr);\\n\\n    function updateUserStakingPrice(address _userStakingPriceAddr) public onlyOwner\\n    {\\n        userStakingPrice = IUserStakingPrice(_userStakingPriceAddr);\\n        emit UpdateUserStakingPriceAddr(_userStakingPriceAddr);\\n    }\\n\\n    function userStakingValue(address user) public view returns (uint256 fee, uint256 total)\\n    {\\n        (fee, total) = IUserStakingPrice(userStakingPrice).userStakingValue(user);\\n        return (fee, total);\\n    }\\n}\\n\\ncontract KalmyswapV2 is KalmarTokenPriviledge, WhitelistFeeOnTransfer, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256; \\n\\n    /**\\n    * @dev when new trade occure (and success), this event will be boardcast.\\n    * @param srcAsset Source token\\n    * @param srcAmount amount of source token\\n    * @param destAsset Destination token\\n    * @param destAmount amount of destination token\\n    * @param trader user address\\n    */\\n    event Trade(\\n        address indexed srcAsset, // Source\\n        uint256         srcAmount,\\n        address indexed destAsset, // Destination\\n        uint256         destAmount,\\n        address indexed trader // User\\n    );\\n\\n    event DestAmount(uint256 _destAmount, uint256 _order);\\n\\n    /**\\n    * @notice use token address 0xeee...eee for ether\\n    * @dev makes a trade between Ether to token by tradingRouteIndex\\n    * @param tradingRouteIndex index of trading route\\n    * @param srcAmount amount of source tokens\\n    * @param dest Destination token\\n    * @return amount of actual destination tokens\\n    */\\n    function _tradeEtherToToken(\\n        uint256 tradingRouteIndex,\\n        uint256 srcAmount,\\n        IERC20 dest\\n    )\\n        private\\n        returns(uint256)\\n    {\\n        // Load trading route\\n        IKalmarTradingRoute tradingRoute = tradingRoutes[tradingRouteIndex].route;\\n        // Trade to route\\n        uint256 destAmount = tradingRoute.trade.value(srcAmount)(\\n            etherERC20,\\n            dest,\\n            srcAmount\\n        );\\n        return destAmount;\\n    }\\n\\n    // Receive ETH in case of trade Token -> ETH, will get ETH back from trading route\\n    function () external payable {}\\n\\n    /**\\n    * @notice use token address 0xeee...eee for ether\\n    * @dev makes a trade between token to Ether by tradingRouteIndex\\n    * @param tradingRouteIndex index of trading route\\n    * @param src Source token\\n    * @param srcAmount amount of source tokens\\n    * @return amount of actual destination tokens\\n    */\\n    function _tradeTokenToEther(\\n        uint256 tradingRouteIndex,\\n        IERC20 src,\\n        uint256 srcAmount\\n    )\\n        private\\n        returns(uint256)\\n    {\\n        // Load trading route\\n        IKalmarTradingRoute tradingRoute = tradingRoutes[tradingRouteIndex].route;\\n        // Approve to TradingRoute\\n        src.safeApprove(address(tradingRoute), srcAmount);\\n        // Trande to route\\n        uint256 destAmount = tradingRoute.trade(\\n            src,\\n            etherERC20,\\n            srcAmount\\n        );\\n        return destAmount;\\n    }\\n\\n    /**\\n    * @dev makes a trade between token to token by tradingRouteIndex\\n    * @param tradingRouteIndex index of trading route\\n    * @param src Source token\\n    * @param srcAmount amount of source tokens\\n    * @param dest Destination token\\n    * @return amount of actual destination tokens\\n    */\\n    function _tradeTokenToToken(\\n        uint256 tradingRouteIndex,\\n        IERC20 src,\\n        uint256 srcAmount,\\n        IERC20 dest\\n    )\\n        private\\n        returns(uint256)\\n    {\\n        // Load trading route\\n        IKalmarTradingRoute tradingRoute = tradingRoutes[tradingRouteIndex].route;\\n        // Approve to TradingRoute\\n        src.safeApprove(address(tradingRoute), srcAmount);\\n        // Trande to route\\n        uint256 destAmount = tradingRoute.trade(\\n            src,\\n            dest,\\n            srcAmount\\n        );\\n        return destAmount;\\n    }\\n\\n    /**\\n    * @notice use token address 0xeee...eee for ether\\n    * @dev makes a trade between src and dest token by tradingRouteIndex\\n    * Ex1: trade 0.5 ETH -> DAI\\n    * 0, \\\"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\\\", \\\"500000000000000000\\\", \\\"0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817\\\", \\\"21003850000000000000\\\"\\n    * Ex2: trade 30 DAI -> ETH\\n    * 0, \\\"0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817\\\", \\\"30000000000000000000\\\", \\\"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\\\", \\\"740825000000000000\\\"\\n    * @param _tradingRouteIndex index of trading route\\n    * @param _src Source token\\n    * @param _srcAmount amount of source tokens\\n    * @param _dest Destination token\\n    * @return amount of actual destination tokens\\n    */\\n    function _trade(\\n        uint256             _tradingRouteIndex,\\n        IERC20              _src,\\n        uint256             _srcAmount,\\n        IERC20              _dest\\n    )\\n        private\\n        onlyTradingRouteEnabled(_tradingRouteIndex)\\n        returns(uint256)\\n    {\\n        // Destination amount\\n        uint256 destAmount;\\n        // Record src/dest asset for later consistency check.\\n        uint256 srcAmountBefore;\\n        uint256 destAmountBefore;\\n\\n        if (etherERC20 == _src) { // Source\\n            srcAmountBefore = address(this).balance;\\n        } else {\\n            srcAmountBefore = _src.balanceOf(address(this));\\n        }\\n        if (etherERC20 == _dest) { // Dest\\n            destAmountBefore = address(this).balance;\\n        } else {\\n            destAmountBefore = _dest.balanceOf(address(this));\\n        }\\n        if (etherERC20 == _src) { // Trade ETH -> Token\\n            destAmount = _tradeEtherToToken(_tradingRouteIndex, _srcAmount, _dest);\\n        } else if (etherERC20 == _dest) { // Trade Token -> ETH\\n            destAmount = _tradeTokenToEther(_tradingRouteIndex, _src, _srcAmount);\\n        } else { // Trade Token -> Token\\n            destAmount = _tradeTokenToToken(_tradingRouteIndex, _src, _srcAmount, _dest);\\n        }\\n\\n        // Recheck if src/dest amount correct\\n        if (etherERC20 == _src) { // Source\\n            require(address(this).balance == srcAmountBefore.sub(_srcAmount), \\\"source(ETH) amount mismatch after trade\\\");\\n        } else {\\n            require(_src.balanceOf(address(this)) == srcAmountBefore.sub(_srcAmount), \\\"source amount mismatch after trade\\\");\\n        }\\n        if (etherERC20 == _dest) { // Dest\\n            require(address(this).balance == destAmountBefore.add(destAmount), \\\"destination(ETH) amount mismatch after trade\\\");\\n        } else {\\n            require(_dest.balanceOf(address(this)) <= destAmountBefore.add(destAmount), \\\"destination amount mismatch after trade\\\");\\n        }\\n        return destAmount;\\n    }\\n\\n    /**\\n    * @notice use token address 0xeee...eee for ether\\n    * @dev makes a trade between src and dest token by tradingRouteIndex\\n    * Ex1: trade 0.5 ETH -> DAI\\n    * 0, \\\"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\\\", \\\"500000000000000000\\\", \\\"0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817\\\", \\\"21003850000000000000\\\"\\n    * Ex2: trade 30 DAI -> ETH\\n    * 0, \\\"0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817\\\", \\\"30000000000000000000\\\", \\\"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\\\", \\\"740825000000000000\\\"\\n    * @param tradingRouteIndex index of trading route\\n    * @param src Source token\\n    * @param srcAmount amount of source tokens\\n    * @param dest Destination token\\n    * @param minDestAmount minimun destination amount\\n    * @return amount of actual destination tokens\\n    */\\n    function trade(\\n        uint256   tradingRouteIndex,\\n        IERC20    src,\\n        uint256   srcAmount,\\n        IERC20    dest,\\n        uint256   minDestAmount\\n    )\\n        external\\n        payable\\n        nonReentrant\\n        returns(uint256)\\n    {\\n        uint256 destAmount;\\n        // Prepare source's asset\\n        uint256 _before;\\n        uint256 _beforeSrc;\\n        uint256 _afterSrc;\\n        if (etherERC20 != src) {\\n            _beforeSrc = src.balanceOf(address(this));\\n            src.safeTransferFrom(msg.sender, address(this), srcAmount); // Transfer token to this address\\n            _afterSrc = src.balanceOf(address(this));\\n            srcAmount = _afterSrc.sub(_beforeSrc);\\n        }\\n\\n        if(etherERC20 != dest){\\n          _before = dest.balanceOf(address(this));\\n        }\\n\\n        // Trade to route\\n        destAmount = _trade(tradingRouteIndex, src, srcAmount, dest);\\n        // checking fee\\n        (uint256 fee ,) = userStakingValue(msg.sender);\\n        destAmount = _collectFee(destAmount, dest, fee);\\n\\n\\n        // Throw exception if destination amount doesn't meet user requirement.\\n        require(destAmount >= minDestAmount, \\\"destination amount is too low.\\\");\\n        if (etherERC20 == dest) {\\n            (bool success, ) = msg.sender.call.value(destAmount)(\\\"\\\"); // Send back ether to sender\\n            require(success, \\\"Transfer ether back to caller failed.\\\");\\n        } else { // Send back token to sender\\n\\n            uint256 _after = dest.balanceOf(address(this));\\n            uint256 _current = _after.sub(_before);\\n\\n            if(isFeeOnTransferToken(dest) || isFeeOnTransferToken(src)){\\n              destAmount = _current;\\n              dest.safeTransfer(msg.sender, destAmount);\\n            }else{\\n              dest.safeTransfer(msg.sender, destAmount);\\n            }\\n        }\\n\\n        emit Trade(address(src), srcAmount, address(dest), destAmount, msg.sender);\\n        return destAmount;\\n    }\\n\\n    /**\\n    * @notice use token address 0xeee...eee for ether\\n    * @dev makes a trade with split volumes to multiple-routes ex. UNI -> ETH (5%, 15% and 80%)\\n    * @param routes Trading paths\\n    * @param src Source token\\n    * @param srcAmounts amount of source tokens\\n    * @param dest Destination token\\n    * @param minDestAmount minimun destination amount\\n    * @return amount of actual destination tokens\\n    */\\n\\n    function splitTrades(\\n        uint256[] calldata routes,\\n        IERC20    src,\\n        uint256   totalSrcAmount,\\n        uint256[] calldata srcAmounts,\\n        IERC20    dest,\\n        uint256   minDestAmount\\n    )\\n        external\\n        payable\\n        nonReentrant\\n        returns(uint256)\\n    {\\n        require(routes.length > 0, \\\"routes can not be empty\\\");\\n        require(routes.length == srcAmounts.length, \\\"routes and srcAmounts lengths mismatch\\\");\\n        uint256 destAmount = 0;\\n\\n        // Prepare source's asset\\n        uint256 _before;\\n        uint256 _currentTotal;\\n\\n\\n        if (etherERC20 != src) {\\n            uint256 _beforeSrc = src.balanceOf(address(this));\\n            src.safeTransferFrom(msg.sender, address(this), totalSrcAmount); // Transfer token to this address\\n            uint256 _afterSrc = src.balanceOf(address(this));\\n            _currentTotal = _afterSrc.sub(_beforeSrc);\\n        }else{\\n          _currentTotal = totalSrcAmount;\\n        }\\n\\n        uint256[] memory splitAmounts = new uint256[](srcAmounts.length);\\n\\n        for (uint k = 0; k < srcAmounts.length; k++) {\\n          uint256 x = srcAmounts[k];\\n          splitAmounts[k] = x.mul(_currentTotal).div(totalSrcAmount);\\n        }\\n\\n        if(etherERC20 != dest){\\n          _before = dest.balanceOf(address(this));\\n        }\\n\\n        // Trade with routes\\n        for (uint i = 0; i < routes.length; i++) {\\n            uint256 tradingRouteIndex = routes[i];\\n            uint256 amount = splitAmounts[i];\\n            IERC20 _src = src;\\n            IERC20 _dest = dest;\\n            destAmount = destAmount.add(_trade(tradingRouteIndex, _src, amount, _dest));\\n        }\\n\\n        // Collect fee\\n        (uint256 fee ,) = userStakingValue(msg.sender);\\n        destAmount = _collectFee(destAmount, dest, fee);\\n\\n        // Throw exception if destination amount doesn't meet user requirement.\\n        require(destAmount >= minDestAmount, \\\"destination amount is too low.\\\");\\n        if (etherERC20 == dest) {\\n            (bool success, ) = msg.sender.call.value(destAmount)(\\\"\\\"); // Send back ether to sender\\n            require(success, \\\"Transfer ether back to caller failed.\\\");\\n        } else { // Send back token to sender\\n            uint256 _after = dest.balanceOf(address(this));\\n            uint256 _current = _after.sub(_before);\\n\\n            if(isFeeOnTransferToken(dest) || isFeeOnTransferToken(src)){\\n              destAmount = _current;\\n              dest.safeTransfer(msg.sender, destAmount);\\n            }else{\\n              dest.safeTransfer(msg.sender, destAmount);\\n            }\\n\\n        }\\n\\n        emit Trade(address(src), totalSrcAmount, address(dest), destAmount, msg.sender);\\n        return destAmount;\\n    }\\n\\n    /**\\n    * @notice use token address 0xeee...eee for ether\\n    * @dev get amount of destination token for given source token amount\\n    * @param tradingRouteIndex index of trading route\\n    * @param src Source token\\n    * @param dest Destination token\\n    * @param srcAmount amount of source tokens\\n    * @return amount of actual destination tokens\\n    */\\n    function getDestinationReturnAmount(\\n        uint256 tradingRouteIndex,\\n        IERC20  src,\\n        IERC20  dest,\\n        uint256 srcAmount,\\n        uint256 fee\\n    )\\n        external\\n        returns(uint256)\\n    {\\n        // Load trading route\\n        IKalmarTradingRoute tradingRoute = tradingRoutes[tradingRouteIndex].route;\\n        uint256 destAmount;\\n        bytes memory payload = abi.encodeWithSelector(tradingRoute.getDestinationReturnAmount.selector, src, dest, srcAmount);\\n        (bool success, bytes memory data) = address(tradingRoute).call(payload);\\n        if (success) {\\n            destAmount = abi.decode(data, (uint256));\\n        } else {\\n            destAmount = 0;\\n        }\\n        return _amountWithFee(destAmount, fee);\\n    }\\n\\n    function getDestinationReturnAmountForSplitTrades(\\n        uint256[] calldata routes,\\n        IERC20    src,\\n        uint256[] calldata srcAmounts,\\n        IERC20    dest,\\n        uint256   fee\\n    )\\n        external\\n        returns(uint256)\\n    {\\n        require(routes.length > 0, \\\"routes can not be empty\\\");\\n        require(routes.length == srcAmounts.length, \\\"routes and srcAmounts lengths mismatch\\\");\\n        uint256 destAmount = 0;\\n\\n        for (uint i = 0; i < routes.length; i++) {\\n            uint256 tradingRouteIndex = routes[i];\\n            uint256 amount = srcAmounts[i];\\n            // Load trading route\\n            IKalmarTradingRoute tradingRoute = tradingRoutes[tradingRouteIndex].route;\\n            destAmount = destAmount.add(tradingRoute.getDestinationReturnAmount(src, dest, amount));\\n        }\\n        return _amountWithFee(destAmount, fee);\\n    }\\n\\n    // In case of expected and unexpected event that have some token amounts remain in this contract, owner can call to collect them.\\n    function collectRemainingToken(\\n        IERC20  token,\\n        uint256 amount\\n    )\\n      public\\n      onlyOwner\\n    {\\n        token.safeTransfer(msg.sender, amount);\\n    }\\n\\n    // In case of expected and unexpected event that have some ether amounts remain in this contract, owner can call to collect them.\\n    function collectRemainingEther(\\n        uint256 amount\\n    )\\n      public\\n      onlyOwner\\n    {\\n        (bool success, ) = msg.sender.call.value(amount)(\\\"\\\"); // Send back ether to sender\\n        require(success, \\\"Transfer ether back to caller failed.\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n *\\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\\n * metering changes introduced in the Istanbul hardfork.\\n */\\ncontract ReentrancyGuard {\\n    bool private _notEntered;\\n\\n    constructor () internal {\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Partnership.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./RoutingManagement.sol\\\";\\n\\n/*\\n* Fee collection by partner reference\\n*/\\ncontract Partnership is RoutingManagement {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n    * @dev Platform Fee collection\\n    * @param token Token address\\n    * @param wallet Partner or Wallet provider wallet\\n    * @param amount Fee amount\\n    */\\n    event CollectFee(\\n      IERC20   indexed token,\\n      address indexed wallet,\\n      uint256         amount\\n    );\\n\\n    /**\\n    * @dev Updating partner info\\n    * @param wallet Partner wallet\\n    * @param name partner name\\n    */\\n    event UpdatePartner(\\n      address indexed wallet,\\n      bytes16 name\\n    );\\n\\n    struct Partner {\\n      address wallet;       // To receive fee on the Warden Swap network\\n      bytes16 name;         // Partner reference\\n    }\\n\\n    IERC20 public constant etherERC20 = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    uint256 public constant FEE_DIVIDER = 1e6;\\n\\n    Partner public partners;\\n\\n    constructor() public {\\n        partners = Partner(msg.sender, \\\"KALM\\\"); // 0.1%\\n        emit UpdatePartner(msg.sender, \\\"KALM\\\");\\n    }\\n\\n    function updatePartner(address wallet, bytes16 name)\\n        external\\n        onlyOwner\\n    {\\n        partners = Partner(wallet, name);\\n        emit UpdatePartner(wallet, name);\\n    }\\n\\n    function _amountWithFee(uint256 amount, uint256 _fee)\\n        internal\\n        view\\n        returns(uint256 remainingAmount)\\n    {\\n\\n        if (_fee == 0) {\\n            return amount;\\n        }\\n        uint256 fee = amount.mul(_fee).div(FEE_DIVIDER).div(100);\\n        return amount.sub(fee);\\n    }\\n\\n    function _collectFee(uint256 amount, IERC20 token, uint256 _fee)\\n        internal\\n        returns(uint256 remainingAmount)\\n    {\\n        if (_fee == 0) {\\n            return amount;\\n        }\\n\\n        uint256 fee = amount.mul(_fee).div(FEE_DIVIDER).div(100);\\n        require(fee < amount, \\\"fee exceeds return amount!\\\");\\n        if (etherERC20 == token) {\\n            (bool success, ) = partners.wallet.call.value(fee)(\\\"\\\"); // Send back ether to sender\\n            require(success, \\\"Transfer fee of ether failed.\\\");\\n        } else {\\n            token.safeTransfer(partners.wallet, fee);\\n        }\\n        emit CollectFee(token, partners.wallet, fee);\\n\\n        return amount.sub(fee);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/WhitelistFeeOnTransfer.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/ownership/Ownable.sol\\\";\\n\\n/*\\n* Whitelist of Fee On Transfer Token\\n*/\\ncontract WhitelistFeeOnTransfer is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event AddFeeOnTransferToken(IERC20 indexed token);\\n    event DisabledFeeOnTransferToken(IERC20 indexed token);\\n\\n    mapping(address => bool) public FeeOnTransferToken;\\n\\n    function addFeeOnTransferToken(\\n        IERC20  token\\n    )\\n        public\\n        onlyOwner\\n    {\\n        FeeOnTransferToken[address(token)] = true;\\n        emit AddFeeOnTransferToken(token);\\n    }\\n\\n    function disableFeeOnTransferToken(\\n        IERC20  token\\n    )\\n        public\\n        onlyOwner\\n    {\\n        FeeOnTransferToken[address(token)] = false;\\n        emit DisabledFeeOnTransferToken(token);\\n    }\\n\\n    function isFeeOnTransferToken(IERC20 token)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return FeeOnTransferToken[address(token)];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUserStakingPrice.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.5.17;\\n\\ninterface IUserStakingPrice {\\n\\n    // --- Function ---\\n    function userStakingValue(address user) external view returns (uint256 fee, uint256 totalValue);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/RoutingManagement.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/ownership/Ownable.sol\\\";\\nimport \\\"./interfaces/IKalmarTradingRoute.sol\\\";\\n\\ncontract RoutingManagement is Ownable {\\n    /**\\n    * @dev Struct of trading route\\n    * @param name Name of trading route.\\n    * @param enable The flag of trading route to check is trading route enable.\\n    * @param route The address of trading route.\\n    */\\n    struct Route {\\n      string name;\\n      bool enable;\\n      IKalmarTradingRoute route;\\n    }\\n\\n    event AddedBatchTradingRoute(\\n        address indexed addedBy,\\n        string[] name,\\n        address[] routingAddress,\\n        uint256 indexed length\\n    );\\n\\n    event AddedTradingRoute(\\n        address indexed addedBy,\\n        string name,\\n        IKalmarTradingRoute indexed routingAddress,\\n        uint256 indexed index\\n    );\\n\\n    event EnabledTradingRoute(\\n        address indexed enabledBy,\\n        string name,\\n        IKalmarTradingRoute indexed routingAddress,\\n        uint256 indexed index\\n    );\\n\\n    event DisabledTradingRoute(\\n        address indexed disabledBy,\\n        string name,\\n        IKalmarTradingRoute indexed routingAddress,\\n        uint256 indexed index\\n    );\\n\\n    Route[] public tradingRoutes; // list of trading routes\\n\\n    modifier onlyTradingRouteEnabled(uint _index) {\\n        require(tradingRoutes[_index].enable == true, \\\"This trading route is disabled\\\");\\n        _;\\n    }\\n\\n    modifier onlyTradingRouteDisabled(uint _index) {\\n        require(tradingRoutes[_index].enable == false, \\\"This trading route is enabled\\\");\\n        _;\\n    }\\n\\n    function addBatchTradingRoute(\\n        string[] memory _name,\\n        address[] memory _routingAddress\\n    )\\n      public\\n      onlyOwner\\n    {\\n        require(_name.length == _routingAddress.length, \\\"Invalid length!\\\");\\n        for (uint256 i = 0; i < _routingAddress.length; i++) {\\n            tradingRoutes.push(Route({\\n            name: _name[i],\\n            enable: true,\\n            route: IKalmarTradingRoute(_routingAddress[i])\\n        }));\\n        }\\n        \\n        emit AddedBatchTradingRoute(msg.sender, _name, _routingAddress, _routingAddress.length);\\n    }\\n\\n    /**\\n    * @dev Function for adding new trading route\\n    * @param _name Name of trading route.\\n    * @param _routingAddress The address of trading route.\\n    * @return length of trading routes.\\n    */\\n    function addTradingRoute(\\n        string memory _name,\\n        IKalmarTradingRoute _routingAddress\\n    )\\n      public\\n      onlyOwner\\n    {\\n        tradingRoutes.push(Route({\\n            name: _name,\\n            enable: true,\\n            route: _routingAddress\\n        }));\\n        emit AddedTradingRoute(msg.sender, _name, _routingAddress, tradingRoutes.length - 1);\\n    }\\n\\n    /**\\n    * @dev Function for disable trading route by index\\n    * @param _index The uint256 of trading route index.\\n    * @return length of trading routes.\\n    */\\n    function disableTradingRoute(\\n        uint256 _index\\n    )\\n        public\\n        onlyOwner\\n        onlyTradingRouteEnabled(_index)\\n    {\\n        tradingRoutes[_index].enable = false;\\n        emit DisabledTradingRoute(msg.sender, tradingRoutes[_index].name, tradingRoutes[_index].route, _index);\\n    }\\n\\n    /**\\n    * @dev Function for enale trading route by index\\n    * @param _index The uint256 of trading route index.\\n    * @return length of trading routes.\\n    */\\n    function enableTradingRoute(\\n        uint256 _index\\n    )\\n        public\\n        onlyOwner\\n        onlyTradingRouteDisabled(_index)\\n    {\\n        tradingRoutes[_index].enable = true;\\n        emit EnabledTradingRoute(msg.sender, tradingRoutes[_index].name, tradingRoutes[_index].route, _index);\\n    }\\n\\n    /**\\n    * @dev Function for get amount of trading route\\n    * @return Amount of trading routes.\\n    */\\n    function allRoutesLength() public view returns (uint256) {\\n        return tradingRoutes.length;\\n    }\\n\\n    /**\\n    * @dev Function for get enable status of trading route\\n    * @param _index The uint256 of trading route index.\\n    * @return enable status of trading route.\\n    */\\n    function isTradingRouteEnabled(uint256 _index) public view returns (bool) {\\n        return tradingRoutes[_index].enable;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/ownership/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IKalmarTradingRoute.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.5.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Warden Trading Route\\n * @dev The Warden trading route interface has an standard functions and event\\n * for other smart contract to implement to join Warden Swap as Market Maker.\\n */\\ninterface IKalmarTradingRoute {\\n    /**\\n    * @dev when new trade occure (and success), this event will be boardcast.\\n    * @param _src Source token\\n    * @param _srcAmount amount of source tokens\\n    * @param _dest   Destination token\\n    * @return _destAmount: amount of actual destination tokens\\n    */\\n    event Trade(\\n        IERC20 indexed _src,\\n        uint256 _srcAmount,\\n        IERC20 indexed _dest,\\n        uint256 _destAmount\\n    );\\n\\n    /**\\n    * @notice use token address 0xeee...eee for ether\\n    * @dev makes a trade between src and dest token\\n    * @param _src Source token\\n    * @param _dest   Destination token\\n    * @param _srcAmount amount of source tokens\\n    * @return _destAmount: amount of actual destination tokens\\n    */\\n    function trade(\\n        IERC20 _src,\\n        IERC20 _dest,\\n        uint256 _srcAmount\\n    )\\n        external\\n        payable\\n        returns(uint256 _destAmount);\\n\\n    /**\\n    * @dev provide destinationm token amount for given source amount\\n    * @param _src Source token\\n    * @param _dest Destination token\\n    * @param _srcAmount Amount of source tokens\\n    * @return _destAmount: amount of expected destination tokens\\n    */\\n    function getDestinationReturnAmount(\\n        IERC20 _src,\\n        IERC20 _dest,\\n        uint256 _srcAmount\\n    )\\n        external\\n        view\\n        returns(uint256 _destAmount);\\n\\n    /**\\n    * @dev provide source token amount for given destination amount\\n    * @param _src Source token\\n    * @param _dest Destination token\\n    * @param _destAmount Amount of destination tokens\\n    * @return _srcAmount: amount of expected source tokens\\n    */\\n    // function getSourceReturnAmount(\\n    //     IERC20 _src,\\n    //     IERC20 _dest,\\n    //     uint256 _destAmount\\n    // )\\n    //     external\\n    //     view\\n    //     returns(uint256 _srcAmount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AddFeeOnTransferToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"name\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"routingAddress\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"AddedBatchTradingRoute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"contract IKalmarTradingRoute\",\"name\":\"routingAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"AddedTradingRoute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollectFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_destAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_order\",\"type\":\"uint256\"}],\"name\":\"DestAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"DisabledFeeOnTransferToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"disabledBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"contract IKalmarTradingRoute\",\"name\":\"routingAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"DisabledTradingRoute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enabledBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"contract IKalmarTradingRoute\",\"name\":\"routingAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"EnabledTradingRoute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"srcAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"name\",\"type\":\"bytes16\"}],\"name\":\"UpdatePartner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userStakingPriceAddr\",\"type\":\"address\"}],\"name\":\"UpdateUserStakingPriceAddr\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"FEE_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"FeeOnTransferToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_name\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_routingAddress\",\"type\":\"address[]\"}],\"name\":\"addBatchTradingRoute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addFeeOnTransferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"contract IKalmarTradingRoute\",\"name\":\"_routingAddress\",\"type\":\"address\"}],\"name\":\"addTradingRoute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allRoutesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"collectRemainingEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"collectRemainingToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"disableFeeOnTransferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"disableTradingRoute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"enableTradingRoute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherERC20\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingRouteIndex\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"getDestinationReturnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"routes\",\"type\":\"uint256[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"srcAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"getDestinationReturnAmountForSplitTrades\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isFeeOnTransferToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"isTradingRouteEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bytes16\",\"name\":\"name\",\"type\":\"bytes16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"routes\",\"type\":\"uint256[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSrcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"srcAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minDestAmount\",\"type\":\"uint256\"}],\"name\":\"splitTrades\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingRouteIndex\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minDestAmount\",\"type\":\"uint256\"}],\"name\":\"trade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tradingRoutes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"},{\"internalType\":\"contract IKalmarTradingRoute\",\"name\":\"route\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bytes16\",\"name\":\"name\",\"type\":\"bytes16\"}],\"name\":\"updatePartner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userStakingPriceAddr\",\"type\":\"address\"}],\"name\":\"updateUserStakingPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userStakingValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "KalmyswapV2", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}