{"SourceCode": "// File: contracts/COMMON/common.sol\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\nlibrary Address {   \r\n    function isContract(address account) internal view returns (bool) { \r\n        return account.code.length > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {   \r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    \r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n// File: contracts/Factorys/FactoryBase.sol\r\n\r\n\r\npragma solidity ^0.8.19;\r\n\r\n\r\ncontract FactoryBase is Context, Ownable {\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    constructor(address _owner) {\r\n        _transferOwnership(_owner);\r\n    }\r\n\r\n    struct TokenInfo {\r\n        string name;\r\n        string symbol;\r\n        address tokenAddress;\r\n    }\r\n\r\n    mapping(address => TokenInfo[]) internal myTokens;\r\n\r\n    struct ConfigEtherStruct {\r\n        bool isActive;\r\n        uint256 paymentAmount;\r\n    }\r\n\r\n    struct ConfigTokenStruct {\r\n        string name;\r\n        bool isActive;\r\n        uint256 paymentAmount;\r\n    }\r\n\r\n    ConfigEtherStruct public configEther;\r\n\r\n    mapping(address => ConfigTokenStruct) public tokenMatrix;\r\n\r\n    event WithdrawalSuccessful(address indexed owner, uint256 amount);\r\n    event WithdrawalTokenSuccessful(address, address, uint256);\r\n    event onTransferFromEvent(address, address, uint256 amount);\r\n    event onTokenCreatedEvent(address, address, string, string, uint256);\r\n\r\n    function addContractToken(\r\n        address owner,\r\n        string memory _name,\r\n        string memory _symbol,\r\n        address _tokenAddress\r\n    ) internal {\r\n        myTokens[owner].push(TokenInfo(_name, _symbol, _tokenAddress));\r\n    }\r\n\r\n    function getContractTokenByAddress(address owner)\r\n        external\r\n        view\r\n        returns (TokenInfo[] memory)\r\n    {\r\n        return myTokens[owner];\r\n    }\r\n\r\n    function updateTokenConfig(\r\n        address _tokenAddress,\r\n        string memory _name,\r\n        bool _isActive,\r\n        uint256 _paymentAmount\r\n    ) public onlyOwner {\r\n        tokenMatrix[_tokenAddress].name = _name;\r\n        tokenMatrix[_tokenAddress].isActive = _isActive;\r\n        tokenMatrix[_tokenAddress].paymentAmount = _paymentAmount;\r\n    }\r\n\r\n    function updateEtherConfig(bool _isActive, uint256 _paymentAmount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        configEther.isActive = _isActive;\r\n        configEther.paymentAmount = _paymentAmount;\r\n    }\r\n\r\n    function removeTokenConfig(address _tokenAddress)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        if (tokenMatrix[_tokenAddress].isActive) {\r\n            delete tokenMatrix[_tokenAddress];\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function requireTokenActive(address _tokenAddress) internal view virtual {\r\n        ConfigTokenStruct storage token = tokenMatrix[_tokenAddress];\r\n        require(token.isActive, \"El token no est\\u00E1 activo\");\r\n    }\r\n\r\n    function isERC20Token(address tokenAddress)\r\n        internal\r\n        view\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        IERC20 token = IERC20(tokenAddress);\r\n        try token.totalSupply() returns (uint256) {\r\n            return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function requireValidERC20Token(address _tokenAddress)\r\n        internal\r\n        view\r\n        virtual\r\n    {\r\n        require(\r\n            isERC20Token(_tokenAddress),\r\n            \"El token no es un token ERC20 v\\u00E1lido\"\r\n        );\r\n    }\r\n\r\n    //obtener monto del servicio del token\r\n    function getTokenPaymentAmount(address _tokenAddress)\r\n        internal\r\n        view\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        ConfigTokenStruct storage token = tokenMatrix[_tokenAddress];\r\n        return token.paymentAmount;\r\n    }\r\n\r\n   \r\n    // Funci\u00f3n para retirar dinero de la moneda de la red\r\n    function withdrawByEther(uint256 _amount) external onlyOwner {\r\n        require(address(this).balance >= _amount, \"Saldo insuficiente en el contrato\");\r\n        payable(_msgSender()).transfer(_amount);\r\n        emit WithdrawalTokenSuccessful(owner(), address(this), _amount);\r\n    }\r\n\r\n    // Funci\u00f3n para retirar dinero de un token espec\u00edfico\r\n    function withdrawByToken(address _tokenAddress, uint256 _amount) external onlyOwner {\r\n        requireValidERC20Token(_tokenAddress);\r\n        require(IERC20(_tokenAddress).balanceOf(address(this)) >= _amount, \"Saldo insuficiente en el contrato\" );\r\n        IERC20(_tokenAddress).transfer(_msgSender(), _amount);\r\n        emit WithdrawalTokenSuccessful(owner(), _tokenAddress, _amount);\r\n    }\r\n\r\n    //obtener balance de un tokens\r\n    function getBalanceToken(address _tokenAddress)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        requireValidERC20Token(_tokenAddress);\r\n        IERC20 token = IERC20(_tokenAddress);\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    //obtener balance principal\r\n    function getBalanceEther() external view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n}\r\n\r\n// File: contracts/Factorys/FactoryTokenStandar.sol\r\n\r\n\r\npragma solidity ^0.8.19;\r\n\r\n\r\n\r\ninterface TokenFacory {\r\n    function createToken(\r\n        string memory _NAME,\r\n        string memory _SYMBOL,\r\n        uint256 _DECIMALS,\r\n        uint256 _supply,\r\n        uint256 _txFee,\r\n        uint256 _lpFee,\r\n        uint256 _DexFee,\r\n        address feeaddress,\r\n        address tokenOwner,\r\n        address _owner\r\n    ) external returns (address);\r\n}\r\n\r\ncontract FactoryTokenStandar is FactoryBase {\r\n    TokenFacory tokenFactory;\r\n    address private contractAddress;\r\n\r\n    constructor(address _owner, address _contractAddress) FactoryBase(_owner) {\r\n        tokenFactory = TokenFacory(_contractAddress);\r\n        contractAddress = _contractAddress;\r\n        _transferOwnership(_owner);\r\n    }\r\n\r\n    //deploy tokens paid cryptocurrency\r\n    function deployPaidByEther(\r\n        string memory _NAME,\r\n        string memory _SYMBOL,\r\n        uint256 _DECIMALS,\r\n        uint256 _supply,\r\n        uint256 _txFee,\r\n        uint256 _lpFee,\r\n        uint256 _DexFee,\r\n        address feeaddress,\r\n        address tokenOwner\r\n    ) external payable returns (address) {\r\n        require(configEther.isActive, \"El pago no esta activo\");\r\n        require(\r\n            msg.value == configEther.paymentAmount,\r\n            \"No tienes suficiente saldo para pagar el servicio\"\r\n        );\r\n        address newERC20 = tokenFactory.createToken(\r\n            _NAME,\r\n            _SYMBOL,\r\n            _DECIMALS,\r\n            _supply,\r\n            _txFee,\r\n            _lpFee,\r\n            _DexFee,\r\n            feeaddress,\r\n            tokenOwner,\r\n            owner()\r\n        );\r\n        addContractToken(_msgSender(), _NAME, _SYMBOL, newERC20);\r\n        return address(newERC20);\r\n    }\r\n\r\n    //deploy tokens paid valid tokens\r\n    function deployPaidByToken(\r\n        string memory _NAME,\r\n        string memory _SYMBOL,\r\n        uint256 _DECIMALS,\r\n        uint256 _supply,\r\n        uint256 _txFee,\r\n        uint256 _lpFee,\r\n        uint256 _DexFee,\r\n        address feeaddress,\r\n        address tokenOwner,\r\n        address _tokenAddress\r\n    ) external returns (address) {\r\n        requireTokenActive(_tokenAddress);\r\n        requireValidERC20Token(_tokenAddress);\r\n        uint256 toPayment = getTokenPaymentAmount(_tokenAddress);       \r\n        require(\r\n            IERC20(_tokenAddress).balanceOf(_msgSender()) >= toPayment,\r\n            \"No tienes suficientes tokens\"\r\n        );\r\n\r\n        require(\r\n            IERC20(_tokenAddress).allowance(_msgSender(), address(this)) >= toPayment,\r\n            \"Error al autorizar los tokens\"\r\n        );\r\n\r\n        require(\r\n            IERC20(_tokenAddress).transferFrom(_msgSender(), address(this), toPayment),\r\n            \"Error en transferencia de los tokens\"\r\n        );\r\n\r\n        address newERC20 = tokenFactory.createToken(\r\n            _NAME,\r\n            _SYMBOL,\r\n            _DECIMALS,\r\n            _supply,\r\n            _txFee,\r\n            _lpFee,\r\n            _DexFee,\r\n            feeaddress,\r\n            tokenOwner,\r\n            owner()\r\n        );\r\n        addContractToken(_msgSender(), _NAME, _SYMBOL, newERC20);\r\n        return address(newERC20);\r\n    }\r\n\r\n    function updateTokenFactoryAddress(address _newTokenFactoryAddress) external onlyOwner {\r\n        require(_newTokenFactoryAddress != address(0), \"La nueva direccion no puede ser cero\");\r\n        tokenFactory = TokenFacory(_newTokenFactoryAddress);\r\n        contractAddress = _newTokenFactoryAddress;\r\n    }\r\n\r\n    function getTokenFactoryAddress() external view onlyOwner returns (address){\r\n        return contractAddress;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"WithdrawalTokenSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"onTokenCreatedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onTransferFromEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"configEther\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_NAME\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_SYMBOL\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_DECIMALS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_txFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_DexFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"deployPaidByEther\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_NAME\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_SYMBOL\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_DECIMALS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_txFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_DexFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"deployPaidByToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalanceEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getBalanceToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getContractTokenByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct FactoryBase.TokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"removeTokenConfig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenMatrix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_paymentAmount\",\"type\":\"uint256\"}],\"name\":\"updateEtherConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_paymentAmount\",\"type\":\"uint256\"}],\"name\":\"updateTokenConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTokenFactoryAddress\",\"type\":\"address\"}],\"name\":\"updateTokenFactoryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawByEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawByToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FactoryTokenStandar", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000c6e971d6491c9c5f95c8fb42e4dcdfc9fb04f74900000000000000000000000072c9476909743f1f9227604ac2ccafc120ab7c0f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0f53cd3a868a7bf738dcbf94b2afab3120b9a7bd0b06671439e564dcfc033a85"}