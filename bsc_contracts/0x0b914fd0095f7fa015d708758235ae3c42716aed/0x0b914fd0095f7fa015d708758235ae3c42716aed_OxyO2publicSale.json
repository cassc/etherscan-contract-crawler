{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-12-29\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT LICENSE\r\npragma solidity ^0.8.2;\r\n\r\ninterface BEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract OxyO2publicSale is Ownable {\r\n    uint  oneday = 86400;\r\n    uint256 public amount = 150000e18;\r\n    uint constant SECONDS_PER_HOUR = 60 * 60;\r\n    uint256 public lasttimestamp;\r\n    BEP20 public ox2;\r\n    constructor(address _token) {\r\n        lasttimestamp = gettime(block.timestamp);\r\n             ox2 = BEP20(_token);\r\n    }\r\n\r\n    function publicRelease() public onlyOwner {\r\n        uint256 second = block.timestamp - lasttimestamp;\r\n        uint256 day = second / oneday;\r\n        require(day > 0 , \"timestamp exeeds\");\r\n            uint256 ox2balance = ox2.balanceOf(address(this));\r\n            require(ox2balance > 0 , \"balance exeeds\");\r\n            if (ox2balance < amount*day) {\r\n                ox2.transfer(owner(), ox2balance);\r\n            } else {\r\n                ox2.transfer(owner(), amount * day);\r\n            }\r\n            lasttimestamp = gettime(block.timestamp);\r\n    }\r\n    function remainingdays() public view returns (uint256) {\r\n        uint256 second = block.timestamp - lasttimestamp;\r\n        uint256 day = second / oneday;\r\n        return day;\r\n    }\r\n    function gettime(uint time) private pure returns(uint){\r\n       uint hour = ((time / 60 / 60) % 24);\r\n        uint minute = (time / 60) % 60;\r\n        uint sec = time % 60;\r\n        uint minutensec = (minute*60) + sec;\r\n        uint diffhour = (hour) * SECONDS_PER_HOUR;\r\n        uint difftime = diffhour + minutensec;\r\n        uint finaltime = time - difftime;\r\n        return finaltime;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lasttimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ox2\",\"outputs\":[{\"internalType\":\"contract BEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingdays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OxyO2publicSale", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000053940d46a35162255511ff7cade811891d49533c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e8b938d0240e09d64c0ae99e37af280976e12bcc3b291f53dfb7feb5e0e76884"}