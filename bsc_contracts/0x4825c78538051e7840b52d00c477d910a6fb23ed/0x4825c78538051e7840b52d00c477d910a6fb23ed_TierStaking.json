{"SourceCode": "// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: GPAD/Tier_Staking.sol\r\n\r\n\r\npragma solidity 0.8.12;\r\n\r\n\r\n\r\ncontract TierStaking is Ownable {\r\n\r\n    address public immutable token;\r\n    address public receiver;\r\n    bool public active;\r\n    uint256 public totalStaking;\r\n    mapping(uint256 => address) public staking;\r\n\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        uint256 tier;\r\n        uint256 stakedAt;\r\n    }\r\n\r\n    mapping (address => UserInfo) public userInfo;\r\n\r\n    struct Tier {\r\n        uint256 totalSpots;\r\n        uint256 stakers;\r\n        uint256 penaltyStartRate;\r\n        uint256 penaltyReduceStep;\r\n        uint256 penaltyPeriodStep;\r\n        uint256 penaltyTotalStep;\r\n        uint256 minimum;\r\n    }\r\n\r\n    mapping (uint256 => Tier) public tiers;\r\n\r\n    event OnStake(address indexed staker, uint256 amount, uint256 tier);\r\n    event OnWithdraw(address indexed receiver, uint256 amount, uint256 burn, uint256 tier);\r\n\r\n    modifier onActive {\r\n        require(active == true, \"The staking is not active.\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _token, address _receiver){\r\n        require(_token != address(0), \"Zero address\");\r\n        token = _token;\r\n        receiver = _receiver;\r\n    }\r\n\r\n    function addTier(\r\n        uint256 _id,\r\n        uint256 _totalSpots, \r\n        uint256 _penaltyStartRate, \r\n        uint256 _penaltyReduceStep, \r\n        uint256 _penaltyPeriodStep, \r\n        uint256 _penaltyTotalStep,\r\n        uint256 _minimum\r\n    ) external onlyOwner {\r\n        require(tiers[_id].totalSpots == 0, \"Tier already exists\");\r\n        require(_penaltyTotalStep * _penaltyReduceStep == _penaltyStartRate, \"Step rate is not valid\");\r\n        tiers[_id] = Tier({\r\n            totalSpots: _totalSpots,\r\n            stakers: 0,\r\n            penaltyStartRate: _penaltyStartRate,\r\n            penaltyReduceStep: _penaltyReduceStep,\r\n            penaltyPeriodStep: _penaltyPeriodStep,\r\n            penaltyTotalStep: _penaltyTotalStep,\r\n            minimum: _minimum\r\n        });\r\n    }\r\n\r\n    function setTier(\r\n        uint256 _id,\r\n        uint256 _totalSpots, \r\n        uint256 _penaltyStartRate, \r\n        uint256 _penaltyReduceStep, \r\n        uint256 _penaltyPeriodStep, \r\n        uint256 _penaltyTotalStep,\r\n        uint256 _minimum\r\n    ) external onlyOwner {\r\n        require(_totalSpots >= tiers[_id].stakers, \"The spots could not be below current stakers.\");\r\n        require(_penaltyTotalStep * _penaltyReduceStep == _penaltyStartRate, \"Step rate is not valid\");\r\n        tiers[_id].totalSpots = _totalSpots;\r\n        tiers[_id].penaltyStartRate = _penaltyStartRate;\r\n        tiers[_id].penaltyReduceStep = _penaltyReduceStep;\r\n        tiers[_id].penaltyPeriodStep = _penaltyPeriodStep;\r\n        tiers[_id].penaltyTotalStep = _penaltyTotalStep;\r\n        tiers[_id].minimum = _minimum;\r\n    }\r\n\r\n    function setActive(bool _active) external onlyOwner {\r\n        active = _active;\r\n    }\r\n\r\n    function setReceiver(address _receiver) external onlyOwner {\r\n        require(_receiver != address(0), \"Zero address\");\r\n        receiver = _receiver;\r\n    }\r\n\r\n    function getUserTier(address _user) public view returns (uint256) {\r\n        return userInfo[_user].tier;\r\n    }\r\n\r\n    function stake(uint256 _tier) public onActive {\r\n        require(getUserTier(_msgSender()) == 0, \"Already have Tier\");\r\n        require(tiers[_tier].totalSpots - tiers[_tier].stakers >= 1, \"The tier is full\");\r\n        require(IERC20(token).transferFrom(_msgSender(), address(this), tiers[_tier].minimum), \"Fail transfer\");\r\n        userInfo[_msgSender()] = UserInfo({\r\n            amount: tiers[_tier].minimum,\r\n            tier: _tier,\r\n            stakedAt: block.timestamp\r\n        });\r\n        totalStaking ++;\r\n        staking[totalStaking] = _msgSender();\r\n        tiers[_tier].stakers ++;\r\n\r\n        emit OnStake(_msgSender(), tiers[_tier].minimum, _tier);\r\n    }\r\n\r\n    function getWithdrawble(address _wallet) public view returns (uint256) {\r\n        uint256 withdrawable;\r\n        if (getUserTier(_wallet) != 0) {\r\n            Tier memory tier = tiers[userInfo[_wallet].tier];\r\n            uint256 hasStakedPeriod = block.timestamp - userInfo[_wallet].stakedAt;\r\n            uint256 Step = hasStakedPeriod / tier.penaltyPeriodStep;\r\n            uint256 panalty;\r\n            if (Step >= tier.penaltyTotalStep) {\r\n                panalty = 0;\r\n            } else {\r\n                panalty = tier.penaltyStartRate - (tier.penaltyReduceStep * Step);\r\n            }\r\n            withdrawable = userInfo[_wallet].amount * (10000 - panalty) / 10000;\r\n        } else {\r\n            withdrawable = 0;\r\n        }\r\n        return withdrawable;\r\n    }\r\n\r\n    function withdraw() public {\r\n        require(getUserTier(_msgSender()) != 0, \"Do not stake yet\");\r\n        uint256 withdrawable = getWithdrawble(_msgSender());\r\n        require(IERC20(token).transfer(_msgSender(), withdrawable), \"Fail transfer\");\r\n\r\n        uint256 burn = userInfo[_msgSender()].amount - withdrawable;\r\n        if (burn != 0) {\r\n            require(IERC20(token).transfer(receiver, burn), \"Fail transfer\");\r\n        }\r\n\r\n        tiers[userInfo[_msgSender()].tier].stakers = tiers[userInfo[_msgSender()].tier].stakers - 1;\r\n\r\n        emit OnWithdraw(receiver, withdrawable, burn, userInfo[_msgSender()].tier);\r\n\r\n        userInfo[_msgSender()] = UserInfo({\r\n            amount: 0,\r\n            tier: 0,\r\n            stakedAt: 0\r\n        });\r\n    }\r\n\r\n    function withdrawEmergency (\r\n        address _token\r\n    ) public onlyOwner {\r\n        require(_token != address(0), \"Invalid token address\");\r\n        require(_token != address(this), \"Cannot withdraw contract's token\");\r\n        require(IERC20(_token).transfer(_msgSender(), IERC20(_token).balanceOf(address(this))), \"Fail transfer\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"name\":\"OnStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"name\":\"OnWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSpots\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_penaltyStartRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_penaltyReduceStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_penaltyPeriodStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_penaltyTotalStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimum\",\"type\":\"uint256\"}],\"name\":\"addTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getWithdrawble\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSpots\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_penaltyStartRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_penaltyReduceStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_penaltyPeriodStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_penaltyTotalStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimum\",\"type\":\"uint256\"}],\"name\":\"setTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSpots\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyStartRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyReduceStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyPeriodStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyTotalStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TierStaking", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e1443170fab91fba2c535b3f78935d6fce55348d000000000000000000000000eccd8dd840ca019e544324520a67f6617566852f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://80464ba6fe245fe5349c62c6344c22048ae224e0568cb6b3fc4a607939be6c92"}