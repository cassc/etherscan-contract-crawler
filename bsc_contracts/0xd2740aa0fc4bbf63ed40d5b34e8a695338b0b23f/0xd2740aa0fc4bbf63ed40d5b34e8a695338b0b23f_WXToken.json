{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n//created by chatGPT4.0\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// Interface for Uniswap V2 Factory which allows creating liquidity pairs\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\n// Interface for Uniswap V2 Pair to get details about a liquidity pair's reserves\r\ninterface IUniswapV2Pair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ninterface ILPManager{\r\n    function userBalances(address user) external returns (uint256);\r\n}\r\n\r\n// The main ZQToken contract that inherits from ERC20 and Ownable\r\ncontract WXToken is ERC20, Ownable {\r\n    // Variable to store the main pair address\r\n    address public mainPair;\r\n    // Setting up some constant addresses\r\n    address public constant QL_ADDRESS = 0x5930d09D7a54969E0F0a749AC81FfA3807dC67ab;\r\n    address public FOUNDATION_ADDRESS = 0xEd429638666bcF2C898a27C3f40FFd7Afde2008B;\r\n    address public NFT_REWARD_ADDRESS = 0xF1fa297AD58b308B2aDC53Ee29fcEEdD2D8d708d;\r\n    // Variable to store the LP reward address\r\n    address public lpRewardAddress;\r\n    // Variable to store the starting block number\r\n    uint256 public startBlock;\r\n    // Mappings for whitelist\r\n    mapping(address => bool) private whiteList;\r\n    // Constant for a dead address (usually represents burned tokens)\r\n    address public constant DEAD_ADDRESS = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    uint256 public processGas = 50000;\r\n\r\n    // Constructor function that initializes the contract\r\n    constructor() ERC20(\"WXToken\", \"WX\") {\r\n        require(QL_ADDRESS < address(this),\"QL must be token0\");\r\n        // Minting initial tokens\r\n        _mint(msg.sender, 3000 * (10 ** uint256(decimals())));\r\n        // Creating a uniswap pair\r\n        IUniswapV2Factory factory = IUniswapV2Factory(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73);\r\n        mainPair = factory.createPair(address(this), QL_ADDRESS);\r\n        // Initializing the LPRewardProcessor contract and setting its address\r\n        LPRewardProcessor lpRewardContract = new LPRewardProcessor(address(this), mainPair);\r\n        lpRewardAddress = address(lpRewardContract);\r\n        // Setting initial addresses for whitelist\r\n        whiteList[FOUNDATION_ADDRESS] = true;\r\n        whiteList[NFT_REWARD_ADDRESS] = true;\r\n        whiteList[lpRewardAddress] = true;\r\n        whiteList[msg.sender] = true;\r\n    }\r\n\r\n    event DistributionFailed(bytes reason);\r\n\r\n    // Function to mark the start of trading. Can only be called by the owner\r\n    function startTrade() external onlyOwner {\r\n        require(startBlock == 0,\"aready launched\");\r\n        startBlock = block.number;\r\n    }\r\n\r\n    // Internal transfer function with custom logic based on sender and recipient addresses\r\n    function _transfer(address sender, address recipient, uint256 amount) internal override {\r\n        // If either sender or recipient is in whitelist, perform a normal transfer\r\n        if (whiteList[sender] || whiteList[recipient]) {\r\n            super._transfer(sender, recipient, amount);\r\n            return;\r\n        }\r\n\r\n        // Calculating taxes\r\n        uint256 foundationTax = amount / 100;\r\n        uint256 lpRewardTax = (amount * 2) / 100;\r\n        uint256 nftRewardTax = amount / 100;\r\n\r\n        // If sending from the mainPair\r\n        if (sender == mainPair) {\r\n\r\n            require(startBlock>0,\"not open\");\r\n\r\n            // If buying within 5 blocks from start\r\n            if (block.number < startBlock + 5) {\r\n                super._transfer(sender, recipient, amount / 100);\r\n                super._transfer(sender, DEAD_ADDRESS, amount - (amount / 100));\r\n            } else {\r\n                // Distributing the taxes\r\n                super._transfer(sender, FOUNDATION_ADDRESS, foundationTax);\r\n                super._transfer(sender, lpRewardAddress, lpRewardTax);\r\n                super._transfer(sender, NFT_REWARD_ADDRESS, nftRewardTax);\r\n                // Transfer remaining amount to recipient\r\n                super._transfer(sender, recipient, amount - foundationTax - lpRewardTax - nftRewardTax);\r\n            }\r\n            // Limiting purchase amount within first 400 blocks\r\n            if (block.number <= startBlock + 400 && balanceOf(recipient) >= 10 * (10 ** uint256(decimals()))) {\r\n                revert(\"Exceeds max buy limit within 400 blocks after start\");\r\n            }\r\n        } else if (recipient == mainPair) {\r\n            // If it's a liquidity addition, update the holder in the LP reward contract\r\n            if (_isAddLiquidity(amount)) {\r\n                LPRewardProcessor(lpRewardAddress).addHolder(sender);\r\n                super._transfer(sender, recipient, amount);\r\n                return;\r\n            }\r\n\r\n            require(startBlock>0,\"not open\");\r\n\r\n            // If selling within 5 blocks from start\r\n            if (block.number < startBlock + 5) {\r\n                super._transfer(sender, FOUNDATION_ADDRESS, amount - amount / 100);\r\n                super._transfer(sender, recipient, amount / 100);\r\n            } else if (block.number < startBlock + 400) {\r\n                // Charging higher tax for selling within 400 blocks from start\r\n                uint256 taxAmount = amount * 30 / 100;\r\n                super._transfer(sender, FOUNDATION_ADDRESS, taxAmount);\r\n                super._transfer(sender, recipient, amount - taxAmount);\r\n            } else {\r\n                // Distributing the taxes for sales after 400 blocks from start\r\n                super._transfer(sender, FOUNDATION_ADDRESS, foundationTax);\r\n                super._transfer(sender, lpRewardAddress, lpRewardTax);\r\n                super._transfer(sender, NFT_REWARD_ADDRESS, nftRewardTax);\r\n                super._transfer(sender, recipient, amount - foundationTax - lpRewardTax - nftRewardTax);\r\n            }\r\n        } else {\r\n            // Normal transfer if not interacting with the mainPair\r\n            super._transfer(sender, recipient, amount);\r\n        }\r\n\r\n        // Process LP reward for every transfer\r\n        LPRewardProcessor(lpRewardAddress).processReward(processGas);\r\n    }\r\n\r\n    // Function to determine if liquidity is being added\r\n    function _isAddLiquidity(uint256 amount) internal view returns (bool isAdd) {\r\n        IUniswapV2Pair mainPairInstance = IUniswapV2Pair(mainPair);\r\n        (uint r0, uint r1, ) = mainPairInstance.getReserves();\r\n\r\n        address tokenOther = QL_ADDRESS;\r\n        uint256 r;\r\n        uint256 rToken;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n            rToken = r1;\r\n        } else {\r\n            r = r1;\r\n            rToken = r0;\r\n        }\r\n        uint256 bal = ERC20(tokenOther).balanceOf(address(mainPairInstance));\r\n        if (rToken == 0) {\r\n            return bal > r;\r\n        } else {\r\n            return bal > r + r * amount / rToken / 2;\r\n        }\r\n\r\n    }\r\n\r\n    // Function to determine if liquidity is being removed\r\n    function _isRemoveLiquidity() internal view returns (bool isRemove) {\r\n        IUniswapV2Pair mainPairInstance = IUniswapV2Pair(mainPair);\r\n        (uint r0, uint r1, ) = mainPairInstance.getReserves();\r\n\r\n        address tokenOther = QL_ADDRESS;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n\r\n        uint256 bal = ERC20(tokenOther).balanceOf(address(mainPairInstance));\r\n        return r > bal;\r\n    }\r\n\r\n    function setWhiteListBatch(address[] calldata _addrs, bool _status) external onlyOwner {\r\n        for (uint256 i = 0; i < _addrs.length; i++) {\r\n            whiteList[_addrs[i]] = _status;\r\n        }\r\n    }\r\n\r\n    function addHolderBatch(address[] calldata _addrs) external onlyOwner {\r\n        for (uint256 i = 0; i < _addrs.length; i++) {\r\n             LPRewardProcessor(lpRewardAddress).addHolder(_addrs[i]);\r\n        }\r\n    }\r\n\r\n    function setProcessGas(uint256 newGas) external onlyOwner{\r\n        require(newGas < 100000);\r\n        processGas = newGas;\r\n    }\r\n\r\n    function setNftAddress(address addr) external onlyOwner{\r\n        NFT_REWARD_ADDRESS = addr;\r\n        whiteList[NFT_REWARD_ADDRESS] = true;\r\n    }\r\n\r\n    function setFoundationADddress(address addr) external onlyOwner{\r\n        FOUNDATION_ADDRESS = addr;\r\n        whiteList[FOUNDATION_ADDRESS] = true;\r\n    }\r\n\r\n    // Setter to update the minimum reward token balance condition.\r\n    function setHolderRewardCondition(uint256 amount) external onlyOwner {\r\n        LPRewardProcessor(lpRewardAddress).setHolderRewardCondition(amount);\r\n    }\r\n\r\n    // Setter to update the minimum reward token balance condition.\r\n    function setExcludeHolder(address addr,bool status) external onlyOwner {\r\n        LPRewardProcessor(lpRewardAddress).setExcludeHolder(addr, status);\r\n    }\r\n\r\n    // Setter to update the minimum reward token balance condition.\r\n    function setLPRewardAddress(address addr) external onlyOwner {\r\n       lpRewardAddress = addr;\r\n    }\r\n\r\n    function setLpManager(address addr)external onlyOwner{\r\n        LPRewardProcessor(lpRewardAddress).setLpManager(addr);\r\n    }\r\n\r\n    function withdrawLp(address to,uint256 amount)  external onlyOwner {\r\n        LPRewardProcessor(lpRewardAddress).withdrawTo(to,amount);\r\n    }\r\n}\r\n\r\n// Define a contract named `LPRewardProcessor` which also inherits from `Ownable`.\r\ncontract LPRewardProcessor is Ownable {\r\n    // List of token holders.\r\n    address[] public holders;\r\n\r\n    // A mapping to get the index of a holder's address in the holders array.\r\n    mapping(address => uint256) holderIndex;\r\n\r\n    // A mapping to determine if a holder is excluded from rewards.\r\n    mapping(address => bool) excludeHolder;\r\n\r\n    // Current index for processing rewards.\r\n    uint256 private currentIndex;\r\n\r\n    // Minimum reward token balance required in this contract to start distributing rewards.\r\n    uint256 public holderRewardCondition = 1e18 /100;\r\n\r\n    // The latest block number when rewards were processed.\r\n    uint256 private progressRewardBlock;\r\n\r\n    // Reward token that will be distributed to holders.\r\n    IERC20 public _rewardToken;\r\n\r\n    // Main token (probably LP token) whose holders will receive rewards.\r\n    address public _mainPair;\r\n\r\n    ILPManager public lpManager;\r\n\r\n    // Constructor to initialize the reward token and the main token pair.\r\n    constructor(address baseToken, address mainPair) {\r\n        _rewardToken = IERC20(baseToken);\r\n        _mainPair = mainPair;\r\n    }\r\n\r\n    // Function to add a new holder.\r\n    function addHolder(address adr) external onlyOwner {\r\n        uint256 size;\r\n        // Ensure that the address is not a contract address.\r\n        assembly { size := extcodesize(adr) }\r\n        if (size > 0) {\r\n            return;\r\n        }\r\n\r\n        // If the holder does not already exist, add them to the holders array.\r\n        if (0 == holderIndex[adr]) {\r\n            if (0 == holders.length || holders[0] != adr) {\r\n                holderIndex[adr] = holders.length;\r\n                holders.push(adr);\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n    // Function to distribute rewards if certain conditions are met.\r\n    function processReward(uint256 gas) external {\r\n        // Ensure there's a gap of at least 200 blocks since the last reward distribution.\r\n        if (progressRewardBlock + 200 > block.number) {\r\n            return;\r\n        }\r\n\r\n        // Check if the contract has enough balance to distribute rewards.\r\n        uint256 balance = _rewardToken.balanceOf(address(this));\r\n        if (balance < holderRewardCondition) {\r\n            return;\r\n        }\r\n\r\n        _distributeReward(balance, gas);\r\n        // Update the last processed block number.\r\n        progressRewardBlock = block.number;\r\n    }\r\n\r\n    // Function to distribute rewards without checking certain conditions.\r\n    function processRewardWithoutCondition(uint256 gas) public {\r\n        uint256 balance = _rewardToken.balanceOf(address(this));\r\n        if (balance == 0) {\r\n            return;\r\n        }\r\n        _distributeReward(balance, gas);\r\n    }\r\n\r\n    // Internal function to distribute rewards to eligible holders.\r\n    function _distributeReward(uint256 balance, uint256 gas) private {\r\n        IERC20 holdToken = IERC20(_mainPair);\r\n        uint holdTokenTotal = holdToken.totalSupply();\r\n\r\n        address shareHolder;\r\n        uint256 tokenBalance;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = holders.length;\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        // Loop to distribute rewards based on the gas provided.\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n\r\n            shareHolder = holders[currentIndex];\r\n            tokenBalance = holdToken.balanceOf(shareHolder) + lpManager.userBalances(shareHolder);\r\n\r\n            // Ensure that the holder has a balance and is not excluded from rewards.\r\n            if (tokenBalance > 0 && !excludeHolder[shareHolder]) {\r\n                // Calculate the reward amount.\r\n                amount = balance * tokenBalance / holdTokenTotal;\r\n                if (amount > 0) {\r\n                    _rewardToken.transfer(shareHolder, amount);\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n    function getHolderCount()view public returns(uint256){\r\n        return holders.length;\r\n    }\r\n\r\n    // Setter to update the minimum reward token balance condition.\r\n    function setHolderRewardCondition(uint256 amount) external onlyOwner {\r\n        holderRewardCondition = amount;\r\n    }\r\n\r\n    // Setter to include or exclude a holder from receiving rewards.\r\n    function setExcludeHolder(address addr, bool enable) external onlyOwner {\r\n        excludeHolder[addr] = enable;\r\n    }\r\n\r\n\r\n    function setLpManager(address addr)external onlyOwner{\r\n        lpManager = ILPManager(addr);\r\n    }\r\n\r\n    // Function to allow the contract owner to withdraw reward tokens.\r\n    function withdrawTo(address destination, uint256 amount) external onlyOwner {\r\n        require(IERC20(_rewardToken).transfer(destination, amount), \"Transfer failed\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"DistributionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FOUNDATION_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFT_REWARD_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QL_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"addHolderBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpRewardAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setExcludeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFoundationADddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHolderRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setLPRewardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setLpManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setNftAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newGas\",\"type\":\"uint256\"}],\"name\":\"setProcessGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrs\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setWhiteListBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WXToken", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0a0fdfca16fcd62dcbe3a49658e899b5db1fb7bfc31928f219460bb4504564b0"}