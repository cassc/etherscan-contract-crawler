{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FortuneWheel/FortuneWheel.sol\": {\r\n      \"content\": \"/**\\r\\n *Submitted for verification at Etherscan.io on 2022-04-18\\r\\n */\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\r\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\r\\nimport '@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol';\\r\\nimport '../interfaces/IPancakePair.sol';\\r\\nimport '../interfaces/IPancakeFactory.sol';\\r\\nimport '../interfaces/IPancakeRouter.sol';\\r\\nimport '../interfaces/IBNBP.sol';\\r\\nimport '../interfaces/IPRC20.sol';\\r\\nimport '../interfaces/IVRFConsumer.sol';\\r\\nimport '../interfaces/IPegSwap.sol';\\r\\nimport '../interfaces/IPotContract.sol';\\r\\n\\r\\ncontract FortuneWheel is ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint256 public casinoCount;\\r\\n    mapping(uint256 => Casino) public tokenIdToCasino;\\r\\n    mapping(address => bool) public isStable;\\r\\n\\r\\n    // Info for current round\\r\\n    BetInfo[] currentBets;\\r\\n    OutcomeInfo[] public outcomeInfos;\\r\\n    uint256 public currentBetCount;\\r\\n    uint256 public roundLiveTime;\\r\\n    bool public isVRFPending;\\r\\n    uint256 public requestId;\\r\\n    uint256 public roundIds;\\r\\n    uint256 public betIds;\\r\\n\\r\\n    address public casinoNFTAddress;\\r\\n    address public BNBPAddress;\\r\\n    address public consumerAddress;\\r\\n    address public potAddress;\\r\\n    address public owner;\\r\\n\\r\\n    uint256 public maxOutcome;\\r\\n    uint256 public maxNonceLimit;\\r\\n    address internal constant wbnbAddr = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c; // testnet: 0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd, mainnet: 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\\r\\n    address internal constant busdAddr = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; // testnet: 0x4608Ea31fA832ce7DCF56d78b5434b49830E91B1, mainnet: 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56\\r\\n    address internal constant pancakeFactoryAddr = 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73; // testnet: 0x6725F303b657a9451d8BA641348b6761A6CC7a17, mainnet: 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73\\r\\n    address internal constant pancakeRouterAddr = 0x10ED43C718714eb63d5aA57B78B54704E256024E; // testnet: 0xD99D1c33F9fC3444f8101754aBC46c52416550D1, mainnet: 0x10ED43C718714eb63d5aA57B78B54704E256024E\\r\\n    address internal constant coordinatorAddr = 0xc587d9053cd1118f25F645F9E08BB98c9712A4EE; // testnet: 0x6A2AAd07396B36Fe02a22b33cf443582f682c82f, mainnet: 0xc587d9053cd1118f25F645F9E08BB98c9712A4EE\\r\\n    address internal constant linkTokenAddr = 0xF8A0BF9cF54Bb92F17374d9e9A321E6a111a51bD; // testnet: 0x84b9B910527Ad5C03A9Ca831909E21e236EA7b06, mainnet: 0xF8A0BF9cF54Bb92F17374d9e9A321E6a111a51bD\\r\\n    address internal constant pegSwapAddr = 0x1FCc3B22955e76Ca48bF025f1A6993685975Bb9e;\\r\\n    address internal constant link677TokenAddr = 0x404460C6A5EdE2D891e8297795264fDe62ADBB75;\\r\\n    uint256 internal constant subscriptionId = 675; // testnet: 2102, mainnet: 675\\r\\n    uint256 public linkPerBet = 45000000000000000; // 0.045 link token per request\\r\\n    mapping(uint256 => uint256) public linkSpent;\\r\\n\\r\\n    struct OutcomeInfo {\\r\\n        uint256 from;\\r\\n        uint256 to;\\r\\n        uint256 outcome;\\r\\n    }\\r\\n\\r\\n    struct Casino {\\r\\n        uint256 nftTokenId;\\r\\n        address tokenAddress;\\r\\n        string tokenName;\\r\\n        uint256 liquidity;\\r\\n        uint256 roundLiquidity;\\r\\n        uint256 locked;\\r\\n        uint256 initialMaxBet;\\r\\n        uint256 initialMinBet;\\r\\n        uint256 maxBet;\\r\\n        uint256 minBet;\\r\\n        uint256 fee;\\r\\n        int256 profit;\\r\\n        uint256 lastSwapTime;\\r\\n        uint256 roundLimit;\\r\\n    }\\r\\n\\r\\n    struct BetInfo {\\r\\n        uint256 amount;\\r\\n        address player;\\r\\n        uint256 tokenId;\\r\\n        uint256 tokenPrice;\\r\\n    }\\r\\n\\r\\n    event FinishedBet(\\r\\n        uint256 tokenId,\\r\\n        uint256 betId,\\r\\n        uint256 roundId,\\r\\n        address player,\\r\\n        uint256 nonce,\\r\\n        uint256 totalAmount,\\r\\n        uint256 rewardAmount,\\r\\n        uint256 totalUSD,\\r\\n        uint256 rewardUSD,\\r\\n        uint256 maximumReward\\r\\n    );\\r\\n    event RoundFinished(uint256 roundId, uint256 nonce, uint256 outcome);\\r\\n    event TransferFailed(uint256 tokenId, address to, uint256 amount);\\r\\n    event TokenSwapFailed(uint256 tokenId, uint256 balance, string reason, uint256 timestamp);\\r\\n    event InitializedBet(uint256 roundId, uint256 tokenId, address player, uint256 amount);\\r\\n    event AddedLiquidity(uint256 tokenId, address owner, uint256 amount);\\r\\n    event RemovedLiquidity(uint256 tokenId, address owner, uint256 amount);\\r\\n    event UpdatedMaxBet(uint256 tokenId, address owner, uint256 value);\\r\\n    event UpdatedMinBet(uint256 tokenId, address owner, uint256 value);\\r\\n    event LiquidityChanged(\\r\\n        uint256 tokenId,\\r\\n        address changer,\\r\\n        uint256 liquidity,\\r\\n        uint256 roundLiquidity,\\r\\n        uint256 locked,\\r\\n        bool isFinishedBet\\r\\n    );\\r\\n    event SuppliedBNBP(uint256 amount);\\r\\n    event SuppliedLink(uint256 amount);\\r\\n    event VRFRequested();\\r\\n\\r\\n    constructor(\\r\\n        address nftAddr,\\r\\n        address _BNBPAddress,\\r\\n        address _consumerAddress,\\r\\n        address _potAddress,\\r\\n        OutcomeInfo[] memory _outcomeInfos\\r\\n    ) {\\r\\n        address BNBPPair = IPancakeFactory(pancakeFactoryAddr).getPair(wbnbAddr, _BNBPAddress);\\r\\n        require(BNBPPair != address(0), 'No liquidity with BNBP and BNB');\\r\\n\\r\\n        casinoNFTAddress = nftAddr;\\r\\n        BNBPAddress = _BNBPAddress;\\r\\n        consumerAddress = _consumerAddress;\\r\\n        potAddress = _potAddress;\\r\\n        owner = msg.sender;\\r\\n        setOutcomeInfos(_outcomeInfos);\\r\\n    }\\r\\n\\r\\n    function onlyCasinoOwner(uint256 tokenId) internal view {\\r\\n        require(IERC721(casinoNFTAddress).ownerOf(tokenId) == msg.sender, 'Not Casino Owner');\\r\\n    }\\r\\n\\r\\n    function onlyOwner() internal view {\\r\\n        require(msg.sender == owner, 'owner');\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev updates pot contract Address\\r\\n     */\\r\\n    function setPotAddress(address addr) external {\\r\\n        onlyOwner();\\r\\n        potAddress = addr;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev sets token is stable or not\\r\\n     */\\r\\n    function setTokenStable(address tokenAddr, bool _isStable) external {\\r\\n        onlyOwner();\\r\\n        isStable[tokenAddr] = _isStable;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev set how much link token will be consumed per bet\\r\\n     */\\r\\n    function setLinkPerBet(uint256 value) external {\\r\\n        onlyOwner();\\r\\n        linkPerBet = value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev set outcome infos\\r\\n     */\\r\\n    function setOutcomeInfos(OutcomeInfo[] memory _infos) public {\\r\\n        onlyOwner();\\r\\n        uint256 max = 0;\\r\\n        uint256 maxLimit = 0;\\r\\n\\r\\n        delete outcomeInfos;\\r\\n        for (uint256 i = 0; i < _infos.length; i++) {\\r\\n            if (max < _infos[i].outcome) max = _infos[i].outcome;\\r\\n            if (maxLimit < _infos[i].to) maxLimit = _infos[i].to;\\r\\n            outcomeInfos.push(_infos[i]);\\r\\n        }\\r\\n\\r\\n        maxOutcome = max;\\r\\n        maxNonceLimit = maxLimit;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns list of casinos minted\\r\\n     */\\r\\n    function getCasinoList()\\r\\n        external\\r\\n        view\\r\\n        returns (Casino[] memory casinos, address[] memory owners, uint256[] memory prices)\\r\\n    {\\r\\n        uint256 length = casinoCount;\\r\\n        casinos = new Casino[](length);\\r\\n        owners = new address[](length);\\r\\n        prices = new uint256[](length);\\r\\n        IERC721 nftContract = IERC721(casinoNFTAddress);\\r\\n\\r\\n        for (uint256 i = 1; i <= length; ++i) {\\r\\n            casinos[i - 1] = tokenIdToCasino[i];\\r\\n            owners[i - 1] = nftContract.ownerOf(casinos[i - 1].nftTokenId);\\r\\n            if (casinos[i - 1].tokenAddress == address(0)) {\\r\\n                prices[i - 1] = getBNBPrice();\\r\\n            } else {\\r\\n                prices[i - 1] = _getTokenUsdPrice(casinos[i - 1].tokenAddress);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getRoundStatus()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 roundId, BetInfo[] memory betInfos, bool _isVRFPending, uint256 _roundLiveTime)\\r\\n    {\\r\\n        roundId = roundIds;\\r\\n        _isVRFPending = isVRFPending;\\r\\n        _roundLiveTime = roundLiveTime;\\r\\n        betInfos = _getCurrentBets();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev adds a new casino\\r\\n     */\\r\\n    function addCasino(\\r\\n        uint256 tokenId,\\r\\n        address[] calldata tokenList,\\r\\n        string[] calldata tokenNames,\\r\\n        uint256 maxBet,\\r\\n        uint256 minBet,\\r\\n        uint256 fee\\r\\n    ) external {\\r\\n        require(msg.sender == casinoNFTAddress || msg.sender == owner, 'Only casino nft contract can call');\\r\\n\\r\\n        uint256 start = casinoCount;\\r\\n\\r\\n        for (uint256 i = 0; i < tokenList.length; i++) {\\r\\n            Casino storage newCasino = tokenIdToCasino[start + i + 1];\\r\\n            newCasino.tokenAddress = tokenList[i];\\r\\n            newCasino.tokenName = tokenNames[i];\\r\\n            newCasino.initialMaxBet = maxBet;\\r\\n            newCasino.initialMinBet = minBet;\\r\\n            newCasino.maxBet = maxBet;\\r\\n            newCasino.minBet = minBet;\\r\\n            newCasino.fee = fee;\\r\\n            newCasino.liquidity = 0;\\r\\n            newCasino.nftTokenId = tokenId;\\r\\n            newCasino.roundLimit = 100;\\r\\n            newCasino.roundLiquidity = 0;\\r\\n        }\\r\\n\\r\\n        casinoCount += tokenList.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev set max bet limit for casino\\r\\n     */\\r\\n    function setMaxBet(uint256 tokenId, uint256 newMaxBet) external {\\r\\n        Casino storage casinoInfo = tokenIdToCasino[tokenId];\\r\\n        onlyCasinoOwner(casinoInfo.nftTokenId);\\r\\n        require(newMaxBet <= casinoInfo.initialMaxBet, \\\"Can't exceed initial max bet\\\");\\r\\n        require(newMaxBet >= casinoInfo.minBet, \\\"Can't exceed initial max bet\\\");\\r\\n\\r\\n        casinoInfo.maxBet = newMaxBet;\\r\\n        emit UpdatedMaxBet(tokenId, msg.sender, newMaxBet);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev set min bet limit for casino\\r\\n     */\\r\\n    function setMinBet(uint256 tokenId, uint256 newMinBet) external {\\r\\n        Casino storage casinoInfo = tokenIdToCasino[tokenId];\\r\\n        onlyCasinoOwner(casinoInfo.nftTokenId);\\r\\n\\r\\n        require(newMinBet <= casinoInfo.maxBet, 'min >= max');\\r\\n        require(newMinBet > casinoInfo.initialMinBet, \\\"Can't be lower than initial min bet\\\");\\r\\n\\r\\n        casinoInfo.minBet = newMinBet;\\r\\n        emit UpdatedMinBet(tokenId, msg.sender, newMinBet);\\r\\n    }\\r\\n\\r\\n    function _getCurrentBets() internal view returns (BetInfo[] memory) {\\r\\n        BetInfo[] memory infos;\\r\\n        if (currentBetCount == 0) return infos;\\r\\n        infos = new BetInfo[](currentBetCount);\\r\\n\\r\\n        for (uint256 i = 0; i < currentBetCount; ++i) {\\r\\n            infos[i] = currentBets[i];\\r\\n        }\\r\\n        return infos;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev request random number for calculating winner\\r\\n     */\\r\\n    function _requestVRF() internal {\\r\\n        IVRFv2Consumer vrfConsumer = IVRFv2Consumer(consumerAddress);\\r\\n        uint256 _requestId = vrfConsumer.requestRandomWords();\\r\\n        requestId = _requestId;\\r\\n        isVRFPending = true;\\r\\n        emit VRFRequested();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev request nonce if round is finished, start round if the first player has entered\\r\\n     */\\r\\n    function _updateRoundStatus() internal {\\r\\n        if (!isVRFPending && roundLiveTime != 0 && block.timestamp > roundLiveTime + 120) {\\r\\n            _requestVRF();\\r\\n        }\\r\\n        if (currentBetCount == 1) {\\r\\n            roundLiveTime = block.timestamp;\\r\\n            roundIds++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev save user bet info to `currentBets`\\r\\n     */\\r\\n    function _saveUserBetInfo(uint256 tokenId, uint256 amount, uint256 tokenPrice) internal {\\r\\n        uint256 count = currentBetCount;\\r\\n\\r\\n        if (currentBets.length == count) {\\r\\n            currentBets.push();\\r\\n        }\\r\\n\\r\\n        BetInfo storage info = currentBets[count];\\r\\n        info.tokenId = tokenId;\\r\\n        info.player = msg.sender;\\r\\n        info.tokenPrice = tokenPrice;\\r\\n        info.amount = amount;\\r\\n\\r\\n        ++currentBetCount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev initialize bet and request nonce to VRF\\r\\n     *\\r\\n     * NOTE this function only accepts erc20 tokens\\r\\n     * @param tokenId tokenId of the Casino\\r\\n     * @param amount token amount\\r\\n     */\\r\\n    function initializeTokenBet(uint256 tokenId, uint256 amount) external nonReentrant {\\r\\n        require(!isVRFPending, 'VRF Pending');\\r\\n\\r\\n        Casino storage casinoInfo = tokenIdToCasino[tokenId];\\r\\n        address tokenAddress = casinoInfo.tokenAddress;\\r\\n        uint256 liquidity = casinoInfo.liquidity;\\r\\n        uint256 roundLiquidity = casinoInfo.roundLiquidity;\\r\\n        require(tokenAddress != address(0), \\\"This casino doesn't support tokens\\\");\\r\\n\\r\\n        IPRC20 token = IPRC20(tokenAddress);\\r\\n        IPRC20 busdToken = IPRC20(busdAddr);\\r\\n        uint256 approvedAmount = token.allowance(msg.sender, address(this));\\r\\n        uint256 maxReward = amount * maxOutcome;\\r\\n        uint256 tokenPrice = isStable[tokenAddress] ? 10 ** 18 : _getTokenUsdPrice(tokenAddress);\\r\\n        uint256 totalUSDValue = (amount * tokenPrice) / 10 ** token.decimals();\\r\\n\\r\\n        require(token.balanceOf(msg.sender) >= amount, 'Not enough balance');\\r\\n        require(amount <= approvedAmount, 'Not enough allowance');\\r\\n        require(maxReward <= roundLiquidity + amount, 'Not enough liquidity');\\r\\n        require(totalUSDValue <= casinoInfo.maxBet * 10 ** busdToken.decimals(), \\\"Can't exceed max bet limit\\\");\\r\\n        require(totalUSDValue >= casinoInfo.minBet * 10 ** busdToken.decimals(), \\\"Can't be lower than min bet limit\\\");\\r\\n\\r\\n        token.transferFrom(msg.sender, address(this), amount);\\r\\n        liquidity -= (maxReward - amount);\\r\\n        roundLiquidity -= (maxReward - amount);\\r\\n        casinoInfo.liquidity = liquidity;\\r\\n        casinoInfo.roundLiquidity = roundLiquidity;\\r\\n        casinoInfo.locked += maxReward;\\r\\n\\r\\n        _saveUserBetInfo(tokenId, amount, tokenPrice);\\r\\n        _updateRoundStatus();\\r\\n\\r\\n        emit InitializedBet(roundIds, tokenId, msg.sender, amount);\\r\\n        emit LiquidityChanged(tokenId, msg.sender, liquidity, roundLiquidity, casinoInfo.locked, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev initialize bet and request nonce to VRF\\r\\n     *\\r\\n     * NOTE this function only accepts bnb\\r\\n     * @param tokenId tokenId of the Casino\\r\\n     * @param amount eth amount\\r\\n     */\\r\\n    function initializeEthBet(uint256 tokenId, uint256 amount) external payable {\\r\\n        require(!isVRFPending, 'VRF Pending');\\r\\n\\r\\n        Casino storage casinoInfo = tokenIdToCasino[tokenId];\\r\\n        uint256 liquidity = casinoInfo.liquidity;\\r\\n        uint256 roundLiquidity = casinoInfo.roundLiquidity;\\r\\n        require(casinoInfo.tokenAddress == address(0), 'This casino only support bnb');\\r\\n\\r\\n        IPRC20 busdToken = IPRC20(busdAddr);\\r\\n        uint256 maxReward = amount * maxOutcome;\\r\\n        uint256 bnbPrice = getBNBPrice();\\r\\n        uint256 totalUSDValue = (bnbPrice * amount) / 10 ** 18;\\r\\n\\r\\n        require(msg.value == amount, 'Not correct bet amount');\\r\\n        require(maxReward <= roundLiquidity + amount, 'Not enough liquidity');\\r\\n        require(totalUSDValue <= casinoInfo.maxBet * 10 ** busdToken.decimals(), \\\"Can't exceed max bet limit\\\");\\r\\n        require(totalUSDValue >= casinoInfo.minBet * 10 ** busdToken.decimals(), \\\"Can't be lower than min bet limit\\\");\\r\\n\\r\\n        liquidity -= (maxReward - amount);\\r\\n        roundLiquidity -= (maxReward - amount);\\r\\n        casinoInfo.liquidity = liquidity;\\r\\n        casinoInfo.roundLiquidity = roundLiquidity;\\r\\n        casinoInfo.locked += maxReward;\\r\\n\\r\\n        _saveUserBetInfo(tokenId, amount, bnbPrice);\\r\\n        _updateRoundStatus();\\r\\n\\r\\n        emit InitializedBet(roundIds, tokenId, msg.sender, amount);\\r\\n        emit LiquidityChanged(tokenId, msg.sender, liquidity, roundLiquidity, casinoInfo.locked, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev request nonce when round time is over\\r\\n     */\\r\\n    function requestNonce() external {\\r\\n        require(!isVRFPending && roundLiveTime != 0 && block.timestamp > roundLiveTime + 120, 'Round not ended');\\r\\n        _requestVRF();\\r\\n    }\\r\\n\\r\\n    function isVRFFulfilled() public view returns (bool) {\\r\\n        (bool fulfilled, uint256[] memory nonces) = IVRFv2Consumer(consumerAddress).getRequestStatus(requestId);\\r\\n        return fulfilled;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns outcome X from the given nonce\\r\\n     */\\r\\n    function _spinWheel(uint256 nonce) private view returns (uint256 outcome) {\\r\\n        uint256 length = outcomeInfos.length;\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            if (nonce >= outcomeInfos[i].from && nonce <= outcomeInfos[i].to) {\\r\\n                return outcomeInfos[i].outcome;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev retrieve nonce and spin the wheel, return reward if user wins\\r\\n     *\\r\\n     */\\r\\n    function finishRound() external nonReentrant {\\r\\n        require(isVRFPending == true, 'VRF not requested');\\r\\n\\r\\n        (bool fulfilled, uint256[] memory nonces) = IVRFv2Consumer(consumerAddress).getRequestStatus(requestId);\\r\\n        require(fulfilled == true, 'not yet fulfilled');\\r\\n\\r\\n        uint256 nonce = nonces[0] % (maxNonceLimit + 1);\\r\\n        uint256 outcome = _spinWheel(nonce);\\r\\n        uint256 length = currentBetCount;\\r\\n        uint256 linkPerRound = linkPerBet;\\r\\n        uint256 i;\\r\\n\\r\\n        for (i = 0; i < length; ++i) {\\r\\n            BetInfo memory info = currentBets[i];\\r\\n            linkSpent[info.tokenId] += (linkPerRound / length);\\r\\n            _finishUserBet(info, outcome);\\r\\n        }\\r\\n\\r\\n        isVRFPending = false;\\r\\n        delete roundLiveTime;\\r\\n        delete currentBetCount;\\r\\n        emit RoundFinished(roundIds, nonce, outcome);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev finish individual user's pending bet based on the nonce retreived\\r\\n     */\\r\\n    function _finishUserBet(BetInfo memory info, uint256 outcome) internal {\\r\\n        Casino storage casinoInfo = tokenIdToCasino[info.tokenId];\\r\\n        uint256 decimal = casinoInfo.tokenAddress == address(0) ? 18 : IPRC20(casinoInfo.tokenAddress).decimals();\\r\\n        uint256 totalReward = info.amount * outcome;\\r\\n        uint256 maxReward = info.amount * maxOutcome;\\r\\n        uint256 totalUSDValue = (info.amount * info.tokenPrice) / 10 ** decimal;\\r\\n        uint256 totalRewardUSD = (totalReward * info.tokenPrice) / 10 ** decimal;\\r\\n\\r\\n        betIds++;\\r\\n        if (totalReward > 0) {\\r\\n            if (casinoInfo.tokenAddress != address(0)) {\\r\\n                IPRC20(casinoInfo.tokenAddress).transfer(info.player, totalReward);\\r\\n            } else {\\r\\n                bool sent = payable(info.player).send(totalReward);\\r\\n                require(sent, 'send fail');\\r\\n            }\\r\\n        }\\r\\n        casinoInfo.liquidity += maxReward - totalReward;\\r\\n        casinoInfo.roundLiquidity += maxReward - totalReward;\\r\\n        casinoInfo.locked -= maxReward;\\r\\n        casinoInfo.profit = casinoInfo.profit + int256(info.amount) - int256(totalReward);\\r\\n\\r\\n        emit FinishedBet(\\r\\n            info.tokenId,\\r\\n            betIds,\\r\\n            roundIds,\\r\\n            info.player,\\r\\n            outcome,\\r\\n            info.amount,\\r\\n            totalReward,\\r\\n            totalUSDValue,\\r\\n            totalRewardUSD,\\r\\n            maxReward\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev adds liquidity to the casino pool\\r\\n     * NOTE this is only for casinos that uses tokens\\r\\n     */\\r\\n    function addLiquidityWithTokens(uint256 tokenId, uint256 amount) external {\\r\\n        onlyCasinoOwner(tokenId);\\r\\n\\r\\n        Casino storage casinoInfo = tokenIdToCasino[tokenId];\\r\\n        require(casinoInfo.tokenAddress != address(0), \\\"This casino doesn't support tokens\\\");\\r\\n\\r\\n        IERC20 token = IERC20(casinoInfo.tokenAddress);\\r\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\r\\n        casinoInfo.liquidity += amount;\\r\\n        casinoInfo.roundLiquidity += (amount * casinoInfo.roundLimit) / 100;\\r\\n        emit AddedLiquidity(tokenId, msg.sender, amount);\\r\\n        emit LiquidityChanged(\\r\\n            tokenId,\\r\\n            msg.sender,\\r\\n            casinoInfo.liquidity,\\r\\n            casinoInfo.roundLiquidity,\\r\\n            casinoInfo.locked,\\r\\n            false\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev adds liquidity to the casino pool\\r\\n     * NOTE this is only for casinos that uses bnb\\r\\n     */\\r\\n    function addLiquidityWithEth(uint256 tokenId) external payable {\\r\\n        onlyCasinoOwner(tokenId);\\r\\n\\r\\n        Casino storage casinoInfo = tokenIdToCasino[tokenId];\\r\\n\\r\\n        require(casinoInfo.tokenAddress == address(0), \\\"This casino doesn't supports bnb\\\");\\r\\n        casinoInfo.liquidity += msg.value;\\r\\n        casinoInfo.roundLiquidity += (msg.value * casinoInfo.roundLimit) / 100;\\r\\n        emit AddedLiquidity(tokenId, msg.sender, msg.value);\\r\\n        emit LiquidityChanged(\\r\\n            tokenId,\\r\\n            msg.sender,\\r\\n            casinoInfo.liquidity,\\r\\n            casinoInfo.roundLiquidity,\\r\\n            casinoInfo.locked,\\r\\n            false\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev removes liquidity from the casino pool\\r\\n     */\\r\\n    function removeLiquidity(uint256 tokenId, uint256 amount) external {\\r\\n        onlyCasinoOwner(tokenId);\\r\\n\\r\\n        Casino storage casinoInfo = tokenIdToCasino[tokenId];\\r\\n        uint256 liquidity = casinoInfo.liquidity;\\r\\n\\r\\n        require(int256(liquidity - amount) >= casinoInfo.profit, 'Cannot withdraw profit before it is fee taken');\\r\\n        require(liquidity >= amount, 'Not enough liquidity');\\r\\n\\r\\n        unchecked {\\r\\n            casinoInfo.liquidity -= amount;\\r\\n            casinoInfo.roundLiquidity -= (amount * casinoInfo.roundLimit) / 100;\\r\\n        }\\r\\n\\r\\n        if (casinoInfo.tokenAddress != address(0)) {\\r\\n            IERC20 token = IERC20(casinoInfo.tokenAddress);\\r\\n            token.safeTransfer(msg.sender, amount);\\r\\n        } else {\\r\\n            bool sent = payable(msg.sender).send(amount);\\r\\n            require(sent, 'Failed Transfer');\\r\\n        }\\r\\n        emit RemovedLiquidity(tokenId, msg.sender, amount);\\r\\n        emit LiquidityChanged(\\r\\n            tokenId,\\r\\n            msg.sender,\\r\\n            casinoInfo.liquidity,\\r\\n            casinoInfo.roundLiquidity,\\r\\n            casinoInfo.locked,\\r\\n            false\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function updateRoundLimit(uint256 tokenId, uint256 value) external {\\r\\n        onlyCasinoOwner(tokenId);\\r\\n        Casino storage casinoInfo = tokenIdToCasino[tokenId];\\r\\n        Casino memory info = tokenIdToCasino[tokenId];\\r\\n        unchecked {\\r\\n            if (value > info.roundLimit) {\\r\\n                casinoInfo.roundLiquidity += (info.liquidity * (value - info.roundLimit)) / 100;\\r\\n            } else {\\r\\n                casinoInfo.roundLiquidity -= (info.liquidity * (info.roundLimit - value)) / 100;\\r\\n            }\\r\\n        }\\r\\n        casinoInfo.roundLimit = value;\\r\\n        emit LiquidityChanged(tokenId, msg.sender, info.liquidity, casinoInfo.roundLiquidity, info.locked, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev update casino's current profit and liquidity.\\r\\n     */\\r\\n    function _updateProfitInfo(uint256 tokenId, uint256 fee, uint256 calculatedProfit) internal {\\r\\n        if (fee == 0) return;\\r\\n        Casino storage casinoInfo = tokenIdToCasino[tokenId];\\r\\n        casinoInfo.liquidity -= fee;\\r\\n        casinoInfo.profit -= int256(calculatedProfit);\\r\\n        casinoInfo.lastSwapTime = block.timestamp;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev update casino's link consumption info\\r\\n     */\\r\\n    function _updateLinkConsumptionInfo(uint256 tokenId, uint256 tokenAmount) internal {\\r\\n        uint256 linkOut = getLinkAmountForToken(tokenIdToCasino[tokenId].tokenAddress, tokenAmount);\\r\\n        if (linkOut >= linkSpent[tokenId]) linkSpent[tokenId] = 0;\\r\\n        else linkSpent[tokenId] -= linkOut;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev get usd price of a token by usdt\\r\\n     */\\r\\n    function _getTokenUsdPrice(address tokenAddress) internal view returns (uint256) {\\r\\n        if (isStable[tokenAddress]) return 10 ** 18;\\r\\n\\r\\n        IPancakeRouter02 router = IPancakeRouter02(pancakeRouterAddr);\\r\\n        IPRC20 token = IPRC20(tokenAddress);\\r\\n\\r\\n        address[] memory path = new address[](3);\\r\\n        path[0] = tokenAddress;\\r\\n        path[1] = wbnbAddr;\\r\\n        path[2] = busdAddr;\\r\\n        uint256 usdValue = router.getAmountsOut(10 ** token.decimals(), path)[2];\\r\\n\\r\\n        return usdValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets current pulse price in comparison with BNB and USDT\\r\\n     */\\r\\n    function getBNBPrice() public view returns (uint256 price) {\\r\\n        IPancakeRouter02 router = IPancakeRouter02(pancakeRouterAddr);\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = wbnbAddr;\\r\\n        path[1] = busdAddr;\\r\\n        uint256[] memory amounts = router.getAmountsOut(10 ** 18, path);\\r\\n        return amounts[1];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns token amount needed for `linkAmount` when swapping given token into link\\r\\n     */\\r\\n    function getTokenAmountForLink(address tokenAddr, uint256 linkAmount) public view returns (uint256) {\\r\\n        IPancakeRouter02 router = IPancakeRouter02(pancakeRouterAddr);\\r\\n        address[] memory path;\\r\\n        if (tokenAddr == address(0) || tokenAddr == wbnbAddr) {\\r\\n            path = new address[](2);\\r\\n            path[0] = wbnbAddr;\\r\\n            path[1] = linkTokenAddr;\\r\\n        } else {\\r\\n            path = new address[](3);\\r\\n            path[0] = tokenAddr;\\r\\n            path[1] = wbnbAddr;\\r\\n            path[2] = linkTokenAddr;\\r\\n        }\\r\\n\\r\\n        return router.getAmountsIn(linkAmount, path)[0];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns link token amount out when swapping given token into link\\r\\n     */\\r\\n    function getLinkAmountForToken(address tokenAddr, uint256 tokenAmount) public view returns (uint256) {\\r\\n        IPancakeRouter02 router = IPancakeRouter02(pancakeRouterAddr);\\r\\n        address[] memory path;\\r\\n        bool isBNB = tokenAddr == address(0) || tokenAddr == wbnbAddr;\\r\\n        if (isBNB) {\\r\\n            path = new address[](2);\\r\\n            path[0] = wbnbAddr;\\r\\n            path[1] = linkTokenAddr;\\r\\n        } else {\\r\\n            path = new address[](3);\\r\\n            path[0] = tokenAddr;\\r\\n            path[1] = wbnbAddr;\\r\\n            path[2] = linkTokenAddr;\\r\\n        }\\r\\n\\r\\n        return router.getAmountsOut(tokenAmount, path)[isBNB ? 1 : 2];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev resets round and return all money back to players\\r\\n     */\\r\\n    function resetRound() external nonReentrant {\\r\\n        onlyOwner();\\r\\n        require(roundLiveTime != 0, 'empty');\\r\\n\\r\\n        uint256 length = currentBetCount;\\r\\n        for (uint256 i = 0; i < length; ++i) {\\r\\n            BetInfo memory info = currentBets[i];\\r\\n            Casino storage casinoInfo = tokenIdToCasino[info.tokenId];\\r\\n            uint256 maximumReward = info.amount * maxOutcome;\\r\\n\\r\\n            casinoInfo.locked -= maximumReward;\\r\\n            casinoInfo.liquidity += (maximumReward - info.amount);\\r\\n            casinoInfo.roundLiquidity = (casinoInfo.liquidity * casinoInfo.roundLimit) / 100;\\r\\n\\r\\n            // Transfer money back\\r\\n            address tokenAddress = casinoInfo.tokenAddress;\\r\\n            if (tokenAddress != address(0)) {\\r\\n                IPRC20(tokenAddress).transfer(info.player, info.amount);\\r\\n            } else {\\r\\n                bool sent = payable(info.player).send(info.amount);\\r\\n                require(sent, 'send fail');\\r\\n            }\\r\\n        }\\r\\n        delete isVRFPending;\\r\\n        delete currentBetCount;\\r\\n        delete roundLiveTime;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev swaps profit fees of casinos into BNBP\\r\\n     */\\r\\n    function swapProfitFees() external {\\r\\n        IPancakeRouter02 router = IPancakeRouter02(pancakeRouterAddr);\\r\\n        address[] memory path = new address[](2);\\r\\n        uint256 totalBNBForGame;\\r\\n        uint256 totalBNBForLink;\\r\\n        uint256 length = casinoCount;\\r\\n        uint256 BNBPPool = 0;\\r\\n\\r\\n        // Swap each token to BNB\\r\\n        for (uint256 i = 1; i <= length; ++i) {\\r\\n            Casino memory casinoInfo = tokenIdToCasino[i];\\r\\n            IERC20 token = IERC20(casinoInfo.tokenAddress);\\r\\n\\r\\n            if (casinoInfo.liquidity == 0) continue;\\r\\n\\r\\n            uint256 availableProfit = casinoInfo.profit < 0 ? 0 : uint256(casinoInfo.profit);\\r\\n            if (casinoInfo.liquidity < availableProfit) {\\r\\n                availableProfit = casinoInfo.liquidity;\\r\\n            }\\r\\n\\r\\n            uint256 gameFee = (availableProfit * casinoInfo.fee) / 100;\\r\\n            uint256 amountForLinkFee = getTokenAmountForLink(casinoInfo.tokenAddress, linkSpent[i]);\\r\\n            _updateProfitInfo(i, uint256(gameFee), availableProfit);\\r\\n            casinoInfo.liquidity = tokenIdToCasino[i].liquidity;\\r\\n\\r\\n            // If fee from the profit is not enought for link, then use liquidity\\r\\n            if (gameFee < amountForLinkFee) {\\r\\n                if (casinoInfo.liquidity < (amountForLinkFee - gameFee)) {\\r\\n                    amountForLinkFee = gameFee + casinoInfo.liquidity;\\r\\n                    tokenIdToCasino[i].liquidity = 0;\\r\\n                } else {\\r\\n                    tokenIdToCasino[i].liquidity -= (amountForLinkFee - gameFee);\\r\\n                }\\r\\n                gameFee = 0;\\r\\n            } else {\\r\\n                gameFee -= amountForLinkFee;\\r\\n            }\\r\\n\\r\\n            // Update Link consumption info\\r\\n            _updateLinkConsumptionInfo(i, amountForLinkFee);\\r\\n\\r\\n            if (casinoInfo.tokenAddress == address(0)) {\\r\\n                totalBNBForGame += gameFee;\\r\\n                totalBNBForLink += amountForLinkFee;\\r\\n                continue;\\r\\n            }\\r\\n            if (casinoInfo.tokenAddress == BNBPAddress) {\\r\\n                BNBPPool += gameFee;\\r\\n                gameFee = 0;\\r\\n            }\\r\\n\\r\\n            path[0] = casinoInfo.tokenAddress;\\r\\n            path[1] = wbnbAddr;\\r\\n\\r\\n            if (gameFee + amountForLinkFee == 0) {\\r\\n                continue;\\r\\n            }\\r\\n            token.approve(address(router), gameFee + amountForLinkFee);\\r\\n            uint256[] memory swappedAmounts = router.swapExactTokensForETH(\\r\\n                gameFee + amountForLinkFee,\\r\\n                0,\\r\\n                path,\\r\\n                address(this),\\r\\n                block.timestamp\\r\\n            );\\r\\n            totalBNBForGame += (swappedAmounts[1] * gameFee) / (gameFee + amountForLinkFee);\\r\\n            totalBNBForLink += (swappedAmounts[1] * amountForLinkFee) / (gameFee + amountForLinkFee);\\r\\n        }\\r\\n\\r\\n        path[0] = wbnbAddr;\\r\\n        // Convert to LINK\\r\\n        if (totalBNBForLink > 0) {\\r\\n            path[1] = linkTokenAddr;\\r\\n\\r\\n            // Swap BNB into Link Token\\r\\n            uint256 linkAmount = router.swapExactETHForTokens{ value: totalBNBForLink }(\\r\\n                0,\\r\\n                path,\\r\\n                address(this),\\r\\n                block.timestamp\\r\\n            )[1];\\r\\n\\r\\n            // Convert Link to ERC677 Link\\r\\n            IERC20(linkTokenAddr).approve(pegSwapAddr, linkAmount);\\r\\n            PegSwap(pegSwapAddr).swap(linkAmount, linkTokenAddr, link677TokenAddr);\\r\\n\\r\\n            // Fund VRF subscription account\\r\\n            LinkTokenInterface(link677TokenAddr).transferAndCall(\\r\\n                coordinatorAddr,\\r\\n                linkAmount,\\r\\n                abi.encode(subscriptionId)\\r\\n            );\\r\\n            emit SuppliedLink(linkAmount);\\r\\n        }\\r\\n\\r\\n        // Swap the rest of BNB to BNBP\\r\\n        if (totalBNBForGame > 0) {\\r\\n            path[1] = BNBPAddress;\\r\\n            BNBPPool += router.swapExactETHForTokens{ value: totalBNBForGame }(0, path, address(this), block.timestamp)[\\r\\n                1\\r\\n            ];\\r\\n        }\\r\\n\\r\\n        if (BNBPPool > 0) {\\r\\n            // add BNBP to tokenomics pool\\r\\n            IERC20(BNBPAddress).approve(potAddress, BNBPPool);\\r\\n            IPotLottery(potAddress).addAdminTokenValue(BNBPPool);\\r\\n\\r\\n            emit SuppliedBNBP(BNBPPool);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IPancakeRouter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\ninterface IPancakeRouter01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPancakePair.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakePair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IBNBP.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\ninterface IBNBP {\\r\\n    error AirdropTimeError();\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    function mint(address to, uint256 amount) external;\\r\\n\\r\\n    function burn(uint256 amount) external;\\r\\n\\r\\n    function isUserAddress(address addr) external view returns (bool);\\r\\n\\r\\n    function calculatePairAddress() external view returns (address);\\r\\n\\r\\n    function performAirdrop() external returns (uint256);\\r\\n\\r\\n    function performBurn() external returns (uint256);\\r\\n\\r\\n    function performLottery() external returns (address);\\r\\n\\r\\n    function setPotContractAddress(address addr) external;\\r\\n\\r\\n    function setAirdropPercentage(uint8 percentage) external;\\r\\n\\r\\n    function setAirdropInterval(uint256 interval) external;\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IPancakeFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.16;\\r\\n\\r\\n\\r\\ninterface IPancakeFactory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPRC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\ninterface IPRC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IPegSwap.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\ninterface PegSwap {\\r\\n    /**\\r\\n     * @notice deposits tokens from the target of a swap pair but does not return\\r\\n     * any. WARNING: Liquidity added through this method is only retrievable by\\r\\n     * the owner of the contract.\\r\\n     * @param amount count of liquidity being added\\r\\n     * @param source the token that can be swapped for what is being deposited\\r\\n     * @param target the token that can is being deposited for swapping\\r\\n     */\\r\\n    function addLiquidity(\\r\\n        uint256 amount,\\r\\n        address source,\\r\\n        address target\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice withdraws tokens from the target of a swap pair.\\r\\n     * @dev Only callable by owner\\r\\n     * @param amount count of liquidity being removed\\r\\n     * @param source the token that can be swapped for what is being removed\\r\\n     * @param target the token that can is being withdrawn from swapping\\r\\n     */\\r\\n    function removeLiquidity(\\r\\n        uint256 amount,\\r\\n        address source,\\r\\n        address target\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice exchanges the source token for target token\\r\\n     * @param amount count of tokens being swapped\\r\\n     * @param source the token that is being given\\r\\n     * @param target the token that is being taken\\r\\n     */\\r\\n    function swap(\\r\\n        uint256 amount,\\r\\n        address source,\\r\\n        address target\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice send funds that were accidentally transferred back to the owner. This\\r\\n     * allows rescuing of funds, and poses no additional risk as the owner could\\r\\n     * already withdraw any funds intended to be swapped. WARNING: If not called\\r\\n     * correctly this method can throw off the swappable token balances, but that\\r\\n     * can be recovered from by transferring the discrepancy back to the swap.\\r\\n     * @dev Only callable by owner\\r\\n     * @param amount count of tokens being moved\\r\\n     * @param target the token that is being moved\\r\\n     */\\r\\n    function recoverStuckTokens(uint256 amount, address target) external;\\r\\n\\r\\n    /**\\r\\n     * @notice swap tokens in one transaction if the sending token supports ERC677\\r\\n     * @param sender address that initially initiated the call to the source token\\r\\n     * @param amount count of tokens sent for the swap\\r\\n     * @param targetData address of target token encoded as a bytes array\\r\\n     */\\r\\n    function onTokenTransfer(\\r\\n        address sender,\\r\\n        uint256 amount,\\r\\n        bytes calldata targetData\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IPotContract.sol\": {\r\n      \"content\": \"/**\\r\\n *Submitted for verification at Etherscan.io on 2022-04-18\\r\\n */\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n// File: PotContract.sol\\r\\n\\r\\ninterface IPotLottery {\\r\\n    struct Token {\\r\\n        address tokenAddress;\\r\\n        string tokenSymbol;\\r\\n        uint256 tokenDecimal;\\r\\n    }\\r\\n\\r\\n    enum POT_STATE {\\r\\n        PAUSED,\\r\\n        WAITING,\\r\\n        STARTED,\\r\\n        LIVE,\\r\\n        CALCULATING_WINNER\\r\\n    }\\r\\n\\r\\n    event EnteredPot(\\r\\n        string tokenName,\\r\\n        address indexed userAddress,\\r\\n        uint256 indexed potRound,\\r\\n        uint256 usdValue,\\r\\n        uint256 amount,\\r\\n        uint256 indexed enteryCount,\\r\\n        bool hasEntryInCurrentPot\\r\\n    );\\r\\n    event CalculateWinner(\\r\\n        address indexed winner,\\r\\n        uint256 indexed potRound,\\r\\n        uint256 potValue,\\r\\n        uint256 amount,\\r\\n        uint256 amountWon,\\r\\n        uint256 participants\\r\\n    );\\r\\n\\r\\n    event PotStateChange(uint256 indexed potRound, POT_STATE indexed potState, uint256 indexed time);\\r\\n    event TokenSwapFailed(string tokenName);\\r\\n\\r\\n    function getRefund() external;\\r\\n\\r\\n    function airdropPool() external view returns (uint256);\\r\\n\\r\\n    function lotteryPool() external view returns (uint256);\\r\\n\\r\\n    function burnPool() external view returns (uint256);\\r\\n\\r\\n    function airdropInterval() external view returns (uint256);\\r\\n\\r\\n    function burnInterval() external view returns (uint256);\\r\\n\\r\\n    function lotteryInterval() external view returns (uint256);\\r\\n\\r\\n    function fullFillRandomness() external view returns (uint256);\\r\\n\\r\\n    function getBNBPrice() external view returns (uint256 price);\\r\\n\\r\\n    function swapAccumulatedFees() external;\\r\\n\\r\\n    function burnAccumulatedBNBP() external;\\r\\n\\r\\n    function airdropAccumulatedBNBP() external returns (uint256);\\r\\n\\r\\n    function addAdminTokenValue(uint256 value) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IVRFConsumer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\ninterface IVRFv2Consumer {\\r\\n    event RequestSent(uint256 requestId, uint32 numWords);\\r\\n    event RequestFulfilled(uint256 requestId, uint256[] randomWords);\\r\\n\\r\\n    function requestRandomWords() external returns (uint256 requestId);\\r\\n\\r\\n    function getRequestStatus(uint256 _requestId) external view returns (bool fulfilled, uint256[] memory randomWords);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 5\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_BNBPAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_consumerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_potAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outcome\",\"type\":\"uint256\"}],\"internalType\":\"struct FortuneWheel.OutcomeInfo[]\",\"name\":\"_outcomeInfos\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddedLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalUSD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardUSD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maximumReward\",\"type\":\"uint256\"}],\"name\":\"FinishedBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InitializedBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"changer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundLiquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFinishedBet\",\"type\":\"bool\"}],\"name\":\"LiquidityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RemovedLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outcome\",\"type\":\"uint256\"}],\"name\":\"RoundFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SuppliedBNBP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SuppliedLink\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokenSwapFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UpdatedMinBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"VRFRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BNBPAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokenList\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"tokenNames\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"maxBet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"addCasino\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"addLiquidityWithEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityWithTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"casinoCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"casinoNFTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"consumerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBetCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBNBPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCasinoList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialMaxBet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialMinBet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"profit\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"lastSwapTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct FortuneWheel.Casino[]\",\"name\":\"casinos\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"getLinkAmountForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoundStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct FortuneWheel.BetInfo[]\",\"name\":\"betInfos\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"_isVRFPending\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_roundLiveTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"linkAmount\",\"type\":\"uint256\"}],\"name\":\"getTokenAmountForLink\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"initializeEthBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"initializeTokenBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isStable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isVRFFulfilled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isVRFPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkPerBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"linkSpent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNonceLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxOutcome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"outcomeInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outcome\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"potAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundLiveTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setLinkPerBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMaxBet\",\"type\":\"uint256\"}],\"name\":\"setMaxBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMinBet\",\"type\":\"uint256\"}],\"name\":\"setMinBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outcome\",\"type\":\"uint256\"}],\"internalType\":\"struct FortuneWheel.OutcomeInfo[]\",\"name\":\"_infos\",\"type\":\"tuple[]\"}],\"name\":\"setOutcomeInfos\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setPotAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isStable\",\"type\":\"bool\"}],\"name\":\"setTokenStable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapProfitFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToCasino\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialMaxBet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialMinBet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"profit\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"lastSwapTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateRoundLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FortuneWheel", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "5", "ConstructorArguments": "000000000000000000000000e740da363a6960ef6c21b6e447dcd76b848516420000000000000000000000004d9927a8dc4432b93445da94e4084d292438931f00000000000000000000000030262cab106e2411b052ca83cd9aa51e23678bfb000000000000000000000000fb0232ecaf4f963af6874daa7d986e56fe0d0cc600000000000000000000000000000000000000000000000000000000000000aa0000000000000000000000000000000000000000000000000000000000018605000000000000000000000000000000000000000000000000000000000001866800000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000018669000000000000000000000000000000000000000000000000000000000001869a0000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000001869b000000000000000000000000000000000000000000000000000000000001869f00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000003e8", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}