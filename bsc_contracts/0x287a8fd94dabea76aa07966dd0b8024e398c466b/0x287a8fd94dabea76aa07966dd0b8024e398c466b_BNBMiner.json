{"SourceCode": "pragma solidity ^0.4.25;\r\n\r\ncontract BNBMiner {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant public interestRateDivisor = 1000000000000;\r\n    uint256 constant public devCommission = 10;\r\n    uint256 constant public commissionDivisor = 100;\r\n    uint256 constant public secRate = 385802; //DAILY 3.3%\r\n    uint256 public insuranceRate = 10;\r\n\r\n    uint256 public minDepositSize;\r\n    uint256 public releaseTime;\r\n    uint256 public totalPlayers;\r\n    uint256 public totalPayout;\r\n    uint256 public totalInvested;\r\n\r\n    uint256 public devPool;\r\n\r\n    address owner;\r\n    address insurance;\r\n\r\n    struct Player {\r\n        uint256 depositAmount;\r\n        uint256 time;\r\n        uint256 interestProfit;\r\n        uint256 affRewards;\r\n        uint256 payoutSum;\r\n        address affFrom;\r\n    }\r\n\r\n    mapping(address => Player) public players;\r\n    mapping(address => uint256[10]) public affSums;\r\n\r\n    uint256 [] affRate;\r\n\r\n    event NewDeposit(address indexed addr, uint256 amount);\r\n    event Withdraw(address indexed addr, uint256 amount);\r\n\r\n    constructor(uint256 _releaseTime, address _insurance, uint256 _minDeposit) public {\r\n      owner = msg.sender;\r\n      releaseTime = _releaseTime;\r\n      insurance = _insurance;\r\n      minDepositSize = _minDeposit;\r\n\r\n      affRate.push(5);\r\n      affRate.push(4);\r\n      affRate.push(3);\r\n      affRate.push(2);\r\n      affRate.push(2);\r\n      affRate.push(2);\r\n      affRate.push(2);\r\n      affRate.push(2);\r\n      affRate.push(2);\r\n      affRate.push(2);\r\n    }\r\n\r\n\r\n    function register(address _addr, address _affAddr) private{\r\n\r\n      Player storage player = players[_addr];\r\n\r\n      player.affFrom = _affAddr;\r\n\r\n      for(uint256 i = 0; i < affRate.length; i++){\r\n        affSums[_affAddr][i] = affSums[_affAddr][i].add(1);\r\n        _affAddr = players[_affAddr].affFrom;\r\n      }\r\n\r\n    }\r\n\r\n    function () external payable {\r\n\r\n    }\r\n\r\n    function deposit(address _affAddr) public payable {\r\n        require(now >= releaseTime, \"not time yet!\");\r\n        collect(msg.sender);\r\n        require(msg.value >= minDepositSize);\r\n\r\n\r\n        uint256 depositAmount = msg.value;\r\n\r\n        Player storage player = players[msg.sender];\r\n\r\n        if (player.time == 0) {\r\n            player.time = now;\r\n            totalPlayers++;\r\n            if(_affAddr != address(0) && players[_affAddr].depositAmount > 0){\r\n              register(msg.sender, _affAddr);\r\n            }\r\n            else{\r\n              register(msg.sender, owner);\r\n            }\r\n        }\r\n        player.depositAmount = player.depositAmount.add(depositAmount);\r\n\r\n        distributeRef(msg.value, player.affFrom);\r\n\r\n        totalInvested = totalInvested.add(depositAmount);\r\n        uint256 devEarn = depositAmount.mul(devCommission).div(commissionDivisor);\r\n        devPool = devPool.add(devEarn);\r\n\r\n        emit NewDeposit(msg.sender, msg.value);\r\n    }\r\n\r\n    function withdraw() public {\r\n        collect(msg.sender);\r\n        require(players[msg.sender].interestProfit > 0);\r\n\r\n        transferPayout(msg.sender, players[msg.sender].interestProfit);\r\n    }\r\n\r\n    function reinvest() public {\r\n      collect(msg.sender);\r\n      Player storage player = players[msg.sender];\r\n      uint256 depositAmount = player.interestProfit;\r\n      require(contractBalance() >= depositAmount);\r\n      player.interestProfit = 0;\r\n      player.depositAmount = player.depositAmount.add(depositAmount);\r\n    }\r\n\r\n\r\n    function collect(address _addr) private {\r\n        Player storage player = players[_addr];\r\n\r\n        uint256 secPassed = now.sub(player.time);\r\n        if (secPassed > 0 && player.time > 0) {\r\n            uint256 collectProfit = (player.depositAmount.mul(secPassed.mul(secRate))).div(interestRateDivisor);\r\n            player.interestProfit = player.interestProfit.add(collectProfit);\r\n            player.time = player.time.add(secPassed);\r\n        }\r\n    }\r\n\r\n    function transferPayout(address _receiver, uint256 _amount) private {\r\n        if (_amount > 0 && _receiver != address(0)) {\r\n            if (contractBalance() > 0) {\r\n                uint256 payout = _amount > contractBalance() ? contractBalance() : _amount;\r\n                totalPayout = totalPayout.add(payout);\r\n\r\n                Player storage player = players[_receiver];\r\n                player.payoutSum = player.payoutSum.add(payout);\r\n                player.interestProfit = player.interestProfit.sub(payout);\r\n\r\n                emit Withdraw(msg.sender, payout);\r\n\r\n                uint256 insuranceFee = payout.mul(insuranceRate).div(100); // 10%\r\n                payout = payout.sub(insuranceFee);\r\n                msg.sender.transfer(payout);\r\n                insurance.transfer(insuranceFee);\r\n            }\r\n        }\r\n    }\r\n\r\n    function distributeRef(uint256 _bnb, address _affFrom) private{\r\n\r\n        uint256 _allaff = (_bnb.mul(26)).div(100);\r\n        address affAddr = _affFrom;\r\n        for(uint i = 0; i < affRate.length; i++){\r\n          uint256 _affRewards = (_bnb.mul(affRate[i])).div(100);\r\n          _allaff = _allaff.sub(_affRewards);\r\n          players[affAddr].affRewards = _affRewards.add(players[affAddr].affRewards);\r\n          affAddr.transfer(_affRewards);\r\n          affAddr = players[affAddr].affFrom;\r\n        }\r\n\r\n        if(_allaff > 0 ){\r\n            owner.transfer(_allaff);\r\n        }\r\n    }\r\n\r\n    function getProfit(address _addr) public view returns (uint256) {\r\n      address playerAddress= _addr;\r\n      Player storage player = players[playerAddress];\r\n      if(player.time == 0){\r\n          return 0;\r\n      }\r\n\r\n      uint256 secPassed = now.sub(player.time);\r\n      if (secPassed > 0) {\r\n          uint256 collectProfit = (player.depositAmount.mul(secPassed.mul(secRate))).div(interestRateDivisor);\r\n      }\r\n      return collectProfit.add(player.interestProfit);\r\n    }\r\n\r\n    function getAffSums(address _addr) public view returns ( uint256[] memory data, uint256 totalAff) {\r\n      uint256[] memory _affSums = new uint256[](10);\r\n      uint256 total;\r\n      for(uint8 i = 0; i < 10; i++) {\r\n          _affSums[i] = affSums[_addr][i];\r\n          total = total.add(_affSums[i]);\r\n      }\r\n      return (_affSums, total);\r\n    }\r\n\r\n    function contractBalance() public view returns(uint256){\r\n        uint256 balance = address(this).balance;\r\n        balance = balance.sub(devPool);\r\n\r\n        return balance;\r\n    }\r\n\r\n    function claimDevIncome(address _addr, uint256 _amount) public returns(address to, uint256 value){\r\n      require(msg.sender == owner, \"unauthorized call\");\r\n      require(_amount <= devPool, \"invliad amount\");\r\n\r\n      if(address(this).balance < _amount){\r\n        _amount = address(this).balance;\r\n      }\r\n\r\n      devPool = devPool.sub(_amount);\r\n\r\n      _addr.transfer(_amount);\r\n\r\n      return(_addr, _amount);\r\n    }\r\n\r\n    function updateStarttime(uint256 _releaseTime) public returns(bool){\r\n      require(msg.sender == owner, \"unauthorized call\");\r\n      releaseTime = _releaseTime;\r\n      return true;\r\n    }\r\n\r\n    function updateInsuranceRate(uint256 _newRate) public returns(bool){\r\n      require(msg.sender == owner, \"unauthorized call\");\r\n      insuranceRate = _newRate;\r\n      return true;\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"invliad mul\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"invliad div\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"invliad sub\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"invliad +\");\r\n\r\n        return c;\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"devCommission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"updateInsuranceRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interestRateDivisor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPayout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minDepositSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commissionDivisor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claimDevIncome\",\"outputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"affSums\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"interestProfit\",\"type\":\"uint256\"},{\"name\":\"affRewards\",\"type\":\"uint256\"},{\"name\":\"payoutSum\",\"type\":\"uint256\"},{\"name\":\"affFrom\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"insuranceRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affAddr\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_releaseTime\",\"type\":\"uint256\"}],\"name\":\"updateStarttime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getAffSums\",\"outputs\":[{\"name\":\"data\",\"type\":\"uint256[]\"},{\"name\":\"totalAff\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_releaseTime\",\"type\":\"uint256\"},{\"name\":\"_insurance\",\"type\":\"address\"},{\"name\":\"_minDeposit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"}]", "ContractName": "BNBMiner", "CompilerVersion": "v0.4.25+commit.59dbf8f1", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000064719c600000000000000000000000003080ab14cfd0acbf759e60cf77b4c8e896aa1534000000000000000000000000000000000000000000000000002386f26fc10000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://a13fae06ef3964ae7f11480de835f3ad18e2289a993fec0563f3ed960ccbc8ef"}