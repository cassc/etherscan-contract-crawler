{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/dev/ArchlyLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\ninterface ArchlyPair {\\n    function metadata() external view returns (uint dec0, uint dec1, uint r0, uint r1, bool st, address t0, address t1);\\n}\\n\\ninterface ArchlyRouter {\\n    function pairFor(address tokenA, address tokenB, bool stable) external view returns (address pair);\\n}\\n\\ncontract ArchlyLibrary {\\n\\n    ArchlyRouter internal router = ArchlyRouter(0x0000000000000000000000000000000000000000);\\n\\n    constructor(address __router) {\\n        router = ArchlyRouter(__router);\\n    }\\n\\n    function _f(uint x0, uint y) internal pure returns (uint) {\\n        return x0*(y*y/1e18*y/1e18)/1e18+(x0*x0/1e18*x0/1e18)*y/1e18;\\n    }\\n\\n    function _d(uint x0, uint y) internal pure returns (uint) {\\n        return 3*x0*(y*y/1e18)/1e18+(x0*x0/1e18*x0/1e18);\\n    }\\n\\n    function _get_y(uint x0, uint xy, uint y) internal pure returns (uint) {\\n        for (uint i = 0; i < 255; i++) {\\n            uint y_prev = y;\\n            uint k = _f(x0, y);\\n            if (k < xy) {\\n                uint dy = (xy - k)*1e18/_d(x0, y);\\n                y = y + dy;\\n            } else {\\n                uint dy = (k - xy)*1e18/_d(x0, y);\\n                y = y - dy;\\n            }\\n            if (y > y_prev) {\\n                if (y - y_prev <= 1) {\\n                    return y;\\n                }\\n            } else {\\n                if (y_prev - y <= 1) {\\n                    return y;\\n                }\\n            }\\n        }\\n        return y;\\n    }\\n\\n    function getTradeDiff(uint amountIn, address tokenIn, address tokenOut, bool stable) external view returns (uint a, uint b) {\\n        (uint dec0, uint dec1, uint r0, uint r1, bool st, address t0,) = ArchlyPair(router.pairFor(tokenIn, tokenOut, stable)).metadata();\\n        uint sample = tokenIn == t0 ? r0*dec1/r1 : r1*dec0/r0;\\n        a = _getAmountOut(sample, tokenIn, r0, r1, t0, dec0, dec1, st) * 1e18 / sample;\\n        b = _getAmountOut(amountIn, tokenIn, r0, r1, t0, dec0, dec1, st) * 1e18 / amountIn;\\n    }\\n\\n    function getTradeDiff(uint amountIn, address tokenIn, address pair) external view returns (uint a, uint b) {\\n        (uint dec0, uint dec1, uint r0, uint r1, bool st, address t0,) = ArchlyPair(pair).metadata();\\n        uint sample = tokenIn == t0 ? r0*dec1/r1 : r1*dec0/r0;\\n        a = _getAmountOut(sample, tokenIn, r0, r1, t0, dec0, dec1, st) * 1e18 / sample;\\n        b = _getAmountOut(amountIn, tokenIn, r0, r1, t0, dec0, dec1, st) * 1e18 / amountIn;\\n    }\\n\\n    function getSample(address tokenIn, address tokenOut, bool stable) external view returns (uint) {\\n        (uint dec0, uint dec1, uint r0, uint r1, bool st, address t0,) = ArchlyPair(router.pairFor(tokenIn, tokenOut, stable)).metadata();\\n        uint sample = tokenIn == t0 ? r0*dec1/r1 : r1*dec0/r0;\\n        return _getAmountOut(sample, tokenIn, r0, r1, t0, dec0, dec1, st) * 1e18 / sample;\\n    }\\n\\n    function getMinimumValue(address tokenIn, address tokenOut, bool stable) external view returns (uint, uint, uint) {\\n        (uint dec0, uint dec1, uint r0, uint r1,, address t0,) = ArchlyPair(router.pairFor(tokenIn, tokenOut, stable)).metadata();\\n        uint sample = tokenIn == t0 ? r0*dec1/r1 : r1*dec0/r0;\\n        return (sample, r0, r1);\\n    }\\n\\n    function getAmountOut(uint amountIn, address tokenIn, address tokenOut, bool stable) external view returns (uint) {\\n        (uint dec0, uint dec1, uint r0, uint r1, bool st, address t0,) = ArchlyPair(router.pairFor(tokenIn, tokenOut, stable)).metadata();\\n        return _getAmountOut(amountIn, tokenIn, r0, r1, t0, dec0, dec1, st) * 1e18 / amountIn;\\n    }\\n\\n    function _getAmountOut(uint amountIn, address tokenIn, uint _reserve0, uint _reserve1, address token0, uint decimals0, uint decimals1, bool stable) internal pure returns (uint) {\\n        if (stable) {\\n            uint xy =  _k(_reserve0, _reserve1, stable, decimals0, decimals1);\\n            _reserve0 = _reserve0 * 1e18 / decimals0;\\n            _reserve1 = _reserve1 * 1e18 / decimals1;\\n            (uint reserveA, uint reserveB) = tokenIn == token0 ? (_reserve0, _reserve1) : (_reserve1, _reserve0);\\n            amountIn = tokenIn == token0 ? amountIn * 1e18 / decimals0 : amountIn * 1e18 / decimals1;\\n            uint y = reserveB - _get_y(amountIn+reserveA, xy, reserveB);\\n            return y * (tokenIn == token0 ? decimals1 : decimals0) / 1e18;\\n        } else {\\n            (uint reserveA, uint reserveB) = tokenIn == token0 ? (_reserve0, _reserve1) : (_reserve1, _reserve0);\\n            return amountIn * reserveB / (reserveA + amountIn);\\n        }\\n    }\\n\\n    function _k(uint x, uint y, bool stable, uint decimals0, uint decimals1) internal pure returns (uint) {\\n        if (stable) {\\n            uint _x = x * 1e18 / decimals0;\\n            uint _y = y * 1e18 / decimals1;\\n            uint _a = (_x * _y) / 1e18;\\n            uint _b = ((_x * _x) / 1e18 + (_y * _y) / 1e18);\\n            return _a * _b / 1e18;  // x3y+y3x >= k\\n        } else {\\n            return x * y; // xy >= k\\n        }\\n    }\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"name\":\"getMinimumValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"name\":\"getSample\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"name\":\"getTradeDiff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getTradeDiff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ArchlyLibrary", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "000000000000000000000000e8e2b714c57937e0b29c6abeaf00b52388cab598", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}