{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor(address newOwner) {\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) internal {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\nabstract contract Pausable is Context {\r\n    event Paused(address account);\r\n\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\ncontract BlueBerryWallet is Ownable, Pausable {\r\n    IERC20 public busd;\r\n    IERC20 public usdt;\r\n    IERC20 public usdc;\r\n\r\n    uint256 public totalTokensSold;\r\n\r\n    uint256 public startTime;\r\n\r\n    uint256 public endTime;\r\n\r\n    address public paymentWallet;\r\n\r\n    uint256 public referralPercentage;\r\n\r\n    address public developerWallet;\r\n\r\n    event SaleTimeSet(uint256 _start, uint256 _end, uint256 timestamp);\r\n    event NewDeposit(address indexed user, uint256 amount, uint256 timestamp);\r\n    event WithdrawReferralRewards(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 timestamp\r\n    );\r\n    event SaleTimeUpdated(\r\n        bytes32 indexed key,\r\n        uint256 prevValue,\r\n        uint256 newValue,\r\n        uint256 timestamp\r\n    );\r\n    event TokensBought(\r\n        address indexed user,\r\n        uint256 indexed amountPaid,\r\n        uint256 indexed purchaseToken,\r\n        uint256 timestamp\r\n    );\r\n    event WithdrawCapitals(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 timestamp\r\n    );\r\n    event TokensClaimed(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 timestamp\r\n    );\r\n    event SetPlan(\r\n        uint256 indexed apy,\r\n        uint256 indexed time,\r\n        uint256 minimumDeposit,\r\n        uint256 maximumDeposit,\r\n        bool paused\r\n    );\r\n\r\n    enum TokenType {\r\n        BUSD,\r\n        USDT,\r\n        BNB,\r\n        USDC\r\n    }\r\n\r\n    AggregatorV3Interface priceFeedBNBUSD;\r\n    AggregatorV3Interface priceFeedBUSDUSD;\r\n    AggregatorV3Interface priceFeedUSDTUSD;\r\n    AggregatorV3Interface priceFeedUSDCUSD;\r\n\r\n    constructor() Ownable(_msgSender()) {\r\n        initialize();\r\n    }\r\n\r\n    struct plans {\r\n        uint256 apy;\r\n        uint256 time;\r\n        uint256 minDeposit;\r\n        uint256 maxDeposit;\r\n        uint256 addPlanTimestamp;\r\n        bool paused;\r\n    }\r\n\r\n    struct user {\r\n        uint256 amount;\r\n        uint256 timestamp;\r\n        uint256 step;\r\n        uint256 depositTime;\r\n        TokenType tokenType;\r\n    }\r\n    mapping(address => user[]) public investment;\r\n    plans[] public plansData;\r\n\r\n    mapping(address => uint256) private _referralRewards;\r\n    mapping(address => bool) public checkReferral;\r\n\r\n    function removeId(uint256 indexnum) internal {\r\n        for (\r\n            uint256 i = indexnum;\r\n            i < investment[_msgSender()].length - 1;\r\n            i++\r\n        ) {\r\n            investment[_msgSender()][i] = investment[_msgSender()][i + 1];\r\n        }\r\n        investment[_msgSender()].pop();\r\n    }\r\n\r\n    function initialize() private {\r\n        priceFeedBNBUSD = AggregatorV3Interface(\r\n            0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE\r\n        );\r\n        priceFeedBUSDUSD = AggregatorV3Interface(\r\n            0xcBb98864Ef56E9042e7d2efef76141f15731B82f\r\n        );\r\n        priceFeedUSDTUSD = AggregatorV3Interface(\r\n            0xB97Ad0E74fa7d920791E90258A6E2085088b4320\r\n        );\r\n        priceFeedUSDCUSD = AggregatorV3Interface(\r\n            0x51597f405303C4377E36123cBc172b13269EA163\r\n        );\r\n\r\n        busd = IERC20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\r\n        usdt = IERC20(0x55d398326f99059fF775485246999027B3197955);\r\n        usdc = IERC20(0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d);\r\n        paymentWallet = owner();\r\n        developerWallet = owner();\r\n        referralPercentage = 5;\r\n        startTime = block.timestamp;\r\n        endTime = block.timestamp + 730 days;\r\n        plansData.push(\r\n            plans({\r\n                apy: 500,\r\n                time: 2629743,\r\n                minDeposit: 30000000000000000000,\r\n                maxDeposit: 5000000000000000000000,\r\n                paused: false,\r\n                addPlanTimestamp: block.timestamp\r\n            })\r\n        );\r\n        plansData.push(\r\n            plans({\r\n                apy: 800,\r\n                time: 5259486,\r\n                minDeposit: 40000000000000000000,\r\n                maxDeposit: 10000000000000000000000,\r\n                paused: false,\r\n                addPlanTimestamp: block.timestamp\r\n            })\r\n        );\r\n        plansData.push(\r\n            plans({\r\n                apy: 1000,\r\n                time: 7889229,\r\n                minDeposit: 50000000000000000000,\r\n                maxDeposit: 0,\r\n                paused: false,\r\n                addPlanTimestamp: block.timestamp\r\n            })\r\n        );\r\n        plansData.push(\r\n            plans({\r\n                apy: 1000,\r\n                time: 15778458,\r\n                minDeposit: 10000000000000000000000,\r\n                maxDeposit: 0,\r\n                paused: false,\r\n                addPlanTimestamp: block.timestamp\r\n            })\r\n        );\r\n        emit SaleTimeSet(startTime, endTime, block.timestamp);\r\n    }\r\n\r\n    function changePaymentWallet(address _newPaymentWallet) external onlyOwner {\r\n        require(_newPaymentWallet != address(0), \"address cannot be zero\");\r\n        require(\r\n            _newPaymentWallet != paymentWallet,\r\n            \"This address is already fixed\"\r\n        );\r\n        paymentWallet = _newPaymentWallet;\r\n    }\r\n\r\n    function changeDevWallet(address _newAdmin) external onlyOwner {\r\n        require(_newAdmin != address(0), \"address cannot be zero\");\r\n        require(_newAdmin != developerWallet, \"This address is already fixed\");\r\n        developerWallet = _newAdmin;\r\n    }\r\n\r\n    function setPlans(\r\n        uint256 _apy,\r\n        uint256 _time,\r\n        uint256 _minDeposit,\r\n        uint256 _maxDeposit,\r\n        bool _paused\r\n    ) external onlyAdmin {\r\n        require(_apy != 0 && _time != 0, \"Please set a valid APY and time\");\r\n        plansData.push(\r\n            plans({\r\n                apy: _apy,\r\n                time: _time,\r\n                minDeposit: _minDeposit,\r\n                maxDeposit: _maxDeposit,\r\n                paused: _paused,\r\n                addPlanTimestamp: block.timestamp\r\n            })\r\n        );\r\n        emit SetPlan(_apy, _time, _minDeposit, _maxDeposit, _paused);\r\n    }\r\n\r\n    function updateReferralPercentage(uint256 _newPercentage)\r\n        external\r\n        onlyOwner\r\n    {\r\n        referralPercentage = _newPercentage;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(\r\n            owner() == _msgSender() || developerWallet == _msgSender(),\r\n            \"Ownable: caller is not the owner or developer\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier checkSaleState(uint256 value, uint256 amount) {\r\n        require(\r\n            block.timestamp >= startTime && block.timestamp <= endTime,\r\n            \"Invalid time for buying\"\r\n        );\r\n        require(value > 0 || amount > 0, \"Invalid sale amount\");\r\n        _;\r\n    }\r\n\r\n    modifier checkPlans(uint256 step, uint256 amount) {\r\n        require(!plansData[step].paused, \"This plan is currently inactive\");\r\n        if (msg.value == 0) {\r\n            if (plansData[step].maxDeposit != 0) {\r\n                require(plansData[step].maxDeposit >= amount, \"Max Stake\");\r\n                require(plansData[step].minDeposit <= amount, \"Min Stake\");\r\n            } else {\r\n                require(\r\n                    plansData[step].minDeposit <= amount,\r\n                    \"Minimum Stake in premium plan\"\r\n                );\r\n            }\r\n        } else {\r\n            amount = (msg.value * getLatestPriceBNB()) / 1e8;\r\n            require(plansData[step].maxDeposit >= amount, \"Max Stake BNB\");\r\n            require(plansData[step].minDeposit <= amount, \"Min Stake BNB\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    function pausedPlan(uint256 _step) external onlyAdmin {\r\n        require(!plansData[_step].paused, \"Plan is already inactive\");\r\n        plansData[_step].paused = true;\r\n    }\r\n\r\n    function unpausedPlan(uint256 _step) external onlyAdmin {\r\n        require(plansData[_step].paused, \"Plan is already active\");\r\n        plansData[_step].paused = false;\r\n    }\r\n\r\n    function updatePlan(\r\n        uint256 step,\r\n        uint256 _apy,\r\n        uint256 _time,\r\n        uint256 _minDeposit,\r\n        uint256 _maxDeposit\r\n    ) external onlyAdmin {\r\n        require(step < plansData.length, \"Invalid step\");\r\n        if (_apy > 0) plansData[step].apy = _apy;\r\n        if (_time > 0) plansData[step].time = _time;\r\n        if (_minDeposit > 0) plansData[step].minDeposit = _minDeposit;\r\n        if (_maxDeposit > 0) plansData[step].maxDeposit = _maxDeposit;\r\n        plansData[step].paused = false;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(getContractBNBBalance() >= amount, \"Low balance\");\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"BNB Payment failed\");\r\n    }\r\n\r\n    function pause() external onlyAdmin returns (bool success) {\r\n        _pause();\r\n        return true;\r\n    }\r\n\r\n    function unpause() external onlyAdmin returns (bool success) {\r\n        _unpause();\r\n        return true;\r\n    }\r\n\r\n    function changeSaleTimes(uint256 _startTime, uint256 _endTime)\r\n        external\r\n        onlyAdmin\r\n    {\r\n        require(_startTime > 0 || _endTime > 0, \"Invalid parameters\");\r\n        if (_startTime > 0) {\r\n            require(block.timestamp < startTime, \"Sale already started\");\r\n            require(block.timestamp < _startTime, \"Sale time in past\");\r\n            uint256 prevValue = startTime;\r\n            startTime = _startTime;\r\n            emit SaleTimeUpdated(\r\n                bytes32(\"START\"),\r\n                prevValue,\r\n                _startTime,\r\n                block.timestamp\r\n            );\r\n        }\r\n\r\n        if (_endTime > 0) {\r\n            require(block.timestamp < endTime, \"Sale already ended\");\r\n            require(_endTime > startTime, \"Invalid endTime\");\r\n            uint256 prevValue = endTime;\r\n            endTime = _endTime;\r\n            emit SaleTimeUpdated(\r\n                bytes32(\"END\"),\r\n                prevValue,\r\n                _endTime,\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    function getContractBalancebusd() public view returns (uint256) {\r\n        return busd.balanceOf(address(this));\r\n    }\r\n\r\n    function getContractBalanceUsdt() public view returns (uint256) {\r\n        return usdt.balanceOf(address(this));\r\n    }\r\n\r\n    function getContractBalanceusdc() public view returns (uint256) {\r\n        return usdc.balanceOf(address(this));\r\n    }\r\n\r\n    function withdrawbusd() public onlyOwner {\r\n        require(getContractBalancebusd() > 0, \"contract balance is 0\");\r\n        busd.transfer(_msgSender(), getContractBalancebusd());\r\n    }\r\n\r\n    function withdrawTokens(address _token, uint256 _amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_token != address(0), \"token address is null\");\r\n        IERC20 newToken = IERC20(_token);\r\n        require(\r\n            _amount > 0 && newToken.balanceOf(address(this)) >= _amount,\r\n            \"Amount should not be zero or more than contract\"\r\n        );\r\n        newToken.transfer(_msgSender(), _amount);\r\n    }\r\n\r\n    function getContractBNBBalance() public view returns (uint256 BNB) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function withdrawBNB() public onlyOwner {\r\n        require(getContractBNBBalance() > 0, \"contract balance is ZERO\");\r\n        payable(owner()).transfer(getContractBNBBalance());\r\n    }\r\n\r\n    function getLatestPriceBNB() public view returns (uint256) {\r\n        (, int256 price, , , ) = priceFeedBNBUSD.latestRoundData();\r\n        return uint256(price);\r\n    }\r\n\r\n    function getLatestPriceBUSDUSD() public view returns (uint256) {\r\n        (, int256 price, , , ) = priceFeedBUSDUSD.latestRoundData();\r\n        return uint256(price);\r\n    }\r\n\r\n    function getLatestPriceUSDTUSD() public view returns (uint256) {\r\n        (, int256 price, , , ) = priceFeedUSDTUSD.latestRoundData();\r\n        return uint256(price);\r\n    }\r\n\r\n    function getLatestPriceUSDCUSD() public view returns (uint256) {\r\n        (, int256 price, , , ) = priceFeedUSDCUSD.latestRoundData();\r\n        return uint256(price);\r\n    }\r\n\r\n    function getTokenPriceUSD(address _token)\r\n        public\r\n        view\r\n        returns (uint256 usdPrice)\r\n    {\r\n        IERC20 newToken = IERC20(_token);\r\n        require(\r\n            newToken == busd || newToken == usdt || newToken == usdc,\r\n            \"unsupported token address\"\r\n        );\r\n        if (busd == newToken) {\r\n            usdPrice = getLatestPriceBUSDUSD();\r\n        } else if (usdc == newToken) {\r\n            usdPrice = getLatestPriceUSDCUSD();\r\n        } else {\r\n            usdPrice = getLatestPriceUSDTUSD();\r\n        }\r\n        return usdPrice;\r\n    }\r\n\r\n    function buyWithToken(\r\n        uint256 amount,\r\n        address _src,\r\n        address _get\r\n    ) external checkSaleState(0, amount) whenNotPaused {\r\n        IERC20 fromToken = IERC20(_src);\r\n        IERC20 getToken = IERC20(_get);\r\n        require(\r\n            fromToken == busd || fromToken == usdt || fromToken == usdc,\r\n            \"from token is unsupported\"\r\n        );\r\n        require(\r\n            getToken == busd || getToken == usdt || getToken == usdc,\r\n            \"get token is unsupported\"\r\n        );\r\n        uint256 fromUsdPrice = getTokenPriceUSD(_src);\r\n        uint256 toUsdPrice = getTokenPriceUSD(_get);\r\n        uint256 numberOfTokens = (fromUsdPrice * amount) / toUsdPrice;\r\n        require(numberOfTokens > 0, \"The amount should be grater\");\r\n        require(\r\n            numberOfTokens <= getToken.balanceOf(address(this)),\r\n            \"insufficient amount is in the contract.\"\r\n        );\r\n        uint256 ourAllowance = fromToken.allowance(_msgSender(), address(this));\r\n        require(amount <= ourAllowance, \"Make sure to add enough allowance\");\r\n        fromToken.transferFrom(_msgSender(), paymentWallet, amount);\r\n        getToken.transfer(_msgSender(), numberOfTokens);\r\n        totalTokensSold += numberOfTokens;\r\n        emit TokensBought(\r\n            _msgSender(),\r\n            amount,\r\n            numberOfTokens,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function buyWithBNB(address _token, uint256 amount)\r\n        external\r\n        payable\r\n        checkSaleState(msg.value, amount)\r\n        whenNotPaused\r\n    {\r\n        require(_token != address(0), \"null address\");\r\n        IERC20 newToken = IERC20(_token);\r\n        require(\r\n            newToken == busd || newToken == usdt || newToken == usdc,\r\n            \"unsupported token address\"\r\n        );\r\n        uint256 tokenUsdPrice = getTokenPriceUSD(_token);\r\n        uint256 bnbUsdPrice = getLatestPriceBNB();\r\n        uint256 numberOfTokens;\r\n        uint256 enteredAmount;\r\n        if (msg.value > 0) {\r\n            enteredAmount = msg.value;\r\n            numberOfTokens = (bnbUsdPrice / tokenUsdPrice) * enteredAmount;\r\n            require(numberOfTokens > 0, \"The amount should be grater\");\r\n            require(\r\n                numberOfTokens <= newToken.balanceOf(address(this)),\r\n                \"insufficient amount is in the contract.\"\r\n            );\r\n            sendValue(payable(paymentWallet), enteredAmount);\r\n            newToken.transfer(_msgSender(), numberOfTokens);\r\n            totalTokensSold += numberOfTokens;\r\n        } else {\r\n            enteredAmount = amount;\r\n            uint256 ourAllowance = newToken.allowance(\r\n                _msgSender(),\r\n                address(this)\r\n            );\r\n            require(\r\n                enteredAmount <= ourAllowance,\r\n                \"Make sure to add enough allowance\"\r\n            );\r\n            numberOfTokens = (tokenUsdPrice * enteredAmount) / bnbUsdPrice;\r\n            require(numberOfTokens > 0, \"The token amount should be grater\");\r\n            newToken.transferFrom(_msgSender(), paymentWallet, enteredAmount);\r\n            sendValue(payable(_msgSender()), numberOfTokens);\r\n        }\r\n        emit TokensBought(\r\n            _msgSender(),\r\n            enteredAmount,\r\n            numberOfTokens,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function invest(\r\n        TokenType tokenType,\r\n        uint256 _amount,\r\n        uint8 step,\r\n        address _referral\r\n    ) external payable checkPlans(step, _amount) whenNotPaused {\r\n        require(\r\n            TokenType.BUSD == tokenType ||\r\n                TokenType.USDT == tokenType ||\r\n                TokenType.BNB == tokenType ||\r\n                TokenType.USDC == tokenType,\r\n            \"Token type unsupported\"\r\n        );\r\n        require(step < plansData.length, \"Invalid step\");\r\n\r\n        if (TokenType.BUSD == tokenType) {\r\n            require(_amount > 0, \"please stake valid amount\");\r\n            uint256 ourAllowance = busd.allowance(_msgSender(), address(this));\r\n            require(\r\n                _amount <= ourAllowance,\r\n                \"Make sure to add enough allowance of busd\"\r\n            );\r\n            busd.transferFrom(_msgSender(), address(this), _amount);\r\n        } else if (TokenType.USDT == tokenType) {\r\n            require(_amount > 0, \"please stake valid amount\");\r\n            uint256 ourAllowance = usdt.allowance(_msgSender(), address(this));\r\n            require(\r\n                _amount <= ourAllowance,\r\n                \"Make sure to add enough allowance of usdt\"\r\n            );\r\n            usdt.transferFrom(_msgSender(), address(this), _amount);\r\n        } else if (TokenType.USDC == tokenType) {\r\n            require(_amount > 0, \"please stake valid amount\");\r\n            uint256 ourAllowance = usdc.allowance(_msgSender(), address(this));\r\n            require(\r\n                _amount <= ourAllowance,\r\n                \"Make sure to add enough allowance of usdc\"\r\n            );\r\n            usdc.transferFrom(_msgSender(), address(this), _amount);\r\n        } else {\r\n            require(msg.value > 0, \"Please provide a bnb value\");\r\n            require(\r\n                step == 0 || step == 1,\r\n                \"Invalid plan for selected currency\"\r\n            );\r\n            payable(address(this)).transfer(msg.value);\r\n        }\r\n        uint256 investAmount = TokenType.BNB == tokenType ? msg.value : _amount;\r\n        investment[_msgSender()].push(\r\n            user({\r\n                amount: investAmount,\r\n                timestamp: block.timestamp,\r\n                step: step,\r\n                depositTime: block.timestamp,\r\n                tokenType: tokenType\r\n            })\r\n        );\r\n        if (\r\n            !checkReferral[_msgSender()] &&\r\n            _referral != address(0) &&\r\n            _referral != _msgSender()\r\n        ) {\r\n            uint256 refferTax = (investAmount * referralPercentage) / 100;\r\n            _referralRewards[_referral] += refferTax;\r\n        }\r\n        checkReferral[_msgSender()] = true;\r\n        emit NewDeposit(_msgSender(), investAmount, block.timestamp);\r\n    }\r\n\r\n    modifier checkWithdrawTime(uint256 id) {\r\n        require(id < investment[_msgSender()].length, \"Invalid enter Id\");\r\n        user memory users = investment[_msgSender()][id];\r\n        require(\r\n            users.depositTime + plansData[users.step].time < block.timestamp,\r\n            \"Withdrawal time has not yet expired.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function withdrawCapital(uint256 id)\r\n        external\r\n        checkWithdrawTime(id)\r\n        whenNotPaused\r\n        returns (bool success)\r\n    {\r\n        user memory users = investment[_msgSender()][id];\r\n        require(id < investment[_msgSender()].length, \"Invalid enter Id\");\r\n        uint256 withdrawalAmount;\r\n        if (TokenType.BUSD == users.tokenType) {\r\n            (uint256 rewards1, , , ) = calculateReward(_msgSender(), id);\r\n            withdrawalAmount = users.amount + rewards1;\r\n            require(\r\n                withdrawalAmount <= getContractBalancebusd(),\r\n                \"Insufficient busd amount is in the contract\"\r\n            );\r\n            busd.transfer(_msgSender(), withdrawalAmount);\r\n        } else if (TokenType.USDT == users.tokenType) {\r\n            (, uint256 rewards2, , ) = calculateReward(_msgSender(), id);\r\n            withdrawalAmount = users.amount + rewards2;\r\n            require(\r\n                withdrawalAmount <= getContractBalanceUsdt(),\r\n                \"Insufficient usdt amount is in the contract\"\r\n            );\r\n            usdt.transfer(_msgSender(), withdrawalAmount);\r\n        } else if (TokenType.USDC == users.tokenType) {\r\n            (, , , uint256 rewards4) = calculateReward(_msgSender(), id);\r\n            withdrawalAmount = users.amount + rewards4;\r\n            require(\r\n                withdrawalAmount <= getContractBalanceusdc(),\r\n                \"Insufficient usdc amount is in the contract\"\r\n            );\r\n            usdc.transfer(_msgSender(), withdrawalAmount);\r\n        } else {\r\n            (, , uint256 rewards3, ) = calculateReward(_msgSender(), id);\r\n            withdrawalAmount = users.amount + rewards3;\r\n            require(\r\n                withdrawalAmount <= getContractBNBBalance(),\r\n                \"Insufficient bnb amount is in the contract\"\r\n            );\r\n            payable(msg.sender).transfer(withdrawalAmount);\r\n        }\r\n        emit WithdrawCapitals(_msgSender(), withdrawalAmount, block.timestamp);\r\n        removeId(id);\r\n        return true;\r\n    }\r\n\r\n    function withdrawRewards() external whenNotPaused returns (bool success) {\r\n        uint256 index = investment[_msgSender()].length;\r\n        require(index > 0, \"You have not deposited fund\");\r\n        uint256 rewards1;\r\n        uint256 rewards2;\r\n        uint256 rewards3;\r\n        uint256 rewards4;\r\n        for (uint256 i = 0; i < index; i++) {\r\n            user storage users = investment[_msgSender()][i];\r\n            (uint256 busdRewards, , , ) = calculateReward(_msgSender(), i);\r\n            (, uint256 usdtRewards, , ) = calculateReward(_msgSender(), i);\r\n            (, , uint256 bnbRewards, ) = calculateReward(_msgSender(), i);\r\n            (, , , uint256 usdcRewards) = calculateReward(_msgSender(), i);\r\n            rewards1 += busdRewards;\r\n            rewards2 += usdtRewards;\r\n            rewards3 += bnbRewards;\r\n            rewards4 += usdcRewards;\r\n            users.timestamp = block.timestamp;\r\n        }\r\n        require(\r\n            rewards1 > 0 || rewards2 > 0 || rewards3 > 0 || rewards4 > 0,\r\n            \"you have no rewards\"\r\n        );\r\n        if (rewards1 > 0) busd.transfer(_msgSender(), rewards1);\r\n        if (rewards2 > 0) usdt.transfer(_msgSender(), rewards2);\r\n        if (rewards4 > 0) usdc.transfer(_msgSender(), rewards4);\r\n        if (rewards3 > 0) sendValue(payable(_msgSender()), rewards3);\r\n\r\n        emit TokensClaimed(\r\n            _msgSender(),\r\n            (rewards1 + rewards2 + rewards3 + rewards4),\r\n            block.timestamp\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function calculateReward(address _user, uint256 id)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 busdRewards,\r\n            uint256 usdtRewards,\r\n            uint256 bnbRewards,\r\n            uint256 usdcRewards\r\n        )\r\n    {\r\n        require(id < investment[_user].length, \"Invalid Id\");\r\n        user memory users = investment[_user][id];\r\n        uint256 time = block.timestamp - users.timestamp;\r\n        uint256 DIVIDER = 10000;\r\n        if (users.tokenType == TokenType.BUSD) {\r\n            busdRewards =\r\n                (users.amount * plansData[users.step].apy * time) /\r\n                DIVIDER /\r\n                30.44 days;\r\n        } else if (users.tokenType == TokenType.USDT) {\r\n            usdtRewards =\r\n                (users.amount * plansData[users.step].apy * time) /\r\n                DIVIDER /\r\n                30.44 days;\r\n        } else if (users.tokenType == TokenType.USDC) {\r\n            usdcRewards =\r\n                (users.amount * plansData[users.step].apy * time) /\r\n                DIVIDER /\r\n                30.44 days;\r\n        } else {\r\n            bnbRewards =\r\n                (users.amount * plansData[users.step].apy * time) /\r\n                DIVIDER /\r\n                30.44 days;\r\n        }\r\n        return (busdRewards, usdtRewards, bnbRewards, usdcRewards);\r\n    }\r\n\r\n    function withdrawReferral() external whenNotPaused {\r\n        uint256 rewards = _referralRewards[_msgSender()];\r\n        require(rewards > 0, \"You do not have referral rewards.\");\r\n        busd.transfer(_msgSender(), rewards);\r\n        emit WithdrawReferralRewards(_msgSender(), rewards, block.timestamp);\r\n        _referralRewards[_msgSender()] = 0;\r\n    }\r\n\r\n    function userIndex(address _user) public view returns (uint256) {\r\n        return investment[_user].length;\r\n    }\r\n\r\n    function depositAddAmount(address _user)\r\n        public\r\n        view\r\n        returns (uint256 amount)\r\n    {\r\n        uint256 index = investment[_user].length;\r\n        for (uint256 i = 0; i < index; i++) {\r\n            user memory users = investment[_user][i];\r\n            amount += users.amount;\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function referralOf(address account) external view returns (uint256) {\r\n        return _referralRewards[account];\r\n    }\r\n\r\n    function numberOfPlans() public view returns (uint256) {\r\n        return plansData.length;\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SaleTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SaleTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maximumDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"SetPlan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purchaseToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrawCapitals\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrawReferralRewards\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"busd\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyWithBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_get\",\"type\":\"address\"}],\"name\":\"buyWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"busdRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bnbRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPaymentWallet\",\"type\":\"address\"}],\"name\":\"changePaymentWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"changeSaleTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"checkReferral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"depositAddAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBNBBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"BNB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalanceUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalancebusd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalanceusdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPriceBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPriceBUSDUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPriceUSDCUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPriceUSDTUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenPriceUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BlueBerryWallet.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"step\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"step\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"internalType\":\"enum BlueBerryWallet.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfPlans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_step\",\"type\":\"uint256\"}],\"name\":\"pausedPlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plansData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addPlanTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"referralOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDeposit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPlans\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_step\",\"type\":\"uint256\"}],\"name\":\"unpausedPlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"step\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDeposit\",\"type\":\"uint256\"}],\"name\":\"updatePlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPercentage\",\"type\":\"uint256\"}],\"name\":\"updateReferralPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdrawCapital\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawbusd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BlueBerryWallet", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://062e01e1568c6f15026912fb6f0c2c82b72d440668fe70d25e8a0f233b824d35"}