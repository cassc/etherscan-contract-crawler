{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >0.4.0 <= 0.9.0;\r\n\r\ninterface IBEP20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IPancakeRouter {\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Context {\r\n    constructor () {}\r\n\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor ()  {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract FIAirdrop is Ownable {\r\n    using SafeMath for uint256;\r\n    address private constant USDT = 0x55d398326f99059fF775485246999027B3197955;\r\n    address private constant BNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address private constant FI = 0xFc3DE2f2cf23ea273472CBA8F9463BFA519F6b04;\r\n    address private constant PancakeRouter = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n    mapping(address => mapping(address => uint256)) private account_token_value;\r\n    mapping(address => mapping(address => uint256)) private account_token_total;\r\n    address[2] private target_token = [USDT, BNB];\r\n    mapping(address => uint256) private take_time;\r\n    mapping(address => uint256) private mortgage_time;\r\n    mapping(uint256 => uint256) private day_total;\r\n    uint256 private current_day;\r\n    uint256 private last_total;\r\n    uint256 private time_step = 1 days;\r\n    uint256 private start_time = 1699718400;\r\n    uint256 private airdrop_total = 10000 * 1e18;\r\n    bool private is_over = false;\r\n\r\n    uint private unlocked = 1;\r\n    modifier lock() {\r\n        require(unlocked == 1, 'LOCKED');\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n\r\n    constructor(){\r\n\r\n    }\r\n\r\n    function support(address token) private view returns (bool) {\r\n        for (uint i = 0; i < target_token.length; i++) {\r\n            if (token == target_token[i]) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getSwapV2Out(address token, uint256 value) private view returns (uint256) {\r\n        IPancakeRouter router = IPancakeRouter(PancakeRouter);\r\n        address[] memory path = new address[](2);\r\n        path[0] = token;\r\n        path[1] = USDT;\r\n        return router.getAmountsOut(value, path)[1];\r\n    }\r\n\r\n    function getSwapUSDTValue(address token, uint256 value) private view returns (uint256) {\r\n        if (token == USDT) {\r\n            return value;\r\n        }\r\n        return getSwapV2Out(token, value);\r\n    }\r\n\r\n    function getValue(address account, address token, uint256 total) public view returns (uint256){\r\n        if (account_token_value[account][token] > 0) {\r\n            uint256 value = account_token_total[account][token];\r\n            return value.mul(airdrop_total).div(total);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function _sync() public {\r\n        uint256 day = getDays();\r\n        if (day > current_day) {\r\n            last_total = day_total[current_day];\r\n            current_day = day;\r\n            day_total[current_day] = last_total;\r\n        }\r\n    }\r\n\r\n    function _mortgage(address account, address token, uint256 value) private {\r\n        account_token_value[account][token] = account_token_value[account][token].add(value);\r\n\r\n        uint256 total = getSwapUSDTValue(token, value);\r\n        account_token_total[account][token] = account_token_total[account][token].add(total);\r\n        mortgage_time[account] = block.timestamp;\r\n        take_time[account] = getDays().mul(time_step).add(start_time);\r\n\r\n        day_total[current_day] = day_total[current_day].add(total);\r\n    }\r\n\r\n    function mortgage(address token, uint256 value) external payable lock {\r\n        require(!is_over, \"over\");\r\n        require(support(token), \"not support token\");\r\n        _sync();\r\n        if (token == BNB) {\r\n            require(msg.value > 0, \"BNB is zero\");\r\n            _mortgage(_msgSender(), token, msg.value);\r\n        } else {\r\n            require(value > 0, \"Token is zero\");\r\n            IBEP20 bep20 = IBEP20(token);\r\n            require(bep20.allowance(_msgSender(), address(this)) >= value, \"this token not approve\");\r\n            bep20.transferFrom(_msgSender(), address(this), value);\r\n            _mortgage(_msgSender(), token, value);\r\n        }\r\n    }\r\n\r\n    function _subtotal(uint256 total) private {\r\n        if (day_total[current_day] > total) {\r\n            day_total[current_day] = day_total[current_day].sub(total);\r\n        } else {\r\n            day_total[current_day] = 0;\r\n        }\r\n    }\r\n\r\n    function redeem(address token) external payable lock {\r\n        require(support(token), \"not support token\");\r\n        uint256 value = account_token_value[_msgSender()][token];\r\n        require(value > 0, \"not mortgage\");\r\n        account_token_value[_msgSender()][token] = 0;\r\n        if (token == BNB) {\r\n            payable(_msgSender()).transfer(value);\r\n        } else {\r\n            IBEP20(token).transfer(_msgSender(), value);\r\n        }\r\n        _sync();\r\n        uint256 total = account_token_total[_msgSender()][token];\r\n        account_token_total[_msgSender()][token] = 0;\r\n        _subtotal(total);\r\n    }\r\n\r\n    function take() external lock {\r\n        require(!is_over, \"over\");\r\n        uint256 t = block.timestamp - take_time[_msgSender()];\r\n        require(t > time_step, \"not take time\");\r\n        require(block.timestamp - mortgage_time[_msgSender()] >= time_step, \"mortgage not 24h\");\r\n        uint256 next_t = t.div(time_step).mul(time_step);\r\n        take_time[_msgSender()] = take_time[_msgSender()].add(next_t);\r\n        _sync();\r\n        uint256 value = 0;\r\n        for (uint i = 0; i < target_token.length; i++) {\r\n            uint256 _value = getValue(_msgSender(), target_token[i], last_total);\r\n            if (_value > 0) {\r\n                value = value.add(_value);\r\n            }\r\n        }\r\n        require(value > 0, \"value is zero\");\r\n        IBEP20(FI).transfer(_msgSender(), value);\r\n    }\r\n\r\n    function getTakeTime(address account) external view returns (uint256) {\r\n        return take_time[account];\r\n    }\r\n\r\n    function getTokenValue(address account, address token) external view returns (uint256) {\r\n        return account_token_value[account][token];\r\n    }\r\n\r\n    function getDays() public view returns (uint256) {\r\n        return (block.timestamp - start_time) / time_step;\r\n    }\r\n\r\n    function over() external onlyOwner {\r\n        is_over = true;\r\n    }\r\n\r\n    function reopen() external onlyOwner {\r\n        is_over = false;\r\n    }\r\n\r\n    function getCurrentDay() external view returns (uint256) {\r\n        return current_day;\r\n    }\r\n\r\n    function setAirdropTotal(uint256 total) external onlyOwner {\r\n        airdrop_total = total;\r\n    }\r\n\r\n    function getAirdropTotal() external view returns (uint256) {\r\n        return airdrop_total;\r\n    }\r\n\r\n    function setStartTime(uint256 time) external onlyOwner {\r\n        start_time = time;\r\n    }\r\n\r\n    function getStartTime() external view returns (uint256) {\r\n        return start_time;\r\n    }\r\n\r\n    function setTimeStep(uint256 step) external onlyOwner {\r\n        time_step = step;\r\n    }\r\n\r\n    function getTimeStep() external view returns (uint256) {\r\n        return time_step;\r\n    }\r\n\r\n    function getDayTotal(uint256 day) external view returns (uint256) {\r\n        return day_total[day];\r\n    }\r\n\r\n    function getAccountTotal(address account, address token) external view returns (uint256) {\r\n        return account_token_total[account][token];\r\n    }\r\n\r\n    function getLastTotal() external view returns (uint256) {\r\n        return last_total;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAccountTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAirdropTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"getDayTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"getValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mortgage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"over\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reopen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"setAirdropTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"step\",\"type\":\"uint256\"}],\"name\":\"setTimeStep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"take\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FIAirdrop", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f520c3435a214ef17d5b8dea1c7c55a91affc99a8257f9c4ba22ba6ded9ef1b2"}