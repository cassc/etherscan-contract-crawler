{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\ninterface IERC20 {\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\ncontract TokenSwapper {\r\n    address private constant PANCAKE_ROUTER = 0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F; // Replace with the actual PancakeSwap Router address\r\n    address private constant TOKEN_TO_SWAP = 0xdBf830A929133291D43EdC9546CbE7a934fb328d; // Replace with the address of the token you want to swap\r\n    address private constant TOKEN_TO_RECEIVE = 0xB8c77482e45F1F44dE1745F52C74426C631bDD52; // Replace with the address of the token you want to receive\r\n\r\n    IPancakeRouter01 private pancakeRouter;\r\n    IERC20 private token;\r\n\r\n    constructor() {\r\n        pancakeRouter = IPancakeRouter01(PANCAKE_ROUTER);\r\n        token = IERC20(TOKEN_TO_SWAP);\r\n\r\n        // Approve PancakeSwap Router to spend your tokens\r\n        token.approve(PANCAKE_ROUTER, type(uint256).max);\r\n    }\r\n\r\n    function swapTokens(uint256 amountIn, uint256 amountOutMin) external {\r\n        address[] memory path = new address[](2);\r\n        path[0] = TOKEN_TO_SWAP;\r\n        path[1] = TOKEN_TO_RECEIVE;\r\n\r\n        // Swap tokens\r\n        pancakeRouter.swapExactTokensForTokens(\r\n            amountIn,\r\n            amountOutMin,\r\n            path,\r\n            address(this),\r\n            block.timestamp + 1000 // Use appropriate deadline\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"swapTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenSwapper", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://038d14c057573c5c0776ed6a599aad324424686c4d79eec643458f7b86fe316e"}