{"SourceCode": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT OR Apache-2.0\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/IPancakeRouter01.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n}\r\n\r\n// File: contracts/IPancakeRouter02.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n// File: contracts/OutPool.sol\r\n\r\npragma solidity ^0.8.20; \r\n\r\n\r\n\r\ncontract OutPool is Ownable {\r\n    struct UserInfo {\r\n        uint256 currentStakeIndex;\r\n        uint256 purchasedAmount;\r\n        uint256 withdrawalAmount;\r\n        uint256 totalWithdrawn;\r\n        uint256 purchaseTime;\r\n        uint256 withdrawalTime;\r\n        uint256 emergencyWithdrawAmount;\r\n        uint256 emergencyWithdrawTime;\r\n        uint256 totalAdditionalPurchases;\r\n        uint256 lastAdditionalPurchaseTime;\r\n        Stake[] stakes;\r\n    }\r\n\r\n    struct Stake {\r\n        uint256 lockupPeriodId;\r\n        uint256 stakeIndex;\r\n        uint256 purchaseTime;\r\n        uint256 amount;\r\n        uint256 additionalAmount;\r\n        uint256 lastAddedTime;\r\n    }\r\n\r\n    struct LockupPeriod {\r\n        uint256 id;\r\n        uint256 timeInSeconds;\r\n        uint256 rewardRate;\r\n    }\r\n\r\n    Contributor[] public contributors;\r\n\r\n    struct Contributor {\r\n        address payable contributorAddress;\r\n        uint256 rewardPercentage; \r\n    }\r\n\r\n    struct RewardData {\r\n        uint256 totalAccumulated;\r\n        mapping(address => uint256) claimedRewards;\r\n    }\r\n\r\n    RewardData private rewardData;\r\n\r\n    uint256 public purchaseLimit;\r\n    uint256 public rewardPercentage;\r\n    uint256 public additionalPurchaseLimitInBNB;\r\n    uint256 public totalPurchased;\r\n    uint256 public totalPurchaseLimit;\r\n\r\n    IERC20 public token;\r\n\r\n    constructor(address _tokenAddress, uint256 _purchaseLimit, address _routerAddress) Ownable(msg.sender) {\r\n        token = IERC20(_tokenAddress);\r\n        purchaseLimit = _purchaseLimit;\r\n        pancakeRouter = IPancakeRouter02(_routerAddress);\r\n    }\r\n\r\n    IPancakeRouter02 public pancakeRouter;\r\n\r\n    mapping(address => UserInfo) public userInfo;\r\n    mapping(uint256 => LockupPeriod) public lockupPeriods;\r\n    mapping(address => uint256) public pendingRewards;\r\n\r\n    event LiquidityAdded(uint256 amount);\r\n    event LiquidityReclaimed(uint256 amount, uint256 remainingLiquidity);\r\n    \r\n    function addLiquidity(uint256 tokenAmount) public onlyOwner {\r\n        require(tokenAmount > 0, \"Token amount must be greater than zero.\");\r\n        require(token.transferFrom(msg.sender, address(this), tokenAmount), \"Token transfer failed.\");\r\n\r\n        emit LiquidityAdded(tokenAmount);\r\n    }\r\n    function getTotalLiquidity() public view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function setTotalPurchaseLimit(uint256 _limit) public onlyOwner {\r\n        totalPurchaseLimit = _limit;\r\n    }\r\n\r\n    function setContributors(Contributor[] memory newContributors) public onlyOwner {\r\n        delete contributors;\r\n        for (uint i = 0; i < newContributors.length; i++) {\r\n            contributors.push(newContributors[i]);\r\n        }\r\n    }\r\n\r\n    function addLockupPeriod(uint256 _id, uint256 timeInSeconds, uint256 rewardRate) public onlyOwner {\r\n        lockupPeriods[_id] = LockupPeriod({\r\n            id: _id,\r\n            timeInSeconds: timeInSeconds,\r\n            rewardRate: rewardRate\r\n        });\r\n    }\r\n\r\n    function reclaimLiquidity(uint256 amount) public onlyOwner {\r\n        uint256 currentLiquidity = getTotalLiquidity();\r\n        require(amount <= currentLiquidity, \"Quantity exceeds available liquidity.\");\r\n                require(token.transfer(owner(), amount), \"Token transfer failed.\");\r\n\r\n        emit LiquidityReclaimed(amount, currentLiquidity - amount);\r\n    }\r\n\r\n    event Purchase(address indexed user, address token, uint256 amount);\r\n\r\n    function callStake(uint256 lockupPeriodId, uint256 slippageTolerance) public payable {\r\n        if (msg.sender != owner()) {\r\n            require(!circuitBreaker, \"Purchases are currently paused.\");\r\n        }\r\n        require(!frozenAccounts[msg.sender], \"Account is frozen.\");\r\n        require(msg.value > 0, \"Need to send BNB\");\r\n        require(lockupPeriods[lockupPeriodId].timeInSeconds > 0, \"Invalid lockup period\");\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = pancakeRouter.WETH();\r\n        path[1] = address(token);\r\n\r\n        uint deadline = block.timestamp + 15;\r\n        uint[] memory amounts = pancakeRouter.getAmountsOut(msg.value, path);\r\n        uint256 tokensEquivalent = amounts[1];\r\n        LockupPeriod memory selectedLockupPeriod = lockupPeriods[lockupPeriodId];\r\n        uint256 rewardForPurchase = (tokensEquivalent * selectedLockupPeriod.rewardRate) / 100;\r\n        uint256 totalRequirement = tokensEquivalent + rewardForPurchase;\r\n        require(token.balanceOf(address(this)) >= totalRequirement, \"Purchase exceeds available liquidity with rewards.\");\r\n\r\n        uint amountOutMin = amounts[1] * (100 - slippageTolerance) / 100;\r\n\r\n        pancakeRouter.swapExactETHForTokens{value: msg.value}(\r\n            amountOutMin,\r\n            path,\r\n            address(this),\r\n            deadline\r\n        );\r\n\r\n        uint256 tokensBought = amounts[1];\r\n        require(totalPurchased + tokensBought <= totalPurchaseLimit, \"Total purchase limit exceeded\");\r\n\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        user.purchasedAmount += tokensBought; \r\n        user.purchaseTime = block.timestamp;\r\n        totalPurchased += tokensBought;\r\n\r\n        user.stakes.push(Stake({\r\n            lockupPeriodId: lockupPeriodId,\r\n            stakeIndex: user.stakes.length,\r\n            purchaseTime: block.timestamp,\r\n            amount: tokensBought,\r\n            additionalAmount: 0, \r\n            lastAddedTime: 0   \r\n        }));\r\n\r\n        user.currentStakeIndex = user.stakes.length - 1;\r\n\r\n        if (contributors.length > 0) {\r\n            for (uint i = 0; i < contributors.length; i++) {\r\n                uint256 rewardAmount = (tokensBought * contributors[i].rewardPercentage) / 10000;\r\n                pendingRewards[contributors[i].contributorAddress] += rewardAmount;\r\n            }\r\n        }\r\n\r\n        emit Purchase(msg.sender, address(token), tokensBought);\r\n    }\r\n\r\n    function claimRewardsForContributors(address[] calldata contributorAddresses) public onlyOwner {\r\n        for (uint256 i = 0; i < contributorAddresses.length; i++) {\r\n            address contributor = contributorAddresses[i];\r\n            uint256 rewardAmount = getRewardAmount(contributor);\r\n            if (rewardAmount > 0) {\r\n                rewardData.claimedRewards[contributor] += rewardAmount;\r\n                require(token.transfer(contributor, rewardAmount), \"Reward transfer failed\");\r\n            }\r\n        }\r\n    }\r\n    function accumulateReward(uint256 amount) private {\r\n        rewardData.totalAccumulated += amount;\r\n        for (uint i = 0; i < contributors.length; i++) {\r\n            uint256 contributorShare = (amount * contributors[i].rewardPercentage) / 10000;\r\n            pendingRewards[contributors[i].contributorAddress] += contributorShare;\r\n        }\r\n    }\r\n\r\n    function claimRewards() public {\r\n        uint256 rewardAmount = pendingRewards[msg.sender];\r\n        require(rewardAmount > 0, \"No rewards to claim\");\r\n        pendingRewards[msg.sender] = 0;\r\n        require(token.transfer(msg.sender, rewardAmount), \"Reward transfer failed\");\r\n    }\r\n    \r\n    function getRewardAmount(address contributorAddress) public view returns (uint256) {\r\n        uint256 totalRewardAmount = rewardData.totalAccumulated;\r\n        uint256 claimed = rewardData.claimedRewards[contributorAddress];\r\n\r\n        for (uint i = 0; i < contributors.length; i++) {\r\n            if (contributors[i].contributorAddress == contributorAddress) {\r\n                uint256 contributorRewardPercentage = contributors[i].rewardPercentage;\r\n                uint256 rewardAmount = (totalRewardAmount * contributorRewardPercentage) / 10000 - claimed;\r\n                return rewardAmount;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function withdraw(uint256 stakeIndex) public {\r\n        require(stakeIndex < userInfo[msg.sender].stakes.length, \"Invalid stake index.\");\r\n\r\n        Stake storage stake = userInfo[msg.sender].stakes[stakeIndex];\r\n        require(stake.amount > 0, \"Stake already withdrawn or non-existent.\");\r\n        uint256 lockupTime = lockupPeriods[stake.lockupPeriodId].timeInSeconds;\r\n        uint256 startTime = stake.lastAddedTime > 0 ? stake.lastAddedTime : stake.purchaseTime;\r\n        require(block.timestamp >= startTime + lockupTime, \"Lockup period not yet elapsed.\");\r\n\r\n        uint256 reward = (stake.amount * lockupPeriods[stake.lockupPeriodId].rewardRate) / 100;\r\n        uint256 totalAmount = stake.amount + reward;\r\n        require(token.balanceOf(address(this)) >= totalAmount, \"Insufficient contract balance for rewards.\");\r\n\r\n        require(token.transfer(msg.sender, totalAmount), \"Token transfer failed.\");\r\n\r\n        userInfo[msg.sender].totalWithdrawn += totalAmount;\r\n        userInfo[msg.sender].stakes[stakeIndex].amount = 0;\r\n    }\r\n\r\n    function emergencyWithdraw(uint256 stakeIndex) public {\r\n        require(stakeIndex < userInfo[msg.sender].stakes.length, \"Invalid stake index.\");\r\n\r\n        Stake storage stake = userInfo[msg.sender].stakes[stakeIndex];\r\n        require(stake.amount > 0, \"No funds to withdraw or already withdrawn.\");\r\n        uint256 lockupTime = lockupPeriods[stake.lockupPeriodId].timeInSeconds;\r\n        require(block.timestamp < stake.purchaseTime + lockupTime, \"Lockup period already elapsed.\");\r\n        require(token.transfer(msg.sender, stake.amount), \"Token transfer failed.\");\r\n\r\n        userInfo[msg.sender].emergencyWithdrawAmount += stake.amount;\r\n        userInfo[msg.sender].emergencyWithdrawTime = block.timestamp;\r\n        userInfo[msg.sender].totalWithdrawn += stake.amount;\r\n        stake.amount = 0; \r\n    }\r\n\r\n    function addFundsToStake(uint256 stakeIndex, uint256 lockupPeriodId) public payable {\r\n        require(msg.value <= additionalPurchaseLimitInBNB, \"Additional purchase exceeds limit in BNB.\");\r\n        require(msg.value > 0, \"Amount must be greater than zero.\");\r\n        require(stakeIndex < userInfo[msg.sender].stakes.length, \"Invalid stake index.\");\r\n        Stake storage stake = userInfo[msg.sender].stakes[stakeIndex];\r\n        require(stake.amount > 0, \"Stake does not exist or already withdrawn.\");\r\n        require(lockupPeriods[lockupPeriodId].timeInSeconds > 0, \"Invalid lockup period.\");\r\n\r\n        uint256 lockupEndTime = stake.purchaseTime + lockupPeriods[stake.lockupPeriodId].timeInSeconds;\r\n        require(block.timestamp < lockupEndTime, \"Lockup period already elapsed.\");\r\n\r\n        uint256 initialBalance = token.balanceOf(address(this));\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = pancakeRouter.WETH();\r\n        path[1] = address(token);\r\n\r\n        uint256 hardcodedSlippageTolerance = 12; \r\n        uint256 hardcodedDeadline = 15 minutes;\r\n\r\n        uint[] memory amounts = pancakeRouter.getAmountsOut(msg.value, path);\r\n        uint256 amountOutMin = amounts[1] * (100 - hardcodedSlippageTolerance) / 100;\r\n\r\n        pancakeRouter.swapExactETHForTokens{value: msg.value}(\r\n            amountOutMin,\r\n            path,\r\n            address(this),\r\n            block.timestamp + hardcodedDeadline\r\n        );\r\n\r\n        uint256 elapsed = block.timestamp - stake.purchaseTime;\r\n        uint256 accumulatedReward = (stake.amount * lockupPeriods[stake.lockupPeriodId].rewardRate * elapsed) / (lockupPeriods[stake.lockupPeriodId].timeInSeconds * 100);\r\n\r\n        uint256 tokensBought = token.balanceOf(address(this)) - initialBalance;\r\n\r\n        uint256 newStakeAmount = stake.amount + accumulatedReward + tokensBought;\r\n\r\n        stake.amount = newStakeAmount;\r\n\r\n        require(totalPurchased + tokensBought <= totalPurchaseLimit, \"Total purchase limit exceeded\");\r\n\r\n        totalPurchased += tokensBought;\r\n\r\n        LockupPeriod memory selectedLockupPeriod = lockupPeriods[lockupPeriodId];\r\n        uint256 rewardForAdditionalPurchase = (tokensBought * selectedLockupPeriod.rewardRate) / 100;\r\n\r\n        require(token.balanceOf(address(this)) >= newStakeAmount + rewardForAdditionalPurchase, \"Purchase and rewards exceed available liquidity.\");\r\n\r\n        if (contributors.length > 0) {\r\n            for (uint i = 0; i < contributors.length; i++) {\r\n                uint256 rewardAmount = (tokensBought * contributors[i].rewardPercentage) / 10000;\r\n                pendingRewards[contributors[i].contributorAddress] += rewardAmount;\r\n            }\r\n        }\r\n\r\n        userInfo[msg.sender].totalAdditionalPurchases += tokensBought;\r\n        userInfo[msg.sender].lastAdditionalPurchaseTime = block.timestamp;\r\n\r\n        stake.lastAddedTime = block.timestamp;\r\n        stake.additionalAmount += tokensBought;\r\n        stake.lockupPeriodId = lockupPeriodId;\r\n    }\r\n\r\n    function setAdditionalPurchaseLimitInBNB(uint256 _limitInBNB) public onlyOwner {\r\n        additionalPurchaseLimitInBNB = _limitInBNB;\r\n    }\r\n\r\n    function getRemainingLockupTime(address userAddress, uint256 stakeIndex) public view returns (uint256) {\r\n        require(stakeIndex < userInfo[userAddress].stakes.length, \"Invalid stake index.\");\r\n        Stake storage stake = userInfo[userAddress].stakes[stakeIndex];\r\n\r\n        uint256 lockupDuration = lockupPeriods[stake.lockupPeriodId].timeInSeconds;\r\n        uint256 startTime = stake.lastAddedTime > 0 ? stake.lastAddedTime : stake.purchaseTime;\r\n        uint256 endTime = startTime + lockupDuration;\r\n\r\n        if (block.timestamp >= endTime) {\r\n            return 0; \r\n        } else {\r\n            return endTime - block.timestamp; \r\n        }\r\n    }\r\n\r\n    bool public circuitBreaker;\r\n\r\n    function setBreaker(bool _state) public onlyOwner {\r\n        circuitBreaker = _state;\r\n    }\r\n\r\n    mapping(address => bool) private frozenAccounts;\r\n\r\n    event AccountFrozen(address indexed user);\r\n    event AccountUnfrozen(address indexed user);\r\n\r\n    function freezeWallet(address user) public onlyOwner {\r\n        require(user != address(this), \"Cannot freeze the contract address.\");\r\n        require(user != owner(), \"Cannot freeze the owner's address.\");\r\n        require(!frozenAccounts[user], \"Account is already frozen.\");\r\n        frozenAccounts[user] = true;\r\n        emit AccountFrozen(user);\r\n    }\r\n\r\n    function unfreezeWallet(address user) public onlyOwner {\r\n        require(user != address(this), \"The contract address should not be considered.\");\r\n        require(user != owner(), \"The owner's address should not be considered.\");\r\n        require(frozenAccounts[user], \"Account is already unfrozen.\");\r\n        frozenAccounts[user] = false;\r\n        emit AccountUnfrozen(user);\r\n    }\r\n\r\n    function getStakeAmount(address userAddress, uint256 stakeIndex) public view returns (uint256) {\r\n        require(stakeIndex < userInfo[userAddress].stakes.length, \"Invalid stake index.\");\r\n\r\n        Stake storage stake = userInfo[userAddress].stakes[stakeIndex];\r\n        return stake.amount + stake.additionalAmount;\r\n    }\r\n\r\n    function getAccumulatedReward(address userAddress, uint256 stakeIndex) public view returns (uint256) {\r\n        require(stakeIndex < userInfo[userAddress].stakes.length, \"Invalid stake index.\");\r\n\r\n        Stake storage stake = userInfo[userAddress].stakes[stakeIndex];\r\n        LockupPeriod storage lockupPeriod = lockupPeriods[stake.lockupPeriodId];\r\n\r\n        uint256 lastInteractionTime = stake.lastAddedTime > 0 ? stake.lastAddedTime : stake.purchaseTime;\r\n        uint256 elapsedTime = block.timestamp > lastInteractionTime ? block.timestamp - lastInteractionTime : 0;\r\n\r\n        uint256 initialReward = (stake.amount * lockupPeriod.rewardRate * elapsedTime) / (lockupPeriod.timeInSeconds * 100);\r\n\r\n        uint256 additionalReward = (stake.additionalAmount * lockupPeriod.rewardRate * elapsedTime) / (lockupPeriod.timeInSeconds * 100);\r\n\r\n        return initialReward + additionalReward;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_purchaseLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AccountFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AccountUnfrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingLiquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityReclaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupPeriodId\",\"type\":\"uint256\"}],\"name\":\"addFundsToStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeInSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"}],\"name\":\"addLockupPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"additionalPurchaseLimitInBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockupPeriodId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageTolerance\",\"type\":\"uint256\"}],\"name\":\"callStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circuitBreaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"contributorAddresses\",\"type\":\"address[]\"}],\"name\":\"claimRewardsForContributors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributors\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"contributorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardPercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"freezeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"getAccumulatedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"getRemainingLockupTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributorAddress\",\"type\":\"address\"}],\"name\":\"getRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"getStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockupPeriods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeInSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reclaimLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limitInBNB\",\"type\":\"uint256\"}],\"name\":\"setAdditionalPurchaseLimitInBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setBreaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"contributorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardPercentage\",\"type\":\"uint256\"}],\"internalType\":\"struct OutPool.Contributor[]\",\"name\":\"newContributors\",\"type\":\"tuple[]\"}],\"name\":\"setContributors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setTotalPurchaseLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPurchaseLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPurchased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"unfreezeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentStakeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchasedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emergencyWithdrawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emergencyWithdrawTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAdditionalPurchases\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAdditionalPurchaseTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OutPool", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "0000000000000000000000009f7f4ddbcac23db5280d4aab83a28c5c3eff535e000000000000000000000000000000000000000000084595161401484a00000000000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e", "EVMVersion": "london", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cd09a500ce80a93acbd822ed4c0f930b8a127d9eb5927d560da8a4b15a859f32"}