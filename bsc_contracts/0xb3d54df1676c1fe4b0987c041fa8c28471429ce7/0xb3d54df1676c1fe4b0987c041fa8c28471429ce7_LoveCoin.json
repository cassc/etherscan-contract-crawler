{"SourceCode": "{\"BEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./IBEP20.sol\\\";\\nimport \\\"./IBEP20Metadata.sol\\\";\\n\\ncontract BEP20 is Context, IBEP20, IBEP20Metadata {\\n    mapping(address =\\u003e uint) private _balances;\\n    mapping(address =\\u003e mapping(address =\\u003e uint)) private _allowances;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint private _totalSupply;\\n\\n    constructor(string memory tokenName, string memory tokenSymbol) {\\n        _name = tokenName;\\n        _symbol = tokenSymbol;\\n    }\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    function totalSupply() public view virtual override returns (uint) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view virtual override returns (uint) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view virtual override returns (uint) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance \\u003e= amount, \\\"BEP20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        uint currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance \\u003e= subtractedValue, \\\"BEP20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"BEP20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"BEP20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint senderBalance = _balances[sender];\\n        require(senderBalance \\u003e= amount, \\\"BEP20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"BEP20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"BEP20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function burn(uint amount) public {\\n        address account = _msgSender();\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint accountBalance = _balances[account];\\n        require(accountBalance \\u003e= amount, \\\"BEP20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply = _totalSupply - amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _mint(address account, uint amount) internal virtual {\\n        require(account != address(0), \\\"BEP20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint amount\\n    ) internal virtual {}\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"IBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IBEP20 {\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint value);\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\"},\"IBEP20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"./IBEP20.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\ninterface IBEP20Metadata is IBEP20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\"},\"LoveCoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BEP20.sol\\\";\\n\\n/*\\n        @@@@@@           @@@@@@\\n      @@@@@@@@@@       @@@@@@@@@@\\n    @@@@@@@@@@@@@@   @@@@@@@@@@@@@@\\n  @@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@\\n @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n      @@@@@@@@@@@@@@@@@@@@@@@@@@@\\n        @@@@@@@@@@@@@@@@@@@@@@@\\n          @@@@@@@@@@@@@@@@@@@\\n            @@@@@@@@@@@@@@@\\n              @@@@@@@@@@@\\n                @@@@@@@\\n                  @@@\\n*/\\ncontract LoveCoin is BEP20 {\\n    uint8 private constant DECIMALS = 8;\\n    uint public constant _totalSupply = 500000000000000 * 10**uint(DECIMALS);\\n    uint constant HALF_LIFE = 120 days;\\n    uint constant STARTING_SUPPLY = _totalSupply / 10;\\n    uint private _lockedCoins = _totalSupply - STARTING_SUPPLY;\\n    uint private _releasedCoins = STARTING_SUPPLY;\\n    uint private _releaseDate;\\n    uint private _lastReleasePeriod;\\n\\n    address private _admin;\\n    address private _newAdmin;\\n    uint private _maxAirdrop = 10_000_000 * 10**DECIMALS;\\n\\n    constructor() BEP20(\\\"Lovecoin Token\\\", \\\"Lovecoin\\\") {\\n        _admin = msg.sender;\\n        _newAdmin = msg.sender;\\n        _releaseDate = block.timestamp;\\n    }\\n\\n    function totalSupply() public view virtual override returns (uint) {\\n        return _totalSupply - _lockedCoins;\\n    }\\n\\n    function maxSupply() public pure returns (uint) {\\n        return _totalSupply;\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return DECIMALS;\\n    }\\n\\n    function editMaxAirdrop(uint newMax) public {\\n        require(msg.sender == _admin, \\\"Admin address required.\\\");\\n        _maxAirdrop = newMax * 10**DECIMALS;\\n    }\\n\\n    function editAdmin(address newAdmin) public {\\n        require(msg.sender == _admin, \\\"Admin address required.\\\");\\n        _newAdmin = newAdmin;\\n    }\\n\\n    function claimAdmin() public {\\n        require(msg.sender == _newAdmin, \\\"This address does not have the rights to claim the Admin position.\\\");\\n        _admin = _newAdmin;\\n    }\\n\\n    function airdrop(address[] memory addresses, uint[] memory amounts) public {\\n        require(msg.sender == _admin, \\\"Admin address required.\\\");\\n        require(\\n            addresses.length == amounts.length,\\n            \\\"Addresses and amounts arrays do not match in length.\\\"\\n        );\\n        for (uint i = 0; i \\u003c addresses.length; i++) {\\n            _airdrop(addresses[i], amounts[i] * 10**DECIMALS);\\n        }\\n    }\\n\\n    function _airdrop(address recipient, uint amount) internal returns (bool) {\\n        require(amount \\u003c= _maxAirdrop, \\\"Amount exceeds airdrop limit.\\\");\\n        require(amount \\u003c= _releasedCoins, \\\"Airdrop supply cannot cover the amount requested.\\\");\\n        _releasedCoins -= amount;\\n        _mint(recipient, amount);\\n        return true;\\n    }\\n\\n    //Tokens will be emitted at a rate of half the remaining supply every 4 months.\\n    function releaseCoins() public {\\n        require(msg.sender == _admin, \\\"Admin address required.\\\");\\n        uint currentPeriod = (block.timestamp - _releaseDate) / HALF_LIFE;\\n        require(currentPeriod \\u003e _lastReleasePeriod, \\\"Already released coins this period.\\\");\\n\\n        uint toRelease;\\n        uint periodsToRelease = currentPeriod - _lastReleasePeriod;\\n        for (uint i = 0; i \\u003c periodsToRelease; i++) {\\n            toRelease += (_lockedCoins - toRelease) / 2;\\n        }\\n\\n        _lockedCoins -= toRelease;\\n        _releasedCoins += toRelease;\\n        _lastReleasePeriod = currentPeriod;\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"editAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"editMaxAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseCoins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LoveCoin", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://272c5b0d0cc485be349a5d1e87c921bc292a987cf115edd7884ff0909f42994c"}