{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender,address recipient,uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner,address indexed spender,uint256 value);\r\n}\r\n\r\ninterface IMLMUser {\r\n    function getUserRegistered(address account) external view returns (bool);\r\n    function getUserUpline(address account,uint256 level) external view returns (address[] memory);\r\n    function register(address referree,address referral) external returns (bool);\r\n    function pushUserReferreeWithPermit(address referree,address referral,uint256 level) external returns (bool);\r\n}\r\n\r\ncontract permission {\r\n\r\n    address private _owner;\r\n    mapping(address => mapping(string => bytes32)) private _permit;\r\n\r\n    modifier forRole(string memory str) {\r\n        require(checkpermit(msg.sender,str),\"Permit Revert!\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        newpermit(msg.sender,\"owner\");\r\n        newpermit(msg.sender,\"permit\");\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function owner() public view returns (address) { return _owner; }\r\n    function newpermit(address adr,string memory str) internal { _permit[adr][str] = bytes32(keccak256(abi.encode(adr,str))); }\r\n    function clearpermit(address adr,string memory str) internal { _permit[adr][str] = bytes32(keccak256(abi.encode(\"null\"))); }\r\n    function checkpermit(address adr,string memory str) public view returns (bool) {\r\n        if(_permit[adr][str]==bytes32(keccak256(abi.encode(adr,str)))){ return true; }else{ return false; }\r\n    }\r\n\r\n    function grantRole(address adr,string memory role) public forRole(\"owner\") returns (bool) { newpermit(adr,role); return true; }\r\n    function revokeRole(address adr,string memory role) public forRole(\"owner\") returns (bool) { clearpermit(adr,role); return true; }\r\n\r\n    function transferOwnership(address adr) public forRole(\"owner\") returns (bool) {\r\n        newpermit(adr,\"owner\");\r\n        clearpermit(msg.sender,\"owner\");\r\n        _owner = adr;\r\n        return true;\r\n    }\r\n\r\n    function renounceOwnership() public forRole(\"owner\") returns (bool) {\r\n        newpermit(address(0),\"owner\");\r\n        clearpermit(msg.sender,\"owner\");\r\n        _owner = address(0);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract StakingData is permission {\r\n\r\n    IMLMUser public user;\r\n\r\n    address[] staker;\r\n\r\n    struct Stake {\r\n        uint256 balance;\r\n        uint256 claimed;\r\n        mapping(uint256 => uint256) matching;\r\n        uint256 genesisBlock;\r\n        uint256 latestBlock;\r\n    }\r\n\r\n    mapping(address => Stake) public stake;\r\n\r\n    address public depositToken;\r\n    address public rewardToken;\r\n    address public feeReceiver;\r\n\r\n    uint256 public returnROI = 10;\r\n    uint256 public depositFee = 20;\r\n    uint256 public denominator = 1000;\r\n    uint256[] matchingAmount = [150,50,30,10,10,10,10,10,10,10];\r\n\r\n    uint256 public totalStaked;\r\n    uint256 public totalPaid;\r\n\r\n    uint256 day = 86400;\r\n\r\n    bool public disableToggle;\r\n\r\n    bool locked;\r\n    modifier noReentrant() {\r\n        require(!locked, \"No re-entrancy\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n\r\n    constructor(address userContract) {\r\n        user = IMLMUser(userContract);\r\n    }\r\n\r\n    function getStaker() public view returns (address[] memory) {\r\n        return staker;\r\n    }\r\n\r\n    function getMatchinAmount() public view returns (uint256[] memory) {\r\n        return matchingAmount;\r\n    }\r\n\r\n    function getAccountMatching(address account) public view returns (uint256[] memory) {\r\n        uint256[] memory result = new uint256[](10);\r\n        for(uint256 i=0; i < 10; i++){\r\n            result[i] = stake[account].matching[i];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function depositStaking(address account,uint256 amount,address referral) public noReentrant returns (bool) {\r\n        require(!disableToggle,\"Staking Error: Staking Was Not Open\");\r\n        address[] memory upline = new address[](10);\r\n        if(!user.getUserRegistered(account)){\r\n            require(account!=referral,\"Staking Error: Referral Address Must Not Be Same\");\r\n            require(user.getUserRegistered(referral),\"Staking Error: Referral Address Must Be Registered\");\r\n            user.register(account,referral);\r\n            upline = user.getUserUpline(account,10);\r\n            for(uint256 i=0; i < 10; i++){\r\n                if(upline[i]!=address(0)){\r\n                    user.pushUserReferreeWithPermit(account,upline[i],i);\r\n                }\r\n            }\r\n        }\r\n        if(stake[account].genesisBlock==0){\r\n            stake[account].genesisBlock = block.timestamp;\r\n            staker.push(account);\r\n        }\r\n        internalClaim(account);\r\n        uint256 fee = amount * depositFee / denominator;\r\n        uint256 amountAfterFee = amount - fee;\r\n        IERC20(depositToken).transferFrom(msg.sender,address(this),amountAfterFee);\r\n        IERC20(depositToken).transferFrom(msg.sender,feeReceiver,fee);\r\n        stake[account].balance += amountAfterFee;\r\n        totalStaked += amountAfterFee;\r\n        return true;\r\n    }\r\n\r\n    function withdrawStaking(address account,uint256 amount) public noReentrant returns (bool) {\r\n        require(!disableToggle,\"Staking Error: Staking Was Not Open\");\r\n        internalClaim(account);\r\n        stake[account].balance -= amount;\r\n        totalStaked -= amount;\r\n        IERC20(depositToken).transfer(account,amount);\r\n        return true;\r\n    }\r\n\r\n    function Claim(address account) public returns (bool) {\r\n        require(!disableToggle,\"Staking Error: Staking Was Not Open\");\r\n        internalClaim(account);\r\n        return true;\r\n    }\r\n\r\n    function internalClaim(address account) internal {\r\n        uint256 reward = getCurrentReward(account);\r\n        if(reward>0){\r\n            IERC20(rewardToken).transfer(account,reward);\r\n            stake[account].claimed += reward;\r\n            totalPaid += reward;\r\n            address[] memory upline = user.getUserUpline(account,10);\r\n            for(uint256 i=0; i < 10; i++){\r\n                if(upline[i]!=address(0)){\r\n                    uint256 matching = reward * matchingAmount[i] / denominator;\r\n                    IERC20(rewardToken).transfer(upline[i],matching);\r\n                    stake[upline[i]].matching[i] += matching;\r\n                }\r\n            }\r\n        }\r\n        stake[account].latestBlock = block.timestamp;\r\n    }\r\n\r\n    function getCurrentReward(address account) public view returns (uint256) {\r\n        if(stake[account].latestBlock==0){ return 0; }\r\n        uint256 period = block.timestamp - stake[account].latestBlock;\r\n        uint256 reward = stake[account].balance * returnROI / denominator;\r\n        return reward / day * period;\r\n    }\r\n\r\n    function toggleDisabled() public forRole(\"owner\") returns (bool) {\r\n        disableToggle = !disableToggle;\r\n        return true;\r\n    }\r\n\r\n    function updateDepositToken(address tokenAddress) public forRole(\"owner\") returns (bool) {\r\n        depositToken = tokenAddress;\r\n        return true;\r\n    }\r\n\r\n    function updateRewardToken(address tokenAddress) public forRole(\"owner\") returns (bool) {\r\n        rewardToken = tokenAddress;\r\n        return true;\r\n    }\r\n\r\n    function updateFeeRecevier(address receiverAddress) public forRole(\"owner\") returns (bool) {\r\n        feeReceiver = receiverAddress;\r\n        return true;\r\n    }\r\n\r\n    function updateDepositROI(uint256 roi,uint256 fee,uint256 deno)public forRole(\"owner\") returns (bool) {\r\n        returnROI = roi;\r\n        depositFee = fee;\r\n        denominator = deno;\r\n        return true;\r\n    }\r\n\r\n    function updateMatchingAmount(uint256[] memory amounts)public forRole(\"owner\") returns (bool) {\r\n        matchingAmount = amounts;\r\n        return true;\r\n    }\r\n\r\n    function updateUserContract(address userContract) public forRole(\"owner\") returns (bool) {\r\n        user = IMLMUser(userContract);\r\n        return true;\r\n    }\r\n\r\n    function withdrawToken(address to,address tokenAddress,uint256 tokenAmount) public forRole(\"owner\") returns (bool) {\r\n        IERC20(tokenAddress).transfer(to,tokenAmount);\r\n        return true;\r\n    }\r\n\r\n    function withdrawETH(address to,uint256 amountETH) public forRole(\"owner\") returns (bool) {\r\n        (bool success,) = to.call{ value: amountETH }(\"\");\r\n        require(success);\r\n        return true;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"checkpermit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"depositStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableToggle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountMatching\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMatchinAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStaker\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"}],\"name\":\"grantRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"}],\"name\":\"revokeRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"genesisBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deno\",\"type\":\"uint256\"}],\"name\":\"updateDepositROI\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"updateDepositToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"}],\"name\":\"updateFeeRecevier\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"updateMatchingAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"updateRewardToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userContract\",\"type\":\"address\"}],\"name\":\"updateUserContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"user\",\"outputs\":[{\"internalType\":\"contract IMLMUser\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingData", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000dea538a744a07cd386f9eca37d2d53226dbbbbe4", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://59731ce02e8ce98d5231eac983b9c64a50a430c10fd31cbe24c5ce50d0c1263d"}