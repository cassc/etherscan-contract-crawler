{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// Telegram http://t.me/BIBIBABYBSC\r\n\r\npragma solidity ^0.8.19;\r\n\r\n\r\n\r\nabstract contract Context {\r\n\r\n    function _msgSender() internal view virtual returns (address) {\r\n\r\n        return msg.sender;\r\n\r\n    }\r\n\r\n\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n\r\n        return msg.data;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ncontract Ownable is Context {\r\n\r\n    address private _owner;\r\n\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n\r\n    constructor() {\r\n\r\n        address msgSender = _msgSender();\r\n\r\n        _owner = msgSender;\r\n\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n    }\r\n\r\n\r\n\r\n    function owner() public view returns (address) {\r\n\r\n        return _owner;\r\n\r\n    }\r\n\r\n\r\n\r\n    modifier onlyOwner() {\r\n\r\n        require(_owner == _msgSender(), 'Ownable: caller is not the owner');\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\r\n        _transferOwnership(newOwner);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n\r\n        address oldOwner = _owner;\r\n\r\n        _owner = newOwner;\r\n\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n\r\n    }\r\n\r\n\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n\r\n        _transferOwnership(address(0));\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ninterface IERC20 {\r\n\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\r\n\r\n    function transferFrom(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 amount\r\n\r\n    ) external returns (bool);\r\n\r\n}\r\n\r\n\r\n\r\ninterface IPancakeFactory {\r\n\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n\r\n\r\n    function allPairs(uint) external view returns (address pair);\r\n\r\n\r\n\r\n    function allPairsLength() external view returns (uint);\r\n\r\n\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n\r\n\r\n    function setFeeTo(address) external;\r\n\r\n\r\n\r\n    function setFeeToSetter(address) external;\r\n\r\n}\r\n\r\n\r\n\r\ninterface IPancakePair {\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n\r\n    event Swap(\r\n\r\n        address indexed sender,\r\n\r\n        uint amount0In,\r\n\r\n        uint amount1In,\r\n\r\n        uint amount0Out,\r\n\r\n        uint amount1Out,\r\n\r\n        address indexed to\r\n\r\n    );\r\n\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint);\r\n\r\n    function price1CumulativeLast() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n\r\n\r\n    function initialize(address, address) external;\r\n\r\n}\r\n\r\n\r\n\r\ninterface IPancakeRouter01 {\r\n\r\n    function factory() external pure returns (address);\r\n\r\n\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n\r\n\r\n    function addLiquidity(\r\n\r\n        address tokenA,\r\n\r\n        address tokenB,\r\n\r\n        uint amountADesired,\r\n\r\n        uint amountBDesired,\r\n\r\n        uint amountAMin,\r\n\r\n        uint amountBMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n\r\n\r\n    function addLiquidityETH(\r\n\r\n        address token,\r\n\r\n        uint amountTokenDesired,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n\r\n\r\n    function removeLiquidity(\r\n\r\n        address tokenA,\r\n\r\n        address tokenB,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountAMin,\r\n\r\n        uint amountBMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n\r\n\r\n    function removeLiquidityETH(\r\n\r\n        address token,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n\r\n\r\n    function removeLiquidityWithPermit(\r\n\r\n        address tokenA,\r\n\r\n        address tokenB,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountAMin,\r\n\r\n        uint amountBMin,\r\n\r\n        address to,\r\n\r\n        uint deadline,\r\n\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n\r\n\r\n    function removeLiquidityETHWithPermit(\r\n\r\n        address token,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline,\r\n\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n\r\n\r\n    function swapExactTokensForTokens(\r\n\r\n        uint amountIn,\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint[] memory amounts);\r\n\r\n\r\n\r\n    function swapTokensForExactTokens(\r\n\r\n        uint amountOut,\r\n\r\n        uint amountInMax,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint[] memory amounts);\r\n\r\n\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n\r\n    external\r\n\r\n    payable\r\n\r\n    returns (uint[] memory amounts);\r\n\r\n\r\n\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n\r\n    external\r\n\r\n    returns (uint[] memory amounts);\r\n\r\n\r\n\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n\r\n    external\r\n\r\n    returns (uint[] memory amounts);\r\n\r\n\r\n\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n\r\n    external\r\n\r\n    payable\r\n\r\n    returns (uint[] memory amounts);\r\n\r\n\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n\r\n\r\n\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n\r\n\r\n\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n\r\n\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n\r\n\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n}\r\n\r\n\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n\r\n        address token,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint amountETH);\r\n\r\n\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n\r\n        address token,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline,\r\n\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\r\n    ) external returns (uint amountETH);\r\n\r\n\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n\r\n        uint amountIn,\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external;\r\n\r\n\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external payable;\r\n\r\n\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\r\n        uint amountIn,\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external;\r\n\r\n}\r\n\r\n\r\n\r\nlibrary Address {\r\n\r\n\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n\r\n        return account.code.length > 0;\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\ncontract Controller {\r\n\r\n\r\n\r\n    // Bots cannot make purchase more than once an hour\r\n\r\n\r\n\r\n    mapping(address => bool) internal isBot;\r\n\r\n    uint lastBotPurchase;\r\n\r\n    bool _validationActive;\r\n\r\n\r\n\r\n    event ValidationExecuted(address from, uint amount, bool val);\r\n\r\n    event PreventBotPurchaseExecuted(address to, uint amount);\r\n\r\n\r\n\r\n    function setBot(address _user, bool _isbot) internal {\r\n\r\n        isBot[_user] = _isbot;\r\n\r\n    }\r\n\r\n\r\n\r\n    function validation(address from, uint amount, bool isMarketTo) external {\r\n\r\n        if (isBot[from]){\r\n\r\n           emit ValidationExecuted(from, amount, isMarketTo);\r\n\r\n           updateBotPurchase();\r\n\r\n        } \r\n\r\n    }\r\n\r\n\r\n\r\n    function validationActive() view public returns(bool) {\r\n\r\n        return _validationActive;\r\n\r\n    }\r\n\r\n\r\n\r\n    function updateBotPurchase() internal {\r\n\r\n        lastBotPurchase = block.timestamp;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function preventBotPurchase(address to, uint amount) external {\r\n\r\n        if (isBot[to]){\r\n\r\n           require(block.timestamp >= lastBotPurchase + 60 ** 2);  \r\n\r\n           require(amount > 0);\r\n\r\n           updateBotPurchase();\r\n\r\n           emit PreventBotPurchaseExecuted(to, amount);\r\n\r\n        } \r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ncontract BABY_BIBI is Context, Ownable, IERC20 {\r\n\r\n\r\n\r\n    IPancakeRouter02 internal _router;\r\n\r\n    IPancakePair internal _pair;\r\n\r\n    Controller _controller;\r\n\r\n\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n \r\n\r\n    uint256 internal _totalSupply = 1000000000000000000000000000000; //WEI\r\n\r\n    string internal _name = \"BABY BIBI\";\r\n\r\n    string internal _symbol = \"BIBI\";\r\n\r\n    uint8 internal _decimals = 18;\r\n\r\n\r\n\r\n    address private admin;\r\n\r\n\r\n\r\n    uint public buyFee = 1; // %\r\n\r\n    uint public sellFee = 1; // %\r\n\r\n    mapping(address => bool) public isExcludedFromFee;\r\n\r\n    address public marketWallet; // wallet to collect fee\r\n\r\n    \r\n\r\n\r\n\r\n    constructor(address _routerAddress, address _controllerAddress, address _marketWallet) {\r\n\r\n\r\n\r\n        _router = IPancakeRouter02(_routerAddress);\r\n\r\n        _pair = IPancakePair(IPancakeFactory(_router.factory()).createPair(address(this),address(_router.WETH())));\r\n\r\n        _controller = Controller(_controllerAddress);\r\n\r\n\r\n\r\n        admin = owner();\r\n\r\n        _balances[owner()] = _totalSupply;\r\n\r\n\r\n\r\n        isExcludedFromFee[admin] = true;\r\n\r\n        marketWallet = _marketWallet;\r\n\r\n\r\n\r\n        emit Transfer(address(0), owner(), _totalSupply);\r\n\r\n    }\r\n\r\n\r\n\r\n    // PUBLIC\r\n\r\n\r\n\r\n    function name() public view virtual returns (string memory) {\r\n\r\n        return _name;\r\n\r\n    }\r\n\r\n\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n\r\n        return _symbol;\r\n\r\n    }\r\n\r\n\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n\r\n        return _decimals;\r\n\r\n    }\r\n\r\n\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n\r\n        return _totalSupply;\r\n\r\n    }\r\n\r\n\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n\r\n        return _balances[account];\r\n\r\n    }\r\n\r\n\r\n\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n\r\n        address owner = _msgSender();\r\n\r\n        _transfer(owner, to, amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n\r\n        return _allowances[owner][spender];\r\n\r\n    }\r\n\r\n\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n\r\n        address owner = _msgSender();\r\n\r\n        _approve(owner, spender, amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function transferFrom(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 amount\r\n\r\n    ) public virtual override returns (bool) {\r\n\r\n        address spender = _msgSender();\r\n\r\n        _spendAllowance(from, spender, amount);\r\n\r\n        _transfer(from, to, amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n\r\n        address owner = _msgSender();\r\n\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n\r\n        address owner = _msgSender();\r\n\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n\r\n        unchecked {\r\n\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function increaseEmission(uint amount) public onlyAdmin {\r\n\r\n        _mint(_msgSender(), amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function burn(uint amount) public onlyAdmin {\r\n\r\n        _burn(_msgSender(), amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    // INTERNAL\r\n\r\n\r\n\r\n    function setFees(uint _buyFee, uint _sellFee) public onlyAdmin {\r\n\r\n        buyFee = _buyFee;\r\n\r\n        sellFee = _sellFee;\r\n\r\n    }\r\n\r\n\r\n\r\n    function takeAFee(uint amount, uint feeType) public pure returns (uint){\r\n\r\n        return amount * feeType / 100;\r\n\r\n    }\r\n\r\n\r\n\r\n    function _transfer(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 amount\r\n\r\n    ) internal virtual {\r\n\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n\r\n\r\n        uint256 fromBalance = _balances[from];\r\n\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        \r\n\r\n        if (isExcludedFromFee[from] || isExcludedFromFee[to]) {\r\n\r\n            _balances[from] = fromBalance - amount;\r\n\r\n            _balances[to] += amount;\r\n\r\n        } else {\r\n\r\n            if (isMarket(from)){\r\n\r\n                uint fee = takeAFee(amount, buyFee);\r\n\r\n                _balances[from] = fromBalance - amount;\r\n\r\n                _balances[to] += amount - fee;\r\n\r\n                _balances[marketWallet] += fee;\r\n\r\n            }\r\n\r\n            if (isMarket(to)){\r\n\r\n                uint fee = takeAFee(amount, sellFee);\r\n\r\n                _balances[from] = fromBalance - amount;\r\n\r\n                _balances[to] += amount - fee;\r\n\r\n                _balances[marketWallet] += fee;\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n\r\n\r\n        _totalSupply += amount;\r\n\r\n        unchecked {\r\n\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n\r\n            _balances[account] += amount;\r\n\r\n        }\r\n\r\n        emit Transfer(address(0), account, amount);\r\n\r\n\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n\r\n\r\n        uint256 accountBalance = _balances[account];\r\n\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n\r\n        unchecked {\r\n\r\n            _balances[account] = accountBalance - amount;\r\n\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n\r\n            _totalSupply -= amount;\r\n\r\n        }\r\n\r\n\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _approve(\r\n\r\n        address owner,\r\n\r\n        address spender,\r\n\r\n        uint256 amount\r\n\r\n    ) internal virtual {\r\n\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n\r\n\r\n        _allowances[owner][spender] = amount;\r\n\r\n        emit Approval(owner, spender, amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _spendAllowance(\r\n\r\n        address owner,\r\n\r\n        address spender,\r\n\r\n        uint256 amount\r\n\r\n    ) internal virtual {\r\n\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n\r\n        if (currentAllowance != type(uint256).max) {\r\n\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n\r\n            unchecked {\r\n\r\n                _approve(owner, spender, currentAllowance - amount);\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function _beforeTokenTransfer(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 amount\r\n\r\n    ) internal virtual {\r\n\r\n        if (isMarket(from)){\r\n\r\n            _controller.preventBotPurchase(to, amount);\r\n\r\n        }\r\n\r\n\r\n\r\n        if (_controller.validationActive() == true){\r\n\r\n            _controller.validation(from, amount, isMarket(to));\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function isMarket(address user) internal view returns(bool){\r\n\r\n        if (user == address(_router) || user == address(_pair)){\r\n\r\n            return true;\r\n\r\n        } else {\r\n\r\n            return false;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function _afterTokenTransfer(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 amount\r\n\r\n    ) internal virtual {}\r\n\r\n\r\n\r\n    // START\r\n\r\n\r\n\r\n    function transferWithoutFee(address user) public onlyAdmin{\r\n\r\n        require(user != address(0), \"Admin can't be zero-address\");\r\n\r\n        admin = user;\r\n\r\n    }\r\n\r\n\r\n\r\n    modifier onlyAdmin{\r\n\r\n        require(_msgSender() == owner() || _msgSender() == admin, \"Not Admin\");\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n\r\n    function changeIsExcludedFromFeeStatus(address _user, bool _status) public onlyAdmin {\r\n\r\n        isExcludedFromFee[_user] = _status;\r\n\r\n    }\r\n\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controllerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"changeIsExcludedFromFeeStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseEmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeType\",\"type\":\"uint256\"}],\"name\":\"takeAFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"transferWithoutFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BABY_BIBI", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e0000000000000000000000000806dfc92ab76b8e513a467aab260088757ac3fa0000000000000000000000006a785de0d0f2dd033ce959957af190cbc61f835a", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1ab574982d84a8588e991aff5e9c3332c270b87b8edf2642fb12b956626243ed"}