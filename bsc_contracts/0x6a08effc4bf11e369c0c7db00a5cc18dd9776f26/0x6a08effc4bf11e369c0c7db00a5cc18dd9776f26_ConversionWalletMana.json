{"SourceCode": "// SPDX-License-Identifier: GPL-3.0-only\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/IExchange.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface IExchange\r\n{\r\n\tfunction calcConversionFromInput(address _from, address _to, uint256 _inputAmount) external view returns (uint256 _outputAmount);\r\n\tfunction calcConversionFromOutput(address _from, address _to, uint256 _outputAmount) external view returns (uint256 _inputAmount);\r\n\r\n\tfunction convertFundsFromInput(address _from, address _to, uint256 _inputAmount, uint256 _minOutputAmount) external payable returns (uint256 _outputAmount);\r\n\tfunction convertFundsFromOutput(address _from, address _to, uint256 _outputAmount, uint256 _maxInputAmount) external payable returns (uint256 _inputAmount);\r\n}\r\n\r\n// File: contracts/ConversionVault.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ConversionVault is Ownable\r\n{\r\n\tusing SafeERC20 for IERC20;\r\n\tusing SafeMath for uint256;\r\n\r\n\taddress payable public manager;\r\n\taddress payable public vault;\r\n\taddress public exchange;\r\n\r\n\tmapping (address => uint256) public dailyConversionLimit;\r\n\tmapping (address => uint256[2]) private dailyConversionConsumption;\r\n\r\n\tmodifier onlyManager()\r\n\t{\r\n\t\trequire(msg.sender == manager, \"access denied\");\r\n\t\t_;\r\n\t}\r\n\r\n\tconstructor () public\r\n\t{\r\n\t\tmanager = msg.sender;\r\n\t\tvault = msg.sender;\r\n\t}\r\n\r\n\tfunction withdrawFunds(address _token, uint256 _amount) external onlyManager\r\n\t{\r\n\t\taddress payable _to = vault;\r\n\t\tif (_token == address(0)) {\r\n\t\t\t_to.transfer(_amount);\r\n\t\t} else {\r\n\t\t\tIERC20(_token).safeTransfer(_to, _amount);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction withdrawFundsBatch(address[] memory _tokens, uint256[] memory _amounts) external onlyManager\r\n\t{\r\n\t\trequire(_tokens.length == _amounts.length, \"length mismatch\");\r\n\t\taddress payable _to = vault;\r\n\t\tuint256 _length = _tokens.length;\r\n\t\tfor (uint256 _i = 0; _i < _length; _i++) {\r\n\t\t\taddress _token = _tokens[_i];\r\n\t\t\tuint256 _amount = _amounts[_i];\r\n\t\t\tif (_token == address(0)) {\r\n\t\t\t\t_to.transfer(_amount);\r\n\t\t\t} else {\r\n\t\t\t\tIERC20(_token).safeTransfer(_to, _amount);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction calcConversionLimitAvailable(address _token) external view returns (uint256 _avaliableAmount)\r\n\t{\r\n\t\tuint256 _today = (block.timestamp / 1 days) * 1 days;\r\n\t\tuint256 _limit = dailyConversionLimit[_token];\r\n\t\tuint256[2] storage _array = dailyConversionConsumption[_token];\r\n\t\tuint256 _date = _array[0];\r\n\t\tuint256 _consumed = _array[1];\r\n\t\tif (_date != _today) {\r\n\t\t\t_consumed = 0;\r\n\t\t}\r\n\t\tif (_limit <= _consumed) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\treturn _limit - _consumed;\r\n\t}\r\n\r\n\tfunction convertFundsFromInput(address _from, address _to, uint256 _inputAmount, uint256 _minOutputAmount) external onlyManager returns (uint256 _outputAmount)\r\n\t{\r\n\t\trequire(exchange != address(0), \"exchange not set\");\r\n\t\tuint256 _balanceFromBefore = _getBalance(_from);\r\n\t\tuint256 _balanceToBefore = _getBalance(_to);\r\n\t\tif (_from == address(0)) {\r\n\t\t\t_outputAmount = IExchange(exchange).convertFundsFromInput{value: _inputAmount}(_from, _to, _inputAmount, _minOutputAmount);\r\n\t\t} else {\r\n\t\t\tIERC20(_from).safeApprove(exchange, _inputAmount);\r\n\t\t\t_outputAmount = IExchange(exchange).convertFundsFromInput(_from, _to, _inputAmount, _minOutputAmount);\r\n\t\t\tIERC20(_from).safeApprove(exchange, 0);\r\n\t\t}\r\n\t\trequire(_outputAmount >= _minOutputAmount, \"insufficient output\");\r\n\t\tuint256 _balanceFromAfter = _getBalance(_from);\r\n\t\tuint256 _balanceToAfter = _getBalance(_to);\r\n\t\trequire(_balanceFromBefore == _balanceFromAfter.add(_inputAmount), \"input mismatch\");\r\n\t\trequire(_balanceToAfter == _balanceToBefore.add(_outputAmount), \"output mismatch\");\r\n\t\t_updateDailyConversionConsumption(_from, _inputAmount);\r\n\t\t_updateDailyConversionConsumption(_to, _outputAmount);\r\n\t\treturn _outputAmount;\r\n\t}\r\n\r\n\tfunction convertFundsFromOutput(address _from, address _to, uint256 _outputAmount, uint256 _maxInputAmount) external onlyManager returns (uint256 _inputAmount)\r\n\t{\r\n\t\trequire(exchange != address(0), \"exchange not set\");\r\n\t\tuint256 _balanceFromBefore = _getBalance(_from);\r\n\t\tuint256 _balanceToBefore = _getBalance(_to);\r\n\t\tif (_from == address(0)) {\r\n\t\t\t_inputAmount = IExchange(exchange).convertFundsFromOutput{value: _maxInputAmount}(_from, _to, _outputAmount, _maxInputAmount);\r\n\t\t} else {\r\n\t\t\tIERC20(_from).safeApprove(exchange, _maxInputAmount);\r\n\t\t\t_inputAmount = IExchange(exchange).convertFundsFromOutput(_from, _to, _outputAmount, _maxInputAmount);\r\n\t\t\tIERC20(_from).safeApprove(exchange, 0);\r\n\t\t}\r\n\t\trequire(_inputAmount <= _maxInputAmount, \"excessive input\");\r\n\t\tuint256 _balanceFromAfter = _getBalance(_from);\r\n\t\tuint256 _balanceToAfter = _getBalance(_to);\r\n\t\trequire(_balanceFromBefore == _balanceFromAfter.add(_inputAmount), \"input mismatch\");\r\n\t\trequire(_balanceToAfter == _balanceToBefore.add(_outputAmount), \"output mismatch\");\r\n\t\t_updateDailyConversionConsumption(_from, _inputAmount);\r\n\t\t_updateDailyConversionConsumption(_to, _outputAmount);\r\n\t\treturn _inputAmount;\r\n\t}\r\n\r\n\tfunction setManager(address payable _newManager) external onlyOwner\r\n\t{\r\n\t\taddress payable _oldManager = manager;\r\n\t\tmanager = _newManager;\r\n\t\temit ChangeManager(_oldManager, _newManager);\r\n\t}\r\n\r\n\tfunction setVault(address payable _newVault) external onlyOwner\r\n\t{\r\n\t\taddress payable _oldVault = vault;\r\n\t\tvault = _newVault;\r\n\t\temit ChangeVault(_oldVault, _newVault);\r\n\t}\r\n\r\n\tfunction setExchange(address _newExchange) external onlyOwner\r\n\t{\r\n\t\taddress _oldExchange = exchange;\r\n\t\texchange = _newExchange;\r\n\t\temit ChangeExchange(_oldExchange, _newExchange);\r\n\t}\r\n\r\n\tfunction setDailyConversionLimit(address _token, uint256 _newDailyConversionLimit) external onlyOwner\r\n\t{\r\n\t\tuint256 _oldDailyConversionLimit = dailyConversionLimit[_token];\r\n\t\tdailyConversionLimit[_token] = _newDailyConversionLimit;\r\n\t\temit ChangeDailyConversionLimit(_token, _oldDailyConversionLimit, _newDailyConversionLimit);\r\n\t}\r\n\r\n\tfunction _updateDailyConversionConsumption(address _token, uint256 _amount) internal\r\n\t{\r\n\t\tuint256 _today = (block.timestamp / 1 days) * 1 days;\r\n\t\tuint256 _limit = dailyConversionLimit[_token];\r\n\t\tuint256[2] storage _array = dailyConversionConsumption[_token];\r\n\t\tuint256 _date = _array[0];\r\n\t\tuint256 _consumed = _array[1];\r\n\t\tif (_date != _today) {\r\n\t\t\t_consumed = 0;\r\n\t\t}\r\n\t\t_consumed = _consumed.add(_amount);\r\n\t\trequire(_consumed <= _limit, \"limit exhausted\");\r\n\t\t_array[0] = _today;\r\n\t\t_array[1] = _consumed;\r\n\t}\r\n\r\n\tfunction _getBalance(address _token) internal view returns (uint256 _balance)\r\n\t{\r\n\t\tif (_token == address(0)) {\r\n\t\t\treturn address(this).balance;\r\n\t\t} else {\r\n\t\t\treturn IERC20(_token).balanceOf(address(this));\r\n\t\t}\r\n\t}\r\n\r\n\treceive() external payable\r\n\t{\r\n\t}\r\n\r\n\tevent ChangeManager(address payable indexed _oldManager, address payable indexed _newManager);\r\n\tevent ChangeVault(address payable indexed _oldVault, address payable indexed _newVault);\r\n\tevent ChangeExchange(address indexed _oldExchange, address indexed _newExchange);\r\n\tevent ChangeDailyConversionLimit(address indexed _token, uint256 _oldDailyConversionLimit, uint256 _newDailyConversionLimit);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Create2.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\r\n * `CREATE2` can be used to compute in advance the address where a smart\r\n * contract will be deployed, which allows for interesting new mechanisms known\r\n * as 'counterfactual interactions'.\r\n *\r\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\r\n * information.\r\n */\r\nlibrary Create2 {\r\n    /**\r\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\r\n     * will be deployed can be known in advance via {computeAddress}.\r\n     *\r\n     * The bytecode for a contract can be obtained from Solidity with\r\n     * `type(contractName).creationCode`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `bytecode` must not be empty.\r\n     * - `salt` must have not been used for `bytecode` already.\r\n     * - the factory must have a balance of at least `amount`.\r\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\r\n     */\r\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\r\n        address addr;\r\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\r\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\r\n        }\r\n        require(addr != address(0), \"Create2: Failed on deploy\");\r\n        return addr;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\r\n     * `bytecodeHash` or `salt` will result in a new destination address.\r\n     */\r\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\r\n        return computeAddress(salt, bytecodeHash, address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\r\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\r\n     */\r\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\r\n        bytes32 _data = keccak256(\r\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\r\n        );\r\n        return address(uint256(_data));\r\n    }\r\n}\r\n\r\n// File: contracts/Wallet.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\ncontract Wallet\r\n{\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\taddress payable private immutable manager;\r\n\r\n\tmodifier onlyManager()\r\n\t{\r\n\t\trequire(msg.sender == manager, \"access denied\");\r\n\t\t_;\r\n\t}\r\n\r\n\tconstructor () public\r\n\t{\r\n\t\tmanager = msg.sender;\r\n\t}\r\n\r\n\tfunction _forwardFunds(address _token, address payable _to) external onlyManager\r\n\t{\r\n\t\tif (_token == address(0)) {\r\n\t\t\t_to.transfer(address(this).balance);\r\n\t\t} else {\r\n\t\t\tIERC20(_token).safeTransfer(_to, IERC20(_token).balanceOf(address(this)));\r\n\t\t}\r\n\t}\r\n\r\n\treceive() external payable\r\n\t{\r\n\t}\r\n}\r\n\r\n// File: contracts/WalletManager.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract WalletManager is Ownable\r\n{\r\n\tusing Address for address payable;\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\tuint256 constant GAS_OVERHEAD = 30000;\r\n\r\n\taddress payable public processor;\r\n\taddress payable public vault;\r\n\r\n\tbytes private bytecode;\r\n\tbytes32 private immutable bytecodeHash;\r\n\r\n\tmodifier onlyProcessor()\r\n\t{\r\n\t\tuint256 _gas = gasleft();\r\n\t\trequire(msg.sender == processor, \"access denied\");\r\n\t\t_;\r\n\t\tprocessor.transfer((GAS_OVERHEAD + _gas - gasleft()) * tx.gasprice);\r\n\t}\r\n\r\n\tconstructor () public\r\n\t{\r\n\t\tprocessor = msg.sender;\r\n\t\tvault = msg.sender;\r\n\t\tbytecode = abi.encodePacked(type(Wallet).creationCode);\r\n\t\tbytecodeHash = keccak256(bytecode);\r\n\t}\r\n\r\n\tfunction wallets(string memory _userId) external view returns (address payable _wallet, bool _exists)\r\n\t{\r\n\t\tbytes32 _salt = bytes32(keccak256(abi.encodePacked(_userId)));\r\n\t\t_wallet = payable(Create2.computeAddress(_salt, bytecodeHash));\r\n\t\t_exists = _wallet.isContract();\r\n\t\treturn (_wallet, _exists);\r\n\t}\r\n\r\n\tfunction createWallet(string memory _userId) external onlyProcessor\r\n\t{\r\n\t\tbytes32 _salt = bytes32(keccak256(abi.encodePacked(_userId)));\r\n\t\taddress payable _wallet = payable(Create2.deploy(0, _salt, bytecode));\r\n\t\temit CreateWallet(_userId, _wallet);\r\n\t}\r\n\r\n\tfunction forwardFunds(address payable _wallet, address _token) external onlyProcessor\r\n\t{\r\n\t\tWallet(_wallet)._forwardFunds(_token, vault);\r\n\t}\r\n\r\n\tfunction forwardFundsBatch(address payable[] memory _wallets, address _token) external onlyProcessor\r\n\t{\r\n\t\tuint256 _length = _wallets.length;\r\n\t\tfor (uint256 _i = 0; _i < _length; _i++) {\r\n\t\t\taddress payable _wallet = _wallets[_i];\r\n\t\t\tWallet(_wallet)._forwardFunds(_token, vault);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction recoverFunds(address _token) external onlyOwner\r\n\t{\r\n\t\taddress payable _to = vault;\r\n\t\tif (_token == address(0)) {\r\n\t\t\t_to.transfer(address(this).balance);\r\n\t\t} else {\r\n\t\t\tIERC20(_token).safeTransfer(_to, IERC20(_token).balanceOf(address(this)));\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setProcessor(address payable _newProcessor) external onlyOwner\r\n\t{\r\n\t\taddress payable _oldProcessor = processor;\r\n\t\tprocessor = _newProcessor;\r\n\t\temit ChangeProcessor(_oldProcessor, _newProcessor);\r\n\t}\r\n\r\n\tfunction setVault(address payable _newVault) external onlyOwner\r\n\t{\r\n\t\taddress payable _oldVault = vault;\r\n\t\tvault = _newVault;\r\n\t\temit ChangeVault(_oldVault, _newVault);\r\n\t}\r\n\r\n\treceive() external payable\r\n\t{\r\n\t}\r\n\r\n\tevent CreateWallet(string indexed _userId, address payable indexed _wallet);\r\n\tevent ChangeProcessor(address payable indexed _oldProcessor, address payable indexed _newProcessor);\r\n\tevent ChangeVault(address payable indexed _oldVault, address payable indexed _newVault);\r\n}\r\n\r\n// File: contracts/ConversionWalletManager.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\ncontract ConversionWalletManager is WalletManager\r\n{\r\n\tfunction calcConversionLimitAvailable(address _token) external view returns (uint256 _avaliableAmount)\r\n\t{\r\n\t\treturn ConversionVault(vault).calcConversionLimitAvailable(_token);\r\n\t}\r\n\r\n\tfunction calcConversionFromInput(address _from, address _to, uint256 _inputAmount) external view returns (uint256 _outputAmount)\r\n\t{\r\n\t\treturn IExchange(ConversionVault(vault).exchange()).calcConversionFromInput(_from, _to, _inputAmount);\r\n\t}\r\n\r\n\tfunction calcConversionFromOutput(address _from, address _to, uint256 _outputAmount) external view returns (uint256 _inputAmount)\r\n\t{\r\n\t\treturn IExchange(ConversionVault(vault).exchange()).calcConversionFromOutput(_from, _to, _outputAmount);\r\n\t}\r\n\r\n\tfunction convertFundsFromInput(address _from, address _to, uint256 _inputAmount, uint256 _minOutputAmount) external onlyProcessor returns (uint256 _outputAmount)\r\n\t{\r\n\t\treturn ConversionVault(vault).convertFundsFromInput(_from, _to, _inputAmount, _minOutputAmount);\r\n\t}\r\n\r\n\tfunction convertFundsFromOutput(address _from, address _to, uint256 _outputAmount, uint256 _maxInputAmount) external onlyProcessor returns (uint256 _inputAmount)\r\n\t{\r\n\t\treturn ConversionVault(vault).convertFundsFromOutput(_from, _to, _outputAmount, _maxInputAmount);\r\n\t}\r\n\r\n\tfunction withdrawFunds(address _token, uint256 _amount) external onlyProcessor\r\n\t{\r\n\t\tConversionVault(vault).withdrawFunds(_token, _amount);\r\n\t}\r\n\r\n\tfunction withdrawFundsBatch(address[] memory _tokens, uint256[] memory _amounts) external onlyProcessor\r\n\t{\r\n\t\tConversionVault(vault).withdrawFundsBatch(_tokens, _amounts);\r\n\t}\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address payable\",\"name\":\"_oldProcessor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address payable\",\"name\":\"_newProcessor\",\"type\":\"address\"}],\"name\":\"ChangeProcessor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address payable\",\"name\":\"_oldVault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address payable\",\"name\":\"_newVault\",\"type\":\"address\"}],\"name\":\"ChangeVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_userId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"CreateWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"}],\"name\":\"calcConversionFromInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_outputAmount\",\"type\":\"uint256\"}],\"name\":\"calcConversionFromOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"calcConversionLimitAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_avaliableAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOutputAmount\",\"type\":\"uint256\"}],\"name\":\"convertFundsFromInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxInputAmount\",\"type\":\"uint256\"}],\"name\":\"convertFundsFromOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userId\",\"type\":\"string\"}],\"name\":\"createWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"forwardFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_wallets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"forwardFundsBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processor\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newProcessor\",\"type\":\"address\"}],\"name\":\"setProcessor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newVault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userId\",\"type\":\"string\"}],\"name\":\"wallets\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawFundsBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ConversionWalletManager", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d1389643427f030e6240e0f65fea1dc37835524a1132c585c4a92d73394fae12"}