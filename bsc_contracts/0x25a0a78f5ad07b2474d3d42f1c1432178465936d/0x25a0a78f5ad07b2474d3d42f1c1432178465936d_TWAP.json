{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/exchange/OdosExchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../IExchange.sol\\\";\\n\\n/**\\n * Adapter between Odos and TWAP's IExchange interface\\n */\\ncontract OdosExchange is IExchange {\\n    using SafeERC20 for ERC20;\\n\\n    address public immutable odos;\\n\\n    constructor(address _odos) {\\n        odos = _odos;\\n    }\\n\\n    /**\\n     * data = amountOut, swap data from odos api\\n     */\\n    function getAmountOut(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata,\\n        bytes calldata bidData\\n    ) public pure returns (uint256 dstAmountOut) {\\n        (dstAmountOut, ) = decode(bidData);\\n    }\\n\\n    /**\\n     * data = amountOut, swap data from odos api\\n     */\\n    function swap(\\n        address _srcToken,\\n        address _dstToken,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        bytes calldata,\\n        bytes calldata bidData\\n    ) public {\\n        (, bytes memory swapdata) = decode(bidData);\\n        ERC20 srcToken = ERC20(_srcToken);\\n        ERC20 dstToken = ERC20(_dstToken);\\n\\n        srcToken.safeTransferFrom(msg.sender, address(this), amountIn);\\n        amountIn = srcToken.balanceOf(address(this)); // support FoT tokens\\n\\n        srcToken.safeIncreaseAllowance(odos, amountIn);\\n        Address.functionCall(odos, swapdata);\\n\\n        uint256 balance = dstToken.balanceOf(address(this));\\n        require(balance >= amountOutMin, \\\"OdosExchange:swap:amountOutMin\\\");\\n        dstToken.safeTransfer(msg.sender, balance);\\n    }\\n\\n    function decode(bytes calldata data) private pure returns (uint256 amountOut, bytes memory swapdata) {\\n        return abi.decode(data, (uint256, bytes));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/exchange/PangolinDaasExchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../IExchange.sol\\\";\\n\\n/**\\n * Adapter between PangolinDAAS and TWAP's IExchange interface\\n */\\ncontract PangolinDaasExchange is IExchange {\\n    using SafeERC20 for ERC20;\\n\\n    IPangolinDaas public immutable pangolin;\\n\\n    constructor(address _pangolin) {\\n        pangolin = IPangolinDaas(_pangolin);\\n    }\\n\\n    /**\\n     * askData = abi encoded: partnerDaas(address)\\n     * bidData = abi encoded: feeOnTransfer(bool), path(address[])\\n     */\\n    function getAmountOut(\\n        address srcToken,\\n        address dstToken,\\n        uint256 amountIn,\\n        bytes calldata askData,\\n        bytes calldata bidData\\n    ) public view returns (uint256 amountOut) {\\n        (address partnerDaas, , address[] memory path) = decode(askData, bidData);\\n        require(path[0] == srcToken && path[path.length - 1] == dstToken, \\\"UE1\\\");\\n        uint256 result = (pangolin.getAmountsOut(amountIn, path)[path.length - 1]);\\n\\n        (, , uint24 feeTotal, , ) = pangolin.getFeeInfo(partnerDaas); // getAmountOut doesn't take the partner affiliate fee into account, which will be deducted when swapping\\n        return (result * (100_00 - feeTotal)) / 100_00;\\n    }\\n\\n    /**\\n     * askData = abi encoded: partnerDaas(address)\\n     * bidData = abi encoded: feeOnTransfer(bool), path(address[])\\n     */\\n    function swap(\\n        address _srcToken,\\n        address,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        bytes calldata askData,\\n        bytes calldata bidData\\n    ) public {\\n        (address partnerDaas, bool fotTokens, address[] memory path) = decode(askData, bidData);\\n        ERC20 srcToken = ERC20(_srcToken);\\n\\n        srcToken.safeTransferFrom(msg.sender, address(this), amountIn);\\n        amountIn = srcToken.balanceOf(address(this)); // support FoT tokens\\n\\n        srcToken.safeIncreaseAllowance(address(pangolin), amountIn);\\n\\n        if (fotTokens) {\\n            pangolin.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n                amountIn,\\n                amountOutMin,\\n                path,\\n                msg.sender,\\n                block.timestamp,\\n                partnerDaas\\n            );\\n        } else {\\n            pangolin.swapExactTokensForTokens(amountIn, amountOutMin, path, msg.sender, block.timestamp, partnerDaas);\\n        }\\n    }\\n\\n    function decode(\\n        bytes calldata askData,\\n        bytes calldata bidData\\n    ) private pure returns (address partnerDaas, bool fotTokens, address[] memory path) {\\n        (partnerDaas) = abi.decode(askData, (address));\\n        (fotTokens, path) = abi.decode(bidData, (bool, address[]));\\n    }\\n}\\n\\ninterface IPangolinDaas {\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline,\\n        address feeTo\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline,\\n        address feeTo\\n    ) external;\\n\\n    function getFeeInfo(\\n        address feeTo\\n    ) external view returns (uint24 feePartner, uint24 feeProtocol, uint24 feeTotal, uint24 feeCut, bool initialized);\\n}\\n\"\r\n    },\r\n    \"contracts/exchange/ParaswapExchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../IExchange.sol\\\";\\n\\n/**\\n * Adapter between IParaswap and TWAP's IExchange interface\\n */\\ncontract ParaswapExchange is IExchange {\\n    using SafeERC20 for ERC20;\\n\\n    IParaswap public immutable paraswap;\\n\\n    constructor(address _paraswap) {\\n        paraswap = IParaswap(_paraswap);\\n    }\\n\\n    /**\\n     * data = amountOut, swap data from paraswap api\\n     */\\n    function getAmountOut(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata,\\n        bytes calldata bidData\\n    ) public pure returns (uint256 dstAmountOut) {\\n        (dstAmountOut, ) = decode(bidData);\\n    }\\n\\n    /**\\n     * data = amountOut, swap data from paraswap api\\n     */\\n    function swap(\\n        address _srcToken,\\n        address _dstToken,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        bytes calldata,\\n        bytes calldata bidData\\n    ) public {\\n        (, bytes memory swapdata) = decode(bidData);\\n        ERC20 srcToken = ERC20(_srcToken);\\n        ERC20 dstToken = ERC20(_dstToken);\\n\\n        srcToken.safeTransferFrom(msg.sender, address(this), amountIn);\\n        amountIn = srcToken.balanceOf(address(this)); // support FoT tokens\\n\\n        srcToken.safeIncreaseAllowance(paraswap.getTokenTransferProxy(), amountIn);\\n        Address.functionCall(address(paraswap), swapdata);\\n\\n        uint256 balance = dstToken.balanceOf(address(this));\\n        require(balance >= amountOutMin, \\\"PE1\\\");\\n        dstToken.safeTransfer(msg.sender, balance);\\n    }\\n\\n    function decode(bytes calldata data) private pure returns (uint256 amountOut, bytes memory swapdata) {\\n        return abi.decode(data, (uint256, bytes));\\n    }\\n}\\n\\n/**\\n * Augustus Swapper\\n * Paraswap main exchange interface\\n */\\ninterface IParaswap {\\n    function getTokenTransferProxy() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/exchange/UniswapV2Exchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../IExchange.sol\\\";\\n\\n/**\\n * Adapter between IUniswapV2 and TWAP's IExchange interface\\n */\\ncontract UniswapV2Exchange is IExchange {\\n    using SafeERC20 for ERC20;\\n\\n    IUniswapV2 public immutable uniswap;\\n\\n    constructor(address _uniswap) {\\n        uniswap = IUniswapV2(_uniswap);\\n    }\\n\\n    /**\\n     * data = abi encoded: feeOnTransfer(bool), path(address[])\\n     */\\n    function getAmountOut(\\n        address srcToken,\\n        address dstToken,\\n        uint256 amountIn,\\n        bytes calldata,\\n        bytes calldata bidData\\n    ) public view returns (uint256 amountOut) {\\n        (, address[] memory path) = decode(bidData);\\n        require(path[0] == srcToken && path[path.length - 1] == dstToken, \\\"UE1\\\");\\n        return uniswap.getAmountsOut(amountIn, path)[path.length - 1];\\n    }\\n\\n    /**\\n     * data = abi encoded: feeOnTransfer(bool), path(address[])\\n     */\\n    function swap(\\n        address _srcToken,\\n        address,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        bytes calldata,\\n        bytes calldata bidData\\n    ) public {\\n        (bool fotTokens, address[] memory path) = decode(bidData);\\n        ERC20 srcToken = ERC20(_srcToken);\\n\\n        srcToken.safeTransferFrom(msg.sender, address(this), amountIn);\\n        amountIn = srcToken.balanceOf(address(this)); // support FoT tokens\\n\\n        srcToken.safeIncreaseAllowance(address(uniswap), amountIn);\\n\\n        if (fotTokens) {\\n            uniswap.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n                amountIn,\\n                amountOutMin,\\n                path,\\n                msg.sender,\\n                block.timestamp\\n            );\\n        } else {\\n            uniswap.swapExactTokensForTokens(amountIn, amountOutMin, path, msg.sender, block.timestamp);\\n        }\\n    }\\n\\n    function decode(bytes calldata data) private pure returns (bool fotTokens, address[] memory path) {\\n        (fotTokens, path) = abi.decode(data, (bool, address[]));\\n    }\\n}\\n\\ninterface IUniswapV2 {\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/IExchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"./OrderLib.sol\\\";\\n\\n/**\\n * Adapter between TWAP and exchange implementations\\n */\\ninterface IExchange {\\n    /**\\n     * Returns actual output amount after fees and price impact\\n     */\\n    function getAmountOut(\\n        address srcToken,\\n        address dstToken,\\n        uint256 amountIn,\\n        bytes calldata askData,\\n        bytes calldata bidData\\n    ) external view returns (uint256 amountOut);\\n\\n    /**\\n     * Swaps amountIn to amount out using abi encoded data (can either be path or more complex data)\\n     */\\n    function swap(\\n        address srcToken,\\n        address dstToken,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        bytes calldata askData,\\n        bytes calldata bidData\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IWETH {\\n    function withdraw(uint256 wad) external;\\n}\\n\"\r\n    },\r\n    \"contracts/OrderLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nlibrary OrderLib {\\n    struct Order {\\n        uint64 id; // order id\\n        uint32 status; // status: deadline, canceled or completed\\n        uint32 time; // order creation timestamp\\n        uint32 filledTime; // last fill timestamp\\n        uint256 srcFilledAmount; // srcToken total filled amount\\n        address maker; // order creator\\n        Ask ask; // order ask parameters\\n        Bid bid; // current winning bid\\n    }\\n\\n    struct Ask {\\n        address exchange; // restirct swap to this exchange, or zero address for any exchange\\n        address srcToken; // input token\\n        address dstToken; // output token\\n        uint256 srcAmount; // input total order amount\\n        uint256 srcBidAmount; // input chunk size\\n        uint256 dstMinAmount; // minimum output chunk size\\n        uint32 deadline; // order duration timestamp\\n        uint32 bidDelay; // minimum delay in seconds before a bid can be filled\\n        uint32 fillDelay; // minimum delay in seconds between chunks\\n        bytes data; // optional swap data for exchange\\n    }\\n\\n    struct Bid {\\n        uint32 time; // bid creation timestamp\\n        address taker; // bidder\\n        address exchange; // execute bid on this exchange, never zero\\n        uint256 dstAmount; // dstToken actual output amount for this bid after exchange fees, taker fee and slippage\\n        uint256 dstFee; // dstToken requested by taker for performing the bid and fill\\n        bytes data; // optional additional swap data for exchange\\n    }\\n\\n    /**\\n     * new Order for msg.sender\\n     */\\n    function newOrder(uint64 id, Ask calldata ask) internal view returns (Order memory) {\\n        require(\\n            block.timestamp < type(uint32).max &&\\n                ask.deadline < type(uint32).max &&\\n                ask.bidDelay < type(uint32).max &&\\n                ask.fillDelay < type(uint32).max,\\n            \\\"uint32\\\"\\n        );\\n        return\\n            Order(\\n                id,\\n                ask.deadline, // status\\n                uint32(block.timestamp), // time\\n                0, // filledTime\\n                0, // srcFilledAmount\\n                msg.sender, // maker\\n                ask,\\n                Bid(\\n                    0, // time\\n                    address(0), // taker\\n                    address(0), // exchange\\n                    0, // dstAmount\\n                    0, // dstFee\\n                    new bytes(0) // data\\n                )\\n            );\\n    }\\n\\n    /**\\n     * new Bid\\n     */\\n    function newBid(\\n        Order memory self,\\n        address exchange,\\n        uint256 dstAmountOut,\\n        uint256 dstFee,\\n        bytes memory data\\n    ) internal view {\\n        require(block.timestamp < type(uint32).max, \\\"uint32\\\");\\n        self.bid = OrderLib.Bid(uint32(block.timestamp), msg.sender, exchange, dstAmountOut, dstFee, data);\\n    }\\n\\n    /**\\n     * chunk filled\\n     */\\n    function filled(Order memory self, uint256 srcAmountIn) internal view {\\n        require(block.timestamp < type(uint32).max, \\\"uint32\\\");\\n        delete self.bid;\\n        self.filledTime = uint32(block.timestamp);\\n        self.srcFilledAmount += srcAmountIn;\\n    }\\n\\n    /**\\n     * next chunk srcToken: either ask.srcBidAmount or leftover\\n     */\\n    function srcBidAmountNext(Order memory self) internal pure returns (uint256) {\\n        return Math.min(self.ask.srcBidAmount, self.ask.srcAmount - self.srcFilledAmount);\\n    }\\n\\n    /**\\n     * next chunk dstToken minimum amount out\\n     */\\n    function dstMinAmountNext(Order memory self) internal pure returns (uint256) {\\n        return (self.ask.dstMinAmount * srcBidAmountNext(self)) / self.ask.srcBidAmount;\\n    }\\n\\n    /**\\n     * next chunk expected output in dstToken, or winning bid, to be sent to maker (after fees)\\n     */\\n    function dstExpectedOutNext(Order memory self) internal pure returns (uint256) {\\n        return Math.max(self.bid.dstAmount, dstMinAmountNext(self));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/periphery/Lens.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../OrderLib.sol\\\";\\nimport \\\"../TWAP.sol\\\";\\n\\n/**\\n * Helper contract to allow for efficient paginated filtered reads of Orders, instead of relying on events\\n */\\ncontract Lens {\\n    using OrderLib for OrderLib.Order;\\n\\n    TWAP public immutable twap;\\n\\n    constructor(TWAP _twap) {\\n        twap = _twap;\\n    }\\n\\n    function length() public view returns (uint64) {\\n        return twap.length();\\n    }\\n\\n    function makerOrders(address maker) external view returns (OrderLib.Order[] memory result) {\\n        uint64[] memory orderIds = twap.orderIdsByMaker(maker);\\n\\n        result = new OrderLib.Order[](orderIds.length);\\n        for (uint64 i = 0; i < result.length; i++) {\\n            uint64 id = orderIds[i];\\n            result[i] = twap.order(id);\\n        }\\n    }\\n\\n    /**\\n     * returns all orders waiting to be bid on now by the taker, paginated\\n     * taker: desired taker\\n     * lastIndex: last order id, start with length-1\\n     * pageSize: size of iteration restricted by block gas limit. 2500 is measured to be < 15m gas\\n     */\\n    function takerBiddableOrders(\\n        address taker,\\n        uint64 lastIndex,\\n        uint64 pageSize\\n    ) external view returns (OrderLib.Order[] memory result) {\\n        OrderLib.Order[] memory orders = paginated(lastIndex, pageSize);\\n        uint64 count = 0;\\n\\n        for (uint64 i = 0; i < orders.length; i++) {\\n            uint64 id = lastIndex - i;\\n            if (block.timestamp < twap.status(id)) {\\n                OrderLib.Order memory o = twap.order(id);\\n                if (\\n                    block.timestamp > o.filledTime + o.ask.fillDelay && // after fill delay\\n                    (o.bid.taker != taker || block.timestamp > o.bid.time + twap.STALE_BID_SECONDS()) && // other taker or stale bid\\n                    ERC20(o.ask.srcToken).allowance(o.maker, address(twap)) >= o.srcBidAmountNext() && // maker allowance\\n                    ERC20(o.ask.srcToken).balanceOf(o.maker) >= o.srcBidAmountNext() // maker balance\\n                ) {\\n                    orders[count] = o;\\n                    count++;\\n                }\\n            }\\n        }\\n\\n        result = new OrderLib.Order[](count);\\n        for (uint64 i = 0; i < count; i++) {\\n            result[i] = orders[i];\\n        }\\n    }\\n\\n    /**\\n     * returns all orders waiting to be filled now by the taker, paginated\\n     * taker: desired taker\\n     * lastIndex: last order id, start with length-1\\n     * pageSize: size of iteration restricted by block gas limit. 2500 is measured to be < 15m gas\\n     */\\n    function takerFillableOrders(\\n        address taker,\\n        uint64 lastIndex,\\n        uint64 pageSize\\n    ) external view returns (OrderLib.Order[] memory result) {\\n        OrderLib.Order[] memory orders = paginated(lastIndex, pageSize);\\n        uint64 count = 0;\\n\\n        for (uint64 i = 0; i < orders.length; i++) {\\n            uint64 id = lastIndex - i;\\n            if (block.timestamp < twap.status(id)) {\\n                OrderLib.Order memory o = twap.order(id);\\n                if (\\n                    o.bid.taker == taker && // winning taker\\n                    block.timestamp > o.bid.time + o.ask.bidDelay && // after bid delay\\n                    ERC20(o.ask.srcToken).allowance(o.maker, address(twap)) >= o.srcBidAmountNext() && // maker allowance\\n                    ERC20(o.ask.srcToken).balanceOf(o.maker) >= o.srcBidAmountNext() // maker balance\\n                ) {\\n                    orders[count] = o;\\n                    count++;\\n                }\\n            }\\n        }\\n\\n        result = new OrderLib.Order[](count);\\n        for (uint64 i = 0; i < count; i++) {\\n            result[i] = orders[i];\\n        }\\n    }\\n\\n    function paginated(uint64 lastIndex, uint64 pageSize) private view returns (OrderLib.Order[] memory) {\\n        require(lastIndex < length(), \\\"lastIndex\\\");\\n        return new OrderLib.Order[](Math.min(lastIndex + 1, pageSize));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/periphery/Taker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../IExchange.sol\\\";\\nimport \\\"../OrderLib.sol\\\";\\nimport \\\"../TWAP.sol\\\";\\n\\n/**\\n * Helper contract for TWAP takers\\n * optionally swaps fee to native token at fill\\n */\\ncontract Taker {\\n    using SafeERC20 for ERC20;\\n\\n    TWAP public immutable twap;\\n    mapping(address => bool) public owners;\\n\\n    constructor(TWAP _twap, address[] memory _owners) {\\n        twap = _twap;\\n        for (uint i = 0; i < _owners.length; i++) owners[_owners[i]] = true;\\n    }\\n\\n    /**\\n     * Perform bid\\n     */\\n    function bid(\\n        uint64 id,\\n        address exchange,\\n        uint256 dstFee,\\n        uint32 slippagePercent,\\n        bytes calldata data\\n    ) external onlyOwners {\\n        twap.bid(id, exchange, dstFee, slippagePercent, data);\\n    }\\n\\n    /**\\n     * Execute the winning bid, optionally swap to native\\n     *\\n     * @param id OrderId\\n     * @param feeExchange optional IExchange address to swap for native token, can be 0\\n     * @param feeMinAmountOut optional native token minimum out, can be 0\\n     * @param feeData optional data to pass to feeExchange, can be empty\\n     */\\n    function fill(uint64 id, address feeExchange, uint256 feeMinAmountOut, bytes calldata feeData) external onlyOwners {\\n        twap.fill(id);\\n        OrderLib.Order memory o = twap.order(id);\\n\\n        if (o.ask.dstToken != twap.iweth() && o.ask.dstToken != address(0) && feeExchange != address(0)) {\\n            uint256 dstAmount = ERC20(o.ask.dstToken).balanceOf(address(this));\\n            ERC20(o.ask.dstToken).safeIncreaseAllowance(feeExchange, dstAmount);\\n            IExchange(feeExchange).swap(o.ask.dstToken, twap.iweth(), dstAmount, feeMinAmountOut, o.ask.data, feeData);\\n        }\\n\\n        rescue(o.ask.dstToken);\\n    }\\n\\n    /**\\n     * Send all balance of token, wrapped native and native to sender\\n     */\\n    function rescue(address token) public onlyOwners {\\n        if (ERC20(twap.iweth()).balanceOf(address(this)) > 0) {\\n            IWETH(twap.iweth()).withdraw(ERC20(twap.iweth()).balanceOf(address(this)));\\n        }\\n\\n        if (address(this).balance > 0) {\\n            Address.sendValue(payable(msg.sender), address(this).balance);\\n        }\\n\\n        if (token != address(0) && ERC20(token).balanceOf(address(this)) > 0) {\\n            ERC20(token).safeTransfer(msg.sender, ERC20(token).balanceOf(address(this)));\\n        }\\n    }\\n\\n    receive() external payable {} // solhint-disable-line no-empty-blocks\\n\\n    modifier onlyOwners() {\\n        require(owners[msg.sender], \\\"onlyOwners\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/MockDeflationaryToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * Burns 10% of every transfer\\n */\\ncontract MockDeflationaryToken is ERC20(\\\"MockDeflationaryToken\\\", \\\"MDT\\\") {\\n    constructor() {\\n        _mint(msg.sender, 100e18);\\n    }\\n\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal override {\\n        if (from != address(0) && to != address(0)) {\\n            _burn(to, amount / 10);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/MockExchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../IExchange.sol\\\";\\n\\ncontract MockExchange is IExchange {\\n    using SafeERC20 for ERC20;\\n\\n    uint256[] public amounts;\\n\\n    function setMockAmounts(uint256[] memory _amounts) public {\\n        amounts = _amounts;\\n    }\\n\\n    function getAmountOut(address, address, uint256, bytes calldata, bytes calldata) public view returns (uint256) {\\n        return amounts[amounts.length - 1];\\n    }\\n\\n    /**\\n     * assumes holds balance of dstToken\\n     */\\n    function swap(\\n        address _srcToken,\\n        address _dstToken,\\n        uint256 amountIn,\\n        uint256,\\n        bytes calldata,\\n        bytes calldata\\n    ) public {\\n        ERC20 srcToken = ERC20(_srcToken);\\n        ERC20 dstToken = ERC20(_dstToken);\\n        srcToken.safeTransferFrom(msg.sender, address(this), amountIn);\\n\\n        uint256 amountOut = amounts[amounts.length - 1];\\n        dstToken.safeTransfer(msg.sender, amountOut);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TWAP.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./OrderLib.sol\\\";\\nimport \\\"./IExchange.sol\\\";\\nimport \\\"./IWETH.sol\\\";\\n\\n/**\\n * ---------------------------\\n * Time-Weighted Average Price\\n * ---------------------------\\n *\\n * https://github.com/orbs-network/twap\\n *\\n * This smart contract allows the incentivized execution of a TWAP order (either a Limit Order or a Market Order) on any DEX, with the possibility of partial fills.\\n *\\n * A TWAP order breaks a larger order down into smaller trades or \\\"chunks\\\", which are executed over a set period of time.\\n * This is a common strategy in traditional finance but it was not previously possible to execute such trades in a decentralized manner in DeFi systems.\\n *\\n * In this smart contract, users (makers) create orders that wait in the contract to be filled. Once made, these orders enable an English Auction bidding war on each chunk at its time interval.\\n * Anyone willing to participate can serve as a \u201ctaker\u201d by finding the best path to fill the order for the next chunk on any DEX,\\n * within the parameters set by the maker. Takers submit these paths as a bid to the contract, which selects the winner based on criteria described in detail below.\\n *\\n * The winning taker receives a portion of the output tokens as a reward for their effort.\\n *\\n * One honest taker (i.e., a taker who is willing to set the fee at the minimum amount needed to cover gas costs)\\n * is enough to ensure the entire system functions effectively at spot prices.\\n *\\n * The contract is set to operate only up to the year 2106 (32bit timestamps), at which point it will no longer be usable.\\n *\\n * The TWAP Smart Contract does not hold any funds, has no owners, administrators, or other roles and is entirely immutable once deployed on an EVM blockchain.\\n *\\n */\\ncontract TWAP is ReentrancyGuard {\\n    using SafeERC20 for ERC20;\\n    using Address for address;\\n    using OrderLib for OrderLib.Order;\\n\\n    uint8 public constant VERSION = 4;\\n\\n    event OrderCreated(uint64 indexed id, address indexed maker, address indexed exchange, OrderLib.Ask ask);\\n    event OrderBid(\\n        uint64 indexed id,\\n        address indexed maker,\\n        address indexed exchange,\\n        uint32 slippagePercent,\\n        OrderLib.Bid bid\\n    );\\n    event OrderFilled(\\n        uint64 indexed id,\\n        address indexed maker,\\n        address indexed exchange,\\n        address taker,\\n        uint256 srcAmountIn,\\n        uint256 dstAmountOut,\\n        uint256 dstFee,\\n        uint256 srcFilledAmount\\n    );\\n    event OrderCompleted(uint64 indexed id, address indexed maker, address indexed exchange, address taker);\\n    event OrderCanceled(uint64 indexed id, address indexed maker, address sender);\\n\\n    uint32 public constant PERCENT_BASE = 100_000;\\n    uint32 public constant MIN_OUTBID_PERCENT = 101_000;\\n    uint32 public constant STALE_BID_SECONDS = 60 * 10;\\n    uint32 public constant MIN_BID_DELAY_SECONDS = 30;\\n\\n    uint32 public constant STATUS_CANCELED = 1;\\n    uint32 public constant STATUS_COMPLETED = 2;\\n\\n    OrderLib.Order[] public book;\\n    uint32[] public status; // STATUS or deadline timestamp by order id, used for gas efficient order filtering\\n    mapping(address => uint64[]) public makerOrders;\\n\\n    address public immutable iweth;\\n\\n    constructor(address _iweth) {\\n        iweth = _iweth;\\n    }\\n\\n    // -------- views --------\\n\\n    /**\\n     * returns Order by order id\\n     */\\n    function order(uint64 id) public view returns (OrderLib.Order memory) {\\n        require(id < length(), \\\"invalid id\\\");\\n        return book[id];\\n    }\\n\\n    /**\\n     * returns order book length\\n     */\\n    function length() public view returns (uint64) {\\n        return uint64(book.length);\\n    }\\n\\n    function orderIdsByMaker(address maker) external view returns (uint64[] memory) {\\n        return makerOrders[maker];\\n    }\\n\\n    // -------- actions --------\\n\\n    /**\\n     * Create Order by msg.sender (maker)\\n     *\\n     * returns order id, emits OrderCreated\\n     */\\n    function ask(OrderLib.Ask calldata _ask) external nonReentrant returns (uint64 id) {\\n        require(\\n            _ask.srcToken != address(0) &&\\n                _ask.srcToken != _ask.dstToken &&\\n                (_ask.srcToken != iweth || _ask.dstToken != address(0)) &&\\n                _ask.srcAmount > 0 &&\\n                _ask.srcBidAmount > 0 &&\\n                _ask.srcBidAmount <= _ask.srcAmount &&\\n                _ask.dstMinAmount > 0 &&\\n                _ask.deadline > block.timestamp &&\\n                _ask.bidDelay >= MIN_BID_DELAY_SECONDS,\\n            \\\"params\\\"\\n        );\\n\\n        OrderLib.Order memory o = OrderLib.newOrder(length(), _ask);\\n        verifyMakerBalance(o);\\n\\n        book.push(o);\\n        status.push(o.status);\\n        makerOrders[msg.sender].push(o.id);\\n        emit OrderCreated(o.id, o.maker, o.ask.exchange, o.ask);\\n        return o.id;\\n    }\\n\\n    /**\\n     * Bid for a specific order by id (msg.sender is taker)\\n     * A valid bid is higher than current bid, with sufficient price after fees and after last fill delay. Invalid bids are reverted.\\n     * id: order id\\n     * exchange: bid to swap on exchange\\n     * dstFee: fee to traker in dstToken, taken from the swapped amount\\n     * slippagePercent: price output difference tolerance percent / 100,000. 0 means no slippage\\n     * data: swap data to pass to the exchange, for example the route path\\n     * emits OrderBid event\\n     */\\n    function bid(\\n        uint64 id,\\n        address exchange,\\n        uint256 dstFee,\\n        uint32 slippagePercent,\\n        bytes calldata data\\n    ) external nonReentrant {\\n        require(exchange != address(0) && slippagePercent < PERCENT_BASE, \\\"params\\\");\\n        OrderLib.Order memory o = order(id);\\n        uint256 dstAmountOut = verifyBid(o, exchange, dstFee, slippagePercent, data);\\n        o.newBid(exchange, dstAmountOut, dstFee, data);\\n        book[id] = o;\\n        emit OrderBid(o.id, o.maker, exchange, slippagePercent, o.bid);\\n    }\\n\\n    /**\\n     * Fill the current winning bid by the winning taker, if after the bidding window. Invalid fills are reverted.\\n     * id: order id\\n     * emits OrderFilled\\n     * if order is fully filled emits OrderCompleted and status is updated\\n     */\\n    function fill(uint64 id) external nonReentrant {\\n        OrderLib.Order memory o = order(id);\\n\\n        (address exchange, uint256 srcAmountIn, uint256 dstAmountOut, uint256 dstFee) = performFill(o);\\n        o.filled(srcAmountIn);\\n\\n        emit OrderFilled(id, o.maker, exchange, msg.sender, srcAmountIn, dstAmountOut, dstFee, o.srcFilledAmount);\\n\\n        if (o.srcBidAmountNext() == 0) {\\n            status[id] = STATUS_COMPLETED;\\n            o.status = STATUS_COMPLETED;\\n            emit OrderCompleted(o.id, o.maker, exchange, msg.sender);\\n        }\\n        book[id] = o;\\n    }\\n\\n    /**\\n     * Cancel order by id, only callable by maker\\n     * id: order id\\n     * emits OrderCanceled\\n     */\\n    function cancel(uint64 id) external nonReentrant {\\n        OrderLib.Order memory o = order(id);\\n        require(msg.sender == o.maker, \\\"maker\\\");\\n        status[id] = STATUS_CANCELED;\\n        o.status = STATUS_CANCELED;\\n        book[id] = o;\\n        emit OrderCanceled(o.id, o.maker, msg.sender);\\n    }\\n\\n    /**\\n     * Called by anyone to mark a stale invalid order as canceled\\n     * id: order id\\n     * emits OrderCanceled\\n     */\\n    function prune(uint64 id) external nonReentrant {\\n        OrderLib.Order memory o = order(id);\\n        require(block.timestamp < o.status, \\\"status\\\");\\n        require(block.timestamp > o.filledTime + o.ask.fillDelay, \\\"fill delay\\\");\\n        require(\\n            ERC20(o.ask.srcToken).allowance(o.maker, address(this)) < o.srcBidAmountNext() ||\\n                ERC20(o.ask.srcToken).balanceOf(o.maker) < o.srcBidAmountNext(),\\n            \\\"valid\\\"\\n        );\\n        status[id] = STATUS_CANCELED;\\n        o.status = STATUS_CANCELED;\\n        book[id] = o;\\n        emit OrderCanceled(o.id, o.maker, msg.sender);\\n    }\\n\\n    /**\\n     * ---- internals ----\\n     */\\n\\n    /**\\n     * verifies the bid against the ask params, reverts on invalid bid.\\n     * returns dstAmountOut after taker dstFee, which must be higher than any previous bid, unless previous bid is stale\\n     */\\n    function verifyBid(\\n        OrderLib.Order memory o,\\n        address exchange,\\n        uint256 dstFee,\\n        uint32 slippagePercent,\\n        bytes calldata data\\n    ) private view returns (uint256 dstAmountOut) {\\n        require(block.timestamp < o.status, \\\"status\\\"); // deadline, canceled or completed\\n        require(block.timestamp > o.filledTime + o.ask.fillDelay, \\\"fill delay\\\");\\n        require(o.ask.exchange == address(0) || o.ask.exchange == exchange, \\\"exchange\\\");\\n\\n        dstAmountOut = IExchange(exchange).getAmountOut(\\n            o.ask.srcToken,\\n            _dstToken(o),\\n            o.srcBidAmountNext(),\\n            o.ask.data,\\n            data\\n        );\\n        dstAmountOut -= (dstAmountOut * slippagePercent) / PERCENT_BASE;\\n        dstAmountOut -= dstFee;\\n\\n        require(\\n            dstAmountOut > (o.bid.dstAmount * MIN_OUTBID_PERCENT) / PERCENT_BASE || // outbid by more than MIN_OUTBID_PERCENT\\n                block.timestamp > o.bid.time + STALE_BID_SECONDS, // or stale bid\\n            \\\"low bid\\\"\\n        );\\n        require(dstAmountOut >= o.dstMinAmountNext(), \\\"min out\\\");\\n        verifyMakerBalance(o);\\n    }\\n\\n    /**\\n     * executes the winning bid. reverts if bid no longer valid.\\n     * transfers next chunk srcToken amount from maker, swaps via bid exchange with bid data, transfers dstFee to taker (msg.sender) and\\n     * transfers all other dstToken amount to maker\\n     */\\n    function performFill(\\n        OrderLib.Order memory o\\n    ) private returns (address exchange, uint256 srcAmountIn, uint256 dstAmountOut, uint256 dstFee) {\\n        require(msg.sender == o.bid.taker, \\\"taker\\\");\\n        require(block.timestamp < o.status, \\\"status\\\"); // deadline, canceled or completed\\n        require(block.timestamp > o.bid.time + o.ask.bidDelay, \\\"bid delay\\\");\\n\\n        exchange = o.bid.exchange;\\n        dstFee = o.bid.dstFee;\\n        srcAmountIn = o.srcBidAmountNext();\\n        uint256 minOut = o.dstExpectedOutNext();\\n\\n        ERC20(o.ask.srcToken).safeTransferFrom(o.maker, address(this), srcAmountIn);\\n        srcAmountIn = ERC20(o.ask.srcToken).balanceOf(address(this)); // support FoT tokens\\n        ERC20(o.ask.srcToken).safeIncreaseAllowance(exchange, srcAmountIn);\\n\\n        IExchange(exchange).swap(o.ask.srcToken, _dstToken(o), srcAmountIn, minOut + dstFee, o.ask.data, o.bid.data);\\n\\n        dstAmountOut = ERC20(_dstToken(o)).balanceOf(address(this)); // support FoT tokens\\n        dstAmountOut -= dstFee;\\n        require(dstAmountOut >= minOut, \\\"min out\\\");\\n\\n        if (o.ask.dstToken == address(0)) {\\n            IWETH(iweth).withdraw(ERC20(iweth).balanceOf(address(this)));\\n            Address.sendValue(payable(o.bid.taker), dstFee);\\n            Address.sendValue(payable(o.maker), dstAmountOut);\\n        } else {\\n            ERC20(_dstToken(o)).safeTransfer(o.bid.taker, dstFee);\\n            ERC20(_dstToken(o)).safeTransfer(o.maker, dstAmountOut);\\n        }\\n    }\\n\\n    /**\\n     * reverts if maker does not hold enough balance srcToken or allowance to be spent here for the next chunk\\n     */\\n    function verifyMakerBalance(OrderLib.Order memory o) private view {\\n        require(ERC20(o.ask.srcToken).allowance(o.maker, address(this)) >= o.srcBidAmountNext(), \\\"maker allowance\\\");\\n        require(ERC20(o.ask.srcToken).balanceOf(o.maker) >= o.srcBidAmountNext(), \\\"maker balance\\\");\\n    }\\n\\n    function _dstToken(OrderLib.Order memory o) private view returns (address) {\\n        return o.ask.dstToken == address(0) ? iweth : o.ask.dstToken;\\n    }\\n\\n    receive() external payable {} // solhint-disable-line no-empty-blocks\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_iweth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"slippagePercent\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"time\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dstAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct OrderLib.Bid\",\"name\":\"bid\",\"type\":\"tuple\"}],\"name\":\"OrderBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"OrderCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"}],\"name\":\"OrderCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"srcBidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstMinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"bidDelay\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fillDelay\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct OrderLib.Ask\",\"name\":\"ask\",\"type\":\"tuple\"}],\"name\":\"OrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcAmountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dstAmountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dstFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcFilledAmount\",\"type\":\"uint256\"}],\"name\":\"OrderFilled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_BID_DELAY_SECONDS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_OUTBID_PERCENT\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_BASE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STALE_BID_SECONDS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STATUS_CANCELED\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STATUS_COMPLETED\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"srcBidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstMinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"bidDelay\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fillDelay\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderLib.Ask\",\"name\":\"_ask\",\"type\":\"tuple\"}],\"name\":\"ask\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dstFee\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"slippagePercent\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"book\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"status\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"time\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"filledTime\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"srcFilledAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"srcBidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstMinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"bidDelay\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fillDelay\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderLib.Ask\",\"name\":\"ask\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"time\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dstAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderLib.Bid\",\"name\":\"bid\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"}],\"name\":\"fill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iweth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"length\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"makerOrders\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"}],\"name\":\"order\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"status\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"time\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"filledTime\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"srcFilledAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"srcBidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstMinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"deadline\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"bidDelay\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fillDelay\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderLib.Ask\",\"name\":\"ask\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"time\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dstAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderLib.Bid\",\"name\":\"bid\",\"type\":\"tuple\"}],\"internalType\":\"struct OrderLib.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"}],\"name\":\"orderIdsByMaker\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"}],\"name\":\"prune\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"status\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TWAP", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6aab87ac5963a4c053bfc0bd2017e709cafddd74e192df5570e9e77af2b9d742"}