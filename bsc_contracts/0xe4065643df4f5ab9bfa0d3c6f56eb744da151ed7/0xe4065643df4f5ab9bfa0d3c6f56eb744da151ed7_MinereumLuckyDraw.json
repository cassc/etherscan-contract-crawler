{"SourceCode": "pragma solidity ^0.7.5;\r\n\r\ninterface Minereum {\r\n  function Payment (  ) payable external; \r\n  function availableBalanceOf(address _address) external view returns (uint256 Balance);\r\n}\r\n\r\ninterface BazarSwap {\r\n  function getWeiPriceUnitTokenList (address seller, address tokenAddress) external view returns (uint);  \r\n}\r\n\r\ncontract MinereumLuckyDraw\r\n{\r\n\tMinereum public mne;\r\n\tuint public stakeHoldersfee = 50;\r\n\tuint public percentWin = 70;\r\n\tuint public percentWinOthers = 7;\r\n\tuint public mnefee = 1000000000;\r\n\tuint public ethfee = 0;\r\n\tuint public totalSentToStakeHolders = 0;\r\n\tuint public totalPaidOut = 0;\r\n\tuint public ticketsSold = 0;\r\n\tuint public ticketsPlayed = 0;\r\n\taddress public owner = 0x0000000000000000000000000000000000000000;\t\r\n\tuint public maxNumber = 100001;\r\n\tuint public systemNumber = 32323;\r\n\tuint public totalMneBurned = 0;\r\n\t\r\n\tuint public blockInterval = 10;\r\n\tuint public midBlock = 8;\r\n\tuint public maxBlock = 256;\r\n\t\r\n\t//winners from past contracts\r\n\tuint public winnersCount = 0;\r\n\tuint public winnersEthCount = 0;\r\n\t\r\n\taddress[] public winners;\r\n\tuint[] public winnersTickets;\r\n\tuint[] public winnersETH;\r\n\tuint[] public winnersTimestamp;\r\n\t\r\n\tuint public bazarSwapCount = 0;\r\n\tbool public bazarSwapActive = true;\r\n\tBazarSwap public bazar;\r\n\t\r\n\taddress public lastPlayer1;\r\n\taddress public lastPlayer2;\r\n\taddress public lastPlayer3;\r\n\t\r\n\tmapping (address => mapping (address => bool)) public bazarSwapClaimed;\r\n\r\n\tmapping (address => uint256) public playerBlock;\r\n\tmapping (address => uint256) public playerTickets;\r\n\t\r\n\tevent Numbers(address indexed from, uint[] n, string m);\r\n\t\r\n\tconstructor() public\r\n\t{\r\n\t\tmne = Minereum(0xD22202d23fE7dE9E3DbE11a2a88F42f4CB9507cf);\r\n\t\tbazar = BazarSwap(0xb3cD2Bf2DC3D92E5647953314561d10a9B7CF473);\r\n\t\towner = msg.sender;\r\n\t\t//data from old contract\r\n\t\tticketsPlayed = 0;\r\n\t\tticketsSold = 0;\r\n\t\ttotalSentToStakeHolders = 0;\r\n\t}\r\n\t\r\n\treceive() external payable { }\r\n\t\r\n\tfunction LuckyDraw() public\r\n    {\r\n        require(msg.sender == tx.origin);\r\n\t\t\r\n\t\tif (block.number >= playerBlock[msg.sender] + maxBlock) //256\r\n\t\t{\r\n\t\t\tuint[] memory empty = new uint[](0);\t\r\n\t\t\temit Numbers(address(this), empty, \"Your tickets expired or are invalid. Try Again.\");\r\n\t\t\tplayerBlock[msg.sender] = 0;\r\n\t\t\tplayerTickets[msg.sender] = 0;\t\t\t\r\n\t\t}\t\t\r\n\t\telse if (block.number > playerBlock[msg.sender] + blockInterval)\r\n\t\t{\r\n\t\t\tbool win = false;\r\n\r\n\t\t\tuint[] memory numbers = new uint[](playerTickets[msg.sender]);\t\t\r\n\t\t\t\r\n\t\t\tuint i = 0;\r\n\t\t\twhile (i < playerTickets[msg.sender])\r\n\t\t\t{\r\n\t\t\t\tnumbers[i] = uint256(uint256(keccak256(abi.encodePacked(blockhash(playerBlock[msg.sender] + midBlock), i)))%maxNumber);\r\n\t\t\t\tif (numbers[i] == systemNumber)\r\n\t\t\t\t\twin = true;\r\n\t\t\t\ti++;\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tticketsPlayed += playerTickets[msg.sender];\r\n\t\t\t\t\t\t\r\n\t\t\t\r\n\t\t\tif (win)\r\n\t\t\t{\r\n\t\t\t\taddress payable add = payable(msg.sender);\r\n\t\t\t\taddress payable player1 = payable(lastPlayer1);\r\n\t\t\t\taddress payable player2 = payable(lastPlayer2);\r\n\t\t\t\taddress payable player3 = payable(lastPlayer3);\r\n\t\t\t\tuint contractBalance = address(this).balance;\r\n\t\t\t\tuint winAmount = contractBalance * percentWin / 100;\r\n\t\t\t\tuint winAmountPlayer1 = contractBalance * percentWinOthers / 100;\r\n\t\t\t\tuint winAmountPlayer2 = contractBalance * percentWinOthers / 100;\r\n\t\t\t\tuint winAmountPlayer3 = contractBalance * percentWinOthers / 100;\r\n\t\t\t\tif (!add.send(winAmount)) revert('Error While Executing Payment.');\r\n\t\t\t\tif (!player1.send(winAmountPlayer1)) revert('Error While Executing Payment.');\r\n\t\t\t\tif (!player2.send(winAmountPlayer2)) revert('Error While Executing Payment.');\r\n\t\t\t\tif (!player3.send(winAmountPlayer3)) revert('Error While Executing Payment.');\r\n\t\t\t\ttotalPaidOut += winAmount;\r\n\t\t\t\t\r\n\t\t\t\twinnersCount++;\r\n\t\t\t\twinnersEthCount += winAmount;\r\n\t\t\t\temit Numbers(address(this), numbers, \"YOU WON!\");\r\n\t\t\t\t\r\n\t\t\t\twinners.push(msg.sender);\r\n\t\t\t\twinnersTickets.push(playerTickets[msg.sender]);\r\n\t\t\t\twinnersETH.push(winAmount);\r\n\t\t\t\twinnersTimestamp.push(block.timestamp);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\temit Numbers(address(this), numbers, \"Your numbers don't match the System Number! Try Again.\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (lastPlayer1 != msg.sender)\r\n\t\t\t{\r\n\t\t\t\tlastPlayer3 = lastPlayer2;\r\n\t\t\t\tlastPlayer2 = lastPlayer1;\t\t\t\r\n\t\t\t\tlastPlayer1 = msg.sender;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tplayerBlock[msg.sender] = 0;\r\n\t\t\tplayerTickets[msg.sender] = 0;\t\t\t\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\trevert('Players must wait 3 blocks');\r\n\t\t}\r\n    }\r\n\t\r\n\tfunction BuyTickets(address _sender, uint256[] memory _max) public payable returns (uint256)\r\n    {\r\n\t\trequire(msg.sender == address(mne));\r\n\t\trequire(_sender == tx.origin);\r\n\t\t\r\n\t\tif (_max[0] == 0) revert('value is 0');\r\n\t\t\r\n\t\tif (playerBlock[_sender] == 0)\r\n\t\t{\t\r\n\t\t\tticketsSold += _max[0];\t\t\t\r\n\t\t\tuint totalMnefee = mnefee * _max[0];\r\n\t\t\t\r\n\t\t\tif (mne.availableBalanceOf(_sender) < totalMnefee) revert('ERROR: Not enough MNEB');\t\t\t\r\n\t\t\t\r\n\t\t\ttotalMneBurned += totalMnefee;\r\n\t\t\t\r\n\t\t\tplayerBlock[_sender] = block.number;\r\n\t\t\tplayerTickets[_sender] = _max[0];\t\t\t\r\n\t\t\t\r\n\t\t\treturn totalMnefee;\r\n\t\t}\r\n\t\telse \r\n\t\t{\r\n\t\t\trevert('You must play the tickets first');\r\n\t\t}\r\n    }\r\n\t\r\n\tfunction ClaimBazarSwapTickets(address tokenAddress) public\r\n    {\r\n\t\trequire(msg.sender == tx.origin);\r\n\t\t\r\n\t\tif (playerBlock[msg.sender] > 0) revert('You must play the tickets you have first');\r\n\t\t\r\n\t\tif (bazarSwapClaimed[msg.sender][tokenAddress]) revert('Ticket already claimed');\r\n\t\t\r\n\t\tif (bazar.getWeiPriceUnitTokenList(msg.sender, tokenAddress) == 0) revert('Token not set for sale');\r\n\t\t\r\n\t\tplayerBlock[msg.sender] = block.number;\r\n\t\tplayerTickets[msg.sender] = 1;\t\r\n\t\tbazarSwapClaimed[msg.sender][tokenAddress] = true;\t\t\r\n    }\t\r\n\t\r\n\tfunction GetBazarSwapClaimed(address _address, address _token) public view returns (bool)\r\n\t{\r\n\t\treturn bazarSwapClaimed[_address][_token];\r\n\t}\r\n\t\r\n\tfunction transferFundsOut() public\r\n\t{\r\n\t\tif (msg.sender == owner)\r\n\t\t{\r\n\t\t\taddress payable add = payable(msg.sender);\r\n\t\t\tuint contractBalance = address(this).balance;\r\n\t\t\tif (!add.send(contractBalance)) revert('Error While Executing Payment.');\t\t\t\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\trevert();\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction updateFees(uint _stakeHoldersfee, uint _mnefee, uint _ethfee, uint _blockInterval, bool _bazarSwapActive, uint _maxBlock, uint _midBlock) public\r\n\t{\r\n\t\tif (msg.sender == owner)\r\n\t\t{\r\n\t\t\tstakeHoldersfee = _stakeHoldersfee;\r\n\t\t\tmnefee = _mnefee;\r\n\t\t\tethfee = _ethfee;\r\n\t\t\tblockInterval = _blockInterval;\r\n\t\t\tbazarSwapActive = _bazarSwapActive;\r\n\t\t\tmaxBlock = _maxBlock;\r\n\t\t\tmidBlock = _midBlock;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\trevert();\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction updateSystemNumber(uint _systemNumber) public\r\n\t{\r\n\t\tif (msg.sender == owner)\r\n\t\t{\r\n\t\t\tsystemNumber = _systemNumber;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\trevert();\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction updateMaxNumber(uint _maxNumber) public\r\n\t{\r\n\t\tif (msg.sender == owner)\r\n\t\t{\r\n\t\t\tmaxNumber = _maxNumber;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\trevert();\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction updatePercentWin(uint _percentWin) public\r\n\t{\r\n\t\tif (msg.sender == owner)\r\n\t\t{\r\n\t\t\tpercentWin = _percentWin;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\trevert();\r\n\t\t}\r\n\t}\t\r\n\t\r\n\tfunction updateMNEContract(address _mneAddress) public\r\n\t{\r\n\t\tif (msg.sender == owner)\r\n\t\t{\r\n\t\t\tmne = Minereum(_mneAddress);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\trevert();\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction updateBazarContract(address _address) public\r\n\t{\r\n\t\tif (msg.sender == owner)\r\n\t\t{\r\n\t\t\tbazar = BazarSwap(_address);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\trevert();\r\n\t\t}\r\n\t}\t\r\n\t\r\n\tfunction WinnersLength() public view returns (uint256) { return winners.length; }\t\r\n\tfunction GetPlayerBlock(address _address) public view returns (uint256) { return playerBlock[_address]; }\r\n\tfunction GetPlayerTickets(address _address) public view returns (uint256) { return playerTickets[_address]; }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"n\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"m\",\"type\":\"string\"}],\"name\":\"Numbers\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_max\",\"type\":\"uint256[]\"}],\"name\":\"BuyTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"ClaimBazarSwapTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"GetBazarSwapClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"GetPlayerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"GetPlayerTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LuckyDraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WinnersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bazar\",\"outputs\":[{\"internalType\":\"contract BazarSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bazarSwapActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bazarSwapClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bazarSwapCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPlayer1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPlayer2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPlayer3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"midBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mne\",\"outputs\":[{\"internalType\":\"contract Minereum\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mnefee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentWin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentWinOthers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeHoldersfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"systemNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketsPlayed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketsSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMneBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPaidOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSentToStakeHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFundsOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateBazarContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeHoldersfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mnefee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ethfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blockInterval\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_bazarSwapActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_maxBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_midBlock\",\"type\":\"uint256\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mneAddress\",\"type\":\"address\"}],\"name\":\"updateMNEContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxNumber\",\"type\":\"uint256\"}],\"name\":\"updateMaxNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentWin\",\"type\":\"uint256\"}],\"name\":\"updatePercentWin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_systemNumber\",\"type\":\"uint256\"}],\"name\":\"updateSystemNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winnersETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnersEthCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winnersTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winnersTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MinereumLuckyDraw", "CompilerVersion": "v0.7.5+commit.eb77ed08", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://240308be6acf4f7529aca161e9e334f46e3681b9553dd6bc55846573b2289db7"}