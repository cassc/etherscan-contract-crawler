{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/OtoriFactory-current-mainnet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IOtoriFactory.sol\\\";\\n\\ncontract OtoriFactory is IOtoriFactory, OwnableUpgradeable, PausableUpgradeable {\\n    uint256 constant public BONE = 1e18;\\n    PoolInfo[] public pools;\\n    //index -> bool\\n    mapping(uint256 => bool) public isRunning;\\n    mapping(uint256 => mapping(address => uint256)) public userBalanceInPool;\\n    mapping(uint256 => mapping(address => uint256)) public nextIndexBalance;\\n    mapping(uint256 => uint256[]) public pnl;\\n    mapping(address => uint256) public unAllocateBalance;\\n    uint256 public adminConfigDuration;\\n    uint256 public investDuration;\\n    uint256 public epoch;\\n    uint256 public baseTime;\\n    uint256 public totalStoppedPool;\\n    address public depositToken;\\n    uint256 public totalPerformance;\\n    uint256 public totalWithdraw;\\n    uint256 public totalBalance;\\n    uint256 public totalUnAllocate;\\n    mapping(uint256 => uint256) public lastTotalAmount;\\n    mapping(address => uint256) public totalUserWithdraw;\\n    bool public tick;\\n    uint256 constant public BLOCK_TIME = 3;\\n\\n    event PoolCreated(uint256 index, PoolInfo poolInfo, uint256 start, uint256 end);\\n    event PoolStopped(uint256 index);\\n    event PoolActive(uint256 index);\\n    event ChangeAdminConfigDuration(uint256 adminConfigDuration);\\n    event ChangeInvestDuration(uint256 investDuration);\\n    event ChangeEpoch(uint256 epoch);\\n\\n    event AdminWithdrawTokenFromPool(address user, uint256 index, uint256 totalAmount);\\n    event AdminDepositTokenToPool(address user, uint256 index, uint256 feeAmount, uint256 claimableAmount);\\n    event UserAdjustPoolValue(address user, uint256 fromPool, uint256 toPool, uint256 amount);\\n    event UserWithdraw(address user, uint256 amount);\\n    event UserDeposit(address user, uint256 amount);\\n    event UserAllocatePoolWithIndex(uint256 index, address user, uint256 amount);\\n    event UserRedeemPoolWithIndex(uint256 index, address user, uint256 amount);\\n\\n    function initialize(\\n        uint256 _adminConfigDuration,\\n        uint256 _investDuration,\\n        uint256 _epoch,\\n        address _depositToken\\n    ) public initializer {\\n        __Ownable_init();\\n        __Pausable_init();\\n        adminConfigDuration = _adminConfigDuration;\\n        investDuration = _investDuration;\\n        epoch = _epoch;\\n        depositToken = _depositToken;\\n    }\\n    // admin function\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function createPool(\\n        PoolInfo memory poolInfo\\n    ) external onlyOwner {\\n        require(inAdminConfigTime() || isAllPoolStopped(), \\\"Invalid time\\\");\\n        _reInitBaseTime();\\n        uint256 newIndex = pools.length;\\n        pools.push(poolInfo);\\n        isRunning[newIndex] = true;\\n        (uint256 start, uint256 end,,) = getLatestStartEpoch();\\n        emit PoolCreated(newIndex, poolInfo, start, end);\\n    }\\n\\n    function stopPool(uint256 index) external onlyOwner {\\n        require(inAdminConfigTime(), \\\"Invalid time\\\");\\n        require(isValidateIndex(index), \\\"Invalid index\\\");\\n        require(isRunningPool(index), \\\"Pool has been stopped\\\");\\n        isRunning[index] = false;\\n        PoolInfo storage pool = pools[index];\\n        totalStoppedPool++;\\n        if (isAllPoolStopped()) {\\n            baseTime = 0;\\n        }\\n        emit PoolStopped(index);\\n    }\\n\\n    function activePool(uint256 index) external onlyOwner {\\n        require(inAdminConfigTime() || isAllPoolStopped(), \\\"Invalid time\\\");\\n        require(isValidateIndex(index), \\\"Invalid index\\\");\\n        require(!isRunningPool(index), \\\"Pool has been actived\\\");\\n        isRunning[index] = true;\\n        PoolInfo storage pool = pools[index];\\n        totalStoppedPool--;\\n        if (totalStoppedPool == pools.length - 1) {\\n            _reInitBaseTime();\\n        }\\n        emit PoolActive(index);\\n    }\\n\\n    function changeBaseTime(uint256 _baseTime) external onlyOwner {\\n        if (_baseTime == 0) {\\n            baseTime = block.timestamp;\\n        } else {\\n            baseTime = _baseTime;\\n        }\\n    }\\n\\n    function changeAdminConfigDuration(\\n        uint256 _adminConfigDuration\\n    ) external onlyOwner {\\n//        require(inAdminConfigTime(), \\\"Invalid time\\\");\\n        _reInitBaseTime();\\n        require(baseTime + _adminConfigDuration >= block.timestamp, \\\"Not valid time\\\");\\n        adminConfigDuration = _adminConfigDuration;\\n        uint256 estimateBlock = adminConfigDuration / BLOCK_TIME;\\n        emit ChangeAdminConfigDuration(estimateBlock);\\n    }\\n\\n    function changeInvestDuration(\\n        uint256 _investDuration\\n    ) external onlyOwner {\\n//        require(inAdminConfigTime(), \\\"Invalid time\\\");\\n        _reInitBaseTime();\\n        require(baseTime + adminConfigDuration + _investDuration >= block.timestamp, \\\"Not valid time\\\");\\n        investDuration = _investDuration;\\n        uint256 estimateBlock = investDuration / BLOCK_TIME;\\n        emit ChangeInvestDuration(estimateBlock);\\n    }\\n\\n    function changeEpoch(\\n        uint256 _epoch\\n    ) external onlyOwner {\\n//        require(inAdminConfigTime(), \\\"Invalid time\\\");\\n        _reInitBaseTime();\\n        require(baseTime + adminConfigDuration + investDuration + _epoch >= block.timestamp, \\\"Not valid time\\\");\\n        epoch = _epoch;\\n        uint256 estimateBlock = epoch / BLOCK_TIME;\\n        emit ChangeEpoch(estimateBlock);\\n    }\\n\\n    function withdrawTokenFromPool(uint256 index) external whenNotPaused {\\n        require(inEpochTime(), \\\"Invalid time\\\");\\n        require(tick, \\\"Invalid action, need deposit\\\");\\n        tick = false;\\n        PoolInfo storage pool = pools[index];\\n        require(pool.investor == msg.sender, \\\"Invalid sender\\\");\\n        uint256 totalAmount = pool.totalAmount;\\n        lastTotalAmount[index] = totalAmount;\\n        pool.totalAmount = 0;\\n        IERC20(depositToken).transfer(msg.sender, totalAmount);\\n        emit AdminWithdrawTokenFromPool(msg.sender, index, totalAmount);\\n    }\\n\\n    function depositTokenToPool(\\n        uint256 index,\\n        uint256 amount,\\n        uint256 annualFee,\\n        address[] memory users,\\n        uint256[] memory amounts,\\n        uint256[] memory types\\n    ) external whenNotPaused {\\n        require(inAdminConfigTime(), \\\"Invalid time\\\");\\n        require(!tick, \\\"Invalid action, need withdraw\\\");\\n        tick = true;\\n        require(users.length == amounts.length && users.length == types.length, \\\"Invalid length\\\");\\n        PoolInfo storage pool = pools[index];\\n        require(pool.investor == msg.sender, \\\"Invalid sender\\\");\\n        if (lastTotalAmount[index] != 0) {\\n            uint256 feeAmount = 0;\\n            if (amount >= lastTotalAmount[index]) {\\n                feeAmount = (amount - lastTotalAmount[index])* pool.feePercent / BONE;\\n            }\\n            uint256 claimable = amount - feeAmount - annualFee;\\n            pnl[index].push(claimable * BONE / lastTotalAmount[index]);\\n            pool.totalAmount = claimable;\\n            totalBalance = totalBalance + claimable - lastTotalAmount[index];\\n            totalPerformance = totalPerformance + annualFee + feeAmount;\\n            IERC20(depositToken).transferFrom(msg.sender, pool.feeReceiver, feeAmount);\\n            IERC20(depositToken).transferFrom(msg.sender, pool.annualFeeReceiver, annualFee);\\n            IERC20(depositToken).transferFrom(msg.sender, address(this), claimable);\\n            emit AdminDepositTokenToPool(msg.sender, index, feeAmount, claimable);\\n        }\\n        adjustByOwner(index, users, amounts, types);\\n    }\\n\\n    function redeemByOwner(\\n        uint256[] memory indexes,\\n        address[] memory users\\n    ) external onlyOwner {\\n        require(inAdminConfigTime(), \\\"Invalid time\\\");\\n        for (uint256 i = 0; i < indexes.length; i++) {\\n            uint256 value = _redeemPoolWithIndex(users[i], indexes[i]);\\n            emit UserRedeemPoolWithIndex(indexes[i], users[i], value);\\n        }\\n    }\\n\\n    function allocateByOwner(\\n        uint256[] memory indexes,\\n        address[] memory users,\\n        uint256[] memory amounts\\n    ) external onlyOwner {\\n        require(inAdminConfigTime(), \\\"Invalid time\\\");\\n        require(indexes.length == users.length && users.length == amounts.length, \\\"Invalid input\\\");\\n        for (uint256 i = 0; i < indexes.length; i++) {\\n            _allocatePoolWithIndexByUser(users[i], indexes[i], amounts[i]);\\n            emit UserAllocatePoolWithIndex(indexes[i], users[i], amounts[i]);\\n        }\\n    }\\n\\n    function adjustByOwner(\\n        uint256 index,\\n        address[] memory users,\\n        uint256[] memory amounts,\\n        uint256[] memory types\\n    ) private {\\n        for (uint256 i = 0; i < users.length; i++) {\\n            if (types[i] == uint256(Action.ALLOCATE)) {\\n                _allocatePoolWithIndexByUser(users[i], index, amounts[i]);\\n                emit UserAllocatePoolWithIndex(index, users[i], amounts[i]);\\n            } else {\\n                uint256 value = _redeemPoolWithIndex(users[i], index);\\n                emit UserRedeemPoolWithIndex(index, users[i], value);\\n            }\\n        }\\n    }\\n\\n    function withdraw(uint256 value) external whenNotPaused{\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            _updateUserBalance(i);\\n        }\\n        require(unAllocateBalance[msg.sender] >= value, \\\"Invalid value\\\");\\n        unAllocateBalance[msg.sender] -= value;\\n        totalUnAllocate -= value;\\n        totalBalance -= value;\\n        totalWithdraw += value;\\n        totalUserWithdraw[msg.sender] += value;\\n        IERC20(depositToken).transfer(msg.sender, value);\\n        emit UserWithdraw(msg.sender, value);\\n    }\\n\\n    function deposit(uint256 value) external whenNotPaused {\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            _updateUserBalance(i);\\n        }\\n        unAllocateBalance[msg.sender] += value;\\n        totalUnAllocate += value;\\n        totalBalance += value;\\n        IERC20(depositToken).transferFrom(msg.sender, address(this), value);\\n        emit UserDeposit(msg.sender, value);\\n    }\\n    //private function\\n\\n    function _reInitBaseTime() private {\\n        baseTime = getNewBaseTime();\\n    }\\n\\n    function _allocatePoolWithIndex(uint256 index, uint256 value) private {\\n        require(isValidateIndex(index), \\\"Invalid index\\\");\\n        require(unAllocateBalance[msg.sender] >= value, \\\"Invalid deposit value\\\");\\n        _updateUserBalance(index);\\n        userBalanceInPool[index][msg.sender] += value;\\n        unAllocateBalance[msg.sender] -= value;\\n        PoolInfo storage pool = pools[index];\\n        pool.totalAmount += value;\\n        totalUnAllocate -= value;\\n    }\\n\\n    function _allocatePoolWithIndexByUser(address user, uint256 index, uint256 value) private {\\n        require(isValidateIndex(index), \\\"Invalid index\\\");\\n        require(unAllocateBalance[user] >= value, \\\"Invalid deposit value\\\");\\n        _updateUserBalanceByUser(user, index);\\n        userBalanceInPool[index][user] += value;\\n        unAllocateBalance[user] -= value;\\n        PoolInfo storage pool = pools[index];\\n        pool.totalAmount += value;\\n        totalUnAllocate -= value;\\n    }\\n\\n    function _redeemPoolWithIndex(address user, uint256 index) private returns (uint256) {\\n        require(isValidateIndex(index), \\\"Invalid index\\\");\\n        _updateUserBalanceByUser(user, index);\\n        uint256 value = userBalanceInPool[index][user];\\n        userBalanceInPool[index][user] = 0;\\n        unAllocateBalance[user] += value;\\n        PoolInfo storage pool = pools[index];\\n        pool.totalAmount -= value;\\n        totalUnAllocate += value;\\n        return value;\\n    }\\n\\n    function _updateUserBalance(uint256 index) private {\\n        userBalanceInPool[index][msg.sender] = getUserBalanceInPool(index, msg.sender);\\n        nextIndexBalance[index][msg.sender] = pnl[index].length;\\n\\n    }\\n\\n\\n    function _updateUserBalanceByUser(address user, uint256 index) private {\\n        userBalanceInPool[index][user] = getUserBalanceInPool(index, user);\\n        nextIndexBalance[index][user] = pnl[index].length;\\n\\n    }\\n\\n\\n    //view\\n    function isValidateIndex(uint256 index) public view returns (bool) {\\n        if (index < pools.length) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function isRunningPool(uint256 index) public view returns (bool) {\\n        if (isRunning[index]) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function getUserBalanceInPool(uint256 index, address user) public view returns (uint256) {\\n        require(isValidateIndex(index), \\\"Invalid index\\\");\\n        PoolInfo memory pool = pools[index];\\n        uint256 depositAmount = userBalanceInPool[index][user];\\n        uint256 nextIndex = nextIndexBalance[index][user];\\n        uint256[] memory listRate = pnl[index];\\n\\n        while (nextIndex < listRate.length) {\\n            depositAmount = depositAmount * listRate[nextIndex] / BONE;\\n            nextIndex++;\\n        }\\n        return depositAmount;\\n\\n    }\\n\\n    function getListUserBalanceInPool(uint256 index, address[] memory users) public view returns (uint256[] memory) {\\n        require(isValidateIndex(index), \\\"Invalid index\\\");\\n        PoolInfo memory pool = pools[index];\\n        uint256[] memory amounts = new uint256[](users.length);\\n        for (uint256 i = 0; i < users.length; i++) {\\n            address user = users[i];\\n            uint256 depositAmount = userBalanceInPool[index][user];\\n            uint256 nextIndex = nextIndexBalance[index][user];\\n            uint256[] memory listRate = pnl[index];\\n\\n            while (nextIndex < listRate.length) {\\n                depositAmount = depositAmount * listRate[nextIndex] / BONE;\\n                nextIndex++;\\n            }\\n            amounts[i] = depositAmount;\\n        }\\n        return amounts;\\n    }\\n\\n    function getAllUSDCBalanceInPool() public view returns (uint256) {\\n        uint256 totalUSDC;\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            PoolInfo memory pool = pools[i];\\n            if (pool.totalAmount > 0) {\\n                totalUSDC += pool.totalAmount;\\n            } else {\\n                totalUSDC += lastTotalAmount[i];\\n            }\\n        }\\n        return totalUSDC;\\n    }\\n\\n\\n    function getNewBaseTime() private view returns (uint256) {\\n        if (isAllPoolStopped()) {\\n            return 0;\\n        }\\n        if (baseTime == 0) {\\n            return block.timestamp;\\n        }\\n        uint256 totalDuration = getTotalDuration();\\n        uint256 times = (block.timestamp - baseTime) / totalDuration;\\n        uint256 newBaseTime = baseTime + times * totalDuration;\\n        return newBaseTime;\\n    }\\n\\n    function getTotalDuration() private view returns (uint256) {\\n        return adminConfigDuration + investDuration + epoch;\\n    }\\n\\n    function getLatestStartTime() public view returns (uint256, uint256) {\\n        uint256 newBaseTime = getNewBaseTime();\\n        uint256 start = newBaseTime + adminConfigDuration + investDuration;\\n        uint256 startBlock;\\n        if (start < block.timestamp) {\\n            uint256 diffTime = block.timestamp - start;\\n            uint256 diffBlock = diffTime / BLOCK_TIME;\\n            startBlock = block.number - diffBlock;\\n        } else {\\n            uint256 diffTime = start - block.timestamp;\\n            uint256 diffBlock = diffTime / BLOCK_TIME;\\n            startBlock = block.number + diffBlock;\\n        }\\n        return (startBlock, start);\\n    }\\n\\n    function getLatestStartEpoch() public view returns (uint256, uint256, uint256, uint256) {\\n        ( uint256 startBlock, uint256 startTime) = getLatestStartTime();\\n        uint256 endBlock = startBlock + epoch / BLOCK_TIME;\\n        uint256 endTime = startTime + epoch;\\n        return (startBlock, endBlock, startTime, endTime);\\n    }\\n\\n    function inAdminConfigTime() public view returns (bool) {\\n        uint256 newBaseTime = getNewBaseTime();\\n        if (block.timestamp >= newBaseTime && block.timestamp < newBaseTime + adminConfigDuration) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function inInvestTime() public view returns (bool) {\\n        uint256 time = getNewBaseTime() + adminConfigDuration;\\n        if (block.timestamp >= time && block.timestamp < time + investDuration) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function inEpochTime() public view returns (bool) {\\n        uint256 time = getNewBaseTime() + adminConfigDuration + investDuration;\\n        if (block.timestamp >= time && block.timestamp < time + epoch) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function inDepositTime() public view returns (bool) {\\n        uint256 time = getNewBaseTime() + adminConfigDuration + investDuration;\\n        if (block.timestamp >= time && block.timestamp < time + epoch + adminConfigDuration) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function inAdminRedeemTime() public view returns (bool) {\\n        uint256 time = getNewBaseTime() + adminConfigDuration;\\n        if (block.timestamp >= time && block.timestamp < time + investDuration) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function isAllPoolStopped() public view returns (bool) {\\n        if (totalStoppedPool == pools.length && pools.length > 0) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function getAllocatedBalance(address user) public view returns (uint256) {\\n        uint256 balance = 0;\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            balance += getUserBalanceInPool(i, user);\\n        }\\n        return balance;\\n    }\\n\\n    function getTotalAmountInPool(uint256 index) public view returns (uint256) {\\n        PoolInfo memory pool = pools[index];\\n        if (pool.totalAmount > 0) {\\n            return pool.totalAmount;\\n        }\\n        return lastTotalAmount[index];\\n    }\\n\\n    function getPoolLength() public view returns (uint256) {\\n        return pools.length;\\n    }\\n\\n    function getTotalAllocated() public view returns (uint256) {\\n        return totalBalance - totalUnAllocate;\\n    }\\n\\n    function canAdminDeposit() public view returns (bool) {\\n        return (!tick) && inAdminConfigTime();\\n    }\\n\\n    function canAdminWithdraw() public view returns (bool) {\\n        return tick && inEpochTime();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOtoriFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IOtoriFactory {\\n\\n    enum PoolStrategy {\\n        BULL,\\n        BEAR,\\n        RANGE\\n    }\\n\\n    enum WithdrawType {\\n        WALLET,\\n        FACTORY\\n    }\\n\\n    struct PoolInfo {\\n        string underlying;\\n        uint256 totalAmount;\\n        PoolStrategy poolType;\\n        uint256 minRange;\\n        uint256 maxRange;\\n        address investor;\\n        uint256 feePercent;\\n        address feeReceiver;\\n        address annualFeeReceiver;\\n    }\\n\\n    enum Action {\\n        REDEEM,\\n        ALLOCATE\\n    }\\n\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"}],\"name\":\"AdminDepositTokenToPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"AdminWithdrawTokenFromPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adminConfigDuration\",\"type\":\"uint256\"}],\"name\":\"ChangeAdminConfigDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"ChangeEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investDuration\",\"type\":\"uint256\"}],\"name\":\"ChangeInvestDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"PoolActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"underlying\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum IOtoriFactory.PoolStrategy\",\"name\":\"poolType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minRange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRange\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"annualFeeReceiver\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IOtoriFactory.PoolInfo\",\"name\":\"poolInfo\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"PoolStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserAdjustPoolValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserAllocatePoolWithIndex\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserRedeemPoolWithIndex\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserWithdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLOCK_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BONE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"activePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminConfigDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"allocateByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canAdminDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canAdminWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_adminConfigDuration\",\"type\":\"uint256\"}],\"name\":\"changeAdminConfigDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseTime\",\"type\":\"uint256\"}],\"name\":\"changeBaseTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"changeEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_investDuration\",\"type\":\"uint256\"}],\"name\":\"changeInvestDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"underlying\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum IOtoriFactory.PoolStrategy\",\"name\":\"poolType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minRange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRange\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"annualFeeReceiver\",\"type\":\"address\"}],\"internalType\":\"struct IOtoriFactory.PoolInfo\",\"name\":\"poolInfo\",\"type\":\"tuple\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"annualFee\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"types\",\"type\":\"uint256[]\"}],\"name\":\"depositTokenToPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllUSDCBalanceInPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAllocatedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestStartEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"getListUserBalanceInPool\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalAllocated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTotalAmountInPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserBalanceInPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inAdminConfigTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inAdminRedeemTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inDepositTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inEpochTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inInvestTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_adminConfigDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_investDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAllPoolStopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isRunning\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isRunningPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isValidateIndex\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nextIndexBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pnl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"underlying\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum IOtoriFactory.PoolStrategy\",\"name\":\"poolType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minRange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRange\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"annualFeeReceiver\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"redeemByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"stopPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tick\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPerformance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStoppedPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnAllocate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalUserWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unAllocateBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBalanceInPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"withdrawTokenFromPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OtoriFactory", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}