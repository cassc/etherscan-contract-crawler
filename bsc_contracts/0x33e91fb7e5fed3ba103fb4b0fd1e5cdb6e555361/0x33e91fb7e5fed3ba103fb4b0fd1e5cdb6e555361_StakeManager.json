{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/balancer-metastable-rate-providers/interfaces/IRateProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.6;\\n\\n// TODO: pull this from the monorepo\\ninterface IRateProvider {\\n    function getRate() external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/rbnb/IERC20MintBurn.sol\": {\r\n      \"content\": \"pragma solidity 0.7.6;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\ninterface IERC20MintBurn {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burnFrom(address account, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/rbnb/IStakePool.sol\": {\r\n      \"content\": \"pragma solidity 0.7.6;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\ninterface IStakePool {\\n    function checkAndClaimReward() external returns (uint256);\\n\\n    function checkAndClaimUndelegated() external returns (uint256);\\n\\n    function delegate(address validator, uint256 amount) external;\\n\\n    function undelegate(address validator, uint256 amount) external;\\n\\n    function redelegate(address validatorSrc, address validatorDst, uint256 amount) external;\\n\\n    function withdrawForStaker(address staker, uint256 amount) external;\\n\\n    function getTotalDelegated() external view returns (uint256);\\n\\n    function getDelegated(address validator) external view returns (uint256);\\n\\n    function getMinDelegation() external view returns (uint256);\\n\\n    function getPendingUndelegateTime(address validator) external view returns (uint256);\\n\\n    function getPendingRedelegateTime(address valSrc, address valDst) external view returns (uint256);\\n\\n    function getRequestInFly() external view returns (uint256[3] memory);\\n\\n    function getRelayerFee() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/rbnb/Multisig.sol\": {\r\n      \"content\": \"pragma solidity 0.7.6;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\n\\ncontract Multisig {\\n    using SafeCast for *;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeMath for uint256;\\n\\n    enum ProposalStatus {\\n        Inactive,\\n        Active,\\n        Executed\\n    }\\n\\n    struct Proposal {\\n        ProposalStatus _status;\\n        uint16 _yesVotes; // bitmap, 16 maximum votes\\n        uint8 _yesVotesTotal;\\n    }\\n\\n    address public admin;\\n    uint8 public threshold;\\n    EnumerableSet.AddressSet voters;\\n\\n    mapping(bytes32 => Proposal) public proposals;\\n\\n    event ProposalExecuted(bytes32 indexed proposalId);\\n\\n    modifier onlyVoter() {\\n        require(voters.contains(msg.sender));\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(admin == msg.sender, \\\"caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function initMultisig(address[] memory _voters, uint256 _initialThreshold) public {\\n        require(threshold == 0, \\\"already initizlized\\\");\\n        require(_voters.length >= _initialThreshold && _initialThreshold > _voters.length.div(2), \\\"invalid threshold\\\");\\n        require(_voters.length <= 16, \\\"too much voters\\\");\\n\\n        threshold = _initialThreshold.toUint8();\\n        uint256 initialVoterCount = _voters.length;\\n        for (uint256 i; i < initialVoterCount; ++i) {\\n            voters.add(_voters[i]);\\n        }\\n        admin = msg.sender;\\n    }\\n\\n    function transferOwnership(address _newOwner) public onlyAdmin {\\n        require(_newOwner != address(0), \\\"zero address\\\");\\n\\n        admin = _newOwner;\\n    }\\n\\n    function addVoter(address _voter) public onlyAdmin {\\n        require(voters.length() < 16, \\\"too much voters\\\");\\n        require(threshold > (voters.length().add(1)).div(2), \\\"invalid threshold\\\");\\n\\n        voters.add(_voter);\\n    }\\n\\n    function removeVoter(address _voter) public onlyAdmin {\\n        require(voters.length() > threshold, \\\"voters not enough\\\");\\n\\n        voters.remove(_voter);\\n    }\\n\\n    function changeThreshold(uint256 _newThreshold) external onlyAdmin {\\n        require(voters.length() >= _newThreshold && _newThreshold > voters.length().div(2), \\\"invalid threshold\\\");\\n\\n        threshold = _newThreshold.toUint8();\\n    }\\n\\n    function getVoterIndex(address _voter) public view returns (uint256) {\\n        return voters._inner._indexes[bytes32(uint256(_voter))];\\n    }\\n\\n    function voterBit(address _voter) internal view returns (uint256) {\\n        return uint256(1) << getVoterIndex(_voter).sub(1);\\n    }\\n\\n    function _hasVoted(Proposal memory _proposal, address _voter) internal view returns (bool) {\\n        return (voterBit(_voter) & uint256(_proposal._yesVotes)) > 0;\\n    }\\n\\n    function hasVoted(bytes32 _proposalId, address _voter) public view returns (bool) {\\n        Proposal memory proposal = proposals[_proposalId];\\n        return _hasVoted(proposal, _voter);\\n    }\\n\\n    function _checkProposal(bytes32 _proposalId) internal view returns (Proposal memory proposal) {\\n        proposal = proposals[_proposalId];\\n\\n        require(uint256(proposal._status) <= 1, \\\"proposal already executed\\\");\\n        require(!_hasVoted(proposal, msg.sender), \\\"already voted\\\");\\n\\n        if (proposal._status == ProposalStatus.Inactive) {\\n            proposal = Proposal({_status: ProposalStatus.Active, _yesVotes: 0, _yesVotesTotal: 0});\\n        }\\n        proposal._yesVotes = (proposal._yesVotes | voterBit(msg.sender)).toUint16();\\n        proposal._yesVotesTotal++;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/rbnb/StakeManager.sol\": {\r\n      \"content\": \"pragma solidity 0.7.6;\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport {SafeERC20, IERC20, SafeMath} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../balancer-metastable-rate-providers/interfaces/IRateProvider.sol\\\";\\nimport \\\"./Multisig.sol\\\";\\nimport \\\"./Types.sol\\\";\\nimport \\\"./IStakePool.sol\\\";\\nimport \\\"./IERC20MintBurn.sol\\\";\\n\\ncontract StakeManager is Multisig, IRateProvider {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    uint256 public constant CROSS_DISTRIBUTE_RELAY_FEE = 6 * 1e15;\\n    uint256 public constant UNBOND_TIMES_LIMIT = 100;\\n    uint256 public constant MAX_UNSTAKE_FEE_COMMISSION = 1e16;\\n    uint256 public constant MAX_PROTOCOL_FEE_COMMISSION = 2 * 1e17;\\n    uint256 public constant MAX_RATE_CHANGE_LIMIT = 1e15;\\n    uint256 public constant MAX_UNBONDING_DURATION = 32;\\n    uint256 public constant MAX_ERA_SECONDS = 172800;\\n\\n    address public rTokenAddress;\\n    uint256 public minStakeAmount;\\n    uint256 public unstakeFeeCommission; // decimals 18\\n    uint256 public protocolFeeCommission; // decimals 18\\n    uint256 public rateChangeLimit; // decimals 18\\n    uint256 public transferGas;\\n    uint256 public eraSeconds;\\n    uint256 public eraOffset;\\n    uint256 public unbondingDuration;\\n    uint256 public delegatedDiffLimit;\\n\\n    uint256 public latestEra;\\n    uint256 private rate; // decimals 18\\n    uint256 public totalRTokenSupply;\\n    uint256 public totalProtocolFee;\\n\\n    EnumerableSet.AddressSet bondedPools;\\n    mapping(address => PoolInfo) public poolInfoOf;\\n    mapping(address => EnumerableSet.AddressSet) validatorsOf;\\n    mapping(address => uint256) public latestRewardTimestampOf;\\n    mapping(address => uint256) public undistributedRewardOf;\\n    mapping(address => uint256) public pendingDelegateOf;\\n    mapping(address => uint256) public pendingUndelegateOf;\\n    mapping(address => mapping(address => uint256)) public delegatedOfValidator; // delegator => validator => amount\\n    mapping(address => bool) public waitingRemovedValidator;\\n    mapping(uint256 => uint256) public eraRate;\\n\\n    // unstake info\\n    uint256 public nextUnstakeIndex;\\n    mapping(uint256 => UnstakeInfo) public unstakeAtIndex;\\n    mapping(address => EnumerableSet.UintSet) unstakesOfUser;\\n\\n    address public delegationBalancer;\\n\\n    // events\\n    event Stake(address staker, address poolAddress, uint256 tokenAmount, uint256 rTokenAmount);\\n    event Unstake(\\n        address staker,\\n        address poolAddress,\\n        uint256 tokenAmount,\\n        uint256 rTokenAmount,\\n        uint256 burnAmount,\\n        uint256 unstakeIndex\\n    );\\n    event Withdraw(address staker, address poolAddress, uint256 tokenAmount, int256[] unstakeIndexList);\\n    event ExecuteNewEra(uint256 indexed era, uint256 rate);\\n    event Settle(uint256 indexed era, address indexed pool);\\n    event RepairDelegated(address pool, address validator, uint256 govDelegated, uint256 localDelegated);\\n    event SetUnbondingDuration(uint256 unbondingDuration);\\n    event Delegate(address pool, address validator, uint256 amount);\\n    event Undelegate(address pool, address validator, uint256 amount);\\n\\n    // init\\n    function init(\\n        address[] calldata _initialVoters,\\n        uint256 _initialThreshold,\\n        address _rTokenAddress,\\n        uint256 _unbondingDuration\\n    ) public {\\n        initMultisig(_initialVoters, _initialThreshold);\\n\\n        rTokenAddress = _rTokenAddress;\\n        unbondingDuration = _unbondingDuration;\\n\\n        minStakeAmount = 1e12;\\n        rateChangeLimit = 3 * 1e14;\\n        unstakeFeeCommission = 2e15;\\n        protocolFeeCommission = 1e17;\\n        transferGas = 5000;\\n        eraSeconds = 86400;\\n        eraOffset = 18033;\\n        delegatedDiffLimit = 1e11;\\n        delegationBalancer = msg.sender;\\n    }\\n\\n    // modifer\\n    modifier onlyDelegationBalancer() {\\n        require(delegationBalancer == msg.sender, \\\"caller is not delegation balancer\\\");\\n        _;\\n    }\\n\\n    // ----- getters\\n\\n    function getRate() external view override returns (uint256) {\\n        return rate;\\n    }\\n\\n    function getStakeRelayerFee() public view returns (uint256) {\\n        return IStakePool(bondedPools.at(0)).getRelayerFee().div(2);\\n    }\\n\\n    function getUnstakeRelayerFee() public view returns (uint256) {\\n        return IStakePool(bondedPools.at(0)).getRelayerFee();\\n    }\\n\\n    function getBondedPools() external view returns (address[] memory pools) {\\n        pools = new address[](bondedPools.length());\\n        for (uint256 i = 0; i < bondedPools.length(); ++i) {\\n            pools[i] = bondedPools.at(i);\\n        }\\n        return pools;\\n    }\\n\\n    function getValidatorsOf(address _poolAddress) external view returns (address[] memory validators) {\\n        validators = new address[](validatorsOf[_poolAddress].length());\\n        for (uint256 i = 0; i < validatorsOf[_poolAddress].length(); ++i) {\\n            validators[i] = validatorsOf[_poolAddress].at(i);\\n        }\\n        return validators;\\n    }\\n\\n    function getUnstakeIndexListOf(address _staker) external view returns (uint256[] memory unstakeIndexList) {\\n        unstakeIndexList = new uint256[](unstakesOfUser[_staker].length());\\n        for (uint256 i = 0; i < unstakesOfUser[_staker].length(); ++i) {\\n            unstakeIndexList[i] = unstakesOfUser[_staker].at(i);\\n        }\\n        return unstakeIndexList;\\n    }\\n\\n    function currentEra() public view returns (uint256) {\\n        return block.timestamp.div(eraSeconds).sub(eraOffset);\\n    }\\n\\n    // ------ settings\\n\\n    function migrate(\\n        address _poolAddress,\\n        address _validator,\\n        uint256 _govDelegated,\\n        uint256 _bond,\\n        uint256 _unbond,\\n        uint256 _pendingDelegate,\\n        uint256 _rate,\\n        uint256 _totalRTokenSupply,\\n        uint256 _totalProtocolFee,\\n        uint256 _era,\\n        uint256 _latestRewardtimestamp,\\n        uint256 _undistributedReward //pending reward + claimable reward\\n    ) external onlyAdmin {\\n        require(rate == 0, \\\"already migrate\\\");\\n        require(bondedPools.add(_poolAddress), \\\"already exist\\\");\\n\\n        validatorsOf[_poolAddress].add(_validator);\\n        delegatedOfValidator[_poolAddress][_validator] = _govDelegated;\\n        poolInfoOf[_poolAddress] = PoolInfo({\\n            era: _era,\\n            bond: _bond,\\n            unbond: _unbond,\\n            active: _govDelegated.add(_pendingDelegate).add(_undistributedReward)\\n        });\\n        pendingDelegateOf[_poolAddress] = _pendingDelegate;\\n        rate = _rate;\\n        totalRTokenSupply = _totalRTokenSupply;\\n        totalProtocolFee = _totalProtocolFee;\\n        latestEra = _era;\\n        eraRate[_era] = _rate;\\n        latestRewardTimestampOf[_poolAddress] = _latestRewardtimestamp;\\n        undistributedRewardOf[_poolAddress] = _undistributedReward;\\n    }\\n\\n    function transferDelegationBalancer(address _newDelegationBalancer) public onlyAdmin {\\n        require(_newDelegationBalancer != address(0), \\\"zero address\\\");\\n        delegationBalancer = _newDelegationBalancer;\\n    }\\n\\n    function setParams(\\n        uint256 _unstakeFeeCommission,\\n        uint256 _protocolFeeCommission,\\n        uint256 _minStakeAmount,\\n        uint256 _unbondingDuration,\\n        uint256 _rateChangeLimit,\\n        uint256 _eraSeconds,\\n        uint256 _eraOffset,\\n        uint256 _transferGas,\\n        uint256 _delegatedDiffLimit\\n    ) external onlyAdmin {\\n        require(_unstakeFeeCommission <= MAX_UNSTAKE_FEE_COMMISSION, \\\"max unstake fee limit\\\");\\n        require(_protocolFeeCommission <= MAX_PROTOCOL_FEE_COMMISSION, \\\"max protocol fee limit\\\");\\n        require(_unbondingDuration <= MAX_UNBONDING_DURATION, \\\"max unbonding duration limit\\\");\\n        require(_rateChangeLimit <= MAX_RATE_CHANGE_LIMIT, \\\"max rate change limit\\\");\\n        require(_eraSeconds <= MAX_ERA_SECONDS, \\\"max era seconds limit\\\");\\n\\n        if (_eraSeconds != 0 || _eraOffset != 0) {\\n            require(currentEra() == block.timestamp.div(_eraSeconds).sub(_eraOffset), \\\"wrong era parameters\\\");\\n        }\\n\\n        unstakeFeeCommission = _unstakeFeeCommission == 1 ? unstakeFeeCommission : _unstakeFeeCommission;\\n        protocolFeeCommission = _protocolFeeCommission == 1 ? protocolFeeCommission : _protocolFeeCommission;\\n        minStakeAmount = _minStakeAmount == 0 ? minStakeAmount : _minStakeAmount;\\n        rateChangeLimit = _rateChangeLimit == 0 ? rateChangeLimit : _rateChangeLimit;\\n        eraSeconds = _eraSeconds == 0 ? eraSeconds : _eraSeconds;\\n        eraOffset = _eraOffset == 0 ? eraOffset : _eraOffset;\\n        transferGas = _transferGas == 0 ? transferGas : _transferGas;\\n        delegatedDiffLimit = _delegatedDiffLimit == 0 ? delegatedDiffLimit : _delegatedDiffLimit;\\n\\n        if (_unbondingDuration > 0) {\\n            unbondingDuration = _unbondingDuration;\\n            emit SetUnbondingDuration(_unbondingDuration);\\n        }\\n    }\\n\\n    function addStakePool(address _poolAddress) external onlyAdmin {\\n        require(bondedPools.add(_poolAddress), \\\"pool exist\\\");\\n    }\\n\\n    function rmStakePool(address _poolAddress) external onlyAdmin {\\n        PoolInfo memory poolInfo = poolInfoOf[_poolAddress];\\n        require(poolInfo.active == 0 && poolInfo.bond == 0 && poolInfo.unbond == 0, \\\"pool not empty\\\");\\n        require(IStakePool(_poolAddress).getTotalDelegated() == 0, \\\"delegate not empty\\\");\\n        require(\\n            pendingDelegateOf[_poolAddress] == 0 &&\\n                pendingUndelegateOf[_poolAddress] == 0 &&\\n                undistributedRewardOf[_poolAddress] == 0,\\n            \\\"pending not empty\\\"\\n        );\\n\\n        require(bondedPools.remove(_poolAddress), \\\"pool not exist\\\");\\n    }\\n\\n    function rmValidator(address _poolAddress, address _validator) external onlyAdmin {\\n        require(IStakePool(_poolAddress).getDelegated(_validator) == 0, \\\"delegate not empty\\\");\\n\\n        validatorsOf[_poolAddress].remove(_validator);\\n        delegatedOfValidator[_poolAddress][_validator] = 0;\\n        delete (waitingRemovedValidator[_validator]);\\n    }\\n\\n    function withdrawProtocolFee(address _to) external onlyAdmin {\\n        IERC20(rTokenAddress).safeTransfer(_to, IERC20(rTokenAddress).balanceOf(address(this)));\\n    }\\n\\n    function withdrawRelayerFee(address _to) external onlyAdmin {\\n        (bool success, ) = _to.call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"failed to withdraw\\\");\\n    }\\n\\n    // ------ delegation balancer\\n\\n    function redelegate(\\n        address _poolAddress,\\n        address _srcValidator,\\n        address _dstValidator,\\n        uint256 _amount\\n    ) external onlyDelegationBalancer {\\n        require(validatorsOf[_poolAddress].contains(_srcValidator), \\\"val not exist\\\");\\n        require(_srcValidator != _dstValidator, \\\"val duplicate\\\");\\n\\n        if (!validatorsOf[_poolAddress].contains(_dstValidator)) {\\n            validatorsOf[_poolAddress].add(_dstValidator);\\n        }\\n\\n        require(\\n            block.timestamp >= IStakePool(_poolAddress).getPendingRedelegateTime(_srcValidator, _dstValidator) &&\\n                block.timestamp >= IStakePool(_poolAddress).getPendingRedelegateTime(_dstValidator, _srcValidator),\\n            \\\"pending redelegation exist\\\"\\n        );\\n\\n        _checkAndRepairDelegated(_poolAddress);\\n\\n        delegatedOfValidator[_poolAddress][_srcValidator] = delegatedOfValidator[_poolAddress][_srcValidator].sub(\\n            _amount\\n        );\\n        delegatedOfValidator[_poolAddress][_dstValidator] = delegatedOfValidator[_poolAddress][_dstValidator].add(\\n            _amount\\n        );\\n\\n        IStakePool(_poolAddress).redelegate(_srcValidator, _dstValidator, _amount);\\n\\n        if (delegatedOfValidator[_poolAddress][_srcValidator] == 0) {\\n            waitingRemovedValidator[_srcValidator] = true;\\n        }\\n    }\\n\\n    // ----- staker operation\\n\\n    function stake(uint256 _stakeAmount) external payable {\\n        stakeWithPool(bondedPools.at(0), _stakeAmount);\\n    }\\n\\n    function unstake(uint256 _rTokenAmount) external payable {\\n        unstakeWithPool(bondedPools.at(0), _rTokenAmount);\\n    }\\n\\n    function withdraw() external payable {\\n        withdrawWithPool(bondedPools.at(0));\\n    }\\n\\n    function stakeWithPool(address _poolAddress, uint256 _stakeAmount) public payable {\\n        require(msg.value >= _stakeAmount.add(getStakeRelayerFee()), \\\"fee not enough\\\");\\n        require(_stakeAmount >= minStakeAmount, \\\"amount not enough\\\");\\n        require(bondedPools.contains(_poolAddress), \\\"pool not exist\\\");\\n        (bool success, ) = msg.sender.call{gas: transferGas}(\\\"\\\");\\n        require(success, \\\"staker not payable\\\");\\n\\n        uint256 rTokenAmount = _stakeAmount.mul(1e18).div(rate);\\n\\n        // update pool\\n        PoolInfo storage poolInfo = poolInfoOf[_poolAddress];\\n        poolInfo.bond = poolInfo.bond.add(_stakeAmount);\\n        poolInfo.active = poolInfo.active.add(_stakeAmount);\\n\\n        // transfer token\\n        (success, ) = _poolAddress.call{value: _stakeAmount}(\\\"\\\");\\n        require(success, \\\"transfer failed\\\");\\n\\n        // mint rtoken\\n        totalRTokenSupply = totalRTokenSupply.add(rTokenAmount);\\n        IERC20MintBurn(rTokenAddress).mint(msg.sender, rTokenAmount);\\n\\n        emit Stake(msg.sender, _poolAddress, _stakeAmount, rTokenAmount);\\n    }\\n\\n    function unstakeWithPool(address _poolAddress, uint256 _rTokenAmount) public payable {\\n        require(_rTokenAmount > 0, \\\"rtoken amount zero\\\");\\n        require(msg.value >= getUnstakeRelayerFee(), \\\"fee not enough\\\");\\n        require(bondedPools.contains(_poolAddress), \\\"pool not exist\\\");\\n        (bool success, ) = msg.sender.call{gas: transferGas}(\\\"\\\");\\n        require(success, \\\"unstaker not payable\\\");\\n        require(unstakesOfUser[msg.sender].length() <= UNBOND_TIMES_LIMIT, \\\"unstake times limit\\\");\\n\\n        uint256 unstakeFee = _rTokenAmount.mul(unstakeFeeCommission).div(1e18);\\n        uint256 leftRTokenAmount = _rTokenAmount.sub(unstakeFee);\\n        uint256 tokenAmount = leftRTokenAmount.mul(rate).div(1e18);\\n\\n        // update pool\\n        PoolInfo storage poolInfo = poolInfoOf[_poolAddress];\\n        poolInfo.unbond = poolInfo.unbond.add(tokenAmount);\\n        poolInfo.active = poolInfo.active.sub(tokenAmount);\\n\\n        // burn rtoken\\n        IERC20MintBurn(rTokenAddress).burnFrom(msg.sender, leftRTokenAmount);\\n        totalRTokenSupply = totalRTokenSupply.sub(leftRTokenAmount);\\n\\n        // protocol fee\\n        totalProtocolFee = totalProtocolFee.add(unstakeFee);\\n        IERC20(rTokenAddress).safeTransferFrom(msg.sender, address(this), unstakeFee);\\n\\n        // unstake info\\n        unstakeAtIndex[nextUnstakeIndex] = UnstakeInfo({\\n            era: currentEra(),\\n            pool: _poolAddress,\\n            receiver: msg.sender,\\n            amount: tokenAmount\\n        });\\n        unstakesOfUser[msg.sender].add(nextUnstakeIndex);\\n\\n        emit Unstake(msg.sender, _poolAddress, tokenAmount, _rTokenAmount, leftRTokenAmount, nextUnstakeIndex);\\n\\n        nextUnstakeIndex = nextUnstakeIndex.add(1);\\n    }\\n\\n    function withdrawWithPool(address _poolAddress) public payable {\\n        require(msg.value >= CROSS_DISTRIBUTE_RELAY_FEE, \\\"fee not enough\\\");\\n\\n        uint256 totalWithdrawAmount;\\n        uint256 length = unstakesOfUser[msg.sender].length();\\n        uint256[] memory unstakeIndexList = new uint256[](length);\\n        int256[] memory emitUnstakeIndexList = new int256[](length);\\n\\n        for (uint256 i = 0; i < length; ++i) {\\n            unstakeIndexList[i] = unstakesOfUser[msg.sender].at(i);\\n        }\\n        uint256 curEra = currentEra();\\n        for (uint256 i = 0; i < length; ++i) {\\n            uint256 unstakeIndex = unstakeIndexList[i];\\n            UnstakeInfo memory unstakeInfo = unstakeAtIndex[unstakeIndex];\\n            if (unstakeInfo.era.add(unbondingDuration) > curEra || unstakeInfo.pool != _poolAddress) {\\n                emitUnstakeIndexList[i] = -1;\\n                continue;\\n            }\\n\\n            require(unstakesOfUser[msg.sender].remove(unstakeIndex), \\\"already withdrawed\\\");\\n\\n            totalWithdrawAmount = totalWithdrawAmount.add(unstakeInfo.amount);\\n            emitUnstakeIndexList[i] = int256(unstakeIndex);\\n        }\\n\\n        if (totalWithdrawAmount > 0) {\\n            IStakePool(_poolAddress).withdrawForStaker(msg.sender, totalWithdrawAmount);\\n        }\\n\\n        emit Withdraw(msg.sender, _poolAddress, totalWithdrawAmount, emitUnstakeIndexList);\\n    }\\n\\n    // ----- permissionless\\n\\n    function settle(address _poolAddress) public {\\n        require(bondedPools.contains(_poolAddress), \\\"pool not exist\\\");\\n        _checkAndRepairDelegated(_poolAddress);\\n\\n        // claim undelegated\\n        IStakePool(_poolAddress).checkAndClaimUndelegated();\\n\\n        PoolInfo memory poolInfo = poolInfoOf[_poolAddress];\\n\\n        // cal pending value\\n        uint256 pendingDelegate = pendingDelegateOf[_poolAddress].add(poolInfo.bond);\\n        uint256 pendingUndelegate = pendingUndelegateOf[_poolAddress].add(poolInfo.unbond);\\n\\n        uint256 deduction = pendingDelegate > pendingUndelegate ? pendingUndelegate : pendingDelegate;\\n        pendingDelegate = pendingDelegate.sub(deduction);\\n        pendingUndelegate = pendingUndelegate.sub(deduction);\\n\\n        // update pool state\\n        poolInfo.bond = 0;\\n        poolInfo.unbond = 0;\\n        poolInfoOf[_poolAddress] = poolInfo;\\n\\n        _settle(_poolAddress, pendingDelegate, pendingUndelegate);\\n    }\\n\\n    // ----- vote\\n\\n    function newEra(\\n        address[] calldata _poolAddressList,\\n        uint256[] calldata _newRewardList,\\n        uint256[] calldata _latestRewardTimestampList\\n    ) external onlyVoter {\\n        uint256 _era = latestEra.add(1);\\n        bytes32 proposalId = keccak256(\\n            abi.encodePacked(\\\"newEra\\\", _era, _poolAddressList, _newRewardList, _latestRewardTimestampList)\\n        );\\n        Proposal memory proposal = _checkProposal(proposalId);\\n\\n        // Finalize if Threshold has been reached\\n        if (proposal._yesVotesTotal >= threshold) {\\n            _executeNewEra(_era, _poolAddressList, _newRewardList, _latestRewardTimestampList);\\n\\n            proposal._status = ProposalStatus.Executed;\\n            emit ProposalExecuted(proposalId);\\n        }\\n\\n        proposals[proposalId] = proposal;\\n    }\\n\\n    // ----- helper\\n\\n    function _checkAndRepairDelegated(address _poolAddress) private {\\n        uint256[3] memory requestInFly = IStakePool(_poolAddress).getRequestInFly();\\n        require(requestInFly[0] == 0 && requestInFly[1] == 0 && requestInFly[2] == 0, \\\"request in fly\\\");\\n\\n        uint256 valLength = validatorsOf[_poolAddress].length();\\n        for (uint256 i = 0; i < valLength; ++i) {\\n            address val = validatorsOf[_poolAddress].at(i);\\n            uint256 govDelegated = IStakePool(_poolAddress).getDelegated(val);\\n            uint256 localDelegated = delegatedOfValidator[_poolAddress][val];\\n\\n            uint256 diff;\\n            if (govDelegated > localDelegated.add(delegatedDiffLimit)) {\\n                diff = govDelegated.sub(localDelegated);\\n\\n                pendingUndelegateOf[_poolAddress] = pendingUndelegateOf[_poolAddress].add(diff);\\n            } else if (localDelegated > govDelegated.add(delegatedDiffLimit)) {\\n                diff = localDelegated.sub(govDelegated);\\n\\n                pendingDelegateOf[_poolAddress] = pendingDelegateOf[_poolAddress].add(diff);\\n            }\\n\\n            delegatedOfValidator[_poolAddress][val] = govDelegated;\\n            emit RepairDelegated(_poolAddress, val, govDelegated, localDelegated);\\n        }\\n    }\\n\\n    function _executeNewEra(\\n        uint256 _era,\\n        address[] calldata _poolAddressList,\\n        uint256[] calldata _newRewardList,\\n        uint256[] calldata _latestRewardTimestampList\\n    ) private {\\n        require(currentEra() >= _era, \\\"calEra not match\\\");\\n        require(\\n            _poolAddressList.length == bondedPools.length() &&\\n                _poolAddressList.length == _newRewardList.length &&\\n                _poolAddressList.length == _latestRewardTimestampList.length,\\n            \\\"length not match\\\"\\n        );\\n        // update era\\n        latestEra = _era;\\n        // update pool info\\n        uint256 totalNewReward;\\n        uint256 totalNewActive;\\n        for (uint256 i = 0; i < _poolAddressList.length; ++i) {\\n            address poolAddress = _poolAddressList[i];\\n            require(\\n                _latestRewardTimestampList[i] >= latestRewardTimestampOf[poolAddress] &&\\n                    _latestRewardTimestampList[i] < block.timestamp,\\n                \\\"timestamp not match\\\"\\n            );\\n            PoolInfo memory poolInfo = poolInfoOf[poolAddress];\\n            require(poolInfo.era != latestEra, \\\"duplicate pool\\\");\\n            require(bondedPools.contains(poolAddress), \\\"pool not exist\\\");\\n\\n            _checkAndRepairDelegated(poolAddress);\\n\\n            // update latest reward timestamp\\n            latestRewardTimestampOf[poolAddress] = _latestRewardTimestampList[i];\\n\\n            if (_newRewardList[i] > 0) {\\n                // update undistributedReward\\n                undistributedRewardOf[poolAddress] = undistributedRewardOf[poolAddress].add(_newRewardList[i]);\\n                // total new reward\\n                totalNewReward = totalNewReward.add(_newRewardList[i]);\\n            }\\n\\n            // claim distributed reward\\n            if (currentEra() == _era) {\\n                uint256 claimedReward = IStakePool(poolAddress).checkAndClaimReward();\\n                if (claimedReward > 0) {\\n                    claimedReward = claimedReward.add(CROSS_DISTRIBUTE_RELAY_FEE);\\n                    if (undistributedRewardOf[poolAddress] > claimedReward) {\\n                        undistributedRewardOf[poolAddress] = undistributedRewardOf[poolAddress].sub(claimedReward);\\n                    } else {\\n                        undistributedRewardOf[poolAddress] = 0;\\n                    }\\n                    pendingDelegateOf[poolAddress] = pendingDelegateOf[poolAddress].add(claimedReward);\\n                }\\n            }\\n\\n            // claim undelegated\\n            IStakePool(poolAddress).checkAndClaimUndelegated();\\n\\n            // update pending value\\n            uint256 pendingDelegate = pendingDelegateOf[poolAddress].add(poolInfo.bond);\\n            uint256 pendingUndelegate = pendingUndelegateOf[poolAddress].add(poolInfo.unbond);\\n\\n            uint256 deduction = pendingDelegate > pendingUndelegate ? pendingUndelegate : pendingDelegate;\\n            pendingDelegate = pendingDelegate.sub(deduction);\\n            pendingUndelegate = pendingUndelegate.sub(deduction);\\n\\n            // cal total active\\n            uint256 poolNewActive = IStakePool(poolAddress)\\n                .getTotalDelegated()\\n                .add(pendingDelegate)\\n                .add(undistributedRewardOf[poolAddress])\\n                .sub(pendingUndelegate);\\n\\n            totalNewActive = totalNewActive.add(poolNewActive);\\n\\n            // update pool state\\n            poolInfo.era = latestEra;\\n            poolInfo.active = poolNewActive;\\n            poolInfo.bond = 0;\\n            poolInfo.unbond = 0;\\n\\n            poolInfoOf[poolAddress] = poolInfo;\\n\\n            // settle\\n            _settle(poolAddress, pendingDelegate, pendingUndelegate);\\n        }\\n\\n        // cal protocol fee\\n        if (totalNewReward > 0) {\\n            uint256 rTokenProtocolFee = totalNewReward.mul(protocolFeeCommission).div(rate);\\n            totalProtocolFee = totalProtocolFee.add(rTokenProtocolFee);\\n\\n            // mint rtoken\\n            totalRTokenSupply = totalRTokenSupply.add(rTokenProtocolFee);\\n            IERC20MintBurn(rTokenAddress).mint(address(this), rTokenProtocolFee);\\n        }\\n\\n        // update rate\\n        uint256 newRate = totalNewActive.mul(1e18).div(totalRTokenSupply);\\n        uint256 rateChange = newRate > rate ? newRate.sub(rate) : rate.sub(newRate);\\n        require(rateChange.mul(1e18).div(rate) < rateChangeLimit, \\\"rate change over limit\\\");\\n\\n        rate = newRate;\\n        eraRate[_era] = newRate;\\n\\n        emit ExecuteNewEra(_era, newRate);\\n    }\\n\\n    // maybe call delegate/undelegate to stakepool and update pending value\\n    function _settle(address _poolAddress, uint256 pendingDelegate, uint256 pendingUndelegate) private {\\n        // delegate and cal pending value\\n        uint256 minDelegation = IStakePool(_poolAddress).getMinDelegation();\\n        if (pendingDelegate >= minDelegation) {\\n            for (uint256 i = 0; i < validatorsOf[_poolAddress].length(); ++i) {\\n                address val = validatorsOf[_poolAddress].at(i);\\n                if (waitingRemovedValidator[val]) {\\n                    continue;\\n                }\\n                delegatedOfValidator[_poolAddress][val] = delegatedOfValidator[_poolAddress][val].add(pendingDelegate);\\n                IStakePool(_poolAddress).delegate(val, pendingDelegate);\\n\\n                emit Delegate(_poolAddress, val, pendingDelegate);\\n\\n                pendingDelegate = 0;\\n                break;\\n            }\\n        }\\n\\n        // undelegate and cal pending value\\n        if (pendingUndelegate > 0) {\\n            uint256 needUndelegate = pendingUndelegate;\\n            uint256 realUndelegate = 0;\\n            uint256 relayerFee = IStakePool(_poolAddress).getRelayerFee();\\n\\n            for (uint256 i = 0; i < validatorsOf[_poolAddress].length(); ++i) {\\n                if (needUndelegate == 0) {\\n                    break;\\n                }\\n                address val = validatorsOf[_poolAddress].at(i);\\n\\n                if (block.timestamp < IStakePool(_poolAddress).getPendingUndelegateTime(val)) {\\n                    continue;\\n                }\\n\\n                uint256 govDelegated = IStakePool(_poolAddress).getDelegated(val);\\n                if (needUndelegate < govDelegated) {\\n                    uint256 willUndelegate = needUndelegate;\\n                    if (willUndelegate < minDelegation) {\\n                        willUndelegate = minDelegation;\\n                        if (willUndelegate > govDelegated) {\\n                            willUndelegate = govDelegated;\\n                        }\\n                    }\\n\\n                    if (willUndelegate < govDelegated && govDelegated.sub(willUndelegate) < relayerFee) {\\n                        willUndelegate = govDelegated;\\n                    }\\n\\n                    delegatedOfValidator[_poolAddress][val] = delegatedOfValidator[_poolAddress][val].sub(\\n                        willUndelegate\\n                    );\\n                    IStakePool(_poolAddress).undelegate(val, willUndelegate);\\n\\n                    emit Undelegate(_poolAddress, val, willUndelegate);\\n\\n                    needUndelegate = 0;\\n                    realUndelegate = realUndelegate.add(willUndelegate);\\n                } else {\\n                    delegatedOfValidator[_poolAddress][val] = delegatedOfValidator[_poolAddress][val].sub(govDelegated);\\n                    IStakePool(_poolAddress).undelegate(val, govDelegated);\\n\\n                    emit Undelegate(_poolAddress, val, govDelegated);\\n\\n                    needUndelegate = needUndelegate.sub(govDelegated);\\n                    realUndelegate = realUndelegate.add(govDelegated);\\n                }\\n            }\\n\\n            if (realUndelegate > pendingUndelegate) {\\n                pendingDelegate = pendingDelegate.add(realUndelegate.sub(pendingUndelegate));\\n                pendingUndelegate = 0;\\n            } else {\\n                pendingUndelegate = pendingUndelegate.sub(realUndelegate);\\n            }\\n        }\\n\\n        // update pending value\\n        pendingDelegateOf[_poolAddress] = pendingDelegate;\\n        pendingUndelegateOf[_poolAddress] = pendingUndelegate;\\n\\n        emit Settle(currentEra(), _poolAddress);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/rbnb/Types.sol\": {\r\n      \"content\": \"pragma solidity 0.7.6;\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nstruct PoolInfo {\\n    uint256 era;\\n    uint256 bond;\\n    uint256 unbond;\\n    uint256 active;\\n}\\n\\nstruct UnstakeInfo {\\n    uint256 era;\\n    address pool;\\n    address receiver;\\n    uint256 amount;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Delegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"era\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"ExecuteNewEra\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"govDelegated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"localDelegated\",\"type\":\"uint256\"}],\"name\":\"RepairDelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unbondingDuration\",\"type\":\"uint256\"}],\"name\":\"SetUnbondingDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"era\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"Settle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rTokenAmount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Undelegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeIndex\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"unstakeIndexList\",\"type\":\"int256[]\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CROSS_DISTRIBUTE_RELAY_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ERA_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PROTOCOL_FEE_COMMISSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RATE_CHANGE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UNBONDING_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UNSTAKE_FEE_COMMISSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNBOND_TIMES_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"addStakePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"addVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newThreshold\",\"type\":\"uint256\"}],\"name\":\"changeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegatedDiffLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegatedOfValidator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegationBalancer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eraOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eraRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eraSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBondedPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeRelayerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getUnstakeIndexListOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unstakeIndexList\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnstakeRelayerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"getValidatorsOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"getVoterIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_initialVoters\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_initialThreshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_unbondingDuration\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_voters\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_initialThreshold\",\"type\":\"uint256\"}],\"name\":\"initMultisig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestEra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"latestRewardTimestampOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_govDelegated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unbond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pendingDelegate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRTokenSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalProtocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_era\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_latestRewardtimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_undistributedReward\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_poolAddressList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_newRewardList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_latestRewardTimestampList\",\"type\":\"uint256[]\"}],\"name\":\"newEra\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextUnstakeIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingDelegateOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingUndelegateOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolInfoOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"era\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"active\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"enum Multisig.ProposalStatus\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_yesVotes\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_yesVotesTotal\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateChangeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_srcValidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dstValidator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"removeVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"rmStakePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"rmValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unstakeFeeCommission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolFeeCommission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unbondingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rateChangeLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_eraSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_eraOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transferGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_delegatedDiffLimit\",\"type\":\"uint256\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeAmount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeAmount\",\"type\":\"uint256\"}],\"name\":\"stakeWithPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalProtocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRTokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDelegationBalancer\",\"type\":\"address\"}],\"name\":\"transferDelegationBalancer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unbondingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"undistributedRewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rTokenAmount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unstakeAtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"era\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeFeeCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rTokenAmount\",\"type\":\"uint256\"}],\"name\":\"unstakeWithPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"waitingRemovedValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawRelayerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"withdrawWithPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "StakeManager", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}