{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DemaxShackFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.6;\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport './interfaces/IWETH.sol';\\nimport './libraries/SafeMath.sol';\\nimport './modules/ShackConfigable.sol';\\nimport \\\"./modules/ReentrancyGuard.sol\\\";\\n\\ninterface IRewardToken {\\n    function mint(address to, uint value) external returns (bool);\\n}\\n\\ninterface IDemaxLP {\\n    function mintReward() external returns (uint256 amount);\\n    function queryReward() external view returns (uint256);\\n    function shareToken() external view returns (address);\\n}\\n\\n// DemaxShackFarm is the master of xBURGER. He can make xBURGER and he is a fair guy.\\n//\\n// Note that it's ownable and the owner wields tremendous power. The ownership\\n// will be transferred to a governance smart contract once xBURGER is sufficiently\\n// distributed and the community can show to govern itself.\\n//\\n// Have fun reading it. Hopefully it's bug-free. God bless.\\ncontract DemaxShackFarm is ShackConfigable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount;         // How many LP tokens the user has provided.\\n        uint256 rewardDebt;     // Reward debt. See explanation below.\\n        uint256 reward2Debt;    // Reward2 debt. See explanation below.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of RewardTokens\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accRewardPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accRewardPerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n        //   5. User's `reward2Debt` gets updated.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        address depositToken;           // Address of LP token contract.\\n        uint256 allocPoint;       // How many allocation points assigned to this pool. RewardTokens to distribute per block.\\n        uint256 lastRewardBlock;  // Last block number that RewardTokens distribution occurs.\\n        uint256 accRewardPerShare;   // Accumulated RewardTokens per share, times 1e18. See below.\\n        uint256 accReward2PerShare;   // Accumulated RewardToken2s per share, times 1e18. See below.\\n        uint256 depositTokenSupply;\\n        uint16 depositFeeBP;      // Deposit fee in basis points\\n        uint16 tokenType;\\n        bool isReward2;\\n    }\\n\\n    uint256 version = 1;\\n    address public weth;\\n\\n    // The reward TOKEN!\\n    address public rewardToken;\\n    // Dev address.\\n    address public devaddr;\\n    // reward tokens created per block.\\n    uint256 public mintPerBlock;\\n    // Bonus muliplier for early rewardToken makers.\\n    uint256 public constant BONUS_MULTIPLIER = 1;\\n    // Deposit Fee address\\n    address public feeAddress;\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n    // The block number when reward token mining starts.\\n    uint256 public startBlock;\\n\\n    uint256 public devRewardRate;\\n    uint256 public rewardTotal;\\n    uint256 public reward2Total;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount, uint256 fee);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event SetFeeAddress(address indexed user, address indexed newAddress);\\n    event SetDevAddress(address indexed user, address indexed newAddress);\\n    event UpdateEmissionRate(address indexed user, uint256 mintPerBlock);\\n\\n    constructor(\\n        address _weth,\\n        address _rewardToken,\\n        address _devaddr,\\n        address _feeAddress,\\n        uint256 _mintPerBlock,\\n        uint256 _startBlock\\n    ) public {\\n        weth = _weth;\\n        rewardToken = _rewardToken;\\n        devaddr = _devaddr;\\n        feeAddress = _feeAddress;\\n        mintPerBlock = _mintPerBlock;\\n        startBlock = _startBlock;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    mapping(address => bool) public poolExistence;\\n    \\n    modifier nonDuplicated(address _depositToken) {\\n        require(poolExistence[_depositToken] == false, \\\"nonDuplicated: duplicated\\\");\\n        _;\\n    }\\n\\n    receive() external payable {\\n        assert(msg.sender == weth);\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // _tokenType 1: token, 2: demax LP, 3: third LP\\n    function add(uint256 _allocPoint, address _depositToken, uint16 _depositFeeBP, bool _withUpdate, uint16 _tokenType, bool _isReward2) public onlyOwner nonDuplicated(_depositToken) {\\n        require(_depositFeeBP <= 10000, \\\"add: invalid deposit fee basis points\\\");\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolExistence[_depositToken] = true;\\n        poolInfo.push(PoolInfo({\\n            depositToken : _depositToken,\\n            allocPoint : _allocPoint,\\n            lastRewardBlock : lastRewardBlock,\\n            accRewardPerShare : 0,\\n            accReward2PerShare : 0,\\n            depositTokenSupply: 0,\\n            depositFeeBP : _depositFeeBP,\\n            tokenType: _tokenType,\\n            isReward2: _isReward2\\n        }));\\n    }\\n\\n    function batchAdd(bool _withUpdate, uint256[] memory _allocPoints, address[] memory _depositTokens, uint16[] memory _depositFeeBPs, uint16[] memory _tokenTypes, bool[] memory _isReward2s) public onlyOwner {\\n        require(_allocPoints.length == _depositTokens.length && _depositTokens.length == _depositFeeBPs.length, 'invalid params');\\n        for(uint256 i; i<_allocPoints.length; i++) {\\n            add(_allocPoints[i], _depositTokens[i], _depositFeeBPs[i], false, _tokenTypes[i], _isReward2s[i]);\\n        }\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n    }\\n\\n    function set(uint256 _pid, uint256 _allocPoint, uint16 _depositFeeBP, bool _withUpdate, uint16 _tokenType, bool _isReward2) public onlyAdmin {\\n        require(_depositFeeBP <= 10000, \\\"set: invalid deposit fee basis points\\\");\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\\n        poolInfo[_pid].tokenType = _tokenType;\\n        poolInfo[_pid].isReward2 = _isReward2;\\n    }\\n\\n    function batchSetAllocPoint(uint256[] memory _pids, uint256[] memory _allocPoints) public onlyAdmin {\\n        require(_pids.length == _allocPoints.length, 'invalid params');\\n        massUpdatePools();\\n        for (uint256 i; i<_pids.length; i++) {\\n            totalAllocPoint = totalAllocPoint.sub(poolInfo[_pids[i]].allocPoint).add(_allocPoints[i]);\\n            poolInfo[_pids[i]].allocPoint = _allocPoints[i];\\n        }\\n    }\\n\\n    function batchSetDepositFeeBP(uint256[] memory _pids, uint16[] memory _depositFeeBPs) public onlyAdmin {\\n        require(_pids.length == _depositFeeBPs.length, 'invalid params');\\n        for (uint256 i; i<_pids.length; i++) {\\n            poolInfo[_pids[i]].depositFeeBP = _depositFeeBPs[i];\\n        }\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\\n        return _to.sub(_from).mul(BONUS_MULTIPLIER);\\n    }\\n\\n    function reward2Token(uint256 _pid) public view returns (address) {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        if(pool.tokenType == 2) {\\n            return IDemaxLP(pool.depositToken).shareToken();\\n        }\\n        return address(0);\\n    }\\n\\n    // View function to see pending RewardTokens on frontend.\\n    function pendingReward(uint256 _pid, address _user) external view returns (uint256) {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        UserInfo memory user = userInfo[_pid][_user];\\n        uint256 accRewardPerShare = pool.accRewardPerShare;\\n        if (block.number > pool.lastRewardBlock && pool.depositTokenSupply != 0) {\\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n            uint256 reward = multiplier.mul(mintPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n            accRewardPerShare = accRewardPerShare.add(reward.mul(1e18).div(pool.depositTokenSupply));\\n        }\\n        return user.amount.mul(accRewardPerShare).div(1e18).sub(user.rewardDebt);\\n    }\\n\\n    function pendingReward2(uint256 _pid, address _user) external view returns (uint256) {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        UserInfo memory user = userInfo[_pid][_user];\\n        uint256 accReward2PerShare = pool.accReward2PerShare;\\n        if (block.number > pool.lastRewardBlock && pool.depositTokenSupply != 0 && pool.isReward2 && reward2Token(_pid) != address(0)) {\\n            uint256 reward2 = IDemaxLP(pool.depositToken).queryReward();\\n            accReward2PerShare = accReward2PerShare.add(reward2.mul(1e18).div(pool.depositTokenSupply));\\n        }\\n        return user.amount.mul(accReward2PerShare).div(1e18).sub(user.reward2Debt);\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n        if (pool.depositTokenSupply == 0 || pool.allocPoint == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n        uint256 reward = multiplier.mul(mintPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n        if(devRewardRate > 0) {\\n            IRewardToken(rewardToken).mint(devaddr, reward.div(devRewardRate));\\n            rewardTotal = rewardTotal.add(reward.div(devRewardRate));\\n        }\\n        IRewardToken(rewardToken).mint(address(this), reward);\\n        rewardTotal = rewardTotal.add(reward);\\n        pool.accRewardPerShare = pool.accRewardPerShare.add(reward.mul(1e18).div(pool.depositTokenSupply));\\n\\n        if(pool.isReward2 && reward2Token(_pid) != address(0)) {\\n            if(IDemaxLP(pool.depositToken).queryReward() > 0) {\\n                uint256 reward2 = IDemaxLP(pool.depositToken).mintReward();\\n                reward2Total = reward2Total.add(reward2);\\n                pool.accReward2PerShare = pool.accReward2PerShare.add(reward2.mul(1e18).div(pool.depositTokenSupply));\\n            }\\n        }\\n        \\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    // Deposit LP tokens to DemaxShackFarm for reward allocation.\\n    function deposit(uint256 _pid, uint256 _amount) payable public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        updatePool(_pid);\\n        _harvest(_pid);\\n        uint256 depositFee;\\n        if(address(pool.depositToken) == weth) {\\n            _amount = msg.value;\\n        }\\n        if (_amount > 0) {\\n            if(address(pool.depositToken) == weth) {\\n                IWETH(weth).deposit{value: _amount}();\\n            } else {\\n                IERC20(pool.depositToken).transferFrom(address(msg.sender), address(this), _amount);\\n            }\\n            \\n            if (pool.depositFeeBP > 0) {\\n                depositFee = _amount.mul(pool.depositFeeBP).div(10000);\\n                IERC20(pool.depositToken).transfer(feeAddress, depositFee);\\n                _amount = _amount.sub(depositFee);\\n                user.amount = user.amount.add(_amount);\\n            } else {\\n                user.amount = user.amount.add(_amount);\\n            }\\n        }\\n        pool.depositTokenSupply  = pool.depositTokenSupply.add(_amount);\\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e18);\\n        user.reward2Debt = user.amount.mul(pool.accReward2PerShare).div(1e18);\\n        emit Deposit(msg.sender, _pid, _amount, depositFee);\\n    }\\n\\n    // Withdraw LP tokens from DemaxShackFarm.\\n    function withdraw(uint256 _pid, uint256 _amount) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n        updatePool(_pid);\\n        _harvest(_pid);\\n       \\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.depositTokenSupply = pool.depositTokenSupply.sub(_amount);\\n            safeTransfer(pool.depositToken, msg.sender, _amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e18);\\n        user.reward2Debt = user.amount.mul(pool.accReward2PerShare).div(1e18);\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    function _harvest(uint256 _pid) internal returns (uint256 reward, uint256 reward2) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint256 pending = user.amount.mul(pool.accRewardPerShare).div(1e18).sub(user.rewardDebt);\\n        if (pending > 0) {\\n            reward = safeTokenTransfer(rewardToken, msg.sender, pending);\\n        }\\n        \\n        pending = user.amount.mul(pool.accReward2PerShare).div(1e18).sub(user.reward2Debt);\\n        if (pending > 0 && reward2Token(_pid) != address(0)) {\\n            reward2 = safeTokenTransfer(reward2Token(_pid), msg.sender, pending);\\n        }\\n        return (reward, reward2);\\n    }\\n\\n    function harvest(uint256 _pid) public nonReentrant returns (uint256 reward, uint256 reward2) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        updatePool(_pid);\\n        (reward, reward2) = _harvest(_pid);\\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e18);\\n        user.reward2Debt = user.amount.mul(pool.accReward2PerShare).div(1e18);\\n        return (reward, reward2);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint256 amount = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        user.reward2Debt = 0;\\n        pool.depositTokenSupply = pool.depositTokenSupply.sub(amount);\\n        safeTransfer(pool.depositToken, msg.sender, amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\n    }\\n\\n    // Safe Token transfer function, just in case if rounding error causes pool to not have enough tokens.\\n    function safeTokenTransfer(address _token, address _to, uint256 _amount) internal returns(uint256) {\\n        uint256 tokenBal = IERC20(_token).balanceOf(address(this));\\n        if(_amount > 0 && tokenBal > 0) {\\n            if (_amount > tokenBal) {\\n                _amount = tokenBal;\\n            }\\n            IERC20(_token).transfer(_to, _amount);\\n        }\\n        return _amount;\\n    }\\n\\n    function safeTransfer(address _token, address _to, uint256 _amount) internal returns(uint256) {\\n        if(_token == weth) {\\n            IWETH(weth).withdraw(_amount);\\n            address(uint160(_to)).transfer(_amount);\\n        } else {\\n            IERC20(_token).transfer(_to, _amount);\\n        }\\n        return _amount;\\n    }\\n\\n    // Update dev address by the previous dev.\\n    function dev(address _devaddr) public {\\n        require(msg.sender == devaddr || msg.sender == owner, \\\"dev: wut?\\\");\\n        devaddr = _devaddr;\\n        emit SetDevAddress(msg.sender, _devaddr);\\n    }\\n\\n    function setFeeAddress(address _feeAddress) public {\\n        require(msg.sender == feeAddress || msg.sender == owner, \\\"setFeeAddress: FORBIDDEN\\\");\\n        feeAddress = _feeAddress;\\n        emit SetFeeAddress(msg.sender, _feeAddress);\\n    }\\n\\n    function setDevRewardRate(uint256 _value) public onlyOwner {\\n        require(_value >=0 && _value <=10, 'invalid param');\\n        devRewardRate = _value;\\n    }\\n\\n    //reward has to add hidden dummy pools inorder to alter the emission, here we make it simple and transparent to all.\\n    function updateEmissionRate(uint256 _mintPerBlock) public onlyOwner {\\n        massUpdatePools();\\n        mintPerBlock = _mintPerBlock;\\n        emit UpdateEmissionRate(msg.sender, _mintPerBlock);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"\r\n    },\r\n    \"contracts/modules/ShackConfigable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.6;\\n\\ninterface IConfig {\\n    function admin() external view returns (address);\\n}\\n\\ncontract ShackConfigable {\\n    address public config;\\n    address public owner;\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n    \\n    function setupConfig(address _config) external onlyOwner {\\n        config = _config;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, 'OWNER FORBIDDEN');\\n        _;\\n    }\\n\\n    function admin() public view returns(address) {\\n        if(config != address(0)) {\\n            return IConfig(config).admin();\\n        }\\n        return owner;\\n    }\\n\\n\\n    function changeOwner(address _user) external onlyOwner {\\n        require(owner != _user, 'IFOConfig: NO CHANGE');\\n        owner = _user;\\n    }\\n    \\n    modifier onlyAdmin() {\\n        require(msg.sender == admin() || msg.sender == owner, 'admin FORBIDDEN');\\n        _;\\n    }\\n}\"\r\n    },\r\n    \"contracts/modules/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetDevAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetFeeAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintPerBlock\",\"type\":\"uint256\"}],\"name\":\"UpdateEmissionRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"_tokenType\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_isReward2\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"_allocPoints\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_depositTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_depositFeeBPs\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_tokenTypes\",\"type\":\"uint16[]\"},{\"internalType\":\"bool[]\",\"name\":\"_isReward2s\",\"type\":\"bool[]\"}],\"name\":\"batchAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_allocPoints\",\"type\":\"uint256[]\"}],\"name\":\"batchSetAllocPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_depositFeeBPs\",\"type\":\"uint16[]\"}],\"name\":\"batchSetDepositFeeBP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward2\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolExistence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accReward2PerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTokenSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tokenType\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isReward2\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"reward2Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward2Total\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"_tokenType\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_isReward2\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setDevRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"}],\"name\":\"setupConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward2Debt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DemaxShackFarm", "CompilerVersion": "v0.6.6+commit.6c089d02", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c000000000000000000000000afe24e29da7e9b3e8a25c9478376b6ad6ad788dd0000000000000000000000003860bbfc68f19b06ed2ca13f50c3ae3d9543b3bc0000000000000000000000003860bbfc68f19b06ed2ca13f50c3ae3d9543b3bc000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000000000000663b14", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}