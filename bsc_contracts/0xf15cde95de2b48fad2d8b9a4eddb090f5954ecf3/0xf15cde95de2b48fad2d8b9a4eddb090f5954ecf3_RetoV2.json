{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Roi/IMiner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\ninterface IMiner {\\n    struct User {\\n        uint invest;\\n        uint withdraw;\\n        uint reinvest;\\n        uint hatcheryMiners;\\n        uint claimedMiners;\\n        uint lastHatch;\\n        uint checkpoint;\\n        address referrals;\\n        // uint[1] referrer;\\n        uint bonus;\\n        uint amountBNBReferrer;\\n        uint amountMINERSReferrer;\\n        uint totalRefDeposits;\\n    }\\n\\n    function users(address user) external view returns (User memory);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/Roi/IRetoV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IRetoV2 {\\n\\tstruct Deposit {\\n\\t\\tuint plan;\\n\\t\\tuint amount;\\n\\t\\tuint withdrawn;\\n\\t\\tuint start;\\n\\t\\tbool force;\\n\\t}\\n\\n\\tstruct Plan {\\n\\t\\tuint percent;\\n\\t\\tuint MAX_PROFIT;\\n\\t}\\n\\n\\tevent Paused(address account);\\n\\tevent Unpaused(address account);\\n\\tevent Newbie(address user);\\n\\tevent NewDeposit(address indexed user, uint amount);\\n\\tevent Withdrawn(address indexed user, uint amount);\\n\\tevent RefBonus(address indexed referrer, address indexed referral, uint indexed level, uint amount);\\n\\tevent FeePayed(address indexed user, uint totalAmount);\\n\\tevent Reinvestment(address indexed user, uint amount);\\n\\tevent ForceWithdraw(address indexed user, uint amount);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/Roi/RetoV2_State.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport \\\"./IRetoV2.sol\\\";\\r\\n// import \\\"../Resources/IVaultReceiverV2.sol\\\";\\r\\n// import \\\"../Resources/IVaultV3.sol\\\";\\r\\n\\r\\ncontract RetoV2_State is IRetoV2 {\\r\\n\\taddress public TOKEN;\\r\\n\\tbytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\r\\n\\t// 1000 == 100%, 100 == 10%, 10 == 1%, 1 == 0.1%\\r\\n\\tuint constant public REFERRAL_LEGNTH = 1;\\r\\n\\tuint[REFERRAL_LEGNTH] public REFERRAL_PERCENTS;\\r\\n\\tuint constant public INVEST_MIN_AMOUNT = 1 ether;\\r\\n\\t// uint constant public INVEST_MAX_AMOUNT = 100 ether;\\r\\n\\tuint constant public MIN_WITHDRAW = 1 ether;\\r\\n\\tuint constant public PERCENTS_DIVIDER = 1_000;\\r\\n\\tuint constant public TIME_STEP = 1 days;\\r\\n\\tuint constant public USER_STEP = 7 * TIME_STEP;\\r\\n\\tuint constant public FORCE_WITHDRAW_PERCENT = 700;\\r\\n\\r\\n\\tuint public initDate;\\r\\n\\r\\n\\tuint public totalUsers;\\r\\n\\tuint public totalInvested;\\r\\n\\tuint public totalWithdrawn;\\r\\n\\tuint public totalDeposits;\\r\\n\\tuint public totalReinvested;\\r\\n\\r\\n\\t// address public twallet;\\r\\n\\taddress public oWallet;\\r\\n\\taddress public devFeeWallet;\\r\\n\\taddress public pWallet;\\r\\n\\taddress public pWallet2;\\r\\n\\taddress public mWallet;\\r\\n\\r\\n\\taddress public devAddress;\\r\\n\\r\\n\\tstruct User {\\r\\n\\t\\tmapping (uint => Deposit) deposits;\\r\\n\\t\\tuint totalStake;\\r\\n\\t\\tuint depositsLength;\\r\\n\\t\\tuint bonus;\\r\\n\\t\\tuint reinvest;\\r\\n\\t\\tuint totalBonus;\\r\\n\\t\\tuint checkpoint;\\r\\n\\t\\tuint[1] referrerCount;\\r\\n\\t\\tuint[1] referrerBonus;\\r\\n\\t\\tuint[1] refTotalInvest;\\r\\n\\t\\taddress referrer;\\r\\n\\t\\tuint license;\\r\\n\\t}\\r\\n\\r\\n\\tPlan[1] public plans;\\r\\n\\r\\n\\tmapping (address => User) public users;\\r\\n\\t// lottery data\\r\\n\\tuint public MAX_TICKETS_BY_POOL;\\r\\n\\tuint public MIN_REWARD_BY_POOL;\\r\\n\\r\\n\\tstruct Pool {\\r\\n\\t\\tuint id;\\r\\n\\t\\t// uint currentTicket;\\r\\n\\t\\tuint userCount;\\r\\n\\t\\tuint totalInvested;\\r\\n\\t\\tuint startTime;\\r\\n\\t\\tuint duration;\\r\\n\\t\\tuint winner;\\r\\n\\t\\tuint reward;\\r\\n\\t\\taddress winerAddress;\\r\\n\\t\\tbool isClosed;\\r\\n\\t}\\r\\n\\r\\n\\tstruct UserTicket {\\r\\n\\t\\taddress userAddress;\\r\\n\\t\\tuint id;\\r\\n\\t\\tuint poolId;\\r\\n\\t\\tuint ticketsCount;\\r\\n\\t}\\r\\n\\r\\n\\tuint public poolCount;\\r\\n\\r\\n\\tmapping(uint => Pool) public pools;\\r\\n\\tmapping(uint => mapping(uint => address)) public userPoolByIndex;\\r\\n\\tmapping(uint => mapping(address => UserTicket)) public userPool;\\r\\n\\tmapping(uint => mapping(address => EnumerableSet.UintSet)) private ticketsByUser;\\r\\n\\r\\n\\tstruct UserData {\\r\\n\\t\\tuint winsCount;\\r\\n\\t\\t// uint invested;\\r\\n\\t\\tuint reward;\\r\\n\\t}\\r\\n\\r\\n\\tmapping(address => EnumerableSet.UintSet) internal userWinsPool;\\r\\n\\tmapping(address => UserData) public userData;\\r\\n\\r\\n\\tuint public minInvest;\\r\\n\\tuint public ticketPrice;\\r\\n\\r\\n\\tmodifier onlyOwner() {\\r\\n\\t\\trequire(devAddress == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier whenNotPaused() {\\r\\n\\t\\trequire(initDate > 0, \\\"Pausable: paused\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier whenPaused() {\\r\\n\\t\\trequire(initDate == 0, \\\"Pausable: not paused\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tfunction unpause() external whenPaused onlyOwner {\\r\\n\\t\\tinitDate = block.timestamp;\\r\\n\\t\\temit Unpaused(msg.sender);\\r\\n\\t}\\r\\n\\r\\n\\tfunction isPaused() external view returns(bool) {\\r\\n\\t\\treturn (initDate == 0);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getMaxprofit(Deposit memory ndeposit) internal view returns(uint) {\\r\\n\\t\\tPlan memory plan = plans[ndeposit.plan];\\r\\n\\t\\tif(ndeposit.force) {\\r\\n\\t\\t\\treturn (ndeposit.amount * FORCE_WITHDRAW_PERCENT) / PERCENTS_DIVIDER;\\r\\n\\t\\t}\\r\\n\\t\\treturn (ndeposit.amount * plan.MAX_PROFIT) / PERCENTS_DIVIDER;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getDeposit(address _user, uint _index) public view returns(Deposit memory) {\\r\\n\\t\\treturn users[_user].deposits[_index];\\r\\n\\t}\\r\\n\\r\\n\\tfunction getDAte() public view returns(uint) {\\r\\n\\t\\treturn block.timestamp;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getReferrerBonus(address _user) external view returns(uint[REFERRAL_LEGNTH] memory) {\\r\\n\\t\\treturn users[_user].referrerBonus;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getContracDate() public view returns(uint) {\\r\\n\\t\\tif(initDate == 0) {\\r\\n\\t\\t\\treturn block.timestamp;\\r\\n\\t\\t}\\r\\n\\t\\treturn initDate;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setPlans() internal {\\r\\n\\t\\tplans[0].percent = 5;\\r\\n\\t\\tplans[0].MAX_PROFIT = 2000;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getUserPlans(address _user) external view returns(Deposit[] memory) {\\r\\n\\t\\tUser storage user = users[_user];\\r\\n\\t\\tDeposit[] memory result = new Deposit[](user.depositsLength);\\r\\n\\t\\tfor (uint i; i < user.depositsLength; i++) {\\r\\n\\t\\t\\tresult[i] = user.deposits[i];\\r\\n\\t\\t}\\r\\n\\t\\treturn result;\\r\\n\\t}\\r\\n\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Roi/RetoV2.sol\": {\r\n      \"content\": \"//TODO: DELETE takeToken\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"./RetoV2_State.sol\\\";\\r\\nimport \\\"./IMiner.sol\\\";\\r\\n\\r\\ncontract RetoV2 is RetoV2_State, AccessControl, ReentrancyGuard {\\r\\n\\tusing EnumerableSet for EnumerableSet.UintSet;\\r\\n\\t// uint constant public MIN_INVEST = 1 ether;\\r\\n\\taddress public minerAddress;\\r\\n\\taddress public defWallet;\\r\\n\\taddress public pWallet3;\\r\\n\\tmapping(address => bool) public hasInvested;\\r\\n\\r\\n\\tconstructor(address _token, address _devFeeWallet, address _defWallet, address _oWallet, address _mWallet, address _pwallet, address _pwallet2, address _pWallet3, address _minerAddress) {\\r\\n\\t\\trequire(users[_devFeeWallet].referrerCount.length == REFERRAL_LEGNTH, \\\"referral array error\\\");\\r\\n\\t\\t_grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n        _grantRole(ADMIN_ROLE, msg.sender);\\r\\n\\t\\tminerAddress = _minerAddress;\\r\\n\\t\\tTOKEN = _token;\\r\\n\\t\\tREFERRAL_PERCENTS = [100];\\r\\n\\t\\tdevAddress = msg.sender;\\r\\n\\t\\tdevFeeWallet = _devFeeWallet;\\r\\n\\t\\tdefWallet = _defWallet;\\r\\n\\t\\t// twallet = _tWallet;\\r\\n\\t\\toWallet = _oWallet;\\r\\n\\t\\tmWallet = _mWallet;\\r\\n\\t\\tpWallet = _pwallet;\\r\\n\\t\\tpWallet2 = _pwallet2;\\r\\n\\t\\tpWallet3 = _pWallet3;\\r\\n\\t\\t// MAX_TICKETS_BY_POOL \\r\\n\\t\\t// MIN_REWARD_BY_POOL = 0;\\r\\n\\t\\tminInvest = 25 ether;\\r\\n\\t\\tpoolCount++;\\r\\n        pools[poolCount] = Pool(1, 0, 0, block.timestamp, 30 * TIME_STEP, 0, 0, address(0), false);\\r\\n\\t\\tsetPlans();\\r\\n\\t\\temit Paused(msg.sender);\\r\\n\\t}\\r\\n\\r\\n\\tmodifier checkUser_() {\\r\\n\\t\\trequire(checkUser(msg.sender), \\\"try again later\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n    function setAdmins(address[] memory _admins, bool _isAdmin) external onlyOwner {\\r\\n        for (uint i = 0; i < _admins.length; i++) {\\r\\n            if (_isAdmin) {\\r\\n                grantRole(ADMIN_ROLE, _admins[i]);\\r\\n            } else {\\r\\n                revokeRole(ADMIN_ROLE, _admins[i]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\tfunction checkUser(address _user) public view returns (bool){\\r\\n\\t\\tuint check = block.timestamp - (getlastActionDate(users[_user]));\\r\\n\\t\\tif(check > USER_STEP) {\\r\\n\\t\\t\\treturn true;\\r\\n\\t\\t}\\r\\n\\t\\treturn false;\\r\\n\\t}\\r\\n\\r\\n\\tfunction invest(address referrer, uint investAmt) external payable nonReentrant whenNotPaused {\\r\\n\\t\\trequire(investAmt >= INVEST_MIN_AMOUNT, \\\"insufficient deposit\\\");\\r\\n\\t\\t// require(investAmt <= INVEST_MAX_AMOUNT, \\\"deposit limit exceeded\\\");\\r\\n\\t\\tIERC20(TOKEN).transferFrom(msg.sender, address(this), investAmt);\\r\\n\\t\\tinvestHandler(investAmt, referrer, true);\\r\\n\\t}\\r\\n\\r\\n\\tfunction investHandler(uint investAmt, address referrer, bool _withFee) internal {\\r\\n\\t\\tuint plan = 0;\\r\\n\\t\\t// require(investAmt >= MIN_INVEST, \\\"Zero amount\\\"); \\r\\n\\t\\trequire(plan < plans.length, \\\"invalid plan\\\");\\r\\n\\t\\tif(_withFee) {\\r\\n\\t\\t\\tpayFeeInvest(investAmt);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tUser storage user = users[msg.sender];\\r\\n\\r\\n\\t\\tif (user.depositsLength == 0) {\\r\\n\\t\\t\\tuser.checkpoint = block.timestamp;\\r\\n\\t\\t\\ttotalUsers++;\\r\\n\\t\\t\\tif (user.referrer == address(0) && users[referrer].depositsLength > 0 && referrer != msg.sender) {\\r\\n\\t\\t\\t\\tuser.referrer = referrer;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\temit Newbie(msg.sender);\\r\\n\\t\\t}\\r\\n\\t\\tif(investAmt >= minInvest) {\\r\\n\\t\\t\\tuint _poolId = poolCount;\\r\\n\\t\\t\\tUserTicket storage userTicket = userPool[_poolId][msg.sender];\\r\\n\\t\\t\\tif (userTicket.userAddress == address(0)) {\\r\\n\\t\\t\\t\\tuserTicket.userAddress = msg.sender;\\r\\n\\t\\t\\t\\tpools[_poolId].userCount++;\\r\\n\\t\\t\\t\\tuserTicket.id = pools[_poolId].userCount;\\r\\n\\t\\t\\t\\tuserTicket.poolId = _poolId;\\r\\n\\t\\t\\t\\tuserPoolByIndex[_poolId][userTicket.id] = msg.sender;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\taddress upline;\\r\\n\\r\\n\\t\\tif (user.referrer != address(0)) {\\r\\n\\t\\t\\tupline = user.referrer;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tupline = defWallet;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint _bonus;\\r\\n\\t\\tuint _oldWithdraw;\\r\\n\\t\\tIMiner.User memory _userMiner;\\r\\n\\t\\tif(!hasInvested[msg.sender]) {\\r\\n\\t\\t\\t_userMiner = IMiner(minerAddress).users(msg.sender);\\r\\n\\t\\t\\tif(_userMiner.withdraw < _userMiner.invest * 2) {\\r\\n\\t\\t\\t\\trequire(_userMiner.invest > _userMiner.reinvest, \\\"reinvest rest invest\\\");\\r\\n\\t\\t\\t\\t_bonus = _userMiner.invest - _userMiner.reinvest;\\r\\n\\t\\t\\t\\t_oldWithdraw = _userMiner.withdraw;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\thasInvested[msg.sender] = true;\\r\\n\\t\\t\\tif(_userMiner.referrals != address(0)) {\\r\\n\\t\\t\\t\\tupline = _userMiner.referrals;\\r\\n\\t\\t\\t\\tuser.referrer = upline;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor(uint i; i < REFERRAL_PERCENTS.length; i++) {\\r\\n\\t\\t\\tif(upline != address(0)) {\\r\\n\\t\\t\\t\\tuint amount = (investAmt * (REFERRAL_PERCENTS[i])) / (PERCENTS_DIVIDER);\\r\\n\\t\\t\\t\\t// if(upline == devAddress) {\\r\\n\\t\\t\\t\\ttransferHandler(upline, amount);\\r\\n\\t\\t\\t\\t// }\\r\\n\\t\\t\\t\\t// else {\\r\\n\\t\\t\\t\\t// \\tusers[upline].bonus += amount;\\r\\n\\t\\t\\t\\t// }\\r\\n\\t\\t\\t\\tusers[upline].totalBonus += amount;\\r\\n\\t\\t\\t\\tif(user.depositsLength == 0)\\r\\n\\t\\t\\t\\tusers[upline].referrerCount[i] += 1;\\r\\n\\t\\t\\t\\tusers[upline].referrerBonus[i] += amount;\\r\\n\\t\\t\\t\\tusers[upline].refTotalInvest[i] += investAmt;\\r\\n\\t\\t\\t\\temit RefBonus(upline, msg.sender, i, amount);\\r\\n\\t\\t\\t\\tupline = users[upline].referrer;\\r\\n\\t\\t\\t\\tif(upline == address(0)) {\\r\\n\\t\\t\\t\\t\\tupline = defWallet;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t} else break;\\r\\n\\t\\t}\\r\\n\\t\\trequire(investAmt + _bonus > 0, \\\"Zero amount\\\");\\r\\n\\t\\tDeposit memory newDeposit;\\r\\n\\t\\tnewDeposit.plan = plan;\\r\\n\\t\\tnewDeposit.amount = investAmt + _bonus;\\r\\n\\t\\tnewDeposit.start = block.timestamp;\\r\\n\\t\\tnewDeposit.withdrawn += _oldWithdraw;\\r\\n\\t\\tuser.deposits[user.depositsLength] = newDeposit;\\r\\n\\t\\tuser.depositsLength++;\\r\\n\\t\\tuser.totalStake += investAmt + _bonus;\\r\\n\\t\\tuser.license = block.timestamp;\\r\\n\\r\\n\\t\\ttotalInvested += investAmt + _bonus;\\r\\n\\t\\ttotalDeposits += 1;\\r\\n\\t\\temit NewDeposit(msg.sender, investAmt);\\r\\n\\t}\\r\\n\\r\\n\\tfunction registerInvest() external payable nonReentrant whenNotPaused {\\r\\n\\t\\tinvestHandler(0, defWallet, true);\\r\\n\\t}\\r\\n\\r\\n\\tfunction withdraw()  payable external whenNotPaused checkUser_ returns(bool) {\\r\\n\\t\\trequire(isActive(msg.sender), \\\"Dont is User\\\");\\r\\n\\t\\tUser storage user = users[msg.sender];\\r\\n\\r\\n\\t\\tuint totalAmount;\\r\\n\\r\\n\\t\\tfor(uint i; i < user.depositsLength; i++) {\\r\\n\\t\\t\\tuint dividends;\\r\\n\\t\\t\\tDeposit memory deposit = user.deposits[i];\\r\\n\\r\\n\\t\\t\\tif(deposit.withdrawn < getMaxprofit(deposit) && deposit.force == false) {\\r\\n\\t\\t\\t\\tdividends = calculateDividents(deposit, user, totalAmount);\\r\\n\\r\\n\\t\\t\\t\\tif(dividends > 0) {\\r\\n\\t\\t\\t\\t\\tuser.deposits[i].withdrawn += dividends; // changing of storage data\\r\\n\\t\\t\\t\\t\\ttotalAmount += dividends;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\trequire(totalAmount >= MIN_WITHDRAW, \\\"User has no dividends\\\");\\r\\n\\r\\n\\t\\tuint referralBonus = user.bonus;\\r\\n\\t\\tif(referralBonus > 0) {\\r\\n\\t\\t\\ttotalAmount += referralBonus;\\r\\n\\t\\t\\tdelete user.bonus;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint contractBalance = getContractBalance();\\r\\n\\t\\tif(contractBalance < totalAmount) {\\r\\n\\t\\t\\ttotalAmount = contractBalance;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuser.checkpoint = block.timestamp;\\r\\n\\r\\n\\t\\ttotalWithdrawn += totalAmount;\\r\\n\\t\\tuint256 fee = payFeeWithdraw(totalAmount);\\r\\n\\t\\tuint256 toTransfer = totalAmount - fee;\\r\\n\\t\\ttransferHandler(msg.sender, toTransfer);\\r\\n\\t\\temit FeePayed(msg.sender, fee);\\r\\n\\t\\temit Withdrawn(msg.sender, totalAmount);\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction reinvestment() external  payable  whenNotPaused checkUser_ nonReentrant returns(bool) {\\r\\n\\t\\trequire(isActive(msg.sender), \\\"Dont is User\\\");\\r\\n\\t\\tUser storage user = users[msg.sender];\\r\\n\\t\\tuint totalDividends;\\r\\n\\r\\n\\t\\tfor(uint i; i < user.depositsLength; i++) {\\r\\n\\t\\t\\tuint dividends;\\r\\n\\t\\t\\tDeposit memory deposit = user.deposits[i];\\r\\n\\r\\n\\t\\t\\tif(deposit.withdrawn < getMaxprofit(deposit) && deposit.force == false) {\\r\\n\\t\\t\\t\\tdividends = calculateDividents(deposit, user, totalDividends);\\r\\n\\r\\n\\t\\t\\t\\tif(dividends > 0) {\\r\\n\\t\\t\\t\\t\\tuser.deposits[i].withdrawn += dividends;\\r\\n\\t\\t\\t\\t\\ttotalDividends += dividends;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\trequire(totalDividends > 0, \\\"User has no dividends\\\");\\r\\n\\r\\n\\t\\tuint referralBonus = user.bonus;\\r\\n\\t\\tif(referralBonus > 0) {\\r\\n\\t\\t\\ttotalDividends += referralBonus;\\r\\n\\t\\t\\tdelete user.bonus;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuser.reinvest += totalDividends;\\r\\n\\t\\ttotalReinvested += totalDividends;\\r\\n\\t\\ttotalWithdrawn += totalDividends;\\r\\n\\t\\tuser.checkpoint = block.timestamp;\\r\\n\\t\\t// payFeeInvest(totalDividends);\\r\\n\\t\\tinvestHandler(totalDividends, user.referrer, false);\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\t// function forceWithdraw() external whenNotPaused nonReentrant {\\r\\n\\t//\\t User storage user = users[msg.sender];\\r\\n\\t// \\tuint totalDividends;\\r\\n\\t// \\tuint toFee;\\r\\n\\t// \\tfor(uint256 i; i < user.depositsLength; i++) {\\r\\n\\t// \\t\\tDeposit storage deposit = user.deposits[i];\\r\\n\\t// \\t\\tif(deposit.force == false) {\\r\\n\\t// \\t\\t\\tdeposit.force = true;\\r\\n\\t// \\t\\t\\tuint maxProfit = getMaxprofit(deposit);\\r\\n\\t// \\t\\t\\tif(deposit.withdrawn < maxProfit) {\\r\\n\\t// \\t\\t\\t\\tuint profit = maxProfit - (deposit.withdrawn);\\r\\n\\t// \\t\\t\\t\\tdeposit.withdrawn = deposit.withdrawn + (profit);\\r\\n\\t// \\t\\t\\t\\ttotalDividends += profit;\\r\\n\\t// \\t\\t\\t\\ttoFee += deposit.amount - profit;\\r\\n\\t// \\t\\t\\t}\\r\\n\\t// \\t\\t}\\r\\n\\r\\n\\t// \\t}\\r\\n\\t// \\trequire(totalDividends > 0, \\\"User has no dividends\\\");\\r\\n\\t// \\tuint256 contractBalance = getContractBalance();\\r\\n\\t// \\tif(contractBalance < totalDividends + toFee) {\\r\\n\\t// \\t\\ttotalDividends = contractBalance * (FORCE_WITHDRAW_PERCENT) / (PERCENTS_DIVIDER);\\r\\n\\t// \\t\\ttoFee = contractBalance - totalDividends;\\r\\n\\t// \\t}\\r\\n\\t// \\tuser.checkpoint = block.timestamp;\\r\\n\\t// \\tpayFees(toFee);\\r\\n\\t// \\ttransferHandler(msg.sender, totalDividends);\\r\\n\\t// \\temit FeePayed(msg.sender, toFee);\\r\\n\\t// \\temit ForceWithdraw(msg.sender, totalDividends);\\r\\n\\t// }\\r\\n\\r\\n\\tfunction getNextUserAssignment(address userAddress) public view returns (uint) {\\r\\n\\t\\tuint checkpoint = getlastActionDate(users[userAddress]);\\r\\n\\t\\tuint _date = getContracDate();\\r\\n\\t\\tif(_date > checkpoint)\\r\\n\\t\\t\\tcheckpoint = _date;\\r\\n\\t\\treturn checkpoint + (USER_STEP);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getPublicData() external view returns(uint totalUsers_,\\r\\n\\t\\tuint totalInvested_,\\r\\n\\t\\tuint totalReinvested_,\\r\\n\\t\\tuint totalWithdrawn_,\\r\\n\\t\\tuint totalDeposits_,\\r\\n\\t\\tuint balance_,\\r\\n\\t\\t// uint roiBase,\\r\\n\\t\\t// uint maxProfit,\\r\\n\\t\\tuint minDeposit,\\r\\n\\t\\tuint daysFormdeploy\\r\\n\\t\\t) {\\r\\n\\t\\ttotalUsers_ = totalUsers;\\r\\n\\t\\ttotalInvested_ = totalInvested;\\r\\n\\t\\ttotalReinvested_ = totalReinvested;\\r\\n\\t\\ttotalWithdrawn_ = totalWithdrawn;\\r\\n\\t\\ttotalDeposits_ = totalDeposits;\\r\\n\\t\\tbalance_ = getContractBalance();\\r\\n\\t\\t// roiBase = ROI_BASE;\\r\\n\\t\\t// maxProfit = MAX_PROFIT;\\r\\n\\t\\tminDeposit = INVEST_MIN_AMOUNT;\\r\\n\\t\\tdaysFormdeploy = (block.timestamp - (getContracDate())) / (TIME_STEP);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getUserData(address userAddress) external view returns(uint totalWithdrawn_,\\r\\n\\t\\tuint totalDeposits_,\\r\\n\\t\\t// uint totalBonus_,\\r\\n\\t\\tuint totalReinvest_,\\r\\n\\t\\tuint balance_,\\r\\n\\t\\tuint nextAssignment_,\\r\\n\\t\\tuint amountOfDeposits,\\r\\n\\t\\tuint checkpoint,\\r\\n\\t\\tbool isUser_,\\r\\n\\t\\taddress referrer_,\\r\\n\\t\\tuint[REFERRAL_LEGNTH] memory referrerCount_,\\r\\n\\t\\tuint[REFERRAL_LEGNTH] memory referrerBonus_,\\r\\n\\t\\tuint[REFERRAL_LEGNTH] memory refTotalInvest_\\r\\n\\t){\\r\\n\\t\\tUser storage user = users[userAddress];\\r\\n\\t\\ttotalWithdrawn_ = getUserTotalWithdrawn(userAddress);\\r\\n\\t\\ttotalDeposits_ = getUserTotalDeposits(userAddress);\\r\\n\\t\\tnextAssignment_ = getNextUserAssignment(userAddress);\\r\\n\\t\\tbalance_ = getUserDividends(userAddress);\\r\\n\\t\\t// totalBonus_ = user.bonus;\\r\\n\\t\\ttotalReinvest_ = user.reinvest;\\r\\n\\t\\tamountOfDeposits = user.depositsLength;\\r\\n\\r\\n\\t\\tcheckpoint = getlastActionDate(user);\\r\\n\\t\\tisUser_ = user.depositsLength > 0;\\r\\n\\t\\treferrer_ = user.referrer;\\r\\n\\t\\treferrerCount_ = user.referrerCount;\\r\\n\\t\\treferrerBonus_= user.referrerBonus;\\r\\n\\t\\trefTotalInvest_ = user.refTotalInvest;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getContractBalance() public view returns (uint) {\\r\\n\\t\\treturn IERC20(TOKEN).balanceOf(address(this));\\r\\n\\t}\\r\\n\\r\\n\\tfunction getUserDividends(address userAddress) internal view returns (uint) {\\r\\n\\t\\tUser storage user = users[userAddress];\\r\\n\\r\\n\\t\\tuint totalDividends;\\r\\n\\r\\n\\t\\tfor(uint i; i < user.depositsLength; i++) {\\r\\n\\r\\n\\t\\t\\tDeposit memory deposit = users[userAddress].deposits[i];\\r\\n\\r\\n\\t\\t\\tif(deposit.withdrawn < getMaxprofit(deposit) && deposit.force == false) {\\r\\n\\t\\t\\t\\tuint dividends = calculateDividents(deposit, user, totalDividends);\\r\\n\\t\\t\\t\\ttotalDividends += dividends;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn totalDividends;\\r\\n\\t}\\r\\n\\r\\n\\tfunction calculateDividents(Deposit memory deposit, User storage user, uint) internal view returns (uint) {\\r\\n\\t\\tuint dividends;\\r\\n\\t\\tuint depositPercentRate = plans[deposit.plan].percent;\\r\\n\\r\\n\\t\\tuint checkDate = getDepsitStartDate(deposit);\\r\\n\\r\\n\\t\\tif(checkDate < getlastActionDate(user)) {\\r\\n\\t\\t\\tcheckDate = getlastActionDate(user);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tdividends = (deposit.amount\\r\\n\\t\\t * (depositPercentRate * (block.timestamp - (checkDate))))\\r\\n\\t\\t / ((PERCENTS_DIVIDER) * (TIME_STEP))\\r\\n\\t\\t;\\r\\n\\r\\n\\r\\n\\t\\t/*\\r\\n\\t\\tif(dividends + _current > userMaxProfit) {\\r\\n\\t\\t\\tdividends = userMaxProfit - (_current, \\\"max dividends\\\");\\r\\n\\t\\t}\\r\\n\\t\\t*/\\r\\n\\r\\n\\t\\tif(deposit.withdrawn + (dividends) > getMaxprofit(deposit)) {\\r\\n\\t\\t\\tdividends = getMaxprofit(deposit) - (deposit.withdrawn);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn dividends;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction isActive(address userAddress) public view returns (bool) {\\r\\n\\t\\tUser storage user = users[userAddress];\\r\\n\\r\\n\\t\\tif (user.depositsLength > 0) {\\r\\n\\t\\t\\tif(users[userAddress].deposits[user.depositsLength-1].withdrawn < getMaxprofit(users[userAddress].deposits[user.depositsLength-1])) {\\r\\n\\t\\t\\t\\treturn true;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\treturn false;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getUserDepositInfo(address userAddress, uint index) external view returns(\\r\\n\\t\\tuint plan_,\\r\\n\\t\\tuint amount_,\\r\\n\\t\\tuint withdrawn_,\\r\\n\\t\\tuint timeStart_,\\r\\n\\t\\tuint maxProfit\\r\\n\\t\\t) {\\r\\n\\t\\tDeposit memory deposit = users[userAddress].deposits[index];\\r\\n\\t\\tamount_ = deposit.amount;\\r\\n\\t\\tplan_ = deposit.plan;\\r\\n\\t\\twithdrawn_ = deposit.withdrawn;\\r\\n\\t\\ttimeStart_= getDepsitStartDate(deposit);\\r\\n\\t\\tmaxProfit = getMaxprofit(deposit);\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\tfunction getUserTotalDeposits(address userAddress) internal view returns(uint) {\\r\\n\\t\\tUser storage user = users[userAddress];\\r\\n\\t\\tuint amount;\\r\\n\\t\\tfor(uint i; i < user.depositsLength; i++) {\\r\\n\\t\\t\\tamount += users[userAddress].deposits[i].amount;\\r\\n\\t\\t}\\r\\n\\t\\treturn amount;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getUserTotalWithdrawn(address userAddress) internal view returns(uint) {\\r\\n\\t\\tUser storage user = users[userAddress];\\r\\n\\r\\n\\t\\tuint amount;\\r\\n\\r\\n\\t\\tfor(uint i; i < user.depositsLength; i++) {\\r\\n\\t\\t\\tamount += users[userAddress].deposits[i].withdrawn;\\r\\n\\t\\t}\\r\\n\\t\\treturn amount;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getlastActionDate(User storage user) internal view returns(uint) {\\r\\n\\t\\tuint checkpoint = user.checkpoint;\\r\\n\\t\\tuint _date = getContracDate();\\r\\n\\t\\tif(_date > checkpoint)\\r\\n\\t\\t\\tcheckpoint = _date;\\r\\n\\t\\treturn checkpoint;\\r\\n\\t}\\r\\n\\r\\n\\tfunction isContract(address addr) internal view returns (bool) {\\r\\n\\t\\tuint size;\\r\\n\\t\\tassembly { size := extcodesize(addr) }\\r\\n\\t\\treturn size > 0;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getDepsitStartDate(Deposit memory ndeposit) private view returns(uint) {\\r\\n\\t\\tuint _date = getContracDate();\\r\\n\\t\\tif(_date > ndeposit.start) {\\r\\n\\t\\t\\treturn _date;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\treturn ndeposit.start;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction transferHandler(address to, uint amount) internal {\\r\\n\\t\\tif(amount > getContractBalance()) {\\r\\n\\t\\t\\tamount = getContractBalance();\\r\\n\\t\\t}\\r\\n\\t\\tif(to == defWallet) {\\r\\n\\t\\t\\tuint toDev = (amount * 20) / 100;\\r\\n\\t\\t\\tuint toPWallet = (amount * 10) / 100;\\r\\n\\t\\t\\t// payable(defWallet).transfer(toDev);\\r\\n\\t\\t\\t// payable(oWallet).transfer(amount - toDev);\\r\\n\\t\\t\\tIERC20(TOKEN).transfer(devFeeWallet, toDev);\\r\\n\\t\\t\\tIERC20(TOKEN).transfer(pWallet, toPWallet);\\r\\n\\t\\t\\tIERC20(TOKEN).transfer(oWallet, amount - toDev - toPWallet);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t// payable(to).transfer(amount);\\r\\n\\t\\t\\tIERC20(TOKEN).transfer(to, amount);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction payFeeInvest(uint amount) internal returns (uint _totalFee) {\\r\\n\\t\\tuint toOWallet = (amount * 60) / PERCENTS_DIVIDER;\\r\\n\\t\\tuint toDevWallet = (amount * 15) / PERCENTS_DIVIDER;\\r\\n\\t\\tuint toMWallet = (amount * 17) / PERCENTS_DIVIDER;\\r\\n\\t\\tuint toPWallet = (amount * 4) / PERCENTS_DIVIDER;\\r\\n\\t\\tuint toPWallet2 = (amount * 2) / PERCENTS_DIVIDER;\\r\\n\\t\\tuint toPWallet3 = (amount * 2) / PERCENTS_DIVIDER;\\r\\n\\t\\ttransferHandler(oWallet, toOWallet);\\r\\n\\t\\t// transferHandler(twallet, toTWallet);\\r\\n\\t\\ttransferHandler(devFeeWallet, toDevWallet);\\r\\n\\t\\ttransferHandler(mWallet, toMWallet);\\r\\n\\t\\ttransferHandler(pWallet, toPWallet);\\r\\n\\t\\ttransferHandler(pWallet2, toPWallet2);\\r\\n\\t\\ttransferHandler(pWallet3, toPWallet3);\\r\\n\\t\\t_totalFee = toOWallet + toDevWallet + toMWallet + toPWallet + toPWallet2 + toPWallet3;\\r\\n\\t\\temit FeePayed(msg.sender, _totalFee);\\r\\n\\t\\treturn _totalFee;\\r\\n\\t}\\r\\n\\r\\n\\tfunction payFeeWithdraw(uint amount) internal returns (uint _totalFee) {\\r\\n\\t\\tuint toOWallet = (amount * 42) / PERCENTS_DIVIDER;\\r\\n\\t\\tuint toDevWallet = (amount * 11) / PERCENTS_DIVIDER;\\r\\n\\t\\tuint toMWallet = (amount * 11) / PERCENTS_DIVIDER;\\r\\n\\t\\tuint toPWallet = (amount * 3) / PERCENTS_DIVIDER;\\r\\n\\t\\tuint toPWallet2 = (amount * 2) / PERCENTS_DIVIDER;\\r\\n\\t\\tuint toPWallet3 = (amount * 1) / PERCENTS_DIVIDER;\\r\\n\\t\\ttransferHandler(oWallet, toOWallet);\\r\\n\\t\\t// transferHandler(twallet, toTWallet);\\r\\n\\t\\ttransferHandler(devFeeWallet, toDevWallet);\\r\\n\\t\\ttransferHandler(mWallet, toMWallet);\\r\\n\\t\\ttransferHandler(pWallet, toPWallet);\\r\\n\\t\\ttransferHandler(pWallet2, toPWallet2);\\r\\n\\t\\ttransferHandler(pWallet3, toPWallet3);\\r\\n\\t\\t_totalFee = toOWallet + toDevWallet + toMWallet + toPWallet + toPWallet2 + toPWallet3;\\r\\n\\t\\temit FeePayed(msg.sender, _totalFee);\\r\\n\\t\\treturn _totalFee;\\r\\n\\t}\\r\\n\\r\\n\\t// function payBonus() payable nonReentrant whenNotPaused external {\\r\\n\\t// \\tUser storage user = users[msg.sender];\\r\\n\\t// \\tuint amount = user.bonus;\\r\\n\\t// \\tuint _totalFee = payFeeWithdraw(amount);\\r\\n\\t// \\tdelete user.bonus;\\r\\n\\t// \\ttransferHandler(payable(msg.sender), amount - _totalFee);\\r\\n\\t// }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function addPool(uint _duration) external onlyAdmin {\\r\\n        require(pools[poolCount].isClosed == true, \\\"Previous pool is not closed\\\");\\r\\n        poolCount++;\\r\\n        pools[poolCount] = Pool(poolCount, 0, 0, block.timestamp, _duration, 0, 0, address(0), false);\\r\\n    }\\r\\n\\r\\n    function closePool(uint _poolId, bool _isClosed) external onlyAdmin {\\r\\n        pools[_poolId].isClosed = _isClosed;\\r\\n    }\\r\\n\\r\\n    function editPool(uint _poolId, uint _duration) external onlyAdmin {\\r\\n        pools[_poolId].duration = _duration;\\r\\n    }\\r\\n\\r\\n\\tfunction payReward(uint _poolId, uint winner, uint _reward) external onlyAdmin {\\r\\n        require(_poolId > 0, \\\"Pool ID must be greater than 0\\\");\\r\\n        require(_poolId <= poolCount, \\\"Pool does not exist\\\");\\r\\n        require(winner > 0, \\\"Winner must be greater than 0\\\");\\r\\n        require(winner <= pools[_poolId].userCount, \\\"Winner does not exist\\\");\\r\\n        Pool memory pool = pools[_poolId];\\r\\n        // require(pool.startTime + pools[_poolId].duration < block.timestamp, \\\"Pool is not closed\\\");\\r\\n        require(pool.winner == 0, \\\"Pool is closed\\\");\\r\\n        // uint reward = pool.reward;\\r\\n\\t\\tIERC20(TOKEN).transferFrom(msg.sender, address(this), _reward);\\r\\n        require(_reward <= IERC20(TOKEN).balanceOf(msg.sender), \\\"Not enough tokens\\\");\\r\\n\\t\\taddress _winnerWallet = userPoolByIndex[_poolId][winner];\\r\\n        require(_winnerWallet != address(0), \\\"Winner does not exist 2\\\");\\r\\n        // require(pool.isClosed == false, \\\"Pool is closed\\\");\\r\\n\\t\\tpool.reward = _reward;\\r\\n        pool.winner = winner;\\r\\n\\t\\tpool.winerAddress = _winnerWallet;\\r\\n        pool.isClosed = true;\\r\\n        pools[_poolId] = pool;\\r\\n        userData[_winnerWallet].reward += _reward;\\r\\n        userData[_winnerWallet].winsCount++;\\r\\n        userWinsPool[_winnerWallet].add(_poolId);\\r\\n\\t\\tusers[_winnerWallet].bonus += _reward;\\r\\n\\t\\tpoolCount++;\\r\\n        pools[poolCount] = Pool(1, 0, 0, block.timestamp, 30 * TIME_STEP, 0, 0, address(0), false);\\r\\n        // transferHandler(_winnerWallet, _reward);\\r\\n        IERC20(TOKEN).transfer(_winnerWallet, _reward);\\r\\n    }\\r\\n\\r\\n    function getAllPools() external view returns (Pool[] memory) {\\r\\n        Pool[] memory poolsArray = new Pool[](poolCount);\\r\\n        for (uint i = 0; i < poolCount; i++) {\\r\\n            poolsArray[i] = pools[i + 1];\\r\\n        }\\r\\n        return poolsArray;\\r\\n    }\\r\\n\\r\\n    function getAllUsersByPool(uint _poolId) external view returns (UserTicket[] memory) {\\r\\n        UserTicket[] memory _users = new UserTicket[](pools[_poolId].userCount);\\r\\n        for (uint i = 0; i < pools[_poolId].userCount; i++) {\\r\\n            _users[i] = userPool[_poolId][userPoolByIndex[_poolId][i + 1]];\\r\\n        }\\r\\n        return _users;\\r\\n    }\\r\\n\\r\\n    function allWalletsByPool(uint _poolId) external view returns (address[] memory) {\\r\\n        address[] memory _users = new address[](pools[_poolId].userCount);\\r\\n        for (uint i = 0; i < pools[_poolId].userCount; i++) {\\r\\n            _users[i] = userPoolByIndex[_poolId][i + 1];\\r\\n        }\\r\\n        return _users;\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devFeeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pwallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pwallet2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pWallet3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"FeePayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ForceWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FORCE_WITHDRAW_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVEST_MIN_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TICKETS_BY_POOL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_REWARD_BY_POOL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_WITHDRAW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL_LEGNTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_PERCENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USER_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"allWalletsByPool\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isClosed\",\"type\":\"bool\"}],\"name\":\"closePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"editPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPools\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winner\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winerAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isClosed\",\"type\":\"bool\"}],\"internalType\":\"struct RetoV2_State.Pool[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getAllUsersByPool\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketsCount\",\"type\":\"uint256\"}],\"internalType\":\"struct RetoV2_State.UserTicket[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContracDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDAte\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"plan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"}],\"internalType\":\"struct IRetoV2.Deposit\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getNextUserAssignment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPublicData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalUsers_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInvested_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReinvested_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposits_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daysFormdeploy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getReferrerBonus\",\"outputs\":[{\"internalType\":\"uint256[1]\",\"name\":\"\",\"type\":\"uint256[1]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposits_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReinvest_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextAssignment_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOfDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUser_\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"referrer_\",\"type\":\"address\"},{\"internalType\":\"uint256[1]\",\"name\":\"referrerCount_\",\"type\":\"uint256[1]\"},{\"internalType\":\"uint256[1]\",\"name\":\"referrerBonus_\",\"type\":\"uint256[1]\"},{\"internalType\":\"uint256[1]\",\"name\":\"refTotalInvest_\",\"type\":\"uint256[1]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserDepositInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"plan_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeStart_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxProfit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserPlans\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"plan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"}],\"internalType\":\"struct IRetoV2.Deposit[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasInvested\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"investAmt\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minInvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pWallet2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pWallet3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winner\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"payReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MAX_PROFIT\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winner\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winerAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isClosed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerInvest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvestment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_admins\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_isAdmin\",\"type\":\"bool\"}],\"name\":\"setAdmins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReinvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"winsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketsCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userPoolByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"license\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "RetoV2", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000363a3a43a615f1ba36ee6fa6ad0f368f9a83f208000000000000000000000000e796a3d839233aa60a49ed60df951fcf5ebc1cd3000000000000000000000000b473228cb54307923ee10952632782aff738644d0000000000000000000000007743642184ddf548d96c65a54d71469a16030b68000000000000000000000000da79b61e3e8365f63334db3558ee1dcbaf7ffb7c0000000000000000000000006d1d7eba646bc8a6a3d3b7625b2bf8adb5becde00000000000000000000000006f754f2d7a57a6a41c15625b936e1b50dd5bfe56000000000000000000000000e67ace71265601d47e5b78ac4940c9f3db81a764", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}