{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/Pausable.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: sevning.sol\r\n\r\npragma solidity ^0.8.19;\r\n\r\ninterface pancake {\r\n    function getAmountsOut(\r\n        uint256 amountIn,\r\n        address[] memory path\r\n    ) external view returns (uint256[] memory amounts);\r\n}\r\n\r\ncontract sevningnetwork is Ownable, Pausable, ReentrancyGuard {\r\n    event StartMinig(address user, uint256 value, uint timestamp);\r\n    event ReStartMinig(address user, uint256 value, uint timestamp);\r\n    struct Packages {\r\n        uint256 number;\r\n        uint256 max;\r\n        uint256 min;\r\n        uint256 fee;\r\n        uint256 miningReward;\r\n    }\r\n\r\n    struct Minerstaking {\r\n        uint256 package;\r\n        address miner;\r\n        uint256 amount;\r\n        uint256 miningreward;\r\n        uint256 rewardper;\r\n        uint256 startdatetime;\r\n        uint256 enddatetime;\r\n        uint256 fee;\r\n        // uint256 stakingNumber;\r\n    }\r\n\r\n    struct Users {\r\n        address refferal;\r\n        address user;\r\n        uint256 value;\r\n        uint256 starttime;\r\n        uint256 endtime;\r\n        uint256 package;\r\n        uint256 srfreeze; //daily\r\n        uint256 sfreeze; //staking\r\n        uint256 rfreeze; // refferal reward\r\n    }\r\n    struct Statistics {\r\n        uint256 miningreward; // total += srfreeze\r\n        uint256 refferalreward;\r\n        uint256 totalstake; // ++sfreeze\r\n        // uint256 stakingNumber;\r\n        uint256 totalwithdrawal;\r\n    }\r\n\r\n    struct RefferalRewardTxn {\r\n        address from;\r\n        address to;\r\n        uint256 amount;\r\n        uint256 reward;\r\n        uint256 percentage;\r\n        uint256 time;\r\n    }\r\n\r\n    struct Minerswithdrawal {\r\n        address user;\r\n        uint256 amount;\r\n        uint256 withdrawalfee;\r\n        uint256 percentage;\r\n        uint256 time;\r\n        uint256 received;\r\n    }\r\n\r\n    Minerswithdrawal[] public minerswithdrawal;\r\n    Minerstaking[] public minerstaking;\r\n    Packages[] public packages;\r\n    mapping(address => Users) public users;\r\n    address[] public miners;\r\n    uint256 public refferalRewardPercentage = 2e18; //\r\n    uint256 public DAYS = 7; //\r\n    RefferalRewardTxn[] public reffrealrewardtxn;\r\n    address BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n    IERC20 public busdToken = IERC20(BUSD);\r\n    address public routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address public wbnb = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    uint256 public withdrawlFee = 2e18; //\r\n    uint256 public totalStakingNumber;\r\n    uint256 public totalRefferalRewardTxn;\r\n    mapping(address => bool) public blocked;\r\n    address public defaultaddress = 0xF8C43EC47b3a2D9Bcd9690B1d4d27db96A80FE83;\r\n    mapping(address => Statistics) public statistics;\r\n    uint256 public totalStaking;\r\n    uint256 public totalWithdrawl;\r\n\r\n    function blockMiner(address miner) public onlyOwner {\r\n        blocked[miner] = true;\r\n    }\r\n\r\n    function unBlockMiner(address miner) public onlyOwner {\r\n        blocked[miner] = false;\r\n    }\r\n\r\n    function changeRefferalRewardPercentage(uint256 value) public onlyOwner {\r\n        refferalRewardPercentage = value;\r\n    }\r\n\r\n    function changeDays(uint256 value) public onlyOwner {\r\n        DAYS = value;\r\n    }\r\n\r\n    function changeWithdrawlFee(uint256 value) public onlyOwner {\r\n        withdrawlFee = value;\r\n    }\r\n\r\n    modifier isBlocked() {\r\n        require(blocked[msg.sender] == false, \"miner is blocked !\");\r\n        _;\r\n    }\r\n\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    constructor() {\r\n        packages.push(\r\n            Packages({\r\n                number: 1,\r\n                min: 10e18,\r\n                max: 100e18,\r\n                fee: 1e18,\r\n                miningReward: 1e18\r\n            })\r\n        );\r\n        packages.push(\r\n            Packages({\r\n                number: 2,\r\n                min: 101e18,\r\n                max: 250e18,\r\n                fee: 2e18,\r\n                miningReward: 1e18\r\n            })\r\n        );\r\n        packages.push(\r\n            Packages({\r\n                number: 3,\r\n                min: 251e18,\r\n                max: 500e18,\r\n                fee: 3e18,\r\n                miningReward: 1e18\r\n            })\r\n        );\r\n        packages.push(\r\n            Packages({\r\n                number: 4,\r\n                min: 501e18,\r\n                max: 1000e18,\r\n                fee: 5e18,\r\n                miningReward: 1e18\r\n            })\r\n        );\r\n        packages.push(\r\n            Packages({\r\n                number: 5,\r\n                min: 1001e18,\r\n                max: 2500e18,\r\n                fee: 10e18,\r\n                miningReward: 1e18\r\n            })\r\n        );\r\n        packages.push(\r\n            Packages({\r\n                number: 6,\r\n                min: 2501e18,\r\n                max: 5000e18,\r\n                fee: 25e18,\r\n                miningReward: 1e18\r\n            })\r\n        );\r\n    }\r\n\r\n    function convertBUSDtoBNB(uint256 value) public view returns (uint256) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = BUSD;\r\n        path[1] = wbnb;\r\n        uint256[] memory price = pancake(routerAddress).getAmountsOut(\r\n            value,\r\n            path\r\n        );\r\n        return price[1];\r\n    }\r\n\r\n    function findpackage(uint256 _amt) public view returns (uint256) {\r\n        require(_amt > 0, \"Amount is not ZERO.\");\r\n        uint256 pkg = 0;\r\n        for (uint256 i = 0; i < packages.length; i++) {\r\n            if (_amt >= packages[i].min && _amt <= packages[i].max) {\r\n                pkg = i;\r\n            }\r\n        }\r\n        return pkg;\r\n    }\r\n\r\n    function checkuserstatus(address _address) public view returns (uint256) {\r\n        if (_address != defaultaddress) {\r\n            if ((users[_address].endtime > block.timestamp)) {\r\n                return (1);\r\n            } else {\r\n                return (0);\r\n            }\r\n        } else {\r\n            return (1);\r\n        }\r\n    }\r\n\r\n    function startmining(\r\n        uint256 value,\r\n        address refferal\r\n    ) external payable whenNotPaused nonReentrant isBlocked {\r\n        address user = msg.sender;\r\n        require(user != refferal, \"user and refferal cannot same !\");\r\n        require(checkuserstatus(refferal) == 1, \"Referral is not active\");\r\n        require(users[user].user == address(0), \"Staking already running !\");\r\n        miners.push(user);\r\n        uint256 package = findpackage(value);\r\n        uint256 fee = convertBUSDtoBNB(packages[package].fee);\r\n        require(msg.value > fee, \"fee is not valid\");\r\n        (bool sent, ) = (address(this)).call{value: msg.value}(\"\");\r\n        require(sent, \"Failed to send BNB\");\r\n        busdToken.transferFrom(user, address(this), value);\r\n        users[user].package = package;\r\n        users[user].user = user;\r\n        users[user].value = value;\r\n        users[user].refferal = refferal;\r\n        users[user].starttime = block.timestamp;\r\n        users[user].endtime = block.timestamp + (86400 * DAYS);\r\n        // users[user].endtime = block.timestamp + 300;\r\n        users[user].sfreeze = value;\r\n        users[user].srfreeze = (((value * packages[package].miningReward) /\r\n            100e18) * DAYS);\r\n        // users[user].isStaked = true;\r\n        statistics[user].totalstake = statistics[user].totalstake + value;\r\n        // users[user].stakingNumber += 1;\r\n        // if (users[refferal].user == address(0)) {\r\n            totalRefferalRewardTxn++;\r\n            users[refferal].rfreeze += ((value * refferalRewardPercentage) /\r\n                100e18);\r\n            reffrealrewardtxn.push(\r\n                RefferalRewardTxn({\r\n                    from: user,\r\n                    to: refferal,\r\n                    amount: value,\r\n                    reward: ((value * refferalRewardPercentage) / 100e18),\r\n                    percentage: refferalRewardPercentage,\r\n                    time: block.timestamp + (86400 * DAYS)\r\n                })\r\n            );\r\n        // }\r\n        totalStakingNumber++;\r\n        totalStaking += value;\r\n        minerstaking.push(\r\n            Minerstaking({\r\n                package: package,\r\n                miner: user,\r\n                amount: value,\r\n                miningreward: users[user].srfreeze,\r\n                rewardper: packages[package].miningReward,\r\n                startdatetime: users[user].starttime,\r\n                enddatetime: users[user].endtime,\r\n                fee: msg.value\r\n            })\r\n        );\r\n        emit StartMinig(user, value, block.timestamp);\r\n    }\r\n\r\n    function restartmining(\r\n        uint256 value\r\n    ) external payable whenNotPaused isBlocked nonReentrant {\r\n        address user = msg.sender;\r\n        require(checkuserstatus(user) == 0, \"Staking already running !\");\r\n        require(users[user].user != address(0), \"you have not staked yet !\");\r\n        require(\r\n            users[user].endtime < block.timestamp,\r\n            \"unstake time remaining !\"\r\n        );\r\n        require(\r\n            users[user].value <= value,\r\n            \"you cannot stake less amount than your previous stake !\"\r\n        );\r\n        //claim reward = sfreeze + srfreeze + rfreeze\r\n        uint256 reward = users[user].sfreeze +\r\n            users[user].srfreeze +\r\n            users[user].rfreeze;\r\n        uint256 withdrawalfee = ((reward * withdrawlFee) / 100e18);\r\n        uint256 package = findpackage(value);\r\n        uint256 fee = convertBUSDtoBNB(packages[package].fee);\r\n        require(msg.value > fee, \"fee is not valid\");\r\n        (bool sent, ) = (address(this)).call{value: fee}(\"\");\r\n        require(sent, \"Failed to send BNB\");\r\n        busdToken.transferFrom(user, address(this), value);\r\n        busdToken.transfer(user, (reward - withdrawalfee));\r\n        minerswithdrawal.push(\r\n            Minerswithdrawal({\r\n                user: user,\r\n                amount: reward,\r\n                withdrawalfee: withdrawalfee,\r\n                percentage: withdrawlFee,\r\n                time: block.timestamp,\r\n                received: (reward - withdrawalfee)\r\n            })\r\n        );\r\n        statistics[user].totalwithdrawal =\r\n            statistics[user].totalwithdrawal +\r\n            (reward - withdrawalfee);\r\n        users[user].package = package;\r\n        statistics[user].miningreward += users[user].srfreeze;\r\n        statistics[user].refferalreward += users[user].rfreeze;\r\n        statistics[user].totalstake += users[user].sfreeze;\r\n        users[user].value = value;\r\n        users[user].starttime = block.timestamp;\r\n        users[user].endtime = block.timestamp + (86400 * DAYS);\r\n        // users[user].endtime = block.timestamp + 300;\r\n        users[user].srfreeze = (((value * packages[package].miningReward) /\r\n            100e18) * DAYS);\r\n        users[user].sfreeze = value;\r\n        users[user].rfreeze = 0;\r\n        // users[user].stakingNumber += 1;\r\n        totalStakingNumber++;\r\n        totalStaking += value;\r\n        totalWithdrawl += reward;\r\n        minerstaking.push(\r\n            Minerstaking({\r\n                package: package,\r\n                miner: user,\r\n                amount: value,\r\n                miningreward: users[user].srfreeze,\r\n                rewardper: packages[package].miningReward,\r\n                startdatetime: users[user].starttime,\r\n                enddatetime: users[user].endtime,\r\n                fee: msg.value\r\n            })\r\n        );\r\n        emit ReStartMinig(user, value, block.timestamp);\r\n    }\r\n\r\n    function getminerswithdrawal(\r\n        address _address\r\n    ) public view returns (Minerswithdrawal[] memory) {\r\n        Minerswithdrawal[] memory id = new Minerswithdrawal[](\r\n            minerswithdrawal.length\r\n        );\r\n        for (uint256 i = 0; i < minerswithdrawal.length; i++) {\r\n            Minerswithdrawal storage with = minerswithdrawal[i];\r\n            if (with.user == _address) {\r\n                id[i] = with;\r\n            }\r\n        }\r\n        return id;\r\n    }\r\n\r\n    function getAllMinerswithdrawal(\r\n    ) public view returns (Minerswithdrawal[] memory) {\r\n        Minerswithdrawal[] memory id = new Minerswithdrawal[](\r\n            minerswithdrawal.length\r\n        );\r\n        for (uint256 i = 0; i < minerswithdrawal.length; i++) {\r\n            Minerswithdrawal storage with = minerswithdrawal[i];\r\n            // if (with.user == _address) {\r\n                id[i] = with;\r\n            // }\r\n        }\r\n        return id;\r\n    }\r\n\r\n    function withdrawlToken(address _address, uint256 value) public onlyOwner {\r\n        IERC20 token = IERC20(_address);\r\n        token.transfer(msg.sender, value);\r\n    }\r\n\r\n    function withdrawlCoin(uint256 value) public onlyOwner {\r\n        (bool sent, ) = (msg.sender).call{value: value}(\"\");\r\n        require(sent, \"Failed to send BNB\");\r\n    }\r\n\r\n    function getMinerStakings(\r\n        address _address\r\n    ) public view returns (Minerstaking[] memory) {\r\n        Minerstaking[] memory id = new Minerstaking[](minerstaking.length);\r\n        for (uint256 i = 0; i < minerstaking.length; i++) {\r\n            Minerstaking storage miner = minerstaking[i];\r\n            if (miner.miner == _address) {\r\n                id[i] = miner;\r\n            }\r\n        }\r\n        return id;\r\n    }\r\n\r\n    function getAllMinersStaking() public view returns (Minerstaking[] memory) {\r\n        Minerstaking[] memory id = new Minerstaking[](minerstaking.length);\r\n        for (uint256 i = 0; i < minerstaking.length; i++) {\r\n            Minerstaking storage miner = minerstaking[i];\r\n            id[i] = miner;\r\n        }\r\n        return id;\r\n    }\r\n\r\n    function getRefferalRewardTxn(\r\n        address _address\r\n    ) public view returns (RefferalRewardTxn[] memory) {\r\n        RefferalRewardTxn[] memory id = new RefferalRewardTxn[](\r\n            totalRefferalRewardTxn\r\n        );\r\n        for (uint256 i = 0; i < totalRefferalRewardTxn; i++) {\r\n            RefferalRewardTxn storage txn = reffrealrewardtxn[i];\r\n            if (txn.to == _address) {\r\n                id[i] = txn;\r\n            }\r\n        }\r\n        return id;\r\n    }\r\n\r\n    function getAllRefferalRewardTxn(\r\n    ) public view returns (RefferalRewardTxn[] memory) {\r\n        RefferalRewardTxn[] memory id = new RefferalRewardTxn[](\r\n            totalRefferalRewardTxn\r\n        );\r\n        for (uint256 i = 0; i < totalRefferalRewardTxn; i++) {\r\n            RefferalRewardTxn storage txn = reffrealrewardtxn[i];\r\n                id[i] = txn;\r\n        }\r\n        return id;\r\n    }\r\n\r\n    function balanceBUSD() public view returns (uint256 balance){\r\n        balance = busdToken.balanceOf(address(this));\r\n    }\r\n    function balanceBNB() public view returns (uint256 balance){\r\n        balance = address(this).balance;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ReStartMinig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StartMinig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceBUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"}],\"name\":\"blockMiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"changeDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"changeRefferalRewardPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"changeWithdrawlFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkuserstatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"convertBUSDtoBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultaddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"findpackage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllMinersStaking\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"package\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miningreward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardper\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startdatetime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enddatetime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct sevningnetwork.Minerstaking[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllMinerswithdrawal\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"}],\"internalType\":\"struct sevningnetwork.Minerswithdrawal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRefferalRewardTxn\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct sevningnetwork.RefferalRewardTxn[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getMinerStakings\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"package\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miningreward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardper\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startdatetime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enddatetime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct sevningnetwork.Minerstaking[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getRefferalRewardTxn\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct sevningnetwork.RefferalRewardTxn[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getminerswithdrawal\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"}],\"internalType\":\"struct sevningnetwork.Minerswithdrawal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minerstaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"package\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miningreward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardper\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startdatetime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enddatetime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minerswithdrawal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miningReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refferalRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reffrealrewardtxn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"restartmining\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"refferal\",\"type\":\"address\"}],\"name\":\"startmining\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"statistics\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"miningreward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refferalreward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalstake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalwithdrawal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRefferalRewardTxn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakingNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"}],\"name\":\"unBlockMiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"refferal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"starttime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endtime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"package\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"srfreeze\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sfreeze\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rfreeze\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbnb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawlCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawlFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawlToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "sevningnetwork", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a7c6a791e2bd5584b23deb0762806a2383b9f2f1757309f21faadcc75231b91d"}