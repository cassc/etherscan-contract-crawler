{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the BEP20 standard\r\n */\r\ninterface BEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract MoonVestToken is BEP20 {\r\n    /// @dev Token Details\r\n    string public constant name = \"MoonVest.Network\";\r\n    string public constant symbol = \"MVN\";\r\n    uint8 public constant decimals = 12;\r\n    mapping(address => uint256) private balances;\r\n    mapping(address => mapping(address => uint256)) private allowances;\r\n    uint256 private baseSupply = 1e24;\r\n    uint256 private _totalSupply = 1e24;\r\n\r\n    /// @dev Divisors/Multiplier used to calculate burn and fees\r\n    uint32 private baseBurnDivisor = 30;\r\n    uint32 private hodlerFeeDivisor = 50;\r\n    uint32 private externalFeeDivisor = 1000;\r\n    uint8 private whaleBurnMultiplier = 50;\r\n\r\n    /// @dev Admin and address where fees are sent\r\n    address private admin;\r\n    address private feeAddress;\r\n\r\n    mapping(address => bool) private excludedSenders;\r\n    mapping(address => bool) private excludedReceivers;\r\n\r\n    /// @dev freeTransfer() enabled\r\n    bool private allowFreeTransfer = false;\r\n\r\n    constructor() {\r\n        admin = msg.sender;\r\n        feeAddress = msg.sender;\r\n        balances[msg.sender] = _totalSupply;\r\n        excludedSenders[msg.sender] = true;\r\n        excludedReceivers[msg.sender] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the admin\r\n     */\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"MoonVestToken: caller is not Admin\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return Balance of given @param account\r\n     */\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @return Balance of given @param account\r\n     */\r\n    function balanceOf(address account)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return (balances[account] * _totalSupply) / baseSupply;\r\n    }\r\n\r\n    /**\r\n     * @return Allowance given to @param spender by @param owner\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @notice Approves @param spender to spend up to @param amount on behalf of caller\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Increases the spending allowance granted to @param spender for caller by @param addedValue\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        external\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            allowances[msg.sender][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Decreases the spending allowance granted to @param spender for caller by @param subtractedValue\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        external\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = allowances[msg.sender][spender];\r\n        _approve(msg.sender, spender, currentAllowance - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @param _baseBurnDivisor divisor to calculate base burn rate. amount / divisor = baseBurnRate\r\n     */\r\n    function setBaseBurnDivisor(uint8 _baseBurnDivisor) external onlyAdmin {\r\n        require(\r\n            _baseBurnDivisor > 19,\r\n            \"MoonVestToken::setBaseBurnDivisor: baseBurnDivisor must be greater than 19\"\r\n        ); // 1/20 = 5% max base burn\r\n        baseBurnDivisor = _baseBurnDivisor;\r\n    }\r\n\r\n    /**\r\n     * @param _hodlerFeeDivisor divisor to calculate fees to Hodlers. amount / divisor = fees\r\n     */\r\n    function setHodlerFeeDivisor(uint8 _hodlerFeeDivisor) external onlyAdmin {\r\n        require(\r\n            _hodlerFeeDivisor > 19,\r\n            \"MoonVestToken::setFeeDivisor: hodlerFeeDivisor must be greater than 19\"\r\n        ); // 1/20 = 5% Max Fee\r\n        hodlerFeeDivisor = _hodlerFeeDivisor;\r\n    }\r\n\r\n    /**\r\n     * @param _externalFeeDivisor divisor to calculate fees to Hodlers. amount / divisor = fees\r\n     */\r\n    function setExternalFeeDivisor(uint8 _externalFeeDivisor)\r\n        external\r\n        onlyAdmin\r\n    {\r\n        require(\r\n            _externalFeeDivisor > 19,\r\n            \"MoonVestToken::setFeeDivisor: externalFeeDivisor must be greater than 19\"\r\n        ); // 1/20 = 5% Max Fee\r\n        externalFeeDivisor = _externalFeeDivisor;\r\n    }\r\n\r\n    /**\r\n     * @param _whaleBurnMultiplier Multiplier to calculate amount burned for large transfers\r\n     */\r\n    function setWhaleBurnMultiplier(uint8 _whaleBurnMultiplier)\r\n        external\r\n        onlyAdmin\r\n    {\r\n        require(\r\n            _whaleBurnMultiplier < 30,\r\n            \"MoonVestToken::setWhaleBurnMultiplier: _whaleBurnMultiplier must be less than 30\"\r\n        );\r\n        whaleBurnMultiplier = _whaleBurnMultiplier;\r\n    }\r\n\r\n    /**\r\n     * @param _feeAddress address to collect fees\r\n     */\r\n    function setFeeAddress(address _feeAddress) external onlyAdmin {\r\n        feeAddress = _feeAddress;\r\n    }\r\n\r\n    /**\r\n     * @param _senderToAdd address to exclude from paying fees when sending\r\n     */\r\n    function addExcludedSender(address _senderToAdd) external onlyAdmin {\r\n        excludedSenders[_senderToAdd] = true;\r\n    }\r\n\r\n    /**\r\n     * @param _senderToRemove address to remove from fee exception when sending\r\n     */\r\n    function removeExcludedSender(address _senderToRemove) external onlyAdmin {\r\n        excludedSenders[_senderToRemove] = false;\r\n    }\r\n\r\n    /**\r\n     * @param _receiverToAdd address to exclude from paying fees when receiving\r\n     */\r\n    function addExcludedReceiver(address _receiverToAdd) external onlyAdmin {\r\n        excludedReceivers[_receiverToAdd] = true;\r\n    }\r\n\r\n    /**\r\n     * @param _receiverToRemove address to remove from fee exception when receiving\r\n     */\r\n    function removeExcludedReceiver(address _receiverToRemove)\r\n        external\r\n        onlyAdmin\r\n    {\r\n        excludedReceivers[_receiverToRemove] = false;\r\n    }\r\n\r\n    /**\r\n     * @return bool wether @param sender is excluded from fees\r\n     */\r\n    function isExcludedSender(address sender) external view returns (bool) {\r\n        return excludedSenders[sender];\r\n    }\r\n\r\n    /**\r\n     * @return bool wether @param receiver is excluded from fees\r\n     */\r\n    function isExcludedReceiver(address receiver) external view returns (bool) {\r\n        return excludedReceivers[receiver];\r\n    }\r\n\r\n    /**\r\n     * @param _allowFreeTransfer Whether free transfers should be allowed to public\r\n     */\r\n    function setAllowFreeTransfer(bool _allowFreeTransfer) external onlyAdmin {\r\n        allowFreeTransfer = _allowFreeTransfer;\r\n    }\r\n\r\n    /**\r\n     * @param _newAdmin address to become new Admin.\r\n     */\r\n    function setAdmin(address _newAdmin) external onlyAdmin {\r\n        admin = _newAdmin;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer tokens\r\n     * @param recipient Address to recieve transferred tokens\r\n     * @param amount Amount to be sent. A portion of this will be burned and collected as fees\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        // Bypass fees if sender or reciever is excluded\r\n        if (excludedSenders[msg.sender] || excludedReceivers[recipient]) {\r\n            _transfer(msg.sender, recipient, amount);\r\n        } else {\r\n            _transferWithFees(msg.sender, recipient, amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer tokens from approved allowance\r\n     * @param sender address sending tokens.\r\n     * @param recipient address to recieve transferred tokens.\r\n     * @param amount Amount to be sent. A portion of this will be burned.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        _approve(sender, msg.sender, allowances[sender][msg.sender] - amount);\r\n\r\n        // Bypass fees if sender or reciever is excluded\r\n        if (\r\n            excludedSenders[sender] ||\r\n            excludedSenders[msg.sender] ||\r\n            excludedReceivers[recipient]\r\n        ) {\r\n            _transfer(sender, recipient, amount);\r\n        } else {\r\n            _transferWithFees(sender, recipient, amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer without burn/fees. This is not the standard BEP20 transfer.\r\n     * @param recipient address to recieve transferred tokens.\r\n     * @param amount Amount to be sent.\r\n     */\r\n    function freeTransfer(address recipient, uint256 amount) external {\r\n        require(\r\n            allowFreeTransfer,\r\n            \"MoonVestToken::freeTransfer: freeTransfer is currently turned off\"\r\n        );\r\n        _transfer(msg.sender, recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer without burn from approved allowance. This is not the standard BEP20 transferFrom.\r\n     * @param sender address sending tokens.\r\n     * @param recipient address to recieve transferred tokens.\r\n     * @param amount Amount to be sent.\r\n     */\r\n    function freeTransferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external {\r\n        require(\r\n            allowFreeTransfer,\r\n            \"MoonVestToken::freeTransferFrom: freeTrasnfer is currently turned off\"\r\n        );\r\n        _approve(sender, msg.sender, allowances[sender][msg.sender] - amount);\r\n        _transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers tokens to multiple addresses.\r\n     * @param addresses Addresses to send tokens to.\r\n     * @param amounts Amounts of tokens to send.\r\n     */\r\n    function multiTransfer(\r\n        address[] calldata addresses,\r\n        uint256[] calldata amounts\r\n    ) external {\r\n        require(\r\n            allowFreeTransfer,\r\n            \"MoonVestToken::freeTransferFrom: freeTrasnfer is currently turned off\"\r\n        );\r\n        require(\r\n            addresses.length == amounts.length,\r\n            \"MoonVestToken::multiTransfer: addresses and amounts count do not match\"\r\n        );\r\n        for (uint256 i = 0; i < amounts.length; i++) {\r\n            _transfer(msg.sender, addresses[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Destroys @param amount tokens and reduces total supply.\r\n     */\r\n    function burn(uint256 amount) external {\r\n        uint256 baseAccountBalance = balances[msg.sender];\r\n        require(\r\n            (baseAccountBalance * _totalSupply) / baseSupply >= amount,\r\n            \"MoonVestToken::burn: burn amount exceeds balance\"\r\n        );\r\n        uint256 baseAmount = (amount * baseSupply) / _totalSupply;\r\n        balances[msg.sender] = baseAccountBalance - baseAmount;\r\n        _totalSupply -= amount;\r\n        baseSupply -= baseAmount;\r\n        _removeDust(msg.sender);\r\n        emit Transfer(msg.sender, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer with all fees and burn applied\r\n     * @param sender address sending tokens.\r\n     * @param recipient address to recieve transferred tokens.\r\n     * @param amount Amount to be sent. Fees and burn deducted from this amount\r\n     */\r\n    function _transferWithFees(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        // Calculate burn and fee amount\r\n        uint256 burnAmount =(amount / baseBurnDivisor) + ((amount**2 / _totalSupply) * whaleBurnMultiplier);\r\n        if (burnAmount > amount / 10) {\r\n            burnAmount = amount / 10;\r\n        }\r\n        uint256 externalFeeAmount = amount / externalFeeDivisor;\r\n        uint256 hodlerFeeAmount = amount / hodlerFeeDivisor;\r\n        uint256 recipientAmount = amount - burnAmount - externalFeeAmount - hodlerFeeAmount;\r\n\r\n        // Burn/transfer tokens\r\n        balances[sender] -= (amount * baseSupply) / _totalSupply;\r\n        balances[feeAddress] += (externalFeeAmount * baseSupply) / _totalSupply;\r\n        balances[recipient] += (recipientAmount * baseSupply) / _totalSupply;\r\n        baseSupply -= ((hodlerFeeAmount + burnAmount) * baseSupply) / _totalSupply;\r\n        _totalSupply -= burnAmount;\r\n        _removeDust(sender);\r\n        emit Transfer(sender, address(0), burnAmount);\r\n        emit Transfer(sender, feeAddress, externalFeeAmount);\r\n        emit Transfer(sender, recipient, recipientAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Moves @param amount tokens from @param sender to @param recipient\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        require(\r\n            recipient != address(0),\r\n            \"MoonVestToken::_transfer: transfer to the zero address\"\r\n        );\r\n        uint256 baseSenderBalance = balances[sender];\r\n        require(\r\n            (baseSenderBalance * _totalSupply) / baseSupply >= amount,\r\n            \"MoonVestToken::_transfer: transfer amount exceeds balance\"\r\n        );\r\n        uint256 baseAmount = (amount * baseSupply) / _totalSupply;\r\n        balances[sender] = baseSenderBalance - baseAmount;\r\n        balances[recipient] += baseAmount;\r\n        _removeDust(sender);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Approves spending to @param spender of up to @param amount tokens from @param owner\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Remove extremely small balances likely caused by integer division\r\n     */\r\n    function _removeDust(address account) private {\r\n        if (balances[account] < 5) {\r\n            balances[account] = 0;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiverToAdd\",\"type\":\"address\"}],\"name\":\"addExcludedReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_senderToAdd\",\"type\":\"address\"}],\"name\":\"addExcludedSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"freeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"freeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"isExcludedReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"isExcludedSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiverToRemove\",\"type\":\"address\"}],\"name\":\"removeExcludedReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_senderToRemove\",\"type\":\"address\"}],\"name\":\"removeExcludedSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allowFreeTransfer\",\"type\":\"bool\"}],\"name\":\"setAllowFreeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_baseBurnDivisor\",\"type\":\"uint8\"}],\"name\":\"setBaseBurnDivisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_externalFeeDivisor\",\"type\":\"uint8\"}],\"name\":\"setExternalFeeDivisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_hodlerFeeDivisor\",\"type\":\"uint8\"}],\"name\":\"setHodlerFeeDivisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_whaleBurnMultiplier\",\"type\":\"uint8\"}],\"name\":\"setWhaleBurnMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MoonVestToken", "CompilerVersion": "v0.8.1+commit.df193b15", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f721bacd8217ae91aed5997606bfc00af6cfaf3cf590a0cdb4b5decad3e1fa3e"}