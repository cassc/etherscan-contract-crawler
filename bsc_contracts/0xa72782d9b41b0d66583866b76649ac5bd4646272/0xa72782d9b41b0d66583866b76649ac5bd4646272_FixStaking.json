{"SourceCode": "// File: contracts/lib/UintSet.sol\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\nstruct Set {\r\n    // Storage of set values\r\n    uint256[] _values;\r\n    // Position of the value in the `values` array, plus 1 because index 0\r\n    // means a value is not in the set.\r\n    mapping(uint256 => uint256) _indexes;\r\n}\r\n\r\nlibrary UintSet {\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Set storage set, uint256 value) internal returns (bool) {\r\n        if (!contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Set storage set, uint256 value) internal returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                uint256 lastvalue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastvalue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Set storage set, uint256 value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(Set storage set) internal view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Set storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return set._values[index];\r\n    }\r\n\r\n    function getArray(Set storage set)\r\n        internal\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        return set._values;\r\n    }\r\n}\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/Pausable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/IAccessControl.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/AccessControl.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role, _msgSender());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view virtual {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        Strings.toHexString(uint160(account), 20),\r\n                        \" is missing role \",\r\n                        Strings.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     *\r\n     * NOTE: This function is deprecated in favor of {_grantRole}.\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal virtual {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal virtual {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/FixStaking.sol\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\n\r\n\r\n\r\ncontract FixStaking is AccessControl, Pausable {\r\n    using UintSet for Set;\r\n\r\n    event RemovePool(uint256 poolIndex);\r\n    event SetMinMax(uint256 minStake, uint256 maxStake);\r\n    event SetPenDay(uint256 penaltyDuration);\r\n    event PoolFunded(uint256 poolIndex, uint256 fundAmount);\r\n    event ReserveWithdrawed(uint256 poolIndex);\r\n    event Claimed(\r\n        address user,\r\n        uint256 depositAmountIncludePen,\r\n        uint256 reward,\r\n        uint256 stakerIndex,\r\n        uint256 poolIndex\r\n    );\r\n    event Deposit(\r\n        address indexed staker,\r\n        uint256 amount,\r\n        uint256 startTime,\r\n        uint256 closedTime,\r\n        uint256 indexed poolIndex,\r\n        uint256 indexed stakerIndex\r\n    );\r\n\r\n    event Restake(\r\n        address indexed staker,\r\n        uint256 amount,\r\n        uint256 indexed poolIndex,\r\n        uint256 indexed stakerIndex\r\n    );\r\n\r\n    event Withdraw(\r\n        address indexed staker,\r\n        uint256 withdrawAmount,\r\n        uint256 reward,\r\n        uint256 mainPenaltyAmount,\r\n        uint256 subPenaltyAmount,\r\n        uint256 indexed poolIndex,\r\n        uint256 indexed stakerIndex\r\n    );\r\n\r\n    event EmergencyWithdraw(\r\n        address indexed staker,\r\n        uint256 withdrawAmount,\r\n        uint256 reward,\r\n        uint256 mainPenaltyAmount,\r\n        uint256 subPenaltyAmount,\r\n        uint256 indexed poolIndex,\r\n        uint256 indexed stakerIndex\r\n    );\r\n    event NewPool(\r\n        uint256 indexed poolIndex,\r\n        uint256 startTime,\r\n        uint256 duration,\r\n        uint256 apy,\r\n        uint256 mainPenaltyRate,\r\n        uint256 subPenaltyRate,\r\n        uint256 lockedLimit,\r\n        uint256 promisedReward,\r\n        bool nftReward\r\n    );\r\n\r\n    struct PoolInfo {\r\n        uint256 startTime;\r\n        uint256 duration;\r\n        uint256 apy;\r\n        uint256 mainPenaltyRate;\r\n        uint256 subPenaltyRate;\r\n        uint256 lockedLimit;\r\n        uint256 stakedAmount;\r\n        uint256 reserve;\r\n        uint256 promisedReward;\r\n        bool nftReward;\r\n    }\r\n\r\n    struct StakerInfo {\r\n        uint256 poolIndex;\r\n        uint256 startTime;\r\n        uint256 amount;\r\n        uint256 lastIndex;\r\n        uint256 pendingStart;\r\n        uint256 reward;\r\n        bool isFinished;\r\n        bool pendingRequest;\r\n    }\r\n\r\n    mapping(address => mapping(uint256 => StakerInfo)) public stakers;\r\n    mapping(address => uint256) public currentStakerIndex;\r\n\r\n    // user address => pool index => total deposit amount\r\n    mapping(address => mapping(uint256 => uint256)) public amountByPool;\r\n\r\n    // Minumum amount the user can deposit in 1 pool.We will not look at the total amount deposited by the user into the pool.\r\n    uint256 public minStake;\r\n\r\n    // Maximum amount the user can deposit in 1 pool. We will look at the total amount the user deposited into the pool.\r\n    uint256 public maxStake;\r\n\r\n    // Time for penalized users have to wait.\r\n    uint256 public penaltyDuration;\r\n    // Pool Index => Pool Info\r\n    PoolInfo[] public pools;\r\n\r\n    IERC20 public token;\r\n\r\n    uint256 public cts;\r\n    uint256 public ts;\r\n\r\n    uint256 private unlocked = 1;\r\n\r\n    /**\r\n     * @notice Checks if the pool exists\r\n     */\r\n    modifier isPoolExist(uint256 _poolIndex) {\r\n        require(\r\n            pools[_poolIndex].startTime > 0,\r\n            \"isPoolExist: This pool not exist\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Checks if the already finish.\r\n     */\r\n    modifier isFinished(address _user, uint256 _stakerIndex) {\r\n        StakerInfo memory staker = stakers[_user][_stakerIndex];\r\n        require(\r\n            staker.isFinished == false,\r\n            \"isFinished: This index already finished.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Check if these values are valid\r\n     */\r\n    modifier isValid(\r\n        uint256 _startTime,\r\n        uint256 _duration,\r\n        uint256 _apy\r\n    ) {\r\n        require(\r\n            _startTime >= block.timestamp,\r\n            \"isValid: Start time must be greater than current time\"\r\n        );\r\n        require(_duration != 0, \"isValid: duration can not be ZERO.\");\r\n        require(_apy != 0, \"isValid: Apy can not be ZERO.\");\r\n\r\n        _;\r\n    }\r\n\r\n    modifier lock() {\r\n        require(unlocked == 1, \"FixStaking: LOCKED\");\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n\r\n    constructor(address _token) {\r\n        require(_token != address(0), \"FixStaking: token can not be ZERO.\");\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        token = IERC20(_token);\r\n    }\r\n\r\n    /**\r\n     * Pauses the contract\r\n     */\r\n    function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * removes the pause\r\n     */\r\n    function unPause() external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n     * Sets minumum and maximum deposit amount for user\r\n     */\r\n    function setMinMaxStake(uint256 _minStake, uint256 _maxStake)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        require(\r\n            _minStake >= 0,\r\n            \"setMinMaxStake: minumum amount cannot be ZERO\"\r\n        );\r\n        require(\r\n            _maxStake > _minStake,\r\n            \"setMinMaxStake: maximum amount cannot be lower than minimum amount\"\r\n        );\r\n\r\n        minStake = _minStake;\r\n        maxStake = _maxStake;\r\n        emit SetMinMax(_minStake, _maxStake);\r\n    }\r\n\r\n    /**\r\n     * Admin can set penalty time with this function\r\n     * @param _duration penalty time in seconds\r\n     */\r\n    function setPenaltyDuration(uint256 _duration)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        require(\r\n            _duration <= 5 days,\r\n            \"setPenaltyDuration: duration must be less than 5 days\"\r\n        );\r\n        penaltyDuration = _duration;\r\n\r\n        emit SetPenDay(_duration);\r\n    }\r\n\r\n    /**\r\n     * Admin has to fund the pool for rewards. Using this function, he can finance any pool he wants.\r\n     * @param _poolIndex the index of the pool it wants to fund.\r\n     * @param _fundingAmount amount of funds to be added to the pool.\r\n     */\r\n    function fundPool(uint256 _poolIndex, uint256 _fundingAmount)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n        isPoolExist(_poolIndex)\r\n    {\r\n        require(\r\n            token.transferFrom(msg.sender, address(this), _fundingAmount),\r\n            \"fundPool: token transfer failed.\"\r\n        );\r\n\r\n        pools[_poolIndex].reserve += _fundingAmount;\r\n\r\n        emit PoolFunded(_poolIndex, _fundingAmount);\r\n    }\r\n\r\n    /**\r\n     * Used when tokens are accidentally sent to the contract.\r\n     * @param _token address will be recover.\r\n     */\r\n    function withdrawERC20(address _token, uint256 _amount)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        require(\r\n            _token != address(token),\r\n            \"withdrawERC20: token can not be Reward Token.\"\r\n        );\r\n        require(\r\n            IERC20(_token).transfer(msg.sender, _amount),\r\n            \"withdrawERC20: Transfer failed\"\r\n        );\r\n    }\r\n\r\n    function withdrawFunds(uint256 _poolIndex, uint256 _amount)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        PoolInfo memory pool = pools[_poolIndex];\r\n        require(\r\n            pool.reserve - pool.promisedReward >= _amount,\r\n            \"withdrawFunds: Amount should be lower that promised rewards.\"\r\n        );\r\n\r\n        require(\r\n            token.transferFrom(msg.sender, address(this), _amount),\r\n            \"withdrawFunds: token transfer failed.\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * With this function, the administrator can create an interest period.\r\n     * Periods of 30 - 90 - 365 days can be created.\r\n     *\r\n     * Example:\r\n     * -------------------------------------\r\n     * | Apy ve alt\u0131ndakiler 1e16 %1 olacak \u015fekilde ayarlan\u0131r.\r\n     * | duration = 2592000                   => 30  Days\r\n     * | apy = 100000000000000000             => %10 Monthly\r\n     * | apy = 10000000000000000             => %1.00 Monthly * 3 months = 3%\r\n     * | apy = 13333333333333333             => %1.33 Monthly\r\n     * | apy = 15416666666666666             => %1.54 Monthly\r\n     * | mainPenaltyRate = 100000000000000000 => %10 Main penalty rate\r\n     * | subPenaltyRate = 50000000000000000   => %5  Sub penalty rate\r\n     * |\r\n     *  -------------------------------------\r\n     *\r\n     * @param _startTime in seconds.\r\n     * @param _duration in seconds.\r\n     * @param _apy 1 month rate should be 18 decimal.\r\n     * @param _mainPenaltyRate Percentage of penalty to be deducted from the user's deposit amount.\r\n     * @param _subPenaltyRate Percentage of penalty to be deducted from the reward won by the user.\r\n     */\r\n    function createPool(\r\n        uint256 _startTime,\r\n        uint256 _duration,\r\n        uint256 _apy,\r\n        uint256 _mainPenaltyRate,\r\n        uint256 _subPenaltyRate,\r\n        uint256 _lockedLimit,\r\n        bool _nftReward\r\n    )\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n        isValid(_startTime, _duration, _apy)\r\n    {\r\n        PoolInfo memory pool = PoolInfo(\r\n            _startTime,\r\n            _duration,\r\n            _apy,\r\n            _mainPenaltyRate,\r\n            _subPenaltyRate,\r\n            _lockedLimit,\r\n            0,\r\n            0,\r\n            0,\r\n            _nftReward\r\n        );\r\n        cts = _startTime;\r\n        ts = block.timestamp;\r\n\r\n        pools.push(pool);\r\n\r\n        uint256 poolIndex = pools.length - 1;\r\n\r\n        emit NewPool(\r\n            poolIndex,\r\n            _startTime,\r\n            _duration,\r\n            _apy,\r\n            _mainPenaltyRate,\r\n            _subPenaltyRate,\r\n            _lockedLimit,\r\n            pool.promisedReward,\r\n            _nftReward\r\n        );\r\n    }\r\n\r\n    /**\r\n     * The created period can be edited by the admin.\r\n     * @param _poolIndex the index of the pool to be edited.\r\n     * @param _startTime pool start time in seconds.\r\n     * @param _duration pool duration time in seconds.\r\n     * @param _apy the new apy ratio.\r\n     * @param _mainPenaltyRate the new main penalty rate.\r\n     * @param _subPenaltyRate the new sub penalty rate.\r\n     * @param _lockedLimit maximum amount of tokens that can be locked for this pool\r\n     * @dev Reverts if the pool is not empty.\r\n     * @dev Reverts if the pool is not created before.\r\n     */\r\n    function editPool(\r\n        uint256 _poolIndex,\r\n        uint256 _startTime,\r\n        uint256 _duration,\r\n        uint256 _apy,\r\n        uint256 _mainPenaltyRate,\r\n        uint256 _subPenaltyRate,\r\n        uint256 _lockedLimit,\r\n        bool _nftReward\r\n    )\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n        isPoolExist(_poolIndex)\r\n        isValid(_startTime, _duration, _apy)\r\n    {\r\n        require(\r\n            _mainPenaltyRate == 0,\r\n            \"editPool: main penalty rate must be equal to 0\"\r\n        );\r\n        PoolInfo storage pool = pools[_poolIndex];\r\n\r\n        pool.startTime = _startTime;\r\n        pool.duration = _duration;\r\n        pool.apy = _apy;\r\n        pool.mainPenaltyRate = _mainPenaltyRate;\r\n        pool.subPenaltyRate = _subPenaltyRate;\r\n        pool.lockedLimit = _lockedLimit;\r\n        pool.nftReward = _nftReward;\r\n\r\n        emit NewPool(\r\n            _poolIndex,\r\n            _startTime,\r\n            _duration,\r\n            _apy,\r\n            _mainPenaltyRate,\r\n            _subPenaltyRate,\r\n            _lockedLimit,\r\n            pool.promisedReward,\r\n            _nftReward\r\n        );\r\n    }\r\n\r\n    /**\r\n     * The created period can be remove by the admin.\r\n     * @param _poolIndex the index of the to be removed pool.\r\n     * @dev Reverts if the pool is not empty.\r\n     * @dev Reverts if the pool is not created before.\r\n     */\r\n    function removePool(uint256 _poolIndex)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n        isPoolExist(_poolIndex)\r\n    {\r\n        if (pools[_poolIndex].reserve > 0) {\r\n            require(\r\n                token.transfer(msg.sender, pools[_poolIndex].reserve),\r\n                \"removePool: transfer failed.\"\r\n            );\r\n        }\r\n\r\n        delete pools[_poolIndex];\r\n\r\n        emit RemovePool(_poolIndex);\r\n    }\r\n\r\n    /**\r\n     * Users can deposit money into any pool they want.\r\n     * @notice Each time the user makes a deposit, the structer is kept at a different stakerIndex so it can be in more than one or the same pool at the same time.\r\n     * @notice Users can join the same pool more than once at the same time.\r\n     * @notice Users can join different pools at the same time.\r\n     * @param _amount amount of money to be deposited.\r\n     * @param _poolIndex index of the period to be entered.\r\n     * @dev reverts if the user tries to deposit it less than the minimum amount.\r\n     * @dev reverts if the user tries to deposit more than the maximum amount into the one pool.\r\n     * @dev reverts if the pool does not have enough funds.\r\n     */\r\n    function deposit(uint256 _amount, uint256 _poolIndex)\r\n        external\r\n        whenNotPaused\r\n        lock\r\n        isPoolExist(_poolIndex)\r\n    {\r\n        uint256 index = currentStakerIndex[msg.sender];\r\n        StakerInfo storage staker = stakers[msg.sender][index];\r\n        PoolInfo storage pool = pools[_poolIndex];\r\n        uint256 reward = calculateRew(_amount, pool.apy, pool.duration);\r\n        uint256 totStakedAmount = pool.stakedAmount + _amount;\r\n        pool.promisedReward += reward;\r\n        require(\r\n            _amount >= minStake,\r\n            \"deposit: You cannot deposit below the minimum amount.\"\r\n        );\r\n\r\n        require(\r\n            (amountByPool[msg.sender][_poolIndex] + _amount) <= maxStake,\r\n            \"deposit: You cannot deposit, have reached the maximum deposit amount.\"\r\n        );\r\n        require(\r\n            pool.reserve >= reward,\r\n            \"deposit: This pool has no enough reward reserve\"\r\n        );\r\n        require(\r\n            pool.lockedLimit >= totStakedAmount,\r\n            \"deposit: The pool has reached its maximum capacity.\"\r\n        );\r\n\r\n        require(\r\n            block.timestamp >= pool.startTime,\r\n            \"deposit: This pool hasn't started yet.\"\r\n        );\r\n\r\n        uint256 duration = pool.duration;\r\n        uint256 timestamp = block.timestamp;\r\n\r\n        require(\r\n            token.transferFrom(msg.sender, address(this), _amount),\r\n            \"deposit: Token transfer failed.\"\r\n        );\r\n\r\n        staker.startTime = timestamp;\r\n        staker.amount = _amount;\r\n        staker.poolIndex = _poolIndex;\r\n        pool.stakedAmount += _amount;\r\n\r\n        currentStakerIndex[msg.sender] += 1;\r\n        amountByPool[msg.sender][_poolIndex] += _amount;\r\n\r\n        emit Deposit(\r\n            msg.sender,\r\n            _amount,\r\n            timestamp,\r\n            (timestamp + duration),\r\n            _poolIndex,\r\n            index\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Users can exit the period they are in at any time.\r\n     * @notice Users who are not penalized can withdraw their money directly with this function. Users who are penalized should execut the claimPending function after this process.\r\n     * @notice If the period has not finished, they will be penalized at the rate of mainPeanltyRate from their deposit.\r\n     * @notice If the period has not finished, they will be penalized at the rate of subPenaltyRate from their rewards.\r\n     * @notice Penalized users will be able to collect their rewards later with the claim function.\r\n     * @param _stakerIndex of the period want to exit.\r\n     * @dev reverts if the user's deposit amount is ZERO\r\n     * @dev reverts if the pool does not have enough funds to cover the reward\r\n     */\r\n    function withdraw(uint256 _stakerIndex)\r\n        external\r\n        whenNotPaused\r\n        lock\r\n        isFinished(msg.sender, _stakerIndex)\r\n    {\r\n        StakerInfo storage staker = stakers[msg.sender][_stakerIndex];\r\n        PoolInfo storage pool = pools[staker.poolIndex];\r\n\r\n        require(\r\n            staker.pendingRequest == false,\r\n            \"withdraw: you have already requested claim.\"\r\n        );\r\n        require(staker.amount > 0, \"withdraw: Insufficient amount.\");\r\n\r\n        uint256 closedTime = getClosedTime(msg.sender, _stakerIndex);\r\n        uint256 duration = _getStakerDuration(closedTime, staker.startTime);\r\n        uint256 reward = calculateRew(staker.amount, pool.apy, duration);\r\n        // If the user tries exits before the pool end time they should be penalized\r\n        (uint256 mainPen, uint256 subPen) = getPenalty(\r\n            msg.sender,\r\n            _stakerIndex\r\n        );\r\n        uint256 totalReward = (reward - subPen);\r\n        uint256 totalWithdraw = (staker.amount + totalReward);\r\n\r\n        staker.reward = totalReward;\r\n        pool.reserve -= staker.reward;\r\n        pool.promisedReward = pool.promisedReward <= totalReward\r\n            ? 0\r\n            : pool.promisedReward - totalReward;\r\n\r\n        pool.stakedAmount -= staker.amount;\r\n        amountByPool[msg.sender][staker.poolIndex] -= staker.amount;\r\n        // ELSE user tries withdraw before the period end time he needs to be wait cooldown\r\n\r\n        if (closedTime <= block.timestamp) {\r\n            _transferAndRemove(msg.sender, totalWithdraw, _stakerIndex);\r\n        } else {\r\n            staker.pendingStart = block.timestamp;\r\n            staker.pendingRequest = true;\r\n        }\r\n\r\n        emit Withdraw(\r\n            msg.sender,\r\n            totalReward,\r\n            totalWithdraw,\r\n            mainPen,\r\n            subPen,\r\n            staker.poolIndex,\r\n            _stakerIndex\r\n        );\r\n    }\r\n\r\n    /**\r\n     * After the user has completed enough duration in the pool, he can stake to the same pool again with this function.\r\n     * @notice The same stakerIndex is used to save gas.\r\n     * @notice The reward he won from the pool will be added to the amount he deposited.\r\n     */\r\n    function restake(uint256 _stakerIndex)\r\n        external\r\n        whenNotPaused\r\n        lock\r\n        isFinished(msg.sender, _stakerIndex)\r\n    {\r\n        StakerInfo storage staker = stakers[msg.sender][_stakerIndex];\r\n        PoolInfo storage pool = pools[staker.poolIndex];\r\n\r\n        uint256 poolIndex = staker.poolIndex;\r\n        uint256 closedTime = getClosedTime(msg.sender, _stakerIndex);\r\n\r\n        require(staker.amount > 0, \"restake: Insufficient amount.\");\r\n        require(\r\n            staker.pendingRequest == false,\r\n            \"restake: You have already requested claim.\"\r\n        );\r\n        require(\r\n            block.timestamp >= closedTime,\r\n            \"restake: Time has not expired.\"\r\n        );\r\n\r\n        uint256 duration = _getStakerDuration(closedTime, staker.startTime);\r\n        uint256 reward = calculateRew(staker.amount, pool.apy, duration);\r\n        uint256 totalDeposit = staker.amount + reward;\r\n        uint256 promisedReward = calculateRew(\r\n            totalDeposit,\r\n            pool.apy,\r\n            pool.duration\r\n        );\r\n        pool.promisedReward += promisedReward;\r\n        // we are checking only reward because staker amount currently staked.\r\n        require(\r\n            pool.reserve >=\r\n                calculateRew(\r\n                    pool.stakedAmount + reward,\r\n                    pool.apy,\r\n                    pool.duration\r\n                ),\r\n            \"restake: This pool has no enough reward reserve\"\r\n        );\r\n\r\n        require(\r\n            (amountByPool[msg.sender][poolIndex] + reward) <= maxStake,\r\n            \"restake: You cannot deposit, have reached the maximum deposit amount.\"\r\n        );\r\n\r\n        pool.stakedAmount += reward;\r\n        staker.startTime = block.timestamp;\r\n        staker.amount = totalDeposit;\r\n        amountByPool[msg.sender][poolIndex] += reward;\r\n\r\n        emit Restake(msg.sender, totalDeposit, poolIndex, _stakerIndex);\r\n    }\r\n\r\n    /**\r\n     * @notice Emergency function\r\n     * Available only when the contract is paused. Users can withdraw their inside amount without receiving the rewards.\r\n     */\r\n    function emergencyWithdraw(uint256 _stakerIndex)\r\n        external\r\n        whenPaused\r\n        isFinished(msg.sender, _stakerIndex)\r\n    {\r\n        StakerInfo memory staker = stakers[msg.sender][_stakerIndex];\r\n        PoolInfo storage pool = pools[staker.poolIndex];\r\n\r\n        require(staker.amount > 0, \"withdraw: Insufficient amount.\");\r\n\r\n        uint256 withdrawAmount = staker.amount;\r\n        pool.stakedAmount -= withdrawAmount;\r\n        pool.promisedReward -= calculateRew(\r\n            withdrawAmount,\r\n            pool.apy,\r\n            pool.duration\r\n        );\r\n        amountByPool[msg.sender][staker.poolIndex] -= withdrawAmount;\r\n        _transferAndRemove(msg.sender, withdrawAmount, _stakerIndex);\r\n        emit EmergencyWithdraw(\r\n            msg.sender,\r\n            withdrawAmount,\r\n            staker.reward,\r\n            pool.mainPenaltyRate,\r\n            pool.subPenaltyRate,\r\n            staker.poolIndex,\r\n            _stakerIndex\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Users who have been penalized can withdraw their tokens with this function when the 4-day penalty period expires.\r\n     * @param _stakerIndex of the period want to claim.\r\n     */\r\n    function claimPending(uint256 _stakerIndex)\r\n        external\r\n        whenNotPaused\r\n        lock\r\n        isFinished(msg.sender, _stakerIndex)\r\n    {\r\n        StakerInfo storage staker = stakers[msg.sender][_stakerIndex];\r\n        PoolInfo memory pool = pools[staker.poolIndex];\r\n\r\n        require(staker.amount > 0, \"claim: You do not have a pending amount.\");\r\n\r\n        require(\r\n            block.timestamp >= staker.pendingStart + penaltyDuration,\r\n            \"claim: Please wait your time has not been up.\"\r\n        );\r\n\r\n        uint256 mainAmount = staker.amount;\r\n        // If a penalty rate is defined that will be deducted from the amount deposited by the user\r\n        // Deduct this penalty from the amount deposited by the user and transfer the penalty amount to the reward reserve.\r\n        if (pool.mainPenaltyRate > 0) {\r\n            (uint256 mainPen, ) = getPenalty(msg.sender, _stakerIndex);\r\n            mainAmount = mainAmount - mainPen;\r\n            pool.reserve += mainPen;\r\n        }\r\n\r\n        staker.pendingRequest = false;\r\n\r\n        // There is no need to deduct the amount from the reward earned as much as the penalty rate.\r\n        // We already did in the withdraw function.\r\n        uint256 totalPending = mainAmount + staker.reward;\r\n        pool.promisedReward -= staker.reward;\r\n\r\n        _transferAndRemove(msg.sender, totalPending, _stakerIndex);\r\n\r\n        emit Claimed(\r\n            msg.sender,\r\n            mainAmount,\r\n            staker.reward,\r\n            _stakerIndex,\r\n            staker.poolIndex\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns the penalty, if any, of the user whose address and index are given.\r\n     * @param _staker address of the person whose penalty will be calculated.\r\n     * @param _stakerIndex user index to be calculated.\r\n     * @return mainPenalty penalty amount, to be deducted from the deposited amount by the user.\r\n     * @return subPenalty penalty amount, to be deducted from the reward amount.\r\n     */\r\n    function getPenalty(address _staker, uint256 _stakerIndex)\r\n        public\r\n        view\r\n        returns (uint256 mainPenalty, uint256 subPenalty)\r\n    {\r\n        StakerInfo memory staker = stakers[_staker][_stakerIndex];\r\n        PoolInfo memory pool = pools[staker.poolIndex];\r\n\r\n        uint256 closedTime = getClosedTime(_staker, _stakerIndex);\r\n        if (closedTime > block.timestamp) {\r\n            uint256 duration = block.timestamp - staker.startTime;\r\n            uint256 reward = calculateRew(staker.amount, pool.apy, duration);\r\n            uint256 amountPen = (staker.amount * pool.mainPenaltyRate) / 1e18;\r\n            uint256 rewardPen = (reward * pool.subPenaltyRate) / 1e18;\r\n\r\n            return (amountPen, rewardPen);\r\n        }\r\n        return (0, 0);\r\n    }\r\n\r\n    /**\r\n     * Calculates the current reward of the user whose address and index are given.\r\n     * @param _amount amount of deposit.\r\n     * @param _apy monthly rate.\r\n     * @param _duration amount of time spent inside.\r\n     * @return reward amount of earned by the user.\r\n     */\r\n    function calculateRew(\r\n        uint256 _amount,\r\n        uint256 _apy,\r\n        uint256 _duration\r\n    ) public pure returns (uint256) {\r\n        uint256 rateToSec = (_apy * 1e36) / 30 days;\r\n        uint256 percent = (rateToSec * _duration) / 1e18;\r\n        return (_amount * percent) / 1e36;\r\n    }\r\n\r\n    /**\r\n     * Calculates the current reward of the user whose address and index are given.\r\n     * @param _staker address of the person whose reward will be calculated.\r\n     * @param _stakerIndex user index to be calculated.\r\n     * @return reward amount of earned by the user.\r\n     * @return mainPenalty penalty amount, to be deducted from the deposited amount by the user.\r\n     * @return subPenalty penalty amount, to be deducted from the reward amount.\r\n     * @return closedTime user end time.\r\n     * @return futureReward reward for completing the pool\r\n     * @return stakerInf Information owned by the user for this index.\r\n     */\r\n    function stakerInfo(address _staker, uint256 _stakerIndex)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 reward,\r\n            uint256 mainPenalty,\r\n            uint256 subPenalty,\r\n            uint256 closedTime,\r\n            uint256 futureReward,\r\n            StakerInfo memory stakerInf\r\n        )\r\n    {\r\n        StakerInfo memory staker = stakers[_staker][_stakerIndex];\r\n        PoolInfo memory pool = pools[staker.poolIndex];\r\n\r\n        closedTime = getClosedTime(_staker, _stakerIndex);\r\n        uint256 duration = _getStakerDuration(closedTime, staker.startTime);\r\n        reward = calculateRew(staker.amount, pool.apy, duration);\r\n        (mainPenalty, subPenalty) = getPenalty(_staker, _stakerIndex);\r\n        futureReward = calculateRew(staker.amount, pool.apy, pool.duration);\r\n\r\n        return (\r\n            reward,\r\n            mainPenalty,\r\n            subPenalty,\r\n            closedTime,\r\n            futureReward,\r\n            staker\r\n        );\r\n    }\r\n\r\n    function getClosedTime(address _staker, uint256 _stakerIndex)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        StakerInfo memory staker = stakers[_staker][_stakerIndex];\r\n        PoolInfo memory pool = pools[staker.poolIndex];\r\n\r\n        uint256 closedTime = staker.startTime + pool.duration;\r\n\r\n        return closedTime;\r\n    }\r\n\r\n    /**\r\n     * Returns the available allocation for the given pool index.\r\n     */\r\n    function getAvailableAllocation(uint256 _poolIndex)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        PoolInfo memory pool = pools[_poolIndex];\r\n\r\n        return pool.lockedLimit - pool.stakedAmount;\r\n    }\r\n\r\n    /**\r\n     * Returns a list of all pools.\r\n     */\r\n    function getPoolList() external view returns (PoolInfo[] memory) {\r\n        return pools;\r\n    }\r\n\r\n    /**\r\n     * Returns the total staked amount and remaining allocation all pools.\r\n     * @notice We are aware of the gas problem that will occur with the for loop here. This won't be a problem as we won't have more than 10-20 pools.\r\n     */\r\n    function getTotStakedAndAlloc()\r\n        external\r\n        view\r\n        returns (uint256 totStakedAmount, uint256 totAlloc)\r\n    {\r\n        for (uint256 i = 0; i < pools.length; i++) {\r\n            PoolInfo memory pool = pools[i];\r\n\r\n            totStakedAmount += pool.stakedAmount;\r\n            totAlloc += pool.lockedLimit - pool.stakedAmount;\r\n        }\r\n\r\n        return (totStakedAmount, totAlloc);\r\n    }\r\n\r\n    function _getStakerDuration(uint256 _closedTime, uint256 _startTime)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 endTime = block.timestamp > _closedTime\r\n            ? _closedTime\r\n            : block.timestamp;\r\n        uint256 duration = endTime - _startTime;\r\n\r\n        return duration;\r\n    }\r\n\r\n    function _transferAndRemove(\r\n        address _user,\r\n        uint256 _transferAmount,\r\n        uint256 _stakerIndex\r\n    ) private {\r\n        StakerInfo storage staker = stakers[_user][_stakerIndex];\r\n        require(\r\n            token.transfer(_user, _transferAmount),\r\n            \"_transferAndRemove: transfer failed.\"\r\n        );\r\n\r\n        staker.isFinished = true;\r\n    }\r\n\r\n    function setSystemTime() public {\r\n        ts = block.timestamp;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmountIncludePen\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakerIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"closedTime\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakerIndex\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mainPenaltyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subPenaltyAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakerIndex\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mainPenaltyRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subPenaltyRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"promisedReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"nftReward\",\"type\":\"bool\"}],\"name\":\"NewPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundAmount\",\"type\":\"uint256\"}],\"name\":\"PoolFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"}],\"name\":\"RemovePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"}],\"name\":\"ReserveWithdrawed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakerIndex\",\"type\":\"uint256\"}],\"name\":\"Restake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxStake\",\"type\":\"uint256\"}],\"name\":\"SetMinMax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penaltyDuration\",\"type\":\"uint256\"}],\"name\":\"SetPenDay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mainPenaltyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subPenaltyAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakerIndex\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"amountByPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"calculateRew\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakerIndex\",\"type\":\"uint256\"}],\"name\":\"claimPending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mainPenaltyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_subPenaltyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockedLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_nftReward\",\"type\":\"bool\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"currentStakerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mainPenaltyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_subPenaltyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockedLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_nftReward\",\"type\":\"bool\"}],\"name\":\"editPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakerIndex\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundingAmount\",\"type\":\"uint256\"}],\"name\":\"fundPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"}],\"name\":\"getAvailableAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakerIndex\",\"type\":\"uint256\"}],\"name\":\"getClosedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakerIndex\",\"type\":\"uint256\"}],\"name\":\"getPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mainPenalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subPenalty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mainPenaltyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subPenaltyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"promisedReward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"nftReward\",\"type\":\"bool\"}],\"internalType\":\"struct FixStaking.PoolInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotStakedAndAlloc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totStakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totAlloc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mainPenaltyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subPenaltyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"promisedReward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"nftReward\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"}],\"name\":\"removePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakerIndex\",\"type\":\"uint256\"}],\"name\":\"restake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxStake\",\"type\":\"uint256\"}],\"name\":\"setMinMaxStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setPenaltyDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setSystemTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakerIndex\",\"type\":\"uint256\"}],\"name\":\"stakerInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mainPenalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subPenalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureReward\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFinished\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pendingRequest\",\"type\":\"bool\"}],\"internalType\":\"struct FixStaking.StakerInfo\",\"name\":\"stakerInf\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFinished\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pendingRequest\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakerIndex\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FixStaking", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000509a51394cc4d6bb474fefb2994b8975a55a6e79", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://20fc7671609c88aff824501e0f80a0e3ed4e6e0a3cfd9fc6befa39e33d814a8b"}