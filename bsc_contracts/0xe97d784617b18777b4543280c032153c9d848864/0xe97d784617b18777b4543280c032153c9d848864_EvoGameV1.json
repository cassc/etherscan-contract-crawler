{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.12;\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender,address recipient,uint amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\nabstract contract Context \r\n{\r\n    function _msgSender() internal view virtual returns (address) \r\n    {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes calldata) \r\n    {\r\n        this; \r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract OwnableV2 is Context\r\n{\r\n    address _owner;\r\n    address public _newOwner;\r\n    constructor()  \r\n    {\r\n        _owner = payable(msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner() \r\n    {\r\n        require(_msgSender() == _owner, \"Only owner\");\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address newOwner) onlyOwner public\r\n    {\r\n        _newOwner = newOwner;\r\n    }\r\n    function confirm() public\r\n    {\r\n        require(_newOwner == msg.sender);\r\n        _owner = _newOwner;\r\n    }\r\n}\r\ncontract EvoGameV1 is OwnableV2\r\n{\r\n    IBEP20 token;\r\n/// Commission for offline contract work\r\n    uint Fee = 2 * 10 ** 15;\r\n\r\n    constructor (address _token) \r\n    {\r\n        token = IBEP20(payable(_token));\r\n    }\r\n\r\n/// Frozen tokens that can be withdrawn by the user\r\n    mapping (address => uint) public freezed;\r\n\r\n\r\n\r\n/// One transaction - one rent\r\n    modifier unfreez(address user) \r\n    {\r\n        require(freezed[user] == 0, \"unfreez now\");\r\n        _;\r\n    }\r\n\r\n\r\n/// You can withdraw only if there are tokens on defrosting\r\n    modifier canUnfreez(address user)\r\n    {\r\n        require(freezed[user] > 0, \"unfreez now\");\r\n        _;\r\n    }\r\n\r\n\r\n/// Checking that there is enough commission\r\n    modifier enoughtFee(uint amount)\r\n    {\r\n        require( amount >= Fee, \"Not enought fee\");\r\n        _;\r\n    }\r\n\r\n\r\n                        /// PUBLIC VIEW\r\n/// Frezed amount\r\n    function getFreezed (address user) public view returns(uint)\r\n    {\r\n        return freezed[user];\r\n    } \r\n\r\n                       /// PUBLIC PAYABLE\r\n/// Unfreez and transfer tokens to user\r\n    function getUnfreezAll() enoughtFee(msg.value) canUnfreez(msg.sender) public payable returns (bool)\r\n    {\r\n        payable(_owner).transfer(msg.value);\r\n        token.transfer(msg.sender, getFreezed(msg.sender));\r\n        freezed[msg.sender] = 0;\r\n        return true;\r\n    }\r\n    \r\n\r\n                      /// ADMIN\r\n\r\n/// Withdraw balance                     \r\n    function withdraw() onlyOwner public\r\n    {\r\n        payable(_owner).transfer(address(this).balance);\r\n    }\r\n\r\n/// TRANSFER \r\n    function transferFromContract(address to,  uint amount) public onlyOwner returns (bool)\r\n    {\r\n        token.transfer(to, amount);\r\n        return true;\r\n    }\r\n\r\n/// SET UNFREEZED TOKEN TO USER            <-----------------  this function \r\n    function SetUnfreez( address user, uint amount) public onlyOwner unfreez(user)\r\n    {\r\n        freezed[user] = amount;\r\n    }\r\n\r\n/// Change token contract\r\n    function SetToken (address _token) public onlyOwner\r\n    {\r\n        token = IBEP20(payable(_token));\r\n    }\r\n///    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"SetToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SetUnfreez\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFreezed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnfreezAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFromContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EvoGameV1", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000c51c05b7ea1147a9c846136a6f64358db4d6548e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7e1398c8df0323cad64dad21b9305f823b429133fcf79d2bf279454cf91e38ff"}