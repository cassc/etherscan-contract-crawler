{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.19;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function feeTo() external view returns (address);\r\n}\r\n\r\ninterface ISwapPair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n    function sync() external;\r\n}\r\n\r\nlibrary Math {\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!o\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"n0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract TokenDistributor {\r\n    constructor(address tokenA) {\r\n        IERC20(tokenA).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => uint256) private _balances;\r\n\r\n    address public fundAddress;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 private _tTotal; \r\n\r\n    uint256 public startTradeBlock;\r\n    mapping(address => bool) public _feeWhiteList;\r\n    // mapping(address => bool) public _excludeRewardList;\r\n    uint256  walletLimit = 10 * 10 ** 18;\r\n    mapping (address => bool) public isWalletLimitExempt;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    mapping(address => bool) public _swapPairList;\r\n\r\n\r\n\r\n    address public immutable _usdt;\r\n    address public immutable _mainPair;\r\n    ISwapRouter public immutable _swapRouter;\r\n    ISwapRouter public immutable otherSwapRouter;\r\n\r\n\r\n    mapping(address => bool) public _swapRouters;\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    uint256 public _buyFeeForFund = 10;\r\n    uint256 public _buyFeeForDead = 20;\r\n\r\n\r\n    uint256 public _sellFeeForFund = 30;\r\n    uint256 public _sellFeeForMoss = 50;\r\n    uint256 public _sellFeeForW3n = 50;\r\n    uint256 public _sellFeeForDead = 180;\r\n    uint256 public numTokensSellToFund = 1 * 10 ** 18;\r\n    address public Wbnb = address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);//0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\r\n    address public Moss = address(0xC651Cf5Dd958B6D7E4c417F1f366659237C34166);//0xC651Cf5Dd958B6D7E4c417F1f366659237C34166\r\n    address public W3N = address(0xBc1a515216040B88030EE67bf03cABE2022A8999);//0xBc1a515216040B88030EE67bf03cABE2022A8999\r\n\r\n\r\n    address[] public holders;\r\n    mapping(address => uint256) public holderIndex;\r\n    mapping(address => bool) public excludeHolder;\r\n    mapping(address => uint256) public _lpAmount;\r\n    mapping(address => uint256) public _init_lpAmount;\r\n    uint256 public _rewardGas = 500000;\r\n    bool public _strictCheck = true;\r\n\r\n    bool private inSwap;\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    TokenDistributor public token_distributor;\r\n\r\n    constructor (\r\n        address RouterAddress,\r\n        address otherRouterAddress,\r\n        address UsdtAddress,\r\n        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply,\r\n        address ReceivedAddress, address FundAddress\r\n    ){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n\r\n\r\n        ISwapRouter otherswapRouter = ISwapRouter(otherRouterAddress);\r\n        otherSwapRouter = otherswapRouter;\r\n        _swapRouters[address(otherSwapRouter)] = true;\r\n        _allowances[address(this)][address(otherSwapRouter)] = MAX;\r\n         \r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        _swapRouter = swapRouter;\r\n        _swapRouters[address(swapRouter)] = true;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n\r\n\r\n        address usdtPair;\r\n        _usdt = UsdtAddress;\r\n        usdtPair = ISwapFactory(swapRouter.factory()).createPair(address(this), _usdt);\r\n\r\n        _swapPairList[usdtPair] = true;\r\n        _mainPair = usdtPair;\r\n\r\n\r\n        _tTotal = Supply * 10 ** 18;\r\n        _balances[ReceivedAddress] = _tTotal;\r\n        emit Transfer(address(0), ReceivedAddress, _tTotal);\r\n\r\n\r\n        fundAddress = FundAddress;\r\n        _feeWhiteList[FundAddress] = true;\r\n        _feeWhiteList[ReceivedAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        // _feeWhiteList[address(swapRouter)] = true;\r\n        _feeWhiteList[address(0)] = true;\r\n        _feeWhiteList[DEAD] = true;\r\n\r\n\r\n        isWalletLimitExempt[msg.sender] = true;\r\n        isWalletLimitExempt[usdtPair] = true;\r\n        isWalletLimitExempt[FundAddress] = true;\r\n        isWalletLimitExempt[ReceivedAddress] = true;\r\n        isWalletLimitExempt[address(this)] = true;\r\n        // isWalletLimitExempt[address(swapRouter)] = true;\r\n        isWalletLimitExempt[address(0)] = true;\r\n        isWalletLimitExempt[DEAD] = true;\r\n\r\n        excludeHolder[address(0)] = true;\r\n        excludeHolder[DEAD] = true;\r\n\r\n        token_distributor = new TokenDistributor(_usdt);\r\n\r\n        _allowances[address(this)][address(_swapRouter)] = MAX;\r\n        IERC20(_usdt).approve(address(_swapRouter), MAX);\r\n        IERC20(_usdt).approve(address(otherSwapRouter), MAX);\r\n    }\r\n\r\n    address private _lastMaybeAddLPAddress;\r\n\r\n    function addHolder(address adr) private {\r\n        if (0 == holderIndex[adr]) {\r\n            if (0 == holders.length || holders[0] != adr) {\r\n                uint256 size;\r\n                assembly {size := extcodesize(adr)}\r\n                if (size > 0) {\r\n                    return;\r\n                }\r\n                holderIndex[adr] = holders.length;\r\n                holders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    uint256 public currentIndex;\r\n    uint256 public MossRewardCondition = 0.1 ether;\r\n    uint256 public W3nRewardCondition = 50 ether;\r\n    uint256 public holderCondition = 1 ether;\r\n    uint256 public progressRewardBlock;\r\n    uint256 public progressRewardBlockDebt = 1;\r\n\r\n\r\n\r\n    function processReward(uint256 gas) private {\r\n        uint256 blockNum = block.number;\r\n\r\n        if (progressRewardBlock + progressRewardBlockDebt > blockNum) {\r\n            return;\r\n        }\r\n\r\n        IERC20 MossToken = IERC20(Moss);\r\n        IERC20 W3nToekn = IERC20(W3N);\r\n        if (MossToken.balanceOf(address(this)) < MossRewardCondition || W3nToekn.balanceOf(address(this)) < W3nRewardCondition) {\r\n            return;\r\n        }\r\n        \r\n        IERC20 lpToken = IERC20(_mainPair);\r\n        uint lpTokenTotal = lpToken.totalSupply();\r\n\r\n        address shareHolder;\r\n        uint256 tokenBalance;\r\n        uint256 lpBalance;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = holders.length;\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            shareHolder = holders[currentIndex];\r\n            if (!excludeHolder[shareHolder]) {\r\n                tokenBalance = balanceOf(shareHolder);\r\n                lpBalance = lpToken.balanceOf(shareHolder);\r\n                if (tokenBalance >= holderCondition) {\r\n                    amount = MossRewardCondition * lpBalance / lpTokenTotal;\r\n                    if (amount > 0) {\r\n                        MossToken.transfer(shareHolder, amount);\r\n                    }\r\n\r\n                    amount = W3nRewardCondition * lpBalance / lpTokenTotal;\r\n                    if (amount > 0) {\r\n                        W3nToekn.transfer(shareHolder, amount);\r\n                    }\r\n                }\r\n            }\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        progressRewardBlock = blockNum;\r\n\r\n\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        uint256 balance = balanceOf(from);\r\n\r\n\r\n        address lastMaybeAddLPAddress = _lastMaybeAddLPAddress;\r\n        if (address(0) != lastMaybeAddLPAddress) {\r\n            _lastMaybeAddLPAddress = address(0);\r\n            if (IERC20(_mainPair).balanceOf(lastMaybeAddLPAddress) > 0) {\r\n                addHolder(lastMaybeAddLPAddress);\r\n            }\r\n        }\r\n\r\n        bool takeFee;\r\n        if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n            takeFee = true;\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                require(0 < startTradeBlock);\r\n                if (block.number < startTradeBlock + 3) {\r\n                    _funTransfer(from, to, amount, 99);\r\n                    return;\r\n                }}\r\n            uint256 maxSellAmount = balance * 9999 / 10000;\r\n            if (amount > maxSellAmount) {\r\n                amount = maxSellAmount;\r\n            }\r\n        }\r\n\r\n        bool isAddLP;\r\n        bool isRemoveLP;\r\n\r\n        // uint256 addLPLiquidity;\r\n        // if (to == _mainPair && _swapRouters[msg.sender]) {\r\n        //     uint256 addLPAmount = amount;\r\n        //     addLPLiquidity = _isAddLiquidity(addLPAmount);\r\n        //     if (addLPLiquidity > 0) {\r\n        //         _lpAmount[from] += addLPLiquidity;\r\n        //         isAddLP = true;\r\n\r\n        //     }\r\n        // }\r\n\r\n        // uint256 removeLPLiquidity;\r\n        // if (from == _mainPair && to != address(_swapRouter)) {\r\n        //     removeLPLiquidity = _isRemoveLiquidity(amount);\r\n        //     if (removeLPLiquidity > 0) {\r\n        //         isRemoveLP = true;\r\n        //         require(_lpAmount[to] >= removeLPLiquidity);\r\n        //         _lpAmount[to] -= removeLPLiquidity;\r\n        //     }\r\n        // }\r\n\r\n\r\n\r\n\r\n        uint256 addLPLiquidity;\r\n        if (to == _mainPair && _swapRouters[msg.sender]) {\r\n            addLPLiquidity = _isAddLiquidity(amount);\r\n            if (addLPLiquidity > 0) {\r\n                _lpAmount[from] += addLPLiquidity;\r\n                isAddLP = true;\r\n            }\r\n        }\r\n\r\n        uint256 removeLPLiquidity;\r\n        if (from == _mainPair) {\r\n            if (_strictCheck) {\r\n                removeLPLiquidity = _strictCheckBuy(amount);\r\n            } else {\r\n                removeLPLiquidity = _isRemoveLiquidity(amount);\r\n            }\r\n            if (removeLPLiquidity > 0) {\r\n                require(_lpAmount[to] >= removeLPLiquidity);\r\n                _lpAmount[to] -= removeLPLiquidity;\r\n                isRemoveLP = true;\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        if (isAddLP || isRemoveLP) {\r\n            takeFee = false;\r\n        }\r\n\r\n\r\n         _tokenTransfer(from, to, amount,takeFee,removeLPLiquidity);\r\n\r\n        if (from != address(this)) {\r\n            if (_mainPair == to) {\r\n                _lastMaybeAddLPAddress = from;\r\n            }\r\n            if (takeFee && !isAddLP) {\r\n                processReward(_rewardGas);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _funTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        uint256 fee\r\n    ) private {\r\n        _balances[sender] -= tAmount;\r\n        uint256 feeAmount = tAmount / 100 * fee;\r\n        if (feeAmount > 0) {\r\n            _takeTransfer(sender, fundAddress, feeAmount);\r\n        }\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function _calRemoveFeeAmount(address sender, address recipient, uint256 tAmount, uint256 removeLPLiquidity) private returns (uint256 feeAmount){\r\n        uint256 removeInitLPAmount;\r\n        uint256 user_init_lpAmount = _init_lpAmount[recipient];\r\n        if (user_init_lpAmount > 0){\r\n            if (removeLPLiquidity > user_init_lpAmount){\r\n                removeInitLPAmount = user_init_lpAmount;  \r\n            }else {\r\n                removeInitLPAmount = removeLPLiquidity;\r\n            }\r\n            feeAmount = tAmount * removeInitLPAmount / removeLPLiquidity;\r\n            _takeTransfer(sender, DEAD, feeAmount);\r\n            _init_lpAmount[recipient] -= removeInitLPAmount;\r\n        }\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        uint256 removeLPLiquidity\r\n    ) private {\r\n        uint256 feeAmount;\r\n\r\n        uint256 buyFeeForFund;\r\n        uint256 buyFeeForDead;\r\n\r\n        uint256 sellFeeForFund;\r\n        uint256 sellFeeForMoss;\r\n        uint256 sellFeeForW3n;\r\n        uint256 sellFeeForDead;\r\n\r\n        // uint256 pair_balance;\r\n\r\n        _balances[sender] -= tAmount;\r\n        if (removeLPLiquidity>0){\r\n            feeAmount += _calRemoveFeeAmount(sender, recipient, tAmount, removeLPLiquidity);\r\n        }\r\n        if (takeFee) {\r\n            if(_swapPairList[sender]){\r\n                buyFeeForFund = tAmount * _buyFeeForFund / 1000;\r\n                buyFeeForDead = tAmount * _buyFeeForDead / 1000;\r\n                feeAmount = buyFeeForFund + buyFeeForDead;\r\n                _takeTransfer(sender,DEAD,buyFeeForDead);\r\n                _takeTransfer(sender,address(this),buyFeeForFund);\r\n            }\r\n            else if (_swapPairList[recipient]){\r\n                // pair_balance = balanceOf(_mainPair);\r\n                // require(tAmount < pair_balance * SellAmountRate / 100,\"too much\");\r\n                sellFeeForFund = tAmount * _sellFeeForFund / 1000;\r\n                sellFeeForMoss = tAmount * _sellFeeForMoss / 1000;\r\n                sellFeeForW3n = tAmount * _sellFeeForW3n / 1000;\r\n                sellFeeForDead = tAmount * _sellFeeForDead / 1000;\r\n                feeAmount = sellFeeForFund + sellFeeForMoss + sellFeeForW3n + sellFeeForDead;\r\n                // _burnToDead(feeAmount);\r\n                _takeTransfer(sender,DEAD,sellFeeForDead);\r\n                _takeTransfer(sender,address(this),feeAmount-sellFeeForDead);\r\n            }\r\n            }\r\n        uint256 contract_balance = balanceOf(address(this));\r\n        bool need_sell = contract_balance >= numTokensSellToFund;\r\n        if (need_sell && !inSwap && _swapPairList[recipient]) {\r\n            SwapTokenToFund(contract_balance);\r\n        }\r\n        _takeTransfer(sender,recipient, tAmount - feeAmount);\r\n        }\r\n        \r\n    \r\n    // function _burnToDead(uint amount) private {\r\n    //     _balances[_mainPair] -= amount;\r\n    //     _takeTransfer(_mainPair, DEAD, amount);\r\n    //     ISwapPair(_mainPair).sync();\r\n\r\n    // }\r\n\r\n\r\n     function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        if(!isWalletLimitExempt[to]) {\r\n                require(_balances[to] + tAmount <= walletLimit,\"Amount Exceed From Max Wallet Limit!!\");\r\n            }\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function SwapTokenToFund(uint256 amount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _usdt;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            address(token_distributor),\r\n            block.timestamp\r\n        );\r\n        uint256 usdt_amount;\r\n        usdt_amount = IERC20(_usdt).balanceOf(address(token_distributor));\r\n        IERC20(_usdt).transferFrom(\r\n            address(token_distributor),\r\n            address(this),\r\n            usdt_amount\r\n        );\r\n\r\n\r\n        uint256 usdtForMoss;\r\n        uint256 usdtForW3n;\r\n        uint256 usdtForFund1;\r\n        uint256 usdtForFund2;\r\n\r\n        (usdtForMoss,usdtForW3n,usdtForFund1,usdtForFund2) = getSplitAmout(usdt_amount);\r\n\r\n        address[] memory pancake_path = new address[](3);\r\n        pancake_path[0] = _usdt;\r\n        pancake_path[1] = Wbnb;\r\n        pancake_path[2] = Moss;\r\n        otherSwapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            usdtForMoss,\r\n            0,\r\n            pancake_path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n\r\n        pancake_path[0] = _usdt;\r\n        pancake_path[1] = Wbnb;\r\n        pancake_path[2] = W3N;\r\n        otherSwapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            usdtForW3n,\r\n            0,\r\n            pancake_path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        IERC20(_usdt).transfer(fundAddress, usdtForFund1+usdtForFund2);\r\n    }\r\n\r\n    function getSplitAmout(uint256 num) public view returns (uint256 sellFeeForMoss ,uint256 sellFeeForW3n,uint256 buyFeeForFund,uint256 sellFeeForFund) {\r\n        uint256 totalFee = _sellFeeForMoss + _sellFeeForW3n + _buyFeeForFund + _sellFeeForFund;\r\n        sellFeeForMoss =  num * _sellFeeForMoss / totalFee;\r\n        sellFeeForW3n =  num * _sellFeeForW3n / totalFee;\r\n        buyFeeForFund =  num * _buyFeeForFund / totalFee;\r\n        sellFeeForFund =  num * _sellFeeForFund / totalFee;\r\n\r\n    }\r\n\r\n    function _isAddLiquidity(uint256 amount) internal view returns (uint256 liquidity){\r\n        (uint256 rOther, uint256 rThis, uint256 balanceOther) = _getReserves();\r\n        uint256 amountOther;\r\n        if (rOther > 0 && rThis > 0) {\r\n            amountOther = amount * rOther / rThis;\r\n        }\r\n        //isAddLP\r\n        if (balanceOther >= rOther + amountOther) {\r\n            (liquidity,) = calLiquidity(balanceOther, amount, rOther, rThis);\r\n        }\r\n    }\r\n\r\n    function _strictCheckBuy(uint256 amount) internal view returns (uint256 liquidity){\r\n        (uint256 rOther, uint256 rThis, uint256 balanceOther) = _getReserves();\r\n        //isRemoveLP\r\n        if (balanceOther < rOther) {\r\n            liquidity = (amount * ISwapPair(_mainPair).totalSupply()) /\r\n            (_balances[_mainPair] - amount);\r\n        } else {\r\n            uint256 amountOther;\r\n            if (rOther > 0 && rThis > 0) {\r\n                amountOther = amount * rOther / (rThis - amount);\r\n                //strictCheckBuy\r\n                require(balanceOther >= amountOther + rOther);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function calLiquidity(\r\n        uint256 balanceA,\r\n        uint256 amount,\r\n        uint256 r0,\r\n        uint256 r1\r\n    ) private view returns (uint256 liquidity, uint256 feeToLiquidity) {\r\n        uint256 pairTotalSupply = ISwapPair(_mainPair).totalSupply();\r\n        address feeTo = ISwapFactory(_swapRouter.factory()).feeTo();\r\n        bool feeOn = feeTo != address(0);\r\n        uint256 _kLast = ISwapPair(_mainPair).kLast();\r\n        if (feeOn) {\r\n            if (_kLast != 0) {\r\n                uint256 rootK = Math.sqrt(r0 * r1);\r\n                uint256 rootKLast = Math.sqrt(_kLast);\r\n                if (rootK > rootKLast) {\r\n                    uint256 numerator;\r\n                    uint256 denominator;\r\n                    if (address(_swapRouter) == address(0x10ED43C718714eb63d5aA57B78B54704E256024E)) {// BSC Pancake\r\n                        numerator = pairTotalSupply * (rootK - rootKLast) * 8;\r\n                        denominator = rootK * 17 + (rootKLast * 8);\r\n                    } else if (address(_swapRouter) == address(0xD99D1c33F9fC3444f8101754aBC46c52416550D1)) {//BSC testnet Pancake\r\n                        numerator = pairTotalSupply * (rootK - rootKLast);\r\n                        denominator = rootK * 3 + rootKLast;\r\n                    } else if (address(_swapRouter) == address(0xE9d6f80028671279a28790bb4007B10B0595Def1)) {//PG W3Swap\r\n                        numerator = pairTotalSupply * (rootK - rootKLast) * 3;\r\n                        denominator = rootK * 5 + rootKLast;\r\n                    } else {//SushiSwap,UniSwap,OK Cherry Swap\r\n                        numerator = pairTotalSupply * (rootK - rootKLast);\r\n                        denominator = rootK * 5 + rootKLast;\r\n                    }\r\n                    feeToLiquidity = numerator / denominator;\r\n                    if (feeToLiquidity > 0) pairTotalSupply += feeToLiquidity;\r\n                }\r\n            }\r\n        }\r\n        uint256 amount0 = balanceA - r0;\r\n        if (pairTotalSupply == 0) {\r\n            liquidity = Math.sqrt(amount0 * amount) - 1000;\r\n        } else {\r\n            liquidity = Math.min(\r\n                (amount0 * pairTotalSupply) / r0,\r\n                (amount * pairTotalSupply) / r1\r\n            );\r\n        }\r\n    }\r\n\r\n    function _getReserves() public view returns (uint256 rOther, uint256 rThis, uint256 balanceOther){\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0, uint256 r1,) = mainPair.getReserves();\r\n        address tokenOther = _usdt;\r\n        if (tokenOther < address(this)) {\r\n            rOther = r0;\r\n            rThis = r1;\r\n        } else {\r\n            rOther = r1;\r\n            rThis = r0;\r\n        }\r\n        balanceOther = IERC20(tokenOther).balanceOf(_mainPair);\r\n    }\r\n\r\n\r\n    function _isRemoveLiquidity(uint256 amount) internal view returns (uint256 liquidity){\r\n        (uint256 rOther, , uint256 balanceOther) = _getReserves();\r\n        //isRemoveLP\r\n        if (balanceOther <= rOther) {\r\n            liquidity = amount * ISwapPair(_mainPair).totalSupply() / (balanceOf(_mainPair) - amount);\r\n        }\r\n    }\r\n\r\n    // function _isRemoveLiquidityETH(uint256 amount) internal view returns (uint256 liquidity){\r\n    //     (uint256 rOther, , uint256 balanceOther) = _getReserves();\r\n    //     //isRemoveLP\r\n    //     if (balanceOther <= rOther) {\r\n    //         liquidity = amount * ISwapPair(_mainPair).totalSupply() / balanceOf(_mainPair);\r\n    //     }\r\n    // }\r\n\r\n    function startTrade() external onlyWhiteList {\r\n        require(0 == startTradeBlock, \"trading\");\r\n        startTradeBlock = block.number;\r\n    }\r\n\r\n\r\n    modifier onlyWhiteList() {\r\n        address msgSender = msg.sender;\r\n        require(msgSender == fundAddress || msgSender == _owner, \"nw\");\r\n        _;\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyWhiteList {\r\n        fundAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n        isWalletLimitExempt[addr] = true;\r\n    }\r\n\r\n    function setWalletLimit(uint256 lim) external onlyWhiteList {\r\n        walletLimit = lim;\r\n    }\r\n\r\n    function setExcludeHolder(address addr, bool enable) external onlyWhiteList {\r\n        excludeHolder[addr] = enable;\r\n    }\r\n\r\n    function setRewardGas(uint256 rewardGas) external onlyWhiteList {\r\n        require(rewardGas >= 200000 && rewardGas <= 2000000, \"200000-2000000\");\r\n        _rewardGas = rewardGas;\r\n    }\r\n\r\n\r\n    function setTax(uint256 buyFeeForFund,uint256 buyFeeForDead,uint256 sellFeeForFund,uint256 sellFeeForMoss,uint256 sellFeeForW3n,uint256 sellFeeForDead) external onlyWhiteList {\r\n        uint256 old_total;\r\n        uint256 new_total;\r\n        old_total = _buyFeeForFund + _buyFeeForDead+ _sellFeeForFund + _sellFeeForMoss + _sellFeeForW3n + _sellFeeForDead;\r\n        new_total = buyFeeForFund + buyFeeForDead+ sellFeeForFund + sellFeeForMoss + sellFeeForW3n + sellFeeForDead;\r\n        require(new_total<= old_total,\"TB\");\r\n        _buyFeeForFund = buyFeeForFund;\r\n        _buyFeeForDead = buyFeeForDead;\r\n        _sellFeeForFund  = sellFeeForFund;\r\n        _sellFeeForMoss = sellFeeForMoss;\r\n        _sellFeeForW3n = sellFeeForW3n;\r\n        _sellFeeForDead = sellFeeForDead;\r\n    }\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyWhiteList {\r\n        _feeWhiteList[addr] = enable;\r\n        isWalletLimitExempt[addr] = enable;\r\n    }\r\n\r\n    function batchSetFeeWhiteList(address [] memory addr, bool enable) external onlyWhiteList {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _feeWhiteList[addr[i]] = enable;\r\n            isWalletLimitExempt[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n\r\n    function setRewardPrams(uint256 newMossRewardCondition,uint256 newW3nRewardCondition,uint256 newHolderCondition,uint256 newProgressRewardBlockDebt) external onlyWhiteList {\r\n        MossRewardCondition = newMossRewardCondition;\r\n        W3nRewardCondition = newW3nRewardCondition;\r\n        holderCondition = newHolderCondition;\r\n        progressRewardBlockDebt = newProgressRewardBlockDebt;\r\n    }\r\n\r\n    function setNumTokensSellToFund(uint256 newNum) external onlyWhiteList {\r\n        numTokensSellToFund = newNum;\r\n    }\r\n\r\n    function withDrawToken(address tokenAddr) external onlyWhiteList {\r\n        uint256 token_num = IERC20(tokenAddr).balanceOf(address(this));\r\n        IERC20(tokenAddr).transfer(msg.sender, token_num);\r\n    }\r\n\r\n    function withDrawEth() external onlyWhiteList {\r\n        uint256 balance = address(this).balance;\r\n        payable(msg.sender).transfer(balance);\r\n    }\r\n\r\n\r\n    // uint256 SellAmountRate = 200;\r\n    // function setSellAmountRate(uint256 newNum) external onlyWhiteList {\r\n    //     SellAmountRate = newNum;\r\n    // }\r\n\r\n    function _initLPAmounts(address[] memory accounts, uint256 lpAmount) external onlyWhiteList {\r\n        for (uint i = 0; i < accounts.length; i++) {\r\n            _init_lpAmount[accounts[i]] = lpAmount;\r\n            _lpAmount[accounts[i]] += lpAmount;\r\n            addHolder(accounts[i]);\r\n        }\r\n    }\r\n\r\n    function BatchSetLPAmounts(address[] memory accounts, uint256 lpAmount) external onlyWhiteList {\r\n        for (uint i = 0; i < accounts.length; i++) {\r\n            _lpAmount[accounts[i]] = lpAmount;\r\n            addHolder(accounts[i]);\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] =\r\n                _allowances[sender][msg.sender] -\r\n                amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"approve from the zero address\");\r\n        require(spender != address(0), \"approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    receive() external payable {}\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\ncontract MAS is AbsToken {\r\n    constructor() AbsToken(\r\n    //SwapRouter\r\n        address(0xB6ABF94eea17Bf1CE99E83B16b7Cb0DfB2030645),//0xB6ABF94eea17Bf1CE99E83B16b7Cb0DfB2030645\r\n    // otherSwap\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),//0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        address(0x55d398326f99059fF775485246999027B3197955),//0x55d398326f99059fF775485246999027B3197955\r\n        \"MAS\",\r\n        \"MAS\",\r\n        18,\r\n        9999,\r\n        address(0xF47c0c2646F70838865D5899dA963A91a94aA0Be),\r\n        address(0x7Df696fD613f1A0D04023EECf71AB1e08103E595)\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"BatchSetLPAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Moss\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MossRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"W3N\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"W3nRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wbnb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFeeForDead\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFeeForFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rOther\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rThis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOther\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"_initLPAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_init_lpAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lpAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFeeForDead\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFeeForFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFeeForMoss\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFeeForW3n\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_strictCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapRouters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"getSplitAmout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sellFeeForMoss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFeeForW3n\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyFeeForFund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFeeForFund\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"holderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWalletLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"otherSwapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressRewardBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellToFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardGas\",\"type\":\"uint256\"}],\"name\":\"setRewardGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMossRewardCondition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newW3nRewardCondition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newHolderCondition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newProgressRewardBlockDebt\",\"type\":\"uint256\"}],\"name\":\"setRewardPrams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyFeeForFund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyFeeForDead\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFeeForFund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFeeForMoss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFeeForW3n\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFeeForDead\",\"type\":\"uint256\"}],\"name\":\"setTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lim\",\"type\":\"uint256\"}],\"name\":\"setWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_distributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withDrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"withDrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MAS", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://50a805b1f4f5f5470fbff67db082d38d710cb4a31ebd8d109f42375576f1b4be"}