{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// Developed by ContractChecker \u24b8\r\n\r\npragma solidity 0.8.15;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    } \r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b <= a, errorMessage);\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b > 0, errorMessage);\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn mod(a, b, \"SafeMath: modulo by zero\");\r\n\t}\r\n\r\n\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b != 0, errorMessage);\r\n\t\treturn a % b;\r\n\t}\r\n}\r\n\r\nlibrary SafeMathInt {\r\n\tint256 private constant MIN_INT256 = int256(1) << 255;\r\n\tint256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n\tfunction mul(int256 a, int256 b) internal pure returns (int256) {\r\n\t\tint256 c = a * b;\r\n\r\n\t\t// Detect overflow when multiplying MIN_INT256 with -1\r\n\t\trequire(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n\t\trequire((b == 0) || (c / b == a));\r\n\t\treturn c;\r\n\t}\r\n\tfunction div(int256 a, int256 b) internal pure returns (int256) {\r\n\t\t// Prevent overflow when dividing MIN_INT256 by -1\r\n\t\trequire(b != -1 || a != MIN_INT256);\r\n\r\n\t\t// Solidity already throws when dividing by 0.\r\n\t\treturn a / b;\r\n\t}\r\n\tfunction sub(int256 a, int256 b) internal pure returns (int256) {\r\n\t\tint256 c = a - b;\r\n\t\trequire((b >= 0 && c <= a) || (b < 0 && c > a));\r\n\t\treturn c;\r\n\t}\r\n\tfunction add(int256 a, int256 b) internal pure returns (int256) {\r\n\t\tint256 c = a + b;\r\n\t\trequire((b >= 0 && c >= a) || (b < 0 && c < a));\r\n\t\treturn c;\r\n\t}\r\n\tfunction abs(int256 a) internal pure returns (int256) {\r\n\t\trequire(a != MIN_INT256);\r\n\t\treturn a < 0 ? -a : a;\r\n\t}\r\n\tfunction toUint256Safe(int256 a) internal pure returns (uint256) {\r\n\t\trequire(a >= 0);\r\n\t\treturn uint256(a);\r\n\t}\r\n}\r\n\r\nlibrary SafeMathUint {\r\n\tfunction toInt256Safe(uint256 a) internal pure returns (int256) {\r\n\t\tint256 b = int256(a);\r\n\t\trequire(b >= 0);\r\n\t\treturn b;\r\n\t}\r\n}\r\n\r\nlibrary IterableMapping {\r\n\tstruct Map {\r\n\t\taddress[] keys;\r\n\t\tmapping(address => uint) values;\r\n\t\tmapping(address => uint) indexOf;\r\n\t\tmapping(address => bool) inserted;\r\n\t}\r\n\r\n\tfunction get(Map storage map, address key) public view returns (uint) {\r\n\t\treturn map.values[key];\r\n\t}\r\n\r\n\tfunction getIndexOfKey(Map storage map, address key) public view returns (int) {\r\n\t\tif(!map.inserted[key]) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\treturn int(map.indexOf[key]);\r\n\t}\r\n\r\n\tfunction getKeyAtIndex(Map storage map, uint index) public view returns (address) {\r\n\t\treturn map.keys[index];\r\n\t}\r\n\r\n\tfunction size(Map storage map) public view returns (uint) {\r\n\t\treturn map.keys.length;\r\n\t}\r\n\r\n\tfunction set(Map storage map, address key, uint val) public {\r\n\t\tif (map.inserted[key]) {\r\n\t\t\tmap.values[key] = val;\r\n\t\t} else {\r\n\t\t\tmap.inserted[key] = true;\r\n\t\t\tmap.values[key] = val;\r\n\t\t\tmap.indexOf[key] = map.keys.length;\r\n\t\t\tmap.keys.push(key);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction remove(Map storage map, address key) public {\r\n\t\tif (!map.inserted[key]) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tdelete map.inserted[key];\r\n\t\tdelete map.values[key];\r\n\r\n\t\tuint index = map.indexOf[key];\r\n\t\tuint lastIndex = map.keys.length - 1;\r\n\t\taddress lastKey = map.keys[lastIndex];\r\n\r\n\t\tmap.indexOf[lastKey] = index;\r\n\t\tdelete map.indexOf[key];\r\n\r\n\t\tmap.keys[index] = lastKey;\r\n\t\tmap.keys.pop();\r\n\t}\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n            address indexed sender,\r\n            uint amount0In,\r\n            uint amount1In,\r\n            uint amount0Out,\r\n            uint amount1Out,\r\n            address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n\tfunction name() external view returns (string memory);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n\tusing SafeMath for uint256;\r\n\r\n\tmapping(address => uint256) private _balances;\r\n\tmapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n\tuint256 private _totalSupply;\r\n\tstring private _name;\r\n\tstring private _symbol;\r\n\r\n\tconstructor(string memory name_, string memory symbol_) {\r\n\t\t_name = name_;\r\n\t\t_symbol = symbol_;\r\n\t}\r\n\r\n\tfunction name() public view virtual override returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\tfunction symbol() public view virtual override returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\tfunction decimals() public view virtual override returns (uint8) {\r\n\t\treturn 18;\r\n\t}\r\n\r\n\tfunction totalSupply() public view virtual override returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\tfunction balanceOf(address account) public view virtual override returns (uint256) {\r\n\t\treturn _balances[account];\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n\t\t_transfer(_msgSender(), recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\tfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n\t\t_approve(_msgSender(), spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) public virtual override returns (bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\t\t_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _transfer(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) internal virtual {\r\n\t\trequire(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\t\trequire(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\t\t_beforeTokenTransfer(sender, recipient, amount);\r\n\t\t_balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n\t\t_balances[recipient] = _balances[recipient].add(amount);\r\n\t\temit Transfer(sender, recipient, amount);\r\n\t}\r\n\r\n\tfunction _mint(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), \"ERC20: mint to the zero address\");\r\n\t\t_beforeTokenTransfer(address(0), account, amount);\r\n\t\t_totalSupply = _totalSupply.add(amount);\r\n\t\t_balances[account] = _balances[account].add(amount);\r\n\t\temit Transfer(address(0), account, amount);\r\n\t}\r\n\r\n\tfunction _burn(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), \"ERC20: burn from the zero address\");\r\n\t\t_beforeTokenTransfer(account, address(0), amount);\r\n\t\t_balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n\t\t_totalSupply = _totalSupply.sub(amount);\r\n\t\temit Transfer(account, address(0), amount);\r\n\t}\r\n\r\n\tfunction _approve(\r\n\t\taddress owner,\r\n\t\taddress spender,\r\n\t\tuint256 amount\r\n\t) internal virtual {\r\n\t\trequire(owner != address(0), \"ERC20: approve from the zero address\");\r\n\t\trequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\tfunction _beforeTokenTransfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) internal virtual {}\r\n}\r\n\r\ninterface DividendPayingTokenInterface {\r\n    function dividendOf(address _owner) external view returns(uint256);\r\n    function withdrawDividend() external;\r\n  \r\n    event DividendsDistributed(\r\n        address indexed from,\r\n        uint256 weiAmount\r\n    );\r\n    event DividendWithdrawn(\r\n        address indexed to,\r\n        uint256 weiAmount\r\n    );\r\n}\r\n\r\ninterface DividendPayingTokenOptionalInterface {\r\n    function withdrawableDividendOf(address _owner) external view returns(uint256);\r\n    function withdrawnDividendOf(address _owner) external view returns(uint256);\r\n    function accumulativeDividendOf(address _owner) external view returns(uint256);\r\n}\r\n\r\ncontract DividendPayingToken is ERC20, Ownable, DividendPayingTokenInterface, DividendPayingTokenOptionalInterface {\r\n    using SafeMath for uint256;\r\n    using SafeMathUint for uint256;\r\n    using SafeMathInt for int256;\r\n\r\n    uint256 constant internal magnitude = 2**128;\r\n    uint256 internal magnifiedDividendPerShare;\r\n    uint256 public totalDividendsDistributed;\r\n    \r\n    address public immutable rewardToken;\r\n    \r\n    mapping(address => int256) internal magnifiedDividendCorrections;\r\n    mapping(address => uint256) internal withdrawnDividends;\r\n\r\n    constructor(string memory _name, string memory _symbol, address _rewardToken) ERC20(_name, _symbol) { \r\n        rewardToken = _rewardToken;\r\n    }\r\n\r\n    function distributeDividends(uint256 amount) public onlyOwner{\r\n        require(totalSupply() > 0);\r\n\r\n        if (amount > 0) {\r\n            magnifiedDividendPerShare = magnifiedDividendPerShare.add(\r\n                (amount).mul(magnitude) / totalSupply()\r\n            );\r\n            emit DividendsDistributed(msg.sender, amount);\r\n\r\n            totalDividendsDistributed = totalDividendsDistributed.add(amount);\r\n        }\r\n    }\r\n\r\n    function withdrawDividend() public virtual override {\r\n        _withdrawDividendOfUser(payable(msg.sender));\r\n    }\r\n\r\n    function _withdrawDividendOfUser(address payable user) internal returns (uint256) {\r\n        uint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n        if (_withdrawableDividend > 0) {\r\n            withdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\r\n            emit DividendWithdrawn(user, _withdrawableDividend);\r\n            bool success = IERC20(rewardToken).transfer(user, _withdrawableDividend);\r\n\r\n            if(!success) {\r\n                withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\r\n                return 0;\r\n            }\r\n\r\n            return _withdrawableDividend;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function dividendOf(address _owner) public view override returns(uint256) {\r\n        return withdrawableDividendOf(_owner);\r\n    }\r\n\r\n    function withdrawableDividendOf(address _owner) public view override returns(uint256) {\r\n        return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\r\n    }\r\n\r\n    function withdrawnDividendOf(address _owner) public view override returns(uint256) {\r\n        return withdrawnDividends[_owner];\r\n    }\r\n\r\n    function accumulativeDividendOf(address _owner) public view override returns(uint256) {\r\n        return magnifiedDividendPerShare.mul(balanceOf(_owner)).toInt256Safe()\r\n        .add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) internal virtual override {\r\n        require(false);\r\n\r\n        int256 _magCorrection = magnifiedDividendPerShare.mul(value).toInt256Safe();\r\n        magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from].add(_magCorrection);\r\n        magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(_magCorrection);\r\n    }\r\n\r\n    function _mint(address account, uint256 value) internal override {\r\n        super._mint(account, value);\r\n\r\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n        .sub( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n    }\r\n\r\n    function _burn(address account, uint256 value) internal override {\r\n        super._burn(account, value);\r\n\r\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n        .add( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n    }\r\n\r\n    function _setBalance(address account, uint256 newBalance) internal {\r\n        uint256 currentBalance = balanceOf(account);\r\n\r\n        if(newBalance > currentBalance) {\r\n            uint256 mintAmount = newBalance.sub(currentBalance);\r\n            _mint(account, mintAmount);\r\n        } else if(newBalance < currentBalance) {\r\n            uint256 burnAmount = currentBalance.sub(newBalance);\r\n            _burn(account, burnAmount);\r\n        }\r\n    }\r\n}\r\n\r\ncontract DividendTracker is Ownable, DividendPayingToken {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n    using IterableMapping for IterableMapping.Map;\r\n\r\n    IterableMapping.Map private tokenHoldersMap;\r\n    uint256 public lastProcessedIndex;\r\n\r\n    mapping (address => bool) public excludedFromDividends;\r\n    mapping (address => uint256) public lastClaimTimes;\r\n\r\n    uint256 public claimWait;\r\n    uint256 public minimumTokenBalanceForDividends;\r\n\r\n    event ExcludeFromDividends(address indexed account);\r\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n\r\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\r\n\r\n    constructor(uint256 minBalance, address _rewardToken) DividendPayingToken(\"Reward Tracker\", \"DividendTracker\", _rewardToken) {\r\n    \tclaimWait = 3600;\r\n        minimumTokenBalanceForDividends = minBalance * 10 ** 18;\r\n    }\r\n\r\n    function _transfer(address, address, uint256) internal pure override {\r\n        require(false, \"No transfers allowed\");\r\n    }\r\n\r\n    function withdrawDividend() public pure override {\r\n        require(false, \"withdrawDividend disabled. Use the 'claim' function on the main contract.\");\r\n    }\r\n\r\n    function updateMinimumTokenBalanceForDividends(uint256 _newMinimumBalance) external onlyOwner {\r\n        require(_newMinimumBalance != minimumTokenBalanceForDividends, \"New mimimum balance for dividend cannot be same as current minimum balance\");\r\n        minimumTokenBalanceForDividends = _newMinimumBalance;\r\n    }\r\n\r\n    function excludeFromDividends(address account) external onlyOwner {\r\n    \trequire(!excludedFromDividends[account]);\r\n    \texcludedFromDividends[account] = true;\r\n\r\n    \t_setBalance(account, 0);\r\n    \ttokenHoldersMap.remove(account);\r\n\r\n    \temit ExcludeFromDividends(account);\r\n    }\r\n\r\n    function updateClaimWait(uint256 newClaimWait) external onlyOwner {\r\n        require(newClaimWait >= 3600 && newClaimWait <= 86400, \"claimWait must be updated to between 1 and 24 hours\");\r\n        require(newClaimWait != claimWait, \"Cannot update claimWait to same value\");\r\n        emit ClaimWaitUpdated(newClaimWait, claimWait);\r\n        claimWait = newClaimWait;\r\n    }\r\n\r\n    function setLastProcessedIndex(uint256 index) external onlyOwner {\r\n    \tlastProcessedIndex = index;\r\n    }\r\n\r\n    function getLastProcessedIndex() external view returns(uint256) {\r\n    \treturn lastProcessedIndex;\r\n    }\r\n\r\n    function getNumberOfTokenHolders() external view returns(uint256) {\r\n        return tokenHoldersMap.keys.length;\r\n    }\r\n\r\n    function getAccount(address _account)\r\n        public view returns (\r\n            address account,\r\n            int256 index,\r\n            int256 iterationsUntilProcessed,\r\n            uint256 withdrawableDividends,\r\n            uint256 totalDividends,\r\n            uint256 lastClaimTime,\r\n            uint256 nextClaimTime,\r\n            uint256 secondsUntilAutoClaimAvailable) {\r\n        account = _account;\r\n\r\n        index = tokenHoldersMap.getIndexOfKey(account);\r\n\r\n        iterationsUntilProcessed = -1;\r\n\r\n        if(index >= 0) {\r\n            if(uint256(index) > lastProcessedIndex) {\r\n                iterationsUntilProcessed = index.sub(int256(lastProcessedIndex));\r\n            }\r\n            else {\r\n                uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length > lastProcessedIndex ?\r\n                                                        tokenHoldersMap.keys.length.sub(lastProcessedIndex) :\r\n                                                        0;\r\n\r\n\r\n                iterationsUntilProcessed = index.add(int256(processesUntilEndOfArray));\r\n            }\r\n        }\r\n\r\n\r\n        withdrawableDividends = withdrawableDividendOf(account);\r\n        totalDividends = accumulativeDividendOf(account);\r\n\r\n        lastClaimTime = lastClaimTimes[account];\r\n\r\n        nextClaimTime = lastClaimTime > 0 ?\r\n                                    lastClaimTime.add(claimWait) :\r\n                                    0;\r\n\r\n        secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp ?\r\n                                                    nextClaimTime.sub(block.timestamp) :\r\n                                                    0;\r\n    }\r\n\r\n    function getAccountAtIndex(uint256 index)\r\n        public view returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256) {\r\n    \tif(index >= tokenHoldersMap.size()) {\r\n            return (0x0000000000000000000000000000000000000000, -1, -1, 0, 0, 0, 0, 0);\r\n        }\r\n\r\n        address account = tokenHoldersMap.getKeyAtIndex(index);\r\n\r\n        return getAccount(account);\r\n    }\r\n\r\n    function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\r\n    \tif(lastClaimTime > block.timestamp)  {\r\n    \t\treturn false;\r\n    \t}\r\n\r\n    \treturn block.timestamp.sub(lastClaimTime) >= claimWait;\r\n    }\r\n\r\n    function setBalance(address payable account, uint256 newBalance) external onlyOwner {\r\n    \tif(excludedFromDividends[account]) {\r\n    \t\treturn;\r\n    \t}\r\n\r\n    \tif(newBalance >= minimumTokenBalanceForDividends) {\r\n            _setBalance(account, newBalance);\r\n    \t\ttokenHoldersMap.set(account, newBalance);\r\n    \t}\r\n    \telse {\r\n            _setBalance(account, 0);\r\n    \t\ttokenHoldersMap.remove(account);\r\n    \t}\r\n\r\n    \tprocessAccount(account, true);\r\n    }\r\n\r\n    function process(uint256 gas) public returns (uint256, uint256, uint256) {\r\n    \tuint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\r\n\r\n    \tif(numberOfTokenHolders == 0) {\r\n    \t\treturn (0, 0, lastProcessedIndex);\r\n    \t}\r\n\r\n    \tuint256 _lastProcessedIndex = lastProcessedIndex;\r\n\r\n    \tuint256 gasUsed = 0;\r\n\r\n    \tuint256 gasLeft = gasleft();\r\n\r\n    \tuint256 iterations = 0;\r\n    \tuint256 claims = 0;\r\n\r\n    \twhile(gasUsed < gas && iterations < numberOfTokenHolders) {\r\n    \t\t_lastProcessedIndex++;\r\n\r\n    \t\tif(_lastProcessedIndex >= tokenHoldersMap.keys.length) {\r\n    \t\t\t_lastProcessedIndex = 0;\r\n    \t\t}\r\n\r\n    \t\taddress account = tokenHoldersMap.keys[_lastProcessedIndex];\r\n\r\n    \t\tif(canAutoClaim(lastClaimTimes[account])) {\r\n    \t\t\tif(processAccount(payable(account), true)) {\r\n    \t\t\t\tclaims++;\r\n    \t\t\t}\r\n    \t\t}\r\n\r\n    \t\titerations++;\r\n\r\n    \t\tuint256 newGasLeft = gasleft();\r\n\r\n    \t\tif(gasLeft > newGasLeft) {\r\n    \t\t\tgasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\r\n    \t\t}\r\n\r\n    \t\tgasLeft = newGasLeft;\r\n    \t}\r\n\r\n    \tlastProcessedIndex = _lastProcessedIndex;\r\n\r\n    \treturn (iterations, claims, lastProcessedIndex);\r\n    }\r\n\r\n    function processAccount(address payable account, bool automatic) public onlyOwner returns (bool) {\r\n        uint256 amount = _withdrawDividendOfUser(account);\r\n\r\n    \tif(amount > 0) {\r\n    \t\tlastClaimTimes[account] = block.timestamp;\r\n            emit Claim(account, amount, automatic);\r\n    \t\treturn true;\r\n    \t}\r\n\r\n    \treturn false;\r\n    }\r\n}\r\n\r\ncontract LunaProtocol is ERC20, Ownable {\r\n    mapping (address => uint256) _rBalance;\r\n    mapping (address => mapping(address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFees;\r\n\r\n\r\n    uint256 public liquidityBuyFee;\r\n    uint256 public treasuryBuyFee;\r\n    uint256 public ecosystemBuyFee;\r\n    uint256 public rewardPoolBuyFee;\r\n    uint256 public rewardBuyFee;\r\n    uint256 public totalBuyFee;\r\n    \r\n    uint256 public liquiditySellFee;\r\n    uint256 public treasurySellFee;\r\n    uint256 public ecosystemSellFee;\r\n    uint256 public rewardPoolSellFee;\r\n    uint256 public rewardSellFee;\r\n    uint256 public burnSellFee;\r\n    uint256 public totalSellFee;\r\n\r\n    uint256 public WtoWtransferFee;\r\n    uint256 public treasuryTransferFee;\r\n    uint256 public liquidityTransferFee;\r\n\r\n    bool    public walletToWalletTransferWithoutFee;\r\n\r\n    address public ecosystemWallet;\r\n    address public treasuryWallet;\r\n    address public rewardPoolWallet;\r\n\r\n    address private DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    \r\n\r\n    DividendTracker public dividendTracker;\r\n    address public immutable rewardToken = 0x156ab3346823B651294766e23e6Cf87254d68962; \r\n\r\n    uint256 public gasForProcessing = 300000;\r\n    \r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public  uniswapV2Pair;\r\n    mapping (address => bool) public automatedMarketMakerPairs;\r\n\r\n    uint256 private immutable initialSupply;\r\n    uint256 private immutable rSupply;\r\n    uint256 private constant MAX = type(uint256).max;\r\n    uint256 private _totalSupply;\r\n    \r\n    bool    public swapEnabled = true;\r\n    bool    private inSwap = false;\r\n    uint256 private swapThreshold;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n    bool    public autoRebase;\r\n    uint256 public rebaseRate;\r\n    uint256 public lastRebasedTime;\r\n    uint256 public rebase_count;\r\n    uint256 private rate;\r\n    \r\n    event AutoRebaseStatusUptaded(bool enabled);\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);    \r\n    \r\n    event SellFeesUpdated(uint256 liquiditySellFee,uint256 treasurySellFee,uint256 ecosystemSellFee,uint256 rewardPoolSellFee,uint256 rewardSellFee,uint256 burnSellFee,uint256 totalSellFee);\r\n    event BuyFeesUpdated(uint256 liquidityBuyFee,uint256 treasuryBuyFee,uint256 ecosystemBuyFee,uint256 rewardPoolBuyFee,uint256 rewardBuyFee,uint256 totalBuyFee);\r\n\r\n    event WtoWTransferFeeUpdate(uint256 treasuryTransferFee,uint256 liquidityTransferFee,uint256 WtoWtransferFee);\r\n\r\n\r\n\r\n    event TreasuryWalletChanged(address marketingWallet);\r\n    event EcosystemWalletChanged(address ecosystemWallet);\r\n    event RewardPoolWalletChanged(address rewardPoolWallet);\r\n\r\n\r\n    event SendEcosystem(uint256 bnbSend);\r\n    event SendTreasury(uint256 bnbSend);\r\n    event SendRewardPool(uint256 bnbSend);\r\n\r\n    \r\n    event LogRebase(uint256 indexed epoch, uint256 totalSupply);\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 bnbReceived, uint256 tokensIntoLiqudity);\r\n    event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\r\n    event UpdateDividendTracker(address indexed newAddress, address indexed oldAddress);\r\n    event GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n    event SendDividends(uint256 amount);\r\n    event ProcessedDividendTracker(\r\n    \tuint256 iterations,\r\n    \tuint256 claims,\r\n        uint256 lastProcessedIndex,\r\n    \tbool indexed automatic,\r\n    \tuint256 gas,\r\n    \taddress indexed processor\r\n    );\r\n    constructor(address newOwner) ERC20(\"Luna Ape Protocol\", \"$LUNAPE\") \r\n    {          \r\n        liquidityBuyFee = 3;\r\n        treasuryBuyFee = 4;\r\n        ecosystemBuyFee = 4;\r\n        rewardPoolBuyFee = 1;\r\n        rewardBuyFee = 2;\r\n\r\n        totalBuyFee = liquidityBuyFee + treasuryBuyFee + ecosystemBuyFee + rewardPoolBuyFee + rewardBuyFee;\r\n\r\n        treasuryTransferFee = 5;\r\n        liquidityTransferFee = 5;\r\n\r\n        WtoWtransferFee = treasuryTransferFee + liquidityTransferFee;\r\n        \r\n        liquiditySellFee = 4;\r\n        treasurySellFee = 4;\r\n        ecosystemSellFee = 4;\r\n        rewardPoolSellFee = 1;\r\n        rewardSellFee = 2;\r\n        burnSellFee = 1;\r\n        totalSellFee = liquiditySellFee + treasurySellFee + ecosystemSellFee + rewardPoolSellFee + rewardSellFee+ burnSellFee;\r\n\r\n        treasuryWallet = 0xB51552B08694858db147D426945D6446B13492C1;\r\n        ecosystemWallet  = 0x7296F111256fEbB44ca6B63E86257B4A894D9156;     \r\n        rewardPoolWallet = 0x82CabB005542D1E19DC0fbD3214A0f4bEFC1D9f2;\r\n\r\n        walletToWalletTransferWithoutFee = true;\r\n        dividendTracker = new DividendTracker(40000, rewardToken);\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair   = _uniswapV2Pair;\r\n\r\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n\r\n        _allowances[address(this)][address(uniswapV2Router)] = MAX;\r\n\r\n        _mint(newOwner, 4_000_000_000 * (10 ** 18));\r\n\r\n        initialSupply = 4_000_000_000 * (10 ** 18);\r\n        _totalSupply  = initialSupply;\r\n        \r\n        rSupply = MAX - (MAX % initialSupply);\r\n        rate    = rSupply / _totalSupply;\r\n\r\n        rebaseRate = 4339;\r\n        autoRebase = false;\r\n        lastRebasedTime = block.timestamp;\r\n\r\n        dividendTracker.excludeFromDividends(address(dividendTracker));\r\n        dividendTracker.excludeFromDividends(address(this));\r\n        dividendTracker.excludeFromDividends(DEAD);\r\n        dividendTracker.excludeFromDividends(address(_uniswapV2Router));\r\n\r\n        _isExcludedFromFees[owner()] = true;\r\n        _isExcludedFromFees[newOwner] = true;\r\n        _isExcludedFromFees[DEAD] = true;\r\n        _isExcludedFromFees[address(this)] = true;\r\n\r\n        swapThreshold = rSupply / 5000;\r\n        _rBalance[newOwner] = rSupply;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    address public operator;\r\n\r\n    modifier onlyOperator(){\r\n        require(operator == _msgSender(),\"Caller is not the Operator\");\r\n        _;\r\n    }\r\n\r\n    function setOperatorWallet(address _operatorWallet) external onlyOperator{\r\n        operator = _operatorWallet;\r\n    }\r\n\r\n    function claimStuckTokens(address token) external onlyOwner {\r\n        require(token != address(this), \"Owner cannot claim native tokens\");\r\n        if (token == address(0x0)) {\r\n            payable(msg.sender).transfer(address(this).balance);\r\n            return;\r\n        }\r\n        IERC20 ERC20token = IERC20(token);\r\n        uint256 balance = ERC20token.balanceOf(address(this));\r\n        ERC20token.transfer(msg.sender, balance);\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    function sendBNB(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    //=======APY=======//\r\n    function startAPY() external onlyOwner {\r\n        autoRebase = true;\r\n        lastRebasedTime = block.timestamp;\r\n        emit AutoRebaseStatusUptaded(true);\r\n    }\r\n\r\n    function setAutoRebase(bool _flag) external onlyOwner {\r\n        if (_flag) {\r\n            autoRebase = _flag;\r\n            lastRebasedTime = block.timestamp;\r\n        } else {\r\n            autoRebase = _flag;\r\n        }\r\n        emit AutoRebaseStatusUptaded(_flag);\r\n    }\r\n\r\n    function manualSync() external {\r\n        IUniswapV2Pair(uniswapV2Pair).sync();\r\n    }\r\n\r\n    function updateUniswapV2Router(address newAddress) external onlyOperator {\r\n        require(newAddress != address(uniswapV2Router), \"The router already has that address\");\r\n        emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\r\n        uniswapV2Router = IUniswapV2Router02(newAddress);\r\n        address _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\r\n            .createPair(address(this), uniswapV2Router.WETH());\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value) external onlyOperator {\r\n        require(pair != uniswapV2Pair, \"The PancakeSwap pair cannot be removed from automatedMarketMakerPairs\");\r\n\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        require(automatedMarketMakerPairs[pair] != value, \"Automated market maker pair is already set to that value\");\r\n        automatedMarketMakerPairs[pair] = value;\r\n\r\n        if(value) {\r\n            dividendTracker.excludeFromDividends(pair);\r\n        }\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function shouldRebase() internal view returns (bool) {\r\n        return\r\n            autoRebase &&\r\n            msg.sender != uniswapV2Pair  &&\r\n            !inSwap &&\r\n            block.timestamp >= (lastRebasedTime + 30 minutes);\r\n    }\r\n\r\n    function rebase() internal {\r\n        \r\n        if ( inSwap ) return;\r\n        uint256 times = (block.timestamp - lastRebasedTime) / 30 minutes;\r\n\r\n        for (uint256 i = 0; i < times; i++) {\r\n            _totalSupply = _totalSupply\r\n                * (10_000_000 + rebaseRate)\r\n                / 10_000_000;\r\n            rebase_count++;\r\n        }\r\n\r\n        rate = rSupply / _totalSupply;\r\n        lastRebasedTime = lastRebasedTime + (times * 30 minutes);\r\n\r\n        IUniswapV2Pair(uniswapV2Pair).sync();\r\n\r\n        emit LogRebase(rebase_count, _totalSupply);\r\n    }\r\n\r\n    //=======BEP20=======//\r\n    function approve(address spender, uint256 value) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner_, address spender) public view override returns (uint256){\r\n        return _allowances[owner_][spender];\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public override returns (bool) {\r\n        uint256 oldValue = _allowances[msg.sender][spender];\r\n        if (subtractedValue >= oldValue) {\r\n            _allowances[msg.sender][spender] = 0;\r\n        } else {\r\n            _allowances[msg.sender][spender] = oldValue - subtractedValue;\r\n        }\r\n        emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = _allowances[msg.sender][spender] + addedValue;\r\n        emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n   \r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _rBalance[account] / rate;\r\n    }\r\n\r\n    function transfer(address to, uint256 value)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transferFrom(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) public override returns (bool) {\r\n        \r\n        if (_allowances[from][msg.sender] != MAX) {\r\n            _allowances[from][msg.sender] = _allowances[from][msg.sender] - value;\r\n        }\r\n        _transferFrom(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        uint256 rAmount = amount * rate;\r\n        _rBalance[from] = _rBalance[from] - rAmount;\r\n        _rBalance[to] = _rBalance[to] + rAmount;\r\n        emit Transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n\t\trequire(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        if (inSwap) { return _basicTransfer(sender, recipient, amount); }\r\n        \r\n        uint256 rAmount = amount * rate;\r\n\r\n        if (shouldRebase()) { rebase(); }\r\n\r\n        if (shouldSwapBack()) { swapBack(); }\r\n\r\n        _rBalance[sender] = _rBalance[sender] - rAmount;\r\n\r\n        bool wtwWoFee = walletToWalletTransferWithoutFee && sender != uniswapV2Pair && recipient != uniswapV2Pair;\r\n        uint256 amountReceived = (_isExcludedFromFees[sender] || _isExcludedFromFees[recipient] || wtwWoFee) ? rAmount : takeFee(sender, rAmount, recipient);\r\n        _rBalance[recipient] = _rBalance[recipient] + amountReceived;\r\n\r\n\r\n        try dividendTracker.setBalance(payable(sender), balanceOf(sender)) {} catch {}\r\n        try dividendTracker.setBalance(payable(recipient), balanceOf(recipient)) {} catch {}\r\n\r\n        if(!inSwap) {\r\n\t    \tuint256 gas = gasForProcessing;\r\n\r\n\t    \ttry dividendTracker.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\r\n\t    \t\temit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\r\n\t    \t}\r\n\t    \tcatch {\r\n\r\n\t    \t}      \r\n        }\r\n        emit Transfer(sender, recipient, amountReceived / rate);\r\n        return true;\r\n    }\r\n\r\n    function takeFee(address sender, uint256 rAmount, address recipient) internal returns (uint256) {\r\n        uint256 _finalFee;\r\n        if(uniswapV2Pair == recipient){\r\n            _finalFee = totalSellFee;\r\n        } else if (uniswapV2Pair == sender){\r\n            _finalFee = totalBuyFee;\r\n        }\r\n        else{\r\n            _finalFee =WtoWtransferFee;\r\n        }\r\n\r\n        uint256 feeAmount = (rAmount * _finalFee)/ 100;\r\n\r\n        _rBalance[address(this)] = _rBalance[address(this)] + feeAmount;\r\n        emit Transfer(sender, address(this), feeAmount / rate);\r\n\r\n        return rAmount - feeAmount;\r\n    }\r\n\r\n    //=======FeeManagement=======//\r\n    function excludeFromFees(address account) external onlyOwner {\r\n        require(!_isExcludedFromFees[account],\"Account is already the value of true\");\r\n        _isExcludedFromFees[account] = true;\r\n        emit ExcludeFromFees(account,true);\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns(bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n        \r\n    function updateSellFees(uint256 _liquiditySellFee,\r\n        uint256 _treasurySellFee,\r\n        uint256 _ecosystemSellFee,\r\n        uint256 _rewardPoolSellFee,\r\n        uint256 _rewardSellFee, uint256 _burnSellFee) external onlyOwner {          \r\n        liquiditySellFee = _liquiditySellFee;\r\n        treasurySellFee = _treasurySellFee;\r\n        ecosystemSellFee = _ecosystemSellFee;\r\n        rewardPoolSellFee = _rewardPoolSellFee;\r\n        rewardSellFee = _rewardSellFee;\r\n        burnSellFee = _burnSellFee;\r\n        totalSellFee = liquiditySellFee + treasurySellFee + ecosystemSellFee + rewardPoolSellFee + rewardSellFee+ burnSellFee;\r\n\r\n        require(totalSellFee <= 25, \"Fees must be less than 25%\");\r\n        emit SellFeesUpdated(liquiditySellFee, treasurySellFee, ecosystemSellFee, rewardPoolSellFee, rewardSellFee, burnSellFee, totalSellFee);\r\n    }\r\n\r\n    function updateBuyFees(uint256 _liquidityBuyFee,\r\n        uint256 _treasuryBuyFee,\r\n        uint256 _ecosystemBuyFee,\r\n        uint256 _rewardPoolBuyFee,\r\n        uint256 _rewardBuyFee) external onlyOwner {\r\n      \r\n        liquidityBuyFee = _liquidityBuyFee;\r\n        treasuryBuyFee = _treasuryBuyFee;\r\n        ecosystemBuyFee = _ecosystemBuyFee;\r\n        rewardPoolBuyFee = _rewardPoolBuyFee;\r\n        rewardBuyFee = _rewardBuyFee;\r\n        totalBuyFee = liquidityBuyFee + treasuryBuyFee + ecosystemBuyFee + rewardPoolBuyFee + rewardBuyFee;\r\n        require(totalBuyFee <= 25, \"Fees must be less than 25%\");  \r\n        emit BuyFeesUpdated(liquidityBuyFee, treasuryBuyFee, ecosystemBuyFee, rewardPoolBuyFee, rewardBuyFee, totalBuyFee);\r\n    }\r\n\r\n    function updateBuyFees(uint256 _treasuryTransferFee,uint256 _liquidityTransferFee) external onlyOwner {\r\n        \r\n        treasuryTransferFee = _treasuryTransferFee;\r\n        liquidityTransferFee = _liquidityTransferFee;\r\n        WtoWtransferFee = treasuryTransferFee + liquidityTransferFee;\r\n        require(WtoWtransferFee <= 25, \"Fees must be less than 25%\");  \r\n        emit WtoWTransferFeeUpdate(treasuryTransferFee,liquidityTransferFee,WtoWtransferFee);\r\n    }\r\n\r\n\r\n\r\n    function enableWalletToWalletTransferWithoutFee(bool enable) external onlyOwner {\r\n        require(walletToWalletTransferWithoutFee != enable, \"Wallet to wallet transfer without fee is already set to that value\");\r\n        walletToWalletTransferWithoutFee = enable;\r\n    }\r\n\r\n    function changeTreasuryWallet(address _treasuryWallet) external onlyOwner {\r\n        require(_treasuryWallet != treasuryWallet, \"Marketing wallet is already that address\");\r\n        require(!isContract(_treasuryWallet), \"Marketing wallet cannot be a contract\");\r\n        treasuryWallet = _treasuryWallet;\r\n        emit TreasuryWalletChanged(treasuryWallet);\r\n    }\r\n        \r\n    function changeEcosystemWallet(address _ecosystemWallet) external onlyOwner {\r\n        require(_ecosystemWallet != ecosystemWallet, \"Ecosystem wallet is already that address\");\r\n        require(!isContract(_ecosystemWallet), \"Ecosystem wallet cannot be a contract\");\r\n        ecosystemWallet = _ecosystemWallet;\r\n        \r\n        emit EcosystemWalletChanged(ecosystemWallet);\r\n\r\n    }\r\n\r\n    function changeRewardPoolWallet(address _rewardPoolWallet) external onlyOwner {\r\n        require(_rewardPoolWallet != rewardPoolWallet, \"Reward Pool wallet is already that address\");\r\n        require(!isContract(_rewardPoolWallet), \"Reward Pool wallet cannot be a contract\");\r\n        rewardPoolWallet = _rewardPoolWallet;\r\n        \r\n        emit RewardPoolWalletChanged(rewardPoolWallet);\r\n    }\r\n\r\n\r\n    //=======Swap=======//\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return msg.sender != uniswapV2Pair\r\n        && !inSwap\r\n        && swapEnabled\r\n        && _rBalance[address(this)] >= swapThreshold;\r\n    }\r\n\r\n    function swapBack() internal swapping {\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        \r\n        uint256 totalFee= totalBuyFee + totalSellFee + WtoWtransferFee;\r\n        uint256 liquidityShare= liquidityBuyFee + liquiditySellFee + liquidityTransferFee;\r\n        uint256 treasuryShare= treasuryBuyFee + treasurySellFee + treasuryTransferFee;\r\n        uint256 ecosystemShare= ecosystemBuyFee + ecosystemSellFee;\r\n        uint256 rewardPoolShare= rewardPoolBuyFee + rewardPoolSellFee;\r\n        uint256 rewardShare= rewardBuyFee + rewardSellFee; \r\n        uint256 burnShare = burnSellFee;\r\n\r\n\r\n        uint256 liquidityTokens;\r\n\r\n        if(liquidityShare > 0) {\r\n            liquidityTokens = contractTokenBalance * liquidityShare / totalFee;\r\n            swapAndLiquify(liquidityTokens);\r\n        }\r\n\r\n        contractTokenBalance -= liquidityTokens;\r\n        uint256 bnbShare = treasuryShare + ecosystemShare + rewardPoolShare + rewardShare + burnShare;\r\n\r\n        if(contractTokenBalance > 0 && bnbShare > 0) {\r\n            uint256 initialBalance = address(this).balance;\r\n\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = uniswapV2Router.WETH();\r\n\r\n            uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                contractTokenBalance,\r\n                0,\r\n                path,\r\n                address(this),\r\n                block.timestamp);\r\n            \r\n            uint256 newBalance = address(this).balance - initialBalance;\r\n\r\n            if(treasuryShare > 0) {\r\n                uint256 marketingBNB = (newBalance * treasuryShare) / bnbShare;\r\n                sendBNB(payable(treasuryWallet), marketingBNB);\r\n                emit SendTreasury(marketingBNB);\r\n            }\r\n\r\n            if(ecosystemShare > 0) {\r\n                uint256 ecosystemBNB = (newBalance * ecosystemShare) / bnbShare;\r\n                sendBNB(payable(ecosystemWallet), ecosystemBNB);\r\n                emit SendEcosystem(ecosystemBNB);\r\n            }\r\n\r\n            if(rewardShare > 0) {\r\n                uint256 rewardBNB = (newBalance * rewardShare) / bnbShare;\r\n                swapAndSendDividends(rewardBNB);\r\n            }\r\n\r\n            if(rewardPoolShare > 0){\r\n                uint256 rewardPoolBNB = (newBalance * rewardPoolShare) / bnbShare;\r\n                sendBNB(payable(rewardPoolWallet), rewardPoolBNB);\r\n                emit SendRewardPool(rewardPoolBNB);\r\n            }\r\n\r\n            if(burnShare > 0){\r\n                uint256 burnLuna = (newBalance * burnShare) / bnbShare;\r\n                burnToken(burnLuna);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    function burnToken(uint256 amount) internal{\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = rewardToken;\r\n\r\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{ value: amount }(\r\n        0, \r\n        path, \r\n        DEAD, \r\n        block.timestamp);\r\n    }\r\n    \r\n\r\n    function swapAndLiquify(uint256 tokens) private {\r\n        uint256 half = tokens / 2;\r\n        uint256 otherHalf = tokens - half;\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            half,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp);\r\n        \r\n        uint256 newBalance = address(this).balance - initialBalance;\r\n\r\n        uniswapV2Router.addLiquidityETH{value: newBalance}(\r\n            address(this),\r\n            otherHalf,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            DEAD,\r\n            block.timestamp\r\n        );\r\n\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function swapAndSendDividends(uint256 amount) private{\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = rewardToken;\r\n\r\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp);\r\n        \r\n        uint256 balanceRewardToken = IERC20(rewardToken).balanceOf(address(this));\r\n        bool success = IERC20(rewardToken).transfer(address(dividendTracker), balanceRewardToken);\r\n\r\n        if (success) {\r\n            dividendTracker.distributeDividends(balanceRewardToken);\r\n            emit SendDividends(balanceRewardToken);\r\n        }\r\n    }\r\n    \r\n    function setSwapBackSettings(bool _enabled, uint256 _percentage_base100000) external onlyOwner {\r\n        require(_percentage_base100000 >= 1, \"Swap back percentage must be more than 0.001%\");\r\n        swapEnabled = _enabled;\r\n        swapThreshold = rSupply / 100000 * _percentage_base100000;\r\n    }\r\n\r\n    function checkSwapThreshold() external view returns (uint256) {\r\n        return swapThreshold / rate;\r\n    }\r\n    \r\n    //=======Divivdend Tracker=======//\r\n\r\n    function updateDividendTracker(address newAddress) public onlyOperator {\r\n        require(newAddress != address(dividendTracker), \"The dividend tracker already has that address\");\r\n\r\n        DividendTracker newDividendTracker = DividendTracker(payable(newAddress));\r\n\r\n        require(newDividendTracker.owner() == address(this), \"The new dividend tracker must be owned by the token contract\");\r\n\r\n        newDividendTracker.excludeFromDividends(address(newDividendTracker));\r\n        newDividendTracker.excludeFromDividends(address(this));\r\n        newDividendTracker.excludeFromDividends(DEAD);\r\n        newDividendTracker.excludeFromDividends(address(uniswapV2Router));\r\n        newDividendTracker.excludeFromDividends(address(uniswapV2Pair));\r\n\r\n        emit UpdateDividendTracker(newAddress, address(dividendTracker));\r\n\r\n        dividendTracker = newDividendTracker;\r\n    }\r\n\r\n    function updateGasForProcessing(uint256 newValue) public onlyOwner {\r\n        require(newValue >= 200000 && newValue <= 500000, \"gasForProcessing must be between 200,000 and 500,000\");\r\n        require(newValue != gasForProcessing, \"Cannot update gasForProcessing to same value\");\r\n        emit GasForProcessingUpdated(newValue, gasForProcessing);\r\n        gasForProcessing = newValue;\r\n    }\r\n    function updateMinimumBalanceForDividends(uint256 newMinimumBalance) external onlyOperator {\r\n        dividendTracker.updateMinimumTokenBalanceForDividends(newMinimumBalance);\r\n    }\r\n\r\n    function updateClaimWait(uint256 claimWait) external onlyOwner {\r\n        dividendTracker.updateClaimWait(claimWait);\r\n    }\r\n\r\n    function getClaimWait() external view returns(uint256) {\r\n        return dividendTracker.claimWait();\r\n    }\r\n\r\n    function getTotalDividendsDistributed() external view returns (uint256) {\r\n        return dividendTracker.totalDividendsDistributed();\r\n    }\r\n\r\n    function withdrawableDividendOf(address account) public view returns(uint256) {\r\n    \treturn dividendTracker.withdrawableDividendOf(account);\r\n  \t}\r\n\r\n\tfunction dividendTokenBalanceOf(address account) public view returns (uint256) {\r\n\t\treturn dividendTracker.balanceOf(account);\r\n\t}\r\n\r\n    function totalRewardsEarned(address account) public view returns (uint256) {\r\n        return dividendTracker.accumulativeDividendOf(account);\r\n    }\r\n    \r\n\tfunction excludeFromDividends(address account) external onlyOwner{\r\n\t    dividendTracker.excludeFromDividends(account);\r\n\t}\r\n\r\n    function getAccountDividendsInfo(address account)\r\n        external view returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256) {\r\n        return dividendTracker.getAccount(account);\r\n    }\r\n\r\n\tfunction getAccountDividendsInfoAtIndex(uint256 index)\r\n        external view returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256) {\r\n    \treturn dividendTracker.getAccountAtIndex(index);\r\n    }\r\n\r\n\tfunction processDividendTracker(uint256 gas) external {\r\n\t\t(uint256 iterations, uint256 claims, uint256 lastProcessedIndex) = dividendTracker.process(gas);\r\n\t\temit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, false, gas, tx.origin);\r\n    }\r\n\r\n    function claim() external {\r\n\t\tdividendTracker.processAccount(payable(msg.sender), false);\r\n    }\r\n\r\n    function claimAddress(address claimee) external onlyOwner {\r\n\t\tdividendTracker.processAccount(payable(claimee), false);\r\n    }\r\n\r\n    function getLastProcessedIndex() external view returns(uint256) {\r\n    \treturn dividendTracker.getLastProcessedIndex();\r\n    }\r\n\r\n    function setLastProcessedIndex(uint256 index) external onlyOwner {\r\n    \tdividendTracker.setLastProcessedIndex(index);\r\n    }\r\n\r\n    function getNumberOfDividendTokenHolders() external view returns(uint256) {\r\n        return dividendTracker.getNumberOfTokenHolders();\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"AutoRebaseStatusUptaded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityBuyFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasuryBuyFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ecosystemBuyFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPoolBuyFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardBuyFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBuyFee\",\"type\":\"uint256\"}],\"name\":\"BuyFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ecosystemWallet\",\"type\":\"address\"}],\"name\":\"EcosystemWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardPoolWallet\",\"type\":\"address\"}],\"name\":\"RewardPoolWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquiditySellFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasurySellFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ecosystemSellFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPoolSellFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardSellFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnSellFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSellFee\",\"type\":\"uint256\"}],\"name\":\"SellFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbSend\",\"type\":\"uint256\"}],\"name\":\"SendEcosystem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbSend\",\"type\":\"uint256\"}],\"name\":\"SendRewardPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbSend\",\"type\":\"uint256\"}],\"name\":\"SendTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"marketingWallet\",\"type\":\"address\"}],\"name\":\"TreasuryWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasuryTransferFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityTransferFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WtoWtransferFee\",\"type\":\"uint256\"}],\"name\":\"WtoWTransferFeeUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WtoWtransferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ecosystemWallet\",\"type\":\"address\"}],\"name\":\"changeEcosystemWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardPoolWallet\",\"type\":\"address\"}],\"name\":\"changeRewardPoolWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryWallet\",\"type\":\"address\"}],\"name\":\"changeTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimee\",\"type\":\"address\"}],\"name\":\"claimAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claimStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract DividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ecosystemBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ecosystemSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ecosystemWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"enableWalletToWalletTransferWithoutFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountDividendsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccountDividendsInfoAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebasedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquiditySellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTransferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase_count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPoolBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPoolSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPoolWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setAutoRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"setLastProcessedIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorWallet\",\"type\":\"address\"}],\"name\":\"setOperatorWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_percentage_base100000\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAPY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"totalRewardsEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasurySellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryTransferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryTransferFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityTransferFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityBuyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryBuyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ecosystemBuyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPoolBuyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardBuyFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimWait\",\"type\":\"uint256\"}],\"name\":\"updateClaimWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinimumBalance\",\"type\":\"uint256\"}],\"name\":\"updateMinimumBalanceForDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquiditySellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasurySellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ecosystemSellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPoolSellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardSellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnSellFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletToWalletTransferWithoutFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LunaProtocol", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005d77d28f91c0a64ed00472a705b106905232a21a", "EVMVersion": "Default", "Library": "IterableMapping:0ad158961b1e951e3b7fd56d791e931135aeb310", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://42073a6d0518838cfcfc3813e9213542c629cfcf9cfcc2d174379ba3873d1d05"}