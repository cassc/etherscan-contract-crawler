{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.12 <0.9.0;\r\n\r\n\r\ncontract HofCompetitionRound1{\r\n    address payable public owner;\r\n    address payable public winner;\r\n\r\n    uint256 public eventStartTime;\r\n    uint256 public eventEndTime;\r\n\r\n    bool  public isActive;\r\n\r\n\r\n    event ElectNewWinner(address indexed winner, address indexed previousWinner);\r\n\r\n    receive() external payable{\r\n        if(!isActive){\r\n            eventStartTime = block.timestamp;\r\n            eventEndTime = block.timestamp + 2 days;\r\n            isActive = true;\r\n        }\r\n    }\r\n    \r\n    constructor() payable{\r\n        owner = payable(msg.sender);\r\n    }\r\n    \r\n    function startEvent(uint256 _startTime, uint256 _endTime) public onlyOwner{\r\n        require(_startTime < _endTime, \"invalid duration\");\r\n        uint256 startTime = _startTime+block.timestamp;\r\n        uint256 endTime = _endTime + block.timestamp;\r\n\r\n        require(startTime > block.timestamp, \"invalid start time\");\r\n        require(endTime > block.timestamp, \"invalid start time\");\r\n\r\n        eventStartTime = startTime;\r\n        eventEndTime = endTime;\r\n        isActive = true;\r\n    }\r\n\r\n    modifier eventIsActive(){\r\n        require(isActive); _;\r\n    }\r\n\r\n    modifier onlyOwner(){\r\n        require(msg.sender == owner, \"!auth\");\r\n        _;\r\n    }\r\n\r\n    function showTimeLeft()public view returns(uint256){\r\n        if (eventHasEnded()) return 0;\r\n        return eventEndTime - block.timestamp;\r\n    }\r\n    function showStartTimeLeft()public view returns(uint256){\r\n        if (block.timestamp >= eventStartTime) return 0;\r\n        return eventStartTime - block.timestamp;\r\n    }\r\n\r\n    function eventHasEnded() public view returns (bool){\r\n        return block.timestamp > eventEndTime;\r\n    }\r\n\r\n    function eventHasStart() public view returns(bool){\r\n        return (block.timestamp > eventStartTime);\r\n    }\r\n\r\n    function newWinner(address _winner) public eventIsActive onlyOwner {\r\n        require(eventHasStart(), \"event has not started yet\");\r\n        require(!eventHasEnded(), \"event has ended\");\r\n        require(_winner != address(0), \"invalid address\");\r\n        require(_winner != winner, \"same winner\");\r\n        \r\n        address previowWinner = winner;\r\n        winner = payable(_winner);\r\n        emit ElectNewWinner(winner, previowWinner);\r\n    }\r\n\r\n    function claimReward() public eventIsActive {\r\n        require(eventHasEnded(), \"event has not ended\");\r\n\r\n        address sender = msg.sender;\r\n        require(winner != address(0), \"invalid winner\");\r\n        require(sender == owner || sender == winner, \"action not allowed by address\");\r\n        payable(winner).transfer(address(this).balance);\r\n        isActive = false;\r\n    }\r\n\r\n    function cancelEvent() public onlyOwner {\r\n        owner.transfer(address(this).balance);\r\n        isActive = false;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousWinner\",\"type\":\"address\"}],\"name\":\"ElectNewWinner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"cancelEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventHasEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventHasStart\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"}],\"name\":\"newWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showStartTimeLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showTimeLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"startEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HofCompetitionRound1", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ee01929ecdfa079d7131be981d41d0878904f3c0fa37e45cb95057cdef07d480"}