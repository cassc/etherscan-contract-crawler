{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2021-02-20\r\n*/\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\n\r\n// File: @pancakeswap/pancake-swap-lib/contracts/GSN/Context.sol\r\n\r\n\r\npragma solidity >=0.4.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @pancakeswap/pancake-swap-lib/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity >=0.4.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), 'Ownable: caller is not the owner');\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), 'Ownable: new owner is the zero address');\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @pancakeswap/pancake-swap-lib/contracts/token/BEP20/IBEP20.sol\r\n\r\n\r\npragma solidity >=0.4.0;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/GTokenRegistry.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @notice This contract allows external agents to detect when new GTokens\r\n *         are deployed to the network.\r\n */\r\ncontract GTokenRegistry is Ownable\r\n{\r\n\t/**\r\n\t * @notice Registers a new gToken.\r\n\t * @param _growthToken The address of the token being registered.\r\n\t * @param _oldGrowthToken The address of the token implementation\r\n\t *                        being replaced, for upgrades, or 0x0 0therwise.\r\n\t */\r\n\tfunction registerNewToken(address _growthToken, address _oldGrowthToken) external onlyOwner\r\n\t{\r\n\t\temit NewToken(_growthToken, _oldGrowthToken);\r\n\t}\r\n\r\n\tevent NewToken(address indexed _growthToken, address indexed _oldGrowthToken);\r\n}\r\n\r\n// File: contracts/GExchange.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Custom and uniform interface to a decentralized exchange. It is used\r\n *      to estimate and convert funds whenever necessary. This furnishes\r\n *      client contracts with the flexibility to replace conversion strategy\r\n *      and routing, dynamically, by delegating these operations to different\r\n *      external contracts that share this common interface. See\r\n *      GExchangeImpl.sol for further documentation.\r\n */\r\ninterface GExchange\r\n{\r\n\t// view functions\r\n\tfunction calcConversionFromInput(address _from, address _to, uint256 _inputAmount) external view returns (uint256 _outputAmount);\r\n\tfunction calcConversionFromOutput(address _from, address _to, uint256 _outputAmount) external view returns (uint256 _inputAmount);\r\n\r\n\t// open functions\r\n\tfunction convertFundsFromInput(address _from, address _to, uint256 _inputAmount, uint256 _minOutputAmount) external returns (uint256 _outputAmount);\r\n\tfunction convertFundsFromOutput(address _from, address _to, uint256 _outputAmount, uint256 _maxInputAmount) external returns (uint256 _inputAmount);\r\n}\r\n\r\n// File: @pancakeswap/pancake-swap-lib/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity >=0.4.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, 'SafeMath: addition overflow');\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, 'SafeMath: subtraction overflow');\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, 'SafeMath: multiplication overflow');\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, 'SafeMath: division by zero');\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, 'SafeMath: modulo by zero');\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @pancakeswap/pancake-swap-lib/contracts/utils/Address.sol\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, 'Address: insufficient balance');\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}('');\r\n        require(success, 'Address: unable to send value, recipient may have reverted');\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, 'Address: low-level call failed');\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, 'Address: insufficient balance for call');\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), 'Address: call to non-contract');\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @pancakeswap/pancake-swap-lib/contracts/token/BEP20/SafeBEP20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeBEP20\r\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeBEP20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IBEP20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IBEP20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IBEP20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            'SafeBEP20: approve from non-zero to non-zero allowance'\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            'SafeBEP20: decreased allowance below zero'\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, 'SafeBEP20: low-level call failed');\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), 'SafeBEP20: BEP20 operation did not succeed');\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/modules/Transfers.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @dev This library abstracts ERC-20 operations in the context of the current\r\n * contract.\r\n */\r\nlibrary Transfers\r\n{\r\n\tusing SafeBEP20 for IBEP20;\r\n\r\n\t/**\r\n\t * @dev Retrieves a given ERC-20 token balance for the current contract.\r\n\t * @param _token An ERC-20 compatible token address.\r\n\t * @return _balance The current contract balance of the given ERC-20 token.\r\n\t */\r\n\tfunction _getBalance(address _token) internal view returns (uint256 _balance)\r\n\t{\r\n\t\treturn IBEP20(_token).balanceOf(address(this));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows a spender to access a given ERC-20 balance for the current contract.\r\n\t * @param _token An ERC-20 compatible token address.\r\n\t * @param _to The spender address.\r\n\t * @param _amount The exact spending allowance amount.\r\n\t */\r\n\tfunction _approveFunds(address _token, address _to, uint256 _amount) internal\r\n\t{\r\n\t\tuint256 _allowance = IBEP20(_token).allowance(address(this), _to);\r\n\t\tif (_allowance > _amount) {\r\n\t\t\tIBEP20(_token).safeDecreaseAllowance(_to, _allowance - _amount);\r\n\t\t}\r\n\t\telse\r\n\t\tif (_allowance < _amount) {\r\n\t\t\tIBEP20(_token).safeIncreaseAllowance(_to, _amount - _allowance);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfer a given ERC-20 token amount into the current contract.\r\n\t * @param _token An ERC-20 compatible token address.\r\n\t * @param _from The source address.\r\n\t * @param _amount The amount to be transferred.\r\n\t */\r\n\tfunction _pullFunds(address _token, address _from, uint256 _amount) internal\r\n\t{\r\n\t\tif (_amount == 0) return;\r\n\t\tIBEP20(_token).safeTransferFrom(_from, address(this), _amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfer a given ERC-20 token amount from the current contract.\r\n\t * @param _token An ERC-20 compatible token address.\r\n\t * @param _to The target address.\r\n\t * @param _amount The amount to be transferred.\r\n\t */\r\n\tfunction _pushFunds(address _token, address _to, uint256 _amount) internal\r\n\t{\r\n\t\tif (_amount == 0) return;\r\n\t\tIBEP20(_token).safeTransfer(_to, _amount);\r\n\t}\r\n}\r\n\r\n// File: contracts/interop/PancakeSwap.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Minimal set of declarations for Uniswap V2 interoperability.\r\n */\r\ninterface Factory\r\n{\r\n\tfunction createPair(address _tokenA, address _tokenB) external returns (address _pair);\r\n}\r\n\r\ninterface PoolToken is IBEP20\r\n{\r\n}\r\n\r\ninterface Pair is PoolToken\r\n{\r\n\tfunction token0() external view returns (address _token0);\r\n\tfunction token1() external view returns (address _token1);\r\n\tfunction getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\r\n\r\n\tfunction mint(address _to) external returns (uint256 _liquidity);\r\n}\r\n\r\ninterface Router01\r\n{\r\n\tfunction WETH() external pure returns (address _token);\r\n\tfunction getAmountOut(uint256 _amountIn, uint256 _reserveIn, uint256 _reserveOut) external pure returns (uint256 _amountOut);\r\n\tfunction getAmountsOut(uint256 _amountIn, address[] calldata _path) external view returns (uint[] memory _amounts);\r\n\tfunction getAmountsIn(uint256 _amountOut, address[] calldata _path) external view returns (uint[] memory _amounts);\r\n\r\n\tfunction addLiquidity(address _tokenA, address _tokenB, uint256 _amountADesired, uint256 _amountBDesired, uint256 _amountAMin, uint256 _amountBMin, address _to, uint256 _deadline) external returns (uint256 _amountA, uint256 _amountB, uint256 _liquidity);\r\n\tfunction removeLiquidity(address _tokenA, address _tokenB, uint256 _liquidity, uint256 _amountAMin, uint256 _amountBMin, address _to, uint256 _deadline) external returns (uint256 _amountA, uint256 _amountB);\r\n\tfunction swapETHForExactTokens(uint256 _amountOut, address[] calldata _path, address _to, uint256 _deadline) external payable returns (uint256[] memory _amounts);\r\n\tfunction swapExactTokensForTokens(uint256 _amountIn, uint256 _amountOutMin, address[] calldata _path, address _to, uint256 _deadline) external returns (uint256[] memory _amounts);\r\n\tfunction swapTokensForExactTokens(uint256 _amountOut, uint256 _amountInMax, address[] calldata _path, address _to, uint256 _deadline) external returns (uint256[] memory _amounts);\r\n}\r\n\r\ninterface Router02 is Router01\r\n{\r\n}\r\n\r\n// File: contracts/modules/PancakeSwapExchangeAbstraction.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @dev This library abstracts the Uniswap V2 token exchange functionality.\r\n */\r\nlibrary PancakeSwapExchangeAbstraction\r\n{\r\n\t/**\r\n\t * @dev Calculates how much output to be received from the given input\r\n\t *      when converting between two assets.\r\n\t * @param _from The input asset address.\r\n\t * @param _to The output asset address.\r\n\t * @param _inputAmount The input asset amount to be provided.\r\n\t * @return _outputAmount The output asset amount to be received.\r\n\t */\r\n\tfunction _calcConversionFromInput(address _router, address _from, address _to, uint256 _inputAmount) internal view returns (uint256 _outputAmount)\r\n\t{\r\n\t\taddress _WBNB = Router02(_router).WETH();\r\n\t\taddress[] memory _path = _buildPath(_from, _WBNB, _to);\r\n\t\treturn Router02(_router).getAmountsOut(_inputAmount, _path)[_path.length - 1];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculates how much input to be received the given the output\r\n\t *      when converting between two assets.\r\n\t * @param _from The input asset address.\r\n\t * @param _to The output asset address.\r\n\t * @param _outputAmount The output asset amount to be received.\r\n\t * @return _inputAmount The input asset amount to be provided.\r\n\t */\r\n\tfunction _calcConversionFromOutput(address _router, address _from, address _to, uint256 _outputAmount) internal view returns (uint256 _inputAmount)\r\n\t{\r\n\t\taddress _WBNB = Router02(_router).WETH();\r\n\t\taddress[] memory _path = _buildPath(_from, _WBNB, _to);\r\n\t\treturn Router02(_router).getAmountsIn(_outputAmount, _path)[0];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Convert funds between two assets given the desired input amount.\r\n\t * @param _from The input asset address.\r\n\t * @param _to The output asset address.\r\n\t * @param _inputAmount The exact input asset amount to be provided.\r\n\t * @param _minOutputAmount The output asset minimum amount to be received.\r\n\t * @return _outputAmount The output asset amount actually received.\r\n\t */\r\n\tfunction _convertFundsFromInput(address _router, address _from, address _to, uint256 _inputAmount, uint256 _minOutputAmount) internal returns (uint256 _outputAmount)\r\n\t{\r\n\t\taddress _WBNB = Router02(_router).WETH();\r\n\t\taddress[] memory _path = _buildPath(_from, _WBNB, _to);\r\n\t\tTransfers._approveFunds(_from, _router, _inputAmount);\r\n\t\treturn Router02(_router).swapExactTokensForTokens(_inputAmount, _minOutputAmount, _path, address(this), uint256(-1))[_path.length - 1];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Convert funds between two assets given the desired output amount.\r\n\t * @param _from The input asset address.\r\n\t * @param _to The output asset address.\r\n\t * @param _outputAmount The exact output asset amount to be received.\r\n\t * @param _maxInputAmount The input asset maximum amount to be provided.\r\n\t * @return _inputAmount The input asset amount actually provided.\r\n\t */\r\n\tfunction _convertFundsFromOutput(address _router, address _from, address _to, uint256 _outputAmount, uint256 _maxInputAmount) internal returns (uint256 _inputAmount)\r\n\t{\r\n\t\taddress _WBNB = Router02(_router).WETH();\r\n\t\taddress[] memory _path = _buildPath(_from, _WBNB, _to);\r\n\t\tTransfers._approveFunds(_from, _router, _maxInputAmount);\r\n\t\t_inputAmount = Router02(_router).swapTokensForExactTokens(_outputAmount, _maxInputAmount, _path, address(this), uint256(-1))[0];\r\n\t\tTransfers._approveFunds(_from, _router, 0);\r\n\t\treturn _inputAmount;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Builds a routing path for conversion possibly using a thrid\r\n\t *      token (likely WETH) as intermediate.\r\n\t * @param _from The input asset address.\r\n\t * @param _through The intermediate asset address.\r\n\t * @param _to The output asset address.\r\n\t * @return _path The route to perform conversion.\r\n\t */\r\n\tfunction _buildPath(address _from, address _through, address _to) private pure returns (address[] memory _path)\r\n\t{\r\n\t\tassert(_from != _to);\r\n\t\tif (_from == _through || _to == _through) {\r\n\t\t\t_path = new address[](2);\r\n\t\t\t_path[0] = _from;\r\n\t\t\t_path[1] = _to;\r\n\t\t\treturn _path;\r\n\t\t} else {\r\n\t\t\t_path = new address[](3);\r\n\t\t\t_path[0] = _from;\r\n\t\t\t_path[1] = _through;\r\n\t\t\t_path[2] = _to;\r\n\t\t\treturn _path;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// File: contracts/GExchangeImpl.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice This contract implements the GExchange interface routing token\r\n *         conversions via a Uniswap V2 compatible exchange.\r\n */\r\ncontract GExchangeImpl is GExchange\r\n{\r\n\taddress public immutable router;\r\n\r\n\tconstructor (address _router)\r\n\t\tpublic\r\n\t{\r\n\t\trouter = _router;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Computes the amount of tokens to be received upon conversion.\r\n\t * @param _from The contract address of the ERC-20 token to convert from.\r\n\t * @param _to The contract address of the ERC-20 token to convert to.\r\n\t * @param _inputAmount The amount of the _from token to be provided (may be 0).\r\n\t * @return _outputAmount The amount of the _to token to be received (may be 0).\r\n\t */\r\n\tfunction calcConversionFromInput(address _from, address _to, uint256 _inputAmount) external view override returns (uint256 _outputAmount)\r\n\t{\r\n\t\treturn PancakeSwapExchangeAbstraction._calcConversionFromInput(router, _from, _to, _inputAmount);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Computes the amount of tokens to be provided upon conversion.\r\n\t * @param _from The contract address of the ERC-20 token to convert from.\r\n\t * @param _to The contract address of the ERC-20 token to convert to.\r\n\t * @param _outputAmount The amount of the _to token to be received (may be 0).\r\n\t * @return _inputAmount The amount of the _from token to be provided (may be 0).\r\n\t */\r\n\tfunction calcConversionFromOutput(address _from, address _to, uint256 _outputAmount) external view override returns (uint256 _inputAmount)\r\n\t{\r\n\t\treturn PancakeSwapExchangeAbstraction._calcConversionFromOutput(router, _from, _to, _outputAmount);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Converts a given token amount to another token, as long as it\r\n\t *         meets the minimum taken amount. Amounts are debited from and\r\n\t *         and credited to the caller contract. It may fail if the\r\n\t *         minimum output amount cannot be met.\r\n\t * @param _from The contract address of the ERC-20 token to convert from.\r\n\t * @param _to The contract address of the ERC-20 token to convert to.\r\n\t * @param _inputAmount The amount of the _from token to be provided (may be 0).\r\n\t * @param _minOutputAmount The minimum amount of the _to token to be received (may be 0).\r\n\t * @return _outputAmount The actual amount of the _to token received (may be 0).\r\n\t */\r\n\tfunction convertFundsFromInput(address _from, address _to, uint256 _inputAmount, uint256 _minOutputAmount) external override returns (uint256 _outputAmount)\r\n\t{\r\n\t\taddress _sender = msg.sender;\r\n\t\tTransfers._pullFunds(_from, _sender, _inputAmount);\r\n\t\t_outputAmount = PancakeSwapExchangeAbstraction._convertFundsFromInput(router, _from, _to, _inputAmount, _minOutputAmount);\r\n\t\tTransfers._pushFunds(_to, _sender, _outputAmount);\r\n\t\treturn _outputAmount;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Converts a given token amount to another token, as long as it\r\n\t *         meets the maximum given amount. Amounts are debited from and\r\n\t *         and credited to the caller contract. It may fail if the\r\n\t *         maximum input amount cannot be met.\r\n\t * @param _from The contract address of the ERC-20 token to convert from.\r\n\t * @param _to The contract address of the ERC-20 token to convert to.\r\n\t * @param _outputAmount The amount of the _to token to be received (may be 0).\r\n\t * @param _maxInputAmount The maximum amount of the _from token to be provided (may be 0).\r\n\t * @return _inputAmount The actual amount of the _from token provided (may be 0).\r\n\t */\r\n\tfunction convertFundsFromOutput(address _from, address _to, uint256 _outputAmount, uint256 _maxInputAmount) external override returns (uint256 _inputAmount)\r\n\t{\r\n\t\taddress _sender = msg.sender;\r\n\t\tTransfers._pullFunds(_from, _sender, _maxInputAmount);\r\n\t\t_inputAmount = PancakeSwapExchangeAbstraction._convertFundsFromOutput(router, _from, _to, _outputAmount, _maxInputAmount);\r\n\t\tTransfers._pushFunds(_from, _sender, _maxInputAmount - _inputAmount);\r\n\t\tTransfers._pushFunds(_to, _sender, _outputAmount);\r\n\t\treturn _inputAmount;\r\n\t}\r\n}\r\n\r\n// File: @pancakeswap/pancake-swap-lib/contracts/token/BEP20/BEP20.sol\r\n\r\n\r\npragma solidity >=0.4.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IBEP20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {BEP20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-BEP20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of BEP20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IBEP20-approve}.\r\n */\r\ncontract BEP20 is Context, IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external override view returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() public override view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() public override view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() public override view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-totalSupply}.\r\n     */\r\n    function totalSupply() public override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public override view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public override view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {BEP20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(amount, 'BEP20: transfer amount exceeds allowance')\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(subtractedValue, 'BEP20: decreased allowance below zero')\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\r\n     * the total supply.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `msg.sender` must be the token owner\r\n     */\r\n    function mint(uint256 amount) public onlyOwner returns (bool) {\r\n        _mint(_msgSender(), amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        require(sender != address(0), 'BEP20: transfer from the zero address');\r\n        require(recipient != address(0), 'BEP20: transfer to the zero address');\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, 'BEP20: transfer amount exceeds balance');\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), 'BEP20: mint to the zero address');\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), 'BEP20: burn from the zero address');\r\n\r\n        _balances[account] = _balances[account].sub(amount, 'BEP20: burn amount exceeds balance');\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(owner != address(0), 'BEP20: approve from the zero address');\r\n        require(spender != address(0), 'BEP20: approve to the zero address');\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(\r\n            account,\r\n            _msgSender(),\r\n            _allowances[account][_msgSender()].sub(amount, 'BEP20: burn amount exceeds allowance')\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/modules/Math.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev This library implements auxiliary math definitions.\r\n */\r\nlibrary Math\r\n{\r\n\tfunction _min(uint256 _amount1, uint256 _amount2) internal pure returns (uint256 _minAmount)\r\n\t{\r\n\t\treturn _amount1 < _amount2 ? _amount1 : _amount2;\r\n\t}\r\n\r\n\tfunction _max(uint256 _amount1, uint256 _amount2) internal pure returns (uint256 _maxAmount)\r\n\t{\r\n\t\treturn _amount1 > _amount2 ? _amount1 : _amount2;\r\n\t}\r\n\r\n\tfunction _sqrt(uint256 _y) internal pure returns (uint256 _z)\r\n\t{\r\n\t\tif (_y > 3) {\r\n\t\t\t_z = _y;\r\n\t\t\tuint256 _x = _y / 2 + 1;\r\n\t\t\twhile (_x < _z) {\r\n\t\t\t\t_z = _x;\r\n\t\t\t\t_x = (_y / _x + _x) / 2;\r\n\t\t\t}\r\n\t\t\treturn _z;\r\n\t\t}\r\n\t\tif (_y > 0) return 1;\r\n\t\treturn 0;\r\n\t}\r\n}\r\n\r\n// File: contracts/GRewardToken.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\ncontract GRewardToken is BEP20\r\n{\r\n\tconstructor (string memory _name, string memory _symbol, uint8 _decimals, uint256 _initialSupply)\r\n\t\tBEP20(_name, _symbol) public\r\n\t{\r\n\t\taddress _sender = msg.sender;\r\n\t\trequire(_decimals == 18, \"unsupported decimals\");\r\n\t\t_mint(_sender, _initialSupply);\r\n\t}\r\n\r\n\tfunction allocateReward(uint256 _amount) external\r\n\t{\r\n\t\taddress _from = msg.sender;\r\n\t\taddress _to = address(this);\r\n\t\t_transfer(_from, _to, _amount);\r\n\t}\r\n\r\n\tfunction mint(address _to, uint256 _amount) external onlyOwner\r\n\t{\r\n\t\taddress _from = address(this);\r\n\t\tuint256 _balance = balanceOf(_from);\r\n\t\t_transfer(_from, _to, Math._min(_balance, _amount));\r\n\t}\r\n}\r\n\r\n// File: @pancakeswap/pancake-swap-lib/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/GRewardStakeToken.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract GRewardStakeToken is BEP20, ReentrancyGuard\r\n{\r\n\taddress public immutable rewardToken;\r\n\r\n\tconstructor (string memory _name, string memory _symbol, uint8 _decimals, address _rewardToken)\r\n\t\tBEP20(_name, _symbol) public\r\n\t{\r\n\t\trequire(_decimals == 18, \"unsupported decimals\");\r\n\t\trewardToken = _rewardToken;\r\n\t}\r\n\r\n\tfunction mint(address _to, uint256 _amount) external onlyOwner nonReentrant\r\n\t{\r\n\t\t_mint(_to, _amount);\r\n\t}\r\n\r\n\tfunction burn(address _from ,uint256 _amount) external onlyOwner nonReentrant\r\n\t{\r\n\t\t_burn(_from, _amount);\r\n\t}\r\n\r\n\tfunction safeRewardTransfer(address _to, uint256 _amount) external onlyOwner nonReentrant\r\n\t{\r\n\t\tuint256 _balance = Transfers._getBalance(rewardToken);\r\n\t\tTransfers._pushFunds(rewardToken, _to, Math._min(_balance, _amount));\r\n\t}\r\n}\r\n\r\n// File: contracts/MasterChef.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import \"@nomiclabs/buidler/console.sol\";\r\n\r\ninterface IMigratorChef {\r\n    // Perform LP token migration from legacy PancakeSwap to CakeSwap.\r\n    // Take the current LP token address and return the new LP token address.\r\n    // Migrator should have full access to the caller's LP token.\r\n    // Return the new LP token address.\r\n    //\r\n    // XXX Migrator must have allowance access to PancakeSwap LP tokens.\r\n    // CakeSwap must mint EXACTLY the same amount of CakeSwap LP tokens or\r\n    // else something bad will happen. Traditional PancakeSwap does not\r\n    // do that so be careful!\r\n    function migrate(IBEP20 token) external returns (IBEP20);\r\n}\r\n\r\n// MasterChef is the master of Cake. He can make Cake and he is a fair guy.\r\n//\r\n// Note that it's ownable and the owner wields tremendous power. The ownership\r\n// will be transferred to a governance smart contract once CAKE is sufficiently\r\n// distributed and the community can show to govern itself.\r\n//\r\n// Have fun reading it. Hopefully it's bug-free. God bless.\r\ncontract MasterChef is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeBEP20 for IBEP20;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount;     // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        //\r\n        // We do some fancy math here. Basically, any point in time, the amount of CAKEs\r\n        // entitled to a user but is pending to be distributed is:\r\n        //\r\n        //   pending reward = (user.amount * pool.accCakePerShare) - user.rewardDebt\r\n        //\r\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\r\n        //   1. The pool's `accCakePerShare` (and `lastRewardBlock`) gets updated.\r\n        //   2. User receives the pending reward sent to his/her address.\r\n        //   3. User's `amount` gets updated.\r\n        //   4. User's `rewardDebt` gets updated.\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IBEP20 lpToken;           // Address of LP token contract.\r\n        uint256 allocPoint;       // How many allocation points assigned to this pool. CAKEs to distribute per block.\r\n        uint256 lastRewardBlock;  // Last block number that CAKEs distribution occurs.\r\n        uint256 accCakePerShare; // Accumulated CAKEs per share, times 1e12. See below.\r\n    }\r\n\r\n    // The CAKE TOKEN!\r\n    GRewardToken public cake;\r\n    // The SYRUP TOKEN!\r\n    GRewardStakeToken public syrup;\r\n    // Dev address.\r\n    address public devaddr;\r\n    // CAKE tokens created per block.\r\n    uint256 public cakePerBlock;\r\n    // Bonus muliplier for early cake makers.\r\n    uint256 public BONUS_MULTIPLIER = 1;\r\n    // The migrator contract. It has a lot of power. Can only be set through governance (owner).\r\n    IMigratorChef public migrator;\r\n\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n    // Info of each user that stakes LP tokens.\r\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\r\n    // Total allocation points. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint = 0;\r\n    // The block number when CAKE mining starts.\r\n    uint256 public startBlock;\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n\r\n    constructor(\r\n        GRewardToken _cake,\r\n        GRewardStakeToken _syrup,\r\n        address _devaddr,\r\n        uint256 _cakePerBlock,\r\n        uint256 _startBlock\r\n    ) public {\r\n        cake = _cake;\r\n        syrup = _syrup;\r\n        devaddr = _devaddr;\r\n        cakePerBlock = _cakePerBlock;\r\n        startBlock = _startBlock;\r\n\r\n        // staking pool\r\n        poolInfo.push(PoolInfo({\r\n            lpToken: _cake,\r\n            allocPoint: 1000,\r\n            lastRewardBlock: startBlock,\r\n            accCakePerShare: 0\r\n        }));\r\n\r\n        totalAllocPoint = 1000;\r\n\r\n    }\r\n\r\n    function updateCakePerBlock(uint256 _cakePerBlock) public onlyOwner {\r\n        cakePerBlock = _cakePerBlock;\r\n    }\r\n\r\n    function updateMultiplier(uint256 multiplierNumber) public onlyOwner {\r\n        BONUS_MULTIPLIER = multiplierNumber;\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    // Add a new lp to the pool. Can only be called by the owner.\r\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\r\n    function add(uint256 _allocPoint, IBEP20 _lpToken, bool _withUpdate) public onlyOwner {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolInfo.push(PoolInfo({\r\n            lpToken: _lpToken,\r\n            allocPoint: _allocPoint,\r\n            lastRewardBlock: lastRewardBlock,\r\n            accCakePerShare: 0\r\n        }));\r\n        updateStakingPool();\r\n    }\r\n\r\n    // Update the given pool's CAKE allocation point. Can only be called by the owner.\r\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public onlyOwner {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        uint256 prevAllocPoint = poolInfo[_pid].allocPoint;\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n        if (prevAllocPoint != _allocPoint) {\r\n            totalAllocPoint = totalAllocPoint.sub(prevAllocPoint).add(_allocPoint);\r\n            updateStakingPool();\r\n        }\r\n    }\r\n\r\n    function updateStakingPool() internal {\r\n        uint256 length = poolInfo.length;\r\n        uint256 points = 0;\r\n        for (uint256 pid = 1; pid < length; ++pid) {\r\n            points = points.add(poolInfo[pid].allocPoint);\r\n        }\r\n        if (points != 0) {\r\n            points = points.div(3);\r\n            totalAllocPoint = totalAllocPoint.sub(poolInfo[0].allocPoint).add(points);\r\n            poolInfo[0].allocPoint = points;\r\n        }\r\n    }\r\n\r\n    // Set the migrator contract. Can only be called by the owner.\r\n    function setMigrator(IMigratorChef _migrator) public onlyOwner {\r\n        migrator = _migrator;\r\n    }\r\n\r\n    // Migrate lp token to another lp contract. Can be called by anyone. We trust that migrator contract is good.\r\n    function migrate(uint256 _pid) public {\r\n        require(address(migrator) != address(0), \"migrate: no migrator\");\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        IBEP20 lpToken = pool.lpToken;\r\n        uint256 bal = lpToken.balanceOf(address(this));\r\n        lpToken.safeApprove(address(migrator), bal);\r\n        IBEP20 newLpToken = migrator.migrate(lpToken);\r\n        require(bal == newLpToken.balanceOf(address(this)), \"migrate: bad\");\r\n        pool.lpToken = newLpToken;\r\n    }\r\n\r\n    // Return reward multiplier over the given _from to _to block.\r\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\r\n        return _to.sub(_from).mul(BONUS_MULTIPLIER);\r\n    }\r\n\r\n    // View function to see pending CAKEs on frontend.\r\n    function pendingCake(uint256 _pid, address _user) external view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accCakePerShare = pool.accCakePerShare;\r\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\r\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n            uint256 cakeReward = multiplier.mul(cakePerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n            accCakePerShare = accCakePerShare.add(cakeReward.mul(1e12).div(lpSupply));\r\n        }\r\n        return user.amount.mul(accCakePerShare).div(1e12).sub(user.rewardDebt);\r\n    }\r\n\r\n    // Update reward variables for all pools. Be careful of gas spending!\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.number <= pool.lastRewardBlock) {\r\n            return;\r\n        }\r\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n        if (lpSupply == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n        uint256 cakeReward = multiplier.mul(cakePerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n        cake.mint(devaddr, cakeReward.div(10));\r\n        cake.mint(address(syrup), cakeReward);\r\n        pool.accCakePerShare = pool.accCakePerShare.add(cakeReward.mul(1e12).div(lpSupply));\r\n        pool.lastRewardBlock = block.number;\r\n    }\r\n\r\n    // Deposit LP tokens to MasterChef for CAKE allocation.\r\n    function deposit(uint256 _pid, uint256 _amount) public {\r\n\r\n        require (_pid != 0, 'deposit CAKE by staking');\r\n\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        updatePool(_pid);\r\n        if (user.amount > 0) {\r\n            uint256 pending = user.amount.mul(pool.accCakePerShare).div(1e12).sub(user.rewardDebt);\r\n            if(pending > 0) {\r\n                safeCakeTransfer(msg.sender, pending);\r\n            }\r\n        }\r\n        if (_amount > 0) {\r\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n            user.amount = user.amount.add(_amount);\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accCakePerShare).div(1e12);\r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw LP tokens from MasterChef.\r\n    function withdraw(uint256 _pid, uint256 _amount) public {\r\n\r\n        require (_pid != 0, 'withdraw CAKE by unstaking');\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount >= _amount, \"withdraw: not good\");\r\n\r\n        updatePool(_pid);\r\n        uint256 pending = user.amount.mul(pool.accCakePerShare).div(1e12).sub(user.rewardDebt);\r\n        if(pending > 0) {\r\n            safeCakeTransfer(msg.sender, pending);\r\n        }\r\n        if(_amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accCakePerShare).div(1e12);\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Stake CAKE tokens to MasterChef\r\n    function enterStaking(uint256 _amount) public {\r\n        PoolInfo storage pool = poolInfo[0];\r\n        UserInfo storage user = userInfo[0][msg.sender];\r\n        updatePool(0);\r\n        if (user.amount > 0) {\r\n            uint256 pending = user.amount.mul(pool.accCakePerShare).div(1e12).sub(user.rewardDebt);\r\n            if(pending > 0) {\r\n                safeCakeTransfer(msg.sender, pending);\r\n            }\r\n        }\r\n        if(_amount > 0) {\r\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n            user.amount = user.amount.add(_amount);\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accCakePerShare).div(1e12);\r\n\r\n        syrup.mint(msg.sender, _amount);\r\n        emit Deposit(msg.sender, 0, _amount);\r\n    }\r\n\r\n    // Withdraw CAKE tokens from STAKING.\r\n    function leaveStaking(uint256 _amount) public {\r\n        PoolInfo storage pool = poolInfo[0];\r\n        UserInfo storage user = userInfo[0][msg.sender];\r\n        require(user.amount >= _amount, \"withdraw: not good\");\r\n        updatePool(0);\r\n        uint256 pending = user.amount.mul(pool.accCakePerShare).div(1e12).sub(user.rewardDebt);\r\n        if(pending > 0) {\r\n            safeCakeTransfer(msg.sender, pending);\r\n        }\r\n        if(_amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accCakePerShare).div(1e12);\r\n\r\n        syrup.burn(msg.sender, _amount);\r\n        emit Withdraw(msg.sender, 0, _amount);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\r\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n    }\r\n\r\n    // Safe cake transfer function, just in case if rounding error causes pool to not have enough CAKEs.\r\n    function safeCakeTransfer(address _to, uint256 _amount) internal {\r\n        syrup.safeRewardTransfer(_to, _amount);\r\n    }\r\n\r\n    // Update dev address by the previous dev.\r\n    function dev(address _devaddr) public {\r\n        require(msg.sender == devaddr, \"dev: wut?\");\r\n        devaddr = _devaddr;\r\n    }\r\n}\r\n\r\n// File: contracts/network/$.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev This library is provided for convenience. It is the single source for\r\n *      the current network and all related hardcoded contract addresses.\r\n */\r\nlibrary $\r\n{\r\n\tenum Network { Bscmain, Chapel }\r\n\r\n\tNetwork constant NETWORK = Network.Bscmain;\r\n\r\n\tfunction network() internal pure returns (Network _network)\r\n\t{\r\n\t\tuint256 _chainid;\r\n\t\tassembly { _chainid := chainid() }\r\n\t\tif (_chainid == 56) return Network.Bscmain;\r\n\t\tif (_chainid == 97) return Network.Chapel;\r\n\t\trequire(false, \"unsupported network\");\r\n\t}\r\n\r\n\taddress constant ETH =\r\n\t\tNETWORK == Network.Bscmain ? 0x2170Ed0880ac9A755fd29B2688956BD959F933F8 :\r\n\t\tNETWORK == Network.Chapel ? 0xd66c6B4F0be8CE5b39D52E0Fd1344c389929B378 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant WBNB =\r\n\t\tNETWORK == Network.Bscmain ? 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c :\r\n\t\tNETWORK == Network.Chapel ? 0xd21BB48C35e7021Bf387a8b259662dC06a9df984 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant PancakeSwap_FACTORY =\r\n\t\tNETWORK == Network.Bscmain ? 0xBCfCcbde45cE874adCB698cC183deBcF17952812 :\r\n\t\tNETWORK == Network.Chapel ? 0x1f3F51f2a7Bfe32f34446b3213C130EBB9e287A1 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant PancakeSwap_ROUTER02 =\r\n\t\tNETWORK == Network.Bscmain ? 0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F :\r\n\t\tNETWORK == Network.Chapel ? 0x428E5Be012f8D9cca6852479e522B75519E10980 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant PancakeSwap_MASTERCHEF =\r\n\t\tNETWORK == Network.Bscmain ? 0x73feaa1eE314F8c655E354234017bE2193C9E24E :\r\n\t\tNETWORK == Network.Chapel ? 0x7C83Cab4B208A0cD5a1b222D8e6f9099C8F37897 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n}\r\n\r\n// File: contracts/modules/PancakeSwapLiquidityPoolAbstraction.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n// import { Babylonian } from \"@uniswap/lib/contracts/libraries/Babylonian.sol\";\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This library provides functionality to facilitate adding/removing\r\n * single-asset liquidity to/from a Uniswap V2 pool.\r\n */\r\nlibrary PancakeSwapLiquidityPoolAbstraction\r\n{\r\n\tusing SafeMath for uint256;\r\n\r\n\tfunction _estimateJoinPool(address _pair, address _token, uint256 _amount) internal view returns (uint256 _shares)\r\n\t{\r\n\t\tif (_amount == 0) return 0;\r\n\t\taddress _router = $.PancakeSwap_ROUTER02;\r\n\t\taddress _token0 = Pair(_pair).token0();\r\n\t\t(uint256 _reserve0, uint256 _reserve1,) = Pair(_pair).getReserves();\r\n\t\tuint256 _balance = _token == _token0 ? _reserve0 : _reserve1;\r\n\t\tuint256 _otherBalance = _token == _token0 ? _reserve1 : _reserve0;\r\n\t\tuint256 _totalSupply = Pair(_pair).totalSupply();\r\n\t\tuint256 _swapAmount = _calcSwapOutputFromInput(_balance, _amount);\r\n\t\tif (_swapAmount == 0) _swapAmount = _amount / 2;\r\n\t\tuint256 _leftAmount = _amount.sub(_swapAmount);\r\n\t\tuint256 _otherAmount = Router02(_router).getAmountOut(_swapAmount, _balance, _otherBalance);\r\n\t\t_shares = Math._min(_totalSupply.mul(_leftAmount) / _balance.add(_swapAmount), _totalSupply.mul(_otherAmount) / _otherBalance.sub(_otherAmount));\r\n\t\treturn _shares;\r\n\t}\r\n\r\n\tfunction _estimateExitPool(address _pair, address _token, uint256 _shares) internal view returns (uint256 _amount)\r\n\t{\r\n\t\tif (_shares == 0) return 0;\r\n\t\taddress _router = $.PancakeSwap_ROUTER02;\r\n\t\taddress _token0 = Pair(_pair).token0();\r\n\t\t(uint256 _reserve0, uint256 _reserve1,) = Pair(_pair).getReserves();\r\n\t\tuint256 _balance = _token == _token0 ? _reserve0 : _reserve1;\r\n\t\tuint256 _otherBalance = _token == _token0 ? _reserve1 : _reserve0;\r\n\t\tuint256 _totalSupply = Pair(_pair).totalSupply();\r\n\t\tuint256 _baseAmount = _balance.mul(_shares) / _totalSupply;\r\n\t\tuint256 _swapAmount = _otherBalance.mul(_shares) / _totalSupply;\r\n\t\tuint256 _additionalAmount = Router02(_router).getAmountOut(_swapAmount, _otherBalance.sub(_swapAmount), _balance.sub(_baseAmount));\r\n\t\t_amount = _baseAmount.add(_additionalAmount);\r\n\t\treturn _amount;\r\n\t}\r\n\r\n\tfunction _joinPool(address _pair, address _token, uint256 _amount) internal returns (uint256 _shares)\r\n\t{\r\n\t\tif (_amount == 0) return 0;\r\n\t\taddress _router = $.PancakeSwap_ROUTER02;\r\n\t\taddress _token0 = Pair(_pair).token0();\r\n\t\taddress _token1 = Pair(_pair).token1();\r\n\t\trequire(_token == _token0 || _token == _token1, \"invalid token\");\r\n\t\taddress _otherToken = _token == _token0 ? _token1 : _token0;\r\n\t\t(uint256 _reserve0, uint256 _reserve1,) = Pair(_pair).getReserves();\r\n\t\tuint256 _swapAmount = _calcSwapOutputFromInput(_token == _token0 ? _reserve0 : _reserve1, _amount);\r\n\t\tif (_swapAmount == 0) _swapAmount = _amount / 2;\r\n\t\tuint256 _leftAmount = _amount.sub(_swapAmount);\r\n\t\tTransfers._approveFunds(_token, _router, _amount);\r\n\t\taddress[] memory _path = new address[](2);\r\n\t\t_path[0] = _token;\r\n\t\t_path[1] = _otherToken;\r\n\t\tuint256 _otherAmount = Router02(_router).swapExactTokensForTokens(_swapAmount, 1, _path, address(this), uint256(-1))[1];\r\n\t\tTransfers._approveFunds(_otherToken, _router, _otherAmount);\r\n\t\t(,,_shares) = Router02(_router).addLiquidity(_token, _otherToken, _leftAmount, _otherAmount, 1, 1, address(this), uint256(-1));\r\n\t\t// slippage must be checked by caller\r\n\t\treturn _shares;\r\n\t}\r\n\r\n\tfunction _exitPool(address _pair, address _token, uint256 _shares) internal returns (uint256 _amount)\r\n\t{\r\n\t\tif (_shares == 0) return 0;\r\n\t\taddress _router = $.PancakeSwap_ROUTER02;\r\n\t\taddress _token0 = Pair(_pair).token0();\r\n\t\taddress _token1 = Pair(_pair).token1();\r\n\t\trequire(_token == _token0 || _token == _token1, \"invalid token\");\r\n\t\taddress _otherToken = _token == _token0 ? _token1 : _token0;\r\n\t\tTransfers._approveFunds(_pair, _router, _shares);\r\n\t\t(uint256 _baseAmount, uint256 _swapAmount) = Router02(_router).removeLiquidity(_token, _otherToken, _shares, 1, 1, address(this), uint256(-1));\r\n\t\tTransfers._approveFunds(_otherToken, _router, _swapAmount);\r\n\t\taddress[] memory _path = new address[](2);\r\n\t\t_path[0] = _otherToken;\r\n\t\t_path[1] = _token;\r\n\t\tuint256 _additionalAmount = Router02(_router).swapExactTokensForTokens(_swapAmount, 1, _path, address(this), uint256(-1))[1];\r\n\t\t_amount = _baseAmount.add(_additionalAmount);\r\n\t\t// slippage must be checked by caller\r\n\t\treturn _amount;\r\n\t}\r\n\r\n\tfunction _calcSwapOutputFromInput(uint256 _reserveAmount, uint256 _inputAmount) private pure returns (uint256 _outputAmount)\r\n\t{\r\n\t\treturn Math._sqrt(_reserveAmount.mul(_inputAmount.mul(3988000).add(_reserveAmount.mul(3988009)))).sub(_reserveAmount.mul(1997)) / 1994;\r\n\t}\r\n}\r\n\r\n// File: contracts/GRewardCompoundingStrategyToken.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract GRewardCompoundingStrategyToken is BEP20, ReentrancyGuard\r\n{\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256 constant MAXIMUM_PERFORMANCE_FEE = 50e16; // 50%\r\n\tuint256 constant DEFAULT_PERFORMANCE_FEE = 10e16; // 10%\r\n\r\n\taddress immutable masterChef;\r\n\tuint256 immutable pid;\r\n\r\n\taddress public immutable /*override*/ reserveToken;\r\n\taddress public immutable /*override*/ routingToken;\r\n\taddress public immutable /*override*/ rewardToken;\r\n\r\n\taddress public exchange;\r\n\taddress public treasury;\r\n\r\n\tuint256 public /*override*/ performanceFee = DEFAULT_PERFORMANCE_FEE;\r\n\r\n\tuint256 lastTotalSupply = 1;\r\n\tuint256 lastTotalReserve = 1;\r\n\r\n\tconstructor (string memory _name, string memory _symbol, uint8 _decimals, address _masterChef, uint256 _pid, address _routingToken)\r\n\t\tBEP20(_name, _symbol) public\r\n\t{\r\n\t\taddress _treasury = msg.sender;\r\n\t\t(IBEP20 _lpToken,,,) = MasterChef(_masterChef).poolInfo(_pid);\r\n\t\taddress _reserveToken = address(_lpToken);\r\n\t\taddress _rewardToken = address(MasterChef(_masterChef).cake());\r\n\t\trequire(_decimals == 18, \"unsupported decimals\");\r\n\t\trequire(_pid >= 1);\r\n\t\trequire(_routingToken == Pair(_reserveToken).token0() || _routingToken == Pair(_reserveToken).token1(), \"invalid token\");\r\n\t\tmasterChef = _masterChef;\r\n\t\tpid = _pid;\r\n\t\treserveToken = _reserveToken;\r\n\t\troutingToken = _routingToken;\r\n\t\trewardToken = _rewardToken;\r\n\t\ttreasury = _treasury;\r\n\t\t_mint(address(1), 1); // avoids division by zero\r\n\t}\r\n\r\n\tfunction totalReserve() public view /*override*/ returns (uint256 _totalReserve)\r\n\t{\r\n\t\t(_totalReserve,) = MasterChef(masterChef).userInfo(pid, address(this));\r\n\t\tif (_totalReserve == uint256(-1)) return _totalReserve;\r\n\t\treturn _totalReserve + 1; // avoids division by zero\r\n\t}\r\n\r\n\tfunction calcSharesFromCost(uint256 _cost) public view /*override*/ returns (uint256 _shares)\r\n\t{\r\n\t\treturn _cost.mul(totalSupply()).div(totalReserve());\r\n\t}\r\n\r\n\tfunction calcCostFromShares(uint256 _shares) public view /*override*/ returns (uint256 _cost)\r\n\t{\r\n\t\treturn _shares.mul(totalReserve()).div(totalSupply());\r\n\t}\r\n\r\n\tfunction estimatePendingRewards() external view /*override*/ returns (uint256 _rewardsCost)\r\n\t{\r\n\t\trequire(exchange != address(0), \"exchange not set\");\r\n\t\tuint256 _rewardAmount = Transfers._getBalance(rewardToken);\r\n\t\tuint256 _routingAmount = _rewardAmount;\r\n\t\tif (routingToken != rewardToken) {\r\n\t\t\t_routingAmount = GExchange(exchange).calcConversionFromInput(rewardToken, routingToken, _rewardAmount);\r\n\t\t}\r\n\t\treturn PancakeSwapLiquidityPoolAbstraction._estimateJoinPool(reserveToken, routingToken, _routingAmount);\r\n\t}\r\n\r\n\tfunction pendingFees() external view /*override*/ returns (uint256 _feeShares)\r\n\t{\r\n\t\treturn _calcFees();\r\n\t}\r\n\r\n\tfunction deposit(uint256 _cost) external /*override*/ nonReentrant\r\n\t{\r\n\t\taddress _from = msg.sender;\r\n\t\tuint256 _shares = calcSharesFromCost(_cost);\r\n\t\tTransfers._pullFunds(reserveToken, _from, _cost);\r\n\t\tTransfers._approveFunds(reserveToken, masterChef, _cost);\r\n\t\tMasterChef(masterChef).deposit(pid, _cost);\r\n\t\t_mint(_from, _shares);\r\n\t}\r\n\r\n\tfunction withdraw(uint256 _shares) external /*override*/ nonReentrant\r\n\t{\r\n\t\taddress _from = msg.sender;\r\n\t\tuint256 _cost = calcCostFromShares(_shares);\r\n\t\tMasterChef(masterChef).withdraw(pid, _cost);\r\n\t\tTransfers._pushFunds(reserveToken, _from, _cost);\r\n\t\t_burn(_from, _shares);\r\n\t}\r\n\r\n\tfunction gulpRewards(uint256 _minRewardCost) external /*override*/ nonReentrant\r\n\t{\r\n\t\trequire(exchange != address(0), \"exchange not set\");\r\n\t\tuint256 _rewardAmount = Transfers._getBalance(rewardToken);\r\n\t\tuint256 _routingAmount = _rewardAmount;\r\n\t\tif (routingToken != rewardToken) {\r\n\t\t\tTransfers._approveFunds(rewardToken, exchange, _rewardAmount);\r\n\t\t\t_routingAmount = GExchange(exchange).convertFundsFromInput(rewardToken, routingToken, _rewardAmount, 0);\r\n\t\t}\r\n\t\tuint256 _rewardCost = PancakeSwapLiquidityPoolAbstraction._joinPool(reserveToken, routingToken, _routingAmount);\r\n\t        require(_rewardCost >= _minRewardCost, \"high slippage\");\r\n\t\tTransfers._approveFunds(reserveToken, masterChef, _rewardCost);\r\n\t\tMasterChef(masterChef).deposit(pid, _rewardCost);\r\n\t}\r\n\r\n\tfunction gulpFees() external /*override*/ nonReentrant\r\n\t{\r\n\t\tuint256 _feeShares = _calcFees();\r\n\t\tif (_feeShares > 0) {\r\n\t\t\tlastTotalSupply = totalSupply();\r\n\t\t\tlastTotalReserve = totalReserve();\r\n\t\t\t_mint(treasury, _feeShares);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setExchange(address _newExchange) external /*override*/ onlyOwner nonReentrant\r\n\t{\r\n\t\taddress _oldExchange = exchange;\r\n\t\texchange = _newExchange;\r\n\t\temit ChangeExchange(_oldExchange, _newExchange);\r\n\t}\r\n\r\n\tfunction setTreasury(address _newTreasury) external /*override*/ onlyOwner nonReentrant\r\n\t{\r\n\t\trequire(_newTreasury != address(0), \"invalid address\");\r\n\t\taddress _oldTreasury = treasury;\r\n\t\ttreasury = _newTreasury;\r\n\t\temit ChangeTreasury(_oldTreasury, _newTreasury);\r\n\t}\r\n\r\n\tfunction setPerformanceFee(uint256 _newPerformanceFee) external /*override*/ onlyOwner nonReentrant\r\n\t{\r\n\t\trequire(_newPerformanceFee <= MAXIMUM_PERFORMANCE_FEE, \"invalid rate\");\r\n\t\tuint256 _oldPerformanceFee = performanceFee;\r\n\t\tperformanceFee = _newPerformanceFee;\r\n\t\temit ChangePerformanceFee(_oldPerformanceFee, _newPerformanceFee);\r\n\t}\r\n\r\n\tfunction _calcFees() internal view returns (uint256 _feeShares)\r\n\t{\r\n\t\tuint256 _oldTotalSupply = lastTotalSupply;\r\n\t\tuint256 _oldTotalReserve = lastTotalReserve;\r\n\r\n\t\tuint256 _newTotalSupply = totalSupply();\r\n\t\tuint256 _newTotalReserve = totalReserve();\r\n\r\n\t\t// calculates the profit using the following formula\r\n\t\t// ((P1 - P0) * S1 * f) / P1\r\n\t\t// where P1 = R1 / S1 and P0 = R0 / S0\r\n\t\tuint256 _positive = _oldTotalSupply.mul(_newTotalReserve);\r\n\t\tuint256 _negative = _newTotalSupply.mul(_oldTotalReserve);\r\n\t\tif (_positive > _negative) {\r\n\t\t\tuint256 _profitCost = _positive.sub(_negative).div(_oldTotalSupply);\r\n\t\t\tuint256 _feeCost = _profitCost.mul(performanceFee).div(1e18);\r\n\t\t\treturn calcSharesFromCost(_feeCost);\r\n\t\t}\r\n\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tevent ChangeExchange(address _oldExchange, address _newExchange);\r\n\tevent ChangeTreasury(address _oldTreasury, address _newTreasury);\r\n\tevent ChangePerformanceFee(uint256 _oldPerformanceFee, uint256 _newPerformanceFee);\r\n}\r\n\r\n// File: contracts/GDeflationaryToken.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\ncontract GDeflationaryToken is BEP20, ReentrancyGuard\r\n{\r\n\tconstructor (string memory _name, string memory _symbol, uint8 _decimals, uint256 _initialSupply)\r\n\t\tBEP20(_name, _symbol) public\r\n\t{\r\n\t\taddress _sender = msg.sender;\r\n\t\trequire(_decimals == 18, \"unsupported decimals\");\r\n\t\t_mint(_sender, _initialSupply);\r\n\t}\r\n\r\n\tfunction burn(uint256 _amount) external onlyOwner nonReentrant\r\n\t{\r\n\t\taddress _sender = msg.sender;\r\n\t\t_burn(_sender, _amount);\r\n\t}\r\n}\r\n\r\n// File: contracts/GTokens.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract gROOT is GRewardToken\r\n{\r\n\tconstructor (uint256 _totalSupply)\r\n\t\tGRewardToken(\"growth Root Token\", \"gROOT\", 18, _totalSupply) public\r\n\t{\r\n\t}\r\n}\r\n\r\ncontract stkgROOT is GRewardStakeToken\r\n{\r\n\tconstructor (address _gROOT)\r\n\t\tGRewardStakeToken(\"stake gROOT\", \"stkgROOT\", 18, _gROOT) public\r\n\t{\r\n\t}\r\n}\r\n\r\ncontract SAFE is GDeflationaryToken\r\n{\r\n\tconstructor (uint256 _totalSupply)\r\n\t\tGDeflationaryToken(\"rAAVE Debt Token\", \"SAFE\", 18, _totalSupply) public\r\n\t{\r\n\t}\r\n}\r\n\r\ncontract stkgROOT_BNB is GRewardCompoundingStrategyToken\r\n{\r\n\tconstructor (address _masterChef, uint256 _pid, address _gROOT)\r\n\t\tGRewardCompoundingStrategyToken(\"stake gROOT/BNB\", \"stkgROOT/BNB\", 18, _masterChef, _pid, _gROOT) public\r\n\t{\r\n\t}\r\n}\r\n\r\n// File: contracts/interop/WrappedBNB.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Minimal set of declarations for WBNB interoperability.\r\n */\r\ninterface WBNB is IBEP20\r\n{\r\n\tfunction deposit() external payable;\r\n\tfunction withdraw(uint256 _amount) external;\r\n}\r\n\r\n// File: contracts/modules/Wrapping.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @dev This library abstracts Wrapped Ether operations.\r\n */\r\nlibrary Wrapping\r\n{\r\n\t/**\r\n\t * @dev Sends some ETH to the Wrapped Ether contract in exchange for WETH.\r\n\t * @param _amount The amount of ETH to be wrapped.\r\n\t */\r\n\tfunction _wrap(uint256 _amount) internal\r\n\t{\r\n\t\tif (_amount == 0) return;\r\n\t\tWBNB($.WBNB).deposit{value: _amount}();\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Receives some ETH from the Wrapped Ether contract in exchange for WETH.\r\n\t *      Note that the contract using this library function must declare a\r\n\t *      payable receive/fallback function.\r\n\t * @param _amount The amount of ETH to be unwrapped.\r\n\t */\r\n\tfunction _unwrap(uint256 _amount) internal\r\n\t{\r\n\t\tif (_amount == 0) return;\r\n\t\tWBNB($.WBNB).withdraw(_amount);\r\n\t}\r\n}\r\n\r\n// File: contracts/Deployer.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Deployer is Ownable\r\n{\r\n\taddress constant GROOT_TREASURY1 = 0x2165fa4a32B9c228cD55713f77d2e977297D03e8; // G\r\n\taddress constant GROOT_TREASURY2 = 0x6248f5783A1F908F7fbB651bb3Ca27BF7c9f5022; // M\r\n\taddress constant GROOT_TREASURY3 = 0xBf70B751BB1FC725bFbC4e68C4Ec4825708766c5; // S\r\n\r\n\taddress constant GROOT_INITIAL_STAKE_HOLDER = 0x5c327D395D0617f5b6ad6E8Da5dCBb35A6Be5b11;\r\n\taddress constant GROOT_DEFAULT_FEE_COLLECTOR = 0xB0632a01ee778E09625BcE2a257e221b49E79696;\r\n\r\n\taddress constant GROOT_CONTRACTS_OWNER = 0xBf70B751BB1FC725bFbC4e68C4Ec4825708766c5;\r\n\r\n\tuint256 constant GROOT_TOTAL_SUPPLY = 20000e18; // 20,000\r\n\tuint256 constant GROOT_TREASURY_ALLOCATION = 10430e18; // 10,430\r\n\tuint256 constant GROOT_LIQUIDITY_ALLOCATION = 70e18; // 70\r\n\tuint256 constant GROOT_FARMING_ALLOCATION = 8000e18; // 8,000\r\n\tuint256 constant GROOT_INITIAL_FARMING_ALLOCATION = 0e18; // 0\r\n\tuint256 constant GROOT_AIRDROP_ALLOCATION = 1500e18; // 1,500\r\n\r\n\tuint256 constant SAFE_TOTAL_SUPPLY = 168675e18; // 168,675\r\n\tuint256 constant SAFE_AIRDROP_ALLOCATION = 168675e18; // 168,675\r\n\r\n\tuint256 constant WBNB_LIQUIDITY_ALLOCATION = 300e18; // 300\r\n\r\n\tuint256 constant AVERAGE_BLOCK_TIME = 3 seconds;\r\n\tuint256 constant INITIAL_GROOT_PER_MONTH = 0e18; // 0\r\n\tuint256 constant INITIAL_GROOT_PER_BLOCK = AVERAGE_BLOCK_TIME * INITIAL_GROOT_PER_MONTH / 30 days;\r\n\r\n\tbool constant STAKE_LP_SHARES = false;\r\n\r\n\tstruct Payment {\r\n\t\taddress receiver;\r\n\t\tuint256 amount;\r\n\t}\r\n\r\n\tPayment[] public paymentsGROOT;\r\n\tPayment[] public paymentsSAFE;\r\n\r\n\tuint256 public rewardStartBlock;\r\n\taddress public pancakeSwapRouter;\r\n\taddress public registry;\r\n\taddress public exchange;\r\n\taddress public SAFE;\r\n\taddress public gROOT;\r\n\taddress public stkgROOT;\r\n\taddress public masterChef;\r\n\taddress public gROOT_WBNB;\r\n\taddress public stkgROOT_BNB;\r\n\r\n\tbool public deployed = false;\r\n\tbool public airdropped = false;\r\n\r\n\tconstructor () public\r\n\t{\r\n\t\trequire($.NETWORK == $.network(), \"wrong network\");\r\n\t}\r\n\r\n\tfunction registerReceiversGROOT(address[] memory _receivers, uint256[] memory _amounts) external onlyOwner\r\n\t{\r\n\t\trequire(_receivers.length == _amounts.length, \"length mismatch\");\r\n\t\tfor (uint256 _i = 0; _i < _receivers.length; _i++) {\r\n\t\t\taddress _receiver = _receivers[_i];\r\n\t\t\tuint256 _amount = _amounts[_i];\r\n\t\t\trequire(_amount > 0, \"zero amount\");\r\n\t\t\tpaymentsGROOT.push(Payment({ receiver: _receiver, amount: _amount }));\r\n\t\t}\r\n\t}\r\n\r\n\tfunction registerReceiversSAFE(address[] memory _receivers, uint256[] memory _amounts) external onlyOwner\r\n\t{\r\n\t\trequire(_receivers.length == _amounts.length, \"length mismatch\");\r\n\t\tfor (uint256 _i = 0; _i < _receivers.length; _i++) {\r\n\t\t\taddress _receiver = _receivers[_i];\r\n\t\t\tuint256 _amount = _amounts[_i];\r\n\t\t\trequire(_amount > 0, \"zero amount\");\r\n\t\t\tpaymentsSAFE.push(Payment({ receiver: _receiver, amount: _amount }));\r\n\t\t}\r\n\t}\r\n\r\n\tfunction deploy() payable external onlyOwner\r\n\t{\r\n\t\tuint256 _amount = msg.value;\r\n\t\trequire(_amount == WBNB_LIQUIDITY_ALLOCATION, \"BNB amount mismatch\");\r\n\r\n\t\trequire(!deployed, \"deploy unavailable\");\r\n\r\n\t\t// wraps LP liquidity BNB into WBNB\r\n\t\tWrapping._wrap(WBNB_LIQUIDITY_ALLOCATION);\r\n\r\n\t\t// initialize handy fields\r\n\t\trewardStartBlock = block.number;\r\n\t\tpancakeSwapRouter = $.PancakeSwap_ROUTER02;\r\n\r\n\t\t// deploy helper contracts\r\n\t\tregistry = LibDeployer1.publishGTokenRegistry();\r\n\t\texchange = LibDeployer1.publishGExchangeImpl(pancakeSwapRouter);\r\n\r\n\t\t// deploy SAFE token\r\n\t\tSAFE = LibDeployer1.publishSAFE(SAFE_TOTAL_SUPPLY);\r\n\r\n\t\t// deploy gROOT token and MasterChef for reward distribution\r\n\t\tgROOT = LibDeployer2.publishGROOT(GROOT_TOTAL_SUPPLY);\r\n\t\tstkgROOT = LibDeployer2.publishSTKGROOT(gROOT);\r\n\t\tmasterChef = LibDeployer3.publishMasterChef(gROOT, stkgROOT, INITIAL_GROOT_PER_BLOCK, rewardStartBlock);\r\n\t\tGRewardToken(gROOT).allocateReward(GROOT_INITIAL_FARMING_ALLOCATION);\r\n\r\n\t\t// create gROOT/BNB LP and register it for reward distribution\r\n\t\tgROOT_WBNB = Factory($.PancakeSwap_FACTORY).createPair(gROOT, $.WBNB);\r\n\t\tMasterChef(masterChef).add(1000, IBEP20(gROOT_WBNB), false);\r\n\r\n\t\t// adds the liquidity to the gROOT/BNB LP\r\n\t\tTransfers._pushFunds(gROOT, gROOT_WBNB, GROOT_LIQUIDITY_ALLOCATION);\r\n\t\tTransfers._pushFunds($.WBNB, gROOT_WBNB, WBNB_LIQUIDITY_ALLOCATION);\r\n\t\tuint256 _lpshares = Pair(gROOT_WBNB).mint(address(this));\r\n\r\n\t\t// create and configure compounding strategy contract for gROOT/BNB\r\n\t\tstkgROOT_BNB = LibDeployer4.publishSTKGROOTBNB(masterChef, 1, gROOT);\r\n\t\tGRewardCompoundingStrategyToken(stkgROOT_BNB).setExchange(exchange);\r\n\t\tGRewardCompoundingStrategyToken(stkgROOT_BNB).setTreasury(GROOT_DEFAULT_FEE_COLLECTOR);\r\n\r\n\t\t// stake gROOT/BNB LP shares into strategy contract\r\n\t\tif (STAKE_LP_SHARES) {\r\n\t\t\tTransfers._approveFunds(gROOT_WBNB, stkgROOT_BNB, _lpshares);\r\n\t\t\tGRewardCompoundingStrategyToken(stkgROOT_BNB).deposit(_lpshares);\r\n\t\t\tTransfers._pushFunds(stkgROOT_BNB, GROOT_INITIAL_STAKE_HOLDER, _lpshares);\r\n\t\t} else {\r\n\t\t\tTransfers._pushFunds(gROOT_WBNB, GROOT_INITIAL_STAKE_HOLDER, _lpshares);\r\n\t\t}\r\n\r\n\t\t// transfer treasury funds to the treasury\r\n\t\tTransfers._pushFunds(gROOT, GROOT_TREASURY1, GROOT_TREASURY_ALLOCATION / 3);\r\n\t\tTransfers._pushFunds(gROOT, GROOT_TREASURY2, GROOT_TREASURY_ALLOCATION / 3);\r\n\t\tTransfers._pushFunds(gROOT, GROOT_TREASURY3, GROOT_TREASURY_ALLOCATION - 2 * (GROOT_TREASURY_ALLOCATION / 3));\r\n\r\n\t\t// transfer farming funds to the treasury\r\n\t\tTransfers._pushFunds(gROOT, GROOT_TREASURY1, GROOT_FARMING_ALLOCATION / 3);\r\n\t\tTransfers._pushFunds(gROOT, GROOT_TREASURY2, GROOT_FARMING_ALLOCATION / 3);\r\n\t\tTransfers._pushFunds(gROOT, GROOT_TREASURY3, GROOT_FARMING_ALLOCATION - 2 * (GROOT_FARMING_ALLOCATION / 3));\r\n\r\n\t\trequire(Transfers._getBalance($.WBNB) == 0, \"WBNB left over\");\r\n\t\trequire(Transfers._getBalance(gROOT_WBNB) == 0, \"gROOT_WBNB left over\");\r\n\t\trequire(Transfers._getBalance(stkgROOT_BNB) == 0, \"stkgROOT_BNB left over\");\r\n\t\trequire(Transfers._getBalance(gROOT) == GROOT_AIRDROP_ALLOCATION, \"gROOT amount mismatch\");\r\n\t\trequire(Transfers._getBalance(SAFE) == SAFE_AIRDROP_ALLOCATION, \"SAFE amount mismatch\");\r\n\r\n\t\t// register tokens\r\n\t\tGTokenRegistry(registry).registerNewToken(SAFE, address(0));\r\n\t\tGTokenRegistry(registry).registerNewToken(gROOT, address(0));\r\n\t\tGTokenRegistry(registry).registerNewToken(stkgROOT, address(0));\r\n\t\tGTokenRegistry(registry).registerNewToken(stkgROOT_BNB, address(0));\r\n\r\n\t\t// transfer ownerships\r\n\t\tOwnable(gROOT).transferOwnership(masterChef);\r\n\t\tOwnable(stkgROOT).transferOwnership(masterChef);\r\n\r\n\t\tOwnable(registry).transferOwnership(GROOT_CONTRACTS_OWNER);\r\n\t\tOwnable(SAFE).transferOwnership(GROOT_CONTRACTS_OWNER);\r\n\t\tOwnable(masterChef).transferOwnership(GROOT_CONTRACTS_OWNER);\r\n\t\tOwnable(stkgROOT_BNB).transferOwnership(GROOT_CONTRACTS_OWNER);\r\n\r\n\t\t// wrap up the deployment\r\n\t\tdeployed = true;\r\n\t\temit DeployPerformed();\r\n\t}\r\n\r\n\tfunction airdrop() external onlyOwner\r\n\t{\r\n\t\trequire(deployed, \"airdrop unavailable\");\r\n\t\trequire(!airdropped, \"airdrop unavailable\");\r\n\r\n\t\trequire(Transfers._getBalance(gROOT) == GROOT_AIRDROP_ALLOCATION, \"gROOT amount mismatch\");\r\n\t\trequire(Transfers._getBalance(SAFE) == SAFE_AIRDROP_ALLOCATION, \"SAFE amount mismatch\");\r\n\r\n\t\t// airdrops gROOT\r\n\t\tfor (uint256 _i = 0; _i < paymentsGROOT.length; _i++) {\r\n\t\t\tPayment storage _payment = paymentsGROOT[_i];\r\n\t\t\tTransfers._pushFunds(gROOT, _payment.receiver, _payment.amount);\r\n\t\t}\r\n\r\n\t\t// ardrops SAFE\r\n\t\tfor (uint256 _i = 0; _i < paymentsSAFE.length; _i++) {\r\n\t\t\tPayment storage _payment = paymentsSAFE[_i];\r\n\t\t\tTransfers._pushFunds(SAFE, _payment.receiver, _payment.amount);\r\n\t\t}\r\n\r\n\t\trequire(Transfers._getBalance(gROOT) == 0, \"gROOT left over\");\r\n\t\trequire(Transfers._getBalance(SAFE) == 0, \"SAFE left over\");\r\n\r\n\t\trenounceOwnership();\r\n\r\n\t\tairdropped = true;\r\n\t\temit AirdropPerformed();\r\n\t}\r\n\r\n\tevent DeployPerformed();\r\n\tevent AirdropPerformed();\r\n}\r\n\r\nlibrary LibDeployer1\r\n{\r\n\tfunction publishGTokenRegistry() public returns (address _address)\r\n\t{\r\n\t\treturn address(new GTokenRegistry());\r\n\t}\r\n\r\n\tfunction publishGExchangeImpl(address _router) public returns (address _address)\r\n\t{\r\n\t\treturn address(new GExchangeImpl(_router));\r\n\t}\r\n\r\n\tfunction publishSAFE(uint256 _totalSupply) public returns (address _address)\r\n\t{\r\n\t\treturn address(new SAFE(_totalSupply));\r\n\t}\r\n}\r\n\r\nlibrary LibDeployer2\r\n{\r\n\tfunction publishGROOT(uint256 _totalSupply) public returns (address _address)\r\n\t{\r\n\t\treturn address(new gROOT(_totalSupply));\r\n\t}\r\n\r\n\tfunction publishSTKGROOT(address _rewardToken) public returns (address _address)\r\n\t{\r\n\t\treturn address(new stkgROOT(_rewardToken));\r\n\t}\r\n}\r\n\r\nlibrary LibDeployer3\r\n{\r\n\tfunction publishMasterChef(address _rewardToken, address _rewardStakeToken, uint256 _rewardPerBlock, uint256 _rewardStartBlock) public returns (address _address)\r\n\t{\r\n\t\treturn address(new MasterChef(GRewardToken(_rewardToken), GRewardStakeToken(_rewardStakeToken), _rewardToken, _rewardPerBlock, _rewardStartBlock));\r\n\t}\r\n}\r\n\r\nlibrary LibDeployer4\r\n{\r\n\tfunction publishSTKGROOTBNB(address _masterChef, uint256 _pid, address _routingToken) public returns (address _address)\r\n\t{\r\n\t\treturn address(new stkgROOT_BNB(_masterChef, _pid, _routingToken));\r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"allocateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "gROOT", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000043c33c1937564800000", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fa67b45501269378ac2e22143156c7b72b622071f839c454587bc19a9d2fe19d"}