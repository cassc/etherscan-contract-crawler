{"SourceCode": "//SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.2;\r\n\r\ncontract ERC20 {\r\n    mapping(address => uint256) internal _balances;\r\n    mapping(address => mapping(address => uint256)) internal _allowed;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    uint256 internal _totalSupply;\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) public returns (bool) {\r\n        require(_allowed[from][msg.sender] >= value);\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender] - (value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal virtual {\r\n        require(to != address(0));\r\n        _balances[from] = _balances[from] - (value);\r\n        _balances[to] = _balances[to] + (value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n}\r\n\r\ncontract ERC20Mintable is ERC20 {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\r\n    function _mint(address to, uint256 amount) internal {\r\n        _balances[to] = _balances[to] + (amount);\r\n        _totalSupply = _totalSupply + (amount);\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    function _burn(address from, uint256 amount) internal {\r\n        _balances[from] = _balances[from] - (amount);\r\n        _totalSupply = _totalSupply - (amount);\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n}\r\n\r\n\r\ncontract AGT is ERC20 {\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint256 _set_totalSupply,\r\n        address _defowner\r\n    ) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = 18;\r\n        egt = ERC20(0x83a407A2Bc53C80bDeF0B74c8e2989844b940694);\r\n        usdt = ERC20(0x55d398326f99059fF775485246999027B3197955);\r\n        _totalSupply = _set_totalSupply;\r\n        _balances[_defowner] = _totalSupply;\r\n    }\r\n\r\n    string public name;\r\n    string public symbol;\r\n\r\n    uint8 public decimals;\r\n    uint256 public dividend;\r\n    uint256 public dividend_usdt;\r\n\r\n    ERC20 egt;\r\n    ERC20 usdt;\r\n    address public mining_address =\r\n    address(0x4E14703261EC38939Ba0bba8872CE010bc7c2f7c);\r\n    address public bank_address =\r\n    address(0x83a407A2Bc53C80bDeF0B74c8e2989844b940694);\r\n    address egt_withdraw = address(msg.sender);\r\n    address usdt_withdraw = address(msg.sender);\r\n\r\n    mapping(address => uint256) public mask;\r\n    mapping(address => uint256) public mask_usdt;\r\n\r\n    function distribute(uint256 amount) external {\r\n        require(\r\n            msg.sender == mining_address ||\r\n            msg.sender == bank_address ||\r\n            msg.sender == egt_withdraw\r\n        );\r\n        dividend = dividend + ((amount * (1e18)) / (_totalSupply));\r\n    }\r\n\r\n    function update(address holder) public {\r\n        uint256 diff = dividend - (mask[holder]);\r\n        mask[holder] = dividend;\r\n        if (diff > 0) egt.transfer(holder, (diff * _balances[holder]) / (1e18));\r\n    }\r\n\r\n    function distribute_usdt(uint256 amount) external {\r\n        require(\r\n            msg.sender == mining_address ||\r\n            msg.sender == bank_address ||\r\n            msg.sender == egt_withdraw\r\n        );\r\n        dividend_usdt = dividend_usdt + ((amount * (1e18)) / (_totalSupply));\r\n    }\r\n\r\n    function update_usdt(address holder) public {\r\n        uint256 diff = dividend_usdt - (mask_usdt[holder]);\r\n        mask_usdt[holder] = dividend_usdt;\r\n        if (diff > 0)\r\n            usdt.transfer(holder, (diff * _balances[holder]) / (1e18));\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal override {\r\n        require(to != address(0));\r\n        update(from);\r\n        update_usdt(from);\r\n        update(to);\r\n        update_usdt(to);\r\n        _balances[from] = _balances[from] - (value);\r\n        _balances[to] = _balances[to] + (value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n}\r\n\r\ncontract EGT is ERC20Mintable {\r\n    ERC20 public constant bsc_eth =\r\n    ERC20(0x2170Ed0880ac9A755fd29B2688956BD959F933F8);\r\n    AGT public constant agt = AGT(0x986BF6Fc67A1FCB3fD20f2a590598A076aD5ACd9);\r\n    address public constant defaultRef =\r\n    0x8230dBd7b8a7Ad774ddbA2eFb0bFE2CaB0d4f8F2;\r\n\r\n\r\n    uint256[7] refferer_percent = [3, 2, 1, 1, 1, 1, 1];\r\n\r\n    mapping(address => address) public ref;\r\n    mapping(address => bool) public isMember;\r\n\r\n    event Register(address indexed client, address indexed referrer);\r\n\r\n    constructor() {\r\n        symbol = \"EGT\";\r\n        name = \"ETH Gearing Token\";\r\n        decimals = 18;\r\n        isMember[defaultRef] = true;\r\n    }\r\n\r\n\r\n    function register(address _referrer) public {\r\n        require(!isMember[msg.sender]);\r\n        if (!isMember[_referrer]) _referrer = defaultRef;\r\n\r\n        ref[msg.sender] = _referrer;\r\n        isMember[msg.sender] = true;\r\n\r\n        emit Register(msg.sender, _referrer);\r\n    }\r\n\r\n   \r\n    function buy(uint256 amount) public {\r\n        require(isMember[msg.sender]);\r\n\r\n   \r\n        bsc_eth.transferFrom(msg.sender, address(this), amount);\r\n        \r\n        _mint(msg.sender, amount * 1000);\r\n        \r\n        _mint(address(agt), amount * 100);\r\n        \r\n        agt.distribute(amount * 100);\r\n\r\n        address referrer = ref[msg.sender];\r\n        \r\n        for (uint256 i = 0; i < refferer_percent.length; i++) {\r\n           \r\n            if (\r\n                referrer ==\r\n                address(0x0000000000000000000000000000000000000000) ||\r\n                referrer == defaultRef\r\n            ) {\r\n                referrer = defaultRef;\r\n            }\r\n           \r\n            _mint(referrer, (amount * 10 * refferer_percent[i]));\r\n         \r\n            referrer = ref[referrer];\r\n        }\r\n    }\r\n\r\n    \r\n    function sell(uint256 amount) public {\r\n        require(balanceOf(msg.sender) >= amount);\r\n        _burn(msg.sender, amount);\r\n        uint256 send_bsc_eth_amount = amount / 1200;\r\n        bsc_eth.transfer(msg.sender, send_bsc_eth_amount);\r\n    }\r\n}\r\n\r\n\r\ncontract EGT_MINING {\r\n    struct Order {\r\n    \r\n        uint256 amount;\r\n        \r\n        uint256 rate_amount;\r\n        \r\n        uint256 start_egt;\r\n       \r\n        uint256 start_usdt;\r\n      \r\n        uint256 last_egt;\r\n       \r\n        uint256 last_usdt;\r\n       \r\n        uint256 egt_amount;\r\n        \r\n        uint256 usdt_amount;\r\n       \r\n        uint256 egt_reffer_amount;\r\n        \r\n        uint256 usdt_reffer_amount;\r\n        \r\n        uint256 egt_agt_amount;\r\n     \r\n        uint256 usdt_agt_amount;\r\n    }\r\n\r\n    struct TakeOrder {\r\n       \r\n        address member;\r\n      \r\n        uint256 amount;\r\n       \r\n        uint256 create_time;\r\n    }\r\n\r\n    ERC20 public constant egt =\r\n    ERC20(0x83a407A2Bc53C80bDeF0B74c8e2989844b940694);\r\n    ERC20 public constant usdt =\r\n    ERC20(0x55d398326f99059fF775485246999027B3197955);\r\n    AGT public constant agt1 = AGT(0x986BF6Fc67A1FCB3fD20f2a590598A076aD5ACd9);\r\n    AGT public constant agt3 = AGT(0x26a9574fa1d0479F5Ed44AEDDbb8058b4AFb13E5);\r\n\r\n   \r\n    uint256 public usdt_start = 303;\r\n\r\n    uint256[7] to_refferer_percent = [3, 2, 1, 1, 1, 1, 1];\r\n\r\n    mapping(address => uint256) public count;\r\n  \r\n    mapping(address => mapping(uint256 => Order)) public Orders;\r\n   \r\n    mapping(address => bool) public isMember;\r\n   \r\n    mapping(address => address) public ref;\r\n    \r\n    mapping(address => uint256) public ref_amount;\r\n  \r\n    mapping(address => uint256) public ref_egt_amount;\r\n\r\n   \r\n    mapping(address => uint256) public ref_take_total_egt;\r\n  \r\n    mapping(address => uint256) public ref_take_orders_egt;\r\n    \r\n    mapping(address => uint256) public ref_take_total_usdt;\r\n  \r\n    mapping(address => uint256) public ref_take_orders_usdt;\r\n   \r\n    mapping(address => mapping(uint256 => TakeOrder)) public take_orders_egt;\r\n    \r\n    mapping(address => mapping(uint256 => TakeOrder)) public take_orders_usdt;\r\n\r\n    address public admin = address(msg.sender);\r\n    address public defaultRef = 0x8230dBd7b8a7Ad774ddbA2eFb0bFE2CaB0d4f8F2;\r\n\r\n    event Register(address indexed client, address indexed referrer);\r\n\r\n\r\n    function time_base() public view returns (uint256 _now) {\r\n        return block.timestamp / 1 days;\r\n    }\r\n\r\n   \r\n    function register(address _referrer) public {\r\n        require(!isMember[msg.sender]);\r\n        if (!isMember[_referrer]) _referrer = defaultRef;\r\n\r\n        \r\n        ref[msg.sender] = _referrer;\r\n        \r\n        ref_amount[_referrer] += 1;\r\n        isMember[msg.sender] = true;\r\n\r\n        emit Register(msg.sender, _referrer);\r\n    }\r\n\r\n\r\n    function count_rate(uint256 _amount, uint256 _eth_price)\r\n    private\r\n    pure\r\n    returns (uint256 rate)\r\n    {\r\n        rate = (_eth_price * _amount) / 1200;\r\n    }\r\n\r\n \r\n    function check_invest_rule(uint256 _amount, uint256 _eth_price)\r\n    internal\r\n    view\r\n    {\r\n        \r\n        require(_amount >= 100e18);\r\n      \r\n        require(_amount <= 32000e18);\r\n      \r\n        require(count_rate(_amount, _eth_price) > 0);\r\n      \r\n        require(isMember[msg.sender]);\r\n    }\r\n\r\n   \r\n    function invest(uint256 _amount, uint256 _eth_price) public {\r\n        check_invest_rule(_amount, _eth_price);\r\n       \r\n        count[msg.sender] += 1;\r\n       \r\n        ref_egt_amount[ref[msg.sender]] += _amount;\r\n        Order storage order = Orders[msg.sender][count[msg.sender]];\r\n     \r\n        order.amount = _amount;\r\n        order.rate_amount = count_rate(_amount, _eth_price);\r\n       \r\n        order.egt_amount = (_amount * 3939) / 10000;\r\n      \r\n        order.egt_reffer_amount = (_amount * 303) / 4000;\r\n        \r\n        order.egt_agt_amount = (_amount * 303) / 10000;\r\n\r\n        \r\n        order.usdt_amount = (order.rate_amount * 35061) / 10000;\r\n       \r\n        order.usdt_reffer_amount = (order.rate_amount * 2697) / 4000;\r\n       \r\n        order.usdt_agt_amount = (order.rate_amount * 2697) / 10000;\r\n\r\n        order.start_egt = time_base() + 1;\r\n        order.last_egt = time_base() + 1;\r\n      \r\n        order.start_usdt = time_base() + 1 + usdt_start;\r\n        order.last_usdt = time_base() + 1 + usdt_start;\r\n\r\n       \r\n        require(\r\n            egt.transferFrom(msg.sender, address(this), order.amount),\r\n            \"transfer to contract error\"\r\n        );\r\n        require(\r\n            egt.transferFrom(msg.sender, address(agt1), order.amount / 100),\r\n            \"transfer to AGT1 error\"\r\n        );\r\n        \r\n        agt1.distribute(order.amount / 100);\r\n       \r\n        require(\r\n            egt.transfer(address(agt3), order.amount / 2),\r\n            \"transfer to AGT3 error\"\r\n        );\r\n        \r\n        agt3.distribute(order.amount / 2);\r\n    }\r\n\r\n    \r\n    function find_refferer()\r\n    internal\r\n    view\r\n    returns (address[7] memory _find_refferer)\r\n    {\r\n       \r\n        address refferer = ref[msg.sender];\r\n\r\n       \r\n        if (ref_egt_amount[refferer] >= 500e18) {\r\n            _find_refferer[0] = refferer;\r\n        }\r\n        \r\n        refferer = ref[refferer];\r\n\r\n     \r\n        if (ref_egt_amount[refferer] >= 1000e18) {\r\n            _find_refferer[1] = refferer;\r\n        }\r\n       \r\n        refferer = ref[refferer];\r\n\r\n        \r\n        if (ref_egt_amount[refferer] >= 2000e18) {\r\n            _find_refferer[2] = refferer;\r\n        }\r\n     \r\n        refferer = ref[refferer];\r\n\r\n        \r\n        if (ref_egt_amount[refferer] >= 4000e18) {\r\n            _find_refferer[3] = refferer;\r\n        }\r\n        \r\n        refferer = ref[refferer];\r\n\r\n       \r\n        if (ref_egt_amount[refferer] >= 8000e18) {\r\n            _find_refferer[4] = refferer;\r\n        }\r\n        \r\n        refferer = ref[refferer];\r\n\r\n       \r\n        if (ref_egt_amount[refferer] >= 16000e18) {\r\n            _find_refferer[5] = refferer;\r\n        }\r\n        \r\n        refferer = ref[refferer];\r\n\r\n       \r\n        if (ref_egt_amount[refferer] >= 32000e18) {\r\n            _find_refferer[6] = refferer;\r\n        }\r\n    }\r\n\r\n    \r\n    function refferer_take_record(\r\n        uint256 _token_type,\r\n        address _member,\r\n        address _reffer,\r\n        uint256 _amount\r\n    ) internal {\r\n        if (_token_type == 1) {\r\n            ref_take_orders_egt[_reffer] += 1;\r\n            ref_take_total_egt[_reffer] += _amount;\r\n            TakeOrder storage order = take_orders_egt[_reffer][\r\n                            ref_take_orders_egt[_reffer]\r\n                ];\r\n            order.member = _member;\r\n            order.amount = _amount;\r\n            order.create_time = time_base();\r\n        }\r\n        if (_token_type == 2) {\r\n            ref_take_orders_usdt[_reffer] += 1;\r\n            ref_take_total_usdt[_reffer] += _amount;\r\n            TakeOrder storage order = take_orders_usdt[_reffer][\r\n                            ref_take_orders_usdt[_reffer]\r\n                ];\r\n            order.member = _member;\r\n            order.amount = _amount;\r\n            order.create_time = time_base();\r\n        }\r\n    }\r\n\r\n   \r\n    function check_amount(uint256 _token_type, uint256 _index)\r\n    public\r\n    view\r\n    returns (\r\n        uint256 to_user,\r\n        uint256 to_agt,\r\n        uint256[7] memory to_refferer,\r\n        address[7] memory user_refferer\r\n    )\r\n    {\r\n        Order storage order = Orders[msg.sender][_index];\r\n        user_refferer = find_refferer();\r\n        uint256 today = time_base();\r\n        uint256 token_amount;\r\n        uint256 last_day;\r\n        if (_token_type == 1) {\r\n            token_amount = order.amount;\r\n            last_day = order.last_egt;\r\n        } else if (_token_type == 2) {\r\n            token_amount = order.rate_amount;\r\n            last_day = order.last_usdt;\r\n        }\r\n        \r\n        to_user = ((token_amount * 13) / 10000) * (today - (last_day));\r\n        \r\n        to_agt = (token_amount / 10000) * (today - (last_day));\r\n        \r\n        for (uint256 i = 0; i < to_refferer.length; i++) {\r\n            to_refferer[i] =\r\n                (((token_amount / 4000) * to_refferer_percent[i]) / 10) *\r\n                (today - (last_day));\r\n        }\r\n    }\r\n\r\n\r\n    function claim_to_agt(\r\n        uint256 _token_type,\r\n        uint256 user_amount,\r\n        uint256 to_agt\r\n    ) internal returns (uint256 fee) {\r\n        fee = user_amount / 100;\r\n        if (_token_type == 1) {\r\n          \r\n            require(egt.transfer(address(agt1), to_agt));\r\n            \r\n            require(egt.transfer(address(agt1), fee));\r\n          \r\n            agt1.distribute(to_agt + fee);\r\n        } else if (_token_type == 2) {\r\n            \r\n            require(usdt.transfer(address(agt1), to_agt));\r\n           \r\n            require(usdt.transfer(address(agt1), fee));\r\n           \r\n            agt1.distribute_usdt(to_agt + fee);\r\n        }\r\n    }\r\n\r\n  \r\n    function claim_egt(uint256 index) public {\r\n        Order storage order = Orders[msg.sender][index];\r\n        uint256 today = time_base();\r\n       \r\n        (\r\n            uint256 to_user,\r\n            uint256 to_agt,\r\n            uint256[7] memory to_refferer,\r\n            address[7] memory user_refferrer\r\n        ) = check_amount(1, index);\r\n     \r\n        order.last_egt = today;\r\n       \r\n        require(order.egt_amount != 0 && today >= order.start_egt);\r\n\r\n        \r\n        if (to_user != 0 && to_user <= order.egt_amount) {\r\n            \r\n            uint256 fee = claim_to_agt(1, to_user, to_agt);\r\n            \r\n            require(egt.transfer(msg.sender, to_user - fee));\r\n           \r\n            order.egt_amount = order.egt_amount - to_user;\r\n           \r\n            order.egt_agt_amount = order.egt_agt_amount - to_agt;\r\n           \r\n            for (uint256 i = 0; i < user_refferrer.length; i++) {\r\n                if (\r\n                    user_refferrer[i] ==\r\n                    address(0x0000000000000000000000000000000000000000)\r\n                ) {\r\n                    user_refferrer[i] = defaultRef;\r\n                }\r\n                \r\n                require(egt.transfer(user_refferrer[i], to_refferer[i]));\r\n                \r\n                refferer_take_record(\r\n                    1,\r\n                    msg.sender,\r\n                    user_refferrer[i],\r\n                    to_refferer[i]\r\n                );\r\n                order.egt_reffer_amount =\r\n                    order.egt_reffer_amount -\r\n                    to_refferer[i];\r\n            }\r\n\r\n            \r\n        } else if (to_user > order.egt_amount && order.egt_amount != 0) {\r\n           \r\n            uint256 fee = claim_to_agt(\r\n                1,\r\n                order.egt_amount,\r\n                order.egt_agt_amount\r\n            );\r\n           \r\n            require(egt.transfer(msg.sender, order.egt_amount - fee));\r\n          \r\n            for (uint256 i = 0; i < user_refferrer.length; i++) {\r\n                if (\r\n                    user_refferrer[i] ==\r\n                    address(0x0000000000000000000000000000000000000000)\r\n                ) {\r\n                    user_refferrer[i] = defaultRef;\r\n                }\r\n                \r\n                uint256 to_refferer_count = (order.egt_reffer_amount *\r\n                    to_refferer_percent[i]) / 10;\r\n               \r\n                require(egt.transfer(user_refferrer[i], to_refferer_count));\r\n               \r\n                refferer_take_record(\r\n                    1,\r\n                    msg.sender,\r\n                    user_refferrer[i],\r\n                    to_refferer_count\r\n                );\r\n            }\r\n\r\n          \r\n            order.egt_amount = 0;\r\n            order.egt_agt_amount = 0;\r\n            order.egt_reffer_amount = 0;\r\n            \r\n        } else {\r\n            revert(\"reward points balance is zero\");\r\n        }\r\n    }\r\n\r\n   \r\n    function claim_usdt(uint256 index) public {\r\n        Order storage order = Orders[msg.sender][index];\r\n        uint256 today = time_base();\r\n        \r\n        (\r\n            uint256 to_user,\r\n            uint256 to_agt,\r\n            uint256[7] memory to_refferer,\r\n            address[7] memory user_refferrer\r\n        ) = check_amount(2, index);\r\n        \r\n        order.last_usdt = today;\r\n       \r\n        require(order.usdt_amount != 0 && today >= order.start_usdt);\r\n\r\n        \r\n        if (to_user != 0 && to_user <= order.usdt_amount) {\r\n           \r\n            uint256 fee = claim_to_agt(2, to_user, to_agt);\r\n            \r\n            require(usdt.transfer(msg.sender, to_user - fee));\r\n            \r\n            order.usdt_amount = order.usdt_amount - to_user;\r\n            \r\n            order.usdt_agt_amount = order.usdt_agt_amount - to_agt;\r\n           \r\n            for (uint256 i = 0; i < user_refferrer.length; i++) {\r\n                if (\r\n                    user_refferrer[i] ==\r\n                    address(0x0000000000000000000000000000000000000000)\r\n                ) {\r\n                    user_refferrer[i] = defaultRef;\r\n                }\r\n                \r\n                require(usdt.transfer(user_refferrer[i], to_refferer[i]));\r\n               \r\n                refferer_take_record(\r\n                    2,\r\n                    msg.sender,\r\n                    user_refferrer[i],\r\n                    to_refferer[i]\r\n                );\r\n                order.usdt_reffer_amount =\r\n                    order.usdt_reffer_amount -\r\n                    to_refferer[i];\r\n            }\r\n\r\n            \r\n        } else if (to_user > order.usdt_amount && order.usdt_amount != 0) {\r\n            \r\n            uint256 fee = claim_to_agt(\r\n                2,\r\n                order.usdt_amount,\r\n                order.usdt_agt_amount\r\n            );\r\n           \r\n            require(usdt.transfer(msg.sender, order.usdt_amount - fee));\r\n           \r\n            for (uint256 i = 0; i < user_refferrer.length; i++) {\r\n                if (\r\n                    user_refferrer[i] ==\r\n                    address(0x0000000000000000000000000000000000000000)\r\n                ) {\r\n                    user_refferrer[i] = defaultRef;\r\n                }\r\n                \r\n                uint256 to_refferer_count = (order.usdt_reffer_amount *\r\n                    to_refferer_percent[i]) / 10;\r\n                require(usdt.transfer(user_refferrer[i], to_refferer_count));\r\n                \r\n                refferer_take_record(\r\n                    2,\r\n                    msg.sender,\r\n                    user_refferrer[i],\r\n                    to_refferer_count\r\n                );\r\n            }\r\n\r\n           \r\n            order.usdt_amount = 0;\r\n            order.usdt_reffer_amount = 0;\r\n            order.usdt_agt_amount = 0;\r\n            \r\n        } else {\r\n            revert(\"reward points balance is zero\");\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"agt\",\"outputs\":[{\"internalType\":\"contract AGT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bsc_eth\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultRef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ref\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EGT", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://907aebb85e9efe0f3ed62f2a7bd3c1538493b47631d9e8b26c142442474dfd18"}