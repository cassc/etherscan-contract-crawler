{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\ncontract Initializable {\r\n\r\n    bool private initialized;\r\n\r\n    bool private initializing;\r\n\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  function isConstructor() private view returns (bool) {\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  uint256[50] private ______gap;\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender,uint256 value);\r\n}\r\n\r\n\r\ninterface UsersAgesInterface {\r\n        function investors(uint256) external view returns(address);\r\n        function users(address _address) external view returns (uint256 referrer,uint256 rewardwithdrawn,uint256 withdrawn,\r\n        uint256 payoutCount,uint256 divident,uint256 depositCount);\r\n        function getUserDepositInfo(address _address,uint256 _index) external view returns (uint8 plan,uint256 percent,uint256 amount,\r\n        uint8 d_type,uint256 start,uint8 withdraw_status,uint256 with_amount);\r\n        function payouts(address _address,uint256 _index) external view returns (uint256 amount, uint8 with_type ,uint256 withdrawTime ,uint8 plan);\r\n        function userrollcounts(address _address) external view returns (uint256 usdtcount);\r\n        function rollindexusdts(address _address,uint256 index) external view returns (uint8 plan,uint256 amount,uint256 checkpoint,uint8 d_type);\r\n\r\n       }\r\n         \r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n        IERC20 token;\r\n        IERC20 nevis_token;\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 internal _limitSupply;\r\n\r\n    string internal _name;\r\n    string internal _symbol;\r\n    uint8  internal _decimals;\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public override view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override virtual returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public override view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context,Initializable {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function owninitialize(address sender)  public initializer {\r\n        address msgSender = sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n        \r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n  \r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n   \r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract NEVISSTAKINGUSDT  is ERC20,Ownable  {\r\n\r\n    using SafeMath for uint256;\r\n\tIUniswapV2Router02 public NevisSwapRouter;\r\n\r\n    uint256 constant public INVEST_MIN_AMOUNT_USDT = 1e18; // 1 USDT \r\n    uint256 constant public INVEST_MIN_AMOUNT_BNB = 10000000000000000; // 0.01 BNB \r\n\tuint256 constant public PLANPER_DIVIDER = 100;\r\n    uint256 constant public HEADCP_DIVIDER = 10000000;\r\n    uint256 public totalInvested;\r\n    uint256 public swapextpercentage;\r\n    address public headaddress;\r\n    uint256 public hcppercentage;\r\n    address  public factory;\r\n    address [] public investors;\r\n    address public router;\r\n    address public NEVIS_TOKEN;\r\n    address public USDT;\r\n    address public UsersAgesContractAddress;\r\n    \r\n    struct Plan {\r\n        uint256 time;\r\n        uint256 percent;\r\n        uint256 overallStaked;\r\n    }\r\n\tstruct Deposit {\r\n        uint8 plan;\r\n\t\tuint256 amount;\r\n        uint256 with_amount;\r\n\t\tuint256 start;\r\n        uint8  d_type;\r\n        uint8 withdraw_status;\r\n        uint256 checkpoint;\r\n\t}\r\n    struct Depositcpusdt {\r\n        uint256 total_deposite;\r\n\t\tuint256 total_withdrawn;\r\n        uint256 referrer;\r\n        address user_address;\r\n\t}\r\n   \r\n\tstruct User {\r\n\t\tDeposit[] deposits;\r\n        uint256 cp_refe;\r\n        address refferal;\r\n        uint256 rewardwithdrawn;\r\n        uint256 withdrawn;\r\n        uint256 payoutCount;\r\n        uint256 divident;\r\n        uint256 depositCount;   \r\n\t}\r\n    \r\n    struct Cp {\r\n        uint256 total_usdt;\r\n        uint256 usdtdepositCount;  \r\n        uint256 usdtpayoutCount; \r\n        Cpuseraddress[] cpuseraddress;\r\n\t}\r\n     struct Withdraw{\r\n        uint256 amount;\r\n        uint8 with_type;\r\n        uint256 withdrawTime;\r\n        uint8 plan;\r\n    }\r\n    struct Withdrawcpusdt{\r\n        uint256 amount;\r\n        uint256 withdrawTime;\r\n        uint8 plan;\r\n    }\r\n    struct Cpuseraddress {\r\n\t\taddress addr;\r\n\t}\r\n\r\n     struct userrollcount{\r\n        uint256 usdtcount;\r\n    }\r\n\r\n    struct rollindexusdt {\r\n        uint8 plan;\r\n\t\tuint256 amount;\r\n\t\tuint256 checkpoint;\r\n        uint8  d_type;\r\n    }\r\n    \r\n    mapping(uint256 => Plan) public plans;\r\n    mapping (address => User) public users;\r\n    mapping (uint256 => Cp) public cps;\r\n    mapping (address => Depositcpusdt) public Depositcpusdts;\r\n    mapping (address => Withdraw[]) public payouts;\r\n    mapping (uint256 => Withdrawcpusdt[]) public cppayoutsusdt;\r\n    mapping (address => rollindexusdt[]) public rollindexusdts;\r\n    mapping (address => userrollcount) public userrollcounts;\r\n \r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 busdrecived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    event Newbie(address user);\r\n\tevent NewDeposit(address indexed user, uint8 plan, uint256 amount);\r\n\tevent Withdrawn(address indexed user, uint256 amount);\r\n    event SwapTokensForETH(\r\n        uint256 amountIn,\r\n        address[] path\r\n    );\r\n    receive() payable external {}\r\n    UsersAgesInterface public agesContract;\r\n    function initialize(address UsersAgesContractAddress, address payable wallet,address Router,address Nevis_token,address Usdt)  public initializer {\r\n        Ownable.owninitialize(wallet);\r\n        router=Router;\r\n        NEVIS_TOKEN = Nevis_token;\r\n        USDT = Usdt;\r\n        token = IERC20(USDT);\r\n        nevis_token = IERC20(NEVIS_TOKEN);\r\n        plans[0].percent = 3;\r\n        plans[0].time = 3 ;\r\n      \r\n        plans[1].percent = 4;\r\n        plans[1].time = 6 ;\r\n      \r\n        plans[2].percent = 5;\r\n        plans[2].time = 12 ;\r\n\r\n        plans[3].percent = 3;\r\n        plans[3].time = 3 ;\r\n      \r\n        plans[4].percent = 4;\r\n        plans[4].time = 6 ;\r\n      \r\n        plans[5].percent = 5;\r\n        plans[5].time = 12 ;\r\n        \r\n        IUniswapV2Router02 _NevisSwapRouter = IUniswapV2Router02(router); \r\n\t\tNevisSwapRouter = _NevisSwapRouter;\r\n\r\n        UsersAgesInterface _agesContracts = UsersAgesInterface(UsersAgesContractAddress);\r\n        agesContract = _agesContracts;\r\n   \r\n    }\r\n\r\n   \r\n    function get_user(address _address) public onlyOwner{\r\n               \r\n        (uint256 referrer,uint256 rewardwithdrawn,uint256 withdrawn,\r\n        uint256 payoutCount,uint256 divident,uint256 depositCount) = agesContract.users(_address);\r\n               \r\n               \r\n                User storage user = users[_address];\r\n                user.cp_refe=referrer;\r\n                user.rewardwithdrawn=rewardwithdrawn;\r\n                user.withdrawn=withdrawn;\r\n                user.divident=divident;\r\n                investors.push(_address);    \r\n                (uint256 countrollusdt) = agesContract.userrollcounts(_address);\r\n                userrollcount storage u_roll = userrollcounts[_address];\r\n                u_roll.usdtcount=countrollusdt;\r\n                \r\n                for (uint256 index = 0; index < countrollusdt; index++) {       \r\n                    add_rolldata(_address,index);\r\n                }\r\n\r\n                for (uint256 index = 0; index < depositCount; index++) {       \r\n                    add_depositdata(referrer,_address,index);\r\n                }\r\n\r\n                for (uint256 index = 0; index < payoutCount; index++) {       \r\n                    add_payoutdata(_address,index);\r\n                }\r\n\r\n    }\r\n\r\n    function add_rolldata(address _address,uint256 index) private {\r\n        (uint8 plan,uint256 amount,uint256 checkpoint,uint8 d_type) = agesContract.rollindexusdts(_address,index);\r\n\r\n                rollindexusdts[_address].push(rollindexusdt(plan, amount, checkpoint,d_type));     \r\n                 \r\n    }\r\n\r\n    function add_payoutdata(address _address,uint256 index) private {\r\n        (uint256 amount, uint8 with_type ,uint256 withdrawTime ,uint8 plan) = agesContract.payouts(_address,index);\r\n            User storage user = users[_address];\r\n                if(with_type==1){\r\n                    user.payoutCount++;\r\n                        payouts[_address].push(Withdraw(\r\n                            amount,\r\n                            with_type,\r\n                            withdrawTime,\r\n                            plan\r\n                        ));\r\n                    }            \r\n    }\r\n\r\n    function add_depositdata(uint256 ref,address _address,uint256 index) private {\r\n        (uint8 plan,uint256 percent,uint256 amount,uint8 d_type,uint256 start,\r\n             uint8 withdraw_status,uint256 with_amount) = agesContract.getUserDepositInfo(_address,index);\r\n\r\n                User storage user = users[_address];\r\n                 Cp storage Cps = cps[ref];\r\n                if(d_type==1){ \r\n                Plan storage Plans = plans[plan];\r\n                user.deposits.push(Deposit(plan, amount,with_amount, start,d_type,withdraw_status, start));\r\n                Depositcpusdt storage depositcpusdt = Depositcpusdts[_address];\r\n                            \r\n                                    if(depositcpusdt.total_deposite==0){\r\n                                            depositcpusdt.total_deposite+=amount;\r\n                                            depositcpusdt.referrer=ref;\r\n                                            depositcpusdt.user_address=_address;\r\n                                            Cps.cpuseraddress.push(Cpuseraddress(_address));\r\n                                            Cps.usdtdepositCount++;\r\n                                    }else{\r\n                                        depositcpusdt.total_deposite+=amount;\r\n                                    }\r\n                             Cps.total_usdt=Cps.total_usdt.add(amount);\r\n\r\n                        user.depositCount++;\r\n                        Plans.overallStaked = Plans.overallStaked.add(amount);\r\n                        totalInvested = totalInvested.add(amount);\r\n                    }            \r\n    }\r\n\r\n    function investusdt(uint256 referrer, uint8 plan ,uint256 _amount) external payable {\r\n\t\r\n        require(_amount >= INVEST_MIN_AMOUNT_USDT);\r\n        require(plan < 3, \"Invalid plan\");\r\n        Plan storage Plans = plans[plan];\r\n\r\n\t    _approve(address(msg.sender),address(this), _amount);\r\n\r\n        bool status=token.transferFrom(address(msg.sender),address(this), _amount);\r\n        if(status){\r\n\t\t\r\n        User storage user = users[msg.sender];\r\n        Depositcpusdt storage depositcpusdt = Depositcpusdts[msg.sender];\r\n      \r\n        if(user.depositCount!=0)\r\n        {\r\n           referrer=user.cp_refe;\r\n        }\r\n        if(user.deposits.length == 0){\r\n            investors.push(msg.sender);\r\n            user.cp_refe=referrer;\r\n\t\t\temit Newbie(msg.sender);\r\n        }\r\n        Cp storage Cps = cps[referrer];\r\n       \r\n        //swapAndLiquifyall(_amount,1);\r\n        \r\n        user.deposits.push(Deposit(plan, _amount,0, block.timestamp,1,0, block.timestamp));\r\n        \r\n            if(depositcpusdt.total_deposite==0){\r\n                    depositcpusdt.total_deposite+=_amount;\r\n                    depositcpusdt.referrer=referrer;\r\n                    depositcpusdt.user_address=msg.sender;\r\n                    Cps.cpuseraddress.push(Cpuseraddress(msg.sender));\r\n                    Cps.usdtdepositCount++;\r\n            }else{\r\n                depositcpusdt.total_deposite+=_amount;\r\n            }\r\n            Cps.total_usdt=Cps.total_usdt.add(_amount);\r\n        \r\n        user.depositCount++; \r\n        \r\n        Plans.overallStaked = Plans.overallStaked.add(_amount);\r\n\t\ttotalInvested = totalInvested.add(_amount);\r\n\t\r\n\t\temit NewDeposit(msg.sender, plan, _amount);\r\n        }\r\n        \r\n\t}\r\n\r\n    function swapAndLiquifyall(uint256 contractTokenBalance,uint8 d_type) private  {\r\n        uint256 half = contractTokenBalance.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n        uint256 initialBalance = nevis_token.balanceOf(address(this));\r\n        uint256 newBalance;\r\n            if(d_type==1){\r\n                buy_tokenusdt(half); \r\n                newBalance = nevis_token.balanceOf(address(this)).sub(initialBalance);\r\n                addLiquidityusdt(otherHalf, newBalance);\r\n            }\r\n            \r\n        \r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function addLiquidityusdt(uint256 usdtAmount,uint256 tokenAmount) private {\r\n        IERC20(token).approve(address(NevisSwapRouter),usdtAmount);\r\n        IERC20(nevis_token).approve(address(NevisSwapRouter),tokenAmount);\r\n\r\n         NevisSwapRouter.addLiquidity(\r\n                     USDT,\r\n                     NEVIS_TOKEN,\r\n                     usdtAmount,\r\n                     tokenAmount,\r\n                     0,\r\n                     0,\r\n                    address(this),\r\n                    block.timestamp\r\n            );\r\n    }\r\n\r\n    function buy_tokenusdt(uint256 tokenAmount) private{\r\n      \r\n        address[] memory path = new address[](2);\r\n\t\tpath[0] = USDT;\r\n\t\tpath[1] = NEVIS_TOKEN;\r\n\t\tIERC20(token).approve(address(NevisSwapRouter),tokenAmount);\r\n\r\n            NevisSwapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                    tokenAmount,\r\n                    0, \r\n                    path,\r\n                    address(this),\r\n                    block.timestamp + 1000\r\n                );\r\n        \r\n        emit SwapTokensForETH(tokenAmount, path);   \r\n    }\r\n\r\n   \r\n    function finalwithdrawusdt(uint8 index) public {\r\n\t\tUser storage user = users[msg.sender];\r\n        \r\n        uint256 amount = user.deposits[index].amount;\r\n        uint256 finish = user.deposits[index].start.add(plans[user.deposits[index].plan].time.mul(30 days));\r\n        require(block.timestamp > finish ,\"Principal is Locked\");\r\n        require(user.deposits[index].withdraw_status == 0, \"Principal withdrawn\");\r\n        swaptoken(amount);\r\n        user.withdrawn = user.withdrawn.add(amount);\r\n        user.payoutCount++;\r\n        token.transfer(msg.sender,amount);\r\n        user.deposits[index].withdraw_status=1;\r\n\t\t\r\n        emit Withdrawn(msg.sender, amount);\r\n\t}\r\n\r\n\r\n     function getTokenPrice() public view returns(uint[] memory amounts)\r\n        {\r\n            address[] memory path = new address[](2);\r\n            path[0] = USDT;\r\n            path[1] = NEVIS_TOKEN ;\r\n            return NevisSwapRouter.getAmountsIn(1, path);\r\n        }\r\n\r\n    function swaptoken(uint256 _Amount) private {\r\n              uint256  pr=_Amount.mul(swapextpercentage).div(PLANPER_DIVIDER);\r\n           \r\n            (uint256[] memory _amount)=getTokenPrice();\r\n            uint256 famount=(_Amount.add(pr)).div(_amount[0]);\r\n           \r\n            IERC20(nevis_token).approve(address(NevisSwapRouter),famount);\r\n\r\n            address[] memory path = new address[](2);\r\n            path[0] = NEVIS_TOKEN;\r\n            path[1] = USDT;\r\n            token.approve(address(NevisSwapRouter),famount);\r\n\r\n                NevisSwapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                        famount,\r\n                        0, \r\n                        path,\r\n                        address(this),\r\n                        block.timestamp + 1000\r\n                ); \r\n                \r\n    }\r\n\r\n   \r\n\r\n    function getUserDividends(address userAddress,uint8 plan,uint256 index,uint8 d_type) public view returns (uint256) {\r\n\t\tUser storage user = users[userAddress];\r\n\t\tuint256 totalAmount;\r\n        if(user.deposits[index].d_type==d_type){\r\n           \r\n                uint256 finish = user.deposits[index].start.add(plans[plan].time.mul(30 days));\r\n                if (user.deposits[index].checkpoint < finish) {\r\n                    uint256 share = user.deposits[index].amount.mul(plans[plan].percent).div(PLANPER_DIVIDER);\r\n                    uint256 from = user.deposits[index].start > user.deposits[index].checkpoint ? user.deposits[index].start : user.deposits[index].checkpoint;\r\n                    uint256 to = finish < block.timestamp ? finish : block.timestamp;\r\n                    uint daysDiff = (to - from)/ 60 / 60/ 720 ;\r\n                    if (from < to) {\r\n                        totalAmount = totalAmount.add(share.mul(daysDiff));\r\n                    }\r\n                }\r\n        }\r\n         uint256 famount= totalAmount.sub(user.deposits[index].with_amount); \r\n\t\treturn famount;\r\n\t}\r\n\r\n    function getcpseedsusdtread(uint256 cpid,address _addr,uint256 percent) public view returns (uint256) {\r\n\t\tUser storage user = users[_addr];\r\n        uint256 totalAmount;\r\n        if(Depositcpusdts[_addr].referrer==cpid){\r\n            for (uint256 index = 0; index < user.depositCount; index++) {\r\n           \r\n                uint256 finish = user.deposits[index].start.add(plans[user.deposits[index].plan].time.mul(30 days));\r\n                if (user.deposits[index].checkpoint < finish) {\r\n                    uint256 share = getCppercentage(user.deposits[index].amount,percent);\r\n                    uint256 from = user.deposits[index].start > user.deposits[index].checkpoint ? user.deposits[index].start : user.deposits[index].checkpoint;\r\n                    uint256 to = finish < block.timestamp ? finish : block.timestamp;\r\n                    uint daysDiff = (to - from)/ 60 / 60/ 720 ;\r\n                    if (from < to) {\r\n                        totalAmount = totalAmount.add(share.mul(daysDiff));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        uint256 famount= totalAmount;\r\n        \r\n\t\treturn famount;\r\n\t}\r\n\r\n   \r\n\r\n     function getcpseedsusdt(uint256 cpid,address _addr,uint256 percent) public view returns (uint256) {\r\n\t\tUser storage user = users[_addr];\r\n        uint256 totalAmount;\r\n        if(Depositcpusdts[_addr].referrer==cpid){\r\n            for (uint256 index = 0; index < user.depositCount; index++) {\r\n           \r\n                uint256 finish = user.deposits[index].start.add(plans[user.deposits[index].plan].time.mul(30 days));\r\n                if (user.deposits[index].checkpoint < finish) {\r\n                    uint256 share = getCppercentage(user.deposits[index].amount,percent);\r\n                    uint256 from = user.deposits[index].start > user.deposits[index].checkpoint ? user.deposits[index].start : user.deposits[index].checkpoint;\r\n                    uint256 to = finish < block.timestamp ? finish : block.timestamp;\r\n                    uint daysDiff = (to - from)/ 60 / 60/ 720 ;\r\n                    if (from < to) {\r\n                        totalAmount = totalAmount.add(share.mul(daysDiff));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        uint256 famount= totalAmount.sub(Depositcpusdts[_addr].total_withdrawn);\r\n            \r\n\t\treturn famount;\r\n\t}\r\n\r\n\r\n    function gethCppercentage(uint256 amount) public view returns (uint) {\r\n\t    return (amount.mul(hcppercentage).div(HEADCP_DIVIDER))/12;\r\n\t}  \r\n\r\n    function getCppercentage(uint256 amount,uint256 percent) public view returns (uint) {\r\n\t    return (amount.mul(percent).div(HEADCP_DIVIDER))/12;\r\n\t} \r\n\t\r\n    function getUserAmountOfDeposits(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].deposits.length;\r\n\t}\r\n   \r\n   function getUserTotalDeposits(address userAddress) public view returns(uint256 amount) {\r\n\t\tfor (uint256 i = 0; i < users[userAddress].deposits.length; i++) {\r\n\t\t\tamount = amount.add(users[userAddress].deposits[i].amount);\r\n\t\t}\r\n\t}\r\n\r\n    function getUserTotalDepositsbyplan(address userAddress, uint8 plan) public view returns(uint256 amount) {\r\n\t\tfor (uint256 i = 0; i < users[userAddress].deposits.length; i++) {\r\n            if(users[userAddress].deposits[i].plan==plan){\r\n\t\t\tamount = amount.add(users[userAddress].deposits[i].amount);\r\n            }\r\n\t\t}\r\n\t}\r\n\r\n    function getUserDepositInfo(address userAddress, uint256 index) public view returns(uint8 plan, uint256 percent, uint256 amount,uint256 d_type, uint256 start,uint256 withdraw_status,uint256 with_amount, uint256 finish) {\r\n\t    User storage user = users[userAddress];\r\n\r\n\t\tplan = user.deposits[index].plan;\r\n\t\tpercent = plans[plan].percent;\r\n\t\tamount = user.deposits[index].amount;\r\n        d_type = user.deposits[index].d_type;\r\n\t\tstart = user.deposits[index].start;\r\n        withdraw_status = user.deposits[index].withdraw_status;\r\n        with_amount = user.deposits[index].with_amount;\r\n\t\tfinish = user.deposits[index].start.add(plans[user.deposits[index].plan].time.mul(30 days));\r\n\t}\r\n\r\n    function rewardsusdt(address userAddress, uint256 amount) public onlyOwner() {\r\n        token.transfer(userAddress,amount);\r\n\t}\r\n\r\n    function rewardsbnb(address userAddress, uint256 amount) public onlyOwner() {\r\n        payable(userAddress).transfer(amount);\r\n\t}\r\n\r\n    function getUserTotalWithdrawn(address userAddress) public view returns (uint256) {\r\n\t\treturn users[userAddress].withdrawn;\r\n\t}\r\n\r\n\tfunction getUserInfo(address userAddress) public view returns(uint256 totalDeposit, uint256 totalWithdrawn) {\r\n\t\treturn(getUserTotalDeposits(userAddress), getUserTotalWithdrawn(userAddress));\r\n\t}\r\n\r\n    function setRouteraddress(address router_address) public onlyOwner() {\r\n                router = router_address;     \r\n    }\r\n    function Swapextrapercentage(uint256 _swapextrapercentage) public onlyOwner() {\r\n                swapextpercentage = _swapextrapercentage;     \r\n    }\r\n\r\n    function sethCppercentage(uint256 _hcppercentage) public onlyOwner {\r\n\t             hcppercentage = _hcppercentage;\r\n\t}\r\n    function setheadaddress(address _headaddress) public onlyOwner {\r\n\t             headaddress = _headaddress;\r\n\t}\r\n    \r\n    function getinvestor() public view returns (uint256 investor){\r\n         return investor= investors.length; \r\n    }\r\n\r\n    function getcpaddress(uint256 cpid,uint256 index) public view returns (address addr_){\r\n        Cp storage cp = cps[cpid];\r\n\t\taddr_ = cp.cpuseraddress[index].addr;\r\n    }\r\n\r\n    function Liquidity(address _tokenA, address _tokenB,uint256 liquidity,address _walletaddress)  public onlyOwner() { \r\n        address pair = IUniswapV2Factory(factory).getPair(_tokenA, _tokenB);\r\n\r\n        IERC20(pair).approve(router, liquidity);\r\n\r\n        (uint amountA, uint amountB) = IUniswapV2Router02(router).removeLiquidity\r\n           (_tokenA,\r\n            _tokenB,\r\n            liquidity,\r\n            1,\r\n            1,\r\n            _walletaddress,\r\n            block.timestamp);\r\n        }\r\n\r\n    function rewardwithdrawusdt(uint8 plan,uint256 index) public {\r\n\t\tUser storage user = users[msg.sender];\r\n       \r\n\t\tuint256 totalAmount = getUserDividends(msg.sender,plan,index,1);\r\n\t\trequire(totalAmount > 0, \"No dividends\");\r\n        user.divident=user.divident.add(totalAmount);\t\r\n        swaptoken(totalAmount);\r\n        user.withdrawn += user.rewardwithdrawn.add(totalAmount);\r\n        user.payoutCount++;\r\n        payouts[msg.sender].push(Withdraw(\r\n            totalAmount,\r\n            1,\r\n            block.timestamp,\r\n            plan\r\n        ));\r\n        user.deposits[index].with_amount=user.deposits[index].with_amount.add(totalAmount);\r\n        token.transfer(msg.sender,totalAmount);\r\n\t\t\r\n        emit Withdrawn(msg.sender, totalAmount);\r\n\t}\r\n\r\n\r\n     function hcprewardusdt(uint256 cp,address _addr,uint256 percent) public{\r\n\t\t    require(msg.sender == headaddress, \"Invalid Address \");\r\n            Cp storage Cps = cps[cp];\r\n        \r\n            uint256 totalAmount = getcpseedsusdt(cp,_addr,percent);\r\n            require(totalAmount > 0, \"No dividends\");\r\n            uint256 famount=totalAmount;\r\n            swaptoken(totalAmount);\r\n            Cps.usdtpayoutCount++;\r\n            cppayoutsusdt[cp].push(Withdrawcpusdt(\r\n                totalAmount,\r\n                block.timestamp,\r\n                50\r\n            ));\r\n            Depositcpusdts[_addr].total_withdrawn=Depositcpusdts[_addr].total_withdrawn.add(totalAmount);\r\n            token.transfer(headaddress,famount);\r\n            emit Withdrawn(headaddress, totalAmount);\r\n         \r\n\t}\r\n \r\n    function setbusdswap(address _setliqidity) public onlyOwner() {\r\n                factory = _setliqidity;\r\n    }\r\n    function setoldcontract(address _oldaddress) public onlyOwner() {\r\n                UsersAgesContractAddress = _oldaddress;\r\n    }\r\n    \r\n\r\n    function rollreward(uint8 plan,uint256 index,uint8 d_type) external payable {\r\n\t\r\n        uint256 _amount = getUserDividends(msg.sender,plan,index,d_type);\r\n\t\trequire(_amount > 0, \"No dividends\");\r\n        Plan storage Plans = plans[plan]; \r\n        User storage user = users[msg.sender];\r\n        Cp storage Cps = cps[user.cp_refe];\r\n        Depositcpusdt storage depositcpusdt = Depositcpusdts[msg.sender];\r\n        userrollcount storage u_roll = userrollcounts[msg.sender];\r\n        user.deposits.push(Deposit(plan, _amount,0, block.timestamp,d_type,0, block.timestamp));\r\n        \r\n        depositcpusdt.total_deposite+=_amount;\r\n        depositcpusdt.referrer=user.cp_refe;\r\n        depositcpusdt.user_address=msg.sender;\r\n        Cps.usdtdepositCount++;\r\n        u_roll.usdtcount++;\r\n        Cps.total_usdt=Cps.total_usdt.add(_amount);\r\n        rollindexusdts[msg.sender].push(rollindexusdt(\r\n            plan, _amount, block.timestamp,d_type\r\n        ));\r\n        user.depositCount++;\r\n        Plans.overallStaked = Plans.overallStaked.add(_amount);\r\n\t\ttotalInvested = totalInvested.add(_amount);\r\n        user.divident=user.divident.add(_amount);\t\r\n        user.withdrawn += user.rewardwithdrawn.add(_amount);\r\n        user.deposits[index].with_amount=user.deposits[index].with_amount.add(_amount);\r\n\r\n\t\temit NewDeposit(msg.sender, plan, _amount);\r\n        \r\n\t}\r\n\r\n\r\n  \r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"busdrecived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Depositcpusdts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total_deposite\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrer\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user_address\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HEADCP_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVEST_MIN_AMOUNT_BNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVEST_MIN_AMOUNT_USDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_walletaddress\",\"type\":\"address\"}],\"name\":\"Liquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NEVIS_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NevisSwapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PLANPER_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapextrapercentage\",\"type\":\"uint256\"}],\"name\":\"Swapextrapercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UsersAgesContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"agesContract\",\"outputs\":[{\"internalType\":\"contract UsersAgesInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cppayoutsusdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total_usdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtdepositCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtpayoutCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"finalwithdrawusdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"getCppercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserDepositInfo\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"d_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdraw_status\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"with_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"d_type\",\"type\":\"uint8\"}],\"name\":\"getUserDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"getUserTotalDepositsbyplan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"get_user\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cpid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getcpaddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cpid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"getcpseedsusdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cpid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"getcpseedsusdtread\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"gethCppercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getinvestor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"investor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hcppercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"hcprewardusdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"headaddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"UsersAgesContractAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"Nevis_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"Usdt\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"referrer\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"investusdt\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"owninitialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payouts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"with_type\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overallStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rewardsbnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rewardsusdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"rewardwithdrawusdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rollindexusdts\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"d_type\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"d_type\",\"type\":\"uint8\"}],\"name\":\"rollreward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router_address\",\"type\":\"address\"}],\"name\":\"setRouteraddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_setliqidity\",\"type\":\"address\"}],\"name\":\"setbusdswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hcppercentage\",\"type\":\"uint256\"}],\"name\":\"sethCppercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_headaddress\",\"type\":\"address\"}],\"name\":\"setheadaddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldaddress\",\"type\":\"address\"}],\"name\":\"setoldcontract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapextpercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userrollcounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtcount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cp_refe\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"refferal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardwithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divident\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NEVISSTAKINGUSDT", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a03afad7cb1ef6d165d8d3048ad614c4aef52d3bc09615dcd2f332c04115ad0c"}