{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.19;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 { \r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n}\r\n\r\nIERC20 constant USDT = IERC20(0x55d398326f99059fF775485246999027B3197955);\r\n\r\ncontract XREIDO is Ownable{\r\n\r\n\r\n    uint private unlocked = 1;\r\n    modifier lock() \r\n    {\r\n          require(unlocked == 1, 'upline: locked');\r\n          unlocked = 0;\r\n          _;\r\n         unlocked = 1;\r\n    }\r\n\r\n    uint256 usdt_ai_price = 3;\r\n\r\n    uint256[] uplineAmunt =  [100,50];\r\n\r\n    function editUsdtAllinPrice(uint256 pice)\r\n        public  checkEdit\r\n    {\r\n        usdt_ai_price = pice;\r\n    }   \r\n\r\n    uint256 public wdStartTime = 1704038400; \r\n\r\n    function editWdStartTime(uint256 time)\r\n        public  checkEdit\r\n    {\r\n        wdStartTime = time;\r\n    }\r\n\r\n    address public su = 0xdE2534e04D5B2a81bE4CC0FeBe394ebc54A2A4a0;\r\n\r\n    function editSu(address addrSu)\r\n        public checkEdit\r\n    {\r\n        su = addrSu;\r\n    }\r\n\r\n    uint256 public numberOfHolders = 1;\r\n\r\n    function editNumberOfHokders(uint256 num)\r\n    public checkEdit\r\n    {\r\n        numberOfHolders = num;\r\n    }\r\n\r\n    uint256  public totalTranche = 10;\r\n\r\n     function edittotalTranche(uint256 num)\r\n    public checkEdit\r\n    {\r\n        totalTranche = num;\r\n    }\r\n\r\n    mapping (address => bool)  ist;\r\n\r\n    struct user\r\n    {        \r\n        uint256 amount;\r\n        uint256 ai_tranche;\r\n        uint256 ai_amount;\r\n        uint256 ai_output;\r\n\r\n        address upline;\r\n        uint256 upline_one_count;\r\n        uint256 upline_one_reward;\r\n        \r\n        uint256 upline_two_count;\r\n        uint256 upline_two_reward;\r\n\r\n        uint256 total_output;\r\n        uint256 create_time;    \r\n    }\r\n\r\n    mapping(address => user)   users;\r\n\r\n    mapping(address => address[])   users_upline_one;\r\n\r\n    mapping(address =>  address[])   users_upline_two;\r\n\r\n    struct Rv\r\n    {\r\n        address addr;\r\n        uint256 amount;\r\n        uint256 times;\r\n    }\r\n\r\n    function selectUpineOne(address addr,uint256 index,uint256 pageSize)\r\n        public view returns(Rv[] memory)\r\n    {\r\n        uint256  onelength = users_upline_one[addr].length;\r\n        if(pageSize < onelength){\r\n            onelength = pageSize;\r\n        }\r\n        if(onelength < index){\r\n            index = 0;\r\n        }\r\n        uint256 j = 0;\r\n        Rv[] memory  rv = new Rv[](onelength - index); \r\n        for(uint256 i = index; i < onelength; ++i)\r\n        {\r\n            address Rvv= users_upline_one[addr][i];\r\n            rv[j].addr = Rvv;\r\n            rv[j].amount= users[Rvv].ai_amount;\r\n            rv[j].times = users[Rvv].create_time;\r\n            j++;\r\n        }\r\n        return rv;\r\n    } \r\n\r\n   function selectUpineTwo(address addr,uint256 index,uint256 pageSize)\r\n        public view returns(Rv[] memory rv )\r\n    {\r\n        uint256  onelength = users_upline_two[addr].length;\r\n        if(pageSize < onelength){\r\n            onelength = pageSize;\r\n        }\r\n        if(onelength < index){\r\n            index = 0;\r\n        }\r\n        uint256 j = 0;\r\n        rv = new Rv[](onelength - index); \r\n        for(uint256 i = index; i < onelength; ++i)\r\n        {\r\n            address Rvv= users_upline_two[addr][i];\r\n            rv[j].addr = Rvv;\r\n            rv[j].amount= users[Rvv].ai_amount;\r\n            rv[j].times = users[Rvv].create_time;\r\n            j++;\r\n        }\r\n    } \r\n\r\n    mapping(address=>bool) public blacklists;\r\n\r\n    function addRoverBlacklist(address addr,bool v)\r\n    public checkEdit\r\n    {\r\n        blacklists[addr] = v;\r\n    }\r\n\r\n    event Deplay(address,uint256,uint256);\r\n\r\n    function deplay(uint256 amount) \r\n        external lock\r\n    {        \r\n       require( users[_msgSender()].ai_tranche + amount <= totalTranche ,\"tranche_er\");\r\n       uint256 u_u = uU(amount);\r\n        \r\n        users[_msgSender()].amount += u_u;\r\n        users[_msgSender()].ai_amount += uR(amount);\r\n        users[_msgSender()].ai_tranche += amount;\r\n        users[_msgSender()].create_time = block.timestamp;\r\n\r\n        if(ist[_msgSender()] == false) {\r\n            numberOfHolders +=1;\r\n            ist[_msgSender()] = true;\r\n        } \r\n\r\n       uint256 _v =  uplineShare(u_u);\r\n\r\n        USDT.transferFrom(_msgSender(),su,u_u - _v);\r\n        emit Deplay(_msgSender(),amount,users[_msgSender()].ai_amount);\r\n    }\r\n\r\n    function uplineShare(uint256 a)\r\n        private    returns(uint256 v)\r\n    {\r\n\r\n        if(users[_msgSender()].upline != address(0))\r\n        {\r\n            address addr = users[_msgSender()].upline;\r\n            \r\n            users[addr].upline_one_reward +=  (a * uplineAmunt[0]) / 1000;\r\n            v += (a * uplineAmunt[0]) / 1000;\r\n            USDT.transferFrom(_msgSender(),addr, (a * uplineAmunt[0]) / 1000);\r\n\r\n            if(users[addr].upline != address(0))\r\n            {\r\n                users[users[addr].upline].upline_two_reward += (a * uplineAmunt[1]) / 1000;\r\n                v += (a * uplineAmunt[1]) / 1000;\r\n                USDT.transferFrom(_msgSender(),users[addr].upline, (a * uplineAmunt[1]) / 1000);\r\n            }\r\n        }\r\n    }\r\n\r\n    address public XREToken;\r\n\r\n    function editAiToken(address addr)\r\n        public checkEdit\r\n    {\r\n        XREToken = addr;\r\n    }    \r\n\r\n    event WD(address,uint256);\r\n    function wd()\r\n        external  lock\r\n    {\r\n        require(block.timestamp >= wdStartTime,\"time_err\");\r\n        require(blacklists[_msgSender()] ==false ,\"blacklists_err\");\r\n        require(XREToken != address(0),\"token_err\");\r\n        require(users[_msgSender()].amount > 0,\"deply_err\");\r\n\r\n        uint256 ai_output =  users[_msgSender()].ai_amount - users[_msgSender()].ai_output;\r\n        if(ai_output >0 )\r\n        {\r\n            users[_msgSender()].ai_output += ai_output;\r\n        }\r\n        require(ai_output > 0 ,\"wd_err\");\r\n\r\n        users[_msgSender()].total_output += ai_output;\r\n        IERC20(XREToken).transfer(_msgSender(),ai_output);\r\n        emit WD(_msgSender(),ai_output);\r\n    }\r\n\r\n    function upline(address addr) \r\n        external lock\r\n    {\r\n        require(users[_msgSender()].upline == address(0),\"upline_err\");\r\n        require(_msgSender() != addr,\"upline_err\");\r\n        users[_msgSender()].upline = addr;\r\n        users[addr].upline_one_count += 1;\r\n        users_upline_one[addr].push(_msgSender());\r\n\r\n        if(users[addr].upline != address(0))\r\n        {\r\n            users[users[addr].upline].upline_two_count += 1;\r\n            users_upline_two[users[addr].upline].push(_msgSender());\r\n        }\r\n\r\n    }\r\n\r\n    function selectUsersInfo(address addr)\r\n        public view  \r\n        returns(user memory)\r\n    {        \r\n        return users[addr];\r\n    }\r\n\r\n    function selectUpline(address addr)\r\n        public view  \r\n        returns(address)\r\n    {        \r\n        return (users[addr].upline);\r\n\r\n    }\r\n\r\n    function addEditApprove(address addr,bool qd)\r\n    public onlyOwner\r\n    {\r\n        editApprove[addr] = qd;\r\n    }\r\n\r\n    function selectEditApprove(address addr)\r\n    public view returns(bool)\r\n    {\r\n        return editApprove[addr];\r\n    }\r\n\r\n    mapping(address => bool) editApprove;\r\n\r\n    modifier checkEdit()\r\n    {\r\n        require(editApprove[_msgSender()] || owner() == _msgSender(),\"edit_err\");\r\n         _;\r\n    }\r\n\r\n    function editUpline(address addr,address upAddr)\r\n        external checkEdit  \r\n    {        \r\n        users[addr].upline = upAddr;\r\n    }\r\n\r\n    function uR(uint256 a_)\r\n        private pure returns(uint256)\r\n    {\r\n        return  a_ * 100000 * 1 ether;        \r\n    }\r\n\r\n     function uU(uint256 a_)\r\n        private pure returns(uint256)\r\n    {\r\n        return a_ *  500 ether;        \r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) public  onlyOwner\r\n    {\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0xa9059cbb, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"XRE::safeTransfer: transfer failed\"\r\n        );\r\n    }\r\n\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Deplay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"WD\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"XREToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"qd\",\"type\":\"bool\"}],\"name\":\"addEditApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"v\",\"type\":\"bool\"}],\"name\":\"addRoverBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deplay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"editAiToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"editNumberOfHokders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addrSu\",\"type\":\"address\"}],\"name\":\"editSu\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"upAddr\",\"type\":\"address\"}],\"name\":\"editUpline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pice\",\"type\":\"uint256\"}],\"name\":\"editUsdtAllinPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"editWdStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"edittotalTranche\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"safeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"selectEditApprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"selectUpineOne\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"times\",\"type\":\"uint256\"}],\"internalType\":\"struct XREIDO.Rv[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"selectUpineTwo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"times\",\"type\":\"uint256\"}],\"internalType\":\"struct XREIDO.Rv[]\",\"name\":\"rv\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"selectUpline\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"selectUsersInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ai_tranche\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ai_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ai_output\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"upline_one_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upline_one_reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upline_two_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upline_two_reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_output\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"create_time\",\"type\":\"uint256\"}],\"internalType\":\"struct XREIDO.user\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"su\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTranche\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"upline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wdStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "XREIDO", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c5c98977f9e06c89491992576b690512d74b81f7883998ad94961a2d29b62a07"}