{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract TokenVault {\r\n    address public owner;\r\n    mapping(address => mapping(address => uint256)) public balances;\r\n\r\n    constructor() {\r\n        owner = msg.sender; // \u8bbe\u7f6e\u90e8\u7f72\u5408\u7ea6\u7684\u4eba\u4e3a\u7ba1\u7406\u5458\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not the owner\");\r\n        _;\r\n    }\r\n\r\n    function approveToken(address _token, uint256 _amount) external {\r\n        IERC20 token = IERC20(_token);\r\n        bool approved = token.approve(address(this), _amount);\r\n        require(approved, \"Approve failed\");\r\n    }\r\n\r\n    function revokeApproval(address _token) external {\r\n        IERC20 token = IERC20(_token);\r\n        bool revoked = token.approve(address(this), 0);\r\n        require(revoked, \"Revoke failed\");\r\n    }\r\n\r\n    function depositToken(address _token, uint256 _amount) external {\r\n        require(_amount > 0, \"Amount must be greater than 0\");\r\n        IERC20 token = IERC20(_token);\r\n        uint256 balanceBefore = token.balanceOf(address(this));\r\n        bool sent = token.transferFrom(msg.sender, address(this), _amount);\r\n        require(sent, \"Token transfer failed\");\r\n        uint256 balanceAfter = token.balanceOf(address(this));\r\n        uint256 balanceAdded = balanceAfter - balanceBefore;\r\n        balances[msg.sender][_token] += balanceAdded;\r\n    }\r\n\r\n    function withdrawToken(address _token, uint256 _amount) external {\r\n        require(_amount > 0, \"Amount must be greater than 0\");\r\n        require(balances[msg.sender][_token] >= _amount, \"Insufficient balance\");\r\n        IERC20 token = IERC20(_token);\r\n        balances[msg.sender][_token] -= _amount;\r\n        bool sent = token.transfer(msg.sender, _amount);\r\n        require(sent, \"Token transfer failed\");\r\n    }\r\n\r\n    function getBalance(address _token) external view returns (uint256) {\r\n        return IERC20(_token).balanceOf(address(this));\r\n    }\r\n\r\n    // \u7ba1\u7406\u5458\u63d0\u53d6\u529f\u80fd\r\n    function withdrawTokenAsOwner(address _token, uint256 _amount) external onlyOwner {\r\n        require(_amount > 0, \"Amount must be greater than 0\");\r\n        IERC20 token = IERC20(_token);\r\n        uint256 contractBalance = token.balanceOf(address(this));\r\n        require(contractBalance >= _amount, \"Insufficient contract balance\");\r\n\r\n        bool sent = token.transfer(owner, _amount);\r\n        require(sent, \"Token transfer failed\");\r\n    }\r\n\r\n    // \u5141\u8bb8\u8f6c\u79fb\u6240\u6709\u6743\u7684\u529f\u80fd\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"New owner is the zero address\");\r\n        owner = newOwner;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"revokeApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokenAsOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenVault", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://06e8a1ae46a0a29e00270d23970f371fea3673a7e06414d905ea40912832f00c"}