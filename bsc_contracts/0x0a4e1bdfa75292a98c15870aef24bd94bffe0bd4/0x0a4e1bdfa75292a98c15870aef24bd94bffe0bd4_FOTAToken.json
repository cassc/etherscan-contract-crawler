{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/binh/Documents/Development/Solidity/fota-dapp/contracts/FOTAToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"./libs/zeppelin/token/BEP20/IBEP20.sol\\\";\\nimport \\\"./libs/fota/TokenAuth.sol\\\";\\n\\ncontract FOTAToken is IBEP20, TokenAuth {\\n  string public constant name = \\\"Fight Of The Ages\\\";\\n  string public constant symbol = \\\"FOTA\\\";\\n  uint public constant decimals = 18;\\n\\n  uint public constant gamingAllocation = 455e24;\\n  uint public constant seedSaleAllocation = 105e23;\\n  uint public constant strategicSaleAllocation = 35e24;\\n  uint public constant privateSaleAllocation = 21e24;\\n  uint public constant ido1stAllocation = 7e24;\\n  uint public constant ido2ndAllocation = 35e23;\\n  uint public constant marketingAllocation = 28e24;\\n  uint public constant liquidityPoolAllocation = 35e24;\\n\\n  uint public constant maxSupply = 700e24;\\n  uint public constant blockInOneMonth = 864000; // 30 * 24 * 60 * 20\\n  uint public totalSupply;\\n  bool public paused;\\n  bool public lockingFunctionEnabled = true;\\n  uint8 public idoReleaseCounter;\\n  uint public lastReleaseMarketingBlock;\\n  uint public lastReleaseLiquidityPoolBlock;\\n  uint public startVestingMarketingBlock;\\n  uint public startVestingLiquidityPoolBlock;\\n  uint public startVestingFounderBlock;\\n  uint public startVestingAdvisorBlock;\\n  mapping (address => uint) public lastReleaseAdvisorBlocks;\\n  mapping (address => uint) public lastReleaseFounderBlocks;\\n\\n  uint private gamingReleased;\\n  uint private seedSaleReleased;\\n  uint private strategicSaleReleased;\\n  uint private privateSaleReleased;\\n\\n  bool releasePrivateSale;\\n  bool releaseIDO;\\n  bool releaseLiquidityPool;\\n\\n  mapping (address => uint) internal _balances;\\n  mapping (address => mapping (address => uint)) private _allowed;\\n  mapping (address => bool) lock;\\n\\n  constructor(address _liquidityPoolAddress) TokenAuth(msg.sender, _liquidityPoolAddress) {\\n  }\\n\\n  function startVestingMarketing() onlyOwner external {\\n    require(startVestingMarketingBlock == 0, \\\"VestingMarketing had started already\\\");\\n    startVestingMarketingBlock = block.number;\\n    lastReleaseMarketingBlock = startVestingMarketingBlock + blockInOneMonth * 3;\\n  }\\n\\n  function startVestingLiquidityPool() onlyOwner external {\\n    require(startVestingLiquidityPoolBlock == 0, \\\"VestingLiquidityPool had started already\\\");\\n    startVestingLiquidityPoolBlock = block.number;\\n    lastReleaseLiquidityPoolBlock = startVestingLiquidityPoolBlock + blockInOneMonth * 3;\\n    _mint(liquidityPoolAddress, liquidityPoolAllocation * 10 / 100);\\n  }\\n\\n  function startVestingFounder() onlyOwner external {\\n    require(startVestingFounderBlock == 0, \\\"VestingFounder had started already\\\");\\n    startVestingFounderBlock = block.number;\\n  }\\n\\n  function startVestingAdvisor() onlyOwner external {\\n    require(startVestingAdvisorBlock == 0, \\\"VestingAdvisor had started already\\\");\\n    startVestingAdvisorBlock = block.number;\\n  }\\n\\n  function releaseGameAllocation(address _gamerAddress, uint _amount) external onlyGameContract returns (bool) {\\n    require(gamingReleased + _amount <= gamingAllocation, \\\"Max gaming allocation had released\\\");\\n    _mint(_gamerAddress, _amount);\\n    gamingReleased = gamingReleased + _amount;\\n    return true;\\n  }\\n\\n  function releaseSeedSaleAllocation(address _buyerAddress, uint _amount) external onlySaleContract returns (bool) {\\n    require(seedSaleReleased + _amount <= seedSaleAllocation, \\\"Max seed sale allocation had released\\\");\\n    _mint(_buyerAddress, _amount);\\n    seedSaleReleased = seedSaleReleased + _amount;\\n    return true;\\n  }\\n\\n  function releaseStrategicSaleAllocation(address _buyerAddress, uint _amount) external onlySaleContract returns (bool) {\\n    require(strategicSaleReleased + _amount <= strategicSaleAllocation, \\\"Max strategic sale allocation had released\\\");\\n    _mint(_buyerAddress, _amount);\\n    strategicSaleReleased = strategicSaleReleased + _amount;\\n    return true;\\n  }\\n\\n  function releasePrivateSaleAllocation(address _buyerAddress, uint _amount) external onlySaleContract returns (bool) {\\n    require(privateSaleReleased + _amount <= privateSaleAllocation, \\\"Max private sale allocation had released\\\");\\n    _mint(_buyerAddress, _amount);\\n    privateSaleReleased = privateSaleReleased + _amount;\\n    return true;\\n  }\\n\\n  function releaseIDOAllocation(address _address) external onlyOwner {\\n    require(!releaseIDO, \\\"IDO Allocation had released\\\");\\n    if (idoReleaseCounter == 0) {\\n      idoReleaseCounter++;\\n      _mint(_address, ido1stAllocation);\\n    } else {\\n      releaseIDO = true;\\n      _mint(_address, ido2ndAllocation);\\n    }\\n  }\\n\\n  function releaseMarketing() external onlyMarketingAddress {\\n    require(startVestingMarketingBlock > 0 && block.number > startVestingMarketingBlock + blockInOneMonth * 3, \\\"Please wait more time\\\");\\n    uint maxBlockNumber = startVestingMarketingBlock + blockInOneMonth * 15;\\n    require(maxBlockNumber > lastReleaseMarketingBlock, \\\"Marketing allocation had released\\\");\\n    uint blockPass;\\n    if (block.number < maxBlockNumber) {\\n      blockPass = block.number - lastReleaseMarketingBlock;\\n\\t    lastReleaseMarketingBlock = block.number;\\n    } else {\\n      blockPass = maxBlockNumber - lastReleaseMarketingBlock;\\n\\t    lastReleaseMarketingBlock = maxBlockNumber;\\n    }\\n    uint releaseAmount = marketingAllocation * blockPass / (blockInOneMonth * 12);\\n    _mint(msg.sender, releaseAmount);\\n  }\\n\\n  function releaseLiquidityPoolAllocation() external onlyLiquidityPoolAddress {\\n    require(startVestingLiquidityPoolBlock > 0 && block.number > startVestingLiquidityPoolBlock + blockInOneMonth * 3, \\\"Please wait more time\\\");\\n    uint maxBlockNumber = startVestingLiquidityPoolBlock + blockInOneMonth * 15;\\n    require(maxBlockNumber > lastReleaseLiquidityPoolBlock, \\\"Liquidity pool allocation had released\\\");\\n    uint blockPass;\\n    if (block.number < maxBlockNumber) {\\n      blockPass = block.number - lastReleaseLiquidityPoolBlock;\\n      lastReleaseLiquidityPoolBlock = block.number;\\n    } else {\\n      blockPass = maxBlockNumber - lastReleaseLiquidityPoolBlock;\\n      lastReleaseLiquidityPoolBlock = maxBlockNumber;\\n    }\\n    uint releaseAmount = liquidityPoolAllocation * 90 / 100 * blockPass / (blockInOneMonth * 12);\\n    _mint(msg.sender, releaseAmount);\\n  }\\n\\n  function releaseFounderAllocation() external onlyFounderAddress {\\n    uint canReleaseAtBlock = startVestingFounderBlock + blockInOneMonth * 12;\\n    require(startVestingFounderBlock > 0 && block.number > canReleaseAtBlock, \\\"Please wait more time\\\");\\n    uint maxBlockNumber = startVestingFounderBlock + blockInOneMonth * 24;\\n    require(maxBlockNumber > lastReleaseFounderBlocks[msg.sender], \\\"Founder allocation had released\\\");\\n    if (lastReleaseFounderBlocks[msg.sender] == 0) {\\n      lastReleaseFounderBlocks[msg.sender] = canReleaseAtBlock;\\n    }\\n    uint blockPass;\\n    if (block.number < maxBlockNumber) {\\n      blockPass = block.number - lastReleaseFounderBlocks[msg.sender];\\n      lastReleaseFounderBlocks[msg.sender] = block.number;\\n    } else {\\n      blockPass = maxBlockNumber - lastReleaseFounderBlocks[msg.sender];\\n      lastReleaseFounderBlocks[msg.sender] = maxBlockNumber;\\n    }\\n    uint releaseAmount = founderAddresses[msg.sender] * blockPass / (blockInOneMonth * 12);\\n    _mint(msg.sender, releaseAmount);\\n  }\\n\\n  function releaseAdvisorAllocation() external onlyAdvisorAddress {\\n    uint canReleaseAtBlock = startVestingAdvisorBlock + blockInOneMonth * 6;\\n    require(startVestingAdvisorBlock > 0 && block.number > canReleaseAtBlock, \\\"Please wait more time\\\");\\n    uint maxBlockNumber = startVestingAdvisorBlock + blockInOneMonth * 18;\\n    if (lastReleaseAdvisorBlocks[msg.sender] == 0) {\\n      lastReleaseAdvisorBlocks[msg.sender] = canReleaseAtBlock;\\n    }\\n    require(maxBlockNumber > lastReleaseAdvisorBlocks[msg.sender], \\\"Advisor allocation had released\\\");\\n    uint blockPass;\\n    if (block.number < maxBlockNumber) {\\n      blockPass = block.number - lastReleaseAdvisorBlocks[msg.sender];\\n      lastReleaseAdvisorBlocks[msg.sender] = block.number;\\n    } else {\\n      blockPass = maxBlockNumber - lastReleaseAdvisorBlocks[msg.sender];\\n      lastReleaseAdvisorBlocks[msg.sender] = maxBlockNumber;\\n    }\\n    uint releaseAmount = advisorAddresses[msg.sender] * blockPass / (blockInOneMonth * 12);\\n    _mint(msg.sender, releaseAmount);\\n  }\\n\\n  function balanceOf(address _owner) override external view returns (uint) {\\n    return _balances[_owner];\\n  }\\n\\n  function allowance(address _owner, address _spender) override external view returns (uint) {\\n    return _allowed[_owner][_spender];\\n  }\\n\\n  function transfer(address _to, uint _value) override external returns (bool) {\\n    _transfer(msg.sender, _to, _value);\\n    return true;\\n  }\\n\\n  function approve(address _spender, uint _value) override external returns (bool) {\\n    _approve(msg.sender, _spender, _value);\\n    return true;\\n  }\\n\\n  function transferFrom(address _from, address _to, uint _value) override external returns (bool) {\\n    _transfer(_from, _to, _value);\\n    _approve(_from, msg.sender, _allowed[_from][msg.sender] - _value);\\n    return true;\\n  }\\n\\n  function increaseAllowance(address _spender, uint _addedValue) external returns (bool) {\\n    _approve(msg.sender, _spender, _allowed[msg.sender][_spender] + _addedValue);\\n    return true;\\n  }\\n\\n  function decreaseAllowance(address _spender, uint _subtractedValue) external returns (bool) {\\n    _approve(msg.sender, _spender, _allowed[msg.sender][_spender] - _subtractedValue);\\n    return true;\\n  }\\n\\n  function burn(uint _amount) external {\\n    _balances[msg.sender] = _balances[msg.sender] - _amount;\\n    totalSupply = totalSupply - _amount;\\n    emit Transfer(msg.sender, address(0), _amount);\\n  }\\n\\n  function updatePauseStatus(bool _paused) onlyOwner external {\\n    paused = _paused;\\n  }\\n\\n  function updateLockStatus(address _address, bool _locked) onlyOwner external {\\n    require(lockingFunctionEnabled, \\\"Locking function is disabled\\\");\\n    lock[_address] = _locked;\\n  }\\n\\n  function disableLockingFunction() onlyOwner external {\\n    lockingFunctionEnabled = false;\\n  }\\n\\n  function checkLockStatus(address _address) external view returns (bool) {\\n    return lock[_address];\\n  }\\n\\n  function updateFounderAddress(address _oldAddress, address _newAddress) public override {\\n    super.updateFounderAddress(_oldAddress, _newAddress);\\n    lastReleaseFounderBlocks[_newAddress] = lastReleaseFounderBlocks[_oldAddress];\\n    delete lastReleaseFounderBlocks[_oldAddress];\\n  }\\n\\n  function updateAdvisorAddress(address _oldAddress, address _newAddress) public override {\\n    super.updateAdvisorAddress(_oldAddress, _newAddress);\\n    lastReleaseAdvisorBlocks[_newAddress] = lastReleaseAdvisorBlocks[_oldAddress];\\n    delete lastReleaseAdvisorBlocks[_oldAddress];\\n  }\\n\\n  function _transfer(address _from, address _to, uint _value) private {\\n    _validateAbility(_from);\\n    _balances[_from] = _balances[_from] - _value;\\n    _balances[_to] = _balances[_to] + _value;\\n    if (_to == address(0)) {\\n      totalSupply = totalSupply - _value;\\n    }\\n    emit Transfer(_from, _to, _value);\\n  }\\n\\n  function _approve(address _owner, address _spender, uint _value) private {\\n    require(_spender != address(0));\\n    require(_owner != address(0));\\n\\n    _allowed[_owner][_spender] = _value;\\n    emit Approval(_owner, _spender, _value);\\n  }\\n\\n  function _mint(address _owner, uint _amount) private {\\n    _validateAbility(_owner);\\n    require(totalSupply + _amount <= maxSupply, \\\"Amount invalid\\\");\\n    _balances[_owner] = _balances[_owner] + _amount;\\n    totalSupply = totalSupply + _amount;\\n    emit Transfer(address(0), _owner, _amount);\\n  }\\n\\n  function _validateAbility(address _owner) private view {\\n    if (lockingFunctionEnabled) {\\n      require(!lock[_owner] && !paused, \\\"You can not do this at the moment\\\");\\n    } else {\\n      require(!paused, \\\"You can not do this at the moment\\\");\\n    }\\n  }\\n}\\n\\n\"\r\n    },\r\n    \"/Users/binh/Documents/Development/Solidity/fota-dapp/contracts/libs/fota/TokenAuth.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\ncontract TokenAuth is Context {\\n\\n  address internal backup;\\n  address internal owner;\\n  mapping (address => bool) public gameAddresses;\\n  mapping (address => bool) public saleAddresses;\\n  mapping (address => uint) public advisorAddresses;\\n  mapping (address => uint) public founderAddresses;\\n  address marketingAddress;\\n  address liquidityPoolAddress;\\n\\n  uint constant maxAdvisorAllocation = 35e24;\\n  uint constant maxFounderTeamAllocation = 70e24;\\n  uint advisorAllocated;\\n  uint founderAllocated;\\n\\n  event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\\n\\n  constructor(\\n    address _owner,\\n    address _liquidityPoolAddress\\n  ) {\\n    owner = _owner;\\n    backup = _owner;\\n    liquidityPoolAddress = _liquidityPoolAddress;\\n  }\\n\\n  modifier onlyOwner() {\\n    require(isOwner(), \\\"onlyOwner\\\");\\n    _;\\n  }\\n\\n  modifier onlyBackup() {\\n    require(isBackup(), \\\"onlyBackup\\\");\\n    _;\\n  }\\n\\n  modifier onlyGameContract() {\\n    require(gameAddresses[_msgSender()], \\\"TokenAuth: invalid caller\\\");\\n    _;\\n  }\\n\\n  modifier onlySaleContract() {\\n    require(saleAddresses[_msgSender()], \\\"TokenAuth: invalid caller\\\");\\n    _;\\n  }\\n\\n  modifier onlyMarketingAddress() {\\n    require(_msgSender() == marketingAddress, \\\"TokenAuth: invalid caller\\\");\\n    _;\\n  }\\n\\n  modifier onlyLiquidityPoolAddress() {\\n    require(_msgSender() == liquidityPoolAddress, \\\"TokenAuth: invalid caller\\\");\\n    _;\\n  }\\n\\n  modifier onlyAdvisorAddress() {\\n    require(advisorAddresses[_msgSender()] > 0, \\\"TokenAuth: invalid caller\\\");\\n    _;\\n  }\\n\\n  modifier onlyFounderAddress() {\\n    require(founderAddresses[_msgSender()] > 0, \\\"TokenAuth: invalid caller\\\");\\n    _;\\n  }\\n\\n  function transferOwnership(address _newOwner) external onlyBackup {\\n    require(_newOwner != address(0), \\\"TokenAuth: invalid new owner\\\");\\n    owner = _newOwner;\\n    emit OwnershipTransferred(_msgSender(), _newOwner);\\n  }\\n\\n  function updateBackup(address _newBackup) external onlyBackup {\\n    require(_newBackup != address(0), \\\"TokenAuth: invalid new backup\\\");\\n    backup = _newBackup;\\n  }\\n\\n  function setGameAddress(address _gameAddress, bool _status) external onlyOwner {\\n    require(_gameAddress != address(0), \\\"TokenAuth: game address is the zero address\\\");\\n    gameAddresses[_gameAddress] = _status;\\n  }\\n\\n  function setSaleAddress(address _address, bool _status) external onlyOwner {\\n    require(_address != address(0), \\\"TokenAuth: sale address is the zero address\\\");\\n    saleAddresses[_address] = _status;\\n  }\\n\\n  function setMarketingAddress(address _address) external onlyOwner {\\n    require(_address != address(0), \\\"TokenAuth: marketing address is the zero address\\\");\\n    marketingAddress = _address;\\n  }\\n\\n  function setLiquidityPoolAddress(address _address) external onlyOwner {\\n    require(_address != address(0), \\\"TokenAuth: liquidity address is the zero address\\\");\\n    liquidityPoolAddress = _address;\\n  }\\n\\n  function setFounderAddress(address _address, uint _allocation) public virtual onlyOwner {\\n    require(_address != address(0), \\\"TokenAuth: founder address is the zero address\\\");\\n    require(founderAllocated + _allocation <= maxFounderTeamAllocation, \\\"Invalid amount\\\");\\n    founderAddresses[_address] = _allocation;\\n    founderAllocated = founderAllocated + _allocation;\\n  }\\n\\n  function updateFounderAddress(address _oldAddress, address _newAddress) public virtual onlyOwner {\\n    require(_oldAddress != address(0), \\\"TokenAuth: founder address is the zero address\\\");\\n    founderAddresses[_newAddress] = founderAddresses[_oldAddress];\\n    delete founderAddresses[_oldAddress];\\n  }\\n\\n  function setAdvisorAddress(address _address, uint _allocation) public virtual onlyOwner {\\n    require(_address != address(0), \\\"TokenAuth: advisor address is the zero address\\\");\\n    require(advisorAllocated + _allocation <= maxAdvisorAllocation, \\\"Invalid amount\\\");\\n    advisorAddresses[_address] = _allocation;\\n    advisorAllocated = advisorAllocated + _allocation;\\n  }\\n\\n  function updateAdvisorAddress(address _oldAddress, address _newAddress) public virtual onlyOwner {\\n    require(_oldAddress != address(0), \\\"TokenAuth: advisor address is the zero address\\\");\\n    advisorAddresses[_newAddress] = advisorAddresses[_oldAddress];\\n    delete advisorAddresses[_oldAddress];\\n  }\\n\\n  function isOwner() public view returns (bool) {\\n    return _msgSender() == owner;\\n  }\\n\\n  function isBackup() public view returns (bool) {\\n    return _msgSender() == backup;\\n  }\\n}\\n\"\r\n    },\r\n    \"/Users/binh/Documents/Development/Solidity/fota-dapp/contracts/libs/zeppelin/token/BEP20/IBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface IBEP20 {\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityPoolAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"advisorAddresses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockInOneMonth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkLockStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableLockingFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"founderAddresses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gameAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gamingAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ido1stAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ido2ndAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idoReleaseCounter\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBackup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastReleaseAdvisorBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastReleaseFounderBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastReleaseLiquidityPoolBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastReleaseMarketingBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPoolAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockingFunctionEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateSaleAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseAdvisorAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseFounderAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gamerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseGameAllocation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"releaseIDOAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseLiquidityPoolAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releasePrivateSaleAllocation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseSeedSaleAllocation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseStrategicSaleAllocation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"saleAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedSaleAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allocation\",\"type\":\"uint256\"}],\"name\":\"setAdvisorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allocation\",\"type\":\"uint256\"}],\"name\":\"setFounderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gameAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setGameAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setLiquidityPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setSaleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVestingAdvisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVestingAdvisorBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVestingFounder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVestingFounderBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVestingLiquidityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVestingLiquidityPoolBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVestingMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVestingMarketingBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategicSaleAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateAdvisorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBackup\",\"type\":\"address\"}],\"name\":\"updateBackup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateFounderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"updateLockStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"updatePauseStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FOTAToken", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005f3a863d81ea0f46b8160d3e6a7210b81a98a7fa", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}