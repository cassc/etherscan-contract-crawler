{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n    \r\n    function _now() internal view returns(uint){\r\n        return block.timestamp;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    \r\n    modifier onlyOwner{\r\n        require(_msgSender() == _owner, \"Forbidden\");\r\n        _;\r\n    }\r\n    \r\n    address internal _owner;\r\n    address internal _newRequestingOwner;\r\n    \r\n    constructor(){\r\n        _owner = _msgSender();\r\n    }\r\n    \r\n    function getOwner() external virtual view returns(address){\r\n        return _owner;\r\n    }\r\n    \r\n    function requestChangeOwner(address newOwner) external  onlyOwner{\r\n        require(_owner != newOwner, \"New owner is current owner\");\r\n        _newRequestingOwner = newOwner;\r\n    }\r\n    \r\n    function approveToBeOwner() external{\r\n        require(_newRequestingOwner != address(0), \"Zero address\");\r\n        require(_msgSender() == _newRequestingOwner, \"Forbidden\");\r\n        \r\n        address oldOwner = _owner;\r\n        _owner = _newRequestingOwner;\r\n        \r\n        emit OwnerChanged(oldOwner, _owner);\r\n    }\r\n    \r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n}\r\n\r\nabstract contract Runnable is Ownable {\r\n    \r\n    modifier isRunning{\r\n        require(_isRunning, \"Contract is paused\");\r\n        _;\r\n    }\r\n    \r\n    bool internal _isRunning;\r\n    \r\n    constructor(){\r\n        _isRunning = true;\r\n    }\r\n    \r\n    function toggleRunningStatus() external onlyOwner{\r\n        _isRunning = !_isRunning;\r\n    }\r\n\r\n    function getRunningStatus() external view returns(bool){\r\n        return _isRunning;\r\n    }\r\n}\r\n\r\ncontract AvatarArtStaking is Runnable{\r\n    uint256 public constant _startTime = 1638288000;\r\n    uint256 public _annualProfit;\r\n    \r\n    address public _bnuTokenAddress;\r\n    uint256 public _stopTime;\r\n    \r\n    //Store all BNU token amount that is staked in contract\r\n    uint256 public _totalStakedAmount;\r\n    uint256 public constant MULTIPLIER = 1000;\r\n    uint256 public constant ONE_YEAR = 365 days;\r\n    \r\n    //Store all BNU token amount that is staked by user\r\n    //Mapping LockStage index => user account => token amount\r\n    mapping(address => uint256) public _userStakeds;\r\n    \r\n    //Store all earned BNU token amount that will be reward for user when he stakes\r\n    //Mapping user account => token amount\r\n    mapping(address => uint) public _userEarneds;\r\n    \r\n    //Store the last time user received reward\r\n    //Mapping stage index => user account => time\r\n    mapping(address => uint256) public _userLastEarnedTimes;\r\n    \r\n    //Store the last time user staked\r\n    //Mapping stage index => user account => time\r\n    mapping(address => uint) public _userLastStakingTimes;\r\n    \r\n    //List of staking users from staking LockStage\r\n    //Mapping: _lockStages index => user address\r\n    address[] public _stakingUsers;\r\n\r\n    constructor(){\r\n        _bnuTokenAddress = 0x4954e0062E0A7668A2FE3df924cD20E6440a7b77;\r\n        _annualProfit = 30000;\r\n    }\r\n    \r\n    /**\r\n     * @dev Get BNU token address\r\n    */\r\n    function getBnuTokenAddress() external view returns(address){\r\n        return _bnuTokenAddress;\r\n    }\r\n\r\n    function getStopTime() external view returns(uint){\r\n        return _stopTime;\r\n    }\r\n    \r\n    /**\r\n     * @dev Get user's BNU earned\r\n     * It includes stored interest and pending interest\r\n     */ \r\n    function getUserEarnedAmount(address account) external view returns(uint){\r\n        uint256 earnedAmount = _userEarneds[account];\r\n        \r\n        //Calculate pending amount\r\n        uint256 userStakedAmount = _userStakeds[account];\r\n        if(userStakedAmount > 0){\r\n            earnedAmount += _calculatePendingEarned(userStakedAmount, _getUserRewardPendingTime(account));\r\n        }\r\n        \r\n        return earnedAmount;\r\n    }\r\n    \r\n    function getUserLastEarnedTime(address account) external view returns(uint){\r\n        return _getUserLastEarnedTime(account);\r\n    }\r\n    \r\n    function getUserLastStakingTime(address account) external view returns(uint){\r\n        return _getUserLastStakingTime(account);\r\n    }\r\n    \r\n    function getUserRewardPendingTime(address account) external view returns(uint){\r\n        return _getUserRewardPendingTime(account);\r\n    }\r\n    \r\n    /**\r\n     * @dev Get total BNU token amount staked by `account`\r\n     */ \r\n    function getUserStakedAmount(address account) external view returns(uint){\r\n        return _getUserStakedAmount(account);\r\n    }\r\n    \r\n    /**\r\n     * @dev Set BNU token address\r\n    */\r\n    function setBnuTokenAddress(address tokenAddress) external onlyOwner{\r\n        require(tokenAddress != address(0), \"Zero address\");\r\n        _bnuTokenAddress = tokenAddress;\r\n    }\r\n    \r\n    /**\r\n     * @dev Set APR\r\n     * Before set APR with new value, contract should process to calculate all current users' profit \r\n     * to reset interest\r\n    */\r\n    function setAnnualProfit(uint256 annualProfit) external onlyOwner{\r\n        for(uint256 userIndex = 0; userIndex < _stakingUsers.length; userIndex++){\r\n            _calculateInterest(_stakingUsers[userIndex]);\r\n        }\r\n        _annualProfit = annualProfit;\r\n    }\r\n    \r\n    /**\r\n     * @dev See IAvatarArtStaking\r\n     */ \r\n    function stake(address account, uint256 amount) external isRunning onlyOwner returns(bool){\r\n        //CHECK REQUIREMENTS\r\n        require(amount > 0, \"Amount should be greater than zero\");\r\n        \r\n        //Calculate interest and store with extra interest\r\n        _calculateInterest(account);\r\n        \r\n        //Update user staked amount and contract staked amount\r\n        _userStakeds[account] += amount;\r\n        _totalStakedAmount += amount;\r\n        \r\n        if(!_isUserStaked(account))\r\n            _stakingUsers.push(account);\r\n        \r\n        //Store the last time user staked\r\n        if(_userLastStakingTimes[account] == 0){\r\n            if(block.timestamp < _startTime)\r\n                _userLastStakingTimes[account] = _startTime;\r\n            else{\r\n                _userLastStakingTimes[account] = block.timestamp;\r\n            }\r\n        }\r\n        \r\n        //Emit events\r\n        emit Staked(account, amount);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function stakeMultiple(address[] memory accounts, uint256[] memory amounts) external isRunning onlyOwner returns(bool){\r\n        require(accounts.length > 0 && accounts.length == amounts.length, \"Invalid input\");\r\n        for(uint256 index = 0; index < accounts.length; index++){\r\n            uint256 amount = amounts[index];\r\n            address account = accounts[index];\r\n\r\n            require(amount > 0, \"Amount should be greater than zero\");\r\n        \r\n            //Calculate interest and store with extra interest\r\n            _calculateInterest(account);\r\n            \r\n            //Update user staked amount and contract staked amount\r\n            _userStakeds[account] += amount;\r\n            _totalStakedAmount += amount;\r\n            \r\n            if(!_isUserStaked(account))\r\n                _stakingUsers.push(account);\r\n            \r\n            //Store the last time user staked\r\n            if(_userLastStakingTimes[account] == 0){\r\n                if(block.timestamp < _startTime)\r\n                    _userLastStakingTimes[account] = _startTime;\r\n                else{\r\n                    _userLastStakingTimes[account] = block.timestamp;\r\n                }\r\n            }\r\n            \r\n            //Emit events\r\n            emit Staked(account, amount);\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Stop staking program\r\n     */ \r\n    function stop() external onlyOwner{\r\n        _isRunning = false;\r\n        _stopTime = _now();\r\n\r\n        IERC20 bnuTokenContract = IERC20(_bnuTokenAddress);\r\n        if(bnuTokenContract.balanceOf(address(this)) > _totalStakedAmount)\r\n            bnuTokenContract.transfer(_owner, bnuTokenContract.balanceOf(address(this)) - _totalStakedAmount);\r\n        \r\n        emit Stopped(_now());\r\n    }\r\n    \r\n    /**\r\n     * @dev Withdraw staked amount in lockStage by index and pay earned token\r\n     * If withdraw amount = 0; only pay earned token\r\n     */ \r\n    function withdraw(uint256 amount) external returns(bool){\r\n        address account = _msgSender();\r\n        if(amount > 0){\r\n            require(amount <= _getUserStakedAmount(account), \"Amount is invalid\");\r\n        }\r\n        //Calculate interest and store with extra interest\r\n        _calculateInterest(account);\r\n        \r\n        IERC20 bnuTokenContract = IERC20(_bnuTokenAddress);\r\n        \r\n        //Calculate to withdraw staked amount\r\n        if(amount > 0){\r\n            if(1701360000 < _now()){                //Lock until: Thu Nov 30 2023 23:00:00 GMT+0700\r\n                _userStakeds[account] -= amount;    //Do not need to check `amount` <= user staked\r\n                _totalStakedAmount -= amount;\r\n                \r\n                require(bnuTokenContract.transfer(account, amount), \"Can not pay staked amount for user\");\r\n            }\r\n        }\r\n        \r\n        uint256 eanedAmount = _userEarneds[account];\r\n        \r\n        //Pay all interest\r\n        if(eanedAmount > 0){\r\n            //Make sure that user can withdraw all their staked amount\r\n            if(bnuTokenContract.balanceOf(address(this)) - _totalStakedAmount >= eanedAmount){\r\n                require(bnuTokenContract.transfer(account, eanedAmount), \"Can not pay interest for user\");\r\n                _userEarneds[account] = 0;\r\n            }\r\n        }\r\n        \r\n        //Emit events \r\n        emit Withdrawn(account, amount);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Calculate and update user pending interest\r\n     */ \r\n    function _calculateInterest(address account) internal{\r\n        uint256 userStakedAmount = _userStakeds[account];\r\n        if(userStakedAmount > 0){\r\n            uint256 earnedAmount = _calculatePendingEarned(userStakedAmount, _getUserRewardPendingTime(account));\r\n            _userEarneds[account] += earnedAmount;\r\n        }\r\n        if(block.timestamp < _startTime)\r\n            _userLastEarnedTimes[account] = _startTime;\r\n        else\r\n            _userLastEarnedTimes[account] = _now();\r\n    }\r\n    \r\n    /**\r\n     * @dev Calculate interest for user from `lastStakingTime` to  `now`\r\n     * based on user staked amount and annualProfit\r\n     */ \r\n    function _calculatePendingEarned(uint256 userStakedAmount, uint256 pendingTime) internal view returns(uint){\r\n        return userStakedAmount * pendingTime * _annualProfit / MULTIPLIER / ONE_YEAR / 100;\r\n    }\r\n    \r\n    /**\r\n     * @dev Check user has staked or not\r\n     */\r\n    function _isUserStaked(address account) internal view returns(bool){\r\n        for(uint256 index = 0; index < _stakingUsers.length; index++){\r\n            if(_stakingUsers[index] == account)\r\n                return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n    \r\n    function _getUserLastEarnedTime(address account) internal view returns(uint){\r\n        if(block.timestamp < _startTime)\r\n            return _startTime;\r\n        return _userLastEarnedTimes[account];\r\n    }\r\n    \r\n    function _getUserLastStakingTime(address account) internal view returns(uint){\r\n        return _userLastStakingTimes[account];\r\n    }\r\n    \r\n    function _getUserRewardPendingTime(address account) internal view returns(uint){\r\n         if(block.timestamp < _startTime)\r\n            return 0;\r\n        if(!_isRunning && _stopTime > 0)\r\n            return _stopTime - _getUserLastEarnedTime(account);\r\n        return _now() - _getUserLastEarnedTime(account);\r\n    }\r\n\r\n    function _getUserStakedAmount(address account) internal view returns(uint){\r\n        return _userStakeds[account];\r\n    }\r\n    \r\n    event Staked(address account, uint256 amount);\r\n    event Withdrawn(address account, uint256 amount);\r\n    event Stopped(uint256 time);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Stopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_annualProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_bnuTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_stakingUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_stopTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_userEarneds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_userLastEarnedTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_userLastStakingTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_userStakeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveToBeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBnuTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRunningStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStopTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserEarnedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserLastEarnedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserLastStakingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserRewardPendingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"requestChangeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"annualProfit\",\"type\":\"uint256\"}],\"name\":\"setAnnualProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"setBnuTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"stakeMultiple\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleRunningStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AvatarArtStaking", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3bda60cd26a07c76a01161567f4957ef2707880b1460cdb3456883214c06483e"}