{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/InjectionV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./interfaces/ISwapV2.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\ncontract InjectionV2\\n{\\n    /**\\n     * External contracts.\\n     */\\n    IERC20 public usdc = IERC20(0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d);\\n    IERC20 public fur = IERC20(0x48378891d6E459ca9a56B88b406E8F4eAB2e39bF);\\n    ISwapV2 public swap = ISwapV2(0xbA8c06BE90FA46d634515716eAe4FFc3a8BFc4CD);\\n    IVault public vault = IVault(0x4de2b5D4a343dDFBeEf976B3ED34737440385071);\\n\\n    /**\\n     * Properties.\\n     */\\n    uint256 public injectionPerWeek = 50000e18;\\n    uint256 public minimumInjection = 1e18;\\n    uint256 public maximumInjection = 10000e18;\\n    uint256 public totalInjected;\\n    mapping(uint256 => uint256) private _injections;\\n\\n    /**\\n     * Events.\\n     */\\n    event Injection(uint256 amount);\\n\\n    /**\\n     * Constructor.\\n     */\\n    constructor() public\\n    {\\n        // Pre-fill this weeks injections so we're starting at contract\\n        // launch time instead of beginning of week.\\n        uint256 _injectionPerSecond_ = injectionPerWeek / 7 days;\\n        _injections[getWeek()] = _injectionPerSecond_ * getElapsedTimeThisWeek();\\n    }\\n\\n    /**\\n     * Injected by week.\\n     */\\n    function getInjected(uint256 week_) public view returns (uint256)\\n    {\\n        return _injections[week_];\\n    }\\n\\n    /**\\n     * Elapsed time this week.\\n     */\\n    function getElapsedTimeThisWeek() public view returns (uint256)\\n    {\\n        return block.timestamp % 7 days;\\n    }\\n\\n    /**\\n     * Remaining time this week.\\n     */\\n    function getRemainingTimeThisWeek() public view returns (uint256)\\n    {\\n        return 7 days - getElapsedTimeThisWeek();\\n    }\\n\\n    /**\\n     * Get available injections.\\n     */\\n    function getAvailableInjection() public view returns (uint256)\\n    {\\n        uint256 _usdcBalance_ = usdc.balanceOf(address(this));\\n        uint256 _injectionPerSecond_ = injectionPerWeek / 7 days;\\n        uint256 _availableToInject_ = (getElapsedTimeThisWeek() * _injectionPerSecond_) - _injections[getWeek()];\\n        if(_availableToInject_ < minimumInjection) _availableToInject_ = 0;\\n        if(_availableToInject_ > maximumInjection) _availableToInject_ = maximumInjection;\\n        if(_availableToInject_ > _usdcBalance_) _availableToInject_ = _usdcBalance_;\\n        return _availableToInject_;\\n    }\\n\\n    /**\\n     * Inject.\\n     */\\n    function inject() external\\n    {\\n        require(vault.participantBalance(msg.sender) > 0, \\\"Not a participant.\\\");\\n        uint256 _availableInjection_ = getAvailableInjection();\\n        require(_availableInjection_ > 0, \\\"No injection available.\\\");\\n        _injections[getWeek()] += _availableInjection_;\\n        totalInjected += _availableInjection_;\\n        usdc.approve(address(swap), _availableInjection_);\\n        swap.buy(address(usdc), _availableInjection_);\\n        fur.transfer(address(vault), fur.balanceOf(address(this)));\\n        emit Injection(_availableInjection_);\\n    }\\n\\n    /**\\n     * Get week.\\n     */\\n    function getWeek() public view returns (uint256)\\n    {\\n        return getWeekByTimestamp(block.timestamp);\\n    }\\n\\n    /**\\n     * Get week by timestamp.\\n     */\\n    function getWeekByTimestamp(uint256 timestamp_) public view returns (uint256)\\n    {\\n        return timestamp_ / 7 days;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISwapV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ISwapV2 {\\n    function addressBook (  ) external view returns ( address );\\n    function buy ( address payment_, uint256 amount_ ) external;\\n    function buyOutput ( address payment_, uint256 amount_ ) external view returns ( uint256 );\\n    function cooldownPeriod (  ) external view returns ( uint256 );\\n    function depositBuy ( address payment_, uint256 amount_, address referrer_ ) external;\\n    function depositBuy ( address payment_, uint256 amount_ ) external;\\n    function disableLiquidtyManager (  ) external;\\n    function enableLiquidityManager (  ) external;\\n    function exemptFromCooldown ( address participant_, bool value_ ) external;\\n    function factory (  ) external view returns ( address );\\n    function fur (  ) external view returns ( address );\\n    function initialize (  ) external;\\n    function lastSell ( address ) external view returns ( uint256 );\\n    function liquidityManager (  ) external view returns ( address );\\n    function liquidityManagerEnabled (  ) external view returns ( bool );\\n    function onCooldown ( address participant_ ) external view returns ( bool );\\n    function owner (  ) external view returns ( address );\\n    function pair (  ) external view returns ( address );\\n    function pause (  ) external;\\n    function paused (  ) external view returns ( bool );\\n    function proxiableUUID (  ) external view returns ( bytes32 );\\n    function pumpAndDumpMultiplier (  ) external view returns ( uint256 );\\n    function pumpAndDumpRate (  ) external view returns ( uint256 );\\n    function renounceOwnership (  ) external;\\n    function router (  ) external view returns ( address );\\n    function sell ( uint256 amount_ ) external;\\n    function sellOutput ( uint256 amount_ ) external view returns ( uint256 );\\n    function setAddressBook ( address address_ ) external;\\n    function setup (  ) external;\\n    function tax (  ) external view returns ( uint256 );\\n    function taxHandler (  ) external view returns ( address );\\n    function transferOwnership ( address newOwner ) external;\\n    function unpause (  ) external;\\n    function upgradeTo ( address newImplementation ) external;\\n    function upgradeToAndCall ( address newImplementation, bytes memory data ) external;\\n    function usdc (  ) external view returns ( address );\\n    function vault (  ) external view returns ( address );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IVault {\\n    struct Participant {\\n        uint256 startTime;\\n        uint256 balance;\\n        address referrer;\\n        uint256 deposited;\\n        uint256 compounded;\\n        uint256 claimed;\\n        uint256 taxed;\\n        uint256 awarded;\\n        bool negative;\\n        bool penalized;\\n        bool maxed;\\n        bool banned;\\n        bool teamWallet;\\n        bool complete;\\n        uint256 maxedRate;\\n        uint256 availableRewards;\\n        uint256 lastRewardUpdate;\\n        uint256 directReferrals;\\n        uint256 airdropSent;\\n        uint256 airdropReceived;\\n    }\\n    function addressBook (  ) external view returns ( address );\\n    function airdrop ( address to_, uint256 amount_ ) external returns ( bool );\\n    function availableRewards ( address participant_ ) external view returns ( uint256 );\\n    function claim (  ) external returns ( bool );\\n    function claimPrecheck ( address participant_ ) external view returns ( uint256 );\\n    function compound (  ) external returns ( bool );\\n    function autoCompound( address participant_ ) external returns ( bool );\\n    function deposit ( uint256 quantity_, address referrer_ ) external returns ( bool );\\n    function deposit ( uint256 quantity_ ) external returns ( bool );\\n    function depositFor ( address participant_, uint256 quantity_ ) external returns ( bool );\\n    function depositFor ( address participant_, uint256 quantity_, address referrer_ ) external returns ( bool );\\n    function getParticipant ( address participant_ ) external returns ( Participant memory );\\n    function initialize (  ) external;\\n    function maxPayout ( address participant_ ) external view returns ( uint256 );\\n    function maxThreshold (  ) external view returns ( uint256 );\\n    function owner (  ) external view returns ( address );\\n    function participantBalance ( address participant_ ) external view returns ( uint256 );\\n    function participantMaxed ( address participant_ ) external view returns ( bool );\\n    function participantStatus ( address participant_ ) external view returns ( uint256 );\\n    function pause (  ) external;\\n    function paused (  ) external view returns ( bool );\\n    function proxiableUUID (  ) external view returns ( bytes32 );\\n    function remainingPayout ( address participant_ ) external view returns ( uint256 );\\n    function renounceOwnership (  ) external;\\n    function rewardRate ( address participant_ ) external view returns ( uint256 );\\n    function setAddressBook ( address address_ ) external;\\n    function transferOwnership ( address newOwner ) external;\\n    function unpause (  ) external;\\n    function updateLookbackPeriods ( uint256 lookbackPeriods_ ) external;\\n    function updateMaxPayout ( uint256 maxPayout_ ) external;\\n    function updateMaxReturn ( uint256 maxReturn_ ) external;\\n    function updateNegativeClaims ( uint256 negativeClaims_ ) external;\\n    function updateNeutralClaims ( uint256 neutralClaims_ ) external;\\n    function updatePenaltyClaims ( uint256 penaltyClaims_ ) external;\\n    function updatePenaltyLookbackPeriods ( uint256 penaltyLookbackPeriods_ ) external;\\n    function updatePeriod ( uint256 period_ ) external;\\n    function updateRate ( uint256 claims_, uint256 rate_ ) external;\\n    function updateReferrer ( address referrer_ ) external;\\n    function upgradeTo ( address newImplementation ) external;\\n    function upgradeToAndCall ( address newImplementation, bytes memory data ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Injection\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"fur\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableInjection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getElapsedTimeThisWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"week_\",\"type\":\"uint256\"}],\"name\":\"getInjected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingTimeThisWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp_\",\"type\":\"uint256\"}],\"name\":\"getWeekByTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"injectionPerWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumInjection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumInjection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"contract ISwapV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInjected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "InjectionV2", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}