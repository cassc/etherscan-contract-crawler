{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Round.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n//\\r\\n//--------------------------\\r\\n// 44 65 66 69 4d 6f 6f 6e\\r\\n//--------------------------\\r\\n//\\r\\n//\\r\\n// UI:\\r\\n//\\r\\n// - Is round active ==========================================> [bool]    isActive\\r\\n// - Round end date ===========================================> [uint256] ROUND_END_DATE\\r\\n// - Tokens left ==============================================> [uint256] availableTreasury\\r\\n// - Return user liquid balance ===============================> [uint256] users[msg.sender].liquidBalance\\r\\n// - Pending for claim for user ===============================> [uint256] users[msg.sender].pendingForClaim\\r\\n// - Next unlock date for user ================================> [uint256] users[msg.sender].nextUnlockDate\\r\\n// - Check allowance ==========================================> [uint256] USDT.allowance(msg.sender, address(this))\\r\\n// - Buy tokens (recieve in USDT, input amount in Token) =======>           buyToken(uint256 _amount)\\r\\n// - Check if user tokens unlocked and transfer them to user ==>           claimTokens()\\r\\n// - Set allowance ============================================> call USDT contract from website directly\\r\\n//                                                       approve amount = 200000000000000000000000000 wei\\r\\n//                                                       this is WEI too much (\ud83e\udd21) but we'll never spend\\r\\n//                                                       more than 50k, this allows us to track\\r\\n//                                                       Token purchase amount limits\\r\\n//\\r\\n// DEPLOYMENT:\\r\\n//\\r\\n// - Deploy Token token\\r\\n// - Deploy SeedRound, pass Token && USDT token addresses to constructor\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"../libs/@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../libs/@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/ITOKEN.sol\\\";\\r\\n\\r\\ncontract Round is Ownable {\\r\\n\\r\\n  // -------------------------------------------------------------------------------------------------------\\r\\n  // ------------------------------- ROUND PARAMETERS\\r\\n  // -------------------------------------------------------------------------------------------------------\\r\\n\\r\\n\\r\\n  // @notice                            round conditions\\r\\n  uint256 constant public               ROUND_FUND = 60_000_000 ether;\\r\\n  uint256 constant public               TOKEN_PRICE_USDT = 100;                // price / 10,000 = 0.0075 usdt\\r\\n  uint256 constant public               MIN_PURCHASE = 1000 ether;            // 10 usdt\\r\\n  uint256 constant public               ROUND_START_DATE = \\t1669075200;        // 22.11.22 00:00\\r\\n  uint256 constant public               ROUND_END_DATE = \\t1672444800;          // 31.12.22 00:00\\r\\n  uint256 constant public               LOCK_PERIOD = 30 days;\\r\\n  uint256 constant public               TGE = 5;                              // 5% TGE\\r\\n  uint256 constant public               CLIFF = 62 days;                      // 2 month cliff (time before first unlock)\\r\\n  uint256 constant public               CLAIM_PERCENT = 790;                  // 7.9%\\r\\n  uint8 constant public                 NUM_CLAIMS = 12;                      // 12 claims to be performed in total      \\r\\n\\r\\n\\r\\n  // @notice                            token interfaces\\r\\n  address public                        TokenAddress;\\r\\n  address public                        usdtAddress;\\r\\n  IToken                                TOKEN;\\r\\n  IERC20                                USDT;\\r\\n\\r\\n  // @notice                            round state\\r\\n  uint256 public                        availableTreasury = ROUND_FUND;\\r\\n  bool    public                        isActive;\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n  // -------------------------------------------------------------------------------------------------------\\r\\n  // ------------------------------- USER MANAGMENT\\r\\n  // -------------------------------------------------------------------------------------------------------\\r\\n\\r\\n  // @notice                            user state structure\\r\\n  struct                                User {\\r\\n    uint256                             totalTokenBalance;  // total num of tokens user have bought through the contract\\r\\n    uint256                             tokensToIssue;      // num of tokens user have bought in current vesting period (non complete unlock cycle)\\r\\n    uint256                             liquidBalance;      // amount of tokens the contract already sent to user\\r\\n    uint256                             pendingForClaim;    // amount of user's tokens that are still locked\\r\\n    uint256                             nextUnlockDate;     // unix timestamp of next claim unlock (defined by LOCK_PERIOD)\\r\\n    uint16                              numUnlocks;         // months total\\r\\n    bool                                isLocked;           // are tokens currently locked\\r\\n    uint256                             initialPayout;      // takes into account TGE % for multiple purchases\\r\\n    bool                                hasBought;          // used in token purchase mechanics\\r\\n  }\\r\\n\\r\\n  // @notice                            keeps track of users\\r\\n  mapping(address => User) public       users;\\r\\n  address[] public                      icoTokenHolders;\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n  // -------------------------------------------------------------------------------------------------------\\r\\n  // ------------------------------- EVENTS\\r\\n  // -------------------------------------------------------------------------------------------------------\\r\\n\\r\\n  event                                 TokenPurchased(address indexed user, uint256 amount);\\r\\n  event                                 TokenClaimed(address indexed user,\\r\\n                                                    uint256 amount,\\r\\n                                                    uint256 claimsLeft,\\r\\n                                                    uint256 nextUnlockDate);\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n  // FUNCTIONS\\r\\n  //\\r\\n  // -------------------------------------------------------------------------------------------------------\\r\\n  // ------------------------------- Constructor\\r\\n  // -------------------------------------------------------------------------------------------------------\\r\\n\\r\\n  // @param                             [address] token => token address\\r\\n  // @param                             [address] usdt => USDT token address\\r\\n  constructor(address token, address usdt) {\\r\\n    TokenAddress = token;\\r\\n    usdtAddress = usdt;\\r\\n    TOKEN = IToken(token);\\r\\n    USDT = IERC20(usdt);\\r\\n    TOKEN.grantManagerToContractInit(address(this), ROUND_FUND);\\r\\n    isActive = true;\\r\\n  }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n  // -------------------------------------------------------------------------------------------------------\\r\\n  // ------------------------------- Modifiers\\r\\n  // -------------------------------------------------------------------------------------------------------\\r\\n\\r\\n  // @notice                            checks if tokens could be sold\\r\\n  // @param                             [uint256] amount => amount of tokens to sell\\r\\n  modifier                              areTokensAvailable(uint256 amount) {\\r\\n    require(amount >= MIN_PURCHASE,\\r\\n                      \\\"Lower than min purchase amount!\\\");\\r\\n    require(availableTreasury - amount >= 0,\\r\\n                      \\\"Not enough tokens left!\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  // @notice                            checks whether user's tokens are locked\\r\\n  modifier                              checkLock() {\\r\\n    require(users[msg.sender].pendingForClaim > 0,\\r\\n                                      \\\"Nothing to claim!\\\");\\r\\n    require(block.timestamp >= users[msg.sender].nextUnlockDate,\\r\\n                                      \\\"Tokens are still locked!\\\");\\r\\n    users[msg.sender].isLocked = false;\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  // @notice                            checks if round is active\\r\\n  modifier                              ifActive() {\\r\\n    if ((block.timestamp < ROUND_START_DATE) || (block.timestamp > ROUND_END_DATE) || availableTreasury == 0) {\\r\\n      isActive = false;\\r\\n      revert(\\\"Round is not active!\\\");\\r\\n    }\\r\\n    isActive = true;\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  // @notice                            checks if round is inactive\\r\\n  modifier                              ifInactive() {\\r\\n    if (block.timestamp <= ROUND_END_DATE && availableTreasury > 0) {\\r\\n      isActive = true;\\r\\n      revert(\\\"Round is still active!\\\");\\r\\n    }\\r\\n    isActive = false;\\r\\n    _;\\r\\n  }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n  // -------------------------------------------------------------------------------------------------------\\r\\n  // ------------------------------- ICO logic\\r\\n  // -------------------------------------------------------------------------------------------------------\\r\\n\\r\\n  // @notice                            checks if tokens are unlocked and transfers set % from pendingForClaim\\r\\n  //                                    user will recieve all remaining tokens with the last claim\\r\\n  function                              claimTokens() public checkLock() {\\r\\n    address                             user = msg.sender;\\r\\n    User  storage                       userStruct = users[user];\\r\\n    uint256                             amountToClaim;\\r\\n\\r\\n    require(userStruct.isLocked == false, \\\"Tokens are locked!\\\");\\r\\n    if (userStruct.numUnlocks < NUM_CLAIMS - 1) {\\r\\n      amountToClaim = (userStruct.tokensToIssue / 10_000) * CLAIM_PERCENT;\\r\\n    }\\r\\n    else if (userStruct.numUnlocks == NUM_CLAIMS - 1) {\\r\\n      amountToClaim = userStruct.pendingForClaim;\\r\\n    }\\r\\n    else {\\r\\n      revert(\\\"Everything is already claimed!\\\");\\r\\n    }\\r\\n    userStruct.isLocked = true;\\r\\n    TOKEN.mint(user, amountToClaim);\\r\\n    userStruct.liquidBalance += amountToClaim;\\r\\n    userStruct.pendingForClaim -= amountToClaim;\\r\\n    userStruct.nextUnlockDate += LOCK_PERIOD;\\r\\n    userStruct.numUnlocks += 1;\\r\\n\\r\\n    emit TokenClaimed(user,\\r\\n                     amountToClaim,\\r\\n                     NUM_CLAIMS - userStruct.numUnlocks, // number of claims left to perform\\r\\n                     userStruct.nextUnlockDate);\\r\\n  }\\r\\n\\r\\n  // @notice                            allows to purchase tokens\\r\\n  // @param                             [uint256] _amount => amount of tokens to purchase\\r\\n  function                              buyTokens(uint256 _amount) public areTokensAvailable(_amount) ifActive {\\r\\n    address                             user = msg.sender;\\r\\n    uint256                             priceUSDT = _amount / 10000 * TOKEN_PRICE_USDT;\\r\\n\\r\\n    require(USDT.allowance(msg.sender, address(this)) >= _amount,\\r\\n                      \\\"Not enough allowance, approve your USDT first!\\\");\\r\\n    require(USDT.balanceOf(user) >= priceUSDT, \\\"Not enough USDT tokens!\\\");\\r\\n    require(USDT.transferFrom(user, address(this), priceUSDT) == true, \\\"Failed to transfer USDT!\\\");\\r\\n    _lockAndDistribute(_amount, msg.sender);\\r\\n    emit TokenPurchased(msg.sender, _amount);\\r\\n  }\\r\\n\\r\\n  // @notice                            when user buys Token, TGE % is issued immediately\\r\\n  //                                    remaining tokens are locked for 12 * LOCK_PERIOD = 12 months + 2 months cliff\\r\\n  // @param                             [uint256] amount => amount of Token tokens to distribute\\r\\n  // @param                             [address] _to => address to issue tokens to\\r\\n  function                              _lockAndDistribute(uint256 _amount, address _to) private {\\r\\n    User  storage                       userStruct = users[_to];\\r\\n    uint256                             timestampNow = block.timestamp;\\r\\n\\r\\n    uint256 immediateAmount = (_amount / 100) * TGE;\\r\\n    TOKEN.mint(_to, immediateAmount);                                   // issue TGE % immediately\\r\\n    userStruct.initialPayout += immediateAmount;\\r\\n    userStruct.liquidBalance += immediateAmount;                        // issue TGE % immediately to struct\\r\\n    userStruct.pendingForClaim += _amount - immediateAmount;            // save the rest\\r\\n    userStruct.tokensToIssue = _amount;\\r\\n    userStruct.numUnlocks = 0;\\r\\n    if (!userStruct.hasBought) {\\r\\n      icoTokenHolders.push(_to);\\r\\n      userStruct.hasBought = true;\\r\\n    }\\r\\n\\r\\n    userStruct.totalTokenBalance += _amount;\\r\\n    availableTreasury -= _amount;\\r\\n    userStruct.nextUnlockDate = timestampNow + CLIFF;                 // lock tokens in cliff\\r\\n    userStruct.isLocked = true;\\r\\n  }\\r\\n\\r\\n  // @notice                            allows admin to issue tokens with vesting rules to address\\r\\n  // @param                             [uint256] _amount => amount of Token tokens to issue\\r\\n  // @param                             [address] _to => address to issue tokens to\\r\\n  function                              issueTokens(uint256 _amount, address _to) public areTokensAvailable(_amount) onlyOwner {\\r\\n    _lockAndDistribute(_amount, _to);\\r\\n    emit TokenPurchased(_to, _amount);\\r\\n  }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n  // -------------------------------------------------------------------------------------------------------\\r\\n  // ------------------------------- Admin\\r\\n  // -------------------------------------------------------------------------------------------------------\\r\\n\\r\\n  // @notice                            allows to withdraw raised funds (USDT)\\r\\n  // @param                             [address] _reciever => wallet to send tokens to\\r\\n  function                              withdrawRaisedFunds(address _reciever) public onlyOwner {\\r\\n    uint256                             balance = USDT.balanceOf(address(this));\\r\\n\\r\\n    USDT.transfer(_reciever, balance);\\r\\n  }\\r\\n\\r\\n  // @notice                            allows to withdraw remaining tokens after the round end\\r\\n  // @param                             [address] _reciever => wallet to send tokens to\\r\\n  function                              withdrawRemainingToken(address _reciever) public onlyOwner ifInactive {\\r\\n    TOKEN.mint(_reciever, availableTreasury);\\r\\n    availableTreasury = 0;\\r\\n  }\\r\\n\\r\\n  // @notice                            checks if round still active\\r\\n  function                              checkIfActive() public returns(bool) {\\r\\n    if ((block.timestamp <= ROUND_START_DATE) || (block.timestamp >= ROUND_END_DATE) || availableTreasury == 0) {\\r\\n      isActive = false;\\r\\n    }\\r\\n    if (block.timestamp > ROUND_START_DATE && block.timestamp < ROUND_END_DATE && availableTreasury > 0) {\\r\\n      isActive = true;\\r\\n    }\\r\\n    return(isActive);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"libs/@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../utils/Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"libs/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ITOKEN.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n//\\r\\n//--------------------------\\r\\n// 5F 30 78 30 30 6C 61 62\\r\\n//--------------------------\\r\\n//\\r\\n// Token contract interface\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IToken {\\r\\n  function        balanceOf(address account) external view returns (uint256);\\r\\n  function        transfer(address to, uint256 amount) external returns (bool);\\r\\n  function        transferFrom(address from,\\r\\n                               address to,\\r\\n                               uint256 amount\\r\\n                               ) external returns (bool);\\r\\n  function        approve(address spender, uint256 amount) external returns (bool);\\r\\n  function        allowance(address owner, address spender) external view returns (uint256);\\r\\n  function        grantManagerToContractInit(address account, uint256 amount) external;\\r\\n  function        revokeManagerAfterContractInit(address account) external;\\r\\n  function        mint(address to, uint256 amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"libs/@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdt\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimsLeft\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextUnlockDate\",\"type\":\"uint256\"}],\"name\":\"TokenClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLIFF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCK_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_PURCHASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUM_CLAIMS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUND_END_DATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUND_FUND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUND_START_DATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_PRICE_USDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableTreasury\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkIfActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"icoTokenHolders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"issueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensToIssue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingForClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextUnlockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"numUnlocks\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isLocked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"initialPayout\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasBought\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reciever\",\"type\":\"address\"}],\"name\":\"withdrawRaisedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reciever\",\"type\":\"address\"}],\"name\":\"withdrawRemainingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Round", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000cf3bb6ac0f6d987a5727e2d15e39c2d6061d5bec00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}