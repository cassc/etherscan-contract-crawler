{"SourceCode": "// SPDX-License-Identifier: GPL 3\r\npragma solidity >= 0.8.0 <0.9.0;\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IERC1155 is IERC165 {\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n    event URI(string value, uint256 indexed id);\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n    function balanceOfBatch(\r\n        address[] calldata accounts,\r\n        uint256[] calldata ids\r\n    ) external view returns (uint256[] memory);\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n// File: contracts/interfaces/IERC721.sol\r\n\r\n\r\n\r\npragma solidity >= 0.8.0 <0.9.0;\r\n\r\n\r\ninterface IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n    function approve(address to, uint256 tokenId) external;\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\ninterface InterfaceLootbox is IERC1155 {\r\n    function mintTo(address to, uint256 tokenId, uint256 amount) external;\r\n}\r\n\r\ncontract PolyhedraQorpoReward {\r\n    address public polyhedraNFT;\r\n    address public rewardSC;\r\n    uint256 public rewardTokenId;\r\n    uint256 public rewardAmount;\r\n    mapping(uint256 => bool) claimedRewards;\r\n\r\n\r\n    constructor (address polyhedraNFT_, address rewardSC_, uint256 rewardTokenId_, uint256 rewardAmount_){\r\n        polyhedraNFT = polyhedraNFT_;\r\n        rewardSC = rewardSC_;\r\n        rewardTokenId = rewardTokenId_;\r\n        rewardAmount = rewardAmount_;\r\n    }\r\n\r\n\r\n    function claimReward(uint256 tokenId) public {\r\n        require(claimedRewards[tokenId] == false, \"QorpoReward: Reward already claimed for this item!\");\r\n        claimedRewards[tokenId] = true;\r\n        require(IERC721(polyhedraNFT).ownerOf(tokenId) == msg.sender, \"QorpoReward: You are not the owner of the NFT!\");\r\n        InterfaceLootbox(rewardSC).mintTo(msg.sender, rewardTokenId, rewardAmount);\r\n    }\r\n\r\n    function isClaimed(uint256 tokenId) public view returns(bool){\r\n        return claimedRewards[tokenId];\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"polyhedraNFT_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardSC_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardTokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"polyhedraNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardSC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PolyhedraQorpoReward", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000007fff8035afef9c3931c222040351fba8d7f234fa0000000000000000000000005ad296feb9b8e6a69180326b106b98bcac8c94470000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000a", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6516c479f4550f460acf28c70d81ee47382cf7f1f7057a5ea1ee7a062a74342c"}