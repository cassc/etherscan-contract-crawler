{"SourceCode": "/**************************\r\n\r\n    \ud83c\udd52\ud83c\udd5e\ud83c\udd55\ud83c\udd55\ud83c\udd54\ud83c\udd54\ud83c\udd51\ud83c\udd54\ud83c\udd50\ud83c\udd5d\ud83c\udd62\r\n\r\nhttps://www.coffeebeans.farm/\r\n\r\n *****************************/\r\n\r\n// SPDX-License-Identifier:\tAGPL-3.0-or-later\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract CoffeeBeans {\r\n    uint256 private constant BEANS_REQ_PER_MINER = 1_080_000;\r\n    uint256 private constant INITIAL_MARKET_BEANS = 108_000_000_000;\r\n\r\n    uint256 private constant PSN = 10000;\r\n    uint256 private constant PSNH = 5000;\r\n\r\n    uint256 private constant getDevFeeVal = 300;\r\n    uint256 private constant getMarketingFeeVal = 300;\r\n\r\n    uint256 private marketBeans = INITIAL_MARKET_BEANS;\r\n\r\n    uint256 public uniqueUsers;\r\n    uint256 public START_TIME;\r\n    uint256 public channelPrice;\r\n\r\n    address public immutable owner;\r\n    address private devFeeReceiver;\r\n    address private marketingFeeReceiver;\r\n    address public signerAddress;\r\n\r\n    mapping(address => uint256) private academyMiners;\r\n    mapping(address => uint256) private claimedBeans;\r\n    mapping(address => uint256) private lastReplant;\r\n    mapping(address => bool) private hasParticipated;\r\n\r\n    mapping(address => address) private referrals;\r\n    mapping(string => Channel) public channelInfo;\r\n    mapping(address => string) public channelOwner;\r\n    mapping(address => bool) public botAddress;\r\n\r\n    struct Channel {\r\n        address receiver;\r\n        uint256 contribution;\r\n    }\r\n\r\n    error OnlyOwner(address);\r\n    error NonZeroMarketBeans(uint256);\r\n    error FeeTooLow();\r\n    error NotStarted(uint256);\r\n    error ValueTooLow();\r\n    error OnlyHuman(address);\r\n    error BuyChannelPriceError(address, uint256);\r\n    error ChannelAlreadyExists(address, string);\r\n    error ZeroAddress();\r\n    error AddressError(address);\r\n    error CallError(bytes);\r\n\r\n    event BuyChannel(address indexed user, string domain);\r\n    event Plant(address indexed user, string indexed domain, uint256 amount, uint256 beansBought);\r\n    event Harvest(address indexed user, uint256 amount, uint256 beansSold);\r\n\r\n    modifier hasStarted() {\r\n        if (block.timestamp < START_TIME) revert NotStarted(block.timestamp);\r\n        _;\r\n    }\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) revert OnlyOwner(msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier onlyHuman() {\r\n        if (tx.origin != msg.sender) {\r\n            revert OnlyHuman(msg.sender);\r\n        }\r\n        _;\r\n    }\r\n\r\n    constructor(address _devFeeReceiver, address _marcketFeeReceiver) payable {\r\n        owner = msg.sender;\r\n        devFeeReceiver = _devFeeReceiver;\r\n        marketingFeeReceiver = _marcketFeeReceiver;\r\n    }\r\n\r\n    function changeDevFeeReceiver(address newReceiver) external onlyOwner {\r\n        if (newReceiver == address(0)) revert ZeroAddress();\r\n        devFeeReceiver = newReceiver;\r\n    }\r\n\r\n    function setStartTime(uint256 time) external onlyOwner {\r\n        START_TIME = time;\r\n    }\r\n\r\n    function setBotAddress(address bot, bool flag) external onlyOwner {\r\n        if (isContract(bot)) {\r\n            botAddress[bot] = flag;\r\n        } else {\r\n            revert AddressError(bot);\r\n        }\r\n    }\r\n\r\n    function setChannelPrice(uint256 price) external onlyOwner {\r\n        channelPrice = price;\r\n    }\r\n\r\n    function buyChannel(string memory domain, address receiver) external payable {\r\n        if (receiver == address(0)) revert ZeroAddress();\r\n        if (msg.value < channelPrice) {\r\n            revert BuyChannelPriceError(receiver, msg.value);\r\n        }\r\n        if (isContract(receiver)) {\r\n            revert OnlyHuman(receiver);\r\n        }\r\n        Channel storage c = channelInfo[domain];\r\n        if (c.receiver != address(0)) {\r\n            revert ChannelAlreadyExists(receiver, domain);\r\n        }\r\n        c.receiver = receiver;\r\n        (bool success, bytes memory data) = devFeeReceiver.call{value: msg.value}(new bytes(0));\r\n        if (!success) revert CallError(data);\r\n        channelOwner[receiver] = domain;\r\n        emit BuyChannel(receiver, domain);\r\n    }\r\n\r\n    function init() external payable onlyOwner {\r\n        if (marketBeans > 0) revert NonZeroMarketBeans(marketBeans);\r\n    }\r\n\r\n    function fund() external payable onlyOwner {}\r\n\r\n    function bindChannelReceiver(string[] memory channels, address[] memory receivers) external onlyOwner {\r\n        uint256 len = channels.length;\r\n        for (uint256 i; i < len; i++) {\r\n            address r = receivers[i];\r\n            channelInfo[channels[i]].receiver = r;\r\n            channelOwner[r] = channels[i];\r\n\r\n            if (isContract(r)) {\r\n                revert OnlyHuman(r);\r\n            }\r\n        }\r\n    }\r\n\r\n    function plant(string memory channel, address ref) external payable hasStarted {\r\n        // require(\r\n        //     keccak256(abi.encodePacked(msg.sender, msg.value)).toEthSignedMessageHash().recover(v, r, s) ==\r\n        //         signerAddress,\r\n        //     \"collectBeans:Invalid signarure\"\r\n        // );\r\n        if (msg.value == 0) revert ValueTooLow();\r\n        uint256 beansBought = calculateBeansBuy(msg.value, address(this).balance - msg.value);\r\n        uint256 devFee = getDevFee(beansBought);\r\n        uint256 marketingFee = getMarketingFee(beansBought);\r\n        if (marketingFee == 0) revert FeeTooLow();\r\n        beansBought = beansBought - devFee - marketingFee;\r\n        Channel storage _channel = channelInfo[channel];\r\n        _channel.contribution += msg.value;\r\n\r\n        address channelReceiver = _channel.receiver;\r\n        if (channelReceiver == address(0)) {\r\n            (bool success, bytes memory data) = devFeeReceiver.call{\r\n                value: getDevFee(msg.value) + getMarketingFee(msg.value)\r\n            }(new bytes(0));\r\n            if (!success) revert CallError(data);\r\n        } else {\r\n            (bool success, bytes memory data) = devFeeReceiver.call{value: getDevFee(msg.value)}(new bytes(0));\r\n            if (!success) revert CallError(data);\r\n\r\n            (bool success1, bytes memory data1) = channelReceiver.call{value: getMarketingFee(msg.value)}(new bytes(0));\r\n            if (!success1) revert CallError(data1);\r\n        }\r\n        claimedBeans[msg.sender] += beansBought;\r\n        if (!hasParticipated[msg.sender]) {\r\n            hasParticipated[msg.sender] = true;\r\n            uniqueUsers++;\r\n        }\r\n        if (isContract(msg.sender)) {\r\n            botAddress[msg.sender] = true;\r\n        }\r\n\r\n        emit Plant(msg.sender, channel, msg.value, beansBought);\r\n        replant(ref);\r\n    }\r\n\r\n    function replant(address ref) public hasStarted {\r\n        if (ref == msg.sender || ref == address(0) || ref == address(this)) ref = marketingFeeReceiver;\r\n        if (referrals[msg.sender] == address(0) && referrals[msg.sender] != msg.sender) {\r\n            referrals[msg.sender] = ref;\r\n            if (!hasParticipated[ref]) {\r\n                hasParticipated[ref] = true;\r\n                uniqueUsers++;\r\n            }\r\n        }\r\n        uint256 beansUsed = getMyBeans(msg.sender);\r\n        uint256 myBeansRewards = getBeansSinceLastReplant(msg.sender);\r\n        claimedBeans[msg.sender] += myBeansRewards;\r\n\r\n        uint256 newMiners = claimedBeans[msg.sender] / BEANS_REQ_PER_MINER;\r\n        claimedBeans[msg.sender] -= (BEANS_REQ_PER_MINER * newMiners);\r\n        academyMiners[msg.sender] += newMiners;\r\n        lastReplant[msg.sender] = block.timestamp;\r\n\r\n        claimedBeans[referrals[msg.sender]] += (beansUsed / 8);\r\n\r\n        marketBeans += (beansUsed / 5);\r\n    }\r\n\r\n    function harvest() external hasStarted {\r\n        if (botAddress[msg.sender]) revert AddressError(msg.sender);\r\n        uint256 ownedBeans = getMyBeans(msg.sender);\r\n        uint256 beanValue = calculateBeansSell(ownedBeans);\r\n\r\n        uint256 devFee = getDevFee(beanValue);\r\n        uint256 marketingFee = getMarketingFee(beanValue);\r\n\r\n        if (academyMiners[msg.sender] == 0) uniqueUsers--;\r\n        claimedBeans[msg.sender] = 0;\r\n        lastReplant[msg.sender] = block.timestamp;\r\n        marketBeans += ownedBeans;\r\n\r\n        (bool success, bytes memory data) = devFeeReceiver.call{value: devFee + marketingFee}(new bytes(0));\r\n        if (!success) revert CallError(data);\r\n        (bool success1, bytes memory data1) = msg.sender.call{value: beanValue - devFee - marketingFee}(new bytes(0));\r\n        if (!success1) revert CallError(data1);\r\n\r\n        emit Harvest(msg.sender, beanValue, ownedBeans);\r\n    }\r\n\r\n    function beanRewards(address adr) external view returns (uint256) {\r\n        uint256 beans = getMyBeans(adr);\r\n        return beans == 0 ? 0 : calculateBeansSell(beans);\r\n    }\r\n\r\n    function calculateBeansSell(uint256 beans) public view returns (uint256) {\r\n        return calculateTrade(beans, marketBeans, address(this).balance);\r\n    }\r\n\r\n    function calculateBeansBuy(uint256 eth, uint256 contractBalance) public view returns (uint256) {\r\n        return calculateTrade(eth, contractBalance, marketBeans);\r\n    }\r\n\r\n    function getBalance()\r\n        external\r\n        view\r\n        returns (\r\n            uint256 beansBalance,\r\n            uint256 userBalance,\r\n            uint256 myMiners\r\n        )\r\n    {\r\n        beansBalance = address(this).balance;\r\n        userBalance = msg.sender.balance;\r\n        myMiners = academyMiners[msg.sender];\r\n    }\r\n\r\n    function getMyBeans(address adr) public view returns (uint256) {\r\n        return claimedBeans[adr] + getBeansSinceLastReplant(adr);\r\n    }\r\n\r\n    function getBeansSinceLastReplant(address adr) public view returns (uint256) {\r\n        return min(BEANS_REQ_PER_MINER, block.timestamp - lastReplant[adr]) * academyMiners[adr];\r\n    }\r\n\r\n    function calculateTrade(\r\n        uint256 rt,\r\n        uint256 rs,\r\n        uint256 bs\r\n    ) private pure returns (uint256) {\r\n        return (PSN * bs) / (PSNH + (((rs * PSN) + (rt * PSNH)) / rt));\r\n    }\r\n\r\n    function getDevFee(uint256 amount) private pure returns (uint256) {\r\n        return (amount * getDevFeeVal) / 10000;\r\n    }\r\n\r\n    function getMarketingFee(uint256 amount) private pure returns (uint256) {\r\n        return (amount * getMarketingFeeVal) / 10000;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marcketFeeReceiver\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"AddressError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BuyChannelPriceError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"CallError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"ChannelAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NonZeroMarketBeans\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NotStarted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"OnlyHuman\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"OnlyOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ValueTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"domain\",\"type\":\"string\"}],\"name\":\"BuyChannel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beansSold\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"domain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beansBought\",\"type\":\"uint256\"}],\"name\":\"Plant\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"START_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"beanRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"channels\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"}],\"name\":\"bindChannelReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"botAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"domain\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"buyChannel\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateBeansBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"beans\",\"type\":\"uint256\"}],\"name\":\"calculateBeansSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"changeDevFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"channelInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contribution\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"channelOwner\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"channelPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"beansBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"myMiners\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getBeansSinceLastReplant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getMyBeans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"plant\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"replant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bot\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setBotAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setChannelPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniqueUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CoffeeBeans", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "000000000000000000000000acd8881cc04acdc3e09e9e9d30d74bc824753970000000000000000000000000acd8881cc04acdc3e09e9e9d30d74bc824753970", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6ac184ee23be635469f4cc52c81354bcdf96504db95b2d99208bde91eb425f24"}