{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function increaseApproval(address _spender, uint256 _addedValue) external returns (bool);\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) { return 0; }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    address public mintAccessor;\r\n    address public mintDest;\r\n    address public mintAccessorChanger;\r\n    address public mintDestChanger;\r\n    \r\n    event MintAccessorChanged (address indexed from, address indexed to);\r\n    event MintDestChanged (address indexed from, address indexed to);\r\n    event MintAccessorChangerChanged (address indexed from, address indexed to);\r\n    event MintDestChangerChanged (address indexed from, address indexed to);\r\n    \r\n    /**\r\n    * change destination of mint address\r\n    */\r\n    function changeMintDestAddress(address addr) public{\r\n        require(msg.sender == mintDestChanger);\r\n        emit MintDestChanged(mintDest, addr);\r\n        mintDest = addr;\r\n    }\r\n    \r\n    /**\r\n    * change the mint destination changer\r\n    */\r\n    function changeMintDestChangerAddress(address addr) public{\r\n        require(msg.sender == mintDestChanger);\r\n        emit MintDestChangerChanged(mintDestChanger, addr);\r\n        mintDestChanger = addr;\r\n    }\r\n    \r\n     /**\r\n    * change the mint accessor changer\r\n    */\r\n    function changeMintAccessorChanger(address addr) public{\r\n        require(msg.sender == mintAccessorChanger);\r\n        emit MintAccessorChangerChanged(mintAccessorChanger, addr);\r\n        mintAccessorChanger = addr;\r\n    }\r\n    \r\n     /**\r\n    * change accessor of mint function\r\n    */\r\n    function changeMintAccessorAddress(address addr) public{\r\n        require(msg.sender == mintAccessorChanger);\r\n        emit MintAccessorChanged(mintAccessor, addr);\r\n        mintAccessor = addr;\r\n    }\r\n}\r\n\r\n\r\ncontract PallapayToken is IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) internal balances;\r\n    mapping(address => mapping(address => uint256)) internal allowances;\r\n    uint256 internal totalSupply_;\r\n    string public   name;\r\n    string public   symbol;\r\n    uint8  public   decimals;\r\n    uint256 private maximumSupply;\r\n\r\n    constructor(address mintAccessorAddress, address mintDestAddress, address mintAccessorChangerAddress, address mintDestChangerAddress,uint256 initialSupply, uint256 mSupply) {\r\n        mintAccessor = mintAccessorAddress;\r\n        mintDest = mintDestAddress;\r\n        mintAccessorChanger = mintAccessorChangerAddress;\r\n        mintDestChanger = mintDestChangerAddress;\r\n\r\n        name = \"Pallapay\";\r\n        symbol = \"PALLA\";\r\n        decimals = 18;\r\n\r\n        balances[mintAccessor] = initialSupply * (10 ** decimals);\r\n        totalSupply_ = initialSupply * (10 ** decimals);\r\n        maximumSupply = mSupply * (10 ** decimals);\r\n        emit Transfer(address(0), mintAccessor, initialSupply * (10 ** decimals));\r\n    }\r\n\r\n\r\n    /**\r\n     * Transfer token from sender(caller) to '_to' account\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `_to` cannot be the zero address.\r\n     * - the sender(caller) must have a balance of at least `_value`.\r\n     */\r\n    function transfer(address _to, uint256 _value) public override returns (bool) {\r\n        require (_value <= balances[msg.sender], \"transfer value should be smaller than your balance\");\r\n        require (_to != address(0));\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * sender(caller) transfer '_value' token to '_to' address from '_from' address\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `_to` and `_from` cannot be the zero address.\r\n     * - `_from` must have a balance of at least `_value` .\r\n     * - the sender(caller) must have allowance for `_from`'s tokens of at least `_value`.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public override returns (bool) {\r\n        require (_from != address(0),\"_from address is not valid\");\r\n        require (_to != address(0),\"_to address is not valid\");\r\n        require(_value<=allowances[_from][msg.sender], \"_value should be smaller than your allowance\");\r\n        require(_value<=balances[_from],\"_value should be smaller than _from's balance\");\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * change allowance of `_spender` to `_value` by sender(caller)\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address _spender, uint256 _value) public override returns (bool) {\r\n        require (_spender != address(0),  \"_spender is not valid address\");\r\n        allowances[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Atomically increases the allowance granted to `spender` by the sender(caller).\r\n    * Emits an {Approval} event indicating the updated allowance.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `spender` cannot be the zero address.\r\n    */\r\n    function increaseApproval(address _spender, uint _addedValue) public override returns (bool) {\r\n        require (_spender != address(0),  \"_spender is not valid address\");\r\n        allowances[msg.sender][_spender] = allowances[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowances[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Atomically decreases the allowance granted to `spender` by the sender(caller).\r\n    * Emits an {Approval} event indicating the updated allowance.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `_spender` cannot be the zero address.\r\n    * - `_spender` must have allowance for the caller of at least `_subtractedValue`.\r\n    */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public override returns (bool) {\r\n        require (_spender != address(0),  \"_spender is not valid address\");\r\n        uint oldValue = allowances[msg.sender][_spender];\r\n        allowances[msg.sender][_spender] = _subtractedValue > oldValue ? 0 : oldValue.sub(_subtractedValue);\r\n        emit Approval(msg.sender, _spender, allowances[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n    * Destroys `amount` tokens from `account`, reducing the\r\n    * total supply.\r\n    * Emits a {Transfer} event with `to` set to the zero address.\r\n    *\r\n    * Requirements:\r\n    * - `amount` cannot be less than zero.\r\n    * - `amount` cannot be more than sender(caller)'s balance.\r\n    */\r\n    function burn(uint256 amount) public {\r\n        require(amount > 0, \"amount cannot be less than zero\");\r\n        require(amount <= balances[msg.sender], \"amount to burn is more than the caller's balance\");\r\n        balances[msg.sender] = balances[msg.sender].sub(amount);\r\n        totalSupply_ = totalSupply_.sub(amount);\r\n        emit Transfer(msg.sender, address(0), amount);\r\n    }\r\n    \r\n\r\n    /**\r\n    * sender(caller) create a 'value' token mint request.\r\n    *\r\n    * Requirement:\r\n    * - sender(Caller) should be mintAccessorAddress\r\n    */\r\n    function mint(uint256 value) public {\r\n        require(msg.sender == mintAccessor,\"you are not permitted to create mint request!\");\r\n        require(totalSupply().add(value) <= maxSupply(), \"mint value more than maxSupply is not allowed!\");\r\n\r\n        totalSupply_ = totalSupply_.add(value);\r\n        balances[mintDest] = balances[mintDest].add(value);\r\n        emit Transfer(address(0), mintDest, value);\r\n    }\r\n\r\n    function totalSupply() public override view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    function balanceOf(address _owner) public override view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public override view returns (uint256) {\r\n        return allowances[_owner][_spender];\r\n    }\r\n\r\n\r\n    function maxSupply() public view returns(uint256) {\r\n        return maximumSupply;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mintAccessorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mintDestAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mintAccessorChangerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mintDestChangerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"MintAccessorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"MintAccessorChangerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"MintDestChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"MintDestChangerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"changeMintAccessorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"changeMintAccessorChanger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"changeMintDestAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"changeMintDestChangerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintAccessor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintAccessorChanger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintDest\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintDestChanger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PallapayToken", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a5537e58488440a73f6b7958b321bbdde9af4b59000000000000000000000000d799f5ed5a9fb7486f3039fe005294a82b77098300000000000000000000000001da31749b4b5111ae36899101ca220825ae29ae000000000000000000000000104bfafcd4e2bf890a34ba5e11ca7994a6e8d9e200000000000000000000000000000000000000000000000000000000773594000000000000000000000000000000000000000000000000000000000077359400", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2befa0321290c35d52b6e17707b51f8d406105cb9f47c795383657cc53adb621"}