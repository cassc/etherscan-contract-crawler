{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval (address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IPresale {\r\n    function balance(address account,uint256 round) external view returns (uint256);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() { _transferOwnership(_msgSender()); }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract ICOClaimer is Ownable {\r\n\r\n    address ICO = 0xe5F1C3f6e28C25D7078c71375Aa2D81d40f8439d;\r\n    address KEE = 0x572E4DdB898Bf5b3A0cCf6146763896b2FA72Fdf;\r\n\r\n    uint256[] spenderAmount = [\r\n        500000000000000000000000000000,\r\n        750000000000000000000000000000,\r\n        1000000000000000000000000000000,\r\n        1250000000000000000000000000000\r\n    ];\r\n\r\n    uint256[] hardcap = [\r\n        2500000000000000000000,\r\n        5625000000000000000000,\r\n        10000000000000000000000,\r\n        15625000000000000000000\r\n    ];\r\n\r\n    uint256[] rised = [\r\n        2499999999999999934464,\r\n        5624999999999999663616,\r\n        9999999999999999016064,\r\n        9575169929999999996288\r\n    ];\r\n    \r\n    IPresale ico;\r\n    IERC20 kee;\r\n\r\n    address constant zero = address(0);\r\n    address constant dead = address(0xdead);\r\n\r\n    uint256 sevenday = 60 * 60 * 24 * 7;\r\n\r\n    mapping(address => mapping(uint256 => bool)) public claimed;\r\n    mapping(uint256 => uint256) public unlockBlock;\r\n\r\n    bool locked;\r\n    modifier noReentrant() {\r\n        require(!locked, \"This Contract Protected By noReentrant!\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n\r\n    constructor() {\r\n        ico = IPresale(ICO);\r\n        kee = IERC20(KEE);\r\n        unlockBlock[0] = 1703865600;\r\n        unlockBlock[1] = 1703865600 + (sevenday * 1);\r\n        unlockBlock[2] = 1703865600 + (sevenday * 2);\r\n        unlockBlock[3] = 1703865600 + (sevenday * 3);\r\n        unlockBlock[4] = 1703865600 + (sevenday * 4);\r\n        unlockBlock[5] = 1703865600 + (sevenday * 5);\r\n        unlockBlock[6] = 1703865600 + (sevenday * 6);\r\n        unlockBlock[7] = 1703865600 + (sevenday * 7);\r\n        unlockBlock[8] = 1703865600 + (sevenday * 8);\r\n        unlockBlock[9] = 1703865600 + (sevenday * 9);\r\n        unlockBlock[10] = 1703865600 + (sevenday * 10);\r\n        unlockBlock[11] = 1703865600 + (sevenday * 11);\r\n        unlockBlock[12] = 1703865600 + (sevenday * 12);\r\n        unlockBlock[13] = 1703865600 + (sevenday * 13);\r\n        unlockBlock[14] = 1703865600 + (sevenday * 14);\r\n        unlockBlock[15] = 1703865600 + (sevenday * 15);\r\n    }\r\n\r\n    function ICOClaimerToken(address account,uint256 round) public noReentrant returns (bool) {\r\n        require(round<=15,\"error: claim round is out of range\");\r\n        require(!claimed[account][round],\"error: this round was claimed\");\r\n        require(block.timestamp>unlockBlock[round],\"error: please wait to unlock\");\r\n        claimed[account][round] = true;\r\n        uint256 amountToClaim = totalTokenBeClaim(account) * 250 / 1000;\r\n        if(round>0){ amountToClaim = amountToClaim / 5; }\r\n        kee.transfer(account,amountToClaim);\r\n        return true;\r\n    }\r\n\r\n    function totalTokenBeClaim(address account) public view returns (uint256) {\r\n        uint256 result;\r\n        for(uint256 i = 0; i < 4; i++){\r\n            uint256 distribute = spenderAmount[i] * rised[i] / hardcap[i];\r\n            result += distribute * ico.balance(account,i+1) / rised[i];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function getICOInfo(address account) public view returns (uint256,uint256[] memory) {\r\n        uint256[] memory usdt = new uint256[](4);\r\n        usdt[0] = ico.balance(account,1);\r\n        usdt[1] = ico.balance(account,2);\r\n        usdt[2] = ico.balance(account,3);\r\n        usdt[3] = ico.balance(account,4);\r\n        uint256 value = usdt[0] + usdt[1] + usdt[2] + usdt[3];\r\n        return (value,usdt);\r\n    }\r\n\r\n    function callFunction(address to,bytes memory data,uint256 value) public onlyOwner returns (bytes memory) {\r\n        if(value>0){\r\n            (bool success,bytes memory result) = to.call{ value: value }(data);\r\n            require(success);\r\n            return result;\r\n        }else{\r\n            (bool success,bytes memory result) = to.call(data);\r\n            require(success);\r\n            return result;\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"ICOClaimerToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"callFunction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getICOInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"totalTokenBeClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unlockBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ICOClaimer", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2ea33b8b1c3b442d492a317a2e45bca67e849e8f33c8439cb054cc4868ee9d17"}