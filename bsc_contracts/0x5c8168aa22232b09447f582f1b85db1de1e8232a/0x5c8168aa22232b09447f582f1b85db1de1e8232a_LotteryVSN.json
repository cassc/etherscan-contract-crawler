{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILottery.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface ILottery {\\n    /**\\n     * @notice Buy tickets for the current lottery\\n     * @param _tokenId,\\n     * @param _lotteryId: lotteryId\\n     * @param _ticketNumbers: array of ticket numbers between 1,000,000 and 1,999,999\\n     * @dev Callable by users\\n     */\\n    function buyTickets(\\n        uint256 _tokenId,\\n        uint256 _lotteryId,\\n        uint32[] calldata _ticketNumbers\\n    ) external;\\n\\n    /**\\n     * @notice Claim a set of winning tickets for a lottery\\n     * @param _lotteryId: lottery id\\n     * @param _ticketIds: array of ticket ids\\n     * @param _brackets: array of brackets for the ticket ids\\n     * @dev Callable by users only, not contract!\\n     */\\n    function claimTickets(\\n        uint256 _lotteryId,\\n        uint256[] calldata _ticketIds,\\n        uint32[] calldata _brackets\\n    ) external;\\n\\n    /**\\n     * @notice Close lottery\\n     * @param _lotteryId: lottery id\\n     * @dev Callable by operator\\n     */\\n    function closeLottery(uint256 _lotteryId) external;\\n\\n    /**\\n     * @notice Draw the final number, calculate reward in CAKE per group, and make lottery claimable\\n     * @param _lotteryId: lottery id\\n     * @param _autoInjection: reinjects funds into next lottery (vs. withdrawing all)\\n     * @dev Callable by operator\\n     */\\n    function drawFinalNumberAndMakeLotteryClaimable(\\n        uint256 _lotteryId,\\n        bool _autoInjection\\n    ) external;\\n\\n    /**\\n     * @notice Inject funds\\n     * @param _tokenId,\\n     * @param _lotteryId: lottery id\\n     * @param _amount: amount to inject in CAKE token\\n     * @dev Callable by operator\\n     */\\n    function injectFunds(\\n        uint256 _tokenId,\\n        uint256 _lotteryId,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @notice Start the lottery\\n     * @dev Callable by operator\\n     * @param _endTime: endTime of the lottery\\n     * @param _discountDivisor: the divisor to calculate the discount magnitude for bulks\\n     * @param _rewardsBreakdown: breakdown of rewards per bracket (must sum to 10,000)\\n     * @param _treasuryFee: treasury fee (10,000 = 100%, 100 = 1%)\\n     */\\n    function startLottery(\\n        uint256 _endTime,\\n        uint256 _discountDivisor,\\n        uint256[6] calldata _rewardsBreakdown,\\n        uint256 _treasuryFee\\n    ) external;\\n\\n    /**\\n     * @notice View current lottery id\\n     */\\n    function viewCurrentLotteryId() external returns (uint256);\\n\\n    /**\\n     * @notice View user ticket ids, numbers, and statuses of user for a given lottery\\n     * @param _user: user address\\n     * @param _lotteryId: lottery id\\n     * @param _cursor: cursor to start where to retrieve the tickets\\n     * @param _size: the number of tickets to retrieve\\n     */\\n    function viewUserInfoForLotteryId(\\n        address _user,\\n        uint256 _lotteryId,\\n        uint256 _cursor,\\n        uint256 _size\\n    )\\n        external\\n        view\\n        returns (uint256[] memory, uint32[] memory, bool[] memory, uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRandomNumberGenerator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IRandomNumberGenerator {\\n    /**\\n     * Requests randomness from a user-provided seed\\n     */\\n    function getRandomNumber() external;\\n\\n    /**\\n     * View latest lotteryId numbers\\n     */\\n    function viewLatestLotteryId() external view returns (uint256);\\n\\n    /**\\n     * Views random result\\n     */\\n    function viewRandomResult() external view returns (uint32);\\n}\\n\"\r\n    },\r\n    \"contracts/modules/Lottery/LotteryVSN.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../interfaces/IRandomNumberGenerator.sol\\\";\\nimport \\\"../../interfaces/ILottery.sol\\\";\\n\\n/** @title PancakeSwap Lottery.\\n * @notice It is a contract for a lottery system using\\n * randomness provided externally.\\n */\\ncontract LotteryVSN is ReentrancyGuard, ILottery, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    address public injectorAddress;\\n    address public operatorAddress;\\n    address public treasuryAddress;\\n\\n    uint256 public currentLotteryId;\\n    uint256 public currentTicketId;\\n\\n    uint256 public maxNumberTicketsPerBuyOrClaim = 100;\\n    mapping(uint256 => uint256) public pendingInjectionNextLottery;\\n\\n    uint256 public constant MIN_DISCOUNT_DIVISOR = 300;\\n    uint256 public constant MIN_LENGTH_LOTTERY = 1 hours - 5 minutes; // 4 hours\\n    uint256 public constant MAX_LENGTH_LOTTERY = 10 days + 5 minutes; // 10 days\\n    uint256 public constant MAX_TREASURY_FEE = 3000; // 30%\\n\\n    IRandomNumberGenerator public randomGenerator;\\n\\n    enum Status {\\n        Pending,\\n        Open,\\n        Close,\\n        Claimable\\n    }\\n\\n    struct Lottery {\\n        Status status;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 discountDivisor;\\n        uint256[6] rewardsBreakdown; // 0: 1 matching number // 5: 6 matching numbers\\n        uint256 treasuryFee; // 500: 5% // 200: 2% // 50: 0.5%\\n        uint256[6] countWinnersPerBracket;\\n        uint256 firstTicketId;\\n        uint256 firstTicketIdNextLottery;\\n        uint32 finalNumber;\\n    }\\n\\n    struct Ticket {\\n        uint32 number;\\n        address owner;\\n    }\\n\\n    struct TokenStorage {\\n        IERC20 tokenAddress;\\n        bool allow;\\n        uint256 ticketPrice;\\n    }\\n\\n    // Mapping are cheaper than arrays\\n    mapping(uint256 => Lottery) private _lotteries;\\n    mapping(uint256 => Ticket) private _tickets;\\n\\n    //Lottery\\n    mapping(uint256 => mapping(uint256 => uint256[6]))\\n        public amountPerTokenPerBracket; //cakePerBracket\\n    mapping(uint256 => mapping(uint256 => uint256))\\n        public amountCollectedPerToken; //amountCollectedInCake\\n\\n    mapping(uint256 => TokenStorage) public tokenStorage;\\n    uint256 public nextTokenStorageId;\\n\\n    // Bracket calculator is used for verifying claims for ticket prizes\\n    mapping(uint32 => uint32) private _bracketCalculator;\\n\\n    // Keeps track of number of ticket per unique combination for each lotteryId\\n    mapping(uint256 => mapping(uint32 => uint256))\\n        private _numberTicketsPerLotteryId;\\n\\n    // Keep track of user ticket ids for a given lotteryId\\n    mapping(address => mapping(uint256 => uint256[]))\\n        private _userTicketIdsPerLotteryId;\\n\\n    modifier notContract() {\\n        require(!_isContract(msg.sender), \\\"Contract not allowed\\\");\\n        require(msg.sender == tx.origin, \\\"Proxy contract not allowed\\\");\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(msg.sender == operatorAddress, \\\"Not operator\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwnerOrInjector() {\\n        require(\\n            (msg.sender == owner()) || (msg.sender == injectorAddress),\\n            \\\"Not owner or injector\\\"\\n        );\\n        _;\\n    }\\n\\n    event AdminTokenRecovery(address token, uint256 amount);\\n    event LotteryClose(\\n        uint256 indexed lotteryId,\\n        uint256 firstTicketIdNextLottery\\n    );\\n    event LotteryInjection(uint256 indexed lotteryId, uint256 injectedAmount);\\n    event LotteryOpen(\\n        uint256 indexed lotteryId,\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256[] _priceTickets,\\n        uint256 firstTicketId,\\n        uint256[] injectedAmount\\n    );\\n    event LotteryNumberDrawn(\\n        uint256 indexed lotteryId,\\n        uint256 finalNumber,\\n        uint256 countWinningTickets\\n    );\\n    event NewOperatorAndTreasuryAndInjectorAddresses(\\n        address operator,\\n        address treasury,\\n        address injector\\n    );\\n    event NewRandomGenerator(address indexed randomGenerator);\\n    event TicketsPurchase(\\n        address indexed buyer,\\n        uint256 indexed lotteryId,\\n        uint256 firstTikectsId,\\n        uint256 numberTickets\\n    );\\n    event TicketsClaim(\\n        address indexed claimer,\\n        uint256[] amount,\\n        uint256 indexed lotteryId,\\n        uint256 numberTickets\\n    );\\n\\n    /**\\n     * @notice Constructor\\n     * @dev RandomNumberGenerator must be deployed prior to this contract\\n     * @param _tokenAddress: address of the token token\\n     * @param _priceTicket: address of the token token\\n     * @param _randomGeneratorAddress: address of the RandomGenerator contract used to work with ChainLink VRF\\n     */\\n    constructor(\\n        address _tokenAddress,\\n        uint256 _priceTicket,\\n        address _randomGeneratorAddress\\n    ) {\\n        addTokenStorage(_tokenAddress, _priceTicket);\\n        randomGenerator = IRandomNumberGenerator(_randomGeneratorAddress);\\n\\n        // Initializes a mapping\\n        _bracketCalculator[0] = 1;\\n        _bracketCalculator[1] = 11;\\n        _bracketCalculator[2] = 111;\\n        _bracketCalculator[3] = 1111;\\n        _bracketCalculator[4] = 11111;\\n        _bracketCalculator[5] = 111111;\\n    }\\n\\n    function addTokenStorage(\\n        address _tokenAddress,\\n        uint _tokenPrice\\n    ) public onlyOwner {\\n        require(\\n            (currentLotteryId == 0) ||\\n                (_lotteries[currentLotteryId].status == Status.Claimable),\\n            \\\"Finish last lottery\\\"\\n        );\\n        tokenStorage[nextTokenStorageId] = TokenStorage({\\n            tokenAddress: IERC20(_tokenAddress),\\n            allow: true,\\n            ticketPrice: _tokenPrice\\n        });\\n        nextTokenStorageId++;\\n    }\\n\\n    function setAllowTokenStorage(\\n        uint256 _idToken,\\n        bool newState\\n    ) public onlyOwner {\\n        require(\\n            (currentLotteryId == 0) ||\\n                (_lotteries[currentLotteryId].status == Status.Claimable),\\n            \\\"Finish last lottery\\\"\\n        );\\n        require(_idToken < nextTokenStorageId, \\\"Not exist token\\\");\\n        require(_idToken < nextTokenStorageId, \\\"Not exist token\\\");\\n        tokenStorage[nextTokenStorageId].allow = newState;\\n    }\\n\\n    /**\\n     * @notice Buy tickets for the current lottery\\n     * @param _lotteryId: lotteryId\\n     * @param _ticketNumbers: array of ticket numbers between 1,000,000 and 1,999,999\\n     * @dev Callable by users\\n     */\\n    function buyTickets(\\n        uint256 _tokenId,\\n        uint256 _lotteryId,\\n        uint32[] calldata _ticketNumbers\\n    ) external override notContract nonReentrant {\\n        require(tokenStorage[_tokenId].allow, \\\"Token is not allow\\\");\\n\\n        require(_ticketNumbers.length != 0, \\\"No ticket specified\\\");\\n        require(\\n            _ticketNumbers.length <= maxNumberTicketsPerBuyOrClaim,\\n            \\\"Too many tickets\\\"\\n        );\\n\\n        require(\\n            _lotteries[_lotteryId].status == Status.Open,\\n            \\\"Lottery is not open\\\"\\n        );\\n        require(\\n            block.timestamp < _lotteries[_lotteryId].endTime,\\n            \\\"Lottery is over\\\"\\n        );\\n\\n        // Calculate number of token to this contract\\n        uint256 amountCakeToTransfer = _calculateTotalPriceForBulkTickets(\\n            _lotteries[_lotteryId].discountDivisor,\\n            tokenStorage[_tokenId].ticketPrice,\\n            _ticketNumbers.length\\n        );\\n\\n        // Transfer cake tokens to this contract\\n        tokenStorage[_tokenId].tokenAddress.safeTransferFrom(\\n            address(msg.sender),\\n            address(this),\\n            amountCakeToTransfer\\n        );\\n\\n        // Increment the total amount collected for the lottery round\\n        amountCollectedPerToken[_lotteryId][_tokenId] += amountCakeToTransfer;\\n\\n        uint256 _firstTikectsId = currentTicketId;\\n\\n        for (uint256 i = 0; i < _ticketNumbers.length; i++) {\\n            uint32 thisTicketNumber = _ticketNumbers[i];\\n\\n            require(\\n                (thisTicketNumber >= 1000000) && (thisTicketNumber <= 1999999),\\n                \\\"Outside range\\\"\\n            );\\n\\n            _numberTicketsPerLotteryId[_lotteryId][\\n                1 + (thisTicketNumber % 10)\\n            ]++;\\n            _numberTicketsPerLotteryId[_lotteryId][\\n                11 + (thisTicketNumber % 100)\\n            ]++;\\n            _numberTicketsPerLotteryId[_lotteryId][\\n                111 + (thisTicketNumber % 1000)\\n            ]++;\\n            _numberTicketsPerLotteryId[_lotteryId][\\n                1111 + (thisTicketNumber % 10000)\\n            ]++;\\n            _numberTicketsPerLotteryId[_lotteryId][\\n                11111 + (thisTicketNumber % 100000)\\n            ]++;\\n            _numberTicketsPerLotteryId[_lotteryId][\\n                111111 + (thisTicketNumber % 1000000)\\n            ]++;\\n\\n            _userTicketIdsPerLotteryId[msg.sender][_lotteryId].push(\\n                currentTicketId\\n            );\\n\\n            _tickets[currentTicketId] = Ticket({\\n                number: thisTicketNumber,\\n                owner: msg.sender\\n            });\\n\\n            // Increase lottery ticket number\\n            currentTicketId++;\\n        }\\n\\n        emit TicketsPurchase(\\n            msg.sender,\\n            _lotteryId,\\n            _firstTikectsId,\\n            _ticketNumbers.length\\n        );\\n    }\\n\\n    /**\\n     * @notice Claim a set of winning tickets for a lottery\\n     * @param _lotteryId: lottery id\\n     * @param _ticketIds: array of ticket ids\\n     * @param _brackets: array of brackets for the ticket ids\\n     * @dev Callable by users only, not contract!\\n     */\\n    function claimTickets(\\n        uint256 _lotteryId,\\n        uint256[] calldata _ticketIds,\\n        uint32[] calldata _brackets\\n    ) external override notContract nonReentrant {\\n        require(_ticketIds.length == _brackets.length, \\\"Not same length\\\");\\n        require(_ticketIds.length != 0, \\\"Length must be >0\\\");\\n        require(\\n            _ticketIds.length <= maxNumberTicketsPerBuyOrClaim,\\n            \\\"Too many tickets\\\"\\n        );\\n        require(\\n            _lotteries[_lotteryId].status == Status.Claimable,\\n            \\\"Lottery not claimable\\\"\\n        );\\n\\n        // Initializes the rewardsToTransfer\\n        uint256[] memory rewardsToTransfer = new uint256[](nextTokenStorageId);\\n\\n        for (uint256 i = 0; i < _ticketIds.length; i++) {\\n            require(_brackets[i] < 6, \\\"Bracket out of range\\\"); // Must be between 0 and 5\\n\\n            uint256 thisTicketId = _ticketIds[i];\\n\\n            require(\\n                _lotteries[_lotteryId].firstTicketIdNextLottery > thisTicketId,\\n                \\\"TicketId too high\\\"\\n            );\\n            require(\\n                _lotteries[_lotteryId].firstTicketId <= thisTicketId,\\n                \\\"TicketId too low\\\"\\n            );\\n            require(\\n                msg.sender == _tickets[thisTicketId].owner,\\n                \\\"Not the owner\\\"\\n            );\\n\\n            // Update the lottery ticket owner to 0x address\\n            _tickets[thisTicketId].owner = address(0);\\n\\n            uint256[] memory rewardForTicketId = new uint256[](\\n                nextTokenStorageId\\n            );\\n            uint256 prizeAcc = 0;\\n            for (uint k = 0; k < nextTokenStorageId; k++) {\\n                rewardForTicketId[k] = _calculateRewardsForTicketId(\\n                    _lotteryId,\\n                    k,\\n                    thisTicketId,\\n                    _brackets[i]\\n                );\\n                if (rewardForTicketId[k] > 0) {\\n                    prizeAcc++;\\n                }\\n            }\\n            // Check user is claiming the correct bracket\\n            require(prizeAcc != 0, \\\"No prize for this bracket\\\");\\n\\n            // Increment the reward to transfer\\n            for (uint k = 0; k < nextTokenStorageId; k++) {\\n                rewardsToTransfer[k] += rewardForTicketId[k];\\n            }\\n        }\\n\\n        for (uint k = 0; k < nextTokenStorageId; k++) {\\n            // Transfer money to msg.sender\\n            if (tokenStorage[k].allow) {\\n                tokenStorage[k].tokenAddress.safeTransfer(\\n                    msg.sender,\\n                    rewardsToTransfer[k]\\n                );\\n            }\\n        }\\n\\n        emit TicketsClaim(\\n            msg.sender,\\n            rewardsToTransfer,\\n            _lotteryId,\\n            _ticketIds.length\\n        );\\n    }\\n\\n    /**\\n     * @notice Close lottery\\n     * @param _lotteryId: lottery id\\n     * @dev Callable by operator\\n     */\\n    function closeLottery(\\n        uint256 _lotteryId\\n    ) external override onlyOperator nonReentrant {\\n        require(\\n            _lotteries[_lotteryId].status == Status.Open,\\n            \\\"Lottery not open\\\"\\n        );\\n        require(\\n            block.timestamp > _lotteries[_lotteryId].endTime,\\n            \\\"Lottery not over\\\"\\n        );\\n        _lotteries[_lotteryId].firstTicketIdNextLottery = currentTicketId;\\n\\n        // Request a random number from the generator based on a seed\\n        randomGenerator.getRandomNumber();\\n\\n        _lotteries[_lotteryId].status = Status.Close;\\n\\n        emit LotteryClose(_lotteryId, currentTicketId);\\n    }\\n\\n    /**\\n     * @notice Draw the final number, calculate reward in token per group, and make lottery claimable\\n     * @param _lotteryId: lottery id\\n     * @param _autoInjection: reinjects funds into next lottery (vs. withdrawing all)\\n     * @dev Callable by operator\\n     */\\n    function drawFinalNumberAndMakeLotteryClaimable(\\n        uint256 _lotteryId,\\n        bool _autoInjection\\n    ) external override onlyOperator nonReentrant {\\n        require(\\n            _lotteries[_lotteryId].status == Status.Close,\\n            \\\"Lottery not close\\\"\\n        );\\n        require(\\n            _lotteryId == randomGenerator.viewLatestLotteryId(),\\n            \\\"Numbers not drawn\\\"\\n        );\\n\\n        // Calculate the finalNumber based on the randomResult generated by ChainLink's fallback\\n        uint32 finalNumber = randomGenerator.viewRandomResult();\\n\\n        // Initialize a number to count addresses in the previous bracket\\n        uint256 numberAddressesInPreviousBracket;\\n        // Calculate the amount to share post-treasury fee\\n        uint256[] memory amountToShareToWinners = new uint256[](\\n            nextTokenStorageId\\n        );\\n\\n        for (uint k = 0; k < nextTokenStorageId; k++) {\\n            amountToShareToWinners[k] =\\n                (\\n                    ((amountCollectedPerToken[_lotteryId][k]) *\\n                        (10000 - _lotteries[_lotteryId].treasuryFee))\\n                ) /\\n                10000;\\n        }\\n\\n        // Initializes the amount to withdraw to treasury\\n        uint256[] memory amountToWithdrawToTreasury = new uint256[](\\n            nextTokenStorageId\\n        );\\n        // Calculate prizes in token for each bracket by starting from the highest one\\n        for (uint32 i = 0; i < 6; i++) {\\n            uint32 j = 5 - i;\\n            uint32 transformedWinningNumber = _bracketCalculator[j] +\\n                (finalNumber % (uint32(10) ** (j + 1)));\\n\\n            _lotteries[_lotteryId].countWinnersPerBracket[j] =\\n                _numberTicketsPerLotteryId[_lotteryId][\\n                    transformedWinningNumber\\n                ] -\\n                numberAddressesInPreviousBracket;\\n\\n            // A. If number of users for this _bracket number is superior to 0\\n            if (\\n                (_numberTicketsPerLotteryId[_lotteryId][\\n                    transformedWinningNumber\\n                ] - numberAddressesInPreviousBracket) != 0\\n            ) {\\n                // B. If rewards at this bracket are > 0, calculate, else, report the numberAddresses from previous bracket\\n\\n                if (_lotteries[_lotteryId].rewardsBreakdown[j] != 0) {\\n                    for (uint k = 0; k < nextTokenStorageId; k++) {\\n                        uint256 percentBreackdown = _lotteries[_lotteryId]\\n                            .rewardsBreakdown[j];\\n                        uint256 amountWinner = amountToShareToWinners[k];\\n                        uint256 winners = _numberTicketsPerLotteryId[\\n                            _lotteryId\\n                        ][transformedWinningNumber];\\n\\n                        amountPerTokenPerBracket[_lotteryId][k][j] =\\n                            ((percentBreackdown * amountWinner) /\\n                                (winners - numberAddressesInPreviousBracket)) /\\n                            10000;\\n                    }\\n                    // Update numberAddressesInPreviousBracket\\n                    numberAddressesInPreviousBracket = _numberTicketsPerLotteryId[\\n                        _lotteryId\\n                    ][transformedWinningNumber];\\n                }\\n\\n                // A. No token to distribute, they are added to the amount to withdraw to treasury address\\n            } else {\\n                for (uint k = 0; k < nextTokenStorageId; k++) {\\n                    amountPerTokenPerBracket[_lotteryId][k][j] = 0;\\n                    amountToWithdrawToTreasury[k] +=\\n                        (_lotteries[_lotteryId].rewardsBreakdown[j] *\\n                            amountToShareToWinners[k]) /\\n                        10000;\\n                }\\n            }\\n        }\\n\\n        // Update internal statuses for lottery\\n        _lotteries[_lotteryId].finalNumber = finalNumber;\\n        _lotteries[_lotteryId].status = Status.Claimable;\\n\\n        for (uint k = 0; k < nextTokenStorageId; k++) {\\n            if (_autoInjection) {\\n                pendingInjectionNextLottery[k] = amountToWithdrawToTreasury[k];\\n                amountToWithdrawToTreasury[k] = 0;\\n            }\\n\\n            amountToWithdrawToTreasury[k] += (amountCollectedPerToken[\\n                _lotteryId\\n            ][k] - amountToShareToWinners[k]);\\n\\n            // Transfer token to treasury address\\n            tokenStorage[k].tokenAddress.safeTransfer(\\n                treasuryAddress,\\n                amountToWithdrawToTreasury[k]\\n            );\\n        }\\n\\n        emit LotteryNumberDrawn(\\n            currentLotteryId,\\n            finalNumber,\\n            numberAddressesInPreviousBracket\\n        );\\n    }\\n\\n    /**\\n     * @notice Change the random generator\\n     * @dev The calls to functions are used to verify the new generator implements them properly.\\n     * It is necessary to wait for the VRF response before starting a round.\\n     * Callable only by the contract owner\\n     * @param _randomGeneratorAddress: address of the random generator\\n     */\\n    function changeRandomGenerator(\\n        address _randomGeneratorAddress\\n    ) external onlyOwner {\\n        require(\\n            (currentLotteryId == 0) ||\\n                (_lotteries[currentLotteryId].status == Status.Claimable),\\n            \\\"Lottery not in claimable\\\"\\n        );\\n\\n        // Request a random number from the generator based on a seed\\n        IRandomNumberGenerator(_randomGeneratorAddress).getRandomNumber();\\n\\n        // Calculate the finalNumber based on the randomResult generated by ChainLink's fallback\\n        IRandomNumberGenerator(_randomGeneratorAddress).viewRandomResult();\\n\\n        randomGenerator = IRandomNumberGenerator(_randomGeneratorAddress);\\n\\n        emit NewRandomGenerator(_randomGeneratorAddress);\\n    }\\n\\n    /**\\n     * @notice Inject funds\\n     * @param _lotteryId: lottery id\\n     * @param _amount: amount to inject in token token\\n     * @dev Callable by owner or injector address\\n     */\\n    function injectFunds(\\n        uint256 _tokenId,\\n        uint256 _lotteryId,\\n        uint256 _amount\\n    ) external override onlyOwnerOrInjector {\\n        require(tokenStorage[_tokenId].allow, \\\"Token is not allow\\\");\\n        require(\\n            _lotteries[_lotteryId].status == Status.Open,\\n            \\\"Lottery not open\\\"\\n        );\\n\\n        tokenStorage[_tokenId].tokenAddress.safeTransferFrom(\\n            address(msg.sender),\\n            address(this),\\n            _amount\\n        );\\n        amountCollectedPerToken[_lotteryId][_tokenId] += _amount;\\n\\n        emit LotteryInjection(_lotteryId, _amount);\\n    }\\n\\n    /**\\n     * @notice Start the lottery\\n     * @dev Callable by operator\\n     * @param _endTime: endTime of the lottery\\n     * @param _discountDivisor: the divisor to calculate the discount magnitude for bulks\\n     * @param _rewardsBreakdown: breakdown of rewards per bracket (must sum to 10,000)\\n     * @param _treasuryFee: treasury fee (10,000 = 100%, 100 = 1%)\\n     */\\n    function startLottery(\\n        uint256 _endTime,\\n        uint256 _discountDivisor,\\n        uint256[6] calldata _rewardsBreakdown,\\n        uint256 _treasuryFee\\n    ) external override onlyOperator {\\n        require(\\n            (currentLotteryId == 0) ||\\n                (_lotteries[currentLotteryId].status == Status.Claimable),\\n            \\\"Not time to start lottery\\\"\\n        );\\n\\n        require(\\n            ((_endTime - block.timestamp) > MIN_LENGTH_LOTTERY) &&\\n                ((_endTime - block.timestamp) < MAX_LENGTH_LOTTERY),\\n            \\\"Lottery length outside of range\\\"\\n        );\\n\\n        require(\\n            _discountDivisor >= MIN_DISCOUNT_DIVISOR,\\n            \\\"Discount divisor too low\\\"\\n        );\\n        require(_treasuryFee <= MAX_TREASURY_FEE, \\\"Treasury fee too high\\\");\\n\\n        require(\\n            (_rewardsBreakdown[0] +\\n                _rewardsBreakdown[1] +\\n                _rewardsBreakdown[2] +\\n                _rewardsBreakdown[3] +\\n                _rewardsBreakdown[4] +\\n                _rewardsBreakdown[5]) == 10000,\\n            \\\"Rewards must equal 10000\\\"\\n        );\\n\\n        currentLotteryId++;\\n\\n        Lottery storage currentLottery = _lotteries[currentLotteryId];\\n        uint256[] memory _pendingInjectionNextLottery = new uint256[](\\n            nextTokenStorageId\\n        );\\n        uint256[] memory _priceTickets = new uint256[](nextTokenStorageId);\\n\\n        for (uint k = 0; k < nextTokenStorageId; k++) {\\n            amountPerTokenPerBracket[currentLotteryId][k] = [\\n                uint256(0),\\n                uint256(0),\\n                uint256(0),\\n                uint256(0),\\n                uint256(0),\\n                uint256(0)\\n            ];\\n            amountCollectedPerToken[currentLotteryId][\\n                k\\n            ] = pendingInjectionNextLottery[k];\\n\\n            _pendingInjectionNextLottery[k] = pendingInjectionNextLottery[k];\\n\\n            _priceTickets[k] = tokenStorage[k].ticketPrice;\\n        }\\n\\n        currentLottery.status = Status.Open;\\n        currentLottery.startTime = block.timestamp;\\n        currentLottery.endTime = _endTime;\\n        currentLottery.discountDivisor = _discountDivisor;\\n        currentLottery.rewardsBreakdown = _rewardsBreakdown;\\n        currentLottery.treasuryFee = _treasuryFee;\\n        currentLottery.countWinnersPerBracket = [\\n            uint256(0),\\n            uint256(0),\\n            uint256(0),\\n            uint256(0),\\n            uint256(0),\\n            uint256(0)\\n        ];\\n        currentLottery.firstTicketId = currentTicketId;\\n        currentLottery.firstTicketIdNextLottery = currentTicketId;\\n        currentLottery.finalNumber = 0;\\n\\n        emit LotteryOpen(\\n            currentLotteryId,\\n            block.timestamp,\\n            _endTime,\\n            _priceTickets,\\n            currentTicketId,\\n            _pendingInjectionNextLottery\\n        );\\n\\n        for (uint k = 0; k < nextTokenStorageId; k++) {\\n            pendingInjectionNextLottery[k] = 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice It allows the admin to recover wrong tokens sent to the contract\\n     * @param _tokenAddress: the address of the token to withdraw\\n     * @param _tokenAmount: the number of token amount to withdraw\\n     * @dev Only callable by owner.\\n     */\\n    function recoverWrongTokens(\\n        address _tokenAddress,\\n        uint256 _tokenAmount\\n    ) external onlyOwner {\\n        // require(_tokenAddress != address(tokenStorage), \\\"Cannot be token token\\\");\\n\\n        IERC20(_tokenAddress).safeTransfer(address(msg.sender), _tokenAmount);\\n\\n        emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Set max number of tickets\\n     * @dev Only callable by owner\\n     */\\n    function setMaxNumberTicketsPerBuy(\\n        uint256 _maxNumberTicketsPerBuy\\n    ) external onlyOwner {\\n        require(_maxNumberTicketsPerBuy != 0, \\\"Must be > 0\\\");\\n        maxNumberTicketsPerBuyOrClaim = _maxNumberTicketsPerBuy;\\n    }\\n\\n    /**\\n     * @notice Set operator, treasury, and injector addresses\\n     * @dev Only callable by owner\\n     * @param _operatorAddress: address of the operator\\n     * @param _treasuryAddress: address of the treasury\\n     * @param _injectorAddress: address of the injector\\n     */\\n    function setOperatorAndTreasuryAndInjectorAddresses(\\n        address _operatorAddress,\\n        address _treasuryAddress,\\n        address _injectorAddress\\n    ) external onlyOwner {\\n        require(_operatorAddress != address(0), \\\"Cannot be zero address\\\");\\n        require(_treasuryAddress != address(0), \\\"Cannot be zero address\\\");\\n        require(_injectorAddress != address(0), \\\"Cannot be zero address\\\");\\n\\n        operatorAddress = _operatorAddress;\\n        treasuryAddress = _treasuryAddress;\\n        injectorAddress = _injectorAddress;\\n\\n        emit NewOperatorAndTreasuryAndInjectorAddresses(\\n            _operatorAddress,\\n            _treasuryAddress,\\n            _injectorAddress\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculate price of a set of tickets\\n     * @param _discountDivisor: divisor for the discount\\n     * @param _priceTicket price of a ticket (in token)\\n     * @param _numberTickets number of tickets to buy\\n     */\\n    function calculateTotalPriceForBulkTickets(\\n        uint256 _discountDivisor,\\n        uint256 _priceTicket,\\n        uint256 _numberTickets\\n    ) external pure returns (uint256) {\\n        require(\\n            _discountDivisor >= MIN_DISCOUNT_DIVISOR,\\n            \\\"Must be >= MIN_DISCOUNT_DIVISOR\\\"\\n        );\\n        require(_numberTickets != 0, \\\"Number of tickets must be > 0\\\");\\n\\n        return\\n            _calculateTotalPriceForBulkTickets(\\n                _discountDivisor,\\n                _priceTicket,\\n                _numberTickets\\n            );\\n    }\\n\\n    /**\\n     * @notice View current lottery id\\n     */\\n    function viewCurrentLotteryId() external view override returns (uint256) {\\n        return currentLotteryId;\\n    }\\n\\n    /**\\n     * @notice View lottery information\\n     * @param _lotteryId: lottery id\\n     */\\n    function viewLottery(\\n        uint256 _lotteryId\\n    ) external view returns (Lottery memory) {\\n        return _lotteries[_lotteryId];\\n    }\\n\\n    /**\\n     * @notice View ticker statuses and numbers for an array of ticket ids\\n     * @param _ticketIds: array of _ticketId\\n     */\\n    function viewNumbersAndStatusesForTicketIds(\\n        uint256[] calldata _ticketIds\\n    ) external view returns (uint32[] memory, bool[] memory) {\\n        uint256 length = _ticketIds.length;\\n        uint32[] memory ticketNumbers = new uint32[](length);\\n        bool[] memory ticketStatuses = new bool[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            ticketNumbers[i] = _tickets[_ticketIds[i]].number;\\n            if (_tickets[_ticketIds[i]].owner == address(0)) {\\n                ticketStatuses[i] = true;\\n            } else {\\n                ticketStatuses[i] = false;\\n            }\\n        }\\n\\n        return (ticketNumbers, ticketStatuses);\\n    }\\n\\n    /**\\n     * @notice View rewards for a given ticket, providing a bracket, and lottery id\\n     * @dev Computations are mostly offchain. This is used to verify a ticket!\\n     * @param _lotteryId: lottery id\\n     * @param _ticketId: ticket id\\n     * @param _bracket: bracket for the ticketId to verify the claim and calculate rewards\\n     */\\n    function viewRewardsForTicketId(\\n        uint256 _lotteryId,\\n        uint256 _tokenId,\\n        uint256 _ticketId,\\n        uint32 _bracket\\n    ) external view returns (uint256) {\\n        // Check lottery is in claimable status\\n        if (_lotteries[_lotteryId].status != Status.Claimable) {\\n            return 0;\\n        }\\n\\n        // Check ticketId is within range\\n        if (\\n            (_lotteries[_lotteryId].firstTicketIdNextLottery < _ticketId) &&\\n            (_lotteries[_lotteryId].firstTicketId >= _ticketId)\\n        ) {\\n            return 0;\\n        }\\n\\n        return\\n            _calculateRewardsForTicketId(\\n                _lotteryId,\\n                _tokenId,\\n                _ticketId,\\n                _bracket\\n            );\\n    }\\n\\n    /**\\n     * @notice View user ticket ids, numbers, and statuses of user for a given lottery\\n     * @param _user: user address\\n     * @param _lotteryId: lottery id\\n     * @param _cursor: cursor to start where to retrieve the tickets\\n     * @param _size: the number of tickets to retrieve\\n     */\\n    function viewUserInfoForLotteryId(\\n        address _user,\\n        uint256 _lotteryId,\\n        uint256 _cursor,\\n        uint256 _size\\n    )\\n        external\\n        view\\n        override\\n        returns (uint256[] memory, uint32[] memory, bool[] memory, uint256)\\n    {\\n        uint256 length = _size;\\n        uint256 numberTicketsBoughtAtLotteryId = _userTicketIdsPerLotteryId[\\n            _user\\n        ][_lotteryId].length;\\n\\n        if (length > (numberTicketsBoughtAtLotteryId - _cursor)) {\\n            length = numberTicketsBoughtAtLotteryId - _cursor;\\n        }\\n\\n        uint256[] memory lotteryTicketIds = new uint256[](length);\\n        uint32[] memory ticketNumbers = new uint32[](length);\\n        bool[] memory ticketStatuses = new bool[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            lotteryTicketIds[i] = _userTicketIdsPerLotteryId[_user][_lotteryId][\\n                i + _cursor\\n            ];\\n            ticketNumbers[i] = _tickets[lotteryTicketIds[i]].number;\\n\\n            // True = ticket claimed\\n            if (_tickets[lotteryTicketIds[i]].owner == address(0)) {\\n                ticketStatuses[i] = true;\\n            } else {\\n                // ticket not claimed (includes the ones that cannot be claimed)\\n                ticketStatuses[i] = false;\\n            }\\n        }\\n\\n        return (\\n            lotteryTicketIds,\\n            ticketNumbers,\\n            ticketStatuses,\\n            _cursor + length\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculate rewards for a given ticket\\n     * @param _lotteryId: lottery id\\n     * @param _tokenId: ticket id\\n     * @param _ticketId: ticket id\\n     * @param _bracket: bracket for the ticketId to verify the claim and calculate rewards\\n     */\\n    function _calculateRewardsForTicketId(\\n        uint256 _lotteryId,\\n        uint256 _tokenId,\\n        uint256 _ticketId,\\n        uint32 _bracket\\n    ) internal view returns (uint256) {\\n        // Retrieve the winning number combination\\n        uint32 winningTicketNumber = _lotteries[_lotteryId].finalNumber;\\n\\n        // Retrieve the user number combination from the ticketId\\n        uint32 userNumber = _tickets[_ticketId].number;\\n\\n        // Apply transformation to verify the claim provided by the user is true\\n        uint32 transformedWinningNumber = _bracketCalculator[_bracket] +\\n            (winningTicketNumber % (uint32(10) ** (_bracket + 1)));\\n\\n        uint32 transformedUserNumber = _bracketCalculator[_bracket] +\\n            (userNumber % (uint32(10) ** (_bracket + 1)));\\n\\n        // Confirm that the two transformed numbers are the same, if not throw\\n        if (transformedWinningNumber == transformedUserNumber) {\\n            return amountPerTokenPerBracket[_lotteryId][_tokenId][_bracket];\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate final price for bulk of tickets\\n     * @param _discountDivisor: divisor for the discount (the smaller it is, the greater the discount is)\\n     * @param _priceTicket: price of a ticket\\n     * @param _numberTickets: number of tickets purchased\\n     */\\n    function _calculateTotalPriceForBulkTickets(\\n        uint256 _discountDivisor,\\n        uint256 _priceTicket,\\n        uint256 _numberTickets\\n    ) internal pure returns (uint256) {\\n        return\\n            (_priceTicket *\\n                _numberTickets *\\n                (_discountDivisor + 1 - _numberTickets)) / _discountDivisor;\\n    }\\n\\n    /**\\n     * @notice Check if an address is a contract\\n     */\\n    function _isContract(address _addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return size > 0;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 99999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_priceTicket\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_randomGeneratorAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminTokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstTicketIdNextLottery\",\"type\":\"uint256\"}],\"name\":\"LotteryClose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"injectedAmount\",\"type\":\"uint256\"}],\"name\":\"LotteryInjection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"countWinningTickets\",\"type\":\"uint256\"}],\"name\":\"LotteryNumberDrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_priceTickets\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstTicketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"injectedAmount\",\"type\":\"uint256[]\"}],\"name\":\"LotteryOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"injector\",\"type\":\"address\"}],\"name\":\"NewOperatorAndTreasuryAndInjectorAddresses\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"randomGenerator\",\"type\":\"address\"}],\"name\":\"NewRandomGenerator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberTickets\",\"type\":\"uint256\"}],\"name\":\"TicketsClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstTikectsId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberTickets\",\"type\":\"uint256\"}],\"name\":\"TicketsPurchase\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_LENGTH_LOTTERY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TREASURY_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_DISCOUNT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_LENGTH_LOTTERY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"name\":\"addTokenStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"amountCollectedPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"amountPerTokenPerBracket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"uint32[]\",\"name\":\"_ticketNumbers\",\"type\":\"uint32[]\"}],\"name\":\"buyTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_discountDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceTicket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberTickets\",\"type\":\"uint256\"}],\"name\":\"calculateTotalPriceForBulkTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_randomGeneratorAddress\",\"type\":\"address\"}],\"name\":\"changeRandomGenerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_ticketIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_brackets\",\"type\":\"uint32[]\"}],\"name\":\"claimTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"closeLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLotteryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTicketId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_autoInjection\",\"type\":\"bool\"}],\"name\":\"drawFinalNumberAndMakeLotteryClaimable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"injectFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"injectorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNumberTicketsPerBuyOrClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenStorageId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingInjectionNextLottery\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomGenerator\",\"outputs\":[{\"internalType\":\"contract IRandomNumberGenerator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverWrongTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idToken\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"setAllowTokenStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxNumberTicketsPerBuy\",\"type\":\"uint256\"}],\"name\":\"setMaxNumberTicketsPerBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_injectorAddress\",\"type\":\"address\"}],\"name\":\"setOperatorAndTreasuryAndInjectorAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_discountDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256[6]\",\"name\":\"_rewardsBreakdown\",\"type\":\"uint256[6]\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"}],\"name\":\"startLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenStorage\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewCurrentLotteryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"viewLottery\",\"outputs\":[{\"components\":[{\"internalType\":\"enum LotteryVSN.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256[6]\",\"name\":\"rewardsBreakdown\",\"type\":\"uint256[6]\"},{\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256[6]\",\"name\":\"countWinnersPerBracket\",\"type\":\"uint256[6]\"},{\"internalType\":\"uint256\",\"name\":\"firstTicketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstTicketIdNextLottery\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"finalNumber\",\"type\":\"uint32\"}],\"internalType\":\"struct LotteryVSN.Lottery\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ticketIds\",\"type\":\"uint256[]\"}],\"name\":\"viewNumbersAndStatusesForTicketIds\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ticketId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_bracket\",\"type\":\"uint32\"}],\"name\":\"viewRewardsForTicketId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"viewUserInfoForLotteryId\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LotteryVSN", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "0000000000000000000000004bbd4fa12b2b874a13e9555f5c5d0f6ad035acc300000000000000000000000000000000000000000000000000000174876e8000000000000000000000000000ace9f858e0c21e98776d407d078f0d90760499d1", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}