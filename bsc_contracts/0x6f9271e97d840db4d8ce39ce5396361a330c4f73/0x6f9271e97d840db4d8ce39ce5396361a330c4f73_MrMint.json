{"SourceCode": "pragma solidity ^0.5.17;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        if (a == 0) \r\n        {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    \r\n    function ceil(uint256 a, uint256 m) internal pure returns (uint256) \r\n    {\r\n        uint256 c = add(a,m);\r\n        uint256 d = sub(c,1);\r\n        return mul(div(d,m),m);\r\n    }\r\n    \r\n    function safeSub(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        assert(_x >= _y);\r\n        return _x - _y;\r\n    }\r\n\r\n}\r\n\r\ncontract BSC20Interface {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address tokenOwner) public view returns (uint256 balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint256 remaining);\r\n    function transfer(address to, uint256 tokens) public returns (bool success);\r\n    function approve(address spender, uint256 tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n    event BuyToken(address indexed user, uint256 amount);\r\n    event SellToken(address indexed user, uint256 amount);\r\n    event Registration(address indexed user, address indexed referrer, uint256 amount);\r\n}\r\n\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    function Ownables(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract BasicToken is Ownable, BSC20Interface {\r\n    using SafeMath for uint;\r\n\r\n    mapping(address => uint) public balances;\r\n\r\n    modifier onlyPayloadSize(uint size) {\r\n        require(!(msg.data.length < size + 4));\r\n        _;\r\n    }\r\n    \r\n    function balanceOf(address _owner) public view returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n   \r\n}\r\n\r\ncontract Pausable is Owned {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    modifier whenNotPaused() {\r\n      require(!paused);\r\n      _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n      require(paused);\r\n      _;\r\n    }\r\n\r\n}\r\n\r\ncontract BlackList is Ownable, BasicToken {\r\n    \r\n    function getBlackListStatus(address _maker) external view returns (bool) {\r\n        return isBlackListed[_maker];\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    mapping (address => bool) public isBlackListed;\r\n    \r\n    function addBlackList (address _evilUser) public onlyOwner {\r\n        isBlackListed[_evilUser] = true;\r\n        emit AddedBlackList(_evilUser);\r\n    }\r\n\r\n    function removeBlackList (address _clearedUser) public onlyOwner {\r\n        isBlackListed[_clearedUser] = false;\r\n        emit RemovedBlackList(_clearedUser);\r\n    }\r\n\r\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\r\n\r\n    event AddedBlackList(address _user);\r\n\r\n    event RemovedBlackList(address _user);\r\n\r\n}\r\n\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    \r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    \r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    \r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n\r\ncontract MrMint is BSC20Interface, Pausable, BlackList {\r\n\r\n    using SafeMath for uint256;\r\n    using Roles for Roles.Role;\r\n    \r\n    string public symbol = \"MNT\";\r\n    string public name = \"Mr. Mint\";\r\n    uint8 public decimals = 8;\r\n    uint256 private _totalSupply = 100000000000000000;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    mapping (address => uint256) freezeAccount;\r\n    \r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n    Roles.Role private _minters;\r\n    \r\n    mapping (address => uint256) public freezeList;\r\n    \r\n\r\n\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    \r\n    address public liquidityFeeWallet;\r\n    address public developmentFeeWallet;\r\n    address public buyBackLockFeeWallet;\r\n    uint256 public liquidityFeePercent = 3;\r\n    uint256 public developmentFeePercent = 1;\r\n    uint256 public buyBackLockFeePercent = 1;\r\n\r\n\r\n     // triggered when the total supply is decreased\r\n    event Destruction(uint256 _amount);\r\n    event FeeChange (uint256 fixedFee, uint256 minVariableFee, uint256 maxVariableFee, uint256 variableFeeNumerator);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        balances[owner] = balances[owner].add(_totalSupply);\r\n        //excluded from fee\r\n        _isExcludedFromFee[msg.sender] = true;\r\n        //Tokenomics                \r\n        balances[0x038A44aad9e8AB2D2C53A72e28Bd15368E599BDC] = _totalSupply.mul(5).div(100); // Private Sale\t5%\r\n        balances[0xbb8dFB15573231aDc40e75F4cD29abC483bBFA90] = _totalSupply.mul(15).div(100); // Pre Sale\t15%\r\n        balances[0xE94e0bEE3dCb484aB300EA00E3D827E89e50b3A4] = _totalSupply.mul(20).div(100); // Public Sale\t20%\r\n        balances[0xDC7C2A2a7D2A6690dc7ff2b90b75F1d543724694] = _totalSupply.mul(10).div(100); // Marketing\t10%\r\n        balances[0x9e7D13F75A273f6987b7AdC502e62320De958Ab8] = _totalSupply.mul(4).div(100); // Liquidity\t4%\r\n        balances[0xdB17FccB47BB5F9c3C9d5D7eceBFf934fC953489] = _totalSupply.mul(1).div(100); // R & D\t1%\r\n        balances[0x9Ff11F00C0c9F59aC78fA6426E634bD0800E9cD4] = _totalSupply.mul(1).div(100); // Airdrop\t1%\r\n        balances[0x73F06C693c3357347D1d230D39290d3DCE4BCcEE] = _totalSupply.mul(10).div(100); // Referral & Stacking\t10%\r\n        balances[0x9dB69CF9bA0B55Ab84FE096B95EB4C96D8D255FB] = _totalSupply.mul(7).div(100); // Ecosystem\t7%\r\n        balances[0x7De1a80F3b44cAE8498963565642a0C753899Cf3] = _totalSupply.mul(4).div(100); // Reserve\t4%\r\n        balances[0xe84504aEc55c79a086B858296B1D2a3282da728f] = _totalSupply.mul(18).div(100); // Team\t18%\r\n        balances[0x5a120C9a79510bcB4EA681905D4B62996591c571] = _totalSupply.mul(1).div(100); // Charity\t1%\r\n        balances[0x66a7720B2F0ff4c85b2715fBAd687BeB5B816a06] = _totalSupply.mul(4).div(100); // Advisors\t4%\r\n\r\n\r\n\r\n        emit Transfer(address(0), 0x038A44aad9e8AB2D2C53A72e28Bd15368E599BDC, _totalSupply.mul(5).div(100));\r\n        emit Transfer(address(0), 0xbb8dFB15573231aDc40e75F4cD29abC483bBFA90, _totalSupply.mul(15).div(100));\r\n        emit Transfer(address(0), 0xE94e0bEE3dCb484aB300EA00E3D827E89e50b3A4, _totalSupply.mul(20).div(100));\r\n        emit Transfer(address(0), 0xDC7C2A2a7D2A6690dc7ff2b90b75F1d543724694, _totalSupply.mul(10).div(100));\r\n        emit Transfer(address(0), 0x9e7D13F75A273f6987b7AdC502e62320De958Ab8, _totalSupply.mul(4).div(100));\r\n        emit Transfer(address(0), 0xdB17FccB47BB5F9c3C9d5D7eceBFf934fC953489, _totalSupply.mul(1).div(100));\r\n        emit Transfer(address(0), 0x9Ff11F00C0c9F59aC78fA6426E634bD0800E9cD4, _totalSupply.mul(1).div(100));\r\n        emit Transfer(address(0), 0x73F06C693c3357347D1d230D39290d3DCE4BCcEE, _totalSupply.mul(10).div(100));\r\n        emit Transfer(address(0), 0x9dB69CF9bA0B55Ab84FE096B95EB4C96D8D255FB, _totalSupply.mul(7).div(100));\r\n        emit Transfer(address(0), 0x7De1a80F3b44cAE8498963565642a0C753899Cf3, _totalSupply.mul(4).div(100));\r\n        emit Transfer(address(0), 0xe84504aEc55c79a086B858296B1D2a3282da728f, _totalSupply.mul(18).div(100));\r\n        emit Transfer(address(0), 0x5a120C9a79510bcB4EA681905D4B62996591c571, _totalSupply.mul(1).div(100));\r\n        emit Transfer(address(0), 0x66a7720B2F0ff4c85b2715fBAd687BeB5B816a06, _totalSupply.mul(4).div(100));\r\n\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(msg.sender), \"MinterRole: caller does not have the Minter role\");\r\n        _;\r\n    }\r\n\r\n     /**\r\n     * @notice Set Liquidity Fee Wallet\r\n     * @param _liquidityFeeWallet address\r\n     **/\r\n    function setLiquidityFeeWallet(address _liquidityFeeWallet) public onlyOwner {\r\n        liquidityFeeWallet = _liquidityFeeWallet;\r\n    }\r\n\r\n    /**\r\n     * @notice Set Liquidity Fee Percent\r\n     * @param _liquidityFeePercent uint256\r\n     **/\r\n    function setLiquidityFeePercent(uint256 _liquidityFeePercent) public onlyOwner {\r\n        liquidityFeePercent = _liquidityFeePercent;\r\n    }\r\n\r\n    /**\r\n     * @notice Set Development Fee Wallet\r\n     * @param _developmentFeeWallet address\r\n     **/\r\n    function setDevelopmentFeeWallet(address _developmentFeeWallet) public onlyOwner {\r\n        developmentFeeWallet = _developmentFeeWallet;\r\n    }\r\n\r\n    /**\r\n     * @notice Set Development Fee Percent\r\n     * @param _developmentFeePercent uint256\r\n     **/\r\n    function setDevelopmentFeePercent(uint256 _developmentFeePercent) public onlyOwner {\r\n        developmentFeePercent = _developmentFeePercent;\r\n    }\r\n\r\n    /**\r\n     * @notice Set Buy Back / Lock Fee Wallet\r\n     * @param _buyBackLockFeeWallet address\r\n     **/\r\n    function setBuyBackLockFeeWallet(address _buyBackLockFeeWallet) public onlyOwner {\r\n        buyBackLockFeeWallet = _buyBackLockFeeWallet;\r\n    }\r\n\r\n    /**\r\n     * @notice Set BuyBack/Lock Fee Percent\r\n     * @param _buyBackLockFeePercent uint256\r\n     **/\r\n    function setBuyBackLockFeePercent(uint256 _buyBackLockFeePercent) public onlyOwner {\r\n        buyBackLockFeePercent = _buyBackLockFeePercent;\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n    \r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(msg.sender);\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    function pause() onlyOwner whenNotPaused public {\r\n      paused = true;\r\n      emit Pause();\r\n    }\r\n\r\n    function unpause() onlyOwner whenPaused public {\r\n      paused = false;\r\n      emit Unpause();\r\n    }\r\n\r\n\r\n    function freeze(address freezeAddress) public onlyOwner returns (bool done)\r\n    {\r\n        freezeList[freezeAddress]=1;\r\n        return isFreeze(freezeAddress);\r\n        }\r\n\r\n    function unFreeze(address freezeAddress) public onlyOwner returns (bool done)\r\n    {\r\n        delete freezeList[freezeAddress];\r\n        return !isFreeze(freezeAddress); \r\n    }\r\n\r\n    function isFreeze(address freezeAddress) public view returns (bool isFreezed) \r\n    {\r\n        return freezeList[freezeAddress]==1;\r\n    }\r\n    \r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply ;\r\n    }\r\n\r\n\r\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n\r\n    function transfer(address to, uint tokens) public whenNotPaused returns (bool success) {\r\n         require(!isBlackListed[msg.sender]);\r\n         require(!isFreeze(msg.sender));\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n\r\n         bool takeFee = true;\r\n        \r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if(_isExcludedFromFee[msg.sender]){\r\n            takeFee = false;\r\n        }\r\n\r\n        balances[to] = balances[to].add(tokens);\r\n        \r\n         if(!takeFee){\r\n            //excluded from fee\r\n            balances[to] = balances[to].add(tokens);\r\n            emit Transfer(msg.sender, to, tokens);\r\n        }else{\r\n            //take liquidity fee\r\n            uint256 liquidityFee = tokens.mul(liquidityFeePercent).div(100);\r\n            balances[liquidityFeeWallet] = balances[liquidityFeeWallet].add(liquidityFee);\r\n\r\n            //take development fee\r\n            uint256 developmentFee = tokens.mul(developmentFeePercent).div(100);\r\n            balances[developmentFeeWallet] = balances[developmentFeeWallet].add(developmentFee);\r\n\r\n            //take buyback/lock fee\r\n            uint256 buyBackLockFee = tokens.mul(buyBackLockFeePercent).div(100);\r\n            balances[buyBackLockFeeWallet] = balances[buyBackLockFeeWallet].add(buyBackLockFee);\r\n\r\n            //balances[admin] = balances[admin].add(fee);\r\n            uint256 totalFee = liquidityFee + developmentFee + buyBackLockFee;\r\n            balances[to] = balances[to].add(tokens - totalFee);        \r\n\r\n            //emit Transfer(msg.sender, admin, fee);\r\n            emit Transfer(msg.sender, to, tokens - totalFee);\r\n            emit Transfer(msg.sender, liquidityFeeWallet, liquidityFee);\r\n            emit Transfer(msg.sender, developmentFeeWallet, developmentFee);\r\n            emit Transfer(msg.sender, buyBackLockFeeWallet, buyBackLockFee);\r\n        }\r\n\r\n\r\n        return true;\r\n    }\r\n\r\n    function withdraw(uint256 amount) external onlyOwner{\r\n        require(msg.sender.send(amount));\r\n    }\r\n    \r\n\r\n    function approve(address spender, uint tokens) public  whenNotPaused returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    function transferFrom(address from, address to, uint tokens) public whenNotPaused returns (bool success) {\r\n         require(!isBlackListed[msg.sender]);\r\n         require(!isFreeze(msg.sender));\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        \r\n         bool takeFee = true;\r\n         //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if(_isExcludedFromFee[msg.sender]){\r\n            takeFee = false;\r\n        }\r\n\r\n        balances[to] = balances[to].add(tokens);\r\n        \r\n         if(!takeFee){\r\n            //excluded from fee\r\n            balances[to] = balances[to].add(tokens);\r\n            emit Transfer(msg.sender, to, tokens);\r\n        }else{\r\n            //take liquidity fee\r\n            uint256 liquidityFee = tokens.mul(liquidityFeePercent).div(100);\r\n            balances[liquidityFeeWallet] = balances[liquidityFeeWallet].add(liquidityFee);\r\n\r\n            //take development fee\r\n            uint256 developmentFee = tokens.mul(developmentFeePercent).div(100);\r\n            balances[developmentFeeWallet] = balances[developmentFeeWallet].add(developmentFee);\r\n\r\n            //take buyback/lock fee\r\n            uint256 buyBackLockFee = tokens.mul(buyBackLockFeePercent).div(100);\r\n            balances[buyBackLockFeeWallet] = balances[buyBackLockFeeWallet].add(buyBackLockFee);\r\n\r\n            //balances[admin] = balances[admin].add(fee);\r\n            uint256 totalFee = liquidityFee + developmentFee + buyBackLockFee;\r\n            balances[to] = balances[to].add(tokens - totalFee);        \r\n\r\n            //emit Transfer(msg.sender, admin, fee);\r\n            emit Transfer(msg.sender, to, tokens - totalFee);\r\n            emit Transfer(msg.sender, liquidityFeeWallet, liquidityFee);\r\n            emit Transfer(msg.sender, developmentFeeWallet, developmentFee);\r\n            emit Transfer(msg.sender, buyBackLockFeeWallet, buyBackLockFee);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    \r\n\r\n     function reclaimToken(address _fromAddress, address _toAddress) public onlyOwner {\r\n        uint256 balance = balanceOf(_fromAddress);\r\n        balances[_fromAddress] = balances[_fromAddress].sub(balance);\r\n        balances[_toAddress] = balances[_toAddress].add(balance);\r\n        emit Transfer(_fromAddress, _toAddress, balance);\r\n    }\r\n\r\n    function allowance(address tokenOwner, address spender) public whenNotPaused view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    function approveAndCall(address spender, uint tokens, bytes memory data) public whenNotPaused returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n        return true;\r\n    }\r\n\r\n    function mint(address account, uint256 amount) public whenNotPaused onlyOwner{\r\n        require(account != address(0), \"BSC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        balances[account] = balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n\r\n    function burn(address account, uint256 value) public whenNotPaused onlyOwner{\r\n        require(account != address(0), \"BSC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        balances[account] = balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    function DestroyToken(address account, uint256 value) public whenNotPaused onlyOwner{\r\n        require(account != address(0), \"BSC20: Destroy from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        balances[account] = balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\r\n        require(isBlackListed[_blackListedUser]);\r\n        uint dirtyFunds = balanceOf(_blackListedUser);\r\n        balances[_blackListedUser] = 0;\r\n        _totalSupply -= dirtyFunds;\r\n        emit DestroyedBlackFunds(_blackListedUser, dirtyFunds);\r\n    }\r\n\r\n  \r\n     function buyToken() external payable{\r\n        require(msg.value > 0, \"Ener valid amount\");\r\n        emit BuyToken(msg.sender, msg.value);\r\n    }\r\n    \r\n    \r\n    function sellToken(uint256 amount) external payable{\r\n        require(amount > 0, \"Ener valid amount\");\r\n        require(balanceOf(msg.sender) > balanceOf(msg.sender) - amount, \"BSC20: transfer amount exceeds balance\");\r\n         transfer(owner, amount);\r\n        emit SellToken(msg.sender, amount);\r\n    \r\n    }\r\n    \r\n    function registrationExt(address referrerAddress) external payable{\r\n        require(msg.value > 0, \"Ener valid amount\");\r\n        emit Registration(msg.sender, referrerAddress, msg.value);\r\n    }\r\n\r\n\r\n    function() external payable {\r\n        revert();\r\n    }\r\n\r\n\r\n    function transferAnyBSC20Token(address tokenAddress, uint tokens) public whenNotPaused onlyOwner returns (bool success) {\r\n        return BSC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n    \r\n\r\n    function hold (address _userAddress, uint _freezeValue) public whenNotPaused onlyOwner returns (bool) {\r\n        require(_userAddress != address(0));\r\n        require(_freezeValue > 0);\r\n        freezeAccount[_userAddress] = _freezeValue;\r\n        balances[_userAddress] = balances[_userAddress].sub(_freezeValue);\r\n        return true;\r\n    }\r\n    \r\n    function unhold (address _userAddress, uint _unFreezeValue) public whenNotPaused onlyOwner returns (bool) {\r\n        require(freezeAccount[_userAddress]>= _unFreezeValue);\r\n        freezeAccount[_userAddress] -= _unFreezeValue;\r\n        balances[_userAddress] = balances[_userAddress].add(_unFreezeValue);\r\n        return true;\r\n    }\r\n    \r\n    function getHold_amount (address _userAddress) public view returns(uint){\r\n        return freezeAccount[_userAddress];\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_blackListedUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"DestroyedBlackFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Destruction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fixedFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minVariableFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxVariableFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"variableFeeNumerator\",\"type\":\"uint256\"}],\"name\":\"FeeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SellToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DestroyToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"Ownables\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyBackLockFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyBackLockFeeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blackListedUser\",\"type\":\"address\"}],\"name\":\"destroyBlackFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developmentFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developmentFeeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"freezeAddress\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"done\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"getBlackListStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getHold_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_freezeValue\",\"type\":\"uint256\"}],\"name\":\"hold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"freezeAddress\",\"type\":\"address\"}],\"name\":\"isFreeze\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isFreezed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidityFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidityFeeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"registrationExt\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_clearedUser\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyBackLockFeePercent\",\"type\":\"uint256\"}],\"name\":\"setBuyBackLockFeePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyBackLockFeeWallet\",\"type\":\"address\"}],\"name\":\"setBuyBackLockFeeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_developmentFeePercent\",\"type\":\"uint256\"}],\"name\":\"setDevelopmentFeePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_developmentFeeWallet\",\"type\":\"address\"}],\"name\":\"setDevelopmentFeeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFeePercent\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFeePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityFeeWallet\",\"type\":\"address\"}],\"name\":\"setLiquidityFeeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyBSC20Token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"freezeAddress\",\"type\":\"address\"}],\"name\":\"unFreeze\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"done\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_unFreezeValue\",\"type\":\"uint256\"}],\"name\":\"unhold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MrMint", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://7ce8f5f986f3c19443c826d47c4442b290e6416cd9dc387c5d07d30d013246b5"}