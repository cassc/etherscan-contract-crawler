{"SourceCode": "// $$\\   $$\\             $$\\      $$$$$$\\  $$$$$$$$\\                              \r\n// $$$\\  $$ |            $$ |    $$  __$$\\ $$  _____|                             \r\n// $$$$\\ $$ |$$\\   $$\\ $$$$$$\\   \\__/  $$ |$$ |      $$$$$$\\   $$$$$$\\  $$$$$$$\\  \r\n// $$ $$\\$$ |$$ |  $$ |\\_$$  _|   $$$$$$  |$$$$$\\    \\____$$\\ $$  __$$\\ $$  __$$\\ \r\n// $$ \\$$$$ |$$ |  $$ |  $$ |    $$  ____/ $$  __|   $$$$$$$ |$$ |  \\__|$$ |  $$ |\r\n// $$ |\\$$$ |$$ |  $$ |  $$ |$$\\ $$ |      $$ |     $$  __$$ |$$ |      $$ |  $$ |\r\n// $$ | \\$$ |\\$$$$$$  |  \\$$$$  |$$$$$$$$\\ $$$$$$$$\\\\$$$$$$$ |$$ |      $$ |  $$ |\r\n// \\__|  \\__| \\______/    \\____/ \\________|\\________|\\_______|\\__|      \\__|  \\__|\r\n// \r\n//  __        ___                 _           _    __        __    _       _    ___             \r\n//  \\ \\      / / |__  _   _      | |_   _ ___| |_  \\ \\      / /_ _| |_ ___| |__|__ \\\r\n//   \\ \\ /\\ / /| '_ \\| | | |  _  | | | | / __| __|  \\ \\ /\\ / / _` | __/ __| '_ \\ / / \r\n//    \\ V  V / | | | | |_| | | |_| | |_| \\__ \\ |_    \\ V  V / (_| | || (__| | | |_|  \r\n//     \\_/\\_/  |_| |_|\\__, |  \\___/ \\__,_|___/\\__|    \\_/\\_/ \\__,_|\\__\\___|_| |_(_)  \r\n//                    |___/                                                                                                            \r\n//  _   _       _      ___     _____                 \r\n// | \\ | |_   _| |_   ( _ )   | ____|__ _ _ __ _ __  \r\n// |  \\| | | | | __|  / _ \\/\\ |  _| / _` | '__| '_ \\ \r\n// | |\\  | |_| | |_  | (_>  < | |__| (_| | |  | | | |\r\n// |_| \\_|\\__,_|\\__|  \\___/\\/ |_____\\__,_|_|  |_| |_|\r\n// \r\n// \r\n// Website: https://Nut2Earn.io\r\n// App: https://app.nut2earn.io\r\n// Twitter: https://twitter.com/Nut2Earn\r\n// Telegram Chat: https://t.me/Nut2Earn\r\n// Telegram Channel: https://t.me/Nut2EarnNews\r\n// \r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        return a / b;\r\n    }\r\n\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ninterface InterfaceLP {\r\n    function sync() external;\r\n}\r\n\r\n\r\nabstract contract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor(\r\n        string memory _tokenName,\r\n        string memory _tokenSymbol,\r\n        uint8 _tokenDecimals\r\n    ) {\r\n        _name = _tokenName;\r\n        _symbol = _tokenSymbol;\r\n        _decimals = _tokenDecimals;\r\n    }\r\n\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    returns (\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    payable\r\n    returns (\r\n        uint256 amountToken,\r\n        uint256 amountETH,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n    external\r\n    returns (address pair);\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function owner() external view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Not owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() external onlyOwner {\r\n        emit OwnershipRenounced(_owner);\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external virtual onlyOwner {\r\n     require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n     emit OwnershipTransferred(_owner, newOwner);\r\n     _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract Nut2Earn is ERC20Detailed, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n\r\n    // Nut2Earn Settings\r\n    uint256 private constant MAX_REBASE_FREQUENCY = 1800;\r\n    uint256 public nutRebase = 4000; // APY: 69% APY\r\n    uint256 public nutRebaseDenominator = 1000000;\r\n    uint256 public maxSellTransactionAmount = 10000 * 10 ** 18;  // Default Max sell per transaction is 1% of total supply\r\n    uint256 public rebaseFrequency = 1800;\r\n    uint256 public nextRebase = 1659987000;  // Date and time (GMT): Saturday, August 8, 2022 7:30:00 PM\r\n    bool public autoRebase = true;\r\n\r\n    // $NUT Token Settings\r\n    uint256 private constant DECIMALS = 18;\r\n    uint256 private constant MAX_UINT256 = ~uint256(0);\r\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 1000000 * (10**DECIMALS);\r\n    uint256 private constant TOTAL_GONS = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\r\n    uint256 private constant MAX_SUPPLY = 200000000 * (10**DECIMALS);\r\n    bool public liquifyAll = false;\r\n\r\n    // Default Buy Tax Fees = 4%\r\n    uint256 public buyliquidityFee = 1; // $NUT Liquidity Pool Growth\r\n    uint256 public buyyieldFee = 1; // Insurance: Reserve fee aka insurance fund to make buy-backs with as needed\r\n    uint256 public buytreasuryFee = 2; // Treasury: Marketing & Development [community involvment via GOV]\r\n    uint256 public buyfirepitfee = 0; // Firepit: Used to burn $NUT tokens out of the supply\r\n    uint256 public totalBuyFee = buyliquidityFee.add(buyyieldFee).add(buytreasuryFee).add(buyfirepitfee);\r\n\r\n    // Default Sell Tax Fees = 8%\r\n    uint256 public sellliquidityFee = 2; // $NUT Liquidity Pool Growth\r\n    uint256 public sellyieldFee = 1; // Insurance: Reserve fee aka insurance fund to make buy-backs with as needed\r\n    uint256 public selltreasuryFee = 3; // Treasury: Marketing & Development [community involvment via GOV]\r\n    uint256 public sellfirepitfee = 2; // Firepit: Used to burn $NUT tokens out of the supply\r\n    uint256 public totalSellFee = sellliquidityFee.add(sellyieldFee).add(selltreasuryFee).add(sellfirepitfee);\r\n\r\n    // Default Referral Settings\r\n    uint256 public referee = 1; // $NUT Liquidity Pool Growth\r\n    uint256 public referrer = 1; // Insurance: Reserve fee aka insurance fund to make buy-backs with as needed\r\n    uint256 public totalReferralFee = referee.add(referrer);\r\n\r\n    // Transaction Tax Fees Settings \r\n    mapping(address => bool) isFeeExempt;\r\n    uint256 public constant MAX_FEE_RATE = 25;\r\n    uint256 public constant FEE_DENOMINATOR = 100; \r\n\r\n    // Default Fee Receivers Settings\r\n    address public yieldtoptreasuryReceiver = 0xdd7d29eb51Dd00eAc9e445F7D6f52b654fC235F0;\r\n    address public nuttreasuryreservesReceiver = 0xF0B821A558246aFCa77140B8746354Efac65368C;\r\n    address public nutliquidityReceiver = 0x5f045F69C73322cDC49b50d6Aa5BB5d783302E8e;\r\n    address public nutfirepitReceiver = 0x8421d1560140ad03449df4A66338a7b26Aa380C5;\r\n    address public constant BUSD_TOKEN = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n    address public constant DEAD_WALLET_ADDRESS = 0x000000000000000000000000000000000000dEaD;\r\n    address public constant ZERO_WALLET_ADDRESS = 0x0000000000000000000000000000000000000000;\r\n\r\n    // Referral System\r\n    mapping(address => address) public downlineLookupUpline;\r\n\tmapping(address => address[]) public downLines;\r\n    mapping(address => uint256) public referralTotalFeeReceived;\r\n    mapping(address => uint256) public referralCount;\r\n    mapping(uint256 => address) public uplineList;\r\n    uint256 public iTotalUplines = 0;\r\n    \r\n    function getTotalUpline() external view returns (uint256) {\r\n        return iTotalUplines;\r\n    }\r\n\r\n    function getUplineAddressByIndex(uint256 iIndex) external view returns (address){\r\n        return uplineList[iIndex];\r\n    } \r\n\r\n    function addMember(address uplineAddress, address downlineAddress) external onlyOwner{\r\n        downlineLookupUpline[downlineAddress] = uplineAddress;\r\n    }\r\n\r\n    function approveReferral(address uplineAddress) external {\r\n        require(downlineLookupUpline[msg.sender] == address(0), \"You have already been referred\");\r\n        require(msg.sender != uplineAddress, \"You cannot refer yourself\");\r\n        downlineLookupUpline[msg.sender] = uplineAddress;\r\n\t\tdownLines[uplineAddress].push(msg.sender);\r\n        \r\n        if(referralCount[uplineAddress] == 0)\r\n        {\r\n            uplineList[iTotalUplines] = uplineAddress;\r\n            iTotalUplines += 1;\r\n        }\r\n\r\n        referralCount[uplineAddress] += 1;\r\n    }\r\n    \r\n    function getUpline(address sender) public view returns (address){\r\n        return downlineLookupUpline[sender];\r\n    }\r\n\r\n    function getdownLines(address sender) external view returns (address  [] memory){\r\n        return downLines[sender];\r\n    }\r\n\t\r\n    function addReferralFee(address receiver, uint256 amount) private {\r\n        referralTotalFeeReceived[receiver] += amount;\r\n    }\r\n\r\n    function getReferralTotalFee(address receiver) external view returns (uint256){\r\n        return referralTotalFeeReceived[receiver];\r\n    }\r\n\r\n    // $NUT LP Settings\r\n    bool public isLiquidityInBnb = true;\r\n    address[] public markerPairs;\r\n    mapping (address => bool) public automatedMarketMakerPairs;\r\n    uint256 targetLiquidity = 50;\r\n    uint256 targetLiquidityDenominator = 100;\r\n    IDEXRouter public router;\r\n    address public pair;\r\n    bool inSwap; \r\n\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    struct User {\r\n        uint256 firstBuy;\r\n        uint256 lastTradeTime;\r\n        uint256 tradeAmount;\r\n    } \r\n\r\n    mapping(address => User) public tradeData;\r\n    \r\n    modifier validRecipient(address to) {\r\n        require(to != address(0x0));\r\n        _;\r\n    }\r\n\r\n\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 private _gonsPerFragment;\r\n    uint256 private constant GON_SWAP_THRESHOLD = TOTAL_GONS / 10000;\r\n\r\n    mapping(address => uint256) private _gonBalances;\r\n    mapping(address => mapping(address => uint256)) private _allowedFragments;\r\n\r\n    constructor() ERC20Detailed(\"Nut2Earn\", \"NUT\", uint8(DECIMALS)) {\r\n        router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        pair = IDEXFactory(router.factory()).createPair(address(this), router.WETH());\r\n        address pairBusd = IDEXFactory(router.factory()).createPair(address(this), BUSD_TOKEN);\r\n\r\n        _allowedFragments[address(this)][address(router)] = uint256(-1);\r\n        _allowedFragments[address(this)][pair] = uint256(-1);\r\n        _allowedFragments[address(this)][address(this)] = uint256(-1);\r\n        _allowedFragments[address(this)][pairBusd] = uint256(-1);\r\n\r\n        setAutomatedMarketMakerPair(pair, true);\r\n        setAutomatedMarketMakerPair(pairBusd, true);\r\n\r\n        _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\r\n        _gonBalances[msg.sender] = TOTAL_GONS;\r\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n\r\n        isFeeExempt[yieldtoptreasuryReceiver] = true;\r\n        isFeeExempt[nuttreasuryreservesReceiver] = true;\r\n        isFeeExempt[address(this)] = true;\r\n        isFeeExempt[msg.sender] = true;\r\n\r\n        IERC20(BUSD_TOKEN).approve(address(router), uint256(-1));\r\n        IERC20(BUSD_TOKEN).approve(address(pairBusd), uint256(-1));\r\n        IERC20(BUSD_TOKEN).approve(address(this), uint256(-1));\r\n\r\n        emit Transfer(address(0x0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function noDecimaltotalSupply() external view returns (uint256) {\r\n        return _totalSupply.div(10**DECIMALS);\r\n    }\r\n\r\n    function nodecimalCirculatingSUpply() external view returns (uint256) {\r\n        return getCirculatingSupply().div(10**DECIMALS);\r\n    }\r\n\r\n    function allowance(address owner_, address spender) external view override returns (uint256){\r\n        return _allowedFragments[owner_][spender];\r\n    }\r\n\r\n    function balanceOf(address who) public view override returns (uint256) {\r\n        return _gonBalances[who].div(_gonsPerFragment);\r\n    }\r\n\r\n    function checkFeeExempt(address exemptAddress) external view returns (bool) {\r\n        return isFeeExempt[exemptAddress];\r\n    }\r\n\r\n    function checkSwapThreshold() external view returns (uint256) {\r\n        return GON_SWAP_THRESHOLD.div(_gonsPerFragment);\r\n    }\r\n\r\n    function shouldRebase() internal view returns (bool) {\r\n        return nextRebase <= block.timestamp;\r\n    }\r\n\r\n    function shouldTakeFee(address from, address to) internal view returns (bool) {\r\n        if(isFeeExempt[from] || isFeeExempt[to]){\r\n            return false; \r\n        }else{\r\n            return (automatedMarketMakerPairs[from] || automatedMarketMakerPairs[to]);\r\n        }\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return\r\n        !automatedMarketMakerPairs[msg.sender] &&\r\n        !inSwap && \r\n        totalBuyFee.add(totalSellFee) > 0 &&\r\n        _gonBalances[address(this)] >= GON_SWAP_THRESHOLD;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return (TOTAL_GONS.sub(_gonBalances[DEAD_WALLET_ADDRESS]).sub(_gonBalances[ZERO_WALLET_ADDRESS])).div(_gonsPerFragment);\r\n    }\r\n\r\n    function getLiquidityBacking(uint256 accuracy) public view returns (uint256){\r\n        uint256 liquidityBalance = 0;\r\n        for(uint i = 0; i < markerPairs.length; i++){\r\n            liquidityBalance.add(balanceOf(markerPairs[i]).div(10 ** 9));\r\n        }\r\n        return accuracy.mul(liquidityBalance.mul(2)).div(getCirculatingSupply().div(10 ** 9));\r\n    }\r\n\r\n    function isOverLiquified(uint256 target, uint256 accuracy) public view returns (bool){\r\n        return getLiquidityBacking(accuracy) > target;\r\n    }\r\n\r\n    function manualSync() public {\r\n        for(uint i = 0; i < markerPairs.length; i++){\r\n            InterfaceLP(markerPairs[i]).sync();\r\n        }\r\n    }\r\n\r\n    function transfer(address to, uint256 value) external override validRecipient(to) returns (bool){\r\n        _transferFrom(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(address from, address to, uint256 amount) internal returns (bool) {\r\n        uint256 gonAmount = amount.mul(_gonsPerFragment);\r\n        _gonBalances[from] = _gonBalances[from].sub(gonAmount);\r\n        _gonBalances[to] = _gonBalances[to].add(gonAmount);\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        bool excludedAccount = isFeeExempt[sender] || isFeeExempt[recipient];\r\n        if (\r\n            automatedMarketMakerPairs[recipient] &&\r\n            !excludedAccount\r\n        ) {\r\n            require(amount <= maxSellTransactionAmount, \"Error: amount must be above max sell amount\");\r\n        }\r\n\r\n        if (inSwap) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n\r\n        uint256 gonAmount = amount.mul(_gonsPerFragment);\r\n\r\n        if (shouldSwapBack()) {\r\n            swapBack();\r\n        }\r\n\r\n        _gonBalances[sender] = _gonBalances[sender].sub(gonAmount);\r\n\r\n        uint256 gonAmountReceived = shouldTakeFee(sender, recipient) ? takeFee(sender, recipient, gonAmount) : gonAmount;\r\n        _gonBalances[recipient] = _gonBalances[recipient].add(gonAmountReceived);\r\n\r\n        emit Transfer(\r\n            sender,\r\n            recipient,\r\n            gonAmountReceived.div(_gonsPerFragment)\r\n        );\r\n\r\n        \r\n        if (automatedMarketMakerPairs[recipient]) {    \r\n        if(shouldRebase() && autoRebase) {\r\n            _rebase();\r\n\r\n            if(!automatedMarketMakerPairs[sender] && !automatedMarketMakerPairs[recipient]){\r\n                manualSync();\r\n            }\r\n        }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) external override validRecipient(to) returns (bool) {\r\n        if (_allowedFragments[from][msg.sender] != uint256(-1)) {\r\n            _allowedFragments[from][msg.sender] = _allowedFragments[from][\r\n            msg.sender\r\n            ].sub(value, \"Insufficient Allowance\");\r\n        }\r\n\r\n        _transferFrom(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function _swapAndLiquify(uint256 contractTokenBalance) private {\r\n        uint256 half = contractTokenBalance.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n\r\n        if(isLiquidityInBnb){\r\n            uint256 initialBalance = address(this).balance;\r\n\r\n            _swapTokensForBNB(half, address(this));\r\n\r\n            uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n            _addLiquidity(otherHalf, newBalance);\r\n\r\n            emit SwapAndLiquify(half, newBalance, otherHalf);\r\n        }else{\r\n            uint256 initialBalance = IERC20(BUSD_TOKEN).balanceOf(address(this));\r\n\r\n            _swapTokensForBusd(half, address(this));\r\n\r\n            uint256 newBalance = IERC20(BUSD_TOKEN).balanceOf(address(this)).sub(initialBalance);\r\n\r\n            _addLiquidityBusd(otherHalf, newBalance);\r\n\r\n            emit SwapAndLiquifyBusd(half, newBalance, otherHalf);\r\n        }\r\n    }\r\n\r\n    function _addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\r\n        router.addLiquidityETH{value: bnbAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            nutliquidityReceiver,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _addLiquidityBusd(uint256 tokenAmount, uint256 busdAmount) private {\r\n        router.addLiquidity(\r\n            address(this),\r\n            BUSD_TOKEN,\r\n            tokenAmount,\r\n            busdAmount,\r\n            0,\r\n            0,\r\n            nutliquidityReceiver,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _swapTokensForBNB(uint256 tokenAmount, address receiver) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            receiver,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _swapTokensForBusd(uint256 tokenAmount, address receiver) private {\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        path[2] = BUSD_TOKEN;\r\n\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            receiver,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapBack() internal swapping {\r\n        uint256 realTotalFee = totalBuyFee.add(totalSellFee);\r\n        uint256 dynamicLiquidityFee = isOverLiquified(targetLiquidity, targetLiquidityDenominator) ? 0 : buyliquidityFee;\r\n\r\n        uint256 amountToLiquify = _gonBalances[address(this)].mul(dynamicLiquidityFee.mul(2)).div(realTotalFee).div(_gonsPerFragment);\r\n        uint256 amountToYieldTop = _gonBalances[address(this)].mul(buyyieldFee.add(sellyieldFee)).div(realTotalFee).div(_gonsPerFragment);\r\n        uint256 amountToFirepit = _gonBalances[address(this)].mul(buyfirepitfee.add(sellfirepitfee)).div(realTotalFee).div(_gonsPerFragment);\r\n        uint256 amountToTreasury = _gonBalances[address(this)].sub(amountToLiquify).sub(amountToYieldTop).sub(amountToFirepit).div(_gonsPerFragment);\r\n        uint256 contractTokenBalance = _gonBalances[address(this)].div(_gonsPerFragment);\r\n\r\n        if(!liquifyAll && contractTokenBalance > GON_SWAP_THRESHOLD.div(_gonsPerFragment)){\r\n        \tcontractTokenBalance = GON_SWAP_THRESHOLD.div(_gonsPerFragment);\r\n        }\r\n    \r\n        if(amountToLiquify > 0){\r\n            _swapAndLiquify(amountToLiquify);\r\n        }\r\n\r\n        if(amountToYieldTop > 0){\r\n            _swapTokensForBusd(amountToYieldTop, nuttreasuryreservesReceiver);\r\n        }\r\n\r\n        if(amountToTreasury > 0){\r\n            _swapTokensForBNB(amountToTreasury, yieldtoptreasuryReceiver);\r\n        }\r\n\r\n         if(amountToFirepit > 0){\r\n            _swapTokensForBNB(amountToFirepit, nutfirepitReceiver);\r\n        }\r\n\r\n        emit SwapBack(contractTokenBalance, amountToLiquify, amountToYieldTop, amountToTreasury, amountToFirepit);\r\n    }\r\n \r\n    function takeFee(address sender, address recipient, uint256 gonAmount) internal returns (uint256){\r\n        uint256 setrealFee = totalBuyFee;\r\n\r\n        if(automatedMarketMakerPairs[recipient]) setrealFee = totalSellFee;\r\n\r\n        uint256 feeAmount = gonAmount.mul(setrealFee).div(FEE_DENOMINATOR);\r\n\r\n        // referrals\r\n        if (automatedMarketMakerPairs[sender]) {\r\n            address UplineAddressBuyer = getUpline(recipient);\r\n            if (UplineAddressBuyer != address(0))\r\n            {\r\n                uint256 _uplineBuyerReward = gonAmount.mul(referrer).div(FEE_DENOMINATOR);\r\n                feeAmount = gonAmount.mul(setrealFee - referee).div(FEE_DENOMINATOR);\r\n                _gonBalances[UplineAddressBuyer] = _gonBalances[UplineAddressBuyer].add(\r\n                _uplineBuyerReward\r\n                );\r\n                addReferralFee(UplineAddressBuyer, _uplineBuyerReward.div(_gonsPerFragment) );  \r\n            }      \r\n        }\r\n        else if (automatedMarketMakerPairs[recipient]) {\r\n            address UplineAddress = getUpline(sender);\r\n\r\n            if (UplineAddress != address(0))\r\n            {\r\n                uint256 _uplineReward = gonAmount.mul(referrer).div(FEE_DENOMINATOR);\r\n                feeAmount = gonAmount.mul(setrealFee - referee).div(FEE_DENOMINATOR);\r\n                _gonBalances[UplineAddress] = _gonBalances[UplineAddress].add(\r\n                    _uplineReward\r\n                );\r\n                addReferralFee(UplineAddress, _uplineReward.div(_gonsPerFragment) );\r\n            }    \r\n        }\r\n\r\n        _gonBalances[address(this)] = _gonBalances[address(this)].add(feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount.div(_gonsPerFragment));\r\n\r\n        return gonAmount.sub(feeAmount);\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool){\r\n        uint256 oldValue = _allowedFragments[msg.sender][spender];\r\n        if (subtractedValue >= oldValue) {\r\n            _allowedFragments[msg.sender][spender] = 0;\r\n        } else {\r\n            _allowedFragments[msg.sender][spender] = oldValue.sub(\r\n                subtractedValue\r\n            );\r\n        }\r\n        emit Approval(\r\n            msg.sender,\r\n            spender,\r\n            _allowedFragments[msg.sender][spender]\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool){\r\n        _allowedFragments[msg.sender][spender] = _allowedFragments[msg.sender][\r\n        spender\r\n        ].add(addedValue);\r\n        emit Approval(\r\n            msg.sender,\r\n            spender,\r\n            _allowedFragments[msg.sender][spender]\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) external override returns (bool){\r\n        _allowedFragments[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function _rebase() private {\r\n        if(!inSwap) {\r\n            uint256 circulatingSupply = getCirculatingSupply();\r\n            int256 supplyDelta = int256(circulatingSupply.mul(nutRebase).div(nutRebaseDenominator));\r\n            coreRebase(supplyDelta);\r\n        }\r\n    }\r\n\r\n    function coreRebase(int256 supplyDelta) private returns (uint256) {\r\n        uint256 epoch = block.timestamp;\r\n        if (supplyDelta == 0) {\r\n            emit LogRebase(epoch, _totalSupply);\r\n            return _totalSupply;\r\n        } else {\r\n            if ((_totalSupply.add(uint256(supplyDelta))) >= MAX_SUPPLY) {\r\n            // in case the rebase will cause the supply to pass MAX_SUPPLY, autorebase will be turned off & rebase will not happen.\r\n            autoRebase = false;\r\n            emit LogRebase(epoch, _totalSupply);\r\n            return _totalSupply;\r\n        } else {\r\n            _totalSupply = _totalSupply.add(uint256(supplyDelta));\r\n         }\r\n        }\r\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n        nextRebase = epoch + rebaseFrequency;\r\n        emit LogRebase(epoch, _totalSupply);\r\n        return _totalSupply;\r\n    }\r\n\r\n    function manualRebase() external onlyOwner{\r\n        require(!inSwap, \"Try again\");\r\n        require(nextRebase <= block.timestamp, \"Not in time\");\r\n\r\n        uint256 circulatingSupply = getCirculatingSupply();\r\n        int256 supplyDelta = int256(circulatingSupply.mul(nutRebase).div(nutRebaseDenominator));\r\n\r\n        coreRebase(supplyDelta);\r\n        manualSync();\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address enterPair, bool enterValue) public onlyOwner {\r\n        require(automatedMarketMakerPairs[enterPair] != enterValue, \"Value already set\");\r\n\r\n        automatedMarketMakerPairs[enterPair] = enterValue;\r\n\r\n        if(enterValue){\r\n            markerPairs.push(enterPair);\r\n        }else{\r\n            require(markerPairs.length > 1, \"Required 1 pair\");\r\n            for (uint256 i = 0; i < markerPairs.length; i++) {\r\n                if (markerPairs[i] == enterPair) {\r\n                    markerPairs[i] = markerPairs[markerPairs.length - 1];\r\n                    markerPairs.pop();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        emit SetAutomatedMarketMakerPair(enterPair, enterValue);\r\n    }\r\n \r\n    function setFeeExempt(address exemptAddress, bool enterValue) external onlyOwner {\r\n        require(isFeeExempt[exemptAddress] != enterValue, \"Not changed\");\r\n        isFeeExempt[exemptAddress] = enterValue;\r\n    } \r\n\r\n    function setTargetLiquidity(uint256 target, uint256 accuracy) external onlyOwner {\r\n        targetLiquidity = target;\r\n        targetLiquidityDenominator = accuracy;\r\n        emit SetTargetLiquidity(targetLiquidity, targetLiquidityDenominator);\r\n    }\r\n \r\n\r\n    function setSwapBackSettings(bool isEnabled) external onlyOwner {\r\n        liquifyAll = isEnabled;\r\n    }\r\n\r\n    // Set Wallet & Contract Addresses To Receieve Transaction Tax Fees\r\n    function setFeeReceivers(address setnutliquidityReceiver, address setyieldtoptreasuryReceiver, address setnuttreasuryreservesReceiver, address setnutfirepitReceiver) external onlyOwner {\r\n        nutliquidityReceiver = setnutliquidityReceiver;\r\n        yieldtoptreasuryReceiver = setyieldtoptreasuryReceiver;\r\n        nuttreasuryreservesReceiver = setnuttreasuryreservesReceiver;\r\n        nutfirepitReceiver = setnutfirepitReceiver;\r\n    }\r\n\r\n\r\n    // Set Referral Fee Settings (The portion that's deducted from treasury in case of a referral)\r\n    function setReferralSettings(uint256 setReferee, uint256 setReferrer) external onlyOwner {\r\n        require(setReferee.add(setReferrer) <= buytreasuryFee, \"Error: The total referral fee must be lower or equal to the treasury fee\"); // checking that the referral fee is not higher than the buy treasury fee\r\n        require(setReferee.add(setReferrer) <= selltreasuryFee, \"Error: The total referral fee must be lower or equal to the treasury fee\"); // checking that the referral fee is not higher than the sell treasury fee\r\n        referee = setReferee;\r\n        referrer = setReferrer;\r\n        totalReferralFee = referee.add(referrer);\r\n        emit SetReferralSettings(referee, referrer, totalReferralFee);\r\n    }\r\n\r\n    // Set Buy Transactions Tax Fees\r\n    function setBuyFees(uint256 setbuyliquidityFee, uint256 setbuyyieldFee, uint256 setbuytreasuryFee, uint256 setbuyfirepitFee) external onlyOwner {\r\n        require(setbuytreasuryFee >= totalReferralFee);\r\n        buyliquidityFee = setbuyliquidityFee;\r\n        buyyieldFee = setbuyyieldFee;\r\n        buytreasuryFee = setbuytreasuryFee;\r\n        buyfirepitfee = setbuyfirepitFee;\r\n        totalBuyFee = buyliquidityFee.add(buytreasuryFee).add(buyyieldFee).add(buyfirepitfee);\r\n        require(totalBuyFee <= FEE_DENOMINATOR / 4);\r\n        emit SetBuyFees(buyliquidityFee, buyyieldFee, buytreasuryFee, buyfirepitfee, totalBuyFee);\r\n    }\r\n\r\n    // Set Sell Transactions Tax Fees\r\n     function setSellFees(uint256 setsellliquidityFee, uint256 setsellyieldFee, uint256 setselltreasuryFee, uint256 setsellfirepitFee) external onlyOwner {\r\n        require(setselltreasuryFee >= totalReferralFee);\r\n        sellfirepitfee = setsellfirepitFee;\r\n        sellliquidityFee = setsellliquidityFee;\r\n        sellyieldFee = setsellyieldFee;\r\n        selltreasuryFee = setselltreasuryFee;\r\n        totalSellFee = sellliquidityFee.add(sellyieldFee).add(selltreasuryFee).add(sellfirepitfee);\r\n        require(totalSellFee <= FEE_DENOMINATOR / 4);\r\n        emit SetSellFees(sellfirepitfee, sellliquidityFee, sellyieldFee, selltreasuryFee, totalSellFee);\r\n    }\r\n\r\n    // Rescue Token Stuck In Contract\r\n    function rescueToken(address tokenAddress, uint256 tokens) external onlyOwner returns (bool success){\r\n        require (tokenAddress != address(this));\r\n\t\tif(tokens == 0){\r\n            tokens = ERC20Detailed(tokenAddress).balanceOf(address(this));\r\n        }\r\n        return ERC20Detailed(tokenAddress).transfer(msg.sender, tokens);\r\n    }\r\n    \r\n    function setAutoRebase(bool onoffRebase) external onlyOwner {\r\n        require(autoRebase != onoffRebase, \"Not changed\");\r\n        autoRebase = onoffRebase;\r\n    }\r\n\r\n    function setRebaseFrequency(uint256 enterFrequency) external onlyOwner {\r\n        require(enterFrequency <= MAX_REBASE_FREQUENCY, \"Too high\");\r\n        rebaseFrequency = enterFrequency;\r\n        \r\n         emit SetRebaseFrequency(rebaseFrequency);\r\n    }\r\n\r\n    function setNutRebase(uint256 enterRebase, uint256 rebaseDenominator) external onlyOwner {\r\n        require(rebaseDenominator >= 1, \"Rebase Denominator can't be set to 0\");\r\n        nutRebase = enterRebase;\r\n        nutRebaseDenominator = rebaseDenominator;\r\n         emit SetNutRebase(nutRebase, nutRebaseDenominator);\r\n    }\r\n \r\n\r\n    function setIsLiquidityInBnb(bool enterValue) external onlyOwner {\r\n        require(isLiquidityInBnb != enterValue, \"Not changed\");\r\n        isLiquidityInBnb = enterValue;\r\n    }\r\n\r\n    function setNextRebase(uint256 epochRebase) external onlyOwner {\r\n        nextRebase = epochRebase;\r\n         emit SetNextRebase(nextRebase);\r\n    }\r\n\r\n    // Set the max sell transaction - must be above the minimum amount\r\n    function setMaxSellTransaction(uint256 maxTxn) external onlyOwner {\r\n        require(maxTxn >= (10000 * (10 ** 18)), \"The max sell amount should be above the minimum amount\");\r\n        maxSellTransactionAmount = maxTxn;\r\n\r\n         emit SetMaxSellTransaction(maxSellTransactionAmount);\r\n    }\r\n\r\n    event SetTargetLiquidity(uint256 targetLiquidity, uint256 targetLiquidityDenominator);\r\n    event SetReferralSettings(uint256 referee, uint256 referrer, uint256 totalReferralFee);\r\n    event SetBuyFees(uint256 buyliquidityFee, uint256 buyyieldFee, uint256 buytreasuryFee, uint256 buyfirepitfee, uint256 totalBuyFee);\r\n    event SetSellFees(uint256 sellfirepitfee, uint256 sellliquidityFee, uint256 sellyieldFee, uint256 selltreasuryFee, uint256 totalSellFee);\r\n    event SetRebaseFrequency(uint256 rebaseFrequency);\r\n    event SetNutRebase(uint256 nutRebase, uint256 nutRebaseDenominator);\r\n    event SetNextRebase(uint256 nextRebase);\r\n    event SetMaxSellTransaction(uint256 maxSellTransactionAmount);\r\n    event SwapBack(uint256 contractTokenBalance,uint256 amountToLiquify,uint256 amountToYieldTop,uint256 amountToTreasury,uint256 amountToFirepit);\r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 bnbReceived, uint256 tokensIntoLiqudity);\r\n    event SwapAndLiquifyBusd(uint256 tokensSwapped, uint256 busdReceived, uint256 tokensIntoLiqudity);\r\n    event LogRebase(uint256 indexed epoch, uint256 totalSupply);\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyliquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyyieldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buytreasuryFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyfirepitfee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBuyFee\",\"type\":\"uint256\"}],\"name\":\"SetBuyFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSellTransactionAmount\",\"type\":\"uint256\"}],\"name\":\"SetMaxSellTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextRebase\",\"type\":\"uint256\"}],\"name\":\"SetNextRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nutRebase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nutRebaseDenominator\",\"type\":\"uint256\"}],\"name\":\"SetNutRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rebaseFrequency\",\"type\":\"uint256\"}],\"name\":\"SetRebaseFrequency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalReferralFee\",\"type\":\"uint256\"}],\"name\":\"SetReferralSettings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellfirepitfee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellliquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellyieldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"selltreasuryFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSellFee\",\"type\":\"uint256\"}],\"name\":\"SetSellFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetLiquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetLiquidityDenominator\",\"type\":\"uint256\"}],\"name\":\"SetTargetLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"busdReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquifyBusd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractTokenBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToLiquify\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToYieldTop\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToTreasury\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToFirepit\",\"type\":\"uint256\"}],\"name\":\"SwapBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUSD_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEAD_WALLET_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO_WALLET_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uplineAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"downlineAddress\",\"type\":\"address\"}],\"name\":\"addMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uplineAddress\",\"type\":\"address\"}],\"name\":\"approveReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyfirepitfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyliquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buytreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyyieldFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptAddress\",\"type\":\"address\"}],\"name\":\"checkFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"downLines\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"downlineLookupUpline\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"getReferralTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalUpline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getUpline\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"iIndex\",\"type\":\"uint256\"}],\"name\":\"getUplineAddressByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getdownLines\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iTotalUplines\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLiquidityInBnb\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquifyAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markerPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noDecimaltotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodecimalCirculatingSUpply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nutRebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nutRebaseDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nutfirepitReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nutliquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nuttreasuryreservesReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralTotalFeeReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellfirepitfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellliquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selltreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellyieldFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoffRebase\",\"type\":\"bool\"}],\"name\":\"setAutoRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enterPair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enterValue\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setbuyliquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setbuyyieldFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setbuytreasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setbuyfirepitFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enterValue\",\"type\":\"bool\"}],\"name\":\"setFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"setnutliquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setyieldtoptreasuryReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setnuttreasuryreservesReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setnutfirepitReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enterValue\",\"type\":\"bool\"}],\"name\":\"setIsLiquidityInBnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxn\",\"type\":\"uint256\"}],\"name\":\"setMaxSellTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochRebase\",\"type\":\"uint256\"}],\"name\":\"setNextRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"enterRebase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebaseDenominator\",\"type\":\"uint256\"}],\"name\":\"setNutRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"enterFrequency\",\"type\":\"uint256\"}],\"name\":\"setRebaseFrequency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setReferee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setReferrer\",\"type\":\"uint256\"}],\"name\":\"setReferralSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setsellliquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setsellyieldFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setselltreasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setsellfirepitFee\",\"type\":\"uint256\"}],\"name\":\"setSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"setTargetLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReferralFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradeData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"firstBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTradeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uplineList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldtoptreasuryReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Nut2Earn", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8df2f9aa1cd9dc5360dd7fac2617a7b040b2d2e60e746b90bdc8355545446602"}