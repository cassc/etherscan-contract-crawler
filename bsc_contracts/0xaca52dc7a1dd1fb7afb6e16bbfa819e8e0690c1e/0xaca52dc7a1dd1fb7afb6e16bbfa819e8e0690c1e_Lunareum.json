{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Lunareum.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport '@pancakeswap/pancake-swap-lib/contracts/utils/Address.sol';\\nimport './utils/Ownable.sol';\\nimport \\\"./utils/LPSwapSupport.sol\\\";\\nimport \\\"./utils/BuyBack.sol\\\";\\n\\ncontract Lunareum is IBEP20, LPSwapSupport, BuyBack {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    struct TokenTracker {\\n        uint256 liquidity;\\n        uint256 buyback;\\n    }\\n\\n    struct Fees {\\n        uint256 reflection;\\n        uint256 liquidity;\\n        uint256 buyback;\\n        uint256 marketing;\\n        uint256 divisor;\\n    }\\n\\n    Fees public fees;\\n    TokenTracker public tokenTracker;\\n\\n    mapping (address => uint256) private _rOwned;\\n    mapping (address => uint256) private _tOwned;\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n    mapping (address => bool) public _isExcludedFromFee;\\n\\n    uint256 private constant MAX = ~uint256(0);\\n    uint256 private _tTotal;\\n    uint256 private _rTotal;\\n    uint256 private _tFeeTotal;\\n\\n    string public constant override name = \\\"Lunareum\\\";\\n    string public constant override symbol = \\\"LUNR\\\";\\n    uint256 private constant _decimals = 18;\\n\\n    bool public tradingOpen = false;\\n\\n    address public _marketingWallet;\\n\\n    constructor (uint256 _supply, address _routerAddress, address _tokenOwner, address _marketingAddress) BuyBack() public payable {\\n        _tTotal = _supply * 10 ** _decimals;\\n        _rTotal = (MAX - (MAX % _tTotal));\\n        _marketingWallet = _marketingAddress;\\n\\n        updateRouterAndPair(_routerAddress);\\n        liquidityReceiver = deadAddress;\\n\\n        minTokenSpendAmount = _tTotal.div(10 ** 6);\\n        address seedAddress1 = 0x3977B7C379CD648804b52F74790caEAbbcF4957B; // 5% supply\\n        _rOwned[seedAddress1] = _rTotal.div(100).mul(5);\\n        _rOwned[_tokenOwner] = _rTotal.sub(_rOwned[seedAddress1]);\\n        _isExcludedFromFee[_owner] = true;\\n        _isExcludedFromFee[_tokenOwner] = true;\\n        _isExcludedFromFee[_msgSender()] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n        _isExcludedFromFee[_marketingWallet] = true;\\n        _isExcludedFromFee[deadAddress] = true;\\n        _isExcludedFromFee[seedAddress1] = true;\\n\\n        fees = Fees({\\n            reflection: 2,\\n            liquidity: 3,\\n            buyback: 3,\\n            marketing: 2,\\n            divisor: 100\\n        });\\n\\n        tokenTracker = TokenTracker(0, 0);\\n\\n        _owner = _tokenOwner;\\n        emit Transfer(address(this), seedAddress1, _tTotal.mul(5).div(100));\\n        emit Transfer(address(this), _tokenOwner, _tTotal.mul(95).div(100));\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function decimals() external view override returns(uint8){\\n        return uint8(_decimals);\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balanceOf(account);\\n    }\\n\\n    function _balanceOf(address account) internal view override returns (uint256) {\\n        return tokenFromReflection(_rOwned[account]);\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address holder, address spender) public view override returns (uint256) {\\n        return _allowances[holder][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"BEP20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"BEP20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    function totalFees() public view returns (uint256) {\\n        return _tFeeTotal;\\n    }\\n\\n    function getOwner() external view override returns (address) {\\n        return owner();\\n    }\\n\\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\\n        require(rAmount <= _rTotal, \\\"Amount must be less than total reflections\\\");\\n        uint256 currentRate =  _getRate();\\n        return rAmount.div(currentRate);\\n    }\\n\\n    function excludeFromFee(address account, bool exclude) public onlyOwner {\\n        _isExcludedFromFee[account] = exclude;\\n    }\\n\\n    receive() external payable {}\\n\\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\\n        _rTotal = _rTotal.sub(rFee);\\n        _tFeeTotal = _tFeeTotal.add(tFee);\\n    }\\n\\n    function _getRate() private view returns(uint256) {\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n        return rSupply.div(tSupply);\\n    }\\n\\n    function _getCurrentSupply() private view returns(uint256, uint256) {\\n        uint256 rSupply = _rTotal;\\n        uint256 tSupply = _tTotal;\\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\n        return (rSupply, tSupply);\\n    }\\n\\n    function _takeLiquidity(uint256 tLiquidity) internal returns(uint256 rLiquidity) {\\n        if(tLiquidity == 0)\\n            return 0;\\n        uint256 currentRate =  _getRate();\\n        rLiquidity = tLiquidity.mul(currentRate);\\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\\n        tokenTracker.liquidity = tokenTracker.liquidity.add(tLiquidity);\\n        return rLiquidity;\\n    }\\n\\n    function _takeOtherFees(uint256 tMarketing, uint256 tBuyback) private returns(uint256) {\\n        uint256 currentRate =  _getRate();\\n        uint256 rMarketing = 0;\\n        uint256 rBuyback = 0;\\n        if(tMarketing > 0){\\n            rMarketing = tMarketing.mul(currentRate);\\n            _rOwned[_marketingWallet] = _rOwned[_marketingWallet].add(rMarketing);\\n            emit Transfer(address(this), _marketingWallet, tMarketing);\\n        }\\n        if(tBuyback > 0){\\n            rBuyback = tBuyback.mul(currentRate);\\n            _rOwned[address(this)] = _rOwned[address(this)].add(rBuyback);\\n            tokenTracker.buyback = tokenTracker.buyback.add(tBuyback);\\n        }\\n        return rBuyback.add(rMarketing);\\n    }\\n\\n    function _approve(address holder, address spender, uint256 amount) internal override {\\n        require(holder != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[holder][spender] = amount;\\n        emit Approval(holder, spender, amount);\\n    }\\n\\n    // This function was so large given the fee structure it had to be subdivided as solidity did not support\\n    // the possibility of containing so many local variables in a single execution.\\n    function _transfer(address from, address to, uint256 amount) private {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n\\n        uint256 rAmount;\\n        uint256 tTransferAmount;\\n        uint256 rTransferAmount;\\n        bool shouldDoBuyback = to == pancakePair && shouldAutoBuyback();\\n\\n        if(from != owner() && to != owner() && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\\n            if(!inSwap && from != pancakePair && !shouldDoBuyback) {\\n                selectSwapEvent();\\n            }\\n            if(from == pancakePair){ // Buy\\n                (rAmount, tTransferAmount, rTransferAmount) = takeFees(amount, false);\\n            } else if(to == pancakePair){ // Sell\\n                (rAmount, tTransferAmount, rTransferAmount) = takeFees(amount, checkIfWhaleSell(amount));\\n            } else {\\n                (rAmount, tTransferAmount, rTransferAmount) = valuesForNoFees(amount);\\n            }\\n\\n            emit Transfer(from, address(this), amount.sub(tTransferAmount));\\n            if(shouldDoBuyback){\\n                autoBuyback();\\n            }\\n        } else {\\n            (rAmount, tTransferAmount, rTransferAmount) = valuesForNoFees(amount);\\n        }\\n\\n        _transferStandard(from, to, rAmount, tTransferAmount, rTransferAmount);\\n    }\\n\\n    function valuesForNoFees(uint256 amount) private view returns(uint256 rAmount, uint256 tTransferAmount, uint256 rTransferAmount){\\n        rAmount = amount.mul(_getRate());\\n        tTransferAmount = amount;\\n        rTransferAmount = rAmount;\\n    }\\n\\n    function pushSwap() external {\\n        if(!inSwap && tradingOpen)\\n            selectSwapEvent();\\n    }\\n\\n    function selectSwapEvent() private lockTheSwap {\\n        if(!swapsEnabled){\\n            return;\\n        }\\n        uint256 buyback = tokenTracker.buyback;\\n        uint256 liq = tokenTracker.liquidity;\\n\\n        if(liq >= minTokenSpendAmount){\\n            swapAndLiquify(liq);\\n            tokenTracker.liquidity = 0;\\n        } else if(buyback >= minTokenSpendAmount){\\n            uint256 tokensSwapped = swapTokensForCurrency(buyback);\\n            tokenTracker.buyback = buyback.sub(tokensSwapped);\\n        }\\n    }\\n\\n    function takeFees(uint256 amount, bool isWhaleSell) private returns(uint256 rAmount, uint256 tTransferAmount, uint256 rTransferAmount){\\n        require(tradingOpen, \\\"Trading not yet enabled.\\\");\\n        uint256 tFee = amount.mul(fees.reflection).div(fees.divisor);\\n        uint256 tLiquidity = amount.mul(fees.liquidity).div(fees.divisor);\\n        uint256 tMarketing = amount.mul(fees.marketing).div(fees.divisor);\\n        uint256 tBuyback = amount.mul(fees.buyback).div(fees.divisor);\\n\\n        if(isWhaleSell){\\n            tBuyback = tBuyback.add(calculateBuybackTax(amount));\\n        }\\n        uint256 rFee = tFee.mul(_getRate());\\n        uint256 rOther = _takeOtherFees(tMarketing, tBuyback);\\n        uint256 rLiquidity = _takeLiquidity(tLiquidity);\\n\\n        tTransferAmount = amount.sub(tFee).sub(tMarketing);\\n        tTransferAmount = tTransferAmount.sub(tBuyback).sub(tLiquidity);\\n        rAmount = amount.mul(_getRate());\\n        rTransferAmount = rAmount.sub(rLiquidity).sub(rOther);\\n        _reflectFee(rFee, tFee);\\n        rTransferAmount = rTransferAmount.sub(rFee);\\n        return (rAmount, tTransferAmount, rTransferAmount);\\n    }\\n\\n    function _transferStandard(address sender, address recipient, uint256 rAmount, uint256 tTransferAmount, uint256 rTransferAmount) private {\\n        if(tTransferAmount == 0) { return; }\\n        if(sender != address(0))\\n            _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function updateFees(uint256 reflectionFee, uint256 liquidityFee, uint256 buybackFee, uint256 marketingFee, uint256 newFeeDivisor) public onlyOwner {\\n        fees = Fees({\\n            reflection: reflectionFee,\\n            liquidity: liquidityFee,\\n            buyback: buybackFee,\\n            marketing: marketingFee,\\n            divisor: newFeeDivisor\\n        });\\n    }\\n\\n    function updateMarketingWallet(address marketing) external onlyOwner {\\n        _marketingWallet = marketing;\\n    }\\n\\n    function openTrading() external onlyOwner {\\n        require(!tradingOpen, \\\"Trading already enabled\\\");\\n        tradingOpen = true;\\n        swapsEnabled = true;\\n        autoBuybackEnabled = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@pancakeswap/pancake-swap-lib/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}('');\\n        require(success, 'Address: unable to send value, recipient may have reverted');\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, 'Address: low-level call failed');\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, 'Address: insufficient balance for call');\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), 'Address: call to non-contract');\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\nimport '@pancakeswap/pancake-swap-lib/contracts/GSN/Context.sol';\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\n\\n\\npragma solidity >=0.6.0;\\ncontract Ownable is Context {\\n    address internal _owner;\\n    address private _previousOwner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor() internal {\\n        _owner = _msgSender();\\n\\n    }\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        require(_owner != address(0), \\\"Zero address is not a valid caller\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Leaves the contract without owner. It will not be possible to call\\n    * `onlyOwner` functions anymore. Can only be called by the current owner.\\n    *\\n    * NOTE: Renouncing ownership will leave the contract without an owner,\\n    * thereby removing any functionality that is only available to the owner.\\n    */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n        _previousOwner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n        _previousOwner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/LPSwapSupport.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\n/**\\nThere are far too many uses for the LP swapping pool.\\nRather than rewrite them, this contract performs them for us and uses both generic and specific calls.\\n-The Dev\\n*/\\nimport '@pancakeswap/pancake-swap-lib/contracts/token/BEP20/IBEP20.sol';\\nimport '@pancakeswap/pancake-swap-lib/contracts/utils/Address.sol';\\nimport '@pancakeswap/pancake-swap-lib/contracts/math/SafeMath.sol';\\nimport '@pancakeswap-libs/pancake-swap-core/contracts/interfaces/IPancakePair.sol';\\nimport '@pancakeswap-libs/pancake-swap-core/contracts/interfaces/IPancakeFactory.sol';\\nimport 'pancakeswap-peripheral/contracts/interfaces/IPancakeRouter02.sol';\\nimport \\\"./Ownable.sol\\\";\\n\\nabstract contract LPSwapSupport is Ownable {\\n    using SafeMath for uint256;\\n\\n    event UpdateRouter(address indexed newAddress, address indexed oldAddress);\\n    event UpdatePair(address indexed newAddress, address indexed oldAddress);\\n    event UpdateLPReceiver(address indexed newAddress, address indexed oldAddress);\\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\\n\\n    event SwapAndLiquify(\\n        uint256 tokensSwapped,\\n        uint256 currencyReceived,\\n        uint256 tokensIntoLiqudity\\n    );\\n\\n    modifier lockTheSwap {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    bool internal inSwap;\\n    bool public swapsEnabled = true;\\n\\n    uint256 public minSpendAmount;\\n    uint256 public maxSpendAmount;\\n\\n    uint256 public minTokenSpendAmount;\\n    uint256 public maxTokenSpendAmount;\\n\\n    IPancakeRouter02 public pancakeRouter;\\n    address public pancakePair;\\n    address public liquidityReceiver;\\n    address public deadAddress = address(0x000000000000000000000000000000000000dEaD);\\n\\n    constructor() public {\\n        liquidityReceiver = deadAddress;\\n        minSpendAmount = 0.01 ether;\\n        maxSpendAmount = 20 ether;\\n    }\\n\\n    function _approve(address holder, address spender, uint256 tokenAmount) internal virtual;\\n    function _balanceOf(address holder) internal view virtual returns(uint256);\\n\\n    function updateRouter(address newAddress) public onlyOwner {\\n        require(newAddress != address(pancakeRouter), \\\"The router is already set to this address\\\");\\n        emit UpdateRouter(newAddress, address(pancakeRouter));\\n        pancakeRouter = IPancakeRouter02(newAddress);\\n    }\\n\\n    function updateLiquidityReceiver(address receiverAddress) external onlyOwner{\\n        require(receiverAddress != liquidityReceiver, \\\"LP is already sent to that address\\\");\\n        emit UpdateLPReceiver(receiverAddress, liquidityReceiver);\\n        liquidityReceiver = receiverAddress;\\n    }\\n\\n    function updateRouterAndPair(address newAddress) public virtual onlyOwner {\\n        if(newAddress != address(pancakeRouter)){\\n            updateRouter(newAddress);\\n        }\\n        address _pancakeswapV2Pair = IPancakeFactory(pancakeRouter.factory()).createPair(address(this), pancakeRouter.WETH());\\n        if(_pancakeswapV2Pair != pancakePair){\\n            updateLPPair(_pancakeswapV2Pair);\\n        }\\n    }\\n\\n    function updateLPPair(address newAddress) public virtual onlyOwner {\\n        require(newAddress != pancakePair, \\\"The LP Pair is already set to this address\\\");\\n        emit UpdatePair(newAddress, pancakePair);\\n        pancakePair = newAddress;\\n    }\\n\\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\\n        swapsEnabled = _enabled;\\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\\n    }\\n\\n    function swapAndLiquify(uint256 tokens) internal {\\n        // split the contract balance into halves\\n        uint256 half = tokens.div(2);\\n        uint256 otherHalf = tokens.sub(half);\\n\\n        // capture the contract's current ETH balance.\\n        // this is so that we can capture exactly the amount of ETH that the\\n        // swap creates, and not make the liquidity event include any ETH that\\n        // has been manually sent to the contract\\n        uint256 initialBalance = address(this).balance;\\n\\n        // swap tokens for\\n        swapTokensForCurrencyUnchecked(half);\\n\\n        // how much did we just swap into?\\n        uint256 newBalance = address(this).balance.sub(initialBalance);\\n\\n        // add liquidity to uniswap\\n        addLiquidity(otherHalf, newBalance);\\n\\n        emit SwapAndLiquify(half, newBalance, otherHalf);\\n    }\\n\\n    function swapTokensForCurrency(uint256 tokenAmount) internal returns(uint256){\\n        return swapTokensForCurrencyAdv(address(this), tokenAmount, address(this));\\n    }\\n\\n    function swapTokensForCurrencyUnchecked(uint256 tokenAmount) private returns(uint256){\\n        return _swapTokensForCurrencyAdv(address(this), tokenAmount, address(this));\\n    }\\n\\n    function swapTokensForCurrencyAdv(address tokenAddress, uint256 tokenAmount, address destination) internal returns(uint256){\\n\\n        if(tokenAmount < minTokenSpendAmount){\\n            return 0;\\n        }\\n        if(maxTokenSpendAmount != 0 && tokenAmount > maxTokenSpendAmount){\\n            tokenAmount = maxTokenSpendAmount;\\n        }\\n        return _swapTokensForCurrencyAdv(tokenAddress, tokenAmount, destination);\\n    }\\n\\n    function _swapTokensForCurrencyAdv(address tokenAddress, uint256 tokenAmount, address destination) private returns(uint256){\\n        // generate the uniswap pair path of token -> weth\\n        address[] memory path = new address[](2);\\n        path[0] = tokenAddress;\\n        path[1] = pancakeRouter.WETH();\\n        uint256 tokenCurrentBalance;\\n        if(tokenAddress != address(this)){\\n            bool approved = IBEP20(tokenAddress).approve(address(pancakeRouter), tokenAmount);\\n            if(!approved){\\n                return 0;\\n            }\\n            tokenCurrentBalance = IBEP20(tokenAddress).balanceOf(address(this));\\n        } else {\\n            _approve(address(this), address(pancakeRouter), tokenAmount);\\n            tokenCurrentBalance = _balanceOf(address(this));\\n        }\\n        if(tokenCurrentBalance < tokenAmount){\\n            return 0;\\n        }\\n\\n        // make the swap\\n        pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0, // accept any amount of ETH\\n            path,\\n            destination,\\n            block.timestamp\\n        );\\n\\n        return tokenAmount;\\n    }\\n\\n    function addLiquidity(uint256 tokenAmount, uint256 cAmount) private {\\n\\n        // approve token transfer to cover all possible scenarios\\n        _approve(address(this), address(pancakeRouter), tokenAmount);\\n\\n        // add the liquidity\\n        pancakeRouter.addLiquidityETH{value: cAmount}(\\n            address(this),\\n            tokenAmount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            liquidityReceiver,\\n            block.timestamp\\n        );\\n    }\\n\\n    function swapCurrencyForTokens(uint256 amount) internal {\\n        swapCurrencyForTokensAdv(address(this), amount, address(this));\\n    }\\n\\n    function swapCurrencyForTokensAdv(address tokenAddress, uint256 amount, address destination) internal {\\n        if(amount > maxSpendAmount){\\n            amount = maxSpendAmount;\\n        }\\n        if(amount < minSpendAmount) {\\n            return;\\n        }\\n\\n        _swapCurrencyForTokensAdv(tokenAddress, amount, destination);\\n    }\\n\\n    function swapCurrencyForTokensUnchecked(address tokenAddress, uint256 amount, address destination) internal {\\n        _swapCurrencyForTokensAdv(tokenAddress, amount, destination);\\n    }\\n\\n    function _swapCurrencyForTokensAdv(address tokenAddress, uint256 amount, address destination) private {\\n        address[] memory path = new address[](2);\\n        path[0] = pancakeRouter.WETH();\\n        path[1] = tokenAddress;\\n        if(amount > address(this).balance){\\n            amount = address(this).balance;\\n        }\\n        // make the swap\\n        pancakeRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\\n            0,\\n            path,\\n            destination,\\n            block.timestamp.add(400)\\n        );\\n    }\\n\\n    function updateTokenSwapRange(uint256 minAmount, uint256 maxAmount) external onlyOwner {\\n        require(minAmount <= maxAmount || maxAmount == 0, \\\"Minimum must be less than maximum unless max is 0 (Unlimited)\\\");\\n        minTokenSpendAmount = minAmount;\\n        maxTokenSpendAmount = maxAmount;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/BuyBack.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"./LPSwapSupport.sol\\\";\\n\\nabstract contract BuyBack is LPSwapSupport {\\n    using SafeMath for uint256;\\n\\n    event BuybackTriggered(address indexed tokenReceiver, uint256 buybackAmount);\\n\\n    struct WhaleSellDefinition {\\n        uint256 whaleSellPercentage;\\n        uint256 whaleSellPercentageDivisor;\\n        uint256 whaleSellBuybackTaxPercentage;\\n        uint256 whaleSellBuybackTaxPercentageDivisor;\\n    }\\n\\n    uint256 private buybackWalletPercent;\\n    uint256 private buybackWalletPercentDivisor;\\n\\n    uint256 minBuybackTrigger;\\n\\n    WhaleSellDefinition public whaleCriteria;\\n\\n    address public buybackReceiver;\\n    bool public autoBuybackEnabled;\\n\\n    constructor() internal LPSwapSupport() {\\n        buybackReceiver = deadAddress;\\n        whaleCriteria.whaleSellPercentage = 1;\\n        whaleCriteria.whaleSellPercentageDivisor = 1000;\\n        whaleCriteria.whaleSellBuybackTaxPercentage = 2;\\n        whaleCriteria.whaleSellBuybackTaxPercentageDivisor = 100;\\n        buybackWalletPercent = 50;\\n        buybackWalletPercentDivisor = 100;\\n        minBuybackTrigger = 2 ether;\\n    }\\n\\n    function updateBuybackRange(uint256 minAmount, uint256 maxAmount) external onlyOwner {\\n        require(minAmount <= maxAmount, \\\"Minimum must be less than maximum\\\");\\n        minSpendAmount = minAmount;\\n        maxSpendAmount = maxAmount;\\n    }\\n\\n    function updateWhaleBuybackSellTax(uint256 additionalBuybackFee, uint256 additionalBuybackFeeDivisor) external onlyOwner {\\n        whaleCriteria.whaleSellBuybackTaxPercentage = additionalBuybackFee;\\n        whaleCriteria.whaleSellBuybackTaxPercentageDivisor = additionalBuybackFeeDivisor;\\n    }\\n\\n    function updateBuybackTrigger(uint256 buybackTrigger) external onlyOwner {\\n        minBuybackTrigger = buybackTrigger;\\n    }\\n\\n    function updateWhaleSellCriteria(uint256 sellPercentage, uint256 percentageDivisor) external onlyOwner {\\n        whaleCriteria.whaleSellPercentage = sellPercentage;\\n        whaleCriteria.whaleSellPercentageDivisor = percentageDivisor;\\n    }\\n\\n    function enableAutoBuyback(bool enable) external onlyOwner {\\n        autoBuybackEnabled = enable;\\n    }\\n\\n    function updateBuybackBuyPercentage(uint256 walletPercentageToSell, uint256 divisor) external onlyOwner {\\n        buybackWalletPercent = walletPercentageToSell;\\n        buybackWalletPercentDivisor = divisor;\\n    }\\n\\n    function checkIfWhaleSell(uint256 amount) internal view returns(bool) {\\n        return _balanceOf(pancakePair).mul(whaleCriteria.whaleSellPercentage).div(whaleCriteria.whaleSellPercentageDivisor) < amount;\\n    }\\n\\n    function shouldAutoBuyback() internal view returns(bool) {\\n        return autoBuybackEnabled && address(this).balance >= minBuybackTrigger;\\n    }\\n\\n    function updateBuybackReceiver(address buyback) external onlyOwner {\\n        buybackReceiver = buyback;\\n    }\\n\\n    function calculateBuybackTax(uint256 amount) internal view returns(uint256){\\n        return amount.mul(whaleCriteria.whaleSellBuybackTaxPercentage).div(whaleCriteria.whaleSellBuybackTaxPercentageDivisor);\\n    }\\n\\n    function manualBuyback(uint256 amount) external onlyOwner {\\n        require(amount <= address(this).balance, \\\"Contract balance too low for buyback\\\");\\n        swapCurrencyForTokensUnchecked(address(this), amount, buybackReceiver);\\n    }\\n\\n    function autoBuyback() internal {\\n        if(!inSwap){\\n            _autoBuyback();\\n        }\\n    }\\n\\n    function _autoBuyback() private lockTheSwap {\\n        IPancakePair(pancakePair).sync();\\n        uint256 amount = address(this).balance.mul(buybackWalletPercent).div(buybackWalletPercentDivisor);\\n        swapCurrencyForTokensAdv(address(this), amount, buybackReceiver);\\n        emit BuybackTriggered(buybackReceiver, amount);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@pancakeswap/pancake-swap-lib/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.4.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor() internal {}\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/IBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.4.0;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@pancakeswap/pancake-swap-lib/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, 'SafeMath: addition overflow');\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, 'SafeMath: subtraction overflow');\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, 'SafeMath: division by zero');\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, 'SafeMath: modulo by zero');\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@pancakeswap-libs/pancake-swap-core/contracts/interfaces/IPancakePair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IPancakePair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@pancakeswap-libs/pancake-swap-core/contracts/interfaces/IPancakeFactory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IPancakeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"pancakeswap-peripheral/contracts/interfaces/IPancakeRouter02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\r\\n\\r\\nimport './IPancakeRouter01.sol';\\r\\n\\r\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"pancakeswap-peripheral/contracts/interfaces/IPancakeRouter01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\r\\n\\r\\ninterface IPancakeRouter01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buybackAmount\",\"type\":\"uint256\"}],\"name\":\"BuybackTriggered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currencyReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateLPReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdatePair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateRouter\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoBuybackEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"enableAutoBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reflection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyback\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSpendAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokenSpendAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSpendAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokenSpendAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pushSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTracker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyback\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletPercentageToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"updateBuybackBuyPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"updateBuybackRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyback\",\"type\":\"address\"}],\"name\":\"updateBuybackReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buybackTrigger\",\"type\":\"uint256\"}],\"name\":\"updateBuybackTrigger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buybackFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newFeeDivisor\",\"type\":\"uint256\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateLPPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"}],\"name\":\"updateLiquidityReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketing\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateRouterAndPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"updateTokenSwapRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"additionalBuybackFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additionalBuybackFeeDivisor\",\"type\":\"uint256\"}],\"name\":\"updateWhaleBuybackSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentageDivisor\",\"type\":\"uint256\"}],\"name\":\"updateWhaleSellCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whaleCriteria\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"whaleSellPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whaleSellPercentageDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whaleSellBuybackTaxPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whaleSellBuybackTaxPercentageDivisor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Lunareum", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "000000000000000000000000000000000000000000000000000009184e72a00000000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e0000000000000000000000006ef224c2b848becc28c2ec1863547170ee4742cf0000000000000000000000005ab74630fe290652da91f36e8812acbe907c38a7", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}