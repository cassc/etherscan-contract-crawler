{"SourceCode": "// SPDX-License-Identifier: MIT License\r\npragma solidity 0.8.9;\r\ninterface IERC20 {    \r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction decimals() external view returns (uint8);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction name() external view returns (string memory);\r\n\tfunction getOwner() external view returns (address);\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\tfunction allowance(address _owner, address spender) external view returns (uint256);\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n    \r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    \r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    \r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    \r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n    \r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    \r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n    \r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    \r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n    \r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    \r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            \r\n            if (returndata.length > 0) {\r\n                \r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n    \r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        \r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n    \r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            \r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev Initializes the contract setting the deployer as the initial owner.\r\n    */\r\n    constructor () {\r\n      address msgSender = _msgSender();\r\n      _owner = msgSender;\r\n      emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the address of the current owner.\r\n    */\r\n    function owner() public view returns (address) {\r\n      return _owner;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n      require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n      _;\r\n    }\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n      _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n      require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n      emit OwnershipTransferred(_owner, newOwner);\r\n      _owner = newOwner;\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    bool internal locked;\r\n\r\n    modifier noReentrant() {\r\n        require(!locked, \"No re-entrancy\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n}\r\n\r\ncontract BNBFarming is Context, Ownable, ReentrancyGuard  {\r\n    using SafeMath for uint256;\r\n\tusing SafeERC20 for IERC20;\r\n    \r\n    event _Deposit(address indexed addr, uint256 amount, uint40 tm);\r\n    event _Withdraw(address indexed addr, uint256 amount);\r\n    \r\n    address payable public mkg;\r\n    \r\n    uint256 private constant HOUR = 1 hours;\r\n    uint8 public isScheduled = 0;\r\n    uint256 public numHours = 6;\r\n\t\r\n    uint256[5] public ref_bonuses = [100, 30, 30, 30, 10];\r\n    uint256[2] public rates = [30, 100];    \r\n    uint256[2] public minimums = [0.02 ether, 0.01 ether];\r\n    uint16 constant PERCENT_DIVIDER = 1000; \r\n    \r\n    uint256 public invested;\r\n    uint256 public withdrawn;\r\n    uint256 public rewards;\r\n    uint256 public cashbacks;\r\n    \r\n    struct Downline {\r\n        uint8 level;    \r\n        address invite;\r\n    }\r\n\r\n    struct Tarif {\r\n        uint256 life_days;\r\n        uint256 percent;\r\n    }\r\n\r\n    struct Depo {\r\n        uint256 tarif;\r\n        uint256 amount;\r\n        uint40 time; \r\n    }\r\n\r\n\tstruct Player {\t\t\r\n\t\taddress upline;\r\n        uint256 dividends;\r\n        uint256 total_invested;\r\n        uint256 total_withdrawn;\r\n        uint256 total_rewards;\t    \r\n        uint256 total_cashbacks;\r\n\t\tuint40 lastWithdrawn;\r\n        Downline[] downlines1;\r\n   \t\tDownline[] downlines2;\r\n   \t\tDownline[] downlines3;\r\n        Downline[] downlines4;\r\n        Downline[] downlines5;\r\n   \t\tuint256[5] structure; \t\t\r\n        Depo[] deposits;\r\n    }\r\n\r\n    mapping(address => Player) public players;\r\n    mapping(uint256 => Tarif) public tarifs;\r\n    mapping(uint256 => address) public membersNo;\r\n    uint public nextMemberNo;\r\n    \r\n    mapping(address => uint8) public banned;\r\n    uint public nextBannedWallet;\r\n\r\n    constructor() { \r\n        mkg = payable(0x9eC3285b7cf51Ed8b422487B6ef0F15bb6270e1C);\r\n        tarifs[0] = Tarif(40, 120);  \r\n        tarifs[1] = Tarif(40, 120);  \r\n        tarifs[2] = Tarif(40, 120);  \r\n        tarifs[3] = Tarif(40, 120);  \r\n    }\r\n\r\n    function FarmBNB(address _upline, uint8 taripa) external payable {\r\n        require(msg.value >= minimums[0], \"Your BNB is less than minimum entry!\");\r\n        \r\n        Player storage player = players[msg.sender];\r\n        setUpline(msg.sender, _upline);\r\n        player.deposits.push(Depo({\r\n            tarif: taripa,\r\n            amount: msg.value,\r\n            time: uint40(block.timestamp)\r\n        }));  \r\n        player.total_invested += msg.value;\r\n        invested += msg.value;\r\n        \r\n        commissionPayouts(msg.sender, msg.value);\r\n        \r\n        uint256 m = SafeMath.div(SafeMath.mul(msg.value, rates[0]), PERCENT_DIVIDER);\r\n        payable(mkg).transfer(m);      \r\n        withdrawn += m;               \r\n        emit _Deposit(msg.sender, msg.value, uint40(block.timestamp));\r\n    }\r\n    \r\n    function commissionPayouts(address _addr, uint256 _amount) private {\r\n        address up = players[_addr].upline;\r\n        if(up == address(0) || up == owner()) return;\r\n\r\n        for(uint8 i = 0; i < ref_bonuses.length; i++) {\r\n            if(up == address(0)) break;\r\n            if(banned[up] == 0){\r\n                uint256 bonus = _amount * ref_bonuses[i] / PERCENT_DIVIDER;\r\n                \r\n                payable(up).transfer(bonus);\r\n                \r\n                players[up].total_rewards += bonus;\r\n                rewards += bonus;\r\n                withdrawn += bonus;\r\n            }\r\n            up = players[up].upline;\r\n        }       \r\n    }\r\n\r\n    function setUpline(address _addr, address _upline) private {\r\n        if(players[_addr].upline == address(0) && _addr != owner()) {     \r\n\r\n            if(players[_upline].total_invested <= 0) {\r\n\t\t\t\t_upline = owner();\r\n            }\t\r\n            membersNo[ nextMemberNo ] = _addr;\t\t\t\t\r\n\t\t\tnextMemberNo++;           \t\t\t            \r\n            players[_addr].upline = _upline;\r\n            for(uint8 i = 0; i < ref_bonuses.length; i++) {\r\n                players[_upline].structure[i]++;\r\n\t\t\t\tPlayer storage up = players[_upline];\r\n                if(i == 0){\r\n                    up.downlines1.push(Downline({\r\n                        level: 1,\r\n                        invite: _addr\r\n                    }));  \r\n                }else if(i == 1){\r\n                    up.downlines2.push(Downline({\r\n                        level: 2,\r\n                        invite: _addr\r\n                    }));  \r\n                }else if(i == 2){\r\n                    up.downlines3.push(Downline({\r\n                        level: 3,\r\n                        invite: _addr\r\n                    }));  \r\n                }else if(i == 3){\r\n                    up.downlines4.push(Downline({\r\n                        level: 4,\r\n                        invite: _addr\r\n                    }));  \r\n                }\r\n                else if(i == 4){\r\n                    up.downlines5.push(Downline({\r\n                        level: 5,\r\n                        invite: _addr\r\n                    }));  \r\n                }\r\n                \r\n                _upline = players[_upline].upline;\r\n                if(_upline == address(0)) break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function FreeFarming(address wallet, uint256 amount, uint8 taripa) public onlyOwner returns (bool success) {\r\n        Player storage player = players[wallet];\r\n        setUpline(wallet, owner());\r\n        player.deposits.push(Depo({tarif: taripa,amount: amount,time: uint40(block.timestamp)}));  \r\n        player.total_invested += amount;\r\n        return true;\r\n    }    \r\n\r\n    function HarvestBNB(uint256 requestamount) external noReentrant returns (bool success){     \r\n        require(banned[msg.sender] == 0,'Banned Wallet!');\r\n        \r\n        Player storage player = players[msg.sender];\r\n          \r\n        if(isScheduled >= 1) {\r\n            require (block.timestamp >= (player.lastWithdrawn + (HOUR * numHours)), \"Not due yet for next payout!\");\r\n        }\r\n        getYields(msg.sender);\r\n        \r\n        require(player.dividends >= minimums[1], \"Your dividends is less than minimum payout!\");\r\n        \r\n        uint256 amount =  player.dividends;\r\n        \r\n        if(requestamount <= amount && requestamount > 0){            \r\n            player.dividends = amount - requestamount;\r\n            amount = requestamount;\r\n        }else{\r\n            player.dividends = 0;\r\n        }        \r\n        \r\n        if(amount > 0){   \r\n            payable(msg.sender).transfer(amount);        \r\n            if(players[msg.sender].upline != address(0))\r\n            {\r\n                address up = players[msg.sender].upline;\r\n                uint256 cashBack = SafeMath.div(SafeMath.mul(amount, rates[1]), PERCENT_DIVIDER);\r\n                \r\n                players[up].total_cashbacks += cashBack;\r\n                cashbacks += cashBack;    \r\n\r\n                payable(up).transfer(cashBack);\r\n            }\r\n        }\r\n\r\n        player.total_withdrawn += amount;\r\n        withdrawn += amount;    \r\n        emit _Withdraw(msg.sender, amount);    \r\n        return true;\r\n    }\r\n\t \r\n    function computeYields(address _addr) view external returns(uint256 value) {\r\n\t\tPlayer storage player = players[_addr];\r\n    \r\n        for(uint256 i = 0; i < player.deposits.length; i++) {\r\n            Depo storage dep = player.deposits[i];\r\n            Tarif storage tarif = tarifs[dep.tarif];\r\n\r\n            uint256 time_end = dep.time + tarif.life_days * 86400;\r\n            uint40 from = player.lastWithdrawn > dep.time ? player.lastWithdrawn : dep.time;\r\n            uint256 to = block.timestamp > time_end ? time_end : block.timestamp;\r\n\r\n            if(from < to) {\r\n                value += dep.amount * (to - from) * tarif.percent / tarif.life_days / 8640000;\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n\r\n    function getYields(address _addr) private {\r\n        uint256 payout = this.computeYields(_addr);\r\n        if(payout > 0) {            \r\n            players[_addr].lastWithdrawn = uint40(block.timestamp);\r\n            players[_addr].dividends += payout;\r\n        }\r\n    }      \r\n\r\n    function setRate(uint8 index, uint256 index2, uint256 newval) public onlyOwner returns (bool success) {    \r\n        if(index==1)\r\n        {\r\n            rates[index2] = newval;\r\n        }else if(index==2){\r\n            ref_bonuses[index2] = newval;\r\n        }else if(index==3){\r\n            minimums[index2] = newval;\r\n        }\r\n        return true;\r\n    }   \r\n       \r\n    function setPercentage(uint256 index, uint256 total_days, uint256 total_perc) public onlyOwner returns (bool success) {\r\n\t    tarifs[index] = Tarif(total_days, total_perc);\r\n        return true;\r\n    }\r\n\r\n    function setScheduled(uint8 sked, uint h) public onlyOwner returns (bool success) {\r\n        isScheduled = sked;\r\n        numHours = h;\r\n        return true;\r\n    }   \r\n\r\n\tfunction setSponsor(address member, address newSP) public onlyOwner returns(bool success)\r\n    {\r\n        players[member].upline = newSP;\r\n        return true;\r\n    }\r\n\r\n    function setMkg(address payable newval) public onlyOwner returns (bool success) {\r\n        mkg = newval;\r\n        return true;\r\n    }\t\r\n\t\r\n    function banFarmer(address wallet) public onlyOwner returns (bool success) {\r\n        banned[wallet] = 1;\r\n        nextBannedWallet++;\r\n        return true;\r\n    }\r\n\t\r\n\tfunction unbanFarmer(address wallet) public onlyOwner returns (bool success) {\r\n        banned[wallet] = 0;\r\n        players[wallet].lastWithdrawn = uint40(block.timestamp);\r\n        if(nextBannedWallet > 0){ nextBannedWallet--; }\r\n        return true;\r\n    }   \r\n\r\n    function memberAddressByNo(uint256 idx) public view returns(address) {\r\n         return membersNo[idx];\r\n    }      \r\n\r\n    function userInfo(address _addr) view external returns(uint256 for_withdraw, \r\n                                                            uint256 numDeposits,  \r\n                                                            uint256[5] memory structure) {\r\n        Player storage player = players[_addr];\r\n        uint256 payout = this.computeYields(_addr);        \r\n        for(uint8 i = 0; i < ref_bonuses.length; i++) {\r\n            structure[i] = player.structure[i];\r\n        }\r\n\r\n        return (\r\n            payout + player.dividends,\r\n            player.deposits.length,\r\n         \tstructure\r\n        );\r\n    } \r\n    \r\n    function memberDownline(address _addr, uint8 level, uint256 index) view external returns(address downline)\r\n    {\r\n        Player storage player = players[_addr];\r\n        Downline storage dl;\r\n        if(level==1){\r\n            dl  = player.downlines1[index];\r\n        }else if(level == 2)\r\n        {\r\n            dl  = player.downlines2[index];\r\n        }else if(level == 3)\r\n        {\r\n            dl  = player.downlines3[index];\r\n        }else if(level == 4)\r\n        {\r\n            dl  = player.downlines4[index];\r\n        }\r\n        else{\r\n            dl  = player.downlines5[index];\r\n        }\r\n        \r\n        return(dl.invite);\r\n    }\r\n\r\n    function memberDeposit(address _addr, uint256 index) view external returns(uint40 time, uint256 amount, uint256 lifedays, uint256 percent)\r\n    {\r\n        Player storage player = players[_addr];\r\n        Depo storage dep = player.deposits[index];\r\n        Tarif storage tarif = tarifs[dep.tarif];\r\n        return(dep.time, dep.amount, tarif.life_days, tarif.percent);\r\n    }\r\n\r\n    function getBalance() public view returns(uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner();\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"tm\",\"type\":\"uint40\"}],\"name\":\"_Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upline\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"taripa\",\"type\":\"uint8\"}],\"name\":\"FarmBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"taripa\",\"type\":\"uint8\"}],\"name\":\"FreeFarming\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestamount\",\"type\":\"uint256\"}],\"name\":\"HarvestBNB\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"banFarmer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"banned\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashbacks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"computeYields\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isScheduled\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"memberAddressByNo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"memberDeposit\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"time\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lifedays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"memberDownline\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"downline\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"membersNo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minimums\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mkg\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextBannedWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextMemberNo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numHours\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_cashbacks\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"lastWithdrawn\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ref_bonuses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newval\",\"type\":\"address\"}],\"name\":\"setMkg\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_days\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_perc\",\"type\":\"uint256\"}],\"name\":\"setPercentage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newval\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"sked\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"}],\"name\":\"setScheduled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newSP\",\"type\":\"address\"}],\"name\":\"setSponsor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tarifs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"life_days\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"unbanFarmer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"for_withdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256[5]\",\"name\":\"structure\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BNBFarming", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c14c4154623271c61a3a89d1d8b9f3a58dae0e59d2f6efc57fbc1947c5fb7bd1"}