{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"GaugeTypeProver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {RLPReader} from \\\"RLPReader.sol\\\";\\nimport {StateProofVerifier as Verifier} from \\\"StateProofVerifier.sol\\\";\\n\\ninterface IBlockHashOracle {\\n    function get_block_hash(uint256 _number) external view returns (bytes32);\\n}\\n\\ninterface IGaugeTypeOracle {\\n    function set_gauge_type(address _gauge, uint256 _type) external;\\n}\\n\\n/// @title Gauge Type Prover\\n/// @author Curve Finance\\ncontract GaugeTypeProver {\\n    using RLPReader for bytes;\\n    using RLPReader for RLPReader.RLPItem;\\n\\n    address constant GAUGE_CONTROLLER =\\n        0x2F50D538606Fa9EDD2B11E2446BEb18C9D5846bB;\\n    bytes32 constant GAUGE_CONTROLLER_HASH =\\n        keccak256(abi.encodePacked(GAUGE_CONTROLLER));\\n\\n    address public immutable BLOCK_HASH_ORACLE;\\n    address public immutable GAUGE_TYPE_ORACLE;\\n\\n    constructor(address _block_hash_oracle, address _gauge_type_oracle) {\\n        BLOCK_HASH_ORACLE = _block_hash_oracle;\\n        GAUGE_TYPE_ORACLE = _gauge_type_oracle;\\n    }\\n\\n    /// Prove the type of a gauge.\\n    /// @param _gauges List of gauges to prove the type of.\\n    /// @param _block_header_rlp The block header of any block in which the gauge has its type set.\\n    /// @param _proof_rlp The state proof of the gauge types.\\n    function prove(\\n        address[] memory _gauges,\\n        bytes memory _block_header_rlp,\\n        bytes memory _proof_rlp\\n    ) external {\\n        Verifier.BlockHeader memory block_header = Verifier.parseBlockHeader(\\n            _block_header_rlp\\n        );\\n        require(block_header.hash != bytes32(0)); // dev: invalid blockhash\\n        require(\\n            block_header.hash ==\\n                IBlockHashOracle(BLOCK_HASH_ORACLE).get_block_hash(\\n                    block_header.number\\n                )\\n        ); // dev: blockhash mismatch\\n\\n        // convert _proof_rlp into a list of `RLPItem`s\\n        RLPReader.RLPItem[] memory proofs = _proof_rlp.toRlpItem().toList();\\n        require(proofs.length >= 2 && proofs.length - 1 == _gauges.length); // dev: invalid number of proofs\\n\\n        // 0th proof is the account proof for the Gauge Controller contract\\n        Verifier.Account memory account = Verifier.extractAccountFromProof(\\n            GAUGE_CONTROLLER_HASH, // position of the account is the hash of its address\\n            block_header.stateRootHash,\\n            proofs[0].toList()\\n        );\\n        require(account.exists); // dev: Gauge Controller account does not exist\\n\\n        // iterate through each proof and set the gauge type of each gauge\\n        Verifier.SlotValue memory slot;\\n        for (uint256 idx = 1; idx < proofs.length; idx++) {\\n            slot = Verifier.extractSlotValueFromProof(\\n                keccak256(\\n                    abi.encode(keccak256(abi.encode(8, _gauges[idx - 1])))\\n                ),\\n                account.storageRoot,\\n                proofs[idx].toList()\\n            );\\n            require(slot.exists && slot.value != 0);\\n\\n            IGaugeTypeOracle(GAUGE_TYPE_ORACLE).set_gauge_type(\\n                _gauges[idx - 1],\\n                slot.value - 1 // the true gauge type is the slot value - 1\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"RLPReader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * @author Hamdi Allam hamdi.allam97@gmail.com\\n * Please reach out with any questions or concerns\\n */\\npragma solidity >=0.5.10 <=0.8.18;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint256 len;\\n        uint256 memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item; // Item that's being iterated over.\\n        uint256 nextPtr; // Position of the next item in the list.\\n    }\\n\\n    /*\\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n     * @param self The iterator.\\n     * @return The next element in the iteration.\\n     */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint256 ptr = self.nextPtr;\\n        uint256 itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns true if the iteration has more elements.\\n     * @param self The iterator.\\n     * @return true if the iteration has more elements.\\n     */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\n        uint256 memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @dev Create an iterator. Reverts if item is not a list.\\n     * @param self The RLP item.\\n     * @return An 'Iterator' over the item.\\n     */\\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\\n        require(isList(self));\\n\\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\\n        return item.len;\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     * @return (memPtr, len) pair: location of the item's payload in memory.\\n     */\\n    function payloadLocation(RLPItem memory item) internal pure returns (uint256, uint256) {\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 memPtr = item.memPtr + offset;\\n        uint256 len = item.len - offset; // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\\n        (, uint256 len) = payloadLocation(item);\\n        return len;\\n    }\\n\\n    /*\\n     * @param the RLP item containing the encoded list.\\n     */\\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\\n        require(isList(item));\\n\\n        uint256 items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of RLP encoded bytes.\\n     */\\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        uint256 ptr = item.memPtr;\\n        uint256 len = item.len;\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(ptr, len)\\n        }\\n        return result;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of the item payload.\\n     */\\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(memPtr, len)\\n        }\\n        return result;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte except \\\"0x80\\\" is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint256 result;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        // SEE Github Issue #5.\\n        // Summary: Most commonly used RLP libraries (i.e Geth) will encode\\n        // \\\"0\\\" as \\\"0x80\\\" instead of as \\\"0\\\". We handle this edge case explicitly\\n        // here.\\n        if (result == 0 || result == STRING_SHORT_START) {\\n            return false;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n\\n        uint256 result;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shift to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes memory result = new bytes(len);\\n\\n        uint256 destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(memPtr, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint256) {\\n        if (item.len == 0) return 0;\\n\\n        uint256 count = 0;\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) {\\n            itemLen = 1;\\n        } else if (byte0 < STRING_LONG_START) {\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n        } else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) {\\n            return 0;\\n        } else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) {\\n            return 1;\\n        } else if (byte0 < LIST_SHORT_START) {\\n            // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        } else {\\n            return byte0 - (LIST_LONG_START - 1) + 1;\\n        }\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(uint256 src, uint256 dest, uint256 len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len > 0) {\\n            // left over bytes. Mask is used to remove unwanted bytes from the word\\n            uint256 mask = 256**(WORD_SIZE - len) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask)) // zero out src\\n                let destpart := and(mload(dest), mask) // retrieve the bytes\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"StateProofVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {MerklePatriciaProofVerifier} from \\\"MerklePatriciaProofVerifier.sol\\\";\\nimport {RLPReader} from \\\"RLPReader.sol\\\";\\n\\n/**\\n * @title A helper library for verification of Merkle Patricia account and state proofs.\\n */\\nlibrary StateProofVerifier {\\n    using RLPReader for RLPReader.RLPItem;\\n    using RLPReader for bytes;\\n\\n    uint256 constant HEADER_STATE_ROOT_INDEX = 3;\\n    uint256 constant HEADER_NUMBER_INDEX = 8;\\n    uint256 constant HEADER_TIMESTAMP_INDEX = 11;\\n\\n    struct BlockHeader {\\n        bytes32 hash;\\n        bytes32 stateRootHash;\\n        uint256 number;\\n        uint256 timestamp;\\n    }\\n\\n    struct Account {\\n        bool exists;\\n        uint256 nonce;\\n        uint256 balance;\\n        bytes32 storageRoot;\\n        bytes32 codeHash;\\n    }\\n\\n    struct SlotValue {\\n        bool exists;\\n        uint256 value;\\n    }\\n\\n\\n    /**\\n     * @notice Parses block header and verifies its presence onchain within the latest 256 blocks.\\n     * @param _headerRlpBytes RLP-encoded block header.\\n     */\\n    function verifyBlockHeader(bytes memory _headerRlpBytes)\\n        internal view returns (BlockHeader memory)\\n    {\\n        BlockHeader memory header = parseBlockHeader(_headerRlpBytes);\\n        // ensure that the block is actually in the blockchain\\n        require(header.hash == blockhash(header.number), \\\"blockhash mismatch\\\");\\n        return header;\\n    }\\n\\n\\n    /**\\n     * @notice Parses RLP-encoded block header.\\n     * @param _headerRlpBytes RLP-encoded block header.\\n     */\\n    function parseBlockHeader(bytes memory _headerRlpBytes)\\n        internal pure returns (BlockHeader memory)\\n    {\\n        BlockHeader memory result;\\n        RLPReader.RLPItem[] memory headerFields = _headerRlpBytes.toRlpItem().toList();\\n\\n        require(headerFields.length > HEADER_TIMESTAMP_INDEX);\\n\\n        result.stateRootHash = bytes32(headerFields[HEADER_STATE_ROOT_INDEX].toUint());\\n        result.number = headerFields[HEADER_NUMBER_INDEX].toUint();\\n        result.timestamp = headerFields[HEADER_TIMESTAMP_INDEX].toUint();\\n        result.hash = keccak256(_headerRlpBytes);\\n\\n        return result;\\n    }\\n\\n\\n    /**\\n     * @notice Verifies Merkle Patricia proof of an account and extracts the account fields.\\n     *\\n     * @param _addressHash Keccak256 hash of the address corresponding to the account.\\n     * @param _stateRootHash MPT root hash of the Ethereum state trie.\\n     */\\n    function extractAccountFromProof(\\n        bytes32 _addressHash, // keccak256(abi.encodePacked(address))\\n        bytes32 _stateRootHash,\\n        RLPReader.RLPItem[] memory _proof\\n    )\\n        internal pure returns (Account memory)\\n    {\\n        bytes memory acctRlpBytes = MerklePatriciaProofVerifier.extractProofValue(\\n            _stateRootHash,\\n            abi.encodePacked(_addressHash),\\n            _proof\\n        );\\n\\n        Account memory account;\\n\\n        if (acctRlpBytes.length == 0) {\\n            return account;\\n        }\\n\\n        RLPReader.RLPItem[] memory acctFields = acctRlpBytes.toRlpItem().toList();\\n        require(acctFields.length == 4);\\n\\n        account.exists = true;\\n        account.nonce = acctFields[0].toUint();\\n        account.balance = acctFields[1].toUint();\\n        account.storageRoot = bytes32(acctFields[2].toUint());\\n        account.codeHash = bytes32(acctFields[3].toUint());\\n\\n        return account;\\n    }\\n\\n\\n    /**\\n     * @notice Verifies Merkle Patricia proof of a slot and extracts the slot's value.\\n     *\\n     * @param _slotHash Keccak256 hash of the slot position.\\n     * @param _storageRootHash MPT root hash of the account's storage trie.\\n     */\\n    function extractSlotValueFromProof(\\n        bytes32 _slotHash,\\n        bytes32 _storageRootHash,\\n        RLPReader.RLPItem[] memory _proof\\n    )\\n        internal pure returns (SlotValue memory)\\n    {\\n        bytes memory valueRlpBytes = MerklePatriciaProofVerifier.extractProofValue(\\n            _storageRootHash,\\n            abi.encodePacked(_slotHash),\\n            _proof\\n        );\\n\\n        SlotValue memory value;\\n\\n        if (valueRlpBytes.length != 0) {\\n            value.exists = true;\\n            value.value = valueRlpBytes.toRlpItem().toUint();\\n        }\\n\\n        return value;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"MerklePatriciaProofVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {RLPReader} from \\\"RLPReader.sol\\\";\\n\\n/**\\n * Copied from https://github.com/lidofinance/curve-merkle-oracle/blob/1033b3e/contracts/MerklePatriciaProofVerifier.sol\\n * with minor code style-related modifications and solidity version constraints loosened.\\n *\\n * Copied from https://github.com/lorenzb/proveth/blob/c74b20e/onchain/ProvethVerifier.sol\\n * with minor performance and code style-related modifications.\\n */\\nlibrary MerklePatriciaProofVerifier {\\n    using RLPReader for RLPReader.RLPItem;\\n    using RLPReader for bytes;\\n\\n    /// @dev Validates a Merkle-Patricia-Trie proof.\\n    ///      If the proof proves the inclusion of some key-value pair in the\\n    ///      trie, the value is returned. Otherwise, i.e. if the proof proves\\n    ///      the exclusion of a key from the trie, an empty byte array is\\n    ///      returned.\\n    /// @param rootHash is the Keccak-256 hash of the root node of the MPT.\\n    /// @param path is the key of the node whose inclusion/exclusion we are\\n    ///        proving.\\n    /// @param stack is the stack of MPT nodes (starting with the root) that\\n    ///        need to be traversed during verification.\\n    /// @return value whose inclusion is proved or an empty byte array for\\n    ///         a proof of exclusion\\n    function extractProofValue(\\n        bytes32 rootHash,\\n        bytes memory path,\\n        RLPReader.RLPItem[] memory stack\\n    ) internal pure returns (bytes memory value) {\\n        bytes memory mptKey = _decodeNibbles(path, 0);\\n        uint256 mptKeyOffset = 0;\\n\\n        bytes32 nodeHashHash;\\n        RLPReader.RLPItem[] memory node;\\n\\n        RLPReader.RLPItem memory rlpValue;\\n\\n        if (stack.length == 0) {\\n            // Root hash of empty Merkle-Patricia-Trie\\n            require(\\n                rootHash ==\\n                    0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\\n            );\\n            return new bytes(0);\\n        }\\n\\n        // Traverse stack of nodes starting at root.\\n        for (uint256 i = 0; i < stack.length; i++) {\\n            // We use the fact that an rlp encoded list consists of some\\n            // encoding of its length plus the concatenation of its\\n            // *rlp-encoded* items.\\n\\n            // The root node is hashed with Keccak-256 ...\\n            if (i == 0 && rootHash != stack[i].rlpBytesKeccak256()) {\\n                revert();\\n            }\\n            // ... whereas all other nodes are hashed with the MPT\\n            // hash function.\\n            if (i != 0 && nodeHashHash != _mptHashHash(stack[i])) {\\n                revert();\\n            }\\n            // We verified that stack[i] has the correct hash, so we\\n            // may safely decode it.\\n            node = stack[i].toList();\\n\\n            if (node.length == 2) {\\n                // Extension or Leaf node\\n\\n                bool isLeaf;\\n                bytes memory nodeKey;\\n                (isLeaf, nodeKey) = _merklePatriciaCompactDecode(\\n                    node[0].toBytes()\\n                );\\n\\n                uint256 prefixLength = _sharedPrefixLength(\\n                    mptKeyOffset,\\n                    mptKey,\\n                    nodeKey\\n                );\\n                mptKeyOffset += prefixLength;\\n\\n                if (prefixLength < nodeKey.length) {\\n                    // Proof claims divergent extension or leaf. (Only\\n                    // relevant for proofs of exclusion.)\\n                    // An Extension/Leaf node is divergent iff it \\\"skips\\\" over\\n                    // the point at which a Branch node should have been had the\\n                    // excluded key been included in the trie.\\n                    // Example: Imagine a proof of exclusion for path [1, 4],\\n                    // where the current node is a Leaf node with\\n                    // path [1, 3, 3, 7]. For [1, 4] to be included, there\\n                    // should have been a Branch node at [1] with a child\\n                    // at 3 and a child at 4.\\n\\n                    // Sanity check\\n                    if (i < stack.length - 1) {\\n                        // divergent node must come last in proof\\n                        revert();\\n                    }\\n\\n                    return new bytes(0);\\n                }\\n\\n                if (isLeaf) {\\n                    // Sanity check\\n                    if (i < stack.length - 1) {\\n                        // leaf node must come last in proof\\n                        revert();\\n                    }\\n\\n                    if (mptKeyOffset < mptKey.length) {\\n                        return new bytes(0);\\n                    }\\n\\n                    rlpValue = node[1];\\n                    return rlpValue.toBytes();\\n                } else {\\n                    // extension\\n                    // Sanity check\\n                    if (i == stack.length - 1) {\\n                        // shouldn't be at last level\\n                        revert();\\n                    }\\n\\n                    if (!node[1].isList()) {\\n                        // rlp(child) was at least 32 bytes. node[1] contains\\n                        // Keccak256(rlp(child)).\\n                        nodeHashHash = node[1].payloadKeccak256();\\n                    } else {\\n                        // rlp(child) was less than 32 bytes. node[1] contains\\n                        // rlp(child).\\n                        nodeHashHash = node[1].rlpBytesKeccak256();\\n                    }\\n                }\\n            } else if (node.length == 17) {\\n                // Branch node\\n\\n                if (mptKeyOffset != mptKey.length) {\\n                    // we haven't consumed the entire path, so we need to look at a child\\n                    uint8 nibble = uint8(mptKey[mptKeyOffset]);\\n                    mptKeyOffset += 1;\\n                    if (nibble >= 16) {\\n                        // each element of the path has to be a nibble\\n                        revert();\\n                    }\\n\\n                    if (_isEmptyBytesequence(node[nibble])) {\\n                        // Sanity\\n                        if (i != stack.length - 1) {\\n                            // leaf node should be at last level\\n                            revert();\\n                        }\\n\\n                        return new bytes(0);\\n                    } else if (!node[nibble].isList()) {\\n                        nodeHashHash = node[nibble].payloadKeccak256();\\n                    } else {\\n                        nodeHashHash = node[nibble].rlpBytesKeccak256();\\n                    }\\n                } else {\\n                    // we have consumed the entire mptKey, so we need to look at what's contained in this node.\\n\\n                    // Sanity\\n                    if (i != stack.length - 1) {\\n                        // should be at last level\\n                        revert();\\n                    }\\n\\n                    return node[16].toBytes();\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Computes the hash of the Merkle-Patricia-Trie hash of the RLP item.\\n    ///      Merkle-Patricia-Tries use a weird \\\"hash function\\\" that outputs\\n    ///      *variable-length* hashes: If the item is shorter than 32 bytes,\\n    ///      the MPT hash is the item. Otherwise, the MPT hash is the\\n    ///      Keccak-256 hash of the item.\\n    ///      The easiest way to compare variable-length byte sequences is\\n    ///      to compare their Keccak-256 hashes.\\n    /// @param item The RLP item to be hashed.\\n    /// @return Keccak-256(MPT-hash(item))\\n    function _mptHashHash(\\n        RLPReader.RLPItem memory item\\n    ) private pure returns (bytes32) {\\n        if (item.len < 32) {\\n            return item.rlpBytesKeccak256();\\n        } else {\\n            return keccak256(abi.encodePacked(item.rlpBytesKeccak256()));\\n        }\\n    }\\n\\n    function _isEmptyBytesequence(\\n        RLPReader.RLPItem memory item\\n    ) private pure returns (bool) {\\n        if (item.len != 1) {\\n            return false;\\n        }\\n        uint8 b;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            b := byte(0, mload(memPtr))\\n        }\\n        return b == 0x80 /* empty byte string */;\\n    }\\n\\n    function _merklePatriciaCompactDecode(\\n        bytes memory compact\\n    ) private pure returns (bool isLeaf, bytes memory nibbles) {\\n        require(compact.length > 0);\\n        uint256 first_nibble = (uint8(compact[0]) >> 4) & 0xF;\\n        uint256 skipNibbles;\\n        if (first_nibble == 0) {\\n            skipNibbles = 2;\\n            isLeaf = false;\\n        } else if (first_nibble == 1) {\\n            skipNibbles = 1;\\n            isLeaf = false;\\n        } else if (first_nibble == 2) {\\n            skipNibbles = 2;\\n            isLeaf = true;\\n        } else if (first_nibble == 3) {\\n            skipNibbles = 1;\\n            isLeaf = true;\\n        } else {\\n            // Not supposed to happen!\\n            revert();\\n        }\\n        return (isLeaf, _decodeNibbles(compact, skipNibbles));\\n    }\\n\\n    function _decodeNibbles(\\n        bytes memory compact,\\n        uint256 skipNibbles\\n    ) private pure returns (bytes memory nibbles) {\\n        require(compact.length > 0);\\n\\n        uint256 length = compact.length * 2;\\n        require(skipNibbles <= length);\\n        length -= skipNibbles;\\n\\n        nibbles = new bytes(length);\\n        uint256 nibblesLength = 0;\\n\\n        for (uint256 i = skipNibbles; i < skipNibbles + length; i += 1) {\\n            if (i % 2 == 0) {\\n                nibbles[nibblesLength] = bytes1(\\n                    (uint8(compact[i / 2]) >> 4) & 0xF\\n                );\\n            } else {\\n                nibbles[nibblesLength] = bytes1(\\n                    (uint8(compact[i / 2]) >> 0) & 0xF\\n                );\\n            }\\n            nibblesLength += 1;\\n        }\\n\\n        assert(nibblesLength == nibbles.length);\\n    }\\n\\n    function _sharedPrefixLength(\\n        uint256 xsOffset,\\n        bytes memory xs,\\n        bytes memory ys\\n    ) private pure returns (uint256) {\\n        uint256 i;\\n        for (i = 0; i + xsOffset < xs.length && i < ys.length; i++) {\\n            if (xs[i + xsOffset] != ys[i]) {\\n                return i;\\n            }\\n        }\\n        return i;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"GaugeTypeProver.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_block_hash_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge_type_oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BLOCK_HASH_ORACLE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GAUGE_TYPE_ORACLE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"_block_header_rlp\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_proof_rlp\",\"type\":\"bytes\"}],\"name\":\"prove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GaugeTypeProver", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007cde6ef7e2e2fd3b6355637f1303586d7262ba3700000000000000000000000060dcc21869c6de55b50a196be3c6d2da189efd18", "EVMVersion": "istanbul", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}