{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Staking is Ownable, ReentrancyGuard {\r\n    uint256 public stakeFee = 0; // stake fee by %\r\n    uint256 public unstakeFee = 20; // unstake fee by %\r\n    address public FeeReceiver = 0x13A08A0D90b84A099A7914012Aa8628da696769A;\r\n    uint256 public constant WAITING_TIME_TO_UNSTAKE = 1 days;\r\n\r\n    enum HistoryType {\r\n        STAKE,\r\n        UNSTAKE,\r\n        CLAIM\r\n    }\r\n\r\n    struct UserStakeHistory {\r\n        address user;\r\n        uint256 amount;\r\n        uint256 created_at;\r\n        HistoryType history_type;\r\n    }\r\n\r\n    struct Stake {\r\n        uint256 duration;\r\n        uint256 apy; // 1% == 0.01\r\n    }\r\n\r\n    struct UserStake {\r\n        address staker;\r\n        uint256 stakeId;\r\n        uint256 amount;\r\n        uint256 start;\r\n        uint256 claimTime; // default 0: claim stake when staking is ended: timestamp: claim stake time when staking is running\r\n        bool claimed;\r\n    }\r\n\r\n    event NewStake(uint256 indexed stakeId);\r\n    event UpdatedStake(uint256 indexed stakeId);\r\n    event NewStaking(uint256 indexed id, address indexed stakinger);\r\n    event Claimed(uint256 indexed id);\r\n\r\n    UserStakeHistory[] userStakeHistory;\r\n\r\n    IERC20 public tokenStaking;\r\n\r\n    uint256 public totalStake;\r\n    mapping(uint256 => Stake) public stakes;\r\n    uint256 public totalUserStake;\r\n    mapping(uint256 => UserStake) public userStakes;\r\n\r\n    mapping(address => uint256[]) private userStakeIdList;\r\n\r\n    mapping(address => uint256) public earned;\r\n\r\n    uint256 public totalStakedAmount;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    constructor(address _stakingToken) {\r\n        tokenStaking = IERC20(_stakingToken);\r\n    }\r\n\r\n    modifier stakeExists(uint256 _id) {\r\n        require(_id < totalStake, \"Invalid stakeId\");\r\n        _;\r\n    }\r\n\r\n    modifier userStakeExists(uint256 _id) {\r\n        require(_id < totalUserStake, \"Invalid stakeId\");\r\n        _;\r\n    }\r\n\r\n    function _setStake(uint256 _duration, uint256 _apy, uint256 _id) private onlyOwner {\r\n        stakes[_id].duration = _duration;\r\n        stakes[_id].apy = _apy;\r\n    }\r\n\r\n    function addStake(uint256 _duration, uint256 _apy) external onlyOwner {\r\n        _setStake(_duration, _apy, totalStake);\r\n        emit NewStake(totalStake);\r\n        totalStake++;\r\n    }\r\n\r\n    function updateStake(uint256 _duration, uint256 _apy, uint256 _id) external onlyOwner stakeExists(_id) {\r\n        _setStake(_duration, _apy, _id);\r\n        emit UpdatedStake(_id);\r\n    }\r\n\r\n    function setTokenStaking(address _tokenStaking) external onlyOwner {\r\n        tokenStaking = IERC20(_tokenStaking);\r\n    }\r\n\r\n    function updateStakeFee(uint256 _newStakeFee) public onlyOwner {\r\n        require(_newStakeFee <= 100 && _newStakeFee > 0, \"Invalid fee!\");\r\n\r\n        stakeFee = _newStakeFee;\r\n    }\r\n\r\n    function updateUnstakeFee(uint256 _newUnstakeFee) public onlyOwner {\r\n        require(_newUnstakeFee <= 100 && _newUnstakeFee > 0, \"Invalid fee!\");\r\n\r\n        unstakeFee = _newUnstakeFee;\r\n    }\r\n\r\n    function updateFeeReceiver(address _newFeeReceiver) public onlyOwner {\r\n        FeeReceiver = _newFeeReceiver;\r\n    }\r\n\r\n    function withdraw() external onlyOwner {\r\n        uint256 balance = tokenStaking.balanceOf(address(this));\r\n        tokenStaking.transfer(msg.sender, balance);\r\n    }\r\n\r\n    function getUserStakeIdList(address _address) public view returns (uint256[] memory) {\r\n        return userStakeIdList[_address];\r\n    }\r\n\r\n    function getAllUserStakeHistory() public view returns (UserStakeHistory[] memory) {\r\n        return userStakeHistory;\r\n    }\r\n\r\n    function stake(uint256 _stakeId, uint256 _amount) external stakeExists(_stakeId) {\r\n        address sender = _msgSender();\r\n\r\n        require(_amount > 0, \"Invalid amount!\");\r\n\r\n        require(tokenStaking.transferFrom(sender, address(this), _amount));\r\n\r\n        // save to the userStakes mapping with new value (without claimed and claimTime => claimed = false & claimTime = 0)\r\n        userStakes[totalUserStake].staker = sender;\r\n        userStakes[totalUserStake].stakeId = _stakeId;\r\n        userStakes[totalUserStake].amount = _amount;\r\n        userStakes[totalUserStake].start = block.timestamp;\r\n\r\n        userStakeIdList[sender].push(totalUserStake);\r\n\r\n        userStakeHistory.push(UserStakeHistory(sender, _amount, block.timestamp, HistoryType.STAKE));\r\n\r\n        totalUserStake++;\r\n        totalStakedAmount += _amount;\r\n\r\n        emit NewStaking(totalUserStake, sender);\r\n    }\r\n\r\n    function claim(uint256 _id) external userStakeExists(_id) nonReentrant {\r\n        address sender = _msgSender();\r\n\r\n        UserStake memory uStake_ = userStakes[_id];\r\n\r\n        require(sender == uStake_.staker, \"Unauthorized!\");\r\n\r\n        require(!uStake_.claimed, \"User has already claimed!\");\r\n\r\n        Stake memory stake_ = stakes[uStake_.stakeId];\r\n\r\n        if (uStake_.claimTime == 0) {\r\n            // UNSTAKE: CALC WAITING TIME TO EXECUTE\r\n            if (block.timestamp < uStake_.start + stake_.duration) {\r\n                userStakes[_id].claimTime = block.timestamp + WAITING_TIME_TO_UNSTAKE;\r\n            }\r\n            // CLAIM\r\n            else {\r\n                uint256 reward_ = uStake_.amount + pendingReward(_id);\r\n\r\n                require(tokenStaking.transfer(sender, reward_));\r\n\r\n                userStakes[_id].claimed = true;\r\n\r\n                totalStakedAmount -= uStake_.amount;\r\n\r\n                userStakeHistory.push(UserStakeHistory(sender, reward_, block.timestamp, HistoryType.CLAIM));\r\n\r\n                emit Claimed(_id);\r\n            }\r\n        }\r\n        // RETRIEVE AFTER UNSTAKE WAITING TIME ENDED\r\n        else {\r\n            require(block.timestamp >= uStake_.claimTime, \"Unable to claim yet!\");\r\n\r\n            uint256 realAmount = (uStake_.amount * (100 - unstakeFee)) / 100;\r\n\r\n            require(tokenStaking.transfer(sender, realAmount));\r\n\r\n            require(tokenStaking.transfer(FeeReceiver, uStake_.amount - realAmount));\r\n\r\n            userStakes[_id].claimed = true;\r\n\r\n            totalStakedAmount -= uStake_.amount;\r\n\r\n            userStakeHistory.push(UserStakeHistory(sender, realAmount, block.timestamp, HistoryType.UNSTAKE));\r\n\r\n            emit Claimed(_id);\r\n        }\r\n    }\r\n\r\n    function pendingReward(uint256 _id) public view returns (uint256) {\r\n        UserStake memory uStake_ = userStakes[_id];\r\n\r\n        if (uStake_.claimed) return 0;\r\n\r\n        Stake memory stake_ = stakes[uStake_.stakeId];\r\n\r\n        uint256 time_ = block.timestamp < uStake_.start + stake_.duration\r\n            ? block.timestamp - uStake_.start\r\n            : stake_.duration;\r\n\r\n        return (uStake_.amount * stake_.apy * time_) / (100 * 365 days);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"NewStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakinger\",\"type\":\"address\"}],\"name\":\"NewStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"UpdatedStake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAITING_TIME_TO_UNSTAKE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"}],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllUserStakeHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"created_at\",\"type\":\"uint256\"},{\"internalType\":\"enum Staking.HistoryType\",\"name\":\"history_type\",\"type\":\"uint8\"}],\"internalType\":\"struct Staking.UserStakeHistory[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUserStakeIdList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenStaking\",\"type\":\"address\"}],\"name\":\"setTokenStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenStaking\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUserStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFeeReceiver\",\"type\":\"address\"}],\"name\":\"updateFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"updateStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newStakeFee\",\"type\":\"uint256\"}],\"name\":\"updateStakeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newUnstakeFee\",\"type\":\"uint256\"}],\"name\":\"updateUnstakeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userStakes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000013a08a0d90b84a099a7914012aa8628da696769a", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://87eab5af66a232c0cfa1423cb81980217cc8ace4dcc08e29b544a1de5b65d84d"}