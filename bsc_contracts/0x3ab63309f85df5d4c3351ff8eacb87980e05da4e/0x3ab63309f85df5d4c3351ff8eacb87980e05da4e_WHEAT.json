{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2021-04-12\r\n*/\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/IExchange.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Custom and uniform interface to a decentralized exchange. It is used\r\n *      to estimate and convert funds whenever necessary. This furnishes\r\n *      client contracts with the flexibility to replace conversion strategy\r\n *      and routing, dynamically, by delegating these operations to different\r\n *      external contracts that share this common interface.\r\n */\r\ninterface IExchange\r\n{\r\n\t// view functions\r\n\tfunction calcConversionFromInput(address _from, address _to, uint256 _inputAmount) external view returns (uint256 _outputAmount);\r\n\tfunction calcConversionFromOutput(address _from, address _to, uint256 _outputAmount) external view returns (uint256 _inputAmount);\r\n\r\n\t// open functions\r\n\tfunction convertFundsFromInput(address _from, address _to, uint256 _inputAmount, uint256 _minOutputAmount) external returns (uint256 _outputAmount);\r\n\tfunction convertFundsFromOutput(address _from, address _to, uint256 _outputAmount, uint256 _maxInputAmount) external returns (uint256 _inputAmount);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/EnumerableSet.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n// File: contracts/WhitelistGuard.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\nabstract contract WhitelistGuard is Ownable\r\n{\r\n\tusing EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n\tEnumerableSet.AddressSet private whitelist;\r\n\r\n\tmodifier onlyEOAorWhitelist()\r\n\t{\r\n\t\taddress _from = _msgSender();\r\n\t\trequire(tx.origin == _from || whitelist.contains(_from), \"access denied\");\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyWhitelist()\r\n\t{\r\n\t\taddress _from = _msgSender();\r\n\t\trequire(whitelist.contains(_from), \"access denied\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction addToWhitelist(address _address) external onlyOwner\r\n\t{\r\n\t\trequire(whitelist.add(_address), \"already listed\");\r\n\t}\r\n\r\n\tfunction removeFromWhitelist(address _address) external onlyOwner\r\n\t{\r\n\t\trequire(whitelist.remove(_address), \"not listed\");\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/modules/Transfers.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @dev This library abstracts ERC-20 operations in the context of the current\r\n * contract.\r\n */\r\nlibrary Transfers\r\n{\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\t/**\r\n\t * @dev Retrieves a given ERC-20 token balance for the current contract.\r\n\t * @param _token An ERC-20 compatible token address.\r\n\t * @return _balance The current contract balance of the given ERC-20 token.\r\n\t */\r\n\tfunction _getBalance(address _token) internal view returns (uint256 _balance)\r\n\t{\r\n\t\treturn IERC20(_token).balanceOf(address(this));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows a spender to access a given ERC-20 balance for the current contract.\r\n\t * @param _token An ERC-20 compatible token address.\r\n\t * @param _to The spender address.\r\n\t * @param _amount The exact spending allowance amount.\r\n\t */\r\n\tfunction _approveFunds(address _token, address _to, uint256 _amount) internal\r\n\t{\r\n\t\tuint256 _allowance = IERC20(_token).allowance(address(this), _to);\r\n\t\tif (_allowance > _amount) {\r\n\t\t\tIERC20(_token).safeDecreaseAllowance(_to, _allowance - _amount);\r\n\t\t}\r\n\t\telse\r\n\t\tif (_allowance < _amount) {\r\n\t\t\tIERC20(_token).safeIncreaseAllowance(_to, _amount - _allowance);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfer a given ERC-20 token amount into the current contract.\r\n\t * @param _token An ERC-20 compatible token address.\r\n\t * @param _from The source address.\r\n\t * @param _amount The amount to be transferred.\r\n\t */\r\n\tfunction _pullFunds(address _token, address _from, uint256 _amount) internal\r\n\t{\r\n\t\tif (_amount == 0) return;\r\n\t\tIERC20(_token).safeTransferFrom(_from, address(this), _amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfer a given ERC-20 token amount from the current contract.\r\n\t * @param _token An ERC-20 compatible token address.\r\n\t * @param _to The target address.\r\n\t * @param _amount The amount to be transferred.\r\n\t */\r\n\tfunction _pushFunds(address _token, address _to, uint256 _amount) internal\r\n\t{\r\n\t\tif (_amount == 0) return;\r\n\t\tIERC20(_token).safeTransfer(_to, _amount);\r\n\t}\r\n}\r\n\r\n// File: contracts/Buyback.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Buyback is ReentrancyGuard, WhitelistGuard\r\n{\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256 constant DEFAULT_REWARD_BUYBACK1_SHARE = 70e16; // 70%\r\n\tuint256 constant DEFAULT_REWARD_BUYBACK2_SHARE = 15e16; // 15%\r\n\tuint256 constant DEFAULT_REWARD_YIELD_SHARE = 15e16; // 15%\r\n\r\n\taddress constant public FURNACE = 0x000000000000000000000000000000000000dEaD;\r\n\r\n\taddress public immutable rewardToken;\r\n\taddress public immutable routingToken;\r\n\taddress public immutable buybackToken1;\r\n\taddress public immutable buybackToken2;\r\n\r\n\taddress public exchange;\r\n\taddress public treasury;\r\n\taddress public yield;\r\n\r\n\tuint256 public rewardBuyback1Share = DEFAULT_REWARD_BUYBACK1_SHARE;\r\n\tuint256 public rewardBuyback2Share = DEFAULT_REWARD_BUYBACK2_SHARE;\r\n\tuint256 public rewardYieldShare = DEFAULT_REWARD_YIELD_SHARE;\r\n\r\n\tconstructor (address _rewardToken, address _routingToken, address _buybackToken1, address _buybackToken2, address _treasury, address _yield) public\r\n\t{\r\n\t\trewardToken = _rewardToken;\r\n\t\troutingToken = _routingToken;\r\n\t\tbuybackToken1 = _buybackToken1;\r\n\t\tbuybackToken2 = _buybackToken2;\r\n\t\ttreasury = _treasury;\r\n\t\tyield = _yield;\r\n\t}\r\n\r\n\tfunction pendingBuyback() external view returns (uint256 _buybackAmount)\r\n\t{\r\n\t\treturn _calcPendingBuyback();\r\n\t}\r\n\r\n\tfunction gulp() external onlyEOAorWhitelist nonReentrant\r\n\t{\r\n\t\t_gulp();\r\n\t}\r\n\r\n\tfunction recoverLostFunds(address _token) external onlyOwner nonReentrant\r\n\t{\r\n\t\trequire(_token != rewardToken, \"invalid token\");\r\n\t\tuint256 _balance = Transfers._getBalance(_token);\r\n\t\tTransfers._pushFunds(_token, treasury, _balance);\r\n\t}\r\n\r\n\tfunction setExchange(address _newExchange) external onlyOwner nonReentrant\r\n\t{\r\n\t\taddress _oldExchange = exchange;\r\n\t\texchange = _newExchange;\r\n\t\temit ChangeExchange(_oldExchange, _newExchange);\r\n\t}\r\n\r\n\tfunction setTreasury(address _newTreasury) external onlyOwner nonReentrant\r\n\t{\r\n\t\trequire(_newTreasury != address(0), \"invalid address\");\r\n\t\taddress _oldTreasury = treasury;\r\n\t\ttreasury = _newTreasury;\r\n\t\temit ChangeTreasury(_oldTreasury, _newTreasury);\r\n\t}\r\n\r\n\tfunction setYield(address _newYield) external onlyOwner nonReentrant\r\n\t{\r\n\t\trequire(_newYield != address(0), \"invalid address\");\r\n\t\taddress _oldYield = yield;\r\n\t\tyield = _newYield;\r\n\t\temit ChangeYield(_oldYield, _newYield);\r\n\t}\r\n\r\n\tfunction setRewardSplit(uint256 _newRewardBuyback1Share, uint256 _newRewardBuyback2Share, uint256 _newRewardYieldShare) external onlyOwner nonReentrant\r\n\t{\r\n\t\trequire(_newRewardBuyback1Share <= 1e18, \"invalid rate\");\r\n\t\trequire(_newRewardBuyback2Share <= 1e18, \"invalid rate\");\r\n\t\trequire(_newRewardYieldShare <= 1e18, \"invalid rate\");\r\n\t\trequire(_newRewardBuyback1Share + _newRewardBuyback2Share + _newRewardYieldShare == 1e18, \"invalid split\");\r\n\t\tuint256 _oldRewardBuyback1Share = rewardBuyback1Share;\r\n\t\tuint256 _oldRewardBuyback2Share = rewardBuyback2Share;\r\n\t\tuint256 _oldRewardYieldShare = rewardYieldShare;\r\n\t\trewardBuyback1Share = _newRewardBuyback1Share;\r\n\t\trewardBuyback2Share = _newRewardBuyback2Share;\r\n\t\trewardYieldShare = _newRewardYieldShare;\r\n\t\temit ChangeRewardSplit(_oldRewardBuyback1Share, _oldRewardBuyback2Share, _oldRewardYieldShare, _newRewardBuyback1Share, _newRewardBuyback2Share, _newRewardYieldShare);\r\n\t}\r\n\r\n\tfunction _calcPendingBuyback() internal view returns (uint256 _buybackAmount)\r\n\t{\r\n\t\treturn Transfers._getBalance(rewardToken);\r\n\t}\r\n\r\n\tfunction _gulp() internal\r\n\t{\r\n\t\trequire(exchange != address(0), \"exchange not set\");\r\n\t\tuint256 _balance = Transfers._getBalance(rewardToken);\r\n\t\tTransfers._approveFunds(rewardToken, exchange, _balance);\r\n\t\tuint256 _total = IExchange(exchange).convertFundsFromInput(rewardToken, routingToken, _balance, 1);\r\n\t\tuint256 _amount1 = _total.mul(DEFAULT_REWARD_BUYBACK1_SHARE) / 1e18;\r\n\t\tuint256 _amount2 = _total.mul(DEFAULT_REWARD_BUYBACK2_SHARE) / 1e18;\r\n\t\tuint256 _burning = _amount1 + _amount2;\r\n\t\tuint256 _sending = _total - _burning;\r\n\t\tTransfers._approveFunds(routingToken, exchange, _burning);\r\n\t\tuint256 _burning1 = IExchange(exchange).convertFundsFromInput(routingToken, buybackToken1, _amount1, 1);\r\n\t\tuint256 _amount3 = IExchange(exchange).convertFundsFromInput(routingToken, buybackToken2, _amount2, 1);\r\n\t\tuint256 _burning2 = _amount3 / 2;\r\n\t\tuint256 _sending2 = _amount3 - _burning2;\r\n\t\t_burn(buybackToken1, _burning1);\r\n\t\t_burn(buybackToken2, _burning2);\r\n\t\t_send(buybackToken2, treasury, _sending2);\r\n\t\t_send(routingToken, yield, _sending);\r\n\t}\r\n\r\n\tfunction _burn(address _token, uint256 _amount) internal\r\n\t{\r\n\t\tTransfers._pushFunds(_token, FURNACE, _amount);\r\n\t}\r\n\r\n\tfunction _send(address _token, address _to, uint256 _amount) internal\r\n\t{\r\n\t\tTransfers._pushFunds(_token, _to, _amount);\r\n\t}\r\n\r\n\tevent ChangeExchange(address _oldExchange, address _newExchange);\r\n\tevent ChangeTreasury(address _oldTreasury, address _newTreasury);\r\n\tevent ChangeYield(address _oldYield, address _newYield);\r\n\tevent ChangeRewardSplit(uint256 _oldRewardBuyback1Share, uint256 _oldRewardBuyback2Share, uint256 _oldRewardYieldShare, uint256 _newRewardBuyback1Share, uint256 _newRewardBuyback2Share, uint256 _newRewardYieldShare);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: contracts/MintableToken.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\ncontract MintableToken is ERC20, Ownable\r\n{\r\n\tconstructor (string memory _name, string memory _symbol, uint8 _decimals)\r\n\t\tERC20(_name, _symbol) public\r\n\t{\r\n\t\t_setupDecimals(_decimals);\r\n\t}\r\n\r\n\tfunction mint(address _to, uint256 _amount) external onlyOwner\r\n\t{\r\n\t\t_mint(_to, _amount);\r\n\t}\r\n\r\n\tfunction burn(address _from ,uint256 _amount) external onlyOwner\r\n\t{\r\n\t\t_burn(_from, _amount);\r\n\t}\r\n}\r\n\r\n// File: contracts/modules/Math.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev This library implements auxiliary math definitions.\r\n */\r\nlibrary Math\r\n{\r\n\tfunction _min(uint256 _amount1, uint256 _amount2) internal pure returns (uint256 _minAmount)\r\n\t{\r\n\t\treturn _amount1 < _amount2 ? _amount1 : _amount2;\r\n\t}\r\n\r\n\tfunction _max(uint256 _amount1, uint256 _amount2) internal pure returns (uint256 _maxAmount)\r\n\t{\r\n\t\treturn _amount1 > _amount2 ? _amount1 : _amount2;\r\n\t}\r\n\r\n\tfunction _sqrt(uint256 _y) internal pure returns (uint256 _z)\r\n\t{\r\n\t\tif (_y > 3) {\r\n\t\t\t_z = _y;\r\n\t\t\tuint256 _x = _y / 2 + 1;\r\n\t\t\twhile (_x < _z) {\r\n\t\t\t\t_z = _x;\r\n\t\t\t\t_x = (_y / _x + _x) / 2;\r\n\t\t\t}\r\n\t\t\treturn _z;\r\n\t\t}\r\n\t\tif (_y > 0) return 1;\r\n\t\treturn 0;\r\n\t}\r\n}\r\n\r\n// File: contracts/MintableStakeToken.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\ncontract MintableStakeToken is MintableToken\r\n{\r\n\taddress public immutable cake;\r\n\r\n\tconstructor (string memory _name, string memory _symbol, uint8 _decimals, address _cake)\r\n\t\tMintableToken(_name, _symbol, _decimals) public\r\n\t{\r\n\t\tcake = _cake;\r\n\t}\r\n\r\n\tfunction safeCakeTransfer(address _to, uint256 _amount) external onlyOwner\r\n\t{\r\n\t\tuint256 _balance = Transfers._getBalance(cake);\r\n\t\tTransfers._pushFunds(cake, _to, Math._min(_amount, _balance));\r\n\t}\r\n}\r\n\r\n// File: contracts/CustomMasterChef.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// MasterChef is the master of Cake. He can make Cake and he is a fair guy.\r\n//\r\n// Note that it's ownable and the owner wields tremendous power. The ownership\r\n// will be transferred to a governance smart contract once CAKE is sufficiently\r\n// distributed and the community can show to govern itself.\r\n//\r\n// Have fun reading it. Hopefully it's bug-free. God bless.\r\ncontract CustomMasterChef is WhitelistGuard\r\n{\r\n\tusing SafeMath for uint256;\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\t// Info of each user.\r\n\tstruct UserInfo {\r\n\t\tuint256 amount;     // How many LP tokens the user has provided.\r\n\t\tuint256 rewardDebt; // Reward debt. See explanation below.\r\n\t\t//\r\n\t\t// We do some fancy math here. Basically, any point in time, the amount of CAKEs\r\n\t\t// entitled to a user but is pending to be distributed is:\r\n\t\t//\r\n\t\t//   pending reward = (user.amount * pool.accCakePerShare) - user.rewardDebt\r\n\t\t//\r\n\t\t// Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\r\n\t\t//   1. The pool's `accCakePerShare` (and `lastRewardBlock`) gets updated.\r\n\t\t//   2. User receives the pending reward sent to his/her address.\r\n\t\t//   3. User's `amount` gets updated.\r\n\t\t//   4. User's `rewardDebt` gets updated.\r\n\t}\r\n\r\n\t// Info of each pool.\r\n\tstruct PoolInfo {\r\n\t\tIERC20 lpToken;           // Address of LP token contract.\r\n\t\tuint256 allocPoint;       // How many allocation points assigned to this pool. CAKEs to distribute per block.\r\n\t\tuint256 lastRewardBlock;  // Last block number that CAKEs distribution occurs.\r\n\t\tuint256 accCakePerShare; // Accumulated CAKEs per share, times 1e12. See below.\r\n\t}\r\n\r\n\t// The CAKE TOKEN!\r\n\tMintableToken public immutable cake;\r\n\t// The SYRUP TOKEN!\r\n\tMintableStakeToken public immutable syrup;\r\n\t// CAKE tokens created per block.\r\n\tuint256 public cakePerBlock;\r\n\t// Bonus muliplier for early cake makers.\r\n\tuint256 public BONUS_MULTIPLIER = 1;\r\n\r\n\t// Info of each pool.\r\n\tPoolInfo[] public poolInfo;\r\n\t// Info of each user that stakes LP tokens.\r\n\tmapping (uint256 => mapping (address => UserInfo)) public userInfo;\r\n\t// Total allocation points. Must be the sum of all allocation points in all pools.\r\n\tuint256 public totalAllocPoint = 0;\r\n\t// The block number when CAKE mining starts.\r\n\tuint256 public immutable startBlock;\r\n\r\n\tevent Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n\tevent Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n\tevent EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n\r\n\tconstructor (address _cake, address _syrup, uint256 _cakePerBlock, uint256 _startBlock)\r\n\t\tpublic\r\n\t{\r\n\t\tcake = MintableToken(_cake);\r\n\t\tsyrup = MintableStakeToken(_syrup);\r\n\t\tcakePerBlock = _cakePerBlock;\r\n\t\tstartBlock = _startBlock;\r\n\r\n\t\t// staking pool\r\n\t\tpoolInfo.push(PoolInfo({\r\n\t\t\tlpToken: IERC20(_cake),\r\n\t\t\tallocPoint: 1000,\r\n\t\t\tlastRewardBlock: _startBlock,\r\n\t\t\taccCakePerShare: 0\r\n\t\t}));\r\n\r\n\t\ttotalAllocPoint = 1000;\r\n\t}\r\n\r\n\tfunction updateCakePerBlock(uint256 _cakePerBlock) external onlyOwner\r\n\t{\r\n\t\tcakePerBlock = _cakePerBlock;\r\n\t}\r\n\r\n\tfunction updateMultiplier(uint256 _multiplierNumber) external onlyOwner\r\n\t{\r\n\t\tBONUS_MULTIPLIER = _multiplierNumber;\r\n\t}\r\n\r\n\tfunction poolLength() external view returns (uint256)\r\n\t{\r\n\t\treturn poolInfo.length;\r\n\t}\r\n\r\n\t// Add a new lp to the pool. Can only be called by the owner.\r\n\t// XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\r\n\tfunction add(uint256 _allocPoint, IERC20 _lpToken, bool _withUpdate) external onlyOwner\r\n\t{\r\n\t\tif (_withUpdate) {\r\n\t\t\tmassUpdatePools();\r\n\t\t}\r\n\t\tuint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\r\n\t\ttotalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n\t\tpoolInfo.push(PoolInfo({\r\n\t\t\tlpToken: _lpToken,\r\n\t\t\tallocPoint: _allocPoint,\r\n\t\t\tlastRewardBlock: lastRewardBlock,\r\n\t\t\taccCakePerShare: 0\r\n\t\t}));\r\n\t}\r\n\r\n\t// Update the given pool's CAKE allocation point. Can only be called by the owner.\r\n\tfunction set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) external onlyOwner\r\n\t{\r\n\t\tif (_withUpdate) {\r\n\t\t\tmassUpdatePools();\r\n\t\t}\r\n\t\tuint256 prevAllocPoint = poolInfo[_pid].allocPoint;\r\n\t\tpoolInfo[_pid].allocPoint = _allocPoint;\r\n\t\tif (prevAllocPoint != _allocPoint) {\r\n\t\t\ttotalAllocPoint = totalAllocPoint.sub(prevAllocPoint).add(_allocPoint);\r\n\t\t}\r\n\t}\r\n\r\n\t// Return reward multiplier over the given _from to _to block.\r\n\tfunction getMultiplier(uint256 _from, uint256 _to) public view returns (uint256)\r\n\t{\r\n\t\treturn _to.sub(_from).mul(BONUS_MULTIPLIER);\r\n\t}\r\n\r\n\t// View function to see pending CAKEs on frontend.\r\n\tfunction pendingCake(uint256 _pid, address _user) external view returns (uint256)\r\n\t{\r\n\t\tPoolInfo storage pool = poolInfo[_pid];\r\n\t\tUserInfo storage user = userInfo[_pid][_user];\r\n\t\tuint256 accCakePerShare = pool.accCakePerShare;\r\n\t\tuint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n\t\tif (block.number > pool.lastRewardBlock && lpSupply != 0) {\r\n\t\t\tuint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n\t\t\tuint256 cakeReward = multiplier.mul(cakePerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n\t\t\taccCakePerShare = accCakePerShare.add(cakeReward.mul(1e12).div(lpSupply));\r\n\t\t}\r\n\t\treturn user.amount.mul(accCakePerShare).div(1e12).sub(user.rewardDebt);\r\n\t}\r\n\r\n\t// Update reward variables for all pools. Be careful of gas spending!\r\n\tfunction massUpdatePools() public onlyEOAorWhitelist\r\n\t{\r\n\t\tuint256 length = poolInfo.length;\r\n\t\tfor (uint256 pid = 0; pid < length; ++pid) {\r\n\t\t\tupdatePool(pid);\r\n\t\t}\r\n\t}\r\n\r\n\t// Update reward variables of the given pool to be up-to-date.\r\n\tfunction updatePool(uint256 _pid) public onlyEOAorWhitelist\r\n\t{\r\n\t\tPoolInfo storage pool = poolInfo[_pid];\r\n\t\tif (block.number <= pool.lastRewardBlock) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tuint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n\t\tif (lpSupply == 0) {\r\n\t\t\tpool.lastRewardBlock = block.number;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tuint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n\t\tuint256 cakeReward = multiplier.mul(cakePerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n\t\tcake.mint(address(syrup), cakeReward);\r\n\t\tpool.accCakePerShare = pool.accCakePerShare.add(cakeReward.mul(1e12).div(lpSupply));\r\n\t\tpool.lastRewardBlock = block.number;\r\n\t}\r\n\r\n\t// Deposit LP tokens to MasterChef for CAKE allocation.\r\n\tfunction deposit(uint256 _pid, uint256 _amount) external onlyEOAorWhitelist\r\n\t{\r\n\t\trequire(_pid != 0, \"deposit CAKE by staking\");\r\n\t\tPoolInfo storage pool = poolInfo[_pid];\r\n\t\tUserInfo storage user = userInfo[_pid][msg.sender];\r\n\t\tupdatePool(_pid);\r\n\t\tif (user.amount > 0) {\r\n\t\t\tuint256 pending = user.amount.mul(pool.accCakePerShare).div(1e12).sub(user.rewardDebt);\r\n\t\t\tif (pending > 0) {\r\n\t\t\t\tsafeCakeTransfer(msg.sender, pending);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (_amount > 0) {\r\n\t\t\tpool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n\t\t\tuser.amount = user.amount.add(_amount);\r\n\t\t}\r\n\t\tuser.rewardDebt = user.amount.mul(pool.accCakePerShare).div(1e12);\r\n\t\temit Deposit(msg.sender, _pid, _amount);\r\n\t}\r\n\r\n\t// Withdraw LP tokens from MasterChef.\r\n\tfunction withdraw(uint256 _pid, uint256 _amount) external onlyEOAorWhitelist\r\n\t{\r\n\t\trequire(_pid != 0, \"withdraw CAKE by unstaking\");\r\n\t\tPoolInfo storage pool = poolInfo[_pid];\r\n\t\tUserInfo storage user = userInfo[_pid][msg.sender];\r\n\t\trequire(user.amount >= _amount, \"withdraw: not good\");\r\n\t\tupdatePool(_pid);\r\n\t\tuint256 pending = user.amount.mul(pool.accCakePerShare).div(1e12).sub(user.rewardDebt);\r\n\t\tif (pending > 0) {\r\n\t\t\tsafeCakeTransfer(msg.sender, pending);\r\n\t\t}\r\n\t\tif (_amount > 0) {\r\n\t\t\tuser.amount = user.amount.sub(_amount);\r\n\t\t\tpool.lpToken.safeTransfer(address(msg.sender), _amount);\r\n\t\t}\r\n\t\tuser.rewardDebt = user.amount.mul(pool.accCakePerShare).div(1e12);\r\n\t\temit Withdraw(msg.sender, _pid, _amount);\r\n\t}\r\n\r\n\t// Stake CAKE tokens to MasterChef\r\n\tfunction enterStaking(uint256 _amount) external onlyEOAorWhitelist\r\n\t{\r\n\t\tPoolInfo storage pool = poolInfo[0];\r\n\t\tUserInfo storage user = userInfo[0][msg.sender];\r\n\t\tupdatePool(0);\r\n\t\tif (user.amount > 0) {\r\n\t\t\tuint256 pending = user.amount.mul(pool.accCakePerShare).div(1e12).sub(user.rewardDebt);\r\n\t\t\tif (pending > 0) {\r\n\t\t\t\tsafeCakeTransfer(msg.sender, pending);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (_amount > 0) {\r\n\t\t\tpool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n\t\t\tuser.amount = user.amount.add(_amount);\r\n\t\t}\r\n\t\tuser.rewardDebt = user.amount.mul(pool.accCakePerShare).div(1e12);\r\n\t\tsyrup.mint(msg.sender, _amount);\r\n\t\temit Deposit(msg.sender, 0, _amount);\r\n\t}\r\n\r\n\t// Withdraw CAKE tokens from STAKING.\r\n\tfunction leaveStaking(uint256 _amount) external onlyEOAorWhitelist\r\n\t{\r\n\t\tPoolInfo storage pool = poolInfo[0];\r\n\t\tUserInfo storage user = userInfo[0][msg.sender];\r\n\t\trequire(user.amount >= _amount, \"withdraw: not good\");\r\n\t\tupdatePool(0);\r\n\t\tuint256 pending = user.amount.mul(pool.accCakePerShare).div(1e12).sub(user.rewardDebt);\r\n\t\tif (pending > 0) {\r\n\t\t\tsafeCakeTransfer(msg.sender, pending);\r\n\t\t}\r\n\t\tif (_amount > 0) {\r\n\t\t\tuser.amount = user.amount.sub(_amount);\r\n\t\t\tpool.lpToken.safeTransfer(address(msg.sender), _amount);\r\n\t\t}\r\n\t\tuser.rewardDebt = user.amount.mul(pool.accCakePerShare).div(1e12);\r\n\t\tsyrup.burn(msg.sender, _amount);\r\n\t\temit Withdraw(msg.sender, 0, _amount);\r\n\t}\r\n\r\n\t// Withdraw without caring about rewards. EMERGENCY ONLY.\r\n\tfunction emergencyWithdraw(uint256 _pid) external onlyEOAorWhitelist\r\n\t{\r\n\t\tPoolInfo storage pool = poolInfo[_pid];\r\n\t\tUserInfo storage user = userInfo[_pid][msg.sender];\r\n\t\tpool.lpToken.safeTransfer(address(msg.sender), user.amount);\r\n\t\temit EmergencyWithdraw(msg.sender, _pid, user.amount);\r\n\t\tuser.amount = 0;\r\n\t\tuser.rewardDebt = 0;\r\n\t}\r\n\r\n\t// Safe cake transfer function, just in case if rounding error causes pool to not have enough CAKEs.\r\n\tfunction safeCakeTransfer(address _to, uint256 _amount) internal\r\n\t{\r\n\t\tsyrup.safeCakeTransfer(_to, _amount);\r\n\t}\r\n}\r\n\r\n// File: contracts/interop/MasterChef.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface MasterChef\r\n{\r\n\tfunction cake() external view returns (address _cake);\r\n\tfunction syrup() external view returns (address _syrup);\r\n\tfunction pendingCake(uint256 _pid, address _user) external view returns (uint256 _pendingCake);\r\n\tfunction poolInfo(uint256 _pid) external view returns (address _lpToken, uint256 _allocPoint, uint256 _lastRewardBlock, uint256 _accCakePerShare);\r\n\tfunction poolLength() external view returns (uint256 _poolLength);\r\n\tfunction userInfo(uint256 _pid, address _user) external view returns (uint256 _amount, uint256 _rewardDebt);\r\n\r\n\tfunction deposit(uint256 _pid, uint256 _amount) external;\r\n\tfunction enterStaking(uint256 _amount) external;\r\n\tfunction leaveStaking(uint256 _amount) external;\r\n\tfunction withdraw(uint256 _pid, uint256 _amount) external;\r\n\tfunction emergencyWithdraw(uint256 _pid) external;\r\n}\r\n\r\n// File: contracts/FeeCollector.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract FeeCollector is ReentrancyGuard, WhitelistGuard\r\n{\r\n\tuint256 constant MIGRATION_WAIT_INTERVAL = 1 days;\r\n\tuint256 constant MIGRATION_OPEN_INTERVAL = 1 days;\r\n\r\n\taddress private immutable masterChef;\r\n\tuint256 private immutable pid;\r\n\r\n\taddress public immutable reserveToken;\r\n\taddress public immutable rewardToken;\r\n\taddress private immutable stakeToken;\r\n\r\n\taddress public buyback;\r\n\taddress public treasury;\r\n\r\n\tuint256 public migrationTimestamp;\r\n\taddress public migrationRecipient;\r\n\r\n\tconstructor (address _masterChef, uint256 _pid, address _buyback, address _treasury) public\r\n\t{\r\n\t\tuint256 _poolLength = MasterChef(_masterChef).poolLength();\r\n\t\trequire(_pid < _poolLength, \"invalid pid\");\r\n\t\taddress _rewardToken = MasterChef(_masterChef).cake();\r\n\t\taddress _stakeToken = MasterChef(_masterChef).syrup();\r\n\t\t(address _reserveToken,,,) = MasterChef(_masterChef).poolInfo(_pid);\r\n\t\tmasterChef = _masterChef;\r\n\t\tpid = _pid;\r\n\t\treserveToken = _reserveToken;\r\n\t\trewardToken = _rewardToken;\r\n\t\tstakeToken = _stakeToken;\r\n\t\tbuyback = _buyback;\r\n\t\ttreasury = _treasury;\r\n\t}\r\n\r\n\tfunction pendingDeposit() external view returns (uint256 _depositAmount)\r\n\t{\r\n\t\treturn _calcPendingDeposit();\r\n\t}\r\n\r\n\tfunction pendingReward() external view returns (uint256 _rewardAmount)\r\n\t{\r\n\t\treturn _calcPendingReward();\r\n\t}\r\n\r\n\tfunction gulp() external onlyEOAorWhitelist nonReentrant\r\n\t{\r\n\t\t_gulp();\r\n\t}\r\n\r\n\tfunction recoverLostFunds(address _token) external onlyOwner nonReentrant\r\n\t{\r\n\t\trequire(_token != reserveToken, \"invalid token\");\r\n\t\trequire(_token != rewardToken, \"invalid token\");\r\n\t\trequire(_token != stakeToken, \"invalid token\");\r\n\t\tuint256 _balance = Transfers._getBalance(_token);\r\n\t\tTransfers._pushFunds(_token, treasury, _balance);\r\n\t}\r\n\r\n\tfunction setBuyback(address _newBuyback) external onlyOwner nonReentrant\r\n\t{\r\n\t\trequire(_newBuyback != address(0), \"invalid address\");\r\n\t\taddress _oldBuyback = buyback;\r\n\t\tbuyback = _newBuyback;\r\n\t\temit ChangeBuyback(_oldBuyback, _newBuyback);\r\n\t}\r\n\r\n\tfunction setTreasury(address _newTreasury) external onlyOwner nonReentrant\r\n\t{\r\n\t\trequire(_newTreasury != address(0), \"invalid address\");\r\n\t\taddress _oldTreasury = treasury;\r\n\t\ttreasury = _newTreasury;\r\n\t\temit ChangeTreasury(_oldTreasury, _newTreasury);\r\n\t}\r\n\r\n\tfunction announceMigration(address _migrationRecipient) external onlyOwner nonReentrant\r\n\t{\r\n\t\trequire(migrationTimestamp == 0, \"ongoing migration\");\r\n\t\tuint256 _migrationTimestamp = now;\r\n\t\tmigrationTimestamp = _migrationTimestamp;\r\n\t\tmigrationRecipient = _migrationRecipient;\r\n\t\temit AnnounceMigration(_migrationRecipient, _migrationTimestamp);\r\n\t}\r\n\r\n\tfunction cancelMigration() external onlyOwner nonReentrant\r\n\t{\r\n\t\tuint256 _migrationTimestamp = migrationTimestamp;\r\n\t\trequire(_migrationTimestamp != 0, \"migration not started\");\r\n\t\taddress _migrationRecipient = migrationRecipient;\r\n\t\tmigrationTimestamp = 0;\r\n\t\tmigrationRecipient = address(0);\r\n\t\temit CancelMigration(_migrationRecipient, _migrationTimestamp);\r\n\t}\r\n\r\n\tfunction migrate(address _migrationRecipient, bool _emergency) external onlyOwner nonReentrant\r\n\t{\r\n\t\tuint256 _migrationTimestamp = migrationTimestamp;\r\n\t\trequire(_migrationTimestamp != 0, \"migration not started\");\r\n\t\trequire(_migrationRecipient == migrationRecipient, \"recipient mismatch\");\r\n\t\tuint256 _start = _migrationTimestamp + MIGRATION_WAIT_INTERVAL;\r\n\t\tuint256 _end = _start + MIGRATION_OPEN_INTERVAL;\r\n\t\trequire(_start <= now && now < _end, \"not available\");\r\n\t\t_migrate(_emergency);\r\n\t\tmigrationTimestamp = 0;\r\n\t\tmigrationRecipient = address(0);\r\n\t\temit Migrate(_migrationRecipient, _migrationTimestamp);\r\n\t}\r\n\r\n\tfunction _calcPendingDeposit() internal view returns (uint256 _depositAmount)\r\n\t{\r\n\t\treturn Transfers._getBalance(reserveToken);\r\n\t}\r\n\r\n\tfunction _calcPendingReward() internal view returns (uint256 _rewardAmount)\r\n\t{\r\n\t\t_rewardAmount = 0;\r\n\t\tif (reserveToken != rewardToken) {\r\n\t\t\t_rewardAmount += Transfers._getBalance(rewardToken);\r\n\t\t}\r\n\t\t_rewardAmount += MasterChef(masterChef).pendingCake(pid, address(this));\r\n\t\treturn _rewardAmount;\r\n\t}\r\n\r\n\tfunction _gulp() internal\r\n\t{\r\n\t\tuint256 _reserveBalance = Transfers._getBalance(reserveToken);\r\n\t\tif (_reserveBalance > 0) {\r\n\t\t\t_deposit(_reserveBalance);\r\n\t\t} else {\r\n\t\t\tuint256 _pendingReward = MasterChef(masterChef).pendingCake(pid, address(this));\r\n\t\t\tif (_pendingReward > 0) {\r\n\t\t\t\t_withdraw(0);\r\n\t\t\t}\r\n\t\t}\r\n\t\tuint256 _rewardBalance = Transfers._getBalance(rewardToken);\r\n\t\tTransfers._pushFunds(rewardToken, buyback, _rewardBalance);\r\n\t}\r\n\r\n\tfunction _migrate(bool _emergency) internal\r\n\t{\r\n\t\tif (_emergency) {\r\n\t\t\tMasterChef(masterChef).emergencyWithdraw(pid);\r\n\t\t} else {\r\n\t\t\t(uint256 _amount,) = MasterChef(masterChef).userInfo(pid, address(this));\r\n\t\t\tif (_amount > 0) {\r\n\t\t\t\t_withdraw(_amount);\r\n\t\t\t}\r\n\t\t\tuint256 _rewardBalance = Transfers._getBalance(rewardToken);\r\n\t\t\tif (reserveToken == rewardToken) {\r\n\t\t\t\t_rewardBalance -= _amount;\r\n\t\t\t}\r\n\t\t\tTransfers._pushFunds(rewardToken, buyback, _rewardBalance);\r\n\t\t}\r\n\t\tuint256 _reserveBalance = Transfers._getBalance(reserveToken);\r\n\t\tTransfers._pushFunds(reserveToken, migrationRecipient, _reserveBalance);\r\n\t}\r\n\r\n\tfunction _deposit(uint256 _amount) internal\r\n\t{\r\n\t\tTransfers._approveFunds(reserveToken, masterChef, _amount);\r\n\t\tif (pid == 0) {\r\n\t\t\tMasterChef(masterChef).enterStaking(_amount);\r\n\t\t} else {\r\n\t\t\tMasterChef(masterChef).deposit(pid, _amount);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _withdraw(uint256 _amount) internal\r\n\t{\r\n\t\tif (pid == 0) {\r\n\t\t\tMasterChef(masterChef).leaveStaking(_amount);\r\n\t\t} else {\r\n\t\t\tMasterChef(masterChef).withdraw(pid, _amount);\r\n\t\t}\r\n\t}\r\n\r\n\tevent ChangeBuyback(address _oldBuyback, address _newBuyback);\r\n\tevent ChangeTreasury(address _oldTreasury, address _newTreasury);\r\n\tevent AnnounceMigration(address indexed _migrationRecipient, uint256 indexed _migrationTimestamp);\r\n\tevent CancelMigration(address indexed _migrationRecipient, uint256 indexed _migrationTimestamp);\r\n\tevent Migrate(address indexed _migrationRecipient, uint256 indexed _migrationTimestamp);\r\n}\r\n\r\n// File: contracts/interop/UniswapV2.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Minimal set of declarations for Uniswap V2 interoperability.\r\n */\r\ninterface Factory\r\n{\r\n\tfunction getPair(address _tokenA, address _tokenB) external view returns (address _pair);\r\n\r\n\tfunction createPair(address _tokenA, address _tokenB) external returns (address _pair);\r\n}\r\n\r\ninterface PoolToken is IERC20\r\n{\r\n}\r\n\r\ninterface Pair is PoolToken\r\n{\r\n\tfunction getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\r\n\tfunction token0() external view returns (address _token0);\r\n\tfunction token1() external view returns (address _token1);\r\n\r\n\tfunction mint(address _to) external returns (uint256 _liquidity);\r\n}\r\n\r\ninterface Router01\r\n{\r\n\tfunction WETH() external pure returns (address _token);\r\n\tfunction getAmountOut(uint256 _amountIn, uint256 _reserveIn, uint256 _reserveOut) external pure returns (uint256 _amountOut);\r\n\r\n\tfunction addLiquidity(address _tokenA, address _tokenB, uint256 _amountADesired, uint256 _amountBDesired, uint256 _amountAMin, uint256 _amountBMin, address _to, uint256 _deadline) external returns (uint256 _amountA, uint256 _amountB, uint256 _liquidity);\r\n\tfunction removeLiquidity(address _tokenA, address _tokenB, uint256 _liquidity, uint256 _amountAMin, uint256 _amountBMin, address _to, uint256 _deadline) external returns (uint256 _amountA, uint256 _amountB);\r\n\tfunction swapETHForExactTokens(uint256 _amountOut, address[] calldata _path, address _to, uint256 _deadline) external payable returns (uint256[] memory _amounts);\r\n\tfunction swapExactTokensForTokens(uint256 _amountIn, uint256 _amountOutMin, address[] calldata _path, address _to, uint256 _deadline) external returns (uint256[] memory _amounts);\r\n}\r\n\r\ninterface Router02 is Router01\r\n{\r\n}\r\n\r\n// File: contracts/network/$.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev This library is provided for convenience. It is the single source for\r\n *      the current network and all related hardcoded contract addresses.\r\n */\r\nlibrary $\r\n{\r\n\tenum Network {\r\n\t\tBscmain, Bsctest\r\n\t}\r\n\r\n\tNetwork constant NETWORK = Network.Bscmain;\r\n\r\n\tfunction chainId() internal pure returns (uint256 _chainid)\r\n\t{\r\n\t\tassembly { _chainid := chainid() }\r\n\t\treturn _chainid;\r\n\t}\r\n\r\n\tfunction network() internal pure returns (Network _network)\r\n\t{\r\n\t\tuint256 _chainid = chainId();\r\n\t\tif (_chainid == 56) return Network.Bscmain;\r\n\t\tif (_chainid == 97) return Network.Bsctest;\r\n\t\trequire(false, \"unsupported network\");\r\n\t}\r\n\r\n\taddress constant UniswapV2_Compatible_FACTORY =\r\n\t\tNETWORK == Network.Bscmain ? 0xBCfCcbde45cE874adCB698cC183deBcF17952812 :\r\n\t\tNETWORK == Network.Bsctest ? 0x81B26284AF48472775Ca472F44DC3a67aE0eaA1f :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant UniswapV2_Compatible_ROUTER02 =\r\n\t\tNETWORK == Network.Bscmain ? 0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F :\r\n\t\tNETWORK == Network.Bsctest ? 0x59870703523f8E67dE3c018FdA61C00732f2318E :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant PancakeSwap_MASTERCHEF =\r\n\t\tNETWORK == Network.Bscmain ? 0x73feaa1eE314F8c655E354234017bE2193C9E24E :\r\n\t\tNETWORK == Network.Bsctest ? 0x7C83Cab4B208A0cD5a1b222D8e6f9099C8F37897 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant WBNB =\r\n\t\tNETWORK == Network.Bscmain ? 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c :\r\n\t\tNETWORK == Network.Bsctest ? 0xd21BB48C35e7021Bf387a8b259662dC06a9df984 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant GRO =\r\n\t\tNETWORK == Network.Bscmain ? 0x336eD56D8615271b38EcEE6F4786B55d0EE91b96 :\r\n\t\tNETWORK == Network.Bsctest ? 0x01c0E10BFd2721D5770e9600b6db2091Da28810d :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant gROOT =\r\n\t\tNETWORK == Network.Bscmain ? 0x8B571fE684133aCA1E926bEB86cb545E549C832D :\r\n\t\tNETWORK == Network.Bsctest ? 0x46c29d2793691C8063719258fa45b656F164FEb1 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant CAKE =\r\n\t\tNETWORK == Network.Bscmain ? 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82 :\r\n\t\tNETWORK == Network.Bsctest ? 0x2a94738549370A3973Ba778BbC5A424C83C8c633 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant ETH =\r\n\t\tNETWORK == Network.Bscmain ? 0x2170Ed0880ac9A755fd29B2688956BD959F933F8 :\r\n\t\tNETWORK == Network.Bsctest ? 0xd66c6B4F0be8CE5b39D52E0Fd1344c389929B378 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant BTCB =\r\n\t\tNETWORK == Network.Bscmain ? 0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c :\r\n\t\tNETWORK == Network.Bsctest ? 0x6ce8dA28E2f864420840cF74474eFf5fD80E65B8 :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant BUSD =\r\n\t\tNETWORK == Network.Bscmain ? 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56 :\r\n\t\tNETWORK == Network.Bsctest ? 0xeD24FC36d5Ee211Ea25A80239Fb8C4Cfd80f12Ee :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n\r\n\taddress constant WHEAT_EXCHANGE_IMPL =\r\n\t\tNETWORK == Network.Bscmain ? 0xFae3C478cC92B93c639f6673b6d888e627F24B7A :\r\n\t\tNETWORK == Network.Bsctest ? 0x57F6e8044A3CbDCbEd5f81Bb14c0CE51859EDAcD :\r\n\t\t0x0000000000000000000000000000000000000000;\r\n}\r\n\r\n// File: contracts/modules/UniswapV2LiquidityPoolAbstraction.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This library provides functionality to facilitate adding/removing\r\n * single-asset liquidity to/from a Uniswap V2 pool.\r\n */\r\nlibrary UniswapV2LiquidityPoolAbstraction\r\n{\r\n\tusing SafeMath for uint256;\r\n\r\n\tfunction _estimateJoinPool(address _pair, address _token, uint256 _amount) internal view returns (uint256 _shares)\r\n\t{\r\n\t\tif (_amount == 0) return 0;\r\n\t\taddress _router = $.UniswapV2_Compatible_ROUTER02;\r\n\t\taddress _token0 = Pair(_pair).token0();\r\n\t\taddress _token1 = Pair(_pair).token1();\r\n\t\trequire(_token == _token0 || _token == _token1, \"invalid token\");\r\n\t\t(uint256 _reserve0, uint256 _reserve1,) = Pair(_pair).getReserves();\r\n\t\tuint256 _balance = _token == _token0 ? _reserve0 : _reserve1;\r\n\t\tuint256 _otherBalance = _token == _token0 ? _reserve1 : _reserve0;\r\n\t\tuint256 _totalSupply = Pair(_pair).totalSupply();\r\n\t\tuint256 _swapAmount = _calcSwapOutputFromInput(_balance, _amount);\r\n\t\tif (_swapAmount == 0) _swapAmount = _amount / 2;\r\n\t\tuint256 _leftAmount = _amount.sub(_swapAmount);\r\n\t\tuint256 _otherAmount = Router02(_router).getAmountOut(_swapAmount, _balance, _otherBalance);\r\n\t\t_shares = Math._min(_totalSupply.mul(_leftAmount) / _balance.add(_swapAmount), _totalSupply.mul(_otherAmount) / _otherBalance.sub(_otherAmount));\r\n\t\treturn _shares;\r\n\t}\r\n\r\n\tfunction _estimateExitPool(address _pair, address _token, uint256 _shares) internal view returns (uint256 _amount)\r\n\t{\r\n\t\tif (_shares == 0) return 0;\r\n\t\taddress _router = $.UniswapV2_Compatible_ROUTER02;\r\n\t\taddress _token0 = Pair(_pair).token0();\r\n\t\taddress _token1 = Pair(_pair).token1();\r\n\t\trequire(_token == _token0 || _token == _token1, \"invalid token\");\r\n\t\t(uint256 _reserve0, uint256 _reserve1,) = Pair(_pair).getReserves();\r\n\t\tuint256 _balance = _token == _token0 ? _reserve0 : _reserve1;\r\n\t\tuint256 _otherBalance = _token == _token0 ? _reserve1 : _reserve0;\r\n\t\tuint256 _totalSupply = Pair(_pair).totalSupply();\r\n\t\tuint256 _baseAmount = _balance.mul(_shares) / _totalSupply;\r\n\t\tuint256 _swapAmount = _otherBalance.mul(_shares) / _totalSupply;\r\n\t\tuint256 _additionalAmount = Router02(_router).getAmountOut(_swapAmount, _otherBalance.sub(_swapAmount), _balance.sub(_baseAmount));\r\n\t\t_amount = _baseAmount.add(_additionalAmount);\r\n\t\treturn _amount;\r\n\t}\r\n\r\n\tfunction _joinPool(address _pair, address _token, uint256 _amount) internal returns (uint256 _shares)\r\n\t{\r\n\t\tif (_amount == 0) return 0;\r\n\t\taddress _router = $.UniswapV2_Compatible_ROUTER02;\r\n\t\taddress _token0 = Pair(_pair).token0();\r\n\t\taddress _token1 = Pair(_pair).token1();\r\n\t\trequire(_token == _token0 || _token == _token1, \"invalid token\");\r\n\t\taddress _otherToken = _token == _token0 ? _token1 : _token0;\r\n\t\t(uint256 _reserve0, uint256 _reserve1,) = Pair(_pair).getReserves();\r\n\t\tuint256 _swapAmount = _calcSwapOutputFromInput(_token == _token0 ? _reserve0 : _reserve1, _amount);\r\n\t\tif (_swapAmount == 0) _swapAmount = _amount / 2;\r\n\t\tuint256 _leftAmount = _amount.sub(_swapAmount);\r\n\t\tTransfers._approveFunds(_token, _router, _amount);\r\n\t\taddress[] memory _path = new address[](2);\r\n\t\t_path[0] = _token;\r\n\t\t_path[1] = _otherToken;\r\n\t\tuint256 _otherAmount = Router02(_router).swapExactTokensForTokens(_swapAmount, 1, _path, address(this), uint256(-1))[1];\r\n\t\tTransfers._approveFunds(_otherToken, _router, _otherAmount);\r\n\t\t(,,_shares) = Router02(_router).addLiquidity(_token, _otherToken, _leftAmount, _otherAmount, 1, 1, address(this), uint256(-1));\r\n\t\t// slippage must be checked by caller\r\n\t\treturn _shares;\r\n\t}\r\n\r\n\tfunction _exitPool(address _pair, address _token, uint256 _shares) internal returns (uint256 _amount)\r\n\t{\r\n\t\tif (_shares == 0) return 0;\r\n\t\taddress _router = $.UniswapV2_Compatible_ROUTER02;\r\n\t\taddress _token0 = Pair(_pair).token0();\r\n\t\taddress _token1 = Pair(_pair).token1();\r\n\t\trequire(_token == _token0 || _token == _token1, \"invalid token\");\r\n\t\taddress _otherToken = _token == _token0 ? _token1 : _token0;\r\n\t\tTransfers._approveFunds(_pair, _router, _shares);\r\n\t\t(uint256 _baseAmount, uint256 _swapAmount) = Router02(_router).removeLiquidity(_token, _otherToken, _shares, 1, 1, address(this), uint256(-1));\r\n\t\tTransfers._approveFunds(_otherToken, _router, _swapAmount);\r\n\t\taddress[] memory _path = new address[](2);\r\n\t\t_path[0] = _otherToken;\r\n\t\t_path[1] = _token;\r\n\t\tuint256 _additionalAmount = Router02(_router).swapExactTokensForTokens(_swapAmount, 1, _path, address(this), uint256(-1))[1];\r\n\t\t_amount = _baseAmount.add(_additionalAmount);\r\n\t\t// slippage must be checked by caller\r\n\t\treturn _amount;\r\n\t}\r\n\r\n\tfunction _calcSwapOutputFromInput(uint256 _reserveAmount, uint256 _inputAmount) private pure returns (uint256 _outputAmount)\r\n\t{\r\n\t\treturn Math._sqrt(_reserveAmount.mul(_inputAmount.mul(3988000).add(_reserveAmount.mul(3988009)))).sub(_reserveAmount.mul(1997)) / 1994;\r\n\t}\r\n}\r\n\r\n// File: contracts/RewardCompoundingStrategyToken.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract RewardCompoundingStrategyToken is ERC20, ReentrancyGuard, WhitelistGuard\r\n{\r\n\tusing SafeMath for uint256;\r\n\tusing LibRewardCompoundingStrategy for LibRewardCompoundingStrategy.Self;\r\n\r\n\tuint256 constant DEPOSIT_FEE_COLLECTOR_SHARE = 833333333333333333; // 5/6\r\n\tuint256 constant DEPOSIT_FEE_DEV_SHARE = 166666666666666667; // 1/6\r\n\r\n\taddress public dev;\r\n\taddress public treasury;\r\n\taddress public collector;\r\n\r\n\tLibRewardCompoundingStrategy.Self lib;\r\n\r\n\tconstructor (string memory _name, string memory _symbol, uint8 _decimals,\r\n\t\taddress _masterChef, uint256 _pid, address _routingToken,\r\n\t\taddress _dev, address _treasury, address _collector)\r\n\t\tERC20(_name, _symbol) public\r\n\t{\r\n\t\t_setupDecimals(_decimals);\r\n\t\tlib.init(_masterChef, _pid, _routingToken);\r\n\t\tdev = _dev;\r\n\t\ttreasury = _treasury;\r\n\t\tcollector = _collector;\r\n\t\t_mint(address(1), 1); // avoids division by zero\r\n\t}\r\n\r\n\tfunction reserveToken() external view returns (address _reserveToken)\r\n\t{\r\n\t\treturn lib.reserveToken;\r\n\t}\r\n\r\n\tfunction routingToken() external view returns (address _routingToken)\r\n\t{\r\n\t\treturn lib.routingToken;\r\n\t}\r\n\r\n\tfunction rewardToken() external view returns (address _rewardToken)\r\n\t{\r\n\t\treturn lib.rewardToken;\r\n\t}\r\n\r\n\tfunction exchange() external view returns (address _exchange)\r\n\t{\r\n\t\treturn lib.exchange;\r\n\t}\r\n\r\n\tfunction depositFee() external view returns (uint256 _depositFee)\r\n\t{\r\n\t\treturn lib.depositFee;\r\n\t}\r\n\r\n\tfunction performanceFee() external view returns (uint256 _performanceFee)\r\n\t{\r\n\t\treturn lib.performanceFee;\r\n\t}\r\n\r\n\tfunction totalReserve() public view returns (uint256 _totalReserve)\r\n\t{\r\n\t\t_totalReserve = lib.totalReserve();\r\n\t\tif (_totalReserve == uint256(-1)) return _totalReserve;\r\n\t\treturn _totalReserve + 1; // avoids division by zero\r\n\t}\r\n\r\n\tfunction calcSharesFromAmount(uint256 _amount) external view returns (uint256 _shares)\r\n\t{\r\n\t\t(,,,_shares) = _calcSharesFromAmount(_amount);\r\n\t\treturn _shares;\r\n\t}\r\n\r\n\tfunction calcAmountFromShares(uint256 _shares) external view returns (uint256 _amount)\r\n\t{\r\n\t\t(_amount) = _calcAmountFromShares(_shares);\r\n\t\treturn _amount;\r\n\t}\r\n\r\n\tfunction pendingReward() external view returns (uint256 _rewardAmount)\r\n\t{\r\n\t\treturn lib.calcPendingReward();\r\n\t}\r\n\r\n\tfunction pendingPerformanceFee() external view returns (uint256 _feeAmount)\r\n\t{\r\n\t\treturn lib.calcPerformanceFee();\r\n\t}\r\n\r\n\tfunction deposit(uint256 _amount) external onlyEOAorWhitelist nonReentrant\r\n\t{\r\n\t\taddress _from = msg.sender;\r\n\t\t(uint256 _devAmount, uint256 _collectorAmount, uint256 _netAmount, uint256 _shares) = _calcSharesFromAmount(_amount);\r\n\t\tTransfers._pullFunds(lib.reserveToken, _from, _amount);\r\n\t\tTransfers._pushFunds(lib.reserveToken, dev, _devAmount);\r\n\t\tTransfers._pushFunds(lib.reserveToken, collector, _collectorAmount);\r\n\t\tlib.deposit(_netAmount);\r\n\t\t_mint(_from, _shares);\r\n\t}\r\n\r\n\tfunction withdraw(uint256 _shares) external onlyEOAorWhitelist nonReentrant\r\n\t{\r\n\t\taddress _from = msg.sender;\r\n\t\t(uint256 _amount) = _calcAmountFromShares(_shares);\r\n\t\t_burn(_from, _shares);\r\n\t\tlib.withdraw(_amount);\r\n\t\tTransfers._pushFunds(lib.reserveToken, _from, _amount);\r\n\t}\r\n\r\n\tfunction gulp() external onlyEOAorWhitelist nonReentrant\r\n\t{\r\n\t\tlib.gulpPendingReward();\r\n\t\tlib.gulpPerformanceFee(collector);\r\n\t}\r\n\r\n\tfunction recoverLostFunds(address _token) external onlyOwner nonReentrant\r\n\t{\r\n\t\trequire(_token != lib.reserveToken, \"invalid token\");\r\n\t\trequire(_token != lib.routingToken, \"invalid token\");\r\n\t\trequire(_token != lib.rewardToken, \"invalid token\");\r\n\t\trequire(_token != lib.stakeToken, \"invalid token\");\r\n\t\tuint256 _balance = Transfers._getBalance(_token);\r\n\t\tTransfers._pushFunds(_token, treasury, _balance);\r\n\t}\r\n\r\n\tfunction setDev(address _newDev) external onlyOwner nonReentrant\r\n\t{\r\n\t\trequire(_newDev != address(0), \"invalid address\");\r\n\t\taddress _oldDev = dev;\r\n\t\tdev = _newDev;\r\n\t\temit ChangeDev(_oldDev, _newDev);\r\n\t}\r\n\r\n\tfunction setTreasury(address _newTreasury) external onlyOwner nonReentrant\r\n\t{\r\n\t\trequire(_newTreasury != address(0), \"invalid address\");\r\n\t\taddress _oldTreasury = treasury;\r\n\t\ttreasury = _newTreasury;\r\n\t\temit ChangeTreasury(_oldTreasury, _newTreasury);\r\n\t}\r\n\r\n\tfunction setCollector(address _newCollector) external onlyOwner nonReentrant\r\n\t{\r\n\t\trequire(_newCollector != address(0), \"invalid address\");\r\n\t\taddress _oldCollector = collector;\r\n\t\tcollector = _newCollector;\r\n\t\temit ChangeCollector(_oldCollector, _newCollector);\r\n\t}\r\n\r\n\tfunction setExchange(address _newExchange) external onlyOwner nonReentrant\r\n\t{\r\n\t\taddress _oldExchange = lib.exchange;\r\n\t\tlib.setExchange(_newExchange);\r\n\t\temit ChangeExchange(_oldExchange, _newExchange);\r\n\t}\r\n\r\n\tfunction setDepositFee(uint256 _newDepositFee) external onlyOwner nonReentrant\r\n\t{\r\n\t\tuint256 _oldDepositFee = lib.depositFee;\r\n\t\tlib.setDepositFee(_newDepositFee);\r\n\t\temit ChangeDepositFee(_oldDepositFee, _newDepositFee);\r\n\t}\r\n\r\n\tfunction setPerformanceFee(uint256 _newPerformanceFee) external onlyOwner nonReentrant\r\n\t{\r\n\t\tuint256 _oldPerformanceFee = lib.performanceFee;\r\n\t\tlib.setPerformanceFee(_newPerformanceFee);\r\n\t\temit ChangePerformanceFee(_oldPerformanceFee, _newPerformanceFee);\r\n\t}\r\n\r\n\tfunction _calcAmountFromShares(uint256 _shares) internal view returns (uint256 _amount)\r\n\t{\r\n\t\treturn _shares.mul(totalReserve()) / totalSupply();\r\n\t}\r\n\r\n\tfunction _calcSharesFromAmount(uint256 _amount) internal view returns (uint256 _devAmount, uint256 _collectorAmount, uint256 _netAmount, uint256 _shares)\r\n\t{\r\n\t\tuint256 _feeAmount = _amount.mul(lib.depositFee) / 1e18;\r\n\t\t_devAmount = (_feeAmount * DEPOSIT_FEE_DEV_SHARE) / 1e18;\r\n\t\t_collectorAmount = _feeAmount - _devAmount;\r\n\t\t_netAmount = _amount - _feeAmount;\r\n\t\t_shares = _netAmount.mul(totalSupply()) / totalReserve();\r\n\t\treturn (_devAmount, _collectorAmount, _netAmount, _shares);\r\n\t}\r\n\r\n\tevent ChangeExchange(address _oldExchange, address _newExchange);\r\n\tevent ChangeDev(address _oldDev, address _newDev);\r\n\tevent ChangeTreasury(address _oldTreasury, address _newTreasury);\r\n\tevent ChangeCollector(address _oldCollector, address _newCollector);\r\n\tevent ChangeDepositFee(uint256 _oldDepositFee, uint256 _newDepositFee);\r\n\tevent ChangePerformanceFee(uint256 _oldPerformanceFee, uint256 _newPerformanceFee);\r\n}\r\n\r\nlibrary LibRewardCompoundingStrategy\r\n{\r\n\tusing SafeMath for uint256;\r\n\tusing LibRewardCompoundingStrategy for LibRewardCompoundingStrategy.Self;\r\n\r\n\tuint256 constant MAXIMUM_DEPOSIT_FEE = 5e16; // 5%\r\n\tuint256 constant DEFAULT_DEPOSIT_FEE = 3e16; // 3%\r\n\r\n\tuint256 constant MAXIMUM_PERFORMANCE_FEE = 50e16; // 50%\r\n\tuint256 constant DEFAULT_PERFORMANCE_FEE = 20e16; // 20%\r\n\r\n\tstruct Self {\r\n\t\taddress masterChef;\r\n\t\tuint256 pid;\r\n\r\n\t\taddress reserveToken;\r\n\t\taddress routingToken;\r\n\t\taddress rewardToken;\r\n\t\taddress stakeToken;\r\n\r\n\t\taddress exchange;\r\n\r\n\t\tuint256 depositFee;\r\n\t\tuint256 performanceFee;\r\n\r\n\t\tuint256 lastTotalSupply;\r\n\t\tuint256 lastTotalReserve;\r\n\t}\r\n\r\n\tfunction init(Self storage _self, address _masterChef, uint256 _pid, address _routingToken) public\r\n\t{\r\n\t\t_self._init(_masterChef, _pid, _routingToken);\r\n\t}\r\n\r\n\tfunction totalReserve(Self storage _self) public view returns (uint256 _totalReserve)\r\n\t{\r\n\t\treturn _self._totalReserve();\r\n\t}\r\n\r\n\tfunction calcPendingReward(Self storage _self) public view returns (uint256 _rewardAmount)\r\n\t{\r\n\t\treturn _self._calcPendingReward();\r\n\t}\r\n\r\n\tfunction calcPerformanceFee(Self storage _self) public view returns (uint256 _feeAmount)\r\n\t{\r\n\t\treturn _self._calcPerformanceFee();\r\n\t}\r\n\r\n\tfunction deposit(Self storage _self, uint256 _amount) public\r\n\t{\r\n\t\t_self._deposit(_amount);\r\n\t}\r\n\r\n\tfunction withdraw(Self storage _self, uint256 _amount) public\r\n\t{\r\n\t\t_self._withdraw(_amount);\r\n\t}\r\n\r\n\tfunction gulpPendingReward(Self storage _self) public\r\n\t{\r\n\t\t_self._gulpPendingReward();\r\n\t}\r\n\r\n\tfunction gulpPerformanceFee(Self storage _self, address _to) public\r\n\t{\r\n\t\t_self._gulpPerformanceFee(_to);\r\n\t}\r\n\r\n\tfunction setExchange(Self storage _self, address _exchange) public\r\n\t{\r\n\t\t_self._setExchange(_exchange);\r\n\t}\r\n\r\n\tfunction setDepositFee(Self storage _self, uint256 _newDepositFee) public\r\n\t{\r\n\t\t_self._setDepositFee(_newDepositFee);\r\n\t}\r\n\r\n\tfunction setPerformanceFee(Self storage _self, uint256 _newPerformanceFee) public\r\n\t{\r\n\t\t_self._setPerformanceFee(_newPerformanceFee);\r\n\t}\r\n\r\n\tfunction _init(Self storage _self, address _masterChef, uint256 _pid, address _routingToken) internal\r\n\t{\r\n\t\tuint256 _poolLength = MasterChef(_masterChef).poolLength();\r\n\t\trequire(_pid < _poolLength, \"invalid pid\");\r\n\t\t(address _reserveToken,,,) = MasterChef(_masterChef).poolInfo(_pid);\r\n\t\trequire(_routingToken == _reserveToken || _routingToken == Pair(_reserveToken).token0() || _routingToken == Pair(_reserveToken).token1(), \"invalid token\");\r\n\t\taddress _rewardToken = MasterChef(_masterChef).cake();\r\n\t\taddress _stakeToken = MasterChef(_masterChef).syrup();\r\n\t\t_self.masterChef = _masterChef;\r\n\t\t_self.pid = _pid;\r\n\t\t_self.reserveToken = _reserveToken;\r\n\t\t_self.routingToken = _routingToken;\r\n\t\t_self.rewardToken = _rewardToken;\r\n\t\t_self.stakeToken = _stakeToken;\r\n\t\t_self.depositFee = DEFAULT_DEPOSIT_FEE;\r\n\t\t_self.performanceFee = DEFAULT_PERFORMANCE_FEE;\r\n\t\t_self.lastTotalSupply = 1;\r\n\t\t_self.lastTotalReserve = 1;\r\n\t}\r\n\r\n\tfunction _totalReserve(Self storage _self) internal view returns (uint256 _reserve)\r\n\t{\r\n\t\t(_reserve,) = MasterChef(_self.masterChef).userInfo(_self.pid, address(this));\r\n\t\treturn _reserve;\r\n\t}\r\n\r\n\tfunction _calcPendingReward(Self storage _self) internal view returns (uint256 _rewardAmount)\r\n\t{\r\n\t\trequire(_self.exchange != address(0), \"exchange not set\");\r\n\t\tuint256 _collectedReward = Transfers._getBalance(_self.rewardToken);\r\n\t\tuint256 _pendingReward = MasterChef(_self.masterChef).pendingCake(_self.pid, address(this));\r\n\t\tuint256 _totalReward = _collectedReward.add(_pendingReward);\r\n\t\tuint256 _totalConverted = _totalReward;\r\n\t\tif (_self.routingToken != _self.rewardToken) {\r\n\t\t\t_totalConverted = IExchange(_self.exchange).calcConversionFromInput(_self.rewardToken, _self.routingToken, _totalReward);\r\n\t\t}\r\n\t\tuint256 _totalJoined = _totalConverted;\r\n\t\tif (_self.routingToken != _self.reserveToken) {\r\n\t\t\t_totalJoined = UniswapV2LiquidityPoolAbstraction._estimateJoinPool(_self.reserveToken, _self.routingToken, _totalConverted);\r\n\t\t}\r\n\t\treturn _totalJoined;\r\n\t}\r\n\r\n\tfunction _calcPerformanceFee(Self storage _self) internal view returns (uint256 _feeAmount)\r\n\t{\r\n\t\tuint256 _oldTotalSupply = _self.lastTotalSupply;\r\n\t\tuint256 _oldTotalReserve = _self.lastTotalReserve;\r\n\r\n\t\tuint256 _newTotalSupply = RewardCompoundingStrategyToken(address(this)).totalSupply();\r\n\t\tuint256 _newTotalReserve = RewardCompoundingStrategyToken(address(this)).totalReserve();\r\n\r\n\t\t// calculates the profit using the following formula\r\n\t\t// ((P1 - P0) * S1 * f) / P1\r\n\t\t// where P1 = R1 / S1 and P0 = R0 / S0\r\n\t\tuint256 _positive = _oldTotalSupply.mul(_newTotalReserve);\r\n\t\tuint256 _negative = _newTotalSupply.mul(_oldTotalReserve);\r\n\t\tif (_positive > _negative) {\r\n\t\t\tuint256 _profitAmount = (_positive - _negative) / _oldTotalSupply;\r\n\t\t\treturn _profitAmount.mul(_self.performanceFee) / 1e18;\r\n\t\t}\r\n\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tfunction _deposit(Self storage _self, uint256 _amount) internal\r\n\t{\r\n\t\tTransfers._approveFunds(_self.reserveToken, _self.masterChef, _amount);\r\n\t\tif (_self.pid == 0) {\r\n\t\t\tMasterChef(_self.masterChef).enterStaking(_amount);\r\n\t\t} else {\r\n\t\t\tMasterChef(_self.masterChef).deposit(_self.pid, _amount);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _withdraw(Self storage _self, uint256 _amount) internal\r\n\t{\r\n\t\tif (_self.pid == 0) {\r\n\t\t\tMasterChef(_self.masterChef).leaveStaking(_amount);\r\n\t\t} else {\r\n\t\t\tMasterChef(_self.masterChef).withdraw(_self.pid, _amount);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _gulpPendingReward(Self storage _self) internal\r\n\t{\r\n\t\trequire(_self.exchange != address(0), \"exchange not set\");\r\n\t\tuint256 _pendingReward = MasterChef(_self.masterChef).pendingCake(_self.pid, address(this));\r\n\t\tif (_pendingReward > 0) {\r\n\t\t\t_self._withdraw(0);\r\n\t\t}\r\n\t\tif (_self.routingToken != _self.rewardToken) {\r\n\t\t\tuint256 _totalReward = Transfers._getBalance(_self.rewardToken);\r\n\t\t\tTransfers._approveFunds(_self.rewardToken, _self.exchange, _totalReward);\r\n\t\t\tIExchange(_self.exchange).convertFundsFromInput(_self.rewardToken, _self.routingToken, _totalReward, 1);\r\n\t\t}\r\n\t\tif (_self.routingToken != _self.reserveToken) {\r\n\t\t\tuint256 _totalConverted = Transfers._getBalance(_self.routingToken);\r\n\t\t\tUniswapV2LiquidityPoolAbstraction._joinPool(_self.reserveToken, _self.routingToken, _totalConverted);\r\n\t\t}\r\n\t\tuint256 _totalJoined = Transfers._getBalance(_self.reserveToken);\r\n\t\t_self._deposit(_totalJoined);\r\n\t}\r\n\r\n\tfunction _gulpPerformanceFee(Self storage _self, address _to) internal\r\n\t{\r\n\t\tuint256 _feeAmount = _self._calcPerformanceFee();\r\n\t\tif (_feeAmount > 0) {\r\n\t\t\t_self._withdraw(_feeAmount);\r\n\t\t\tTransfers._pushFunds(_self.reserveToken, _to, _feeAmount);\r\n\t\t\t_self.lastTotalSupply = RewardCompoundingStrategyToken(address(this)).totalSupply();\r\n\t\t\t_self.lastTotalReserve = RewardCompoundingStrategyToken(address(this)).totalReserve();\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _setExchange(Self storage _self, address _exchange) internal\r\n\t{\r\n\t\t_self.exchange = _exchange;\r\n\t}\r\n\r\n\tfunction _setDepositFee(Self storage _self, uint256 _newDepositFee) internal\r\n\t{\r\n\t\trequire(_newDepositFee <= MAXIMUM_DEPOSIT_FEE, \"invalid rate\");\r\n\t\t_self.depositFee = _newDepositFee;\r\n\t}\r\n\r\n\tfunction _setPerformanceFee(Self storage _self, uint256 _newPerformanceFee) internal\r\n\t{\r\n\t\trequire(_newPerformanceFee <= MAXIMUM_PERFORMANCE_FEE, \"invalid rate\");\r\n\t\t_self.performanceFee = _newPerformanceFee;\r\n\t}\r\n}\r\n\r\n// File: contracts/MasterChefAdmin.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract MasterChefAdmin is Ownable, ReentrancyGuard\r\n{\r\n\taddress public immutable masterChef;\r\n\r\n\tconstructor (address _masterChef) public\r\n\t{\r\n\t\tmasterChef = _masterChef;\r\n\t}\r\n\r\n\tfunction addToWhitelist(address _address) external onlyOwner nonReentrant\r\n\t{\r\n\t\tCustomMasterChef(masterChef).addToWhitelist(_address);\r\n\t}\r\n\r\n\tfunction removeFromWhitelist(address _address) external onlyOwner nonReentrant\r\n\t{\r\n\t\tCustomMasterChef(masterChef).removeFromWhitelist(_address);\r\n\t}\r\n\r\n\tfunction updateCakePerBlock(uint256 _cakePerBlock) external onlyOwner nonReentrant\r\n\t{\r\n\t\tCustomMasterChef(masterChef).updateCakePerBlock(_cakePerBlock);\r\n\t}\r\n\r\n\tfunction updateMultiplier(uint256 _multiplierNumber) external onlyOwner nonReentrant\r\n\t{\r\n\t\tCustomMasterChef(masterChef).updateMultiplier(_multiplierNumber);\r\n\t}\r\n\r\n\tfunction add(uint256 _allocPoint, address _lpToken, bool _withUpdate) external onlyOwner nonReentrant\r\n\t{\r\n\t\tCustomMasterChef(masterChef).add(_allocPoint, IERC20(_lpToken), _withUpdate);\r\n\t}\r\n\r\n\tfunction set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) external onlyOwner nonReentrant\r\n\t{\r\n\t\tCustomMasterChef(masterChef).set(_pid, _allocPoint, _withUpdate);\r\n\t}\r\n\r\n\tfunction addRewardCompoundingStrategy(string memory _name, string memory _symbol, uint8 _decimals,\r\n\t\taddress _masterChef, uint256 _pid, address _routingToken, uint256 _allocPoint,\r\n\t\taddress _buyback, address _exchange, address _dev, address _treasury) external onlyOwner nonReentrant\r\n\t{\r\n\t\taddress _owner = msg.sender;\r\n\t\taddress _collector = new_FeeCollector(_masterChef, _pid, _buyback, _treasury);\r\n\t\taddress _strategy = LibMasterChefAdmin.new_RewardCompoundingStrategyToken(_name, _symbol, _decimals, _masterChef, _pid, _routingToken, _dev, _treasury, _collector);\r\n\t\tRewardCompoundingStrategyToken(_strategy).setExchange(_exchange);\r\n\t\tCustomMasterChef(masterChef).add(_allocPoint, IERC20(_strategy), false);\r\n\t\tif (_masterChef == masterChef) {\r\n\t\t\tCustomMasterChef(masterChef).addToWhitelist(_collector);\r\n\t\t\tCustomMasterChef(masterChef).addToWhitelist(_strategy);\r\n\t\t}\r\n\t\tOwnable(_collector).transferOwnership(_owner);\r\n\t\tOwnable(_strategy).transferOwnership(_owner);\r\n\t}\r\n\r\n\tfunction new_FeeCollector(address _masterChef, uint256 _pid, address _buyback, address _treasury) internal returns (address _address)\r\n\t{\r\n\t\treturn address(new FeeCollector(_masterChef, _pid, _buyback, _treasury));\r\n\t}\r\n}\r\n\r\nlibrary LibMasterChefAdmin\r\n{\r\n\tfunction new_RewardCompoundingStrategyToken(string memory _name, string memory _symbol, uint8 _decimals,\r\n\t\taddress _masterChef, uint256 _pid, address _routingToken,\r\n\t\taddress _dev, address _treasury, address _collector) public returns (address _address)\r\n\t{\r\n\t\treturn address(new RewardCompoundingStrategyToken(_name, _symbol, _decimals, _masterChef, _pid, _routingToken, _dev, _treasury, _collector));\r\n\t}\r\n}\r\n\r\n// File: contracts/Tokens.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\ncontract WHEAT is MintableToken\r\n{\r\n\tconstructor ()\r\n\t\tMintableToken(\"Wheat Token\", \"WHEAT\", 18) public\r\n\t{\r\n\t}\r\n}\r\n\r\ncontract stkWHEAT is MintableStakeToken\r\n{\r\n\tconstructor (address _WHEAT)\r\n\t\tMintableStakeToken(\"staked WHEAT\", \"stkWHEAT\", 18, _WHEAT) public\r\n\t{\r\n\t}\r\n}\r\n\r\n// File: contracts/interop/WrappedToken.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Minimal set of declarations for WETH/WBNB interoperability.\r\n */\r\ninterface WrappedToken is IERC20\r\n{\r\n\tfunction deposit() external payable;\r\n\tfunction withdraw(uint256 _amount) external;\r\n}\r\n\r\n// File: contracts/modules/Wrapping.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev This library abstracts Wrapped Ether operations.\r\n */\r\nlibrary Wrapping\r\n{\r\n\t/**\r\n\t * @dev Sends some ETH to the Wrapped Ether contract in exchange for WETH.\r\n\t * @param _amount The amount of ETH to be wrapped.\r\n\t */\r\n\tfunction _wrap(address _token, uint256 _amount) internal\r\n\t{\r\n\t\tif (_amount == 0) return;\r\n\t\tWrappedToken(_token).deposit{value: _amount}();\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Receives some ETH from the Wrapped Ether contract in exchange for WETH.\r\n\t *      Note that the contract using this library function must declare a\r\n\t *      payable receive/fallback function.\r\n\t * @param _amount The amount of ETH to be unwrapped.\r\n\t */\r\n\tfunction _unwrap(address _token, uint256 _amount) internal\r\n\t{\r\n\t\tif (_amount == 0) return;\r\n\t\tWrappedToken(_token).withdraw(_amount);\r\n\t}\r\n}\r\n\r\n// File: contracts/Deployer.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Deployer is Ownable\r\n{\r\n\taddress constant DEFAULT_ADMIN = 0xAD4E38B274720c1a6c7fB8B735C5FAD112DF9A13;\r\n\taddress constant DEFAULT_TREASURY = 0x0d1d68C73b57a53B1DdCD287aCf4e66Ed745B759;\r\n\taddress constant DEFAULT_DEV = 0x7674D2a14076e8af53AC4ba9bBCf0c19FeBe8899;\r\n\taddress constant DEFAULT_YIELD = 0x0d1d68C73b57a53B1DdCD287aCf4e66Ed745B759;\r\n\r\n\tuint256 public constant INITIAL_WHEAT_PER_BLOCK = 0e18;\r\n\r\n\tuint256 public constant WHEAT_LIQUIDITY_ALLOCATION = 10000e18; // 10k WHEAT\r\n\tuint256 public constant WBNB_LIQUIDITY_ALLOCATION = 200e18; // ~100k USD at deploy\r\n\r\n\taddress public admin;\r\n\taddress public treasury;\r\n\taddress public dev;\r\n\taddress public yield;\r\n\r\n\taddress public exchange;\r\n\r\n\taddress public wheat;\r\n\taddress public stkWheat;\r\n\taddress public masterChef;\r\n\taddress public masterChefAdmin;\r\n\taddress public buyback;\r\n\r\n\tenum Stage {\r\n\t\tDeploy, Batch1, Batch2, Batch3, Done\r\n\t}\r\n\r\n\tStage public stage = Stage.Deploy;\r\n\r\n\tconstructor () public\r\n\t{\r\n\t\trequire($.NETWORK == $.network(), \"wrong network\");\r\n\t}\r\n\r\n\tfunction deploy() external payable onlyOwner\r\n\t{\r\n\t\trequire(stage == Stage.Deploy, \"unavailable\");\r\n\r\n\t\tuint256 _amount = msg.value;\r\n\t\trequire(_amount == WBNB_LIQUIDITY_ALLOCATION, \"BNB amount mismatch\");\r\n\r\n\t\t// wraps LP liquidity BNB into WBNB\r\n\t\tWrapping._wrap($.WBNB, WBNB_LIQUIDITY_ALLOCATION);\r\n\r\n\t\tadmin = DEFAULT_ADMIN;\r\n\t\ttreasury = DEFAULT_TREASURY;\r\n\t\tdev = DEFAULT_DEV;\r\n\t\tyield = DEFAULT_YIELD;\r\n\r\n\t\texchange = $.WHEAT_EXCHANGE_IMPL;\r\n\r\n\t\t// configure MasterChef\r\n\t\twheat = LibDeployer1.new_WHEAT();\r\n\t\tstkWheat = LibDeployer2.new_stkWHEAT(wheat);\r\n\t\tmasterChef = LibDeployer1.new_CustomMasterChef(wheat, stkWheat, INITIAL_WHEAT_PER_BLOCK, block.number);\r\n\t\tmasterChefAdmin = LibDeployer3.new_MasterChefAdmin(masterChef);\r\n\r\n\t\tCustomMasterChef(masterChef).set(0, 15000, false);\r\n\r\n\t\taddress _factory = $.UniswapV2_Compatible_FACTORY;\r\n\t\taddress _BNB_WHEAT = Factory(_factory).createPair($.WBNB, wheat);\r\n\t\taddress _BNB_GRO = Factory(_factory).getPair($.WBNB, $.GRO);\r\n\t\taddress _GRO_gROOT = Factory(_factory).getPair($.GRO, $.gROOT);\r\n\t\taddress _BNB_gROOT = Factory(_factory).getPair($.WBNB, $.gROOT);\r\n\t\tCustomMasterChef(masterChef).add(30000, IERC20(_BNB_WHEAT), false);\r\n\t\tCustomMasterChef(masterChef).add(3000, IERC20(_BNB_GRO), false);\r\n\t\tCustomMasterChef(masterChef).add(1000, IERC20(_GRO_gROOT), false);\r\n\t\tCustomMasterChef(masterChef).add(1000, IERC20(_BNB_gROOT), false);\r\n\r\n\t\t// adds the liquidity to the WHEAT/BNB LP\r\n\t\tWHEAT(wheat).mint(_BNB_WHEAT, WHEAT_LIQUIDITY_ALLOCATION);\r\n\t\tTransfers._pushFunds($.WBNB, _BNB_WHEAT, WBNB_LIQUIDITY_ALLOCATION);\r\n\t\tPair(_BNB_WHEAT).mint(DEFAULT_TREASURY);\r\n\r\n\t\tbuyback = LibDeployer2.new_Buyback($.CAKE, $.WBNB, wheat, $.GRO, treasury, yield);\r\n\t\tBuyback(buyback).setExchange(exchange);\r\n\r\n\t\trequire(Transfers._getBalance($.WBNB) == 0, \"WBNB left over\");\r\n\t\trequire(Transfers._getBalance(wheat) == 0, \"WHEAT left over\");\r\n\t\trequire(Transfers._getBalance(_BNB_WHEAT) == 0, \"BNB/WHEAT LP shares left over\");\r\n\r\n\t\t// transfer ownerships\r\n\t\tOwnable(wheat).transferOwnership(masterChef);\r\n\t\tOwnable(stkWheat).transferOwnership(masterChef);\r\n\t\tOwnable(masterChef).transferOwnership(masterChefAdmin);\r\n\t\tOwnable(buyback).transferOwnership(admin);\r\n\r\n\t\tstage = Stage.Batch1;\r\n\t}\r\n\r\n\tfunction batch1() external onlyOwner\r\n\t{\r\n\t\trequire(stage == Stage.Batch1, \"unavailable\");\r\n\t\tif ($.NETWORK == $.Network.Bscmain) {\r\n\t\t\t_addStrategy(\"staked CAKE\", \"stkCAKE\", 0, $.CAKE, 15000);\r\n\t\t\t_addStrategy(\"staked BNB/CAKE\", \"stkBNB/CAKE\", 1, $.CAKE, 15000);\r\n\t\t\t_addStrategy(\"staked BNB/BUSD\", \"stkBNB/BUSD\", 2, $.WBNB, 7000);\r\n\t\t\t_addStrategy(\"staked BNB/BTCB\", \"stkBNB/BTCB\", 15, $.WBNB, 3000);\r\n\t\t}\r\n\t\tif ($.NETWORK == $.Network.Bsctest) {\r\n\t\t\t_addStrategy(\"staked CAKE\", \"stkCAKE\", 0, $.CAKE, 15000);\r\n\t\t\t_addStrategy(\"staked BNB/CAKE\", \"stkBNB/CAKE\", 2, $.CAKE, 15000);\r\n\t\t\t_addStrategy(\"staked BNB/ETH\", \"stkBNB/ETH\", 4, $.WBNB, 3000);\r\n\t\t}\r\n\t\tstage = Stage.Batch2;\r\n\t}\r\n\r\n\tfunction batch2() external onlyOwner\r\n\t{\r\n\t\trequire(stage == Stage.Batch2, \"unavailable\");\r\n\t\tif ($.NETWORK == $.Network.Bscmain) {\r\n\t\t\t_addStrategy(\"staked BNB/ETH\", \"stkBNB/ETH\", 14, $.WBNB, 3000);\r\n\t\t\t_addStrategy(\"staked BNB/LINK\", \"stkBNB/LINK\", 7, $.WBNB, 1000);\r\n\t\t\t_addStrategy(\"staked BNB/UNI\", \"stkBNB/UNI\", 25, $.WBNB, 1000);\r\n\t\t\t_addStrategy(\"staked BNB/DOT\", \"stkBNB/DOT\", 5, $.WBNB, 1000);\r\n\t\t}\r\n\t\tstage = Stage.Batch3;\r\n\t}\r\n\r\n\tfunction batch3() external onlyOwner\r\n\t{\r\n\t\trequire(stage == Stage.Batch3, \"unavailable\");\r\n\t\tif ($.NETWORK == $.Network.Bscmain) {\r\n\t\t\t_addStrategy(\"staked BNB/ADA\", \"stkBNB/ADA\", 3, $.WBNB, 1000);\r\n\t\t\t_addStrategy(\"staked BUSD/UST\", \"stkBUSD/UST\", 63, $.BUSD, 1000);\r\n\t\t\t_addStrategy(\"staked BUSD/DAI\", \"stkBUSD/DAI\", 52, $.BUSD, 1000);\r\n\t\t\t_addStrategy(\"staked BUSD/USDC\", \"stkBUSD/USDC\", 53, $.BUSD, 1000);\r\n\t\t}\r\n\r\n\t\t// transfer ownerships\r\n\t\tOwnable(masterChefAdmin).transferOwnership(admin);\r\n\t\trenounceOwnership();\r\n\r\n\t\tstage = Stage.Done;\r\n\t\temit DeployPerformed();\r\n\t}\r\n\r\n\tfunction _addStrategy(string memory _name, string memory _symbol, uint256 _pid, address _routingToken, uint256 _allocPoint) internal\r\n\t{\r\n\t\tuint256 _length = CustomMasterChef(masterChef).poolLength();\r\n\t\tMasterChefAdmin(masterChefAdmin).addRewardCompoundingStrategy(_name, _symbol, 18, $.PancakeSwap_MASTERCHEF, _pid, _routingToken, _allocPoint, buyback, exchange, dev, treasury);\r\n\t\t(IERC20 _lptoken,,,) = CustomMasterChef(masterChef).poolInfo(_length);\r\n\t\taddress _strategy = address(_lptoken);\r\n\t\taddress _collector = RewardCompoundingStrategyToken(_strategy).collector();\r\n\t\tOwnable(_collector).transferOwnership(admin);\r\n\t\tOwnable(_strategy).transferOwnership(admin);\r\n\t}\r\n\r\n\tevent DeployPerformed();\r\n}\r\n\r\nlibrary LibDeployer1\r\n{\r\n\tfunction new_WHEAT() public returns (address _address)\r\n\t{\r\n\t\treturn address(new WHEAT());\r\n\t}\r\n\r\n\tfunction new_CustomMasterChef(address _wheat, address _stkWheat, uint256 _cakePerBlock, uint256 _startBlock) public returns (address _address)\r\n\t{\r\n\t\treturn address(new CustomMasterChef(_wheat, _stkWheat, _cakePerBlock, _startBlock));\r\n\t}\r\n}\r\n\r\nlibrary LibDeployer2\r\n{\r\n\tfunction new_stkWHEAT(address _wheat) public returns (address _address)\r\n\t{\r\n\t\treturn address(new stkWHEAT(_wheat));\r\n\t}\r\n\r\n\tfunction new_Buyback(address _rewardToken, address _routingToken, address _buybackToken1, address _buybackToken2, address _treasury, address _yield) public returns (address _address)\r\n\t{\r\n\t\treturn address(new Buyback(_rewardToken, _routingToken, _buybackToken1, _buybackToken2, _treasury, _yield));\r\n\t}\r\n}\r\n\r\nlibrary LibDeployer3\r\n{\r\n\tfunction new_MasterChefAdmin(address _masterChef) public returns (address _address)\r\n\t{\r\n\t\treturn address(new MasterChefAdmin(_masterChef));\r\n\t}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WHEAT", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0989c094ac63a7b6571036620f41387148d9d106c7c6263658a8d1906b9f4aee"}