{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/indexes/BrewlabsIndex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {ERC721Holder} from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\n\\nimport {AggregatorV3Interface} from \\\"../libs/AggregatorV3Interface.sol\\\";\\nimport {IBrewlabsAggregator} from \\\"../libs/IBrewlabsAggregator.sol\\\";\\nimport {IWETH} from \\\"../libs/IWETH.sol\\\";\\nimport {IWrapper} from \\\"../libs/IWrapper.sol\\\";\\n\\ninterface IBrewlabsIndexFactory {\\n    function brewlabsFee() external view returns (uint256);\\n    function feeLimits(uint256 index) external view returns (uint256);\\n    function brewlabsWallet() external view returns (address);\\n    function discountMgr() external view returns (address);\\n    function allowedTokens(address token) external view returns (uint8);\\n    function wrappers(address token) external view returns (address);\\n}\\n\\ninterface IBrewlabsIndexNft {\\n    function mint(address to) external returns (uint256);\\n    function burn(uint256 tokenId) external;\\n}\\n\\ninterface IBrewlabsDiscountMgr {\\n    function discountOf(address user) external view returns (uint256);\\n}\\n\\n// BrewlabsIndex is index contracts that offer a range of token collections to buy as \\\"Brewlabs Index\\\"\\n// most likely top 100 tokens that do not require tax slippage.\\n// Ideally the index tokens will buy 2-4 tokens (they will mostly be pegged tokens of the top 100 tokens that we will choose).\\n//\\n// Note User may select an index that will contain PEGGED-ETH + BTCB,\\n// the will determine how much (by a sliding scale) BNB they will allocate to each token.\\n// For example 1 BNB buy:\\n//    User chooses 30%; 0.30 BNB to buy PEGGED-ETH (BEP20)\\n//    User chooses 70%, 0.70BNB to buy BTCB.\\ncontract BrewlabsIndex is Ownable, ERC721Holder, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // Whether it is initialized\\n    bool private isInitialized;\\n\\n    uint256 private FEE_DENOMINATOR;\\n    address private PRICE_FEED;\\n    address public WNATIVE;\\n\\n    string public name;\\n\\n    IBrewlabsIndexFactory public factory;\\n    IERC721 public indexNft;\\n    IERC721 public deployerNft;\\n\\n    uint256 public NUM_TOKENS;\\n    IERC20[] public tokens;\\n\\n    IBrewlabsAggregator public swapAggregator;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256[] amounts; // How many tokens that user has bought\\n        uint256 usdAmount; // USD amount that user sold\\n    }\\n\\n    mapping(address => UserInfo) private users;\\n\\n    struct NftInfo {\\n        uint256 level;\\n        uint256[] amounts; // locked token amounts in NFT\\n        uint256 usdAmount; // USD amount that sold for above tokens\\n    }\\n\\n    mapping(uint256 => NftInfo) private nfts;\\n    uint256[] public totalStaked;\\n\\n    uint256 public depositFee;\\n    uint256 public commissionFee;\\n    uint256 public performanceFee;\\n    address public treasury;\\n    address public deployer;\\n    address public commissionWallet;\\n\\n    uint256 public totalEarned;\\n    uint256 public totalCommissions;\\n    uint256[] private pendingCommissions;\\n\\n    uint256 public deployerNftId;\\n\\n    event TokenZappedIn(\\n        address indexed user,\\n        uint256 ethAmount,\\n        uint256[] percents,\\n        uint256[] amountOuts,\\n        uint256 usdAmount,\\n        uint256 commission\\n    );\\n    event TokenZappedOut(address indexed user, uint256[] amounts, uint256 ethAmount, uint256 commission);\\n    event TokenClaimed(address indexed user, uint256[] amounts, uint256 usdAmount, uint256 commission);\\n    event TokenLocked(address indexed user, uint256[] amounts, uint256 usdAmount, uint256 tokenId);\\n    event TokenUnLocked(address indexed user, uint256[] amounts, uint256 usdAmount, uint256 tokenId);\\n\\n    event DeployerNftMinted(address indexed user, address nft, uint256 tokenId);\\n    event DeployerNftStaked(address indexed user, uint256 tokenId);\\n    event DeployerNftUnstaked(address indexed user, uint256 tokenId);\\n    event CommissionClaimed(address indexed user);\\n\\n    event SetIndexNft(address newNftAddr);\\n    event SetDeployerNft(address newNftAddr);\\n    event SetFees(uint256 fee0, uint256 fee1);\\n    event SetFeeWallet(address wallet);\\n    event SetSwapAggregator(address aggregator);\\n    event ServiceInfoChanged(address addr, uint256 fee);\\n\\n    modifier onlyInitialized() {\\n        require(isInitialized, \\\"Not initialized\\\");\\n        _;\\n    }\\n\\n    constructor() {}\\n\\n    /**\\n     * @notice Initialize index contract.\\n     * @param _name: index name\\n     * @param _tokens: token list that user can buy in a transaction\\n     * @param _indexNft: Index NFT address\\n     * @param _deployerNft: Deployer NFT address\\n     * @param _fees: additional fee for deployer\\n     * @param _owner: index owner address\\n     * @param _deployer: index deployer address\\n     * @param _commissionWallet: index commission wallet\\n     */\\n    function initialize(\\n        string memory _name,\\n        address _aggregator,\\n        IERC20[] memory _tokens,\\n        IERC721 _indexNft,\\n        IERC721 _deployerNft,\\n        uint256[2] memory _fees,\\n        address _owner,\\n        address _deployer,\\n        address _commissionWallet\\n    ) external {\\n        require(!isInitialized, \\\"Already initialized\\\");\\n        require(owner() == address(0x0) || msg.sender == owner(), \\\"Not allowed\\\");\\n        require(_tokens.length <= 5, \\\"Exceed maximum tokens\\\");\\n\\n        isInitialized = true;\\n\\n        name = _name;\\n\\n        // initialize default variables\\n        FEE_DENOMINATOR = 10000;\\n        PRICE_FEED = 0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE; // BNB-USD FEED\\n        swapAggregator = IBrewlabsAggregator(_aggregator);\\n        WNATIVE = swapAggregator.WNATIVE();\\n        NUM_TOKENS = _tokens.length;\\n\\n        depositFee = _fees[0];\\n        commissionFee = _fees[1];\\n        performanceFee = 0.01 ether;\\n        treasury = 0x5Ac58191F3BBDF6D037C6C6201aDC9F99c93C53A;\\n        deployer = _deployer;\\n        commissionWallet = _commissionWallet;\\n\\n        factory = IBrewlabsIndexFactory(msg.sender);\\n\\n        indexNft = _indexNft;\\n        deployerNft = _deployerNft;\\n        tokens = _tokens;\\n\\n        totalStaked = new uint256[](NUM_TOKENS);\\n        pendingCommissions = new uint256[](NUM_TOKENS + 1);\\n\\n        _transferOwnership(_owner);\\n    }\\n\\n    function precomputeZapIn(address _token, uint256 _amount, uint256[] memory _percents)\\n        external\\n        view\\n        returns (IBrewlabsAggregator.FormattedOffer[] memory queries)\\n    {\\n        queries = new IBrewlabsAggregator.FormattedOffer[](NUM_TOKENS + 1);\\n        uint256 ethAmount = _amount;\\n        if (_token != address(0x0)) {\\n            queries[0] = swapAggregator.findBestPath(_amount, _token, WNATIVE, 3);\\n            uint256[] memory _amounts = queries[0].amounts;\\n            ethAmount = _amounts[_amounts.length - 1];\\n        }\\n\\n        for (uint8 i = 0; i < NUM_TOKENS; i++) {\\n            if (i >= _percents.length) break;\\n\\n            uint256 amountIn = (ethAmount * _percents[i]) / FEE_DENOMINATOR;\\n            if (amountIn == 0 || address(tokens[i]) == WNATIVE) continue;\\n\\n            queries[i + 1] = swapAggregator.findBestPath(amountIn, WNATIVE, address(tokens[i]), 3);\\n        }\\n    }\\n\\n    /**\\n     * @notice Buy tokens by paying ETH and lock tokens in contract.\\n     *         When buy tokens, should pay processing fee(brewlabs fixed fee + deployer fee).\\n     * @param _percents: list of ETH allocation points to buy tokens\\n     */\\n    function zapIn(\\n        address _token,\\n        uint256 _amount,\\n        uint256[] memory _percents,\\n        IBrewlabsAggregator.Trade[] memory _trades\\n    ) external payable onlyInitialized nonReentrant {\\n        require(_percents.length == NUM_TOKENS, \\\"Invalid percents\\\");\\n        require(_trades.length == NUM_TOKENS + 1, \\\"Invalid trade config\\\");\\n\\n        uint256 totalPercentage = 0;\\n        for (uint8 i = 0; i < NUM_TOKENS; i++) {\\n            totalPercentage += _percents[i];\\n        }\\n        require(totalPercentage <= FEE_DENOMINATOR, \\\"Total percentage cannot exceed 10000\\\");\\n\\n        uint256 ethAmount = _beforeZapIn(_token, _amount, _trades[0]);\\n\\n        uint256 price = getPriceFromChainlink();\\n        uint256 discount = _getDiscount(msg.sender);\\n\\n        // pay brewlabs fee\\n        uint256 brewsFee = (ethAmount * factory.brewlabsFee() * discount) / FEE_DENOMINATOR ** 2;\\n        payable(factory.brewlabsWallet()).transfer(brewsFee);\\n        // pay deployer fee\\n        uint256 deployerFee = (ethAmount * depositFee * discount) / FEE_DENOMINATOR ** 2;\\n        if (commissionWallet == address(0x0)) {\\n            pendingCommissions[NUM_TOKENS] += deployerFee;\\n            totalCommissions += deployerFee * price / 1 ether;\\n        } else {\\n            payable(commissionWallet).transfer(deployerFee);\\n        }\\n        ethAmount -= brewsFee + deployerFee;\\n        totalEarned += deployerFee * price / 1 ether;\\n\\n        UserInfo storage user = users[msg.sender];\\n        if (user.usdAmount == 0) {\\n            user.amounts = new uint256[](NUM_TOKENS);\\n        }\\n\\n        // buy tokens\\n        uint256 amount;\\n        uint256[] memory amountOuts = new uint256[](NUM_TOKENS);\\n        for (uint8 i = 0; i < NUM_TOKENS; i++) {\\n            uint256 amountIn = (ethAmount * _percents[i]) / FEE_DENOMINATOR;\\n            if (amountIn == 0) continue;\\n\\n            if (address(tokens[i]) == WNATIVE) {\\n                IWETH(WNATIVE).deposit{value: amountIn}();\\n                amountOuts[i] = amountIn;\\n            } else {\\n                amountOuts[i] = _safeSwapEth(amountIn, address(tokens[i]), address(this), _trades[i + 1]);\\n            }\\n\\n            user.amounts[i] += amountOuts[i];\\n            totalStaked[i] += amountOuts[i];\\n\\n            amount += amountIn;\\n        }\\n        uint256 usdAmount = amount * price / 1 ether;\\n\\n        user.usdAmount += usdAmount;\\n        emit TokenZappedIn(msg.sender, amount, _percents, amountOuts, usdAmount, brewsFee + deployerFee);\\n\\n        if (totalPercentage < FEE_DENOMINATOR) {\\n            payable(msg.sender).transfer(ethAmount - amount);\\n        }\\n    }\\n\\n    function _beforeZapIn(address _token, uint256 _amount, IBrewlabsAggregator.Trade memory _trade)\\n        internal\\n        returns (uint256 amount)\\n    {\\n        if (_token == address(0x0)) return msg.value;\\n\\n        uint8 allowedMethod = factory.allowedTokens(_token);\\n        require(allowedMethod > 0, \\\"Cannot zap in with unsupported token\\\");\\n        require(_amount > 1000, \\\"Not enough amount\\\");\\n\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n        if (allowedMethod == 1) {\\n            amount = _safeSwapForETH(_amount, _token, _trade);\\n        } else {\\n            amount = _amount;\\n\\n            address wrapper = factory.wrappers(_token);\\n            if (_token == WNATIVE) {\\n                IWETH(WNATIVE).withdraw(_amount);\\n            } else {\\n                IERC20(_token).approve(wrapper, _amount);\\n                amount = IWrapper(wrapper).withdraw(_amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Claim tokens from contract.\\n     *         If the user exits the index in a loss then there is no fee.\\n     *         If the user exists the index in a profit, processing fee will be applied.\\n     */\\n    function claimTokens(uint256 _percent) external onlyInitialized nonReentrant {\\n        require(_percent > 0 && _percent <= FEE_DENOMINATOR, \\\"Invalid percent\\\");\\n        UserInfo storage user = users[msg.sender];\\n        require(user.usdAmount > 0, \\\"No available tokens\\\");\\n\\n        uint256 discount = _getDiscount(msg.sender);\\n        uint256 price = getPriceFromChainlink();\\n        uint256 expectedAmt = _expectedEth(user.amounts);\\n        uint256 expectedUsdAmt = (expectedAmt * price / 1 ether);\\n\\n        bool bCommission = expectedUsdAmt > user.usdAmount;\\n        uint256 profit = bCommission ? (expectedUsdAmt - user.usdAmount) : 0;\\n\\n        address _brewsWallet = factory.brewlabsWallet();\\n        uint256 _brewsFee = factory.brewlabsFee();\\n        uint256 _commissionDenominator = user.usdAmount * (FEE_DENOMINATOR ** 2);\\n\\n        uint256[] memory amounts = new uint256[](NUM_TOKENS);\\n        for (uint256 i = 0; i < NUM_TOKENS; i++) {\\n            uint256 claimAmount = (user.amounts[i] * _percent) / FEE_DENOMINATOR;\\n            amounts[i] = claimAmount;\\n\\n            uint256 claimFee = 0;\\n            uint256 brewsFee = 0;\\n            if (bCommission) {\\n                uint256 _profit = claimAmount * profit * discount;\\n                brewsFee = (_profit * _brewsFee) / _commissionDenominator;\\n                _transferToken(tokens[i], _brewsWallet, brewsFee);\\n\\n                claimFee = (_profit * commissionFee) / _commissionDenominator;\\n                if (commissionWallet == address(0x0)) {\\n                    pendingCommissions[i] += claimFee;\\n                } else {\\n                    _transferToken(tokens[i], commissionWallet, claimFee);\\n                }\\n            }\\n            _transferToken(tokens[i], msg.sender, claimAmount - claimFee - brewsFee);\\n\\n            user.amounts[i] -= claimAmount;\\n            totalStaked[i] -= claimAmount;\\n        }\\n\\n        uint256 commission = 0;\\n        if (bCommission) {\\n            commission = (expectedAmt * _percent * profit) / FEE_DENOMINATOR;\\n            commission = (commission * commissionFee * discount) / _commissionDenominator;\\n\\n            if (commissionWallet == address(0x0)) {\\n                totalCommissions += commission * price / 1 ether;\\n            }\\n            totalEarned += commission * price / 1 ether;\\n        }\\n\\n        uint256 claimedUsdAmount = (user.usdAmount * _percent) / FEE_DENOMINATOR;\\n        user.usdAmount -= claimedUsdAmount;\\n        emit TokenClaimed(msg.sender, amounts, claimedUsdAmount, commission);\\n    }\\n\\n    function precomputeZapOut(address _token)\\n        external\\n        view\\n        returns (IBrewlabsAggregator.FormattedOffer[] memory queries)\\n    {\\n        queries = new IBrewlabsAggregator.FormattedOffer[](NUM_TOKENS + 1);\\n\\n        UserInfo memory user = users[msg.sender];\\n\\n        uint256 ethAmount = 0;\\n        uint256[] memory amounts = user.amounts;\\n        for (uint256 i = 0; i < NUM_TOKENS; i++) {\\n            if (amounts[i] == 0) continue;\\n            if (address(tokens[i]) == WNATIVE) {\\n                ethAmount += amounts[i];\\n                continue;\\n            }\\n\\n            queries[i] = swapAggregator.findBestPath(amounts[i], address(tokens[i]), WNATIVE, 3);\\n            uint256[] memory _amounts = queries[i].amounts;\\n            ethAmount += _amounts[_amounts.length - 1];\\n        }\\n\\n        if (_token != address(0x0)) {\\n            queries[NUM_TOKENS] = swapAggregator.findBestPath(ethAmount, WNATIVE, _token, 3);\\n        }\\n    }\\n\\n    /**\\n     * @notice Sale tokens from contract and claim ETH.\\n     *         If the user exits the index in a loss then there is no fee.\\n     *         If the user exists the index in a profit, processing fee will be applied.\\n     */\\n    function zapOut(address _token, IBrewlabsAggregator.Trade[] memory _trades) external onlyInitialized nonReentrant {\\n        UserInfo storage user = users[msg.sender];\\n        require(user.usdAmount > 0, \\\"No available tokens\\\");\\n        require(_trades.length == NUM_TOKENS + 1, \\\"Invalid trade config\\\");\\n\\n        uint256 ethAmount;\\n        for (uint256 i = 0; i < NUM_TOKENS; i++) {\\n            uint256 claimAmount = user.amounts[i];\\n            totalStaked[i] -= claimAmount;\\n            if (user.amounts[i] == 0) continue;\\n\\n            uint256 amountOut;\\n            if (address(tokens[i]) == WNATIVE) {\\n                amountOut = claimAmount;\\n                IWETH(WNATIVE).withdraw(amountOut);\\n            } else {\\n                amountOut = _safeSwapForETH(claimAmount, address(tokens[i]), _trades[i]);\\n            }\\n            ethAmount += amountOut;\\n        }\\n\\n        uint256 commission = 0;\\n        uint256 discount = _getDiscount(msg.sender);\\n        uint256 price = getPriceFromChainlink();\\n        if ((ethAmount * price / 1 ether) > user.usdAmount) {\\n            uint256 profit = ((ethAmount * price / 1 ether) - user.usdAmount) * 1e18 / price;\\n\\n            uint256 brewsFee = (profit * factory.brewlabsFee() * discount) / FEE_DENOMINATOR ** 2;\\n            payable(factory.brewlabsWallet()).transfer(brewsFee);\\n\\n            commission = (profit * commissionFee * discount) / FEE_DENOMINATOR ** 2;\\n            if (commissionWallet == address(0x0)) {\\n                pendingCommissions[NUM_TOKENS] += commission;\\n                totalCommissions += commission * price / 1 ether;\\n            } else {\\n                payable(commissionWallet).transfer(commission);\\n            }\\n            totalEarned += commission * price / 1 ether;\\n            ethAmount -= commission + brewsFee;\\n        }\\n        emit TokenZappedOut(msg.sender, user.amounts, ethAmount, commission);\\n        delete users[msg.sender];\\n\\n        _afterZapOut(_token, msg.sender, ethAmount, _trades[NUM_TOKENS]);\\n    }\\n\\n    function _afterZapOut(address _token, address _to, uint256 _amount, IBrewlabsAggregator.Trade memory _trade)\\n        internal\\n    {\\n        if (_token == address(0x0)) {\\n            payable(_to).transfer(_amount);\\n            return;\\n        }\\n\\n        uint8 allowedMethod = factory.allowedTokens(_token);\\n        require(allowedMethod > 0, \\\"Cannot zap out with this token\\\");\\n\\n        if (allowedMethod == 1) {\\n            _safeSwapEth(_amount, _token, _to, _trade);\\n        } else {\\n            uint256 amount = _amount;\\n            if (_token == WNATIVE) {\\n                IWETH(WNATIVE).deposit{value: _amount}();\\n            } else {\\n                address wrapper = factory.wrappers(_token);\\n                amount = IWrapper(wrapper).deposit{value: _amount}();\\n            }\\n            IERC20(_token).safeTransfer(_to, amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Once the user purchases the tokens through the contract, the user can then choose to at anytime\\n     *  to mint an NFT that would represent the ownership of their tokens in the contract.\\n     * The purpose of this is to allow users to mint an NFT that represents their value in the index and at their discretion,\\n     *  transfer or sell that NFT to another wallet.\\n     */\\n    function mintNft() external payable onlyInitialized nonReentrant returns (uint256) {\\n        UserInfo storage user = users[msg.sender];\\n        require(user.usdAmount > 0, \\\"No available tokens\\\");\\n\\n        _transferPerformanceFee();\\n\\n        // mint NFT\\n        uint256 tokenId = IBrewlabsIndexNft(address(indexNft)).mint(msg.sender);\\n\\n        // lock available tokens for NFT\\n        NftInfo storage nftData = nfts[tokenId];\\n        nftData.amounts = user.amounts;\\n        nftData.usdAmount = user.usdAmount;\\n\\n        nftData.level = 1;\\n        if (nftData.usdAmount < 1000 ether) nftData.level = 0;\\n        if (nftData.usdAmount > 5000 ether) nftData.level = 2;\\n\\n        delete users[msg.sender];\\n        emit TokenLocked(msg.sender, nftData.amounts, nftData.usdAmount, tokenId);\\n\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @notice Stake the NFT back into the index to claim/zap out their tokens.\\n     */\\n    function stakeNft(uint256 tokenId) external payable onlyInitialized nonReentrant {\\n        UserInfo storage user = users[msg.sender];\\n\\n        _transferPerformanceFee();\\n\\n        // burn NFT\\n        indexNft.safeTransferFrom(msg.sender, address(this), tokenId);\\n        IBrewlabsIndexNft(address(indexNft)).burn(tokenId);\\n\\n        NftInfo memory nftData = nfts[tokenId];\\n        if (user.amounts.length == 0) {\\n            user.amounts = nftData.amounts;\\n        } else {\\n            for (uint8 i = 0; i < NUM_TOKENS; i++) {\\n                user.amounts[i] += nftData.amounts[i];\\n            }\\n        }\\n        user.usdAmount += nftData.usdAmount;\\n\\n        emit TokenUnLocked(msg.sender, nftData.amounts, nftData.usdAmount, tokenId);\\n        delete nfts[tokenId];\\n    }\\n\\n    function mintDeployerNft() external payable onlyInitialized nonReentrant returns (uint256) {\\n        require(msg.sender == deployer, \\\"Caller is not the deployer\\\");\\n        require(deployerNftId == 0, \\\"Already Mint\\\");\\n\\n        _transferPerformanceFee();\\n\\n        commissionWallet = address(0x0);\\n        deployerNftId = IBrewlabsIndexNft(address(deployerNft)).mint(msg.sender);\\n        emit DeployerNftMinted(msg.sender, address(deployerNft), deployerNftId);\\n        return deployerNftId;\\n    }\\n\\n    function stakeDeployerNft() external payable onlyInitialized nonReentrant {\\n        commissionWallet = msg.sender;\\n\\n        _transferPerformanceFee();\\n        _claimPendingCommission();\\n\\n        deployerNft.safeTransferFrom(msg.sender, address(this), deployerNftId);\\n        emit DeployerNftStaked(msg.sender, deployerNftId);\\n    }\\n\\n    function unstakeDeployerNft() external payable onlyInitialized nonReentrant {\\n        require(msg.sender == commissionWallet, \\\"Caller is not operator\\\");\\n\\n        _transferPerformanceFee();\\n\\n        commissionWallet = address(0x0);\\n\\n        deployerNft.safeTransferFrom(address(this), msg.sender, deployerNftId);\\n        emit DeployerNftUnstaked(msg.sender, deployerNftId);\\n    }\\n\\n    function _claimPendingCommission() internal {\\n        for (uint256 i = 0; i <= NUM_TOKENS; i++) {\\n            if (pendingCommissions[i] == 0) continue;\\n            if (i < NUM_TOKENS) {\\n                _transferToken(tokens[i], commissionWallet, pendingCommissions[i]);\\n            } else {\\n                payable(commissionWallet).transfer(pendingCommissions[i]);\\n            }\\n            pendingCommissions[i] = 0;\\n        }\\n        totalCommissions = 0;\\n        emit CommissionClaimed(commissionWallet);\\n    }\\n\\n    /**\\n     * @notice Returns purchased tokens and ETH amount at the time when bought tokens.\\n     * @param _user: user address\\n     */\\n    function userInfo(address _user) external view returns (uint256[] memory amounts, uint256 usdAmount) {\\n        UserInfo memory _userData = users[_user];\\n        if (_userData.usdAmount == 0) return (new uint256[](NUM_TOKENS), 0);\\n        return (_userData.amounts, _userData.usdAmount);\\n    }\\n\\n    /**\\n     * @notice Returns tokens locked in NFT and ETH amount at the time when bought tokens.\\n     * @param _tokenId: owned tokenId\\n     */\\n    function nftInfo(uint256 _tokenId)\\n        external\\n        view\\n        returns (uint256 level, uint256[] memory amounts, uint256 usdAmount)\\n    {\\n        NftInfo memory _nftData = nfts[_tokenId];\\n        if (_nftData.usdAmount == 0) return (1, new uint256[](NUM_TOKENS), 0);\\n        return (_nftData.level, _nftData.amounts, _nftData.usdAmount);\\n    }\\n\\n    function getPendingCommissions() external view returns (uint256[] memory) {\\n        return pendingCommissions;\\n    }\\n\\n    /**\\n     * @notice Returns estimated eth amount when user zapout.\\n     * @param _user: user address\\n     */\\n    function estimateEthforUser(address _user) external view returns (uint256) {\\n        return _expectedEth(users[_user].amounts);\\n    }\\n\\n    /**\\n     * @notice Returns estimated eth amount that can get from NFT item.\\n     * @param _tokenId: token Id of BrewlabsIndex NFT\\n     */\\n    function estimateEthforNft(uint256 _tokenId) external view returns (uint256) {\\n        return _expectedEth(nfts[_tokenId].amounts);\\n    }\\n\\n    function getPriceFromChainlink() public view returns (uint256) {\\n        if (PRICE_FEED == address(0x0)) return 0;\\n\\n        (, int256 answer,,,) = AggregatorV3Interface(PRICE_FEED).latestRoundData();\\n        // It's fine for price to be 0. We have two price feeds.\\n        if (answer == 0) {\\n            return 0;\\n        }\\n\\n        // Extend the decimals to 1e18.\\n        uint256 retVal = uint256(answer);\\n        uint256 price = retVal * (10 ** (18 - uint256(AggregatorV3Interface(PRICE_FEED).decimals())));\\n\\n        return price;\\n    }\\n\\n    /**\\n     * @notice Update swap aggregator.\\n     * @param _aggregator: swap Aggregator address\\n     */\\n    function setSwapAggregator(address _aggregator) external onlyOwner onlyInitialized {\\n        require(_aggregator != address(0x0), \\\"Invalid address\\\");\\n        require(IBrewlabsAggregator(_aggregator).WNATIVE() != address(0x0), \\\"Invalid swap aggregator\\\");\\n\\n        swapAggregator = IBrewlabsAggregator(_aggregator);\\n        WNATIVE = IBrewlabsAggregator(_aggregator).WNATIVE();\\n        emit SetSwapAggregator(_aggregator);\\n    }\\n\\n    function setIndexNft(IERC721 newNftAddr) external onlyOwner {\\n        require(address(newNftAddr) != address(0x0), \\\"Invalid NFT\\\");\\n        indexNft = newNftAddr;\\n        emit SetIndexNft(address(newNftAddr));\\n    }\\n\\n    function setDeployerNft(IERC721 newNftAddr) external onlyOwner {\\n        require(deployerNftId == 0, \\\"Deployer NFT already minted\\\");\\n        require(address(newNftAddr) != address(0x0), \\\"Invalid NFT\\\");\\n        deployerNft = newNftAddr;\\n        emit SetDeployerNft(address(newNftAddr));\\n    }\\n\\n    /**\\n     * @notice Update processing fee.\\n     * @param _depositfee: deposit fee in point\\n     * @param _commissionFee: commission fee in point\\n     */\\n    function setFees(uint256 _depositfee, uint256 _commissionFee) external payable {\\n        require(msg.sender == commissionWallet || msg.sender == owner(), \\\"Caller is not the operator\\\");\\n        require(\\n            _depositfee <= factory.feeLimits(0) && _commissionFee <= factory.feeLimits(1),\\n            \\\"Cannot exceed fee limit of factory\\\"\\n        );\\n\\n        _transferPerformanceFee();\\n\\n        depositFee = _depositfee;\\n        commissionFee = _commissionFee;\\n        emit SetFees(depositFee, commissionFee);\\n    }\\n\\n    /**\\n     * @notice Update fee wallet.\\n     * @param _feeWallet: address to receive deposit/commission fee\\n     */\\n    function setFeeWallet(address _feeWallet) external payable {\\n        require(msg.sender == commissionWallet || msg.sender == owner(), \\\"Caller is not the operator\\\");\\n        require(_feeWallet != address(0x0), \\\"Invalid wallet\\\");\\n\\n        commissionWallet = _feeWallet;\\n        emit SetFeeWallet(_feeWallet);\\n    }\\n\\n    /**\\n     * This method can be called by treasury.\\n     * @notice Update treasury wallet and performance fee.\\n     * @param _addr: new treasury address\\n     * @param _fee: percentage in point\\n     */\\n    function setServiceInfo(address _addr, uint256 _fee) external {\\n        require(msg.sender == treasury, \\\"setServiceInfo: FORBIDDEN\\\");\\n        require(_addr != address(0x0), \\\"Invalid address\\\");\\n\\n        treasury = _addr;\\n        performanceFee = _fee;\\n\\n        emit ServiceInfoChanged(_addr, _fee);\\n    }\\n\\n    /**\\n     * @notice Emergency withdraw tokens.\\n     * @param _token: token address\\n     */\\n    function rescueTokens(address _token) external onlyOwner {\\n        if (_token == address(0x0)) {\\n            uint256 _ethAmount = address(this).balance;\\n            payable(msg.sender).transfer(_ethAmount);\\n        } else {\\n            uint256 _tokenAmount = IERC20(_token).balanceOf(address(this));\\n            IERC20(_token).safeTransfer(msg.sender, _tokenAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Process performance fee.\\n     */\\n    function _transferPerformanceFee() internal {\\n        require(msg.value >= performanceFee, \\\"Should pay small gas to call method\\\");\\n        payable(treasury).transfer(performanceFee);\\n    }\\n\\n    function _transferToken(IERC20 _token, address _to, uint256 _amount) internal {\\n        if (address(_token) == WNATIVE) {\\n            IWETH(WNATIVE).withdraw(_amount);\\n            payable(_to).transfer(_amount);\\n        } else {\\n            _token.safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the expected eth amount by swapping provided tokens.\\n     * @param amounts: amounts to swap\\n     */\\n    function _expectedEth(uint256[] memory amounts) internal view returns (uint256 amountOut) {\\n        uint256 aggregatorFee = swapAggregator.BREWS_FEE();\\n\\n        IBrewlabsAggregator.FormattedOffer memory query;\\n        for (uint8 i = 0; i < NUM_TOKENS; i++) {\\n            if (amounts[i] == 0) continue;\\n\\n            if (address(tokens[i]) == WNATIVE) {\\n                amountOut += amounts[i];\\n            } else {\\n                query = swapAggregator.findBestPath(amounts[i], address(tokens[i]), WNATIVE, 3);\\n                uint256 _amountOut = query.amounts[query.amounts.length - 1];\\n                if (aggregatorFee > 0) _amountOut = _amountOut * (10000 - aggregatorFee) / 10000;\\n                amountOut += _amountOut;\\n            }\\n        }\\n    }\\n\\n    function _getDiscount(address _user) internal view returns (uint256) {\\n        address discountMgr = factory.discountMgr();\\n        if (discountMgr == address(0x0)) return FEE_DENOMINATOR;\\n\\n        return FEE_DENOMINATOR - IBrewlabsDiscountMgr(discountMgr).discountOf(_user);\\n    }\\n\\n    /**\\n     * @notice get token from ETH via swap.\\n     * @param _amountIn: eth amount to swap\\n     * @param _token: to token\\n     * @param _to: receiver address\\n     */\\n    function _safeSwapEth(uint256 _amountIn, address _token, address _to, IBrewlabsAggregator.Trade memory _trade)\\n        internal\\n        returns (uint256)\\n    {\\n        _trade.amountIn = _amountIn;\\n\\n        uint256 beforeAmt = IERC20(_token).balanceOf(_to);\\n        swapAggregator.swapNoSplitFromETH{value: _amountIn}(_trade, _to);\\n        uint256 afterAmt = IERC20(_token).balanceOf(_to);\\n\\n        return afterAmt - beforeAmt;\\n    }\\n\\n    /**\\n     * @notice swap tokens to ETH.\\n     * @param _amountIn: token amount to swap\\n     * @param _token: from token\\n     */\\n    function _safeSwapForETH(uint256 _amountIn, address _token, IBrewlabsAggregator.Trade memory _trade)\\n        internal\\n        returns (uint256)\\n    {\\n        _trade.amountIn = _amountIn;\\n\\n        IERC20(_token).safeApprove(address(swapAggregator), _amountIn);\\n\\n        uint256 beforeAmt = address(this).balance;\\n        swapAggregator.swapNoSplitToETH(_trade, address(this));\\n\\n        return address(this).balance - beforeAmt;\\n    }\\n\\n    /**\\n     * onERC721Received(address operator, address from, uint256 tokenId, bytes data) \u2192 bytes4\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\\n        public\\n        override\\n        returns (bytes4)\\n    {\\n        require(msg.sender == address(indexNft) || msg.sender == address(deployerNft), \\\"not enabled NFT\\\");\\n        return super.onERC721Received(operator, from, tokenId, data);\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/libs/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n    function description() external view returns (string memory);\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\"\r\n    },\r\n    \"contracts/libs/IBrewlabsAggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBrewlabsAggregator {\\n    struct Trade {\\n        uint256 amountIn;\\n        uint256 amountOut;\\n        address[] path;\\n        address[] adapters;\\n    }\\n\\n    struct FormattedOffer {\\n        uint256[] amounts;\\n        address[] adapters;\\n        address[] path;\\n        uint256 gasEstimate;\\n    }\\n\\n    function WNATIVE() external view returns (address);\\n    function BREWS_FEE() external view returns (uint256);\\n    function findBestPath(uint256 _amountIn, address _tokenIn, address _tokenOut, uint256 _maxSteps)\\n        external\\n        view\\n        returns (FormattedOffer memory);\\n\\n    function swapNoSplit(Trade memory _trade, address _to) external;\\n    function swapNoSplitFromETH(Trade memory _trade, address _to) external payable;\\n    function swapNoSplitToETH(Trade memory _trade, address _to) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libs/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint256 value) external returns (bool);\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libs/IWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface IWrapper {\\n    function deposit() external payable returns (uint256);\\n    function withdraw(uint256) external returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"CommissionClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"DeployerNftMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"DeployerNftStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"DeployerNftUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"ServiceInfoChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newNftAddr\",\"type\":\"address\"}],\"name\":\"SetDeployerNft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"SetFeeWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee1\",\"type\":\"uint256\"}],\"name\":\"SetFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newNftAddr\",\"type\":\"address\"}],\"name\":\"SetIndexNft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"SetSwapAggregator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"TokenClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenUnLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"percents\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amountOuts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"TokenZappedIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"TokenZappedOut\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NUM_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WNATIVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployerNft\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployerNftId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"estimateEthforNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"estimateEthforUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IBrewlabsIndexFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingCommissions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFromChainlink\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"indexNft\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721\",\"name\":\"_indexNft\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"_deployerNft\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_fees\",\"type\":\"uint256[2]\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_deployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_commissionWallet\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintDeployerNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"nftInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_percents\",\"type\":\"uint256[]\"}],\"name\":\"precomputeZapIn\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"gasEstimate\",\"type\":\"uint256\"}],\"internalType\":\"struct IBrewlabsAggregator.FormattedOffer[]\",\"name\":\"queries\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"precomputeZapOut\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"gasEstimate\",\"type\":\"uint256\"}],\"internalType\":\"struct IBrewlabsAggregator.FormattedOffer[]\",\"name\":\"queries\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"newNftAddr\",\"type\":\"address\"}],\"name\":\"setDeployerNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeWallet\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commissionFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"newNftAddr\",\"type\":\"address\"}],\"name\":\"setIndexNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setServiceInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"name\":\"setSwapAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeDeployerNft\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stakeNft\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAggregator\",\"outputs\":[{\"internalType\":\"contract IBrewlabsAggregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCommissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeDeployerNft\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_percents\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"}],\"internalType\":\"struct IBrewlabsAggregator.Trade[]\",\"name\":\"_trades\",\"type\":\"tuple[]\"}],\"name\":\"zapIn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"}],\"internalType\":\"struct IBrewlabsAggregator.Trade[]\",\"name\":\"_trades\",\"type\":\"tuple[]\"}],\"name\":\"zapOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BrewlabsIndex", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}