{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.5.16;\\r\\n\\r\\n/**\\r\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\r\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\r\\n * be specified by overriding the virtual {_implementation} function.\\r\\n *\\r\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\r\\n * different contract through the {_delegate} function.\\r\\n *\\r\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\r\\n */\\r\\ncontract Proxy {\\r\\n    /**\\r\\n     * @dev Delegates the current call to `implementation`.\\r\\n     *\\r\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\r\\n     */\\r\\n    function _delegate(address implementation) internal {\\r\\n        assembly {\\r\\n            // Copy msg.data. We take full control of memory in this inline assembly\\r\\n            // block because it will not return to Solidity code. We overwrite the\\r\\n            // Solidity scratch pad at memory position 0.\\r\\n            calldatacopy(0, 0, calldatasize())\\r\\n\\r\\n            // Call the implementation.\\r\\n            // out and outsize are 0 because we don't know the size yet.\\r\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\r\\n\\r\\n            // Copy the returned data.\\r\\n            returndatacopy(0, 0, returndatasize())\\r\\n\\r\\n            switch result\\r\\n            // delegatecall returns 0 on error.\\r\\n            case 0 {\\r\\n                revert(0, returndatasize())\\r\\n            }\\r\\n            default {\\r\\n                return(0, returndatasize())\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\r\\n     * and {_fallback} should delegate.\\r\\n     */\\r\\n    function _implementation() internal view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\r\\n     *\\r\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\r\\n     */\\r\\n    function _fallback() internal {\\r\\n        _beforeFallback();\\r\\n        _delegate(_implementation());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\r\\n     * function in the contract matches the call data.\\r\\n     */\\r\\n    function () external payable {\\r\\n        _fallback();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\r\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\r\\n     *\\r\\n     * If overriden should call `super._beforeFallback()`.\\r\\n     */\\r\\n    function _beforeFallback() internal {}\\r\\n}\"\r\n    },\r\n    \"/contracts/proxy/TransparentUpgradeableProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.5.16;\\r\\n\\r\\nimport \\\"./UpgradeableProxy.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\r\\n *\\r\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\r\\n * clashing], which can potentially be used in an attack, this contract uses the\\r\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\r\\n * things that go hand in hand:\\r\\n *\\r\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\r\\n * that call matches one of the admin functions exposed by the proxy itself.\\r\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\r\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\r\\n * \\\"admin cannot fallback to proxy target\\\".\\r\\n *\\r\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\r\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\r\\n * to sudden errors when trying to call a function from the proxy implementation.\\r\\n *\\r\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\r\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\r\\n */\\r\\ncontract TransparentUpgradeableProxy is UpgradeableProxy {\\r\\n    /**\\r\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\r\\n     * optionally initialized with `_data` as explained in {UpgradeableProxy-constructor}.\\r\\n     */\\r\\n    constructor(address _logic, address admin_, bytes memory _data) public payable UpgradeableProxy(_logic, _data) {\\r\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\r\\n        _setAdmin(admin_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the admin account has changed.\\r\\n     */\\r\\n    event AdminChanged(address previousAdmin, address newAdmin);\\r\\n\\r\\n    /**\\r\\n     * @dev Storage slot with the admin of the contract.\\r\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\r\\n     * validated in the constructor.\\r\\n     */\\r\\n    bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\r\\n     */\\r\\n    modifier ifAdmin() {\\r\\n        if (msg.sender == _admin()) {\\r\\n            _;\\r\\n        } else {\\r\\n            _fallback();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current admin.\\r\\n     *\\r\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\r\\n     *\\r\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\r\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\r\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\r\\n     */\\r\\n    function admin() external ifAdmin returns (address admin_) {\\r\\n        admin_ = _admin();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current implementation.\\r\\n     *\\r\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\r\\n     *\\r\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\r\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\r\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\r\\n     */\\r\\n    function implementation() external ifAdmin returns (address implementation_) {\\r\\n        implementation_ = _implementation();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Changes the admin of the proxy.\\r\\n     *\\r\\n     * Emits an {AdminChanged} event.\\r\\n     *\\r\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\r\\n     */\\r\\n    function changeAdmin(address newAdmin) external ifAdmin {\\r\\n        require(newAdmin != address(0), \\\"TransparentUpgradeableProxy: new admin is the zero address\\\");\\r\\n        emit AdminChanged(_admin(), newAdmin);\\r\\n        _setAdmin(newAdmin);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Upgrade the implementation of the proxy.\\r\\n     *\\r\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\r\\n     */\\r\\n    function upgradeTo(address newImplementation) external ifAdmin {\\r\\n        _upgradeTo(newImplementation);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\r\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\r\\n     * proxied contract.\\r\\n     *\\r\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\r\\n     */\\r\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\r\\n        _upgradeTo(newImplementation);\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success,) = newImplementation.delegatecall(data);\\r\\n        require(success);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current admin.\\r\\n     */\\r\\n    function _admin() internal view returns (address adm) {\\r\\n        bytes32 slot = _ADMIN_SLOT;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            adm := sload(slot)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Stores a new address in the EIP1967 admin slot.\\r\\n     */\\r\\n    function _setAdmin(address newAdmin) private {\\r\\n        bytes32 slot = _ADMIN_SLOT;\\r\\n\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            sstore(slot, newAdmin)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\r\\n     */\\r\\n    function _beforeFallback() internal {\\r\\n        require(msg.sender != _admin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\r\\n        super._beforeFallback();\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/proxy/UpgradeableProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.5.16;\\r\\n\\r\\nimport \\\"./Proxy.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\r\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\r\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\r\\n * implementation behind the proxy.\\r\\n * \\r\\n * Upgradeability is only provided internally through {_upgradeTo}. For an externally upgradeable proxy see\\r\\n * {TransparentUpgradeableProxy}.\\r\\n */\\r\\ncontract UpgradeableProxy is Proxy {\\r\\n    /**\\r\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\r\\n     * \\r\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\r\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\r\\n     */\\r\\n    constructor(address _logic, bytes memory _data) public payable {\\r\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\r\\n        _setImplementation(_logic);\\r\\n        if(_data.length > 0) {\\r\\n            // solhint-disable-next-line avoid-low-level-calls\\r\\n            (bool success,) = _logic.delegatecall(_data);\\r\\n            require(success);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the implementation is upgraded.\\r\\n     */\\r\\n    event Upgraded(address indexed implementation);\\r\\n\\r\\n    /**\\r\\n     * @dev Storage slot with the address of the current implementation.\\r\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\r\\n     * validated in the constructor.\\r\\n     */\\r\\n    bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current implementation address.\\r\\n     */\\r\\n    function _implementation() internal view returns (address impl) {\\r\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            impl := sload(slot)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Upgrades the proxy to a new implementation.\\r\\n     * \\r\\n     * Emits an {Upgraded} event.\\r\\n     */\\r\\n    function _upgradeTo(address newImplementation) internal {\\r\\n        _setImplementation(newImplementation);\\r\\n        emit Upgraded(newImplementation);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\r\\n     */\\r\\n    function _setImplementation(address newImplementation) private {\\r\\n        require(Address.isContract(newImplementation), \\\"UpgradeableProxy: new implementation is not a contract\\\");\\r\\n\\r\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\r\\n\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            sstore(slot, newImplementation)\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "TransparentUpgradeableProxy", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d3872b60b345fd9610344999a16cfd9bb39db5f1000000000000000000000000d47c8e8a40910633c3ee44006facc31ef1d8744300000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "1", "Implementation": "0x8cace74290c45c7ea48751168b41214b213d9c75", "SwarmSource": ""}