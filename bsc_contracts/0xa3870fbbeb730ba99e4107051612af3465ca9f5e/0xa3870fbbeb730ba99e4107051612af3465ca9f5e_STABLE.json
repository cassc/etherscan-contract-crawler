{"SourceCode": "{\"Blacklist.sol\":{\"content\":\"/**\\n * @title Blacklist\\n * @dev Blacklist contract\\n *\\n * @author - \\u003cUSDFI TRUST\\u003e\\n * for the USDFI Trust\\n *\\n * SPDX-License-Identifier: GNU GPLv2\\n *\\n **/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./BlacklistRole.sol\\\";\\n\\ncontract Blacklist is Ownable, BlacklistRole {\\n    mapping(address =\\u003e bool) blacklist;\\n    event AddedToBlacklist(address indexed account);\\n    event RemovedFromBlacklist(address indexed account);\\n\\n    /**\\n     * @dev add address to the Blacklist.\\n     *\\n     * Requirements:\\n     *\\n     * - sender must have the blacklister role\\n     */\\n    function addToBlacklist(address _address) public onlyBlacklister {\\n        blacklist[_address] = true;\\n        emit AddedToBlacklist(_address);\\n    }\\n\\n    /**\\n     * @dev Remove address from Blacklist.\\n     *\\n     * Requirements:\\n     *\\n     * - sender must have the blacklister role\\n     */\\n    function removeFromBlacklist(address _address) public onlyBlacklister {\\n        blacklist[_address] = false;\\n        emit RemovedFromBlacklist(_address);\\n    }\\n\\n    /**\\n     * @dev Returns address is Blacklist true or false\\n     */\\n    function isBlacklisted(address _address) public view returns (bool) {\\n        return blacklist[_address];\\n    }\\n}\\n\"},\"BlacklistRole.sol\":{\"content\":\"/**\\n * @title Blacklist Role\\n * @dev BlacklistRole contract\\n *\\n * @author - \\u003cUSDFI TRUST\\u003e\\n * for the USDFI Trust\\n *\\n * SPDX-License-Identifier: GNU GPLv2\\n *\\n **/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./Roles.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\ncontract BlacklistRole is Ownable {\\n    using Roles for Roles.Role;\\n\\n    event BlacklisterAdded(address indexed account);\\n    event BlacklisterRemoved(address indexed account);\\n\\n    Roles.Role private _blacklisters;\\n\\n    constructor() internal {\\n        _addBlacklister(msg.sender);\\n    }\\n\\n    modifier onlyBlacklister() {\\n        require(\\n            isBlacklister(msg.sender),\\n            \\\"BlacklisterRole: caller does not have the Blacklister role\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns _account address is Blacklister true or false\\n     *\\n     * Requirements:\\n     *\\n     * - address `_account` cannot be the zero address\\n     */\\n    function isBlacklister(address _account) public view returns (bool) {\\n        return _blacklisters.has(_account);\\n    }\\n\\n    /**\\n     * @dev add address to the Blacklister role.\\n     *\\n     * Requirements:\\n     *\\n     * - address `_account` cannot be the zero address\\n     */\\n    function addBlacklister(address _account) public onlyOwner {\\n        _addBlacklister(_account);\\n    }\\n\\n    /**\\n     * @dev remove address from the Blacklister role.\\n     *\\n     * Requirements:\\n     *\\n     * - address `_account` cannot be the zero address\\n     */\\n    function renounceBlacklister(address _account) public onlyOwner {\\n        _removeBlacklister(_account);\\n    }\\n\\n    /**\\n     * @dev add address to the Blacklister role (internal).\\n     *\\n     * Requirements:\\n     *\\n     * - address `_account` cannot be the zero address\\n     */\\n    function _addBlacklister(address _account) internal {\\n        _blacklisters.add(_account);\\n        emit BlacklisterAdded(_account);\\n    }\\n\\n    /**\\n     * @dev remove address from the Blacklister role (internal).\\n     *\\n     * Requirements:\\n     *\\n     * - address `_account` cannot be the zero address\\n     */\\n    function _removeBlacklister(address _account) internal {\\n        _blacklisters.remove(_account);\\n        emit BlacklisterRemoved(_account);\\n    }\\n}\\n\"},\"Context.sol\":{\"content\":\"/**\\n * @title Context\\n * @dev Context contract\\n *\\n * @author - \\u003cUSDFI TRUST\\u003e\\n * for the USDFI Trust\\n *\\n * SPDX-License-Identifier: GNU GPLv2\\n *\\n * File @openzeppelin/contracts/utils/Context.sol\\n *\\n **/\\n\\npragma solidity 0.6.12;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"ERC20.sol\":{\"content\":\"/**\\n * @title ERC20\\n * @dev ERC20 contract\\n *\\n * @author - \\u003cUSDFI TRUST\\u003e\\n * for the USDFI Trust\\n *\\n * SPDX-License-Identifier: GNU GPLv2\\n *\\n * File @openzeppelin/contracts/token/ERC20/ERC20.sol\\n *\\n **/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Manager.sol\\\";\\nimport \\\"./Blacklist.sol\\\";\\n\\ncontract ERC20 is Context, IERC20, Manager, MinterRole, Blacklist {\\n    using SafeMath for uint256;\\n\\n    mapping(address =\\u003e uint256) private _balances;\\n\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n    string private _name;\\n    string private _symbol;\\n    uint256 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * These three values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes:\\n     * it does not affect any of the arithmetic in the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint256) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default of 18.\\n     *\\n     * WARNING: This function should only be called by the developer.\\n     * Most applications which interact with token contracts do not expect\\n     * {decimals} to change and may work incorrectly if changed.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     * Send amount sub fee or without fee.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have a balance of at least `amount`\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        override\\n        whenNotPaused\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        whenNotPaused\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        whenNotPaused\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     * Send amount - with fee or without fee.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` must have a balance of at least `amount`\\n     * - the caller must have allowance for `sender`\\u0027s tokens of at least `amount`\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override whenNotPaused returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(\\n                amount,\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Automatically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} which can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        whenNotPaused\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].add(addedValue)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Automatically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} which can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address\\n     * - `spender` must have allowance for the caller of at least `subtractedValue`\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].sub(\\n                subtractedValue,\\n                \\\"ERC20: decreased allowance below zero\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient` and `feeReceiver`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and used also for automatic token fees.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` must have a balance of at least `amount`\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual whenNotPaused {\\n        require(isBlacklisted(sender) == false, \\\"sender blacklisted\\\");\\n        require(isBlacklisted(recipient) == false, \\\"recipient blacklisted\\\");\\n\\n        _balances[sender] = _balances[sender].sub(\\n            amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        _balances[recipient] = _balances[recipient].add(amount);\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Emits a {burn} event and sets the BlackFund address to 0.\\n     *\\n     * Requirements:\\n     *\\n     * - only `onlyMinter` can trigger the destroyBlackFunds\\n     * - `_blackListedUser` is on the blacklist\\n     *\\n     */\\n    function destroyBlackFunds(address _blackListedUser) public onlyMinter {\\n        require(isBlacklisted(_blackListedUser) == true, \\\"is not Blacklisted\\\");\\n\\n        uint256 dirtyFunds = balanceOf(_blackListedUser);\\n\\n        _burn(_blackListedUser, dirtyFunds);\\n    }\\n\\n    /** @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * Emits an Admin {Transfer} event on the amount of Black Funds.\\n     *\\n     * Requirements:\\n     *\\n     * - only `onlyMinter` can trigger the redeemBlackFunds\\n     * - `sender` must be on the blacklist\\n     *\\n     */\\n    function redeemBlackFunds(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public onlyMinter {\\n        require(isBlacklisted(sender) == true, \\\"is not Blacklisted\\\");\\n        _balances[sender] = _balances[sender].sub(amount);\\n        _balances[recipient] = _balances[recipient].add(amount);\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address\\n     * - `freeSupply` must be larger than the amount to be created\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n        freeMintSupply = freeMintSupply.sub(\\n            amount,\\n            \\\"ERC20: no more free supply (total)\\\"\\n        );\\n        freeMintSupplyMinter[msg.sender] = freeMintSupplyMinter[msg.sender].sub(\\n            amount,\\n            \\\"ERC20: no more free supply (minter)\\\"\\n        );\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * Purpose:\\n     * onlyMinter mints tokens on the _to address\\n     *\\n     * @param _amount - amount of newly issued tokens\\n     * @param _to - address for the new issued tokens\\n     */\\n    function mint(address _to, uint256 _amount) public onlyMinter {\\n        _mint(_to, _amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address\\n     * - `account` must have at least `amount` tokens\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n        _balances[account] = _balances[account].sub(\\n            amount,\\n            \\\"ERC20: burn amount exceeds balance\\\"\\n        );\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` tokens.\\n     *\\n     * This internal function is the equivalent to `approve`, and can be used to\\n     * set automatic allowances for certain subsystems etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address\\n     * - `spender` cannot be the zero address\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual whenNotPaused {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n}\\n\"},\"IERC20.sol\":{\"content\":\"/**\\n * @title Interface ERC20\\n * @dev IERC20 contract\\n *\\n * @author - \\u003cUSDFI TRUST\\u003e\\n * for the USDFI Trust\\n *\\n * SPDX-License-Identifier: GNU GPLv2\\n *\\n * File @openzeppelin/contracts/token/ERC20/IERC20.sol\\n *\\n **/\\n\\npragma solidity 0.6.12;\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both: the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"},\"Manager.sol\":{\"content\":\"/**\\n * @title Manager\\n * @dev Manager contract\\n *\\n * @author - \\u003cUSDFI TRUST\\u003e\\n * for the USDFI Trust\\n *\\n * SPDX-License-Identifier: GNU GPLv2\\n *\\n **/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./MinterRole.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Pausable.sol\\\";\\n\\ncontract Manager is Pausable {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Outputs the `freeMintSupply` variable.\\n     */\\n    uint256 public freeMintSupply;\\n    mapping(address =\\u003e uint256) public freeMintSupplyMinter;\\n\\n    /**\\n     * @dev Sets the {freeMintSupply} up so that the minter can create new coins.\\n     *\\n     * The manager decides how many new coins may be created by the minter.\\n     * The function can only increase the amount of new free coins.\\n     *\\n     * Requirements:\\n     *\\n     * - only `manager` can update the `setFreeMintSupplyCom`\\n     */\\n    function setFreeMintSupplyCom(address _address, uint256 _supply)\\n        public\\n        onlyManager\\n    {\\n        freeMintSupply = freeMintSupply.add(_supply);\\n        freeMintSupplyMinter[_address] = freeMintSupplyMinter[_address].add(\\n            _supply\\n        );\\n    }\\n\\n    /**\\n     * @dev Sets the {freeMintSupply} down so that the minter can create fewer new coins.\\n     *\\n     * The manager decides how many new coins may be created by the minter.\\n     * The function can only downgrade the amount of new free coins.\\n     *\\n     * Requirements:\\n     *\\n     * - only `manager` can update the `setFreeMintSupplySub`\\n     */\\n    function setFreeMintSupplySub(address _address, uint256 _supply)\\n        public\\n        onlyManager\\n    {\\n        freeMintSupply = freeMintSupply.sub(_supply);\\n        freeMintSupplyMinter[_address] = freeMintSupplyMinter[_address].sub(\\n            _supply\\n        );\\n    }\\n}\\n\"},\"ManagerRole.sol\":{\"content\":\"/**\\n * @title Manager Role\\n * @dev ManagerRole contract\\n *\\n * @author - \\u003cUSDFI TRUST\\u003e\\n * for the USDFI Trust\\n *\\n * SPDX-License-Identifier: GNU GPLv2\\n *\\n **/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./Roles.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\ncontract ManagerRole is Ownable {\\n    using Roles for Roles.Role;\\n\\n    event ManagerAdded(address indexed account);\\n    event ManagerRemoved(address indexed account);\\n\\n    Roles.Role private _managers;\\n\\n    constructor() internal {\\n        _addManager(msg.sender);\\n    }\\n\\n    modifier onlyManager() {\\n        require(\\n            isManager(msg.sender),\\n            \\\"ManagerRole: caller does not have the Manager role\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns account address is Manager true or false.\\n     *\\n     * Requirements:\\n     *\\n     * - address `account` cannot be the zero address\\n     */\\n    function isManager(address account) public view returns (bool) {\\n        return _managers.has(account);\\n    }\\n\\n    /**\\n     * @dev Adds address to the Manager role.\\n     *\\n     * Requirements:\\n     *\\n     * - address `account` cannot be the zero address\\n     */\\n    function addManager(address account) public onlyOwner {\\n        _addManager(account);\\n    }\\n\\n    /**\\n     * @dev Removes address from the Manager role.\\n     *\\n     * Requirements:\\n     *\\n     * - address `account` cannot be the zero address\\n     */\\n    function renounceManager(address account) public onlyOwner {\\n        _removeManager(account);\\n    }\\n\\n    /**\\n     * @dev Adds address to the Manager role (internally).\\n     *\\n     * Requirements:\\n     *\\n     * - address `account` cannot be the zero address\\n     */\\n    function _addManager(address account) internal {\\n        _managers.add(account);\\n        emit ManagerAdded(account);\\n    }\\n\\n    /**\\n     * @dev Removes address from the Manager role (internally).\\n     *\\n     * Requirements:\\n     *\\n     * - address `account` cannot be the zero address\\n     */\\n    function _removeManager(address account) internal {\\n        _managers.remove(account);\\n        emit ManagerRemoved(account);\\n    }\\n}\\n\"},\"MinterRole.sol\":{\"content\":\"/**\\n * @title Minter Role\\n * @dev MinterRole contract\\n *\\n * @author - \\u003cUSDFI TRUST\\u003e\\n * for the USDFI Trust\\n *\\n * SPDX-License-Identifier: GNU GPLv2\\n *\\n **/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./Roles.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\ncontract MinterRole is Ownable {\\n    using Roles for Roles.Role;\\n\\n    event MinterAdded(address indexed account);\\n    event MinterRemoved(address indexed account);\\n\\n    Roles.Role private _minters;\\n\\n    constructor() internal {\\n        _addMinter(msg.sender);\\n    }\\n\\n    modifier onlyMinter() {\\n        require(\\n            isMinter(msg.sender),\\n            \\\"MinterRole: caller does not have the Minter role\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns account address is Minter true or false.\\n     *\\n     * Requirements:\\n     *\\n     * - address `account` cannot be the zero address\\n     */\\n    function isMinter(address account) public view returns (bool) {\\n        return _minters.has(account);\\n    }\\n\\n    /**\\n     * @dev Adds address to the Minter role.\\n     *\\n     * Requirements:\\n     *\\n     * - address `account` cannot be the zero address\\n     */\\n    function addMinter(address account) public onlyOwner {\\n        _addMinter(account);\\n    }\\n\\n    /**\\n     * @dev Removes address from the Minter role.\\n     *\\n     * Requirements:\\n     *\\n     * - address `account` cannot be the zero address\\n     */\\n    function renounceMinter(address account) public onlyOwner {\\n        _removeMinter(account);\\n    }\\n\\n    /**\\n     * @dev Adds address to the Minter role (internally).\\n     *\\n     * Requirements:\\n     *\\n     * - address `account` cannot be the zero address\\n     */\\n    function _addMinter(address account) internal {\\n        _minters.add(account);\\n        emit MinterAdded(account);\\n    }\\n\\n    /**\\n     * @dev Removes address from the Minter role (internally).\\n     *\\n     * Requirements:\\n     *\\n     * - address `account` cannot be the zero address\\n     */\\n    function _removeMinter(address account) internal {\\n        _minters.remove(account);\\n        emit MinterRemoved(account);\\n    }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"/**\\n * @title Ownable\\n * @dev Ownable contract\\n *\\n * @author - \\u003cUSDFI TRUST\\u003e\\n * for the USDFI Trust\\n *\\n * SPDX-License-Identifier: GNU GPLv2\\n *\\n * File @openzeppelin/contracts/access/Ownable.sol\\n *\\n **/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./Context.sol\\\";\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any other account than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"},\"Pausable.sol\":{\"content\":\"/**\\n * @title Pausable\\n * @dev Pausable contract\\n *\\n * @author - \\u003cUSDFI TRUST\\u003e\\n * for the USDFI Trust\\n *\\n * SPDX-License-Identifier: GNU GPLv2\\n *\\n * File @openzeppelin/contracts/security/Pausable.sol\\n *\\n **/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./ManagerRole.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism which can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It makes the modifiers\\n * `whenNotPaused` and `whenPaused` available, which can be applied to\\n * the functions of your contract. Note that modifiers will not be pausable by\\n * the inclusion of the module only. Modifiers need to be triggered.\\n */\\ncontract Pausable is ManagerRole {\\n    /**\\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\\n     * to the deployer.\\n     */\\n    constructor() internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Called by a pauser to pause triggers stopped state.\\n     */\\n    function pause() public onlyManager whenNotPaused {\\n        _paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Called by a pauser to unpause - returns to normal state.\\n     */\\n    function unpause() public onlyManager whenPaused {\\n        _paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\"},\"Roles.sol\":{\"content\":\"/**\\n * @title Roles\\n * @dev Roles contract\\n *\\n * @author - \\u003cUSDFI TRUST\\u003e\\n * for the USDFI Trust\\n *\\n * SPDX-License-Identifier: GNU GPLv2\\n *\\n * File @openzeppelin/contracts/access/Roles.sol\\n *\\n **/\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n    struct Role {\\n        mapping(address =\\u003e bool) bearer;\\n    }\\n\\n    /**\\n     * @dev Gives an account access to this role.\\n     */\\n    function add(Role storage role, address account) internal {\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\n        role.bearer[account] = true;\\n    }\\n\\n    /**\\n     * @dev Removes an account\\u0027s access to this role.\\n     */\\n    function remove(Role storage role, address account) internal {\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev Checks if an account has the role.\\n     * @return bool\\n     */\\n    function has(Role storage role, address account)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\n        return role.bearer[account];\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"/**\\n * @title Safe Math\\n * @dev SafeMath contract\\n *\\n * @author - \\u003cUSDFI TRUST\\u003e\\n * for the USDFI Trust\\n *\\n * SPDX-License-Identifier: GNU GPLv2\\n *\\n * File @openzeppelin/contracts/utils/math/SafeMath.sol\\n *\\n **/\\n\\npragma solidity 0.6.12;\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (if the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (if the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers (unsigned integer module).\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"},\"STABLE.sol\":{\"content\":\"/**\\r\\n * @title STABLE\\r\\n * @dev STABLE contract\\r\\n *\\r\\n * @author - \\u003cUSDFI TRUST\\u003e\\r\\n * for the USDFI Trust\\r\\n *\\r\\n * SPDX-License-Identifier: GNU GPLv2\\r\\n *\\r\\n **/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\n\\r\\ncontract STABLE is ERC20 {\\r\\n    constructor() public ERC20(\\\"STABLE\\\", \\\"STABLE\\\") {}\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddedToBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BlacklisterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BlacklisterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ManagerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ManagerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemovedFromBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addBlacklister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blackListedUser\",\"type\":\"address\"}],\"name\":\"destroyBlackFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeMintSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freeMintSupplyMinter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isBlacklister\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemBlackFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"renounceBlacklister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"}],\"name\":\"setFreeMintSupplyCom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"}],\"name\":\"setFreeMintSupplySub\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "STABLE", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv2", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://176106de0ef66e2220a9ebcb63ca4b6f31906e0c243c93f6866367df4623c111"}