{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/HyperSonic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\ninterface IERC20_full is IERC20 {\\n    function decimals() external view returns (uint8);\\n}\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n}\\n\\ninterface IDEXFactory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\ninterface IDEXRouter {\\n    function factory() external pure returns (IDEXFactory);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\\ninterface ITokenConverter {\\n    function convertViaWETH(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _amount\\n    ) external view returns (uint256);\\n\\n    function DEFAULT_FACTORY() external view returns (IDEXFactory);\\n}\\n\\nabstract contract Auth is Ownable {\\n    mapping(address => bool) public isAuthorized;\\n\\n    constructor() {\\n        isAuthorized[msg.sender] = true;\\n    }\\n\\n    function authorize(address adr) external onlyOwner {\\n        isAuthorized[adr] = true;\\n    }\\n\\n    function unauthorize(address adr) external onlyOwner {\\n        isAuthorized[adr] = false;\\n    }\\n\\n    function setAuthorizationMultiple(address[] memory adr, bool value) external onlyOwner {\\n        for (uint256 i = 0; i < adr.length; i++) {\\n            isAuthorized[adr[i]] = value;\\n        }\\n    }\\n\\n    function transferOwnership(address newOwner) public override onlyOwner {\\n        isAuthorized[owner()] = false;\\n        isAuthorized[newOwner] = true;\\n        super.transferOwnership(newOwner);\\n    }\\n}\\n\\ncontract DividendDistributor is Ownable {\\n    using SafeERC20 for IERC20;\\n    IWETH public WETH;\\n    IERC20 public dividendToken;\\n    IDEXRouter public router;\\n    struct Share {\\n        uint256 amount;\\n        uint256 totalExcluded;\\n        uint256 totalRealised;\\n        uint256 index;\\n        uint256 lastClaimed;\\n    }\\n    mapping(address => Share) public shares;\\n    address[] shareholders;\\n\\n    uint256 public totalShares;\\n    uint256 public totalDividends;\\n    uint256 public totalDistributed;\\n    uint256 public dividendsPerShare;\\n    uint256 public _ACCURACY_ = 1e36;\\n    uint256 public minPeriod = 30 minutes;\\n    uint256 public minDistribution;\\n    uint256 public shareThreshold = 0;\\n\\n    uint256 public currentIndex;\\n    uint256 public maxGas = 500000;\\n\\n    constructor(\\n        IDEXRouter _router,\\n        address _dividendToken,\\n        address _WETH\\n    ) {\\n        router = IDEXRouter(_router);\\n        dividendToken = IERC20(_dividendToken);\\n        minDistribution = 1 * (10**IERC20_full(_dividendToken).decimals());\\n        WETH = IWETH(_WETH);\\n    }\\n\\n    function setRouter(IDEXRouter _router) external onlyOwner {\\n        router = _router;\\n    }\\n\\n    function setDistributionCriteria(\\n        uint256 _minPeriod,\\n        uint256 _minDistribution,\\n        uint256 _shareThreshold\\n    ) external onlyOwner {\\n        minPeriod = _minPeriod;\\n        minDistribution = _minDistribution;\\n        shareThreshold = _shareThreshold;\\n    }\\n\\n    function setMaxGas(uint256 gas) external onlyOwner {\\n        maxGas = gas;\\n    }\\n\\n    function setShare(address shareholder, uint256 amount) external onlyOwner {\\n        Share storage _S = shares[shareholder];\\n        if (_S.amount > 0) {\\n            _sendDividend(shareholder);\\n            if (amount < shareThreshold) _removeShareholder(shareholder);\\n        } else if (amount >= shareThreshold) _addShareholder(shareholder);\\n        totalShares -= _S.amount;\\n        totalShares += amount;\\n        _S.amount = amount;\\n        _S.totalExcluded = _getCumulativeDividends(shareholder);\\n    }\\n\\n    function deposit() external payable onlyOwner {\\n        uint256 gotDividendToken;\\n        gotDividendToken = dividendToken.balanceOf(address(this));\\n        if (address(dividendToken) == address(WETH)) {\\n            WETH.deposit{value: msg.value}();\\n        } else {\\n            address[] memory path = new address[](2);\\n            path[0] = address(WETH);\\n            path[1] = address(dividendToken);\\n            router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(\\n                0,\\n                path,\\n                address(this),\\n                block.timestamp\\n            );\\n        }\\n        gotDividendToken = dividendToken.balanceOf(address(this)) - gotDividendToken;\\n\\n        totalDividends += gotDividendToken;\\n        dividendsPerShare += (_ACCURACY_ * gotDividendToken) / totalShares;\\n    }\\n\\n    function sendDividends() external onlyOwner {\\n        uint256 shareholderCount = shareholders.length;\\n        if (shareholderCount == 0) return;\\n\\n        uint256 gasUsed;\\n        uint256 gasLeft = gasleft();\\n\\n        uint256 _currentIndex = currentIndex;\\n        for (uint256 i = 0; i < shareholderCount && gasUsed < maxGas; i++) {\\n            if (_currentIndex >= shareholderCount) _currentIndex = 0;\\n            address _shareholder = shareholders[_currentIndex];\\n            if (\\n                block.timestamp > shares[_shareholder].lastClaimed + minPeriod &&\\n                getUnpaidEarnings(_shareholder) > minDistribution\\n            ) {\\n                _sendDividend(_shareholder);\\n            }\\n            gasUsed += gasLeft - gasleft();\\n            gasLeft = gasleft();\\n            _currentIndex++;\\n        }\\n        currentIndex = _currentIndex;\\n    }\\n\\n    function _getCumulativeDividends(address shareholder) internal view returns (uint256) {\\n        return (shares[shareholder].amount * dividendsPerShare) / _ACCURACY_;\\n    }\\n\\n    function _sendDividend(address shareholder) internal {\\n        uint256 amount = getUnpaidEarnings(shareholder);\\n        if (amount == 0) return;\\n\\n        dividendToken.safeTransfer(shareholder, amount);\\n        totalDistributed += amount;\\n        shares[shareholder].totalRealised += amount;\\n        shares[shareholder].totalExcluded = _getCumulativeDividends(shareholder);\\n        shares[shareholder].lastClaimed = block.timestamp;\\n    }\\n\\n    function _addShareholder(address shareholder) internal {\\n        shares[shareholder].index = shareholders.length;\\n        shareholders.push(shareholder);\\n    }\\n\\n    function _removeShareholder(address shareholder) internal {\\n        _sendDividend(shareholder);\\n        shareholders[shares[shareholder].index] = shareholders[shareholders.length - 1];\\n        shares[shareholders[shareholders.length - 1]].index = shares[shareholder].index;\\n        delete shares[shareholder];\\n        shareholders.pop();\\n    }\\n\\n    function claimDividend() external {\\n        _sendDividend(msg.sender);\\n    }\\n\\n    function getUnpaidEarnings(address shareholder) public view returns (uint256) {\\n        uint256 _dividends = _getCumulativeDividends(shareholder);\\n        uint256 _excluded = shares[shareholder].totalExcluded;\\n        return _dividends > _excluded ? _dividends - _excluded : 0;\\n    }\\n}\\n\\ncontract HyperSonic is Auth {\\n    address WETH;\\n    address USD;\\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\\n    address ZERO = 0x0000000000000000000000000000000000000000;\\n\\n    ITokenConverter public TOKEN_CONVERTER;\\n\\n    string public constant name = 'HyperSonic';\\n    string public constant symbol = 'HYPERSONIC';\\n    uint8 public constant decimals = 18;\\n    uint256 public constant totalSupply = 1e6 ether;\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    mapping(address => bool) public isFeeExempt;\\n    mapping(address => bool) public isBuyLimitExempt;\\n    mapping(address => bool) public isWalletLimitExempt;\\n    mapping(address => bool) public isDividendExempt;\\n\\n    mapping(address => bool) public isPair;\\n    mapping(address => bool) public isRouter;\\n\\n    bool public buyLimitEnabled = true;\\n    uint256 public buyLimitUSD;\\n\\n    uint256 public walletLimit = 5000 ether;\\n\\n    IDEXRouter public router;\\n    address public pair;\\n    DividendDistributor public distributor;\\n\\n    uint256 public launchedAt;\\n    bool public tradingOpen;\\n\\n    struct FeeSettings {\\n        uint256 liquidity;\\n        uint256 dividends;\\n        uint256 total;\\n        uint256 _burn;\\n        uint256 _denominator;\\n    }\\n    struct SwapbackSettings {\\n        bool enabled;\\n        uint256 amount;\\n    }\\n\\n    FeeSettings public fees =\\n        FeeSettings({liquidity: 100, dividends: 300, total: 400, _burn: 100, _denominator: 10000});\\n    SwapbackSettings public swapback = SwapbackSettings({enabled: true, amount: totalSupply / 1000});\\n\\n    bool inSwap;\\n    modifier swapping() {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    event AutoLiquify(uint256 amountETH, uint256 amountTKN);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    // Distributor failure logs for owner to take care of, if sth is wrong\\n    event DistributorFailure(uint8 code, string reason);\\n    event DistributorFailure(uint8 code, bytes reason);\\n\\n    constructor(\\n        IDEXRouter _router,\\n        address _USD,\\n        ITokenConverter _tokenConverter,\\n        address _dividendToken,\\n        IDEXRouter _dividendDistributorRouter\\n    ) {\\n        // BSC TOKEN DEFAULT PARAMS:\\n        // PANCAKE V2 ROUTER 0x10ED43C718714eb63d5aA57B78B54704E256024E\\n        // BSC MAINNET USD (BUSD) 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56\\n        // BSC MAINNET TOKEN_CONVERTER 0xe2bf8ef5E2b24441d5B2649A3Dc6D81afC1a9517\\n        // BSC MAINNET dividendToken (SSN) 0x89d453108bD94B497bBB4496729cd26f92Aba533\\n        // PANCAKE V1 ROUTER 0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F\\n\\n        // ETH TOKEN DEFAULT PARAMS\\n        // UNISWAP V2 ROUTER 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\n        // ETH MAINNET USD (USDT) 0xdAC17F958D2ee523a2206206994597C13D831ec7\\n        // ETH MAINNET TOKEN_CONVERTER 0xe2bf8ef5E2b24441d5B2649A3Dc6D81afC1a9517\\n        // ETH MAINNET dividendToken (WETH) 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\\n        // UNISWAP V2 ROUTER 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\n\\n        router = _router;\\n        WETH = _router.WETH();\\n        pair = router.factory().createPair(WETH, address(this));\\n        USD = _USD;\\n        buyLimitUSD = 5000 * (10**IERC20_full(_USD).decimals());\\n        TOKEN_CONVERTER = _tokenConverter;\\n        allowance[address(this)][address(router)] = ~uint256(0);\\n\\n        distributor = new DividendDistributor(_dividendDistributorRouter, _dividendToken, WETH);\\n\\n        isFeeExempt[DEAD] = true;\\n        isFeeExempt[msg.sender] = true;\\n        isFeeExempt[address(this)] = true;\\n        isFeeExempt[address(router)] = true;\\n\\n        isBuyLimitExempt[DEAD] = true;\\n        isBuyLimitExempt[msg.sender] = true;\\n        isBuyLimitExempt[address(this)] = true;\\n        isBuyLimitExempt[address(router)] = true;\\n\\n        isWalletLimitExempt[DEAD] = true;\\n        isWalletLimitExempt[msg.sender] = true;\\n        isWalletLimitExempt[address(this)] = true;\\n        isWalletLimitExempt[address(router)] = true;\\n\\n        isDividendExempt[DEAD] = true;\\n        isDividendExempt[msg.sender] = true;\\n        isDividendExempt[address(this)] = true;\\n        isDividendExempt[address(router)] = true;\\n\\n        isDividendExempt[pair] = true;\\n        isWalletLimitExempt[pair] = true;\\n\\n        isPair[pair] = true;\\n        isRouter[address(router)] = true;\\n\\n        // Owner must manually whitelist DXSale presale contract\\n        // isFeeExempt[_presaleContract] = true;\\n        // isBuyLimitExempt[_presaleContract] = true;\\n        // isDividendExempt[_presaleContract] = true;\\n\\n        balanceOf[msg.sender] = totalSupply;\\n        emit Transfer(address(0), msg.sender, totalSupply);\\n    }\\n\\n    receive() external payable {}\\n\\n    function getOwner() external view returns (address) {\\n        return owner();\\n    }\\n\\n    function approve(address spender, uint256 amount) public returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function approveMax(address spender) external returns (bool) {\\n        return approve(spender, ~uint256(0));\\n    }\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool) {\\n        return _transferFrom(msg.sender, recipient, amount);\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool) {\\n        if (allowance[sender][msg.sender] != ~uint256(0)) allowance[sender][msg.sender] -= amount;\\n        return _transferFrom(sender, recipient, amount);\\n    }\\n\\n    function _transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        if (inSwap) return _basicTransfer(sender, recipient, amount);\\n        if (!tradingOpen) require(isAuthorized[sender], 'Trading not open yet');\\n\\n        bool _isBuy = isPair[sender] && !isRouter[recipient];\\n        bool _isTradingOperation = isPair[sender] ||\\n            isPair[recipient] ||\\n            isPair[msg.sender] ||\\n            isRouter[sender] ||\\n            isRouter[recipient] ||\\n            isRouter[msg.sender];\\n        bool _isFirst24Hours = block.timestamp < (launchedAt + 24 hours);\\n        bool _isTemporaryTaxFreeBuy = _isFirst24Hours && _isBuy;\\n\\n        // Limit wallet balance during first 24h\\n        if (_isFirst24Hours && !isWalletLimitExempt[recipient]) {\\n            require(balanceOf[recipient] + amount <= walletLimit, 'Recipient balance limit exceeded');\\n        }\\n\\n        // Limit BUY at any time\\n        if (_isBuy && buyLimitEnabled && !isBuyLimitExempt[recipient]) {\\n            uint256 _USDEquivalent = TOKEN_CONVERTER.convertViaWETH(address(this), USD, amount);\\n            if (_USDEquivalent > 0) require(_USDEquivalent <= buyLimitUSD, 'BUY limit exceeded');\\n        }\\n\\n        // Sells accumulated fee for ETH and distribute\\n        if (swapback.enabled && (balanceOf[address(this)] >= swapback.amount) && !_isTradingOperation) {\\n            // (?swapback enabled?) Sells accumulated TKN fees for ETH\\n            _sellAndDistributeAccumulatedTKNFee();\\n        }\\n\\n        // Launch at first liquidity\\n        if (launchedAt == 0 && isPair[recipient]) {\\n            require(balanceOf[sender] > 0, 'balance is zero');\\n            launchedAt = block.timestamp;\\n        }\\n\\n        // Take fee; burn;\\n        // Exchange balances\\n        balanceOf[sender] -= amount;\\n        uint256 amountReceived = amount;\\n        if (!isFeeExempt[sender] && !isFeeExempt[recipient] && !_isTemporaryTaxFreeBuy) {\\n            if (fees.total > 0) {\\n                uint256 feeAmount = (amount * fees.total) / fees._denominator;\\n                balanceOf[address(this)] += feeAmount;\\n                emit Transfer(sender, address(this), feeAmount);\\n                amountReceived -= feeAmount;\\n            }\\n            if (fees._burn > 0) {\\n                uint256 burnAmount = (amount * fees._burn) / fees._denominator;\\n                balanceOf[DEAD] += burnAmount;\\n                emit Transfer(sender, DEAD, burnAmount);\\n                amountReceived -= burnAmount;\\n            }\\n        }\\n        balanceOf[recipient] += amountReceived;\\n        emit Transfer(sender, recipient, amountReceived);\\n\\n        // Dividend tracker. All in try/catch to prevent tx failure in ANY case\\n        if (!isDividendExempt[sender]) {\\n            try distributor.setShare(sender, balanceOf[sender]) {} catch Error(string memory reason) {\\n                emit DistributorFailure(0, reason);\\n            } catch (bytes memory reason) {\\n                emit DistributorFailure(0, reason);\\n            }\\n        }\\n        if (!isDividendExempt[recipient]) {\\n            try distributor.setShare(recipient, balanceOf[recipient]) {} catch Error(string memory reason) {\\n                emit DistributorFailure(1, reason);\\n            } catch (bytes memory reason) {\\n                emit DistributorFailure(1, reason);\\n            }\\n        }\\n        try distributor.sendDividends() {} catch Error(string memory reason) {\\n            emit DistributorFailure(2, reason);\\n        } catch (bytes memory reason) {\\n            emit DistributorFailure(2, reason);\\n        }\\n\\n        return true;\\n    }\\n\\n    function _basicTransfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        balanceOf[sender] -= amount;\\n        balanceOf[recipient] += amount;\\n        emit Transfer(sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function _sellAndDistributeAccumulatedTKNFee() internal swapping {\\n        // Swap the fee taken above to ETH and distribute to liquidity and dividends;\\n        // Add some liquidity\\n        uint256 halfLiquidityFee = fees.liquidity / 2;\\n        uint256 TKNtoLiquidity = (swapback.amount * halfLiquidityFee) / fees.total;\\n        uint256 amountToSwap = swapback.amount - TKNtoLiquidity;\\n\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = WETH;\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            amountToSwap,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n        uint256 gotETH = address(this).balance;\\n\\n        uint256 totalETHFee = fees.total - halfLiquidityFee;\\n        uint256 ETHtoLiquidity = (gotETH * halfLiquidityFee) / totalETHFee;\\n        if (TKNtoLiquidity > 0) {\\n            (uint256 amountToken, uint256 amountETH, ) = router.addLiquidityETH{value: ETHtoLiquidity}(\\n                address(this),\\n                TKNtoLiquidity,\\n                0,\\n                0,\\n                owner(),\\n                block.timestamp\\n            );\\n            emit AutoLiquify(amountETH, amountToken);\\n        }\\n\\n        uint256 ETHtoDividends = address(this).balance; // whatever is left --> to dividends\\n        try distributor.deposit{value: ETHtoDividends}() {} catch Error(string memory reason) {\\n            emit DistributorFailure(3, reason);\\n        } catch (bytes memory reason) {\\n            emit DistributorFailure(3, reason);\\n        }\\n    }\\n\\n    function getCirculatingSupply() public view returns (uint256) {\\n        return totalSupply - balanceOf[DEAD] - balanceOf[ZERO];\\n    }\\n\\n    // SET EXEMPTS\\n\\n    function setIsFeeExempt(address[] memory holders, bool exempt) public onlyOwner {\\n        for (uint256 i = 0; i < holders.length; i++) {\\n            isFeeExempt[holders[i]] = exempt;\\n        }\\n    }\\n\\n    function setIsBuyLimitExempt(address[] memory holders, bool exempt) public onlyOwner {\\n        for (uint256 i = 0; i < holders.length; i++) {\\n            isBuyLimitExempt[holders[i]] = exempt;\\n        }\\n    }\\n\\n    function setIsWalletLimitExempt(address[] memory holders, bool exempt) public onlyOwner {\\n        for (uint256 i = 0; i < holders.length; i++) {\\n            isWalletLimitExempt[holders[i]] = exempt;\\n        }\\n    }\\n\\n    function setIsDividendExempt(address[] memory holders, bool exempt) public onlyOwner {\\n        for (uint256 i = 0; i < holders.length; i++) {\\n            require(holders[i] != address(this) && !(isPair[holders[i]] && !exempt), 'forbidden address'); // Forbid including back token and pairs\\n            isDividendExempt[holders[i]] = exempt;\\n            distributor.setShare(holders[i], exempt ? 0 : balanceOf[holders[i]]);\\n        }\\n    }\\n\\n    function setFullExempt(address[] memory holders, bool exempt) public onlyOwner {\\n        setIsFeeExempt(holders, exempt);\\n        setIsBuyLimitExempt(holders, exempt);\\n        setIsWalletLimitExempt(holders, exempt);\\n        setIsDividendExempt(holders, exempt);\\n    }\\n\\n    // SET IS PAIR/ROUTER\\n\\n    function setIsPair(address[] memory addresses, bool _isPair) public onlyOwner {\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            isPair[addresses[i]] = _isPair;\\n        }\\n        setIsDividendExempt(addresses, _isPair);\\n        setIsWalletLimitExempt(addresses, _isPair);\\n    }\\n\\n    function setIsRouter(address[] memory addresses, bool _isRouter) public onlyOwner {\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            isRouter[addresses[i]] = _isRouter;\\n        }\\n        setFullExempt(addresses, _isRouter);\\n    }\\n\\n    // SET TOKEN SETTINGS\\n\\n    function setBuyLimitSettings(uint256 amount, bool enabled) external onlyOwner {\\n        buyLimitUSD = amount;\\n        buyLimitEnabled = enabled;\\n    }\\n\\n    function setWalletLimitSettings(uint256 amount) external onlyOwner {\\n        walletLimit = amount;\\n    }\\n\\n    function setFees(\\n        uint256 _liquidity,\\n        uint256 _dividends,\\n        uint256 _burn,\\n        uint256 _denominator\\n    ) external onlyOwner {\\n        fees = FeeSettings({\\n            liquidity: _liquidity,\\n            dividends: _dividends,\\n            total: _liquidity + _dividends,\\n            _burn: _burn,\\n            _denominator: _denominator\\n        });\\n        require(fees.total + _burn < fees._denominator / 4, 'max total fee is 25%');\\n    }\\n\\n    function setSwapBackSettings(bool _enabled, uint256 _amount) external onlyOwner {\\n        swapback.enabled = _enabled;\\n        swapback.amount = _amount;\\n    }\\n\\n    function setTradingStatus(bool _status) external onlyOwner {\\n        tradingOpen = _status;\\n    }\\n\\n    // SET DISTRIBUTOR SETTINGS\\n\\n    function deployNewDistributor(IDEXRouter _router, address _dividendToken) external onlyOwner {\\n        distributor = new DividendDistributor(_router, _dividendToken, WETH);\\n    }\\n\\n    function setDistributionCriteria(\\n        uint256 _minPeriod,\\n        uint256 _minDistribution,\\n        uint256 _shareThreshold\\n    ) external onlyOwner {\\n        distributor.setDistributionCriteria(_minPeriod, _minDistribution, _shareThreshold);\\n    }\\n\\n    function setDistributorGas(uint256 gas) external onlyOwner {\\n        require(gas <= 750000, 'Max 750000 gas allowed');\\n        distributor.setMaxGas(gas);\\n    }\\n\\n    function setDistributorRouter(IDEXRouter _router) external onlyOwner {\\n        distributor.setRouter(_router);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USD\",\"type\":\"address\"},{\"internalType\":\"contract ITokenConverter\",\"name\":\"_tokenConverter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dividendToken\",\"type\":\"address\"},{\"internalType\":\"contract IDEXRouter\",\"name\":\"_dividendDistributorRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTKN\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"code\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"DistributorFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"code\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"DistributorFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOKEN_CONVERTER\",\"outputs\":[{\"internalType\":\"contract ITokenConverter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLimitEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLimitUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dividendToken\",\"type\":\"address\"}],\"name\":\"deployNewDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract DividendDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBuyLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRouter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWalletLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"adr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAuthorizationMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setBuyLimitSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shareThreshold\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setDistributorGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setDistributorRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"holders\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setFullExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"holders\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsBuyLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"holders\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"holders\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_isPair\",\"type\":\"bool\"}],\"name\":\"setIsPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_isRouter\",\"type\":\"bool\"}],\"name\":\"setIsRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"holders\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsWalletLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setTradingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setWalletLimitSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HyperSonic", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000e2bf8ef5e2b24441d5b2649a3dc6d81afc1a951700000000000000000000000089d453108bd94b497bbb4496729cd26f92aba53300000000000000000000000005ff2b0db69458a0750badebc4f9e13add608c7f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}