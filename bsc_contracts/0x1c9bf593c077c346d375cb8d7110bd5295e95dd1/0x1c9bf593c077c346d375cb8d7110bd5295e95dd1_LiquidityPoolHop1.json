{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/components/SafeOwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract SafeOwnableUpgradeable is OwnableUpgradeable {\\n    address internal _pendingOwner;\\n\\n    event PrepareToTransferOwnership(address indexed pendingOwner);\\n\\n    function __SafeOwnable_init() internal onlyInitializing {\\n        __Ownable_init();\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        require(newOwner != address(0), \\\"O=0\\\"); // Owner Is Zero\\n        require(newOwner != owner(), \\\"O=O\\\"); // Owner is the same as the old Owner\\n        _pendingOwner = newOwner;\\n        emit PrepareToTransferOwnership(_pendingOwner);\\n    }\\n\\n    function takeOwnership() public virtual {\\n        require(_msgSender() == _pendingOwner, \\\"SND\\\"); // SeNDer is not authorized\\n        _transferOwnership(_pendingOwner);\\n        _pendingOwner = address(0);\\n    }\\n\\n    function renounceOwnership() public virtual override onlyOwner {\\n        _pendingOwner = address(0);\\n        _transferOwnership(address(0));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/Account.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\n\\nimport \\\"../libraries/LibSubAccount.sol\\\";\\nimport \\\"../libraries/LibMath.sol\\\";\\nimport \\\"../libraries/LibAsset.sol\\\";\\nimport \\\"../libraries/LibReferenceOracle.sol\\\";\\nimport \\\"./Storage.sol\\\";\\n\\ncontract Account is Storage {\\n    using LibMath for uint256;\\n    using LibSubAccount for bytes32;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using SafeMathUpgradeable for uint256;\\n    using LibAsset for Asset;\\n\\n    event DepositCollateral(\\n        bytes32 indexed subAccountId,\\n        address indexed trader,\\n        uint8 collateralId,\\n        uint256 rawAmount,\\n        uint96 wadAmount\\n    );\\n    event WithdrawCollateral(\\n        bytes32 indexed subAccountId,\\n        address indexed trader,\\n        uint8 collateralId,\\n        uint256 rawAmount,\\n        uint96 wadAmount\\n    );\\n\\n    function depositCollateral(\\n        bytes32 subAccountId,\\n        uint256 rawAmount // NOTE: OrderBook SHOULD transfer rawAmount collateral to LiquidityPool\\n    ) external onlyOrderBook {\\n        LibSubAccount.DecodedSubAccountId memory decoded = subAccountId.decodeSubAccountId();\\n        require(decoded.account != address(0), \\\"T=0\\\"); // Trader address is zero\\n        require(_hasAsset(decoded.collateralId), \\\"LST\\\"); // the asset is not LiSTed\\n        require(_hasAsset(decoded.assetId), \\\"LST\\\"); // the asset is not LiSTed\\n        require(rawAmount != 0, \\\"A=0\\\"); // Amount Is Zero\\n\\n        SubAccount storage subAccount = _storage.accounts[subAccountId];\\n        Asset storage asset = _storage.assets[decoded.assetId];\\n        Asset storage collateral = _storage.assets[decoded.collateralId];\\n        require(asset.isEnabled(), \\\"ENA\\\"); // the token is temporarily not ENAbled\\n        require(collateral.isEnabled(), \\\"ENA\\\"); // the token is temporarily not ENAbled\\n        uint96 wadAmount = collateral.toWad(rawAmount);\\n        subAccount.collateral += wadAmount;\\n\\n        emit DepositCollateral(subAccountId, decoded.account, decoded.collateralId, rawAmount, wadAmount);\\n        _updateSequence();\\n    }\\n\\n    function withdrawCollateral(\\n        bytes32 subAccountId,\\n        uint256 rawAmount,\\n        uint96 collateralPrice,\\n        uint96 assetPrice\\n    ) external onlyOrderBook {\\n        require(rawAmount != 0, \\\"A=0\\\"); // Amount Is Zero\\n        LibSubAccount.DecodedSubAccountId memory decoded = subAccountId.decodeSubAccountId();\\n        require(decoded.account != address(0), \\\"T=0\\\"); // Trader address is zero\\n        require(_hasAsset(decoded.collateralId), \\\"LST\\\"); // the asset is not LiSTed\\n        require(_hasAsset(decoded.assetId), \\\"LST\\\"); // the asset is not LiSTed\\n\\n        Asset storage asset = _storage.assets[decoded.assetId];\\n        Asset storage collateral = _storage.assets[decoded.collateralId];\\n        require(asset.isEnabled(), \\\"ENA\\\"); // the token is temporarily not ENAbled\\n        require(collateral.isEnabled(), \\\"ENA\\\"); // the token is temporarily not ENAbled\\n        SubAccount storage subAccount = _storage.accounts[subAccountId];\\n        assetPrice = LibReferenceOracle.checkPrice(_storage, asset, assetPrice);\\n        collateralPrice = LibReferenceOracle.checkPrice(_storage, collateral, collateralPrice);\\n\\n        // fee & funding\\n        uint96 feeUsd = _getFundingFeeUsd(subAccount, asset, decoded.isLong, assetPrice);\\n        if (subAccount.size > 0) {\\n            _updateEntryFunding(subAccount, asset, decoded.isLong);\\n        }\\n        {\\n            uint96 feeCollateral = uint256(feeUsd).wdiv(collateralPrice).safeUint96();\\n            require(subAccount.collateral >= feeCollateral, \\\"FEE\\\"); // remaining collateral can not pay FEE\\n            subAccount.collateral -= feeCollateral;\\n            collateral.collectedFee += feeCollateral;\\n            collateral.spotLiquidity += feeCollateral;\\n            emit CollectedFee(decoded.collateralId, feeCollateral);\\n        }\\n        // withdraw\\n        uint96 wadAmount = collateral.toWad(rawAmount);\\n        require(subAccount.collateral >= wadAmount, \\\"C<W\\\"); // Collateral can not pay fee or is less than the amount requested for Withdrawal\\n        subAccount.collateral = subAccount.collateral - wadAmount;\\n        collateral.transferOut(decoded.account, rawAmount, _storage.weth, _storage.nativeUnwrapper);\\n        require(_isAccountImSafe(subAccount, decoded.assetId, decoded.isLong, collateralPrice, assetPrice), \\\"!IM\\\");\\n\\n        emit WithdrawCollateral(subAccountId, decoded.account, decoded.collateralId, rawAmount, wadAmount);\\n        _updateSequence();\\n    }\\n\\n    function withdrawAllCollateral(bytes32 subAccountId) external onlyOrderBook {\\n        LibSubAccount.DecodedSubAccountId memory decoded = subAccountId.decodeSubAccountId();\\n        SubAccount storage subAccount = _storage.accounts[subAccountId];\\n        require(subAccount.size == 0, \\\"S>0\\\"); // position Size should be Zero\\n        require(subAccount.collateral > 0, \\\"C=0\\\"); // Collateral Is Zero\\n\\n        Asset storage asset = _storage.assets[decoded.assetId];\\n        Asset storage collateral = _storage.assets[decoded.collateralId];\\n        require(asset.isEnabled(), \\\"ENA\\\"); // the token is temporarily not ENAbled\\n        require(collateral.isEnabled(), \\\"ENA\\\"); // the token is temporarily not ENAbled\\n        uint96 wadAmount = subAccount.collateral;\\n        uint256 rawAmount = collateral.toRaw(wadAmount);\\n        subAccount.collateral = 0;\\n        collateral.transferOut(decoded.account, rawAmount, _storage.weth, _storage.nativeUnwrapper);\\n        emit WithdrawCollateral(subAccountId, decoded.account, decoded.collateralId, rawAmount, wadAmount);\\n        _updateSequence();\\n    }\\n\\n    function _positionPnlUsd(\\n        Asset storage asset,\\n        SubAccount storage subAccount,\\n        bool isLong,\\n        uint96 amount,\\n        uint96 assetPrice\\n    ) internal view returns (bool hasProfit, uint96 pnlUsd) {\\n        if (amount == 0) {\\n            return (false, 0);\\n        }\\n        require(assetPrice > 0, \\\"P=0\\\"); // Price Is Zero\\n        hasProfit = isLong ? assetPrice > subAccount.entryPrice : assetPrice < subAccount.entryPrice;\\n        uint96 priceDelta = assetPrice >= subAccount.entryPrice\\n            ? assetPrice - subAccount.entryPrice\\n            : subAccount.entryPrice - assetPrice;\\n        if (\\n            hasProfit &&\\n            _blockTimestamp() < subAccount.lastIncreasedTime + asset.minProfitTime &&\\n            priceDelta < uint256(subAccount.entryPrice).rmul(asset.minProfitRate).safeUint96()\\n        ) {\\n            hasProfit = false;\\n            return (false, 0);\\n        }\\n        pnlUsd = uint256(priceDelta).wmul(amount).safeUint96();\\n    }\\n\\n    // NOTE: settle funding by modify subAccount.collateral before this function\\n    function _isAccountImSafe(\\n        SubAccount storage subAccount,\\n        uint32 assetId,\\n        bool isLong,\\n        uint96 collateralPrice,\\n        uint96 assetPrice\\n    ) internal view returns (bool) {\\n        Asset storage asset = _storage.assets[assetId];\\n        (bool hasProfit, uint96 pnlUsd) = _positionPnlUsd(asset, subAccount, isLong, subAccount.size, assetPrice);\\n        return _isAccountSafe(subAccount, collateralPrice, assetPrice, asset.initialMarginRate, hasProfit, pnlUsd, 0);\\n    }\\n\\n    // NOTE: settle funding by modify subAccount.collateral before this function\\n    function _isAccountMmSafe(\\n        SubAccount storage subAccount,\\n        uint32 assetId,\\n        bool isLong,\\n        uint96 collateralPrice,\\n        uint96 assetPrice\\n    ) internal view returns (bool) {\\n        Asset storage asset = _storage.assets[assetId];\\n        (bool hasProfit, uint96 pnlUsd) = _positionPnlUsd(asset, subAccount, isLong, subAccount.size, assetPrice);\\n        return\\n            _isAccountSafe(subAccount, collateralPrice, assetPrice, asset.maintenanceMarginRate, hasProfit, pnlUsd, 0);\\n    }\\n\\n    function _isAccountSafe(\\n        SubAccount storage subAccount,\\n        uint96 collateralPrice,\\n        uint96 assetPrice,\\n        uint32 marginRate,\\n        bool hasProfit,\\n        uint96 pnlUsd,\\n        uint96 fundingFee // fundingFee = 0 if subAccount.collateral was modified\\n    ) internal view returns (bool) {\\n        uint256 thresholdUsd = (uint256(subAccount.size) * uint256(assetPrice) * uint256(marginRate)) / 1e18 / 1e5;\\n        thresholdUsd += fundingFee;\\n        uint256 collateralUsd = uint256(subAccount.collateral).wmul(collateralPrice);\\n        // break down \\\"collateralUsd +/- pnlUsd >= thresholdUsd >= 0\\\"\\n        if (hasProfit) {\\n            return collateralUsd + pnlUsd >= thresholdUsd;\\n        } else {\\n            return collateralUsd >= thresholdUsd + pnlUsd;\\n        }\\n    }\\n\\n    function _getFeeUsd(\\n        SubAccount storage subAccount,\\n        Asset storage asset,\\n        bool isLong,\\n        uint96 amount,\\n        uint96 assetPrice\\n    ) internal view returns (uint96) {\\n        return _getFundingFeeUsd(subAccount, asset, isLong, assetPrice) + _getPositionFeeUsd(asset, amount, assetPrice);\\n    }\\n\\n    function _getFundingFeeUsd(\\n        SubAccount storage subAccount,\\n        Asset storage asset,\\n        bool isLong,\\n        uint96 assetPrice\\n    ) internal view returns (uint96) {\\n        if (subAccount.size == 0) {\\n            return 0;\\n        }\\n        uint256 cumulativeFunding;\\n        if (isLong) {\\n            cumulativeFunding = asset.longCumulativeFundingRate - subAccount.entryFunding;\\n            cumulativeFunding = cumulativeFunding.wmul(assetPrice);\\n        } else {\\n            cumulativeFunding = asset.shortCumulativeFunding - subAccount.entryFunding;\\n        }\\n        return cumulativeFunding.wmul(subAccount.size).safeUint96();\\n    }\\n\\n    function _getPositionFeeUsd(Asset storage asset, uint96 amount, uint96 assetPrice) internal view returns (uint96) {\\n        uint256 feeUsd = ((uint256(assetPrice) * uint256(asset.positionFeeRate)) * uint256(amount)) / 1e5 / 1e18;\\n        return feeUsd.safeUint96();\\n    }\\n\\n    function _getLiquidationFeeUsd(\\n        Asset storage asset,\\n        uint96 amount,\\n        uint96 assetPrice\\n    ) internal view returns (uint96) {\\n        uint256 feeUsd = ((uint256(assetPrice) * uint256(asset.liquidationFeeRate)) * uint256(amount)) / 1e5 / 1e18;\\n        return feeUsd.safeUint96();\\n    }\\n\\n    // note: you can skip this function if newPositionSize > 0\\n    function _updateEntryFunding(SubAccount storage subAccount, Asset storage asset, bool isLong) internal {\\n        if (isLong) {\\n            subAccount.entryFunding = asset.longCumulativeFundingRate;\\n        } else {\\n            subAccount.entryFunding = asset.shortCumulativeFunding;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/Admin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IVotesUpgradeable.sol\\\";\\n\\nimport \\\"./Storage.sol\\\";\\nimport \\\"../libraries/LibAsset.sol\\\";\\nimport \\\"../libraries/LibMath.sol\\\";\\nimport \\\"../libraries/LibReferenceOracle.sol\\\";\\nimport \\\"../core/Types.sol\\\";\\n\\ncontract Admin is Storage {\\n    using LibAsset for Asset;\\n    using LibMath for uint256;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    address constant ARBITRUM_TOKEN = 0x912CE59144191C1204E64559FE8253a0e49E6548;\\n\\n    function setMaintainer(address newMaintainer) external onlyOwner {\\n        require(_storage.maintainer != newMaintainer, \\\"CHG\\\"); // not CHanGed\\n        _storage.maintainer = newMaintainer;\\n        emit SetMaintainer(newMaintainer);\\n    }\\n\\n    function setLiquidityManager(address newLiquidityManager, bool isAdd) external onlyOwner {\\n        _storage.liquidityManager[newLiquidityManager] = isAdd;\\n        emit SetLiquidityManager(newLiquidityManager, isAdd);\\n    }\\n\\n    function delegateVoting(address to) external onlyMaintainer {\\n        IVotesUpgradeable(ARBITRUM_TOKEN).delegate(to);\\n    }\\n\\n    function addAsset(\\n        uint8 assetId,\\n        bytes32 symbol,\\n        uint8 decimals,\\n        bool isStable,\\n        address tokenAddress,\\n        address muxTokenAddress\\n    ) external onlyOwner {\\n        require(decimals <= 18, \\\"DCM\\\"); // invalid DeCiMals\\n        require(assetId == _storage.assets.length, \\\"AID\\\"); // invalid AssetID\\n        require(assetId < 0xFF, \\\"FLL\\\"); // assets list is FuLL\\n        require(symbol != \\\"\\\", \\\"SYM\\\"); // invalid SYMbol\\n\\n        _storage.assets.push();\\n        Asset storage asset = _storage.assets[assetId];\\n        asset.symbol = symbol;\\n        asset.id = assetId;\\n        asset.decimals = decimals;\\n        asset.flags = (asset.flags & (~ASSET_IS_STABLE)) | (isStable ? ASSET_IS_STABLE : 0);\\n        asset.tokenAddress = tokenAddress;\\n        asset.muxTokenAddress = muxTokenAddress;\\n        emit AddAsset(assetId, symbol, decimals, isStable, tokenAddress, muxTokenAddress);\\n        _updateSequence();\\n    }\\n\\n    function setAssetParams(\\n        uint8 assetId,\\n        bytes32 symbol,\\n        uint32 newInitialMarginRate, // 1e5\\n        uint32 newMaintenanceMarginRate, // 1e5\\n        uint32 newPositionFeeRate, // 1e5\\n        uint32 newLiquidationFeeRate, // 1e5\\n        uint32 newMinProfitRate, // 1e5\\n        uint32 newMinProfitTime, // 1e0\\n        uint32 newSpotWeight\\n    ) external onlyOwner {\\n        require(_hasAsset(assetId), \\\"LST\\\"); // the asset is not LiSTed\\n        require(symbol != \\\"\\\", \\\"SYM\\\"); // invalid SYMbol\\n        Asset storage asset = _storage.assets[assetId];\\n        asset.symbol = symbol;\\n        asset.initialMarginRate = newInitialMarginRate;\\n        asset.maintenanceMarginRate = newMaintenanceMarginRate;\\n        asset.positionFeeRate = newPositionFeeRate;\\n        asset.liquidationFeeRate = newLiquidationFeeRate;\\n        asset.minProfitRate = newMinProfitRate;\\n        asset.minProfitTime = newMinProfitTime;\\n        asset.spotWeight = newSpotWeight;\\n        emit SetAssetParams(\\n            assetId,\\n            symbol,\\n            newInitialMarginRate,\\n            newMaintenanceMarginRate,\\n            newPositionFeeRate,\\n            newLiquidationFeeRate,\\n            newMinProfitRate,\\n            newMinProfitTime,\\n            newSpotWeight\\n        );\\n        _updateSequence();\\n    }\\n\\n    function setAssetFlags(\\n        uint8 assetId,\\n        bool isTradable,\\n        bool isOpenable,\\n        bool isShortable,\\n        bool useStableTokenForProfit,\\n        bool isEnabled,\\n        bool isStrictStable,\\n        bool canAddRemoveLiquidity,\\n        uint32 newHalfSpread,\\n        uint96 newMaxLongPositionSize,\\n        uint96 newMaxShortPositionSize\\n    ) external onlyMaintainer {\\n        require(_hasAsset(assetId), \\\"LST\\\"); // the asset is not LiSTed\\n        Asset storage asset = _storage.assets[assetId];\\n        if (!asset.isStable()) {\\n            require(!isStrictStable, \\\"STB\\\"); // the asset is impossible to be a strict STaBle coin\\n        }\\n        uint56 newFlags = asset.flags;\\n        newFlags = (newFlags & (~ASSET_IS_TRADABLE)) | (isTradable ? ASSET_IS_TRADABLE : 0);\\n        newFlags = (newFlags & (~ASSET_IS_OPENABLE)) | (isOpenable ? ASSET_IS_OPENABLE : 0);\\n        newFlags = (newFlags & (~ASSET_IS_SHORTABLE)) | (isShortable ? ASSET_IS_SHORTABLE : 0);\\n        newFlags =\\n            (newFlags & (~ASSET_USE_STABLE_TOKEN_FOR_PROFIT)) |\\n            (useStableTokenForProfit ? ASSET_USE_STABLE_TOKEN_FOR_PROFIT : 0);\\n        newFlags = (newFlags & (~ASSET_IS_ENABLED)) | (isEnabled ? ASSET_IS_ENABLED : 0);\\n        newFlags = (newFlags & (~ASSET_IS_STRICT_STABLE)) | (isStrictStable ? ASSET_IS_STRICT_STABLE : 0);\\n        newFlags =\\n            (newFlags & (~ASSET_CAN_ADD_REMOVE_LIQUIDITY)) |\\n            (canAddRemoveLiquidity ? ASSET_CAN_ADD_REMOVE_LIQUIDITY : 0);\\n        asset.flags = newFlags;\\n        asset.halfSpread = newHalfSpread;\\n        asset.maxLongPositionSize = newMaxLongPositionSize;\\n        asset.maxShortPositionSize = newMaxShortPositionSize;\\n        emit SetAssetFlags(assetId, newFlags, newHalfSpread, newMaxLongPositionSize, newMaxShortPositionSize);\\n        _updateSequence();\\n    }\\n\\n    function setFundingParams(uint8 assetId, uint32 newBaseRate8H, uint32 newLimitRate8H) external onlyOwner {\\n        require(_hasAsset(assetId), \\\"LST\\\"); // the asset is not LiSTed\\n        if (_storage.assets[assetId].isStable()) {\\n            _storage.shortFundingBaseRate8H = newBaseRate8H;\\n            _storage.shortFundingLimitRate8H = newLimitRate8H;\\n        } else {\\n            Asset storage asset = _storage.assets[assetId];\\n            asset.longFundingBaseRate8H = newBaseRate8H;\\n            asset.longFundingLimitRate8H = newLimitRate8H;\\n        }\\n        emit SetFundingParams(assetId, newBaseRate8H, newLimitRate8H);\\n        _updateSequence();\\n    }\\n\\n    function setReferenceOracle(\\n        uint8 assetId,\\n        ReferenceOracleType referenceOracleType,\\n        address referenceOracle,\\n        uint32 referenceDeviation // 1e5\\n    ) external onlyOwner {\\n        LibReferenceOracle.checkParameters(referenceOracleType, referenceOracle, referenceDeviation);\\n        require(_hasAsset(assetId), \\\"LST\\\"); // the asset is not LiSTed\\n        Asset storage asset = _storage.assets[assetId];\\n        asset.referenceOracleType = uint8(referenceOracleType);\\n        asset.referenceOracle = referenceOracle;\\n        asset.referenceDeviation = referenceDeviation;\\n        emit SetReferenceOracle(assetId, uint8(referenceOracleType), referenceOracle, referenceDeviation);\\n        _updateSequence();\\n    }\\n\\n    function setEmergencyNumbers(uint96 newMlpPriceLowerBound, uint96 newMlpPriceUpperBound) external onlyMaintainer {\\n        if (\\n            _storage.mlpPriceLowerBound != newMlpPriceLowerBound || _storage.mlpPriceUpperBound != newMlpPriceUpperBound\\n        ) {\\n            _storage.mlpPriceLowerBound = newMlpPriceLowerBound;\\n            _storage.mlpPriceUpperBound = newMlpPriceUpperBound;\\n            emit SetMlpPriceRange(newMlpPriceLowerBound, newMlpPriceUpperBound);\\n        }\\n        _updateSequence();\\n    }\\n\\n    function setNumbers(\\n        uint32 newFundingInterval,\\n        uint32 newLiquidityBaseFeeRate, // 1e5\\n        uint32 newLiquidityDynamicFeeRate, // 1e5\\n        uint32 newStrictStableDeviation, // 1e5\\n        uint96 newBrokerGasRebate\\n    ) external onlyOwner {\\n        require(newLiquidityBaseFeeRate < 1e5, \\\"F>1\\\"); // %fee > 100%\\n        require(newLiquidityDynamicFeeRate < 1e5, \\\"F>1\\\"); // %fee > 100%\\n        require(newStrictStableDeviation < 1e5, \\\"D>1\\\"); // %deviation > 100%\\n        if (_storage.fundingInterval != newFundingInterval) {\\n            emit SetFundingInterval(_storage.fundingInterval, newFundingInterval);\\n            _storage.fundingInterval = newFundingInterval;\\n        }\\n        if (\\n            _storage.liquidityBaseFeeRate != newLiquidityBaseFeeRate ||\\n            _storage.liquidityDynamicFeeRate != newLiquidityDynamicFeeRate\\n        ) {\\n            _storage.liquidityBaseFeeRate = newLiquidityBaseFeeRate;\\n            _storage.liquidityDynamicFeeRate = newLiquidityDynamicFeeRate;\\n            emit SetLiquidityFee(newLiquidityBaseFeeRate, newLiquidityDynamicFeeRate);\\n        }\\n        if (_storage.strictStableDeviation != newStrictStableDeviation) {\\n            _storage.strictStableDeviation = newStrictStableDeviation;\\n            emit SetStrictStableDeviation(newStrictStableDeviation);\\n        }\\n        if (_storage.brokerGasRebate != newBrokerGasRebate) {\\n            _storage.brokerGasRebate = newBrokerGasRebate;\\n            emit SetBrokerGasRebate(newBrokerGasRebate);\\n        }\\n        _updateSequence();\\n    }\\n\\n    function transferLiquidityOut(uint8[] memory assetIds, uint256[] memory rawAmounts) external onlyLiquidityManager {\\n        uint256 length = assetIds.length;\\n        require(length > 0, \\\"MTY\\\"); // argument array is eMpTY\\n        require(assetIds.length == rawAmounts.length, \\\"LEN\\\"); // LENgth of 2 arguments does not match\\n        for (uint256 i = 0; i < length; i++) {\\n            Asset storage asset = _storage.assets[assetIds[i]];\\n            IERC20Upgradeable(asset.tokenAddress).safeTransfer(msg.sender, rawAmounts[i]);\\n            uint96 wadAmount = asset.toWad(rawAmounts[i]);\\n            require(asset.spotLiquidity >= wadAmount, \\\"NLT\\\"); // not enough liquidity\\n            asset.spotLiquidity -= wadAmount;\\n            emit TransferLiquidity(address(this), msg.sender, assetIds[i], rawAmounts[i]);\\n        }\\n        _updateSequence();\\n    }\\n\\n    // NOTE: LiquidityManager SHOULD transfer rawAmount collateral to LiquidityPool\\n    function transferLiquidityIn(uint8[] memory assetIds, uint256[] memory rawAmounts) external onlyLiquidityManager {\\n        uint256 length = assetIds.length;\\n        require(length > 0, \\\"MTY\\\"); // argument array is eMpTY\\n        require(assetIds.length == rawAmounts.length, \\\"LEN\\\"); // LENgth of 2 arguments does not match\\n        for (uint256 i = 0; i < length; i++) {\\n            Asset storage asset = _storage.assets[assetIds[i]];\\n            asset.spotLiquidity += asset.toWad(rawAmounts[i]);\\n            emit TransferLiquidity(msg.sender, address(this), assetIds[i], rawAmounts[i]);\\n        }\\n        _updateSequence();\\n    }\\n\\n    function borrowAsset(\\n        address borrower,\\n        uint8 assetId,\\n        uint256 rawBorrowAmount, // token.decimals\\n        uint256 rawFee // token.decimals\\n    ) external onlyLiquidityManager returns (uint256) {\\n        Asset storage collateral = _storage.assets[assetId];\\n        uint96 wadBorrowed = collateral.toWad(rawBorrowAmount);\\n        uint96 wadFee = collateral.toWad(rawFee);\\n        uint256 rawTransferOut = rawBorrowAmount - rawFee;\\n        uint96 wadTransferOut = wadBorrowed - wadFee;\\n        require(collateral.spotLiquidity >= wadTransferOut, \\\"LIQ\\\"); // insufficient LIQuidity\\n        collateral.collectedFee += wadFee;\\n        collateral.spotLiquidity -= wadTransferOut;\\n        collateral.credit += wadBorrowed;\\n        emit CollectedFee(assetId, wadFee);\\n        IERC20Upgradeable(collateral.tokenAddress).safeTransfer(borrower, rawTransferOut);\\n        emit BorrowAsset(assetId, msg.sender, borrower, rawBorrowAmount, rawFee);\\n        return rawTransferOut;\\n    }\\n\\n    // NOTE: LiquidityManager SHOULD transfer rawRepayAmount + rawFee collateral to LiquidityPool\\n    function repayAsset(\\n        address repayer,\\n        uint8 assetId,\\n        uint256 rawRepayAmount, // token.decimals\\n        uint256 rawFee, // token.decimals\\n        uint256 rawBadDebt // debt amount that cannot be recovered\\n    ) external onlyLiquidityManager {\\n        Asset storage collateral = _storage.assets[assetId];\\n        uint96 wadRepay = collateral.toWad(rawRepayAmount);\\n        uint96 wadFee = collateral.toWad(rawFee);\\n        uint96 wadBadDebt = collateral.toWad(rawBadDebt);\\n        uint96 wadTransferIn = wadRepay + wadFee;\\n        collateral.collectedFee += wadFee;\\n        collateral.spotLiquidity += wadTransferIn;\\n        collateral.credit -= wadRepay + wadBadDebt;\\n        emit CollectedFee(assetId, wadFee);\\n        emit RepayAsset(assetId, msg.sender, repayer, rawRepayAmount, rawFee, rawBadDebt);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/Events.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\ncontract Events {\\n    event UpdateSequence(uint32 sequence);\\n\\n    //////////////////////////////////////////////////////////////////////////////////////\\n    //                                   trade\\n    struct OpenPositionArgs {\\n        bytes32 subAccountId;\\n        uint8 collateralId;\\n        bool isLong;\\n        uint96 amount;\\n        uint96 assetPrice;\\n        uint96 collateralPrice;\\n        uint96 newEntryPrice;\\n        uint96 feeUsd;\\n        uint96 remainPosition;\\n        uint96 remainCollateral;\\n    }\\n    event OpenPosition(address indexed trader, uint8 indexed assetId, OpenPositionArgs args);\\n    struct ClosePositionArgs {\\n        bytes32 subAccountId;\\n        uint8 collateralId;\\n        uint8 profitAssetId;\\n        bool isLong;\\n        uint96 amount;\\n        uint96 assetPrice;\\n        uint96 collateralPrice;\\n        uint96 profitAssetPrice;\\n        uint96 feeUsd;\\n        bool hasProfit;\\n        uint96 pnlUsd;\\n        uint96 remainPosition;\\n        uint96 remainCollateral;\\n    }\\n    event ClosePosition(address indexed trader, uint8 indexed assetId, ClosePositionArgs args);\\n    struct LiquidateArgs {\\n        bytes32 subAccountId;\\n        uint8 collateralId;\\n        uint8 profitAssetId;\\n        bool isLong;\\n        uint96 amount;\\n        uint96 assetPrice;\\n        uint96 collateralPrice;\\n        uint96 profitAssetPrice;\\n        uint96 feeUsd;\\n        bool hasProfit;\\n        uint96 pnlUsd;\\n        uint96 remainCollateral;\\n    }\\n    event Liquidate(address indexed trader, uint8 indexed assetId, LiquidateArgs args);\\n    struct WithdrawProfitArgs {\\n        bytes32 subAccountId;\\n        uint8 collateralId;\\n        uint8 profitAssetId;\\n        bool isLong;\\n        uint256 withdrawRawAmount;\\n        uint96 assetPrice;\\n        uint96 collateralPrice;\\n        uint96 profitAssetPrice;\\n        uint96 entryPrice;\\n        uint96 feeUsd;\\n    }\\n    event WithdrawProfit(address indexed trader, uint8 indexed assetId, WithdrawProfitArgs args);\\n    event CollectedFee(uint8 tokenId, uint96 fee);\\n    event ClaimBrokerGasRebate(address indexed receiver, uint32 transactions, uint256 rawAmount);\\n\\n    //////////////////////////////////////////////////////////////////////////////////////\\n    //                                   liquidity\\n    event AddLiquidity(\\n        address indexed trader,\\n        uint8 indexed tokenId,\\n        uint96 tokenPrice,\\n        uint96 mlpPrice,\\n        uint96 mlpAmount,\\n        uint96 fee\\n    );\\n    event RemoveLiquidity(\\n        address indexed trader,\\n        uint8 indexed tokenId,\\n        uint96 tokenPrice,\\n        uint96 mlpPrice,\\n        uint96 mlpAmount,\\n        uint96 fee\\n    );\\n    event UpdateFundingRate(\\n        uint8 indexed tokenId,\\n        uint32 longFundingRate, // 1e5\\n        uint128 longCumulativeFundingRate, // \u03a3_t fundingRate_t\\n        uint32 shortFundingRate, // 1e5\\n        uint128 shortCumulativeFunding // \u03a3_t fundingRate_t * indexPrice_t\\n    );\\n    event IssueMuxToken(\\n        uint8 indexed tokenId, // if isStable, tokenId will always be 0\\n        bool isStable,\\n        uint96 muxTokenAmount\\n    );\\n    event RedeemMuxToken(address trader, uint8 tokenId, uint96 muxTokenAmount);\\n    event Rebalance(\\n        address indexed rebalancer,\\n        uint8 tokenId0,\\n        uint8 tokenId1,\\n        uint96 price0,\\n        uint96 price1,\\n        uint96 rawAmount0,\\n        uint96 rawAmount1\\n    );\\n\\n    //////////////////////////////////////////////////////////////////////////////////////\\n    //                                   admin\\n    event AddAsset(\\n        uint8 indexed id,\\n        bytes32 symbol,\\n        uint8 decimals,\\n        bool isStable,\\n        address tokenAddress,\\n        address muxTokenAddress\\n    );\\n    event SetAssetParams(\\n        uint8 indexed assetId,\\n        bytes32 symbol,\\n        uint32 newInitialMarginRate,\\n        uint32 newMaintenanceMarginRate,\\n        uint32 newPositionFeeRate,\\n        uint32 newLiquidationFeeRate,\\n        uint32 newMinProfitRate,\\n        uint32 newMinProfitTime,\\n        uint32 newSpotWeight\\n    );\\n    event SetAssetFlags(\\n        uint8 indexed assetId,\\n        uint56 newFlags,\\n        uint32 newHalfSpread,\\n        uint96 newMaxLongPositionSize,\\n        uint96 newMaxShortPositionSize\\n    );\\n    event SetReferenceOracle(\\n        uint8 indexed assetId,\\n        uint8 referenceOracleType,\\n        address referenceOracle,\\n        uint32 referenceDeviation\\n    );\\n    event SetFundingParams(uint8 indexed assetId, uint32 newBaseRate8H, uint32 newLimitRate8H);\\n    event SetFundingInterval(uint32 oldFundingInterval, uint32 newFundingInterval);\\n    event SetMlpPriceRange(uint96 newLowerBound, uint96 newUpperBound);\\n    event SetLiquidityFee(uint32 newLiquidityBaseFeeRate, uint32 newLiquidityDynamicFeeRate);\\n    event SetStrictStableDeviation(uint32 newStrictStableDeviation);\\n    event SetBrokerGasRebate(uint96 newBrokerGasRebate);\\n    event SetMaintainer(address indexed newMaintainer);\\n    event SetLiquidityManager(address indexed newLiquidityManager, bool isAdd);\\n    event WithdrawCollectedFee(uint8 indexed assetId, uint96 collectedFee);\\n    event TransferLiquidity(address indexed sender, address indexed recipient, uint8 assetId, uint256 amount);\\n    event BorrowAsset(\\n        uint8 indexed assetId,\\n        address indexed project,\\n        address indexed borrower,\\n        uint256 rawBorrowAmount,\\n        uint256 rawFee\\n    );\\n    event RepayAsset(\\n        uint8 indexed assetId,\\n        address indexed project,\\n        address indexed repayer,\\n        uint256 rawRepayAmount,\\n        uint256 rawFee,\\n        uint256 badDebt\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/core/Getter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/LibSubAccount.sol\\\";\\nimport \\\"./Storage.sol\\\";\\n\\ncontract Getter is Storage {\\n    using LibSubAccount for bytes32;\\n\\n    function getAssetInfo(uint8 assetId) external view returns (Asset memory) {\\n        require(assetId < _storage.assets.length, \\\"LST\\\"); // the asset is not LiSTed\\n        return _storage.assets[assetId];\\n    }\\n\\n    function getAllAssetInfo() external view returns (Asset[] memory) {\\n        return _storage.assets;\\n    }\\n\\n    function getAssetAddress(uint8 assetId) external view returns (address) {\\n        require(assetId < _storage.assets.length, \\\"LST\\\"); // the asset is not LiSTed\\n        return _storage.assets[assetId].tokenAddress;\\n    }\\n\\n    function getLiquidityPoolStorage()\\n        external\\n        view\\n        returns (\\n            // [0] shortFundingBaseRate8H\\n            // [1] shortFundingLimitRate8H\\n            // [2] lastFundingTime\\n            // [3] fundingInterval\\n            // [4] liquidityBaseFeeRate\\n            // [5] liquidityDynamicFeeRate\\n            // [6] sequence. note: will be 0 after 0xffffffff\\n            // [7] strictStableDeviation\\n            uint32[8] memory u32s,\\n            // [0] mlpPriceLowerBound\\n            // [1] mlpPriceUpperBound\\n            uint96[2] memory u96s\\n        )\\n    {\\n        u32s[0] = _storage.shortFundingBaseRate8H;\\n        u32s[1] = _storage.shortFundingLimitRate8H;\\n        u32s[2] = _storage.lastFundingTime;\\n        u32s[3] = _storage.fundingInterval;\\n        u32s[4] = _storage.liquidityBaseFeeRate;\\n        u32s[5] = _storage.liquidityDynamicFeeRate;\\n        u32s[6] = _storage.sequence;\\n        u32s[7] = _storage.strictStableDeviation;\\n        u96s[0] = _storage.mlpPriceLowerBound;\\n        u96s[1] = _storage.mlpPriceUpperBound;\\n    }\\n\\n    function getSubAccount(\\n        bytes32 subAccountId\\n    )\\n        external\\n        view\\n        returns (uint96 collateral, uint96 size, uint32 lastIncreasedTime, uint96 entryPrice, uint128 entryFunding)\\n    {\\n        SubAccount storage subAccount = _storage.accounts[subAccountId];\\n        collateral = subAccount.collateral;\\n        size = subAccount.size;\\n        lastIncreasedTime = subAccount.lastIncreasedTime;\\n        entryPrice = subAccount.entryPrice;\\n        entryFunding = subAccount.entryFunding;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/LiquidityPoolHop1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\nimport \\\"./Storage.sol\\\";\\nimport \\\"./Trade.sol\\\";\\nimport \\\"./Getter.sol\\\";\\nimport \\\"./Admin.sol\\\";\\nimport \\\"../libraries/LibChainedProxy.sol\\\";\\n\\ncontract LiquidityPoolHop1 is Storage, Trade, Getter, Proxy {\\n    event UpgradeChainedProxy(address prevNextHop, address nextHop);\\n\\n    function initialize(\\n        address nextHop,\\n        address mlp,\\n        address orderBook,\\n        address weth,\\n        address nativeUnwrapper,\\n        address vault\\n    ) external initializer {\\n        __SafeOwnable_init();\\n\\n        ChainedProxy.replace(nextHop);\\n        _storage.mlp = mlp;\\n        _storage.orderBook = orderBook;\\n        _storage.weth = weth;\\n        _storage.nativeUnwrapper = nativeUnwrapper;\\n        _storage.vault = vault;\\n        _storage.maintainer = owner();\\n    }\\n\\n    /**\\n     * @dev     Upgrade LiquidityPool.\\n     *\\n     * @param   nextHop Hop2 address.\\n     */\\n    function upgradeChainedProxy(address nextHop) external onlyOwner {\\n        emit UpgradeChainedProxy(_implementation(), nextHop);\\n        ChainedProxy.replace(nextHop);\\n    }\\n\\n    /**\\n     * @dev     Forward unrecognized functions to the next hop.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return ChainedProxy.next();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/Storage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../components/SafeOwnableUpgradeable.sol\\\";\\nimport \\\"../libraries/LibSubAccount.sol\\\";\\nimport \\\"../libraries/LibAsset.sol\\\";\\nimport \\\"./Types.sol\\\";\\nimport \\\"./Events.sol\\\";\\n\\ncontract Storage is Initializable, SafeOwnableUpgradeable, Events {\\n    using LibAsset for Asset;\\n\\n    LiquidityPoolStorage internal _storage;\\n\\n    modifier onlyOrderBook() {\\n        require(_msgSender() == _storage.orderBook, \\\"BOK\\\"); // can only be called by order BOoK\\n        _;\\n    }\\n\\n    modifier onlyLiquidityManager() {\\n        require(_storage.liquidityManager[_msgSender()], \\\"LQM\\\"); // can only be called by LiQuidity Manager\\n        _;\\n    }\\n\\n    modifier onlyMaintainer() {\\n        require(_msgSender() == _storage.maintainer || _msgSender() == owner(), \\\"S!M\\\"); // Sender is Not MaiNTainer\\n        _;\\n    }\\n\\n    function _updateSequence() internal {\\n        unchecked {\\n            _storage.sequence += 1;\\n        }\\n        emit UpdateSequence(_storage.sequence);\\n    }\\n\\n    function _updateBrokerTransactions() internal {\\n        unchecked {\\n            _storage.brokerTransactions += 1;\\n        }\\n    }\\n\\n    function _blockTimestamp() internal view virtual returns (uint32) {\\n        return uint32(block.timestamp);\\n    }\\n\\n    function _hasAsset(uint8 assetId) internal view returns (bool) {\\n        return assetId < _storage.assets.length;\\n    }\\n\\n    function _isStable(uint8 tokenId) internal view returns (bool) {\\n        return _storage.assets[tokenId].isStable();\\n    }\\n\\n    bytes32[50] internal _gap;\\n}\\n\"\r\n    },\r\n    \"contracts/core/Trade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/LibAsset.sol\\\";\\nimport \\\"../libraries/LibSubAccount.sol\\\";\\nimport \\\"../libraries/LibMath.sol\\\";\\nimport \\\"../libraries/LibReferenceOracle.sol\\\";\\nimport \\\"./Account.sol\\\";\\nimport \\\"./Storage.sol\\\";\\n\\ncontract Trade is Storage, Account {\\n    using LibAsset for Asset;\\n    using LibMath for uint256;\\n    using LibSubAccount for bytes32;\\n\\n    /**\\n     * @notice Open a position.\\n     *\\n     * @param  subAccountId     check LibSubAccount.decodeSubAccountId for detail.\\n     * @param  amount           position size. decimals = 18.\\n     * @param  collateralPrice  price of subAccount.collateral. decimals = 18.\\n     * @param  assetPrice       price of subAccount.asset. decimals = 18.\\n     */\\n    function openPosition(\\n        bytes32 subAccountId,\\n        uint96 amount,\\n        uint96 collateralPrice,\\n        uint96 assetPrice\\n    ) external onlyOrderBook returns (uint96) {\\n        LibSubAccount.DecodedSubAccountId memory decoded = subAccountId.decodeSubAccountId();\\n        require(decoded.account != address(0), \\\"T=0\\\"); // Trader address is zero\\n        require(_hasAsset(decoded.collateralId), \\\"LST\\\"); // the asset is not LiSTed\\n        require(_hasAsset(decoded.assetId), \\\"LST\\\"); // the asset is not LiSTed\\n        require(amount != 0, \\\"A=0\\\"); // Amount Is Zero\\n\\n        Asset storage asset = _storage.assets[decoded.assetId];\\n        Asset storage collateral = _storage.assets[decoded.collateralId];\\n        SubAccount storage subAccount = _storage.accounts[subAccountId];\\n        require(asset.isOpenable(), \\\"OPN\\\"); // the asset is not OPeNable\\n        require(!asset.isStable(), \\\"STB\\\"); // can not trade a STaBle coin\\n        require(asset.isTradable(), \\\"TRD\\\"); // the asset is not TRaDable\\n        require(asset.isEnabled(), \\\"ENA\\\"); // the token is temporarily not ENAbled\\n        require(collateral.isEnabled(), \\\"ENA\\\"); // the token is temporarily not ENAbled\\n        require(decoded.isLong || asset.isShortable(), \\\"SHT\\\"); // can not SHorT this asset\\n        assetPrice = LibReferenceOracle.checkPriceWithSpread(\\n            _storage,\\n            asset,\\n            assetPrice,\\n            decoded.isLong ? SpreadType.Ask : SpreadType.Bid\\n        );\\n        collateralPrice = LibReferenceOracle.checkPrice(_storage, collateral, collateralPrice);\\n\\n        // fee & funding\\n        uint96 feeUsd = _getFeeUsd(subAccount, asset, decoded.isLong, amount, assetPrice);\\n        _updateEntryFunding(subAccount, asset, decoded.isLong);\\n        {\\n            uint96 feeCollateral = uint256(feeUsd).wdiv(collateralPrice).safeUint96();\\n            require(subAccount.collateral >= feeCollateral, \\\"FEE\\\"); // collateral can not pay Fee\\n            subAccount.collateral -= feeCollateral;\\n            collateral.collectedFee += feeCollateral;\\n            collateral.spotLiquidity += feeCollateral;\\n            emit CollectedFee(decoded.collateralId, feeCollateral);\\n        }\\n\\n        // position\\n        {\\n            (, uint96 pnlUsd) = _positionPnlUsd(asset, subAccount, decoded.isLong, subAccount.size, assetPrice);\\n            uint96 newSize = subAccount.size + amount;\\n            if (pnlUsd == 0) {\\n                subAccount.entryPrice = assetPrice;\\n            } else {\\n                subAccount.entryPrice = ((uint256(subAccount.entryPrice) *\\n                    uint256(subAccount.size) +\\n                    uint256(assetPrice) *\\n                    uint256(amount)) / newSize).safeUint96();\\n            }\\n            subAccount.size = newSize;\\n        }\\n        subAccount.lastIncreasedTime = _blockTimestamp();\\n        {\\n            OpenPositionArgs memory args = OpenPositionArgs({\\n                subAccountId: subAccountId,\\n                collateralId: decoded.collateralId,\\n                isLong: decoded.isLong,\\n                amount: amount,\\n                assetPrice: assetPrice,\\n                collateralPrice: collateralPrice,\\n                newEntryPrice: subAccount.entryPrice,\\n                feeUsd: feeUsd,\\n                remainPosition: subAccount.size,\\n                remainCollateral: subAccount.collateral\\n            });\\n            emit OpenPosition(decoded.account, decoded.assetId, args);\\n        }\\n        // total\\n        _increaseTotalSize(asset, decoded.isLong, amount, assetPrice);\\n        // post check\\n        require(_isAccountImSafe(subAccount, decoded.assetId, decoded.isLong, collateralPrice, assetPrice), \\\"!IM\\\");\\n        _updateSequence();\\n        _updateBrokerTransactions();\\n        return assetPrice;\\n    }\\n\\n    struct ClosePositionContext {\\n        LibSubAccount.DecodedSubAccountId id;\\n        uint96 totalFeeUsd;\\n        uint96 paidFeeUsd;\\n    }\\n\\n    /**\\n     * @notice Close a position.\\n     *\\n     * @param  subAccountId     check LibSubAccount.decodeSubAccountId for detail.\\n     * @param  amount           position size. decimals = 18.\\n     * @param  profitAssetId    for long position (unless asset.useStable is true), ignore this argument;\\n     *                          for short position, the profit asset should be one of the stable coin.\\n     * @param  collateralPrice  price of subAccount.collateral. decimals = 18.\\n     * @param  assetPrice       price of subAccount.asset. decimals = 18.\\n     * @param  profitAssetPrice price of profitAssetId. ignore this argument if profitAssetId is ignored. decimals = 18.\\n     */\\n    function closePosition(\\n        bytes32 subAccountId,\\n        uint96 amount,\\n        uint8 profitAssetId, // only used when !isLong\\n        uint96 collateralPrice,\\n        uint96 assetPrice,\\n        uint96 profitAssetPrice // only used when !isLong\\n    ) external onlyOrderBook returns (uint96) {\\n        ClosePositionContext memory ctx;\\n        ctx.id = subAccountId.decodeSubAccountId();\\n        require(ctx.id.account != address(0), \\\"T=0\\\"); // Trader address is zero\\n        require(_hasAsset(ctx.id.collateralId), \\\"LST\\\"); // the asset is not LiSTed\\n        require(_hasAsset(ctx.id.assetId), \\\"LST\\\"); // the asset is not LiSTed\\n        require(amount != 0, \\\"A=0\\\"); // Amount Is Zero\\n\\n        Asset storage asset = _storage.assets[ctx.id.assetId];\\n        Asset storage collateral = _storage.assets[ctx.id.collateralId];\\n        SubAccount storage subAccount = _storage.accounts[subAccountId];\\n        require(!asset.isStable(), \\\"STB\\\"); // can not trade a STaBle coin\\n        require(asset.isTradable(), \\\"TRD\\\"); // the asset is not TRaDable\\n        require(asset.isEnabled(), \\\"ENA\\\"); // the token is temporarily not ENAbled\\n        require(collateral.isEnabled(), \\\"ENA\\\"); // the token is temporarily not ENAbled\\n        require(ctx.id.isLong || asset.isShortable(), \\\"SHT\\\"); // can not SHorT this asset\\n        require(amount <= subAccount.size, \\\"A>S\\\"); // close Amount is Larger than position Size\\n        assetPrice = LibReferenceOracle.checkPriceWithSpread(\\n            _storage,\\n            asset,\\n            assetPrice,\\n            ctx.id.isLong ? SpreadType.Bid : SpreadType.Ask\\n        );\\n        collateralPrice = LibReferenceOracle.checkPrice(_storage, collateral, collateralPrice);\\n        if (ctx.id.isLong && !asset.useStableTokenForProfit()) {\\n            profitAssetId = ctx.id.assetId;\\n            profitAssetPrice = assetPrice;\\n        } else {\\n            require(_isStable(profitAssetId), \\\"STB\\\"); // profit asset should be a STaBle coin\\n            profitAssetPrice = LibReferenceOracle.checkPrice(\\n                _storage,\\n                _storage.assets[profitAssetId],\\n                profitAssetPrice\\n            );\\n        }\\n        require(_storage.assets[profitAssetId].isEnabled(), \\\"ENA\\\"); // the token is temporarily not ENAbled\\n\\n        // total\\n        _decreaseTotalSize(asset, ctx.id.isLong, amount, subAccount.entryPrice);\\n        // fee & funding\\n        ctx.totalFeeUsd = _getFeeUsd(subAccount, asset, ctx.id.isLong, amount, assetPrice);\\n        _updateEntryFunding(subAccount, asset, ctx.id.isLong);\\n        // realize pnl\\n        (bool hasProfit, uint96 pnlUsd) = _positionPnlUsd(asset, subAccount, ctx.id.isLong, amount, assetPrice);\\n        if (hasProfit) {\\n            ctx.paidFeeUsd = _realizeProfit(\\n                ctx.id.account,\\n                pnlUsd,\\n                ctx.totalFeeUsd,\\n                _storage.assets[profitAssetId],\\n                profitAssetPrice\\n            );\\n        } else {\\n            _realizeLoss(subAccount, collateral, collateralPrice, pnlUsd, true);\\n        }\\n        subAccount.size -= amount;\\n        if (subAccount.size == 0) {\\n            subAccount.entryPrice = 0;\\n            subAccount.entryFunding = 0;\\n            subAccount.lastIncreasedTime = 0;\\n        }\\n        // ignore fees if can not afford\\n        if (ctx.totalFeeUsd > ctx.paidFeeUsd) {\\n            uint96 feeCollateral = uint256(ctx.totalFeeUsd - ctx.paidFeeUsd).wdiv(collateralPrice).safeUint96();\\n            feeCollateral = LibMath.min(feeCollateral, subAccount.collateral);\\n            subAccount.collateral -= feeCollateral;\\n            collateral.collectedFee += feeCollateral;\\n            collateral.spotLiquidity += feeCollateral;\\n            emit CollectedFee(ctx.id.collateralId, feeCollateral);\\n            ctx.paidFeeUsd += uint256(feeCollateral).wmul(collateralPrice).safeUint96();\\n        }\\n        {\\n            ClosePositionArgs memory args = ClosePositionArgs({\\n                subAccountId: subAccountId,\\n                collateralId: ctx.id.collateralId,\\n                profitAssetId: profitAssetId,\\n                isLong: ctx.id.isLong,\\n                amount: amount,\\n                assetPrice: assetPrice,\\n                collateralPrice: collateralPrice,\\n                profitAssetPrice: profitAssetPrice,\\n                feeUsd: ctx.paidFeeUsd,\\n                hasProfit: hasProfit,\\n                pnlUsd: pnlUsd,\\n                remainPosition: subAccount.size,\\n                remainCollateral: subAccount.collateral\\n            });\\n            emit ClosePosition(ctx.id.account, ctx.id.assetId, args);\\n        }\\n        // post check\\n        require(_isAccountMmSafe(subAccount, ctx.id.assetId, ctx.id.isLong, collateralPrice, assetPrice), \\\"!MM\\\");\\n        _updateSequence();\\n        _updateBrokerTransactions();\\n        return assetPrice;\\n    }\\n\\n    struct LiquidateContext {\\n        LibSubAccount.DecodedSubAccountId id;\\n        uint96 totalFeeUsd;\\n        uint96 paidFeeUsd;\\n        uint96 oldPositionSize;\\n    }\\n\\n    function liquidate(\\n        bytes32 subAccountId,\\n        uint8 profitAssetId, // only used when !isLong\\n        uint96 collateralPrice,\\n        uint96 assetPrice,\\n        uint96 profitAssetPrice // only used when !isLong\\n    ) external onlyOrderBook returns (uint96) {\\n        LiquidateContext memory ctx;\\n        ctx.id = subAccountId.decodeSubAccountId();\\n        require(ctx.id.account != address(0), \\\"T=0\\\"); // Trader address is zero\\n        require(_hasAsset(ctx.id.collateralId), \\\"LST\\\"); // the asset is not LiSTed\\n        require(_hasAsset(ctx.id.assetId), \\\"LST\\\"); // the asset is not LiSTed\\n\\n        Asset storage asset = _storage.assets[ctx.id.assetId];\\n        Asset storage collateral = _storage.assets[ctx.id.collateralId];\\n        SubAccount storage subAccount = _storage.accounts[subAccountId];\\n        require(!asset.isStable(), \\\"STB\\\"); // can not trade a STaBle coin\\n        require(asset.isTradable(), \\\"TRD\\\"); // the asset is not TRaDable\\n        require(asset.isEnabled(), \\\"ENA\\\"); // the token is temporarily not ENAbled\\n        require(collateral.isEnabled(), \\\"ENA\\\"); // the token is temporarily not ENAbled\\n        require(ctx.id.isLong || asset.isShortable(), \\\"SHT\\\"); // can not SHorT this asset\\n        require(subAccount.size > 0, \\\"S=0\\\"); // position Size Is Zero\\n        assetPrice = LibReferenceOracle.checkPriceWithSpread(\\n            _storage,\\n            asset,\\n            assetPrice,\\n            ctx.id.isLong ? SpreadType.Bid : SpreadType.Ask\\n        );\\n        collateralPrice = LibReferenceOracle.checkPrice(_storage, collateral, collateralPrice);\\n        if (ctx.id.isLong && !asset.useStableTokenForProfit()) {\\n            profitAssetId = ctx.id.assetId;\\n            profitAssetPrice = assetPrice;\\n        } else {\\n            require(_isStable(profitAssetId), \\\"STB\\\"); // profit asset should be a STaBle coin\\n            profitAssetPrice = LibReferenceOracle.checkPrice(\\n                _storage,\\n                _storage.assets[profitAssetId],\\n                profitAssetPrice\\n            );\\n        }\\n        require(_storage.assets[profitAssetId].isEnabled(), \\\"ENA\\\"); // the token is temporarily not ENAbled\\n\\n        // total\\n        _decreaseTotalSize(asset, ctx.id.isLong, subAccount.size, subAccount.entryPrice);\\n        // fee & funding\\n        bool hasProfit;\\n        uint96 pnlUsd;\\n        {\\n            uint96 fundingFee = _getFundingFeeUsd(subAccount, asset, ctx.id.isLong, assetPrice);\\n            {\\n                uint96 liquidationFee = _getLiquidationFeeUsd(asset, subAccount.size, assetPrice);\\n                ctx.totalFeeUsd = fundingFee + liquidationFee;\\n            }\\n            // should mm unsafe\\n            (hasProfit, pnlUsd) = _positionPnlUsd(asset, subAccount, ctx.id.isLong, subAccount.size, assetPrice);\\n            require(\\n                !_isAccountSafe(\\n                    subAccount,\\n                    collateralPrice,\\n                    assetPrice,\\n                    asset.maintenanceMarginRate,\\n                    hasProfit,\\n                    pnlUsd,\\n                    fundingFee\\n                ),\\n                \\\"MMS\\\"\\n            ); // Maintenance Margin Safe\\n        }\\n        // realize pnl\\n        ctx.oldPositionSize = subAccount.size;\\n        if (hasProfit) {\\n            // this case is impossible unless MMRate changes\\n            ctx.paidFeeUsd = _realizeProfit(\\n                ctx.id.account,\\n                pnlUsd,\\n                ctx.totalFeeUsd,\\n                _storage.assets[profitAssetId],\\n                profitAssetPrice\\n            );\\n        } else {\\n            pnlUsd = _realizeLoss(subAccount, collateral, collateralPrice, pnlUsd, false);\\n        }\\n        subAccount.size = 0;\\n        subAccount.entryPrice = 0;\\n        subAccount.entryFunding = 0;\\n        subAccount.lastIncreasedTime = 0;\\n        // ignore fees if can not afford\\n        if (ctx.totalFeeUsd > ctx.paidFeeUsd) {\\n            uint96 feeCollateral = uint256(ctx.totalFeeUsd - ctx.paidFeeUsd).wdiv(collateralPrice).safeUint96();\\n            feeCollateral = LibMath.min(feeCollateral, subAccount.collateral);\\n            subAccount.collateral -= feeCollateral;\\n            collateral.collectedFee += feeCollateral;\\n            collateral.spotLiquidity += feeCollateral;\\n            emit CollectedFee(ctx.id.collateralId, feeCollateral);\\n            ctx.paidFeeUsd += uint256(feeCollateral).wmul(collateralPrice).safeUint96();\\n        }\\n        {\\n            LiquidateArgs memory args = LiquidateArgs({\\n                subAccountId: subAccountId,\\n                collateralId: ctx.id.collateralId,\\n                profitAssetId: profitAssetId,\\n                isLong: ctx.id.isLong,\\n                amount: ctx.oldPositionSize,\\n                assetPrice: assetPrice,\\n                collateralPrice: collateralPrice,\\n                profitAssetPrice: profitAssetPrice,\\n                feeUsd: ctx.paidFeeUsd,\\n                hasProfit: hasProfit,\\n                pnlUsd: pnlUsd,\\n                remainCollateral: subAccount.collateral\\n            });\\n            emit Liquidate(ctx.id.account, ctx.id.assetId, args);\\n        }\\n        _updateSequence();\\n        _updateBrokerTransactions();\\n        return assetPrice;\\n    }\\n\\n    struct WithdrawProfitContext {\\n        LibSubAccount.DecodedSubAccountId id;\\n    }\\n\\n    /**\\n     *  long : (exit - entry) size = (exit - entry') size + withdrawUSD\\n     *  short: (entry - exit) size = (entry' - exit) size + withdrawUSD\\n     */\\n    function withdrawProfit(\\n        bytes32 subAccountId,\\n        uint256 rawAmount,\\n        uint8 profitAssetId, // only used when !isLong\\n        uint96 collateralPrice,\\n        uint96 assetPrice,\\n        uint96 profitAssetPrice // only used when !isLong\\n    ) external onlyOrderBook {\\n        require(rawAmount != 0, \\\"A=0\\\"); // Amount Is Zero\\n        WithdrawProfitContext memory ctx;\\n        ctx.id = subAccountId.decodeSubAccountId();\\n        require(ctx.id.account != address(0), \\\"T=0\\\"); // Trader address is zero\\n        require(_hasAsset(ctx.id.collateralId), \\\"LST\\\"); // the asset is not LiSTed\\n        require(_hasAsset(ctx.id.assetId), \\\"LST\\\"); // the asset is not LiSTed\\n\\n        Asset storage asset = _storage.assets[ctx.id.assetId];\\n        Asset storage collateral = _storage.assets[ctx.id.collateralId];\\n        SubAccount storage subAccount = _storage.accounts[subAccountId];\\n        require(!asset.isStable(), \\\"STB\\\"); // can not trade a STaBle coin\\n        require(asset.isTradable(), \\\"TRD\\\"); // the asset is not TRaDable\\n        require(asset.isEnabled(), \\\"ENA\\\"); // the token is temporarily not ENAbled\\n        require(collateral.isEnabled(), \\\"ENA\\\"); // the token is temporarily not ENAbled\\n        require(ctx.id.isLong || asset.isShortable(), \\\"SHT\\\"); // can not SHorT this asset\\n        require(subAccount.size > 0, \\\"S=0\\\"); // position Size Is Zero\\n        assetPrice = LibReferenceOracle.checkPriceWithSpread(\\n            _storage,\\n            asset,\\n            assetPrice,\\n            ctx.id.isLong ? SpreadType.Bid : SpreadType.Ask\\n        );\\n        collateralPrice = LibReferenceOracle.checkPrice(_storage, collateral, collateralPrice);\\n        if (ctx.id.isLong && !asset.useStableTokenForProfit()) {\\n            profitAssetId = ctx.id.assetId;\\n            profitAssetPrice = assetPrice;\\n        } else {\\n            require(_isStable(profitAssetId), \\\"STB\\\"); // profit asset should be a STaBle coin\\n            profitAssetPrice = LibReferenceOracle.checkPrice(\\n                _storage,\\n                _storage.assets[profitAssetId],\\n                profitAssetPrice\\n            );\\n        }\\n        require(_storage.assets[profitAssetId].isEnabled(), \\\"ENA\\\"); // the token is temporarily not ENAbled\\n\\n        // fee & funding\\n        uint96 totalFeeUsd = _getFundingFeeUsd(subAccount, asset, ctx.id.isLong, assetPrice);\\n        _updateEntryFunding(subAccount, asset, ctx.id.isLong);\\n        // withdraw\\n        uint96 deltaUsd = _storage.assets[profitAssetId].toWad(rawAmount);\\n        deltaUsd = uint256(deltaUsd).wmul(profitAssetPrice).safeUint96();\\n        deltaUsd += totalFeeUsd;\\n        // profit\\n        {\\n            (bool hasProfit, uint96 pnlUsd) = _positionPnlUsd(\\n                asset,\\n                subAccount,\\n                ctx.id.isLong,\\n                subAccount.size,\\n                assetPrice\\n            );\\n            require(hasProfit, \\\"U<0\\\"); // profitUsd is negative\\n            require(pnlUsd >= deltaUsd, \\\"U<W\\\"); // profitUsd can not pay fee or is less than the amount requested for Withdrawal\\n        }\\n        _realizeProfit(ctx.id.account, deltaUsd, totalFeeUsd, _storage.assets[profitAssetId], profitAssetPrice);\\n        // new entry price\\n        if (ctx.id.isLong) {\\n            subAccount.entryPrice += uint256(deltaUsd).wdiv(subAccount.size).safeUint96();\\n            asset.averageLongPrice += uint256(deltaUsd).wdiv(asset.totalLongPosition).safeUint96();\\n        } else {\\n            subAccount.entryPrice -= uint256(deltaUsd).wdiv(subAccount.size).safeUint96();\\n            asset.averageShortPrice -= uint256(deltaUsd).wdiv(asset.totalShortPosition).safeUint96();\\n        }\\n        require(_isAccountImSafe(subAccount, ctx.id.assetId, ctx.id.isLong, collateralPrice, assetPrice), \\\"!IM\\\");\\n        {\\n            WithdrawProfitArgs memory args = WithdrawProfitArgs({\\n                subAccountId: subAccountId,\\n                collateralId: ctx.id.collateralId,\\n                profitAssetId: profitAssetId,\\n                isLong: ctx.id.isLong,\\n                withdrawRawAmount: rawAmount,\\n                assetPrice: assetPrice,\\n                collateralPrice: collateralPrice,\\n                profitAssetPrice: profitAssetPrice,\\n                entryPrice: subAccount.entryPrice,\\n                feeUsd: totalFeeUsd\\n            });\\n            emit WithdrawProfit(ctx.id.account, ctx.id.assetId, args);\\n        }\\n        _updateSequence();\\n        _updateBrokerTransactions();\\n    }\\n\\n    function _increaseTotalSize(Asset storage asset, bool isLong, uint96 amount, uint96 price) internal {\\n        if (isLong) {\\n            uint96 newPosition = asset.totalLongPosition + amount;\\n            asset.averageLongPrice = ((uint256(asset.averageLongPrice) *\\n                uint256(asset.totalLongPosition) +\\n                uint256(price) *\\n                uint256(amount)) / uint256(newPosition)).safeUint96();\\n            asset.totalLongPosition = newPosition;\\n        } else {\\n            uint96 newPosition = asset.totalShortPosition + amount;\\n            asset.averageShortPrice = ((uint256(asset.averageShortPrice) *\\n                uint256(asset.totalShortPosition) +\\n                uint256(price) *\\n                uint256(amount)) / uint256(newPosition)).safeUint96();\\n            asset.totalShortPosition = newPosition;\\n        }\\n    }\\n\\n    function _decreaseTotalSize(Asset storage asset, bool isLong, uint96 amount, uint96 oldEntryPrice) internal {\\n        if (isLong) {\\n            uint96 newPosition = asset.totalLongPosition - amount;\\n            if (newPosition == 0) {\\n                asset.averageLongPrice = 0;\\n            } else {\\n                asset.averageLongPrice = ((uint256(asset.averageLongPrice) *\\n                    uint256(asset.totalLongPosition) -\\n                    uint256(oldEntryPrice) *\\n                    uint256(amount)) / uint256(newPosition)).safeUint96();\\n            }\\n            asset.totalLongPosition = newPosition;\\n        } else {\\n            uint96 newPosition = asset.totalShortPosition - amount;\\n            if (newPosition == 0) {\\n                asset.averageShortPrice = 0;\\n            } else {\\n                asset.averageShortPrice = ((uint256(asset.averageShortPrice) *\\n                    uint256(asset.totalShortPosition) -\\n                    uint256(oldEntryPrice) *\\n                    uint256(amount)) / uint256(newPosition)).safeUint96();\\n            }\\n            asset.totalShortPosition = newPosition;\\n        }\\n    }\\n\\n    function _realizeProfit(\\n        address trader,\\n        uint96 pnlUsd,\\n        uint96 feeUsd,\\n        Asset storage profitAsset,\\n        uint96 profitAssetPrice\\n    ) internal returns (uint96 paidFeeUsd) {\\n        paidFeeUsd = LibMath.min(feeUsd, pnlUsd);\\n        // pnl\\n        pnlUsd -= paidFeeUsd;\\n        if (pnlUsd > 0) {\\n            uint96 profitCollateral = uint256(pnlUsd).wdiv(profitAssetPrice).safeUint96();\\n            // transfer profit token\\n            uint96 spot = LibMath.min(profitCollateral, profitAsset.spotLiquidity);\\n            if (spot > 0) {\\n                profitAsset.spotLiquidity -= spot; // already deduct fee\\n                uint256 rawAmount = profitAsset.toRaw(spot);\\n                profitAsset.transferOut(trader, rawAmount, _storage.weth, _storage.nativeUnwrapper);\\n            }\\n            // debt\\n            {\\n                uint96 muxTokenAmount = profitCollateral - spot;\\n                if (muxTokenAmount > 0) {\\n                    profitAsset.issueMuxToken(trader, uint256(muxTokenAmount));\\n                    emit IssueMuxToken(\\n                        profitAsset.isStable() ? 0 : profitAsset.id,\\n                        profitAsset.isStable(),\\n                        muxTokenAmount\\n                    );\\n                }\\n            }\\n        }\\n        // fee\\n        if (paidFeeUsd > 0) {\\n            uint96 paidFeeCollateral = uint256(paidFeeUsd).wdiv(profitAssetPrice).safeUint96();\\n            profitAsset.collectedFee += paidFeeCollateral; // spotLiquidity was modified above\\n            emit CollectedFee(profitAsset.id, paidFeeCollateral);\\n        }\\n    }\\n\\n    function _realizeLoss(\\n        SubAccount storage subAccount,\\n        Asset storage collateral,\\n        uint96 collateralPrice,\\n        uint96 pnlUsd,\\n        bool isThrowBankrupt\\n    ) internal returns (uint96 truncatedPnlUsd) {\\n        if (pnlUsd == 0) {\\n            return 0;\\n        }\\n        truncatedPnlUsd = pnlUsd;\\n        uint96 pnlCollateral = uint256(pnlUsd).wdiv(collateralPrice).safeUint96();\\n        if (isThrowBankrupt) {\\n            // trade\\n            require(subAccount.collateral >= pnlCollateral, \\\"M=0\\\"); // Margin balance Is Zero. the account is bankrupt\\n        } else {\\n            // liquidate\\n            if (subAccount.collateral < pnlCollateral) {\\n                pnlCollateral = subAccount.collateral;\\n                truncatedPnlUsd = uint256(pnlCollateral).wmul(collateralPrice).safeUint96();\\n            }\\n        }\\n        subAccount.collateral -= pnlCollateral;\\n        collateral.spotLiquidity += pnlCollateral;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/Types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\nstruct LiquidityPoolStorage {\\n    // slot\\n    address orderBook;\\n    // slot\\n    address mlp;\\n    // slot\\n    address _reserved6; // was liquidityManager\\n    // slot\\n    address weth;\\n    // slot\\n    uint128 _reserved1;\\n    uint32 shortFundingBaseRate8H; // 1e5\\n    uint32 shortFundingLimitRate8H; // 1e5\\n    uint32 fundingInterval; // 1e0\\n    uint32 lastFundingTime; // 1e0\\n    // slot\\n    uint32 _reserved2;\\n    // slot\\n    Asset[] assets;\\n    // slot\\n    mapping(bytes32 => SubAccount) accounts;\\n    // slot\\n    mapping(address => bytes32) _reserved3;\\n    // slot\\n    address _reserved4;\\n    uint96 _reserved5;\\n    // slot\\n    uint96 mlpPriceLowerBound; // safeguard against mlp price attacks\\n    uint96 mlpPriceUpperBound; // safeguard against mlp price attacks\\n    uint32 liquidityBaseFeeRate; // 1e5\\n    uint32 liquidityDynamicFeeRate; // 1e5\\n    // slot\\n    address nativeUnwrapper;\\n    // a sequence number that changes when LiquidityPoolStorage updated. this helps to keep track the state of LiquidityPool.\\n    uint32 sequence; // 1e0. note: will be 0 after 0xffffffff\\n    uint32 strictStableDeviation; // 1e5. strictStable price is 1.0 if in this damping range\\n    uint32 brokerTransactions; // transaction count for broker gas rebates\\n    // slot\\n    address vault;\\n    uint96 brokerGasRebate; // the number of native tokens for broker gas rebates per transaction\\n    // slot\\n    address maintainer;\\n    // slot\\n    mapping(address => bool) liquidityManager;\\n    bytes32[50] _gap;\\n}\\n\\nstruct Asset {\\n    // slot\\n    // assets with the same symbol in different chains are the same asset. they shares the same muxToken. so debts of the same symbol\\n    // can be accumulated across chains (see Reader.AssetState.deduct). ex: ERC20(fBNB).symbol should be \\\"BNB\\\", so that BNBs of\\n    // different chains are the same.\\n    // since muxToken of all stable coins is the same and is calculated separately (see Reader.ChainState.stableDeduct), stable coin\\n    // symbol can be different (ex: \\\"USDT\\\", \\\"USDT.e\\\" and \\\"fUSDT\\\").\\n    bytes32 symbol;\\n    // slot\\n    address tokenAddress; // erc20.address\\n    uint8 id;\\n    uint8 decimals; // erc20.decimals\\n    uint56 flags; // a bitset of ASSET_*\\n    uint24 _flagsPadding;\\n    // slot\\n    uint32 initialMarginRate; // 1e5\\n    uint32 maintenanceMarginRate; // 1e5\\n    uint32 minProfitRate; // 1e5\\n    uint32 minProfitTime; // 1e0\\n    uint32 positionFeeRate; // 1e5\\n    // note: 96 bits remaining\\n    // slot\\n    address referenceOracle;\\n    uint32 referenceDeviation; // 1e5\\n    uint8 referenceOracleType;\\n    uint32 halfSpread; // 1e5\\n    // note: 24 bits remaining\\n    // slot\\n    uint96 credit;\\n    uint128 _reserved2;\\n    // slot\\n    uint96 collectedFee;\\n    uint32 liquidationFeeRate; // 1e5\\n    uint96 spotLiquidity;\\n    // note: 32 bits remaining\\n    // slot\\n    uint96 maxLongPositionSize;\\n    uint96 totalLongPosition;\\n    // note: 64 bits remaining\\n    // slot\\n    uint96 averageLongPrice;\\n    uint96 maxShortPositionSize;\\n    // note: 64 bits remaining\\n    // slot\\n    uint96 totalShortPosition;\\n    uint96 averageShortPrice;\\n    // note: 64 bits remaining\\n    // slot, less used\\n    address muxTokenAddress; // muxToken.address. all stable coins share the same muxTokenAddress\\n    uint32 spotWeight; // 1e0\\n    uint32 longFundingBaseRate8H; // 1e5\\n    uint32 longFundingLimitRate8H; // 1e5\\n    // slot\\n    uint128 longCumulativeFundingRate; // \u03a3_t fundingRate_t. in tokens. 1e18\\n    uint128 shortCumulativeFunding; // \u03a3_t fundingRate_t * indexPrice_t. in usd. 1e18\\n}\\n\\nuint32 constant FUNDING_PERIOD = 3600 * 8;\\n\\nuint56 constant ASSET_IS_STABLE = 0x00000000000001; // is a usdt, usdc, ...\\nuint56 constant ASSET_CAN_ADD_REMOVE_LIQUIDITY = 0x00000000000002; // can call addLiquidity and removeLiquidity with this token\\nuint56 constant ASSET_IS_TRADABLE = 0x00000000000100; // allowed to be assetId\\nuint56 constant ASSET_IS_OPENABLE = 0x00000000010000; // can open position\\nuint56 constant ASSET_IS_SHORTABLE = 0x00000001000000; // allow shorting this asset\\nuint56 constant ASSET_USE_STABLE_TOKEN_FOR_PROFIT = 0x00000100000000; // take profit will get stable coin\\nuint56 constant ASSET_IS_ENABLED = 0x00010000000000; // allowed to be assetId and collateralId\\nuint56 constant ASSET_IS_STRICT_STABLE = 0x01000000000000; // assetPrice is always 1 unless volatility exceeds strictStableDeviation\\n\\nstruct SubAccount {\\n    // slot\\n    uint96 collateral;\\n    uint96 size;\\n    uint32 lastIncreasedTime;\\n    // slot\\n    uint96 entryPrice;\\n    uint128 entryFunding; // entry longCumulativeFundingRate for long position. entry shortCumulativeFunding for short position\\n}\\n\\nenum ReferenceOracleType {\\n    None,\\n    Chainlink\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INativeUnwrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\ninterface INativeUnwrapper {\\n    function unwrap(address payable to, uint256 rawAmount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVotesUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\ninterface IVotesUpgradeable {\\n    function delegate(address delegatee) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH9.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibAsset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IWETH9.sol\\\";\\nimport \\\"../interfaces/INativeUnwrapper.sol\\\";\\nimport \\\"../libraries/LibMath.sol\\\";\\nimport \\\"../core/Types.sol\\\";\\n\\nlibrary LibAsset {\\n    using LibMath for uint256;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using SafeMathUpgradeable for uint256;\\n\\n    function transferOut(\\n        Asset storage token,\\n        address recipient,\\n        uint256 rawAmount,\\n        address weth,\\n        address nativeUnwrapper\\n    ) internal {\\n        if (token.tokenAddress == weth) {\\n            IWETH(weth).transfer(nativeUnwrapper, rawAmount);\\n            INativeUnwrapper(nativeUnwrapper).unwrap(payable(recipient), rawAmount);\\n        } else {\\n            IERC20Upgradeable(token.tokenAddress).safeTransfer(recipient, rawAmount);\\n        }\\n    }\\n\\n    function issueMuxToken(Asset storage token, address recipient, uint256 muxTokenAmount) internal {\\n        IERC20Upgradeable(token.muxTokenAddress).safeTransfer(recipient, muxTokenAmount);\\n    }\\n\\n    function toWad(Asset storage token, uint256 rawAmount) internal view returns (uint96) {\\n        return (rawAmount * (10 ** (18 - token.decimals))).safeUint96();\\n    }\\n\\n    function toRaw(Asset storage token, uint96 wadAmount) internal view returns (uint256) {\\n        return uint256(wadAmount) / 10 ** (18 - token.decimals);\\n    }\\n\\n    // is a usdt, usdc, ...\\n    function isStable(Asset storage asset) internal view returns (bool) {\\n        return (asset.flags & ASSET_IS_STABLE) != 0;\\n    }\\n\\n    // can call addLiquidity and removeLiquidity with this token\\n    function canAddRemoveLiquidity(Asset storage asset) internal view returns (bool) {\\n        return (asset.flags & ASSET_CAN_ADD_REMOVE_LIQUIDITY) != 0;\\n    }\\n\\n    // allowed to be assetId\\n    function isTradable(Asset storage asset) internal view returns (bool) {\\n        return (asset.flags & ASSET_IS_TRADABLE) != 0;\\n    }\\n\\n    // can open position\\n    function isOpenable(Asset storage asset) internal view returns (bool) {\\n        return (asset.flags & ASSET_IS_OPENABLE) != 0;\\n    }\\n\\n    // allow shorting this asset\\n    function isShortable(Asset storage asset) internal view returns (bool) {\\n        return (asset.flags & ASSET_IS_SHORTABLE) != 0;\\n    }\\n\\n    // take profit will get stable coin\\n    function useStableTokenForProfit(Asset storage asset) internal view returns (bool) {\\n        return (asset.flags & ASSET_USE_STABLE_TOKEN_FOR_PROFIT) != 0;\\n    }\\n\\n    // allowed to be assetId and collateralId\\n    function isEnabled(Asset storage asset) internal view returns (bool) {\\n        return (asset.flags & ASSET_IS_ENABLED) != 0;\\n    }\\n\\n    // assetPrice is always 1 unless volatility exceeds strictStableDeviation\\n    function isStrictStable(Asset storage asset) internal view returns (bool) {\\n        return (asset.flags & ASSET_IS_STRICT_STABLE) != 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibChainedProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Proxy.sol\\\";\\n\\nstruct ChainedProxyStorage {\\n    address next;\\n}\\n\\n/**\\n * @dev ChainedProxy is a chained version of EIP1967 proxy.\\n *\\n * The ChainedProxy uses Transparent Proxy as the storage layer and all logic layers\\n * use Proxy pattern which call the function if the logic contract has it or delegatecall\\n * the next logic hop.\\n */\\nlibrary ChainedProxy {\\n    /**\\n     * @dev The storage slot of the ChainedProxy contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.chain.storage')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant CHAINED_PROXY_STORAGE_SLOT =\\n        0x7d64d9a819609fbacde989007c1c053753b68c3b56ddef912de84ba0f732e0a9;\\n\\n    function chainedProxyStorage() internal pure returns (ChainedProxyStorage storage ds) {\\n        bytes32 slot = CHAINED_PROXY_STORAGE_SLOT;\\n        assembly {\\n            ds.slot := slot\\n        }\\n    }\\n\\n    function next() internal view returns (address) {\\n        ChainedProxyStorage storage ds = chainedProxyStorage();\\n        return ds.next;\\n    }\\n\\n    function replace(address newNextAddress) internal {\\n        ChainedProxyStorage storage ds = chainedProxyStorage();\\n        ds.next = newNextAddress;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\nlibrary LibMath {\\n    function min(uint96 a, uint96 b) internal pure returns (uint96) {\\n        return a <= b ? a : b;\\n    }\\n\\n    function min32(uint32 a, uint32 b) internal pure returns (uint32) {\\n        return a <= b ? a : b;\\n    }\\n\\n    function max32(uint32 a, uint32 b) internal pure returns (uint32) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function wmul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * b) / 1e18;\\n    }\\n\\n    function rmul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * b) / 1e5;\\n    }\\n\\n    function wdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * 1e18) / b;\\n    }\\n\\n    function safeUint32(uint256 n) internal pure returns (uint32) {\\n        require(n <= type(uint32).max, \\\"O32\\\"); // uint32 Overflow\\n        return uint32(n);\\n    }\\n\\n    function safeUint96(uint256 n) internal pure returns (uint96) {\\n        require(n <= type(uint96).max, \\\"O96\\\"); // uint96 Overflow\\n        return uint96(n);\\n    }\\n\\n    function safeUint128(uint256 n) internal pure returns (uint128) {\\n        require(n <= type(uint128).max, \\\"O12\\\"); // uint128 Overflow\\n        return uint128(n);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibReferenceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\nimport \\\"../core/Types.sol\\\";\\nimport \\\"./LibMath.sol\\\";\\nimport \\\"./LibAsset.sol\\\";\\n\\ninterface IChainlink {\\n    function latestAnswer() external view returns (int256);\\n\\n    function latestTimestamp() external view returns (uint256);\\n\\n    function latestRound() external view returns (uint256);\\n\\n    function getAnswer(uint256 roundId) external view returns (int256);\\n\\n    function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n    event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n    event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\\ninterface IChainlinkV3 {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    function getRoundData(\\n        uint80 _roundId\\n    )\\n        external\\n        view\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\\ninterface IChainlinkV2V3 is IChainlink, IChainlinkV3 {}\\n\\nenum SpreadType {\\n    Ask,\\n    Bid\\n}\\n\\nlibrary LibReferenceOracle {\\n    using LibMath for uint256;\\n    using LibMath for uint96;\\n    using LibAsset for Asset;\\n\\n    // indicate that the asset price is too far away from reference oracle\\n    event AssetPriceOutOfRange(uint8 assetId, uint96 price, uint96 referencePrice, uint32 deviation);\\n\\n    /**\\n     * @dev Check oracle parameters before set.\\n     */\\n    function checkParameters(\\n        ReferenceOracleType referenceOracleType,\\n        address referenceOracle,\\n        uint32 referenceDeviation\\n    ) internal view {\\n        require(referenceDeviation <= 1e5, \\\"D>1\\\"); // %deviation > 100%\\n        if (referenceOracleType == ReferenceOracleType.Chainlink) {\\n            IChainlinkV2V3 o = IChainlinkV2V3(referenceOracle);\\n            require(o.decimals() == 8, \\\"!D8\\\"); // we only support decimals = 8\\n            require(o.latestAnswer() > 0, \\\"P=0\\\"); // oracle Price <= 0\\n        }\\n    }\\n\\n    /**\\n     * @dev Truncate price if the error is too large.\\n     */\\n    function checkPrice(\\n        LiquidityPoolStorage storage pool,\\n        Asset storage asset,\\n        uint96 price\\n    ) internal returns (uint96) {\\n        require(price != 0, \\\"P=0\\\"); // broker price = 0\\n\\n        // truncate price if the error is too large\\n        if (ReferenceOracleType(asset.referenceOracleType) == ReferenceOracleType.Chainlink) {\\n            uint96 ref = _readChainlink(asset.referenceOracle);\\n            price = _truncatePrice(asset, price, ref);\\n        }\\n\\n        // strict stable dampener\\n        if (asset.isStrictStable()) {\\n            uint256 delta = price > 1e18 ? price - 1e18 : 1e18 - price;\\n            uint256 dampener = uint256(pool.strictStableDeviation) * 1e13; // 1e5 => 1e18\\n            if (delta <= dampener) {\\n                price = 1e18;\\n            }\\n        }\\n\\n        return price;\\n    }\\n\\n    /**\\n     * @dev check price and add spread, where spreadType should be:\\n     *\\n     *      subAccount.isLong   openPosition   closePosition   addLiquidity   removeLiquidity\\n     *      long                ask            bid\\n     *      short               bid            ask\\n     *      N/A                                                bid            ask\\n     */\\n    function checkPriceWithSpread(\\n        LiquidityPoolStorage storage pool,\\n        Asset storage asset,\\n        uint96 price,\\n        SpreadType spreadType\\n    ) internal returns (uint96) {\\n        price = checkPrice(pool, asset, price);\\n        price = _addSpread(asset, price, spreadType);\\n        return price;\\n    }\\n\\n    function _readChainlink(address referenceOracle) internal view returns (uint96) {\\n        int256 ref = IChainlinkV2V3(referenceOracle).latestAnswer();\\n        require(ref > 0, \\\"P=0\\\"); // oracle Price <= 0\\n        ref *= 1e10; // decimals 8 => 18\\n        return uint256(ref).safeUint96();\\n    }\\n\\n    function _truncatePrice(Asset storage asset, uint96 price, uint96 ref) private returns (uint96) {\\n        if (asset.referenceDeviation == 0) {\\n            return ref;\\n        }\\n        uint256 deviation = uint256(ref).rmul(asset.referenceDeviation);\\n        uint96 bound = (uint256(ref) - deviation).safeUint96();\\n        if (price < bound) {\\n            emit AssetPriceOutOfRange(asset.id, price, ref, asset.referenceDeviation);\\n            price = bound;\\n        }\\n        bound = (uint256(ref) + deviation).safeUint96();\\n        if (price > bound) {\\n            emit AssetPriceOutOfRange(asset.id, price, ref, asset.referenceDeviation);\\n            price = bound;\\n        }\\n        return price;\\n    }\\n\\n    function _addSpread(Asset storage asset, uint96 price, SpreadType spreadType) private view returns (uint96) {\\n        if (asset.halfSpread == 0) {\\n            return price;\\n        }\\n        uint96 halfSpread = uint256(price).rmul(asset.halfSpread).safeUint96();\\n        if (spreadType == SpreadType.Bid) {\\n            require(price > halfSpread, \\\"P=0\\\"); // Price - halfSpread = 0. impossible\\n            return price - halfSpread;\\n        } else {\\n            return price + halfSpread;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibSubAccount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\nimport \\\"../core/Types.sol\\\";\\n\\n/**\\n * SubAccountId\\n *         96             88        80       72        0\\n * +---------+--------------+---------+--------+--------+\\n * | Account | collateralId | assetId | isLong | unused |\\n * +---------+--------------+---------+--------+--------+\\n */\\nlibrary LibSubAccount {\\n    bytes32 constant SUB_ACCOUNT_ID_FORBIDDEN_BITS = bytes32(uint256(0xffffffffffffffffff));\\n\\n    function getSubAccountOwner(bytes32 subAccountId) internal pure returns (address account) {\\n        account = address(uint160(uint256(subAccountId) >> 96));\\n    }\\n\\n    function getSubAccountCollateralId(bytes32 subAccountId) internal pure returns (uint8) {\\n        return uint8(uint256(subAccountId) >> 88);\\n    }\\n\\n    function getSubAccountAssetId(bytes32 subAccountId) internal pure returns (uint8) {\\n        return uint8(uint256(subAccountId) >> 80);\\n    }\\n\\n    function isLong(bytes32 subAccountId) internal pure returns (bool) {\\n        return uint8((uint256(subAccountId) >> 72)) > 0;\\n    }\\n\\n    struct DecodedSubAccountId {\\n        address account;\\n        uint8 collateralId;\\n        uint8 assetId;\\n        bool isLong;\\n    }\\n\\n    function decodeSubAccountId(bytes32 subAccountId) internal pure returns (DecodedSubAccountId memory decoded) {\\n        require((subAccountId & SUB_ACCOUNT_ID_FORBIDDEN_BITS) == 0, \\\"AID\\\"); // bad subAccount ID\\n        decoded.account = address(uint160(uint256(subAccountId) >> 96));\\n        decoded.collateralId = uint8(uint256(subAccountId) >> 88);\\n        decoded.assetId = uint8(uint256(subAccountId) >> 80);\\n        decoded.isLong = uint8((uint256(subAccountId) >> 72)) > 0;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isStable\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"muxTokenAddress\",\"type\":\"address\"}],\"name\":\"AddAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"tokenPrice\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"mlpPrice\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"mlpAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"assetId\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rawBorrowAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rawFee\",\"type\":\"uint256\"}],\"name\":\"BorrowAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"transactions\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimBrokerGasRebate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"assetId\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"subAccountId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"collateralId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"profitAssetId\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"assetPrice\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"collateralPrice\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"profitAssetPrice\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"feeUsd\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"hasProfit\",\"type\":\"bool\"},{\"internalType\":\"uint96\",\"name\":\"pnlUsd\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"remainPosition\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"remainCollateral\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct Events.ClosePositionArgs\",\"name\":\"args\",\"type\":\"tuple\"}],\"name\":\"ClosePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"name\":\"CollectedFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"subAccountId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"collateralId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"wadAmount\",\"type\":\"uint96\"}],\"name\":\"DepositCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isStable\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"muxTokenAmount\",\"type\":\"uint96\"}],\"name\":\"IssueMuxToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"assetId\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"subAccountId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"collateralId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"profitAssetId\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"assetPrice\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"collateralPrice\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"profitAssetPrice\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"feeUsd\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"hasProfit\",\"type\":\"bool\"},{\"internalType\":\"uint96\",\"name\":\"pnlUsd\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"remainCollateral\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct Events.LiquidateArgs\",\"name\":\"args\",\"type\":\"tuple\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"assetId\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"subAccountId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"collateralId\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"assetPrice\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"collateralPrice\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"newEntryPrice\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"feeUsd\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"remainPosition\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"remainCollateral\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct Events.OpenPositionArgs\",\"name\":\"args\",\"type\":\"tuple\"}],\"name\":\"OpenPosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"PrepareToTransferOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rebalancer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tokenId0\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tokenId1\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"price0\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"price1\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"rawAmount0\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"rawAmount1\",\"type\":\"uint96\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"muxTokenAmount\",\"type\":\"uint96\"}],\"name\":\"RedeemMuxToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"tokenPrice\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"mlpPrice\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"mlpAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"assetId\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"repayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rawRepayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rawFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"badDebt\",\"type\":\"uint256\"}],\"name\":\"RepayAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"assetId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint56\",\"name\":\"newFlags\",\"type\":\"uint56\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newHalfSpread\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"newMaxLongPositionSize\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"newMaxShortPositionSize\",\"type\":\"uint96\"}],\"name\":\"SetAssetFlags\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"assetId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newInitialMarginRate\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newMaintenanceMarginRate\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newPositionFeeRate\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newLiquidationFeeRate\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newMinProfitRate\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newMinProfitTime\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newSpotWeight\",\"type\":\"uint32\"}],\"name\":\"SetAssetParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"newBrokerGasRebate\",\"type\":\"uint96\"}],\"name\":\"SetBrokerGasRebate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"oldFundingInterval\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newFundingInterval\",\"type\":\"uint32\"}],\"name\":\"SetFundingInterval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"assetId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newBaseRate8H\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newLimitRate8H\",\"type\":\"uint32\"}],\"name\":\"SetFundingParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newLiquidityBaseFeeRate\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newLiquidityDynamicFeeRate\",\"type\":\"uint32\"}],\"name\":\"SetLiquidityFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newLiquidityManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAdd\",\"type\":\"bool\"}],\"name\":\"SetLiquidityManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMaintainer\",\"type\":\"address\"}],\"name\":\"SetMaintainer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"newLowerBound\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"newUpperBound\",\"type\":\"uint96\"}],\"name\":\"SetMlpPriceRange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"assetId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"referenceOracleType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referenceOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"referenceDeviation\",\"type\":\"uint32\"}],\"name\":\"SetReferenceOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newStrictStableDeviation\",\"type\":\"uint32\"}],\"name\":\"SetStrictStableDeviation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"assetId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"longFundingRate\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"longCumulativeFundingRate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"shortFundingRate\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"shortCumulativeFunding\",\"type\":\"uint128\"}],\"name\":\"UpdateFundingRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"sequence\",\"type\":\"uint32\"}],\"name\":\"UpdateSequence\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevNextHop\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nextHop\",\"type\":\"address\"}],\"name\":\"UpgradeChainedProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"subAccountId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"collateralId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"wadAmount\",\"type\":\"uint96\"}],\"name\":\"WithdrawCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"assetId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"collectedFee\",\"type\":\"uint96\"}],\"name\":\"WithdrawCollectedFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"assetId\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"subAccountId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"collateralId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"profitAssetId\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"withdrawRawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"assetPrice\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"collateralPrice\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"profitAssetPrice\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"entryPrice\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"feeUsd\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct Events.WithdrawProfitArgs\",\"name\":\"args\",\"type\":\"tuple\"}],\"name\":\"WithdrawProfit\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"subAccountId\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"internalType\":\"uint8\",\"name\":\"profitAssetId\",\"type\":\"uint8\"},{\"internalType\":\"uint96\",\"name\":\"collateralPrice\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"assetPrice\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"profitAssetPrice\",\"type\":\"uint96\"}],\"name\":\"closePosition\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"subAccountId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"depositCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAssetInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint56\",\"name\":\"flags\",\"type\":\"uint56\"},{\"internalType\":\"uint24\",\"name\":\"_flagsPadding\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"initialMarginRate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maintenanceMarginRate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minProfitRate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minProfitTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"positionFeeRate\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"referenceOracle\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"referenceDeviation\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"referenceOracleType\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"halfSpread\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"credit\",\"type\":\"uint96\"},{\"internalType\":\"uint128\",\"name\":\"_reserved2\",\"type\":\"uint128\"},{\"internalType\":\"uint96\",\"name\":\"collectedFee\",\"type\":\"uint96\"},{\"internalType\":\"uint32\",\"name\":\"liquidationFeeRate\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"spotLiquidity\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"maxLongPositionSize\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"totalLongPosition\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"averageLongPrice\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"maxShortPositionSize\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"totalShortPosition\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"averageShortPrice\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"muxTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"spotWeight\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"longFundingBaseRate8H\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"longFundingLimitRate8H\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"longCumulativeFundingRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"shortCumulativeFunding\",\"type\":\"uint128\"}],\"internalType\":\"struct Asset[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"assetId\",\"type\":\"uint8\"}],\"name\":\"getAssetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"assetId\",\"type\":\"uint8\"}],\"name\":\"getAssetInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint56\",\"name\":\"flags\",\"type\":\"uint56\"},{\"internalType\":\"uint24\",\"name\":\"_flagsPadding\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"initialMarginRate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maintenanceMarginRate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minProfitRate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minProfitTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"positionFeeRate\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"referenceOracle\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"referenceDeviation\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"referenceOracleType\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"halfSpread\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"credit\",\"type\":\"uint96\"},{\"internalType\":\"uint128\",\"name\":\"_reserved2\",\"type\":\"uint128\"},{\"internalType\":\"uint96\",\"name\":\"collectedFee\",\"type\":\"uint96\"},{\"internalType\":\"uint32\",\"name\":\"liquidationFeeRate\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"spotLiquidity\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"maxLongPositionSize\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"totalLongPosition\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"averageLongPrice\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"maxShortPositionSize\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"totalShortPosition\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"averageShortPrice\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"muxTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"spotWeight\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"longFundingBaseRate8H\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"longFundingLimitRate8H\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"longCumulativeFundingRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"shortCumulativeFunding\",\"type\":\"uint128\"}],\"internalType\":\"struct Asset\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityPoolStorage\",\"outputs\":[{\"internalType\":\"uint32[8]\",\"name\":\"u32s\",\"type\":\"uint32[8]\"},{\"internalType\":\"uint96[2]\",\"name\":\"u96s\",\"type\":\"uint96[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"subAccountId\",\"type\":\"bytes32\"}],\"name\":\"getSubAccount\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"collateral\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"size\",\"type\":\"uint96\"},{\"internalType\":\"uint32\",\"name\":\"lastIncreasedTime\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"entryPrice\",\"type\":\"uint96\"},{\"internalType\":\"uint128\",\"name\":\"entryFunding\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nextHop\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mlp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"orderBook\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nativeUnwrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"subAccountId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"profitAssetId\",\"type\":\"uint8\"},{\"internalType\":\"uint96\",\"name\":\"collateralPrice\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"assetPrice\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"profitAssetPrice\",\"type\":\"uint96\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"subAccountId\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"collateralPrice\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"assetPrice\",\"type\":\"uint96\"}],\"name\":\"openPosition\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nextHop\",\"type\":\"address\"}],\"name\":\"upgradeChainedProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"subAccountId\",\"type\":\"bytes32\"}],\"name\":\"withdrawAllCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"subAccountId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"collateralPrice\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"assetPrice\",\"type\":\"uint96\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"subAccountId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"profitAssetId\",\"type\":\"uint8\"},{\"internalType\":\"uint96\",\"name\":\"collateralPrice\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"assetPrice\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"profitAssetPrice\",\"type\":\"uint96\"}],\"name\":\"withdrawProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LiquidityPoolHop1", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}