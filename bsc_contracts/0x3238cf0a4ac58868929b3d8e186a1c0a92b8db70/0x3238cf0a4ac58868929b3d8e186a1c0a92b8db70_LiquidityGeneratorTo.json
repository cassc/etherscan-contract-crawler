{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.16;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function WETC() external pure returns (address);\r\n\r\n    function WHT() external pure returns (address);\r\n\r\n    function WROSE() external pure returns (address);\r\n\r\n    function WAVAX() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function addLiquidityAVAX(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function addLiquidityETC(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function addLiquidityROSE(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function swapExactTokensForETCSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForROSESupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\nabstract contract BaseToken {\r\n    event TokenCreated(\r\n        address indexed owner,\r\n        address indexed token,\r\n        string tokenType,\r\n        uint256 version\r\n    );\r\n}\r\n\r\ncontract LiquidityGeneratorToken is IERC20, Ownable, BaseToken {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant VERSION = 4;\r\n\r\n    mapping(address => uint256) private rOwned;\r\n    mapping(address => uint256) private tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    mapping(address => bool) private isExcludedFromFee;\r\n    mapping(address => bool) private isExcluded;\r\n    address[] private excluded;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private immutable tTotal;\r\n    uint256 private rTotal;\r\n    uint256 private tFeeTotal;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private immutable _decimals;\r\n\r\n    uint256 public taxFee;\r\n    uint256 private previousTaxFee;\r\n\r\n    uint256 public liquidityFee;\r\n    uint256 private previousLiquidityFee;\r\n\r\n    uint256 public teamFee;\r\n    uint256 private previousTeamFee;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n    address public teamAddress;\r\n\r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled;\r\n\r\n    uint256 private numTokensSellToAddToLiquidity;\r\n\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    event UpdatedTokenSellToLiquify(uint256 amount, uint256 previousAmount);\r\n    event UpdatedTaxFeePercent(uint256 value, uint256 previousValue);\r\n    event UpdatedLiquidityFeePercent(uint256 value, uint256 previousValue);\r\n    event UpdatedTeamFeePercent(uint256 value, uint256 previousValue);\r\n    event UpdatedTeamAddress(address value, address previousValue);\r\n    event Reflect(address sender, uint256 amount);\r\n    event SwapTokensForEthFailed(uint256 amount);\r\n    event AddLiquidityFailed(uint256 ethAmount);\r\n\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint8 decimals_,\r\n        uint256 totalSupply_,\r\n        address router_,\r\n        address teamAddress_,\r\n        uint16 taxfeeTax_,\r\n        uint16 liquidityFeeTax_,\r\n        uint16 teamFeeTax_,\r\n        address feeReceiver\r\n    ) payable {\r\n        require(\r\n            teamAddress_ != address(0),\r\n            \"teamAddress_ should not be the zero address\"\r\n        );\r\n\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n\r\n        tTotal = totalSupply_;\r\n        rTotal = (MAX - (MAX % tTotal));\r\n\r\n        taxFee = taxfeeTax_;\r\n        previousTaxFee = taxFee;\r\n\r\n        liquidityFee = liquidityFeeTax_;\r\n        previousLiquidityFee = liquidityFee;\r\n\r\n        teamAddress = teamAddress_;\r\n        teamFee = teamFeeTax_;\r\n        previousTeamFee = teamFee;\r\n\r\n        validateTaxes();\r\n\r\n        numTokensSellToAddToLiquidity = (totalSupply_) / 10000; // 0.01%\r\n\r\n        swapAndLiquifyEnabled = true;\r\n\r\n        rOwned[owner()] = rTotal;\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(router_);\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), getNativeCurrency());\r\n\r\n        isExcludedFromFee[owner()] = true;\r\n        isExcludedFromFee[address(this)] = true;\r\n\r\n        emit Transfer(address(0), owner(), tTotal);\r\n\r\n        emit TokenCreated(\r\n            owner(),\r\n            address(this),\r\n            \"liquidityGenerator\",\r\n            VERSION\r\n        );\r\n\r\n        if (feeReceiver == address(0x0)) return;\r\n\r\n        payable(feeReceiver).transfer(address(this).balance);\r\n    }\r\n\r\n    function getNativeCurrency() internal view returns (address) {\r\n        if (block.chainid == 61) {\r\n            //etc\r\n            return uniswapV2Router.WETC();\r\n        } else if (block.chainid == 128) {\r\n            //heco chain\r\n            return uniswapV2Router.WHT();\r\n        } else if (block.chainid == 42262) {\r\n            //oasis\r\n            return uniswapV2Router.WROSE();\r\n        } else if (block.chainid == 43114 || block.chainid == 43113) {\r\n            //avalance\r\n            return uniswapV2Router.WAVAX();\r\n        } else {\r\n            return uniswapV2Router.WETH();\r\n        }\r\n    }\r\n\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (isExcluded[account]) return tOwned[account];\r\n        return tokenFromReflection(rOwned[account]);\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address account,\r\n        address spender\r\n    ) external view override returns (uint256) {\r\n        return _allowances[account][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) external virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) external virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(\r\n        address account\r\n    ) external view returns (bool) {\r\n        return isExcluded[account];\r\n    }\r\n\r\n    function totalFees() external view returns (uint256) {\r\n        return tFeeTotal;\r\n    }\r\n\r\n    function deliver(uint256 tAmount) external {\r\n        address sender = _msgSender();\r\n        require(\r\n            !isExcluded[sender],\r\n            \"Excluded addresses cannot call this function\"\r\n        );\r\n        (uint256 rAmount, , , , , , ) = _getValues(tAmount);\r\n        rOwned[sender] = rOwned[sender] - rAmount;\r\n        rTotal = rTotal - rAmount;\r\n        tFeeTotal = tFeeTotal + tAmount;\r\n    }\r\n\r\n    function reflectionFromToken(\r\n        uint256 tAmount,\r\n        bool deductTransferFee\r\n    ) external view returns (uint256) {\r\n        require(tAmount <= tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount, , , , , , ) = _getValues(tAmount);\r\n            return rAmount;\r\n        } else {\r\n            (, uint256 rTransferAmount, , , , , ) = _getValues(tAmount);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(\r\n        uint256 rAmount\r\n    ) public view returns (uint256) {\r\n        require(\r\n            rAmount <= rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount / currentRate;\r\n    }\r\n\r\n    function excludeFromReward(address account) external onlyOwner {\r\n        require(!isExcluded[account], \"Account is already excluded\");\r\n        if (rOwned[account] > 0) {\r\n            tOwned[account] = tokenFromReflection(rOwned[account]);\r\n        }\r\n        isExcluded[account] = true;\r\n        excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner {\r\n        require(isExcluded[account], \"Account is already excluded\");\r\n\r\n        for (uint256 i = 0; i < excluded.length; i++) {\r\n            if (excluded[i] == account) {\r\n                excluded[i] = excluded[excluded.length - 1];\r\n                tOwned[account] = 0;\r\n                isExcluded[account] = false;\r\n                excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _transferBothExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity,\r\n            uint256 tTeam\r\n        ) = _getValues(tAmount);\r\n        tOwned[sender] = tOwned[sender] - tAmount;\r\n        rOwned[sender] = rOwned[sender] - rAmount;\r\n        tOwned[recipient] = tOwned[recipient] + tTransferAmount;\r\n        rOwned[recipient] = rOwned[recipient] + rTransferAmount;\r\n        _takeLiquidity(sender, tLiquidity);\r\n        _takeTeamFee(sender, tTeam);\r\n        _reflectFee(sender, rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function excludeFromFee(address account) external onlyOwner {\r\n        isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) external onlyOwner {\r\n        isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function setTaxFeePercent(uint256 taxFeeBps) external onlyOwner {\r\n        emit UpdatedTaxFeePercent(taxFeeBps, taxFee);\r\n\r\n        taxFee = taxFeeBps;\r\n\r\n        validateTaxes();\r\n    }\r\n\r\n    function setLiquidityFeePercent(\r\n        uint256 liquidityFeeBps\r\n    ) external onlyOwner {\r\n        emit UpdatedLiquidityFeePercent(liquidityFeeBps, liquidityFee);\r\n\r\n        liquidityFee = liquidityFeeBps;\r\n\r\n        validateTaxes();\r\n    }\r\n\r\n    function setTeamFeePercent(uint256 teamFeeBps) external onlyOwner {\r\n        emit UpdatedTeamFeePercent(teamFeeBps, teamFee);\r\n\r\n        teamFee = teamFeeBps;\r\n\r\n        validateTaxes();\r\n    }\r\n\r\n    function setTeamAddress(address wallet) external onlyOwner {\r\n        require(wallet != address(0x0));\r\n\r\n        emit UpdatedTeamAddress(wallet, teamAddress);\r\n\r\n        teamAddress = wallet;\r\n    }\r\n\r\n    function validateTaxes() internal view {\r\n        require(\r\n            taxFee + liquidityFee + teamFee <= 10 ** 4 / 5,\r\n            \"Total fee is over 20%\"\r\n        );\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool enabled) external onlyOwner {\r\n        swapAndLiquifyEnabled = enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(enabled);\r\n    }\r\n\r\n    function setTokenSellToLiquify(uint256 amount) external onlyOwner {\r\n        require(\r\n            amount > tTotal / 10 ** 5 && amount <= tTotal / 10 ** 3,\r\n            \"Amount must be between 0.001% - 0.1% of total supply\"\r\n        );\r\n\r\n        emit UpdatedTokenSellToLiquify(amount, numTokensSellToAddToLiquidity);\r\n\r\n        numTokensSellToAddToLiquidity = amount;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _getValues(\r\n        uint256 tAmount\r\n    )\r\n        private\r\n        view\r\n        returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256)\r\n    {\r\n        (\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity,\r\n            uint256 tTeam\r\n        ) = _getTValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\r\n            tAmount,\r\n            tFee,\r\n            tLiquidity,\r\n            tTeam,\r\n            _getRate()\r\n        );\r\n        return (\r\n            rAmount,\r\n            rTransferAmount,\r\n            rFee,\r\n            tTransferAmount,\r\n            tFee,\r\n            tLiquidity,\r\n            tTeam\r\n        );\r\n    }\r\n\r\n    function _getTValues(\r\n        uint256 tAmount\r\n    ) private view returns (uint256, uint256, uint256, uint256) {\r\n        uint256 tFee = calculateTaxFee(tAmount);\r\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\r\n        uint256 tTeamFee = calculateTeamFee(tAmount);\r\n        uint256 tTransferAmount = tAmount - tFee - tLiquidity - tTeamFee;\r\n        return (tTransferAmount, tFee, tLiquidity, tTeamFee);\r\n    }\r\n\r\n    function _getRValues(\r\n        uint256 tAmount,\r\n        uint256 tFee,\r\n        uint256 tLiquidity,\r\n        uint256 tTeam,\r\n        uint256 currentRate\r\n    ) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount * currentRate;\r\n        uint256 rFee = tFee * currentRate;\r\n        uint256 rLiquidity = tLiquidity * currentRate;\r\n        uint256 rTeam = tTeam * currentRate;\r\n        uint256 rTransferAmount = rAmount - rFee - rLiquidity - rTeam;\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply / tSupply;\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = rTotal;\r\n        uint256 tSupply = tTotal;\r\n        for (uint256 i = 0; i < excluded.length; i++) {\r\n            if (rOwned[excluded[i]] > rSupply || tOwned[excluded[i]] > tSupply)\r\n                return (rTotal, tTotal);\r\n            rSupply = rSupply - rOwned[excluded[i]];\r\n            tSupply = tSupply - tOwned[excluded[i]];\r\n        }\r\n        if (rSupply < rTotal / tTotal) return (rTotal, tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _takeLiquidity(address sender, uint256 tLiquidity) private {\r\n        if (tLiquidity == 0) return;\r\n\r\n        uint256 currentRate = _getRate();\r\n        uint256 rLiquidity = tLiquidity * currentRate;\r\n        rOwned[address(this)] = rOwned[address(this)] + rLiquidity;\r\n\r\n        if (isExcluded[address(this)])\r\n            tOwned[address(this)] = tOwned[address(this)] + tLiquidity;\r\n\r\n        emit Transfer(sender, address(this), tLiquidity);\r\n    }\r\n\r\n    function _takeTeamFee(address sender, uint256 tTeam) private {\r\n        if (tTeam == 0) return;\r\n\r\n        uint256 currentRate = _getRate();\r\n        uint256 rTeam = tTeam * currentRate;\r\n        rOwned[teamAddress] = rOwned[teamAddress] + rTeam;\r\n\r\n        if (isExcluded[teamAddress])\r\n            tOwned[teamAddress] = tOwned[teamAddress] + tTeam;\r\n\r\n        emit Transfer(sender, teamAddress, tTeam);\r\n    }\r\n\r\n    function _reflectFee(address sender, uint256 rFee, uint256 tFee) private {\r\n        if (tFee == 0) return;\r\n\r\n        rTotal = rTotal - rFee;\r\n        tFeeTotal = tFeeTotal + tFee;\r\n\r\n        emit Reflect(sender, tFee);\r\n    }\r\n\r\n    function calculateTaxFee(uint256 amount) private view returns (uint256) {\r\n        return (amount * taxFee) / (10 ** 4);\r\n    }\r\n\r\n    function calculateLiquidityFee(\r\n        uint256 amount\r\n    ) private view returns (uint256) {\r\n        return (amount * liquidityFee) / (10 ** 4);\r\n    }\r\n\r\n    function calculateTeamFee(uint256 amount) private view returns (uint256) {\r\n        return (amount * teamFee) / (10 ** 4);\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        previousTaxFee = taxFee;\r\n        previousLiquidityFee = liquidityFee;\r\n        previousTeamFee = teamFee;\r\n\r\n        taxFee = 0;\r\n        liquidityFee = 0;\r\n        teamFee = 0;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        taxFee = previousTaxFee;\r\n        liquidityFee = previousLiquidityFee;\r\n        teamFee = previousTeamFee;\r\n    }\r\n\r\n    function getIsExcludedFromFee(address account) public view returns (bool) {\r\n        return isExcludedFromFee[account];\r\n    }\r\n\r\n    function _approve(\r\n        address account,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(account != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[account][spender] = amount;\r\n        emit Approval(account, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool overMinTokenBalance = contractTokenBalance >=\r\n            numTokensSellToAddToLiquidity;\r\n        if (\r\n            overMinTokenBalance &&\r\n            !inSwapAndLiquify &&\r\n            from != uniswapV2Pair &&\r\n            swapAndLiquifyEnabled\r\n        ) {\r\n            contractTokenBalance = numTokensSellToAddToLiquidity;\r\n            swapAndLiquify(contractTokenBalance);\r\n        }\r\n\r\n        bool takeFee = !isExcludedFromFee[from] && !isExcludedFromFee[to];\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        uint256 half = contractTokenBalance / 2;\r\n        uint256 otherHalf = contractTokenBalance - half;\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        swapTokensForEth(half);\r\n\r\n        uint256 newBalance = address(this).balance - initialBalance;\r\n\r\n        if (newBalance == 0) return;\r\n\r\n        addLiquidity(otherHalf, newBalance);\r\n\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = getNativeCurrency();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        if (block.chainid == 61) {\r\n            //etc\r\n            try\r\n                uniswapV2Router\r\n                    .swapExactTokensForETCSupportingFeeOnTransferTokens(\r\n                        tokenAmount,\r\n                        0, // accept any amount of ETH\r\n                        path,\r\n                        address(this),\r\n                        block.timestamp\r\n                    )\r\n            {} catch {\r\n                emit SwapTokensForEthFailed(tokenAmount);\r\n            }\r\n        } else if (block.chainid == 42262) {\r\n            //oasis\r\n            try\r\n                uniswapV2Router\r\n                    .swapExactTokensForROSESupportingFeeOnTransferTokens(\r\n                        tokenAmount,\r\n                        0, // accept any amount of ETH\r\n                        path,\r\n                        address(this),\r\n                        block.timestamp\r\n                    )\r\n            {} catch {\r\n                emit SwapTokensForEthFailed(tokenAmount);\r\n            }\r\n        } else if (block.chainid == 43114 || block.chainid == 43113) {\r\n            //avalance\r\n            try\r\n                uniswapV2Router\r\n                    .swapExactTokensForAVAXSupportingFeeOnTransferTokens(\r\n                        tokenAmount,\r\n                        0, // accept any amount of ETH\r\n                        path,\r\n                        address(this),\r\n                        block.timestamp\r\n                    )\r\n            {} catch {\r\n                emit SwapTokensForEthFailed(tokenAmount);\r\n            }\r\n        } else {\r\n            try\r\n                uniswapV2Router\r\n                    .swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                        tokenAmount,\r\n                        0, // accept any amount of ETH\r\n                        path,\r\n                        address(this),\r\n                        block.timestamp\r\n                    )\r\n            {} catch {\r\n                emit SwapTokensForEthFailed(tokenAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        if (block.chainid == 61) {\r\n            //etc\r\n            try\r\n                uniswapV2Router.addLiquidityETC{value: ethAmount}(\r\n                    address(this),\r\n                    tokenAmount,\r\n                    0,\r\n                    0,\r\n                    address(0xdead),\r\n                    block.timestamp\r\n                )\r\n            {} catch {\r\n                emit AddLiquidityFailed(ethAmount);\r\n            }\r\n        } else if (block.chainid == 42262) {\r\n            //oasis\r\n            try\r\n                uniswapV2Router.addLiquidityROSE{value: ethAmount}(\r\n                    address(this),\r\n                    tokenAmount,\r\n                    0,\r\n                    0,\r\n                    address(0xdead),\r\n                    block.timestamp\r\n                )\r\n            {} catch {\r\n                emit AddLiquidityFailed(ethAmount);\r\n            }\r\n        } else if (block.chainid == 43114 || block.chainid == 43113) {\r\n            //avalance\r\n            try\r\n                uniswapV2Router.addLiquidityAVAX{value: ethAmount}(\r\n                    address(this),\r\n                    tokenAmount,\r\n                    0,\r\n                    0,\r\n                    address(0xdead),\r\n                    block.timestamp\r\n                )\r\n            {} catch {\r\n                emit AddLiquidityFailed(ethAmount);\r\n            }\r\n        } else {\r\n            try\r\n                uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n                    address(this),\r\n                    tokenAmount,\r\n                    0,\r\n                    0,\r\n                    address(0xdead),\r\n                    block.timestamp\r\n                )\r\n            {} catch {\r\n                emit AddLiquidityFailed(ethAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        if (!takeFee) removeAllFee();\r\n\r\n        if (isExcluded[sender] && !isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!isExcluded[sender] && isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (!isExcluded[sender] && !isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount);\r\n        } else if (isExcluded[sender] && isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n\r\n        if (!takeFee) restoreAllFee();\r\n    }\r\n\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity,\r\n            uint256 tTeam\r\n        ) = _getValues(tAmount);\r\n        rOwned[sender] = rOwned[sender] - rAmount;\r\n        rOwned[recipient] = rOwned[recipient] + rTransferAmount;\r\n        _takeLiquidity(sender, tLiquidity);\r\n        _takeTeamFee(sender, tTeam);\r\n        _reflectFee(sender, rFee, tFee);\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferToExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity,\r\n            uint256 tTeam\r\n        ) = _getValues(tAmount);\r\n        rOwned[sender] = rOwned[sender] - rAmount;\r\n        tOwned[recipient] = tOwned[recipient] + tTransferAmount;\r\n        rOwned[recipient] = rOwned[recipient] + rTransferAmount;\r\n        _takeLiquidity(sender, tLiquidity);\r\n        _takeTeamFee(sender, tTeam);\r\n        _reflectFee(sender, rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferFromExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity,\r\n            uint256 tTeam\r\n        ) = _getValues(tAmount);\r\n        tOwned[sender] = tOwned[sender] - tAmount;\r\n        rOwned[sender] = rOwned[sender] - rAmount;\r\n        rOwned[recipient] = rOwned[recipient] + rTransferAmount;\r\n        _takeLiquidity(sender, tLiquidity);\r\n        _takeTeamFee(sender, tTeam);\r\n        _reflectFee(sender, rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamAddress_\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"taxfeeTax_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidityFeeTax_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"teamFeeTax_\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidityFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reflect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SwapTokensForEthFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousValue\",\"type\":\"uint256\"}],\"name\":\"UpdatedLiquidityFeePercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousValue\",\"type\":\"uint256\"}],\"name\":\"UpdatedTaxFeePercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousValue\",\"type\":\"address\"}],\"name\":\"UpdatedTeamAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousValue\",\"type\":\"uint256\"}],\"name\":\"UpdatedTeamFeePercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousAmount\",\"type\":\"uint256\"}],\"name\":\"UpdatedTokenSellToLiquify\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getIsExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFeeBps\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFeeBps\",\"type\":\"uint256\"}],\"name\":\"setTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamFeeBps\",\"type\":\"uint256\"}],\"name\":\"setTeamFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTokenSellToLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LiquidityGeneratorToken", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000d3c20dee1639f99c000000000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e0000000000000000000000009dfedd82602647988cd6d31fcef642693114b437000000000000000000000000000000000000000000000000000000000000038400000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000000640000000000000000000000001717afbe81bb09cbd283f18474349efe2c27dced000000000000000000000000000000000000000000000000000000000000000853617661734c69710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003534c540000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f5486e0305bdf3aee2a0704d2341b53aed0e7019ef71d492518767c7719dc849"}