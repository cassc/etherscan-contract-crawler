{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/solidity/MarketplaceZap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interface/IVault.sol\\\";\\nimport \\\"./interface/IVaultFactory.sol\\\";\\nimport \\\"./interface/IFeeDistributor.sol\\\";\\nimport \\\"./interface/ILPStaking.sol\\\";\\nimport \\\"./interface/ITimelockRewardDistributionToken.sol\\\";\\nimport \\\"./interface/IUniswapV2Router01.sol\\\";\\nimport \\\"./testing/IERC721.sol\\\";\\nimport \\\"./token/IERC1155Upgradeable.sol\\\";\\nimport \\\"./token/IERC20Upgradeable.sol\\\";\\nimport \\\"./token/ERC721HolderUpgradeable.sol\\\";\\nimport \\\"./token/ERC1155HolderUpgradeable.sol\\\";\\nimport \\\"./util/OwnableUpgradeable.sol\\\";\\n\\n// Authors: @0xKiwi_.\\n\\ninterface IWETH {\\n  function deposit() external payable;\\n  function transfer(address to, uint value) external returns (bool);\\n  function withdraw(uint) external;\\n  function balanceOf(address to) external view returns (uint256);\\n}\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\ncontract MarketplaceZap is Ownable, ReentrancyGuard, ERC721HolderUpgradeable, ERC1155HolderUpgradeable {\\n  IWETH public immutable WETH; \\n  ILPStaking public immutable lpStaking;\\n  IVaultFactory public immutable factory;\\n  IUniswapV2Router01 public immutable apeRouter;\\n\\n  uint256 constant BASE = 100 ether;\\n\\n  constructor(address _factory, address _apeRouter) Ownable() ReentrancyGuard() {\\n    factory = IVaultFactory(_factory);\\n    lpStaking = ILPStaking(IFeeDistributor(IVaultFactory(_factory).feeDistributor()).lpStaking());\\n    apeRouter = IUniswapV2Router01(_apeRouter);\\n    WETH = IWETH(IUniswapV2Router01(_apeRouter).WETH());\\n    IERC20Upgradeable(address(IUniswapV2Router01(_apeRouter).WETH())).approve(_apeRouter, type(uint256).max);\\n  }\\n\\n  function mintAndSell721(\\n    uint256 vaultId, \\n    uint256[] memory ids, \\n    uint256 minWethOut, \\n    address[] calldata path,\\n    address to\\n  ) public nonReentrant {\\n    require(to != address(0));\\n    require(ids.length != 0);\\n    (address vault, uint256 vaultBalance) = _mint721(vaultId, ids);\\n    uint256[] memory amounts = _sellVaultToken(vault, minWethOut, vaultBalance, path);\\n\\n    // Return extras.\\n    uint256 remaining = WETH.balanceOf(address(this));\\n    WETH.withdraw(remaining);\\n    (bool success, ) = payable(to).call{value: remaining}(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  function mintAndSell721WETH(\\n    uint256 vaultId, \\n    uint256[] memory ids, \\n    uint256 minWethOut, \\n    address[] calldata path,\\n    address to\\n  ) public nonReentrant {\\n    require(to != address(0));\\n    require(ids.length != 0);\\n    (address vault, uint256 vaultBalance) = _mint721(vaultId, ids);\\n    uint256[] memory amounts = _sellVaultToken(vault, minWethOut, vaultBalance, path);\\n    uint256 remaining = WETH.balanceOf(address(this));\\n    WETH.transfer(to, remaining);\\n  }\\n\\n  function buyAndSwap721(\\n    uint256 vaultId, \\n    uint256[] memory idsIn, \\n    uint256[] memory specificIds, \\n    address[] calldata path,\\n    address to\\n  ) public payable nonReentrant {\\n    require(to != address(0));\\n    require(idsIn.length != 0);\\n    WETH.deposit{value: msg.value}();\\n    IVault vault = IVault(factory.vault(vaultId));\\n    uint256 redeemFees = (vault.targetRedeemFee() * specificIds.length) + (\\n        vault.randomRedeemFee() * (idsIn.length - specificIds.length)\\n    );\\n    uint256[] memory amounts = _buyVaultToken(address(vault), redeemFees, msg.value, path);\\n    _swap721(vaultId, idsIn, specificIds, to);\\n\\n    // Return extras.\\n    uint256 remaining = WETH.balanceOf(address(this));\\n    WETH.withdraw(remaining);\\n    (bool success, ) = payable(to).call{value: remaining}(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  function buyAndSwap721WETH(\\n    uint256 vaultId, \\n    uint256[] memory idsIn, \\n    uint256[] memory specificIds, \\n    uint256 maxWethIn, \\n    address[] calldata path,\\n    address to\\n  ) public nonReentrant {\\n    require(to != address(0));\\n    require(idsIn.length != 0);\\n    IERC20Upgradeable(address(WETH)).transferFrom(msg.sender, address(this), maxWethIn);\\n    IVault vault = IVault(factory.vault(vaultId));\\n    uint256 redeemFees = (vault.targetRedeemFee() * specificIds.length) + (\\n        vault.randomRedeemFee() * (idsIn.length - specificIds.length)\\n    );\\n    uint256[] memory amounts = _buyVaultToken(address(vault), redeemFees, maxWethIn, path);\\n    _swap721(vaultId, idsIn, specificIds, to);\\n\\n    // Return extras.\\n    uint256 remaining = WETH.balanceOf(address(this));\\n    WETH.transfer(to, remaining);\\n  }\\n\\n  function buyAndSwap1155(\\n    uint256 vaultId, \\n    uint256[] memory idsIn, \\n    uint256[] memory amounts, \\n    uint256[] memory specificIds, \\n    address[] calldata path,\\n    address to\\n  ) public payable nonReentrant {\\n    require(to != address(0));\\n    require(idsIn.length != 0);\\n    WETH.deposit{value: msg.value}();\\n    uint256 count;\\n    for (uint256 i = 0; i < idsIn.length; i++) {\\n        uint256 amount = amounts[i];\\n        require(amount > 0, \\\"Transferring < 1\\\");\\n        count += amount;\\n    }\\n    IVault vault = IVault(factory.vault(vaultId));\\n    uint256 redeemFees = (vault.targetRedeemFee() * specificIds.length) + (\\n        vault.randomRedeemFee() * (count - specificIds.length)\\n    );\\n    _buyVaultToken(address(vault), redeemFees, msg.value, path);\\n    _swap1155(vaultId, idsIn, amounts, specificIds, to);\\n\\n    // Return extras.\\n    uint256 remaining = WETH.balanceOf(address(this));\\n    WETH.withdraw(remaining);\\n    (bool success, ) = payable(to).call{value: remaining}(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  function buyAndSwap1155WETH(\\n    uint256 vaultId, \\n    uint256[] memory idsIn, \\n    uint256[] memory amounts, \\n    uint256[] memory specificIds, \\n    uint256 maxWethIn, \\n    address[] calldata path,\\n    address to\\n  ) public payable nonReentrant {\\n    require(to != address(0));\\n    require(idsIn.length != 0);\\n    IERC20Upgradeable(address(WETH)).transferFrom(msg.sender, address(this), maxWethIn);\\n    uint256 count;\\n    for (uint256 i = 0; i < idsIn.length; i++) {\\n        uint256 amount = amounts[i];\\n        require(amount > 0, \\\"Transferring < 1\\\");\\n        count += amount;\\n    }\\n    IVault vault = IVault(factory.vault(vaultId));\\n    uint256 redeemFees = (vault.targetRedeemFee() * specificIds.length) + (\\n        vault.randomRedeemFee() * (count - specificIds.length)\\n    );\\n    _buyVaultToken(address(vault), redeemFees, msg.value, path);\\n    _swap1155(vaultId, idsIn, amounts, specificIds, to);\\n\\n    // Return extras.\\n    uint256 remaining = WETH.balanceOf(address(this));\\n    WETH.transfer(to, remaining);\\n  }\\n\\n  function buyAndRedeem(\\n    uint256 vaultId, \\n    uint256 amount,\\n    uint256[] memory specificIds, \\n    address[] calldata path,\\n    address to\\n  ) public payable nonReentrant {\\n    require(to != address(0));\\n    require(amount != 0);\\n    WETH.deposit{value: msg.value}();\\n    IVault vault = IVault(factory.vault(vaultId));\\n    uint256 totalFee = (vault.targetRedeemFee() * specificIds.length) + (\\n        vault.randomRedeemFee() * (amount - specificIds.length)\\n    );\\n    uint256[] memory amounts = _buyVaultToken(address(vault), (amount*BASE)+totalFee, msg.value, path);\\n    _redeem(vaultId, amount, specificIds, to);\\n\\n    uint256 remaining = WETH.balanceOf(address(this));\\n    WETH.withdraw(remaining);\\n    (bool success, ) = payable(to).call{value: remaining}(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  function buyAndRedeemWETH(\\n    uint256 vaultId, \\n    uint256 amount,\\n    uint256[] memory specificIds, \\n    uint256 maxWethIn, \\n    address[] calldata path,\\n    address to\\n  ) public nonReentrant {\\n    require(to != address(0));\\n    require(amount != 0);\\n    IERC20Upgradeable(address(WETH)).transferFrom(msg.sender, address(this), maxWethIn);\\n    IVault vault = IVault(factory.vault(vaultId));\\n    uint256 totalFee = (vault.targetRedeemFee() * specificIds.length) + (\\n        vault.randomRedeemFee() * (amount - specificIds.length)\\n    );\\n    uint256[] memory amounts = _buyVaultToken(address(vault), (amount*BASE) + totalFee, maxWethIn, path);\\n    _redeem(vaultId, amount, specificIds, to);\\n\\n    uint256 remaining = WETH.balanceOf(address(this));\\n    WETH.transfer(to, remaining);\\n  }\\n\\n  function mintAndSell1155(\\n    uint256 vaultId, \\n    uint256[] memory ids, \\n    uint256[] memory amounts,\\n    uint256 minWethOut, \\n    address[] calldata path,\\n    address to\\n  ) public nonReentrant {\\n    require(to != address(0));\\n    require(ids.length != 0);\\n    (address vault, uint256 vaultTokenBalance) = _mint1155(vaultId, ids, amounts);\\n    uint256[] memory amounts = _sellVaultToken(vault, minWethOut, vaultTokenBalance, path);\\n\\n    // Return extras.\\n    uint256 remaining = WETH.balanceOf(address(this));\\n    WETH.withdraw(remaining);\\n    (bool success, ) = payable(to).call{value: remaining}(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  function mintAndSell1155WETH(\\n    uint256 vaultId, \\n    uint256[] memory ids, \\n    uint256[] memory amounts,\\n    uint256 minWethOut, \\n    address[] calldata path,\\n    address to\\n  ) public nonReentrant {\\n    require(to != address(0));\\n    require(ids.length != 0);\\n    (address vault, uint256 vaultTokenBalance) = _mint1155(vaultId, ids, amounts);\\n    uint256[] memory amounts = _sellVaultToken(vault, minWethOut, vaultTokenBalance, path);\\n    uint256 remaining = WETH.balanceOf(address(this));\\n    WETH.transfer(to, remaining);\\n  }\\n\\n  function _mint721(\\n    uint256 vaultId, \\n    uint256[] memory ids\\n  ) internal returns (address, uint256) {\\n    address vault = factory.vault(vaultId);\\n    require(vault != address(0), \\\"Zap: Vault does not exist\\\");\\n\\n    // Transfer tokens to zap and mint to LICO.\\n    address assetAddress = IVault(vault).assetAddress();\\n    for (uint256 i = 0; i < ids.length; i++) {\\n      transferFromERC721(assetAddress, ids[i]);\\n      approveERC721(assetAddress, vault, ids[i]);\\n    }\\n    uint256[] memory emptyIds;\\n    uint256 count = IVault(vault).mint(ids, emptyIds);\\n    uint256 balance = (count * BASE) - (count * IVault(vault).mintFee()); \\n    require(balance == IERC20Upgradeable(vault).balanceOf(address(this)), \\\"Did not receive expected balance\\\");\\n    \\n    return (vault, balance);\\n  }\\n\\n  function _swap721(\\n    uint256 vaultId, \\n    uint256[] memory idsIn,\\n    uint256[] memory idsOut,\\n    address to\\n  ) internal returns (address) {\\n    address vault = factory.vault(vaultId);\\n    require(vault != address(0), \\\"Zap: Vault does not exist\\\");\\n\\n    // Transfer tokens to zap and mint to LICO.\\n    address assetAddress = IVault(vault).assetAddress();\\n    for (uint256 i = 0; i < idsIn.length; i++) {\\n      transferFromERC721(assetAddress, idsIn[i]);\\n      approveERC721(assetAddress, vault, idsIn[i]);\\n    }\\n    uint256[] memory emptyIds;\\n    IVault(vault).swapTo(idsIn, emptyIds, idsOut, to);\\n    \\n    return (vault);\\n  }\\n\\n  function _swap1155(\\n    uint256 vaultId, \\n    uint256[] memory idsIn,\\n    uint256[] memory amounts,\\n    uint256[] memory idsOut,\\n    address to\\n  ) internal returns (address) {\\n    address vault = factory.vault(vaultId);\\n    require(vault != address(0), \\\"Zap: Vault does not exist\\\");\\n\\n    // Transfer tokens to zap and mint.\\n    address assetAddress = IVault(vault).assetAddress();\\n    IERC1155Upgradeable(assetAddress).safeBatchTransferFrom(msg.sender, address(this), idsIn, amounts, \\\"\\\");\\n    IERC1155Upgradeable(assetAddress).setApprovalForAll(vault, true);\\n    IVault(vault).swapTo(idsIn, amounts, idsOut, to);\\n    \\n    return (vault);\\n  }\\n\\n  function _redeem(\\n    uint256 vaultId, \\n    uint256 amount,\\n    uint256[] memory specificIds,\\n    address to\\n  ) internal {\\n    address vault = factory.vault(vaultId);\\n    require(vault != address(0), \\\"Zap: Vault does not exist\\\");\\n    IVault(vault).redeemTo(amount, specificIds, to);\\n  }\\n\\n  function _mint1155(\\n    uint256 vaultId, \\n    uint256[] memory ids,\\n    uint256[] memory amounts\\n  ) internal returns (address, uint256) {\\n    address vault = factory.vault(vaultId);\\n    require(vault != address(0), \\\"Zap: Vault does not exist\\\");\\n\\n    // Transfer tokens to zap and mint.\\n    address assetAddress = IVault(vault).assetAddress();\\n    IERC1155Upgradeable(assetAddress).safeBatchTransferFrom(msg.sender, address(this), ids, amounts, \\\"\\\");\\n    IERC1155Upgradeable(assetAddress).setApprovalForAll(vault, true);\\n    uint256 count = IVault(vault).mint(ids, amounts);\\n    uint256 balance = (count * BASE) - IVault(vault).mintFee()*count;\\n    require(balance == IERC20Upgradeable(vault).balanceOf(address(this)), \\\"Did not receive expected balance\\\");\\n    \\n    return (vault, balance);\\n  }\\n\\n  function _buyVaultToken(\\n    address vault, \\n    uint256 minTokenOut, \\n    uint256 maxWethIn, \\n    address[] calldata path\\n  ) internal returns (uint256[] memory) {\\n    uint256[] memory amounts = apeRouter.swapTokensForExactTokens(\\n      minTokenOut,\\n      maxWethIn,\\n      path, \\n      address(this),\\n      block.timestamp\\n    );\\n\\n    return amounts;\\n  }\\n\\n  function _sellVaultToken(\\n    address vault, \\n    uint256 minWethOut, \\n    uint256 maxTokenIn, \\n    address[] calldata path\\n  ) internal returns (uint256[] memory) {\\n    IERC20Upgradeable(vault).approve(address(apeRouter), maxTokenIn);\\n    uint256[] memory amounts = apeRouter.swapExactTokensForTokens(\\n      maxTokenIn,\\n      minWethOut,\\n      path, \\n      address(this),\\n      block.timestamp\\n    );\\n\\n    return amounts;\\n  }\\n\\n  function transferFromERC721(address assetAddr, uint256 tokenId) internal virtual {\\n    address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\\n    address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\\n    bytes memory data;\\n    if (assetAddr == kitties) {\\n        // Cryptokitties.\\n        data = abi.encodeWithSignature(\\\"transferFrom(address,address,uint256)\\\", msg.sender, address(this), tokenId);\\n    } else if (assetAddr == punks) {\\n        // CryptoPunks.\\n        // Fix here for frontrun attack. Added in v1.0.2.\\n        bytes memory punkIndexToAddress = abi.encodeWithSignature(\\\"punkIndexToAddress(uint256)\\\", tokenId);\\n        (bool checkSuccess, bytes memory result) = address(assetAddr).staticcall(punkIndexToAddress);\\n        (address owner) = abi.decode(result, (address));\\n        require(checkSuccess && owner == msg.sender, \\\"Not the owner\\\");\\n        data = abi.encodeWithSignature(\\\"buyPunk(uint256)\\\", tokenId);\\n    } else {\\n        // Default.\\n        data = abi.encodeWithSignature(\\\"safeTransferFrom(address,address,uint256)\\\", msg.sender, address(this), tokenId);\\n    }\\n    (bool success, bytes memory resultData) = address(assetAddr).call(data);\\n    require(success, string(resultData));\\n  }\\n\\n  function approveERC721(address assetAddr, address to, uint256 tokenId) internal virtual {\\n    address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\\n    address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\\n    bytes memory data;\\n    if (assetAddr == kitties) {\\n        // Cryptokitties.\\n        data = abi.encodeWithSignature(\\\"approve(address,uint256)\\\", to, tokenId);\\n    } else if (assetAddr == punks) {\\n        // CryptoPunks.\\n        data = abi.encodeWithSignature(\\\"offerPunkForSaleToAddress(uint256,uint256,address)\\\", tokenId, 0, to);\\n    } else {\\n        if (IERC721(assetAddr).isApprovedForAll(address(this), to)) {\\n          return;\\n        }\\n        // Default.\\n        data = abi.encodeWithSignature(\\\"setApprovalForAll(address,bool)\\\", to, true);\\n    }\\n    (bool success, bytes memory resultData) = address(assetAddr).call(data);\\n    require(success, string(resultData));\\n  }\\n\\n  // calculates the CREATE2 address for a pair without making any external calls\\n  function pairFor(address tokenA, address tokenB) internal view returns (address pair) {\\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\\n    pair = address(uint160(uint256(keccak256(abi.encodePacked(\\n      hex'ff',\\n      apeRouter.factory(),\\n      keccak256(abi.encodePacked(token0, token1)),\\n      hex'f4ccce374816856d11f00e4069e7cada164065686fbef53c6167a63ec2fd8c5b' // init code hash\\n    )))));\\n  }\\n  // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n  function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n      require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\\n      (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n      require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\\n  }\\n\\n  receive() external payable {\\n\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/solidity/interface/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interface/IEligibility.sol\\\";\\nimport \\\"../token/IERC20Upgradeable.sol\\\";\\nimport \\\"../interface/IVaultFactory.sol\\\";\\n\\ninterface IVault is IERC20Upgradeable {\\n    function manager() external returns (address);\\n    function assetAddress() external returns (address);\\n    function vaultFactory() external returns (IVaultFactory);\\n    function eligibilityStorage() external returns (IEligibility);\\n\\n    function is1155() external returns (bool);\\n    function allowAllItems() external returns (bool);\\n    function enableMint() external returns (bool);\\n    function enableRandomRedeem() external returns (bool);\\n    function enableTargetRedeem() external returns (bool);\\n\\n    function vaultId() external returns (uint256);\\n    function nftIdAt(uint256 holdingsIndex) external view returns (uint256);\\n    function allHoldings() external view returns (uint256[] memory);\\n    function totalHoldings() external view returns (uint256);\\n    function mintFee() external view returns (uint256);\\n    function randomRedeemFee() external view returns (uint256);\\n    function targetRedeemFee() external view returns (uint256);\\n\\n    event VaultInit(\\n        uint256 indexed vaultId,\\n        address assetAddress,\\n        bool is1155,\\n        bool allowAllItems\\n    );\\n\\n    event ManagerSet(address manager);\\n    event EligibilityDeployed(uint256 moduleIndex, address eligibilityAddr);\\n    // event CustomEligibilityDeployed(address eligibilityAddr);\\n\\n    event EnableMintUpdated(bool enabled);\\n    event EnableRandomRedeemUpdated(bool enabled);\\n    event EnableTargetRedeemUpdated(bool enabled);\\n\\n    event MintFeeUpdated(uint256 mintFee);\\n    event RandomRedeemFeeUpdated(uint256 randomRedeemFee);\\n    event TargetRedeemFeeUpdated(uint256 targetRedeemFee);\\n\\n    event Minted(uint256[] nftIds, uint256[] amounts, uint256 feesCharged, address to);\\n    event Redeemed(uint256[] nftIds, uint256[] specificIds, uint256 feesCharged, address to);\\n    event Swapped(\\n        uint256[] nftIds,\\n        uint256[] amounts,\\n        uint256[] specificIds,\\n        uint256[] redeemedIds,\\n        uint256 feesCharged,\\n        address to\\n    );\\n\\n    function __Vault_init(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _assetAddress,\\n        bool _is1155,\\n        bool _allowAllItems\\n    ) external;\\n\\n    function finalizeVault() external;\\n\\n    function setVaultMetadata(\\n        string memory name_, \\n        string memory symbol_\\n    ) external;\\n\\n    function setVaultFeatures(\\n        bool _enableMint,\\n        bool _enableRandomRedeem,\\n        bool _enableTargetRedeem\\n    ) external;\\n\\n    function setFees(\\n        uint64 _mintFee,\\n        uint64 _randomRedeemFee,\\n        uint64 _targetRedeemFee\\n    ) external;\\n\\n    // This function allows for an easy setup of any eligibility module contract from the EligibilityManager.\\n    // It takes in ABI encoded parameters for the desired module. This is to make sure they can all follow\\n    // a similar interface.\\n    function deployEligibilityStorage(\\n        uint256 moduleIndex,\\n        bytes calldata initData\\n    ) external returns (address);\\n\\n    // The manager has control over options like fees and features\\n    function setManager(address _manager) external;\\n\\n    function mint(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts /* ignored for ERC721 vaults */\\n    ) external returns (uint256);\\n\\n    function mintTo(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\\n        address to\\n    ) external returns (uint256);\\n\\n    function redeem(uint256 amount, uint256[] calldata specificIds)\\n        external\\n        returns (uint256[] calldata);\\n\\n    function redeemTo(\\n        uint256 amount,\\n        uint256[] calldata specificIds,\\n        address to\\n    ) external returns (uint256[] calldata);\\n\\n    function swap(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\\n        uint256[] calldata specificIds\\n    ) external returns (uint256[] calldata);\\n\\n    function swapTo(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\\n        uint256[] calldata specificIds,\\n        address to\\n    ) external returns (uint256[] calldata);\\n\\n    function allValidNFTs(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/solidity/interface/IVaultFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/IBeacon.sol\\\";\\n\\ninterface IVaultFactory is IBeacon {\\n  // Read functions.\\n  function numVaults() external view returns (uint256);\\n  function zapContract() external view returns (address);\\n  function feeDistributor() external view returns (address);\\n  function eligibilityManager() external view returns (address);\\n  function vault(uint256 vaultId) external view returns (address);\\n  function vaultsForAsset(address asset) external view returns (address[] memory);\\n  function isLocked(uint256 id) external view returns (bool);\\n  function excludedFromFees(address addr) external view returns (bool);\\n  function factoryMintFee() external view returns (uint64);\\n  function factoryRandomRedeemFee() external view returns (uint64);\\n  function factoryTargetRedeemFee() external view returns (uint64);\\n  function vaultFees(uint256 vaultId) external view returns (uint256, uint256, uint256);\\n\\n  event NewFeeDistributor(address oldDistributor, address newDistributor);\\n  event NewZapContract(address oldZap, address newZap);\\n  event FeeExclusion(address feeExcluded, bool excluded);\\n  event NewEligibilityManager(address oldEligManager, address newEligManager);\\n  event NewVault(uint256 indexed vaultId, address vaultAddress, address assetAddress);\\n  event UpdateVaultFees(uint256 vaultId, uint256 mintFee, uint256 randomRedeemFee, uint256 targetRedeemFee);\\n  event DisableVaultFees(uint256 vaultId);\\n  event UpdateFactoryFees(uint256 mintFee, uint256 randomRedeemFee, uint256 targetRedeemFee);\\n\\n  // Write functions.\\n  function __VaultFactory_init(address _vaultImpl, address _feeDistributor) external;\\n  function createVault(\\n      string calldata name,\\n      string calldata symbol,\\n      address _assetAddress,\\n      bool is1155,\\n      bool allowAllItems\\n  ) external returns (uint256);\\n  function setFeeDistributor(address _feeDistributor) external;\\n  function setEligibilityManager(address _eligibilityManager) external;\\n  function setZapContract(address _zapContract) external;\\n  function setFeeExclusion(address _excludedAddr, bool excluded) external;\\n\\n  function setFactoryFees(\\n    uint64 mintFee, \\n    uint64 randomRedeemFee, \\n    uint64 targetRedeemFee\\n  ) external; \\n  function setVaultFees(\\n      uint256 vaultId, \\n      uint64 mintFee, \\n      uint64 randomRedeemFee, \\n      uint64 targetRedeemFee\\n  ) external;\\n  function disableVaultFees(uint256 vaultId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/solidity/interface/IFeeDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IFeeDistributor {\\n  \\n  struct FeeReceiver {\\n    uint256 allocPoint;\\n    address receiver;\\n    bool isContract;\\n  }\\n\\n  function vaultFactory() external returns (address);\\n  function lpStaking() external returns (address);\\n  function treasury() external returns (address);\\n  function defaultTreasuryAlloc() external returns (uint256);\\n  function defaultLPAlloc() external returns (uint256);\\n  function allocTotal(uint256 vaultId) external returns (uint256);\\n  function specificTreasuryAlloc(uint256 vaultId) external returns (uint256);\\n\\n  // Write functions.\\n  function __FeeDistributor__init__(address _lpStaking, address _treasury) external;\\n  function rescueTokens(address token) external;\\n  function distribute(uint256 vaultId) external;\\n  function addReceiver(uint256 _vaultId, uint256 _allocPoint, address _receiver, bool _isContract) external;\\n  function initializeVaultReceivers(uint256 _vaultId) external;\\n  function changeMultipleReceiverAlloc(\\n    uint256[] memory _vaultIds, \\n    uint256[] memory _receiverIdxs, \\n    uint256[] memory allocPoints\\n  ) external;\\n\\n  function changeMultipleReceiverAddress(\\n    uint256[] memory _vaultIds, \\n    uint256[] memory _receiverIdxs, \\n    address[] memory addresses, \\n    bool[] memory isContracts\\n  ) external;\\n  function changeReceiverAlloc(uint256 _vaultId, uint256 _idx, uint256 _allocPoint) external;\\n  function changeReceiverAddress(uint256 _vaultId, uint256 _idx, address _address, bool _isContract) external;\\n  function removeReceiver(uint256 _vaultId, uint256 _receiverIdx) external;\\n\\n  // Configuration functions.\\n  function setTreasuryAddress(address _treasury) external;\\n  function setDefaultTreasuryAlloc(uint256 _allocPoint) external;\\n  function setSpecificTreasuryAlloc(uint256 _vaultId, uint256 _allocPoint) external;\\n  function setLPStakingAddress(address _lpStaking) external;\\n  function setVaultFactory(address _factory) external;\\n  function setDefaultLPAlloc(uint256 _allocPoint) external;\\n} \"\r\n    },\r\n    \"contracts/solidity/interface/ILPStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ILPStaking {\\n    function vaultFactory() external view returns (address);\\n    function rewardDistTokenImpl() external view returns (address);\\n    function stakingTokenProvider() external view returns (address);\\n    function vaultToken(address _stakingToken) external view returns (address);\\n    function stakingToken(address _vaultToken) external view returns (address);\\n    function rewardDistributionToken(uint256 vaultId) external view returns (address);\\n    function newRewardDistributionToken(uint256 vaultId) external view returns (address);\\n    function oldRewardDistributionToken(uint256 vaultId) external view returns (address);\\n    function unusedRewardDistributionToken(uint256 vaultId) external view returns (address);\\n    function rewardDistributionTokenAddr(address stakingToken, address rewardToken) external view returns (address);\\n    \\n    // Write functions.\\n    function __LPStaking__init(address _stakingTokenProvider) external;\\n    function setVaultFactory(address newFactory) external;\\n    function setStakingTokenProvider(address newProvider) external;\\n    function addPoolForVault(uint256 vaultId) external;\\n    function updatePoolForVault(uint256 vaultId) external;\\n    function updatePoolForVaults(uint256[] calldata vaultId) external;\\n    function receiveRewards(uint256 vaultId, uint256 amount) external returns (bool);\\n    function deposit(uint256 vaultId, uint256 amount) external;\\n    function timelockDepositFor(uint256 vaultId, address account, uint256 amount, uint256 timelockLength) external;\\n    function exit(uint256 vaultId, uint256 amount) external;\\n    function rescue(uint256 vaultId) external;\\n    function withdraw(uint256 vaultId, uint256 amount) external;\\n    function claimRewards(uint256 vaultId) external;\\n}\"\r\n    },\r\n    \"contracts/solidity/interface/ITimelockRewardDistributionToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/IERC20Upgradeable.sol\\\";\\n\\ninterface ITimelockRewardDistributionToken is IERC20Upgradeable {\\n  function distributeRewards(uint amount) external;\\n  function __TimelockRewardDistributionToken_init(IERC20Upgradeable _target, string memory _name, string memory _symbol) external;\\n  function mint(address account, address to, uint256 amount) external;\\n  function timelockMint(address account, uint256 amount, uint256 timelockLength) external;\\n  function burnFrom(address account, uint256 amount) external;\\n  function withdrawReward(address user) external;\\n  function dividendOf(address _owner) external view returns(uint256);\\n  function withdrawnRewardOf(address _owner) external view returns(uint256);\\n  function accumulativeRewardOf(address _owner) external view returns(uint256);\\n  function timelockUntil(address account) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/solidity/interface/IUniswapV2Router01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB)\\n        external\\n        pure\\n        returns (uint256 amountB);\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"contracts/solidity/testing/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/solidity/token/IERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interface/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"contracts/solidity/token/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/solidity/token/ERC721HolderUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721HolderUpgradeable is IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/solidity/token/ERC1155HolderUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155ReceiverUpgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155HolderUpgradeable is ERC1155ReceiverUpgradeable {\\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/solidity/util/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/solidity/interface/IEligibility.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IEligibility {\\n    // Read functions.\\n    function name() external pure returns (string memory);\\n    function finalized() external view returns (bool);\\n    function targetAsset() external pure returns (address);\\n    function checkAllEligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool);\\n    function checkEligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool[] memory);\\n    function checkAllIneligible(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool);\\n    function checkIsEligible(uint256 tokenId) external view returns (bool);\\n\\n    // Write functions.\\n    function __Eligibility_init_bytes(bytes calldata configData) external;\\n    function beforeMintHook(uint256[] calldata tokenIds) external;\\n    function afterMintHook(uint256[] calldata tokenIds) external;\\n    function beforeRedeemHook(uint256[] calldata tokenIds) external;\\n    function afterRedeemHook(uint256[] calldata tokenIds) external;\\n}\\n\"\r\n    },\r\n    \"contracts/solidity/proxy/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function childImplementation() external view returns (address);\\n    function upgradeChildTo(address newImplementation) external;\\n}\"\r\n    },\r\n    \"contracts/solidity/testing/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/solidity/interface/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/solidity/token/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/solidity/token/ERC1155ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../util/ERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/solidity/token/IERC1155ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interface/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/solidity/util/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interface/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/solidity/util/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/solidity/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_apeRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apeRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"specificIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"buyAndRedeem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"specificIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"maxWethIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"buyAndRedeemWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"idsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"specificIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"buyAndSwap1155\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"idsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"specificIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"maxWethIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"buyAndSwap1155WETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"idsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"specificIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"buyAndSwap721\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"idsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"specificIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"maxWethIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"buyAndSwap721WETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IVaultFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpStaking\",\"outputs\":[{\"internalType\":\"contract ILPStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minWethOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintAndSell1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minWethOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintAndSell1155WETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minWethOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintAndSell721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minWethOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintAndSell721WETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MarketplaceZap", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "0000000000000000000000002254c09b79e73306d7eacb8466a9938dac601330000000000000000000000000cf0febd3f17cef5b47b0cd257acf6025c5bff3b7", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}