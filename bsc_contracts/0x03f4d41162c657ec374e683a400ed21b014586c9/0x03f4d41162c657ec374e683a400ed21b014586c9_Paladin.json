{"SourceCode": "// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: DecimalMath.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\nlibrary MySafeMath {\r\n    using SafeMath for uint256;\r\n\r\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 quotient = a.div(b);\r\n        uint256 remainder = a - quotient * b;\r\n        if (remainder > 0) {\r\n            return quotient + 1;\r\n        } else {\r\n            return quotient;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary DecimalMath {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 internal constant ONE = 10**18;\r\n    uint256 internal constant ONE2 = 10**36;\r\n\r\n    function mulFloor(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(d) / (10**18);\r\n    }\r\n\r\n    function mulCeil(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return MySafeMath.divCeil(target.mul(d), 10**18);\r\n    }\r\n\r\n    function divFloor(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(10**18).div(d);\r\n    }\r\n\r\n    function divCeil(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return MySafeMath.divCeil(target.mul(10**18), d);\r\n    }\r\n\r\n    function reciprocalFloor(uint256 target) internal pure returns (uint256) {\r\n        return uint256(10**36).div(target);\r\n    }\r\n\r\n    function reciprocalCeil(uint256 target) internal pure returns (uint256) {\r\n        return MySafeMath.divCeil(uint256(10**36), target);\r\n    }\r\n}\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: Vbaby.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n// pragma experimental ABIEncoderV2;  \r\n\r\n\r\ncontract Paladin is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // ============ Storage(ERC20) ============\r\n\r\n    string public name = \"Paladin Token\";\r\n    string public symbol = \"Paladin\";\r\n    uint8 public decimals = 18;\r\n\r\n    mapping(address => mapping(address => uint256)) internal _allowed;\r\n\r\n    // ============ Storage ============\r\n\r\n    address public _knightToken;\r\n    address public _knightTeam;\r\n    address public _knightReserve;\r\n    address public _knightTreasury;\r\n    bool public _canTransfer;\r\n    address public constant hole = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    // staking reward parameters\r\n    uint256 public _knightPerBlock;\r\n    uint256 public constant _superiorRatio = 10**17; // 0.1\r\n    uint256 public constant _knightRatio = 10; // 10\r\n    uint256 public _knightFeeBurnRatio = 50 * 10**16; //30% => 0.3\r\n    uint256 public _knightFeeReserveRatio = 0;\r\n    uint256 public _feeRatio = 10 * 10**16; //10%; => 0.1\r\n    // accounting\r\n    uint112 public alpha = 10**18; // 1\r\n    uint112 public _totalBlockDistribution;\r\n    uint32 public _lastRewardBlock;\r\n\r\n    uint256 public _totalBlockReward;\r\n    uint256 public _totalStakingPower;\r\n    mapping(address => UserInfo) public userInfo;\r\n\r\n    uint256 public _superiorMinKNIGHT = 100e18; //The superior must obtain the min KNIGHT that should be pledged for invitation rewards\r\n\r\n    struct UserInfo {\r\n        uint128 stakingPower;\r\n        uint128 superiorSP;\r\n        address superior;\r\n        uint256 credit;\r\n        uint256 creditDebt;\r\n    }\r\n\r\n    // ============ Events ============\r\n\r\n    event MintPALADIN(\r\n        address user,\r\n        address superior,\r\n        uint256 mintKNIGHT,\r\n        uint256 totalStakingPower\r\n    );\r\n    event RedeemPALADIN(\r\n        address user,\r\n        uint256 receiveKNIGHT,\r\n        uint256 burnKNIGHT,\r\n        uint256 feeKNIGHT,\r\n        uint256 reserveKNIGHT,\r\n        uint256 totalStakingPower\r\n    );\r\n    event DonateKNIGHT(address user, uint256 donateKNIGHT);\r\n    event SetCanTransfer(bool allowed);\r\n\r\n    event PreDeposit(uint256 knightAmount);\r\n    event ChangePerReward(uint256 knightPerBlock);\r\n    event UpdateKNIGHTFeeBurnRatio(uint256 knightFeeBurnRatio);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 amount\r\n    );\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier canTransfer() {\r\n        require(_canTransfer, \"PALADINToken: not the allowed transfer\");\r\n        _;\r\n    }\r\n\r\n    modifier balanceEnough(address account, uint256 amount) {\r\n        require(\r\n            availableBalanceOf(account) >= amount,\r\n            \"PALADINToken: available amount not enough\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    event TokenInfo(uint256 knightTokenSupply, uint256 knightBalanceInPALADIN);\r\n    event CurrentUserInfo(\r\n        address user,\r\n        uint128 stakingPower,\r\n        uint128 superiorSP,\r\n        address superior,\r\n        uint256 credit,\r\n        uint256 creditDebt\r\n    );\r\n\r\n    function logTokenInfo(IERC20 token) internal {\r\n        emit TokenInfo(token.totalSupply(), token.balanceOf(address(this)));\r\n    }\r\n\r\n    function logCurrentUserInfo(address user) internal {\r\n        UserInfo storage currentUser = userInfo[user];\r\n        emit CurrentUserInfo(\r\n            user,\r\n            currentUser.stakingPower,\r\n            currentUser.superiorSP,\r\n            currentUser.superior,\r\n            currentUser.credit,\r\n            currentUser.creditDebt\r\n        );\r\n    }\r\n\r\n    // ============ Constructor ============\r\n\r\n    constructor(\r\n        address knightToken,\r\n        address knightTeam,\r\n        address knightReserve,\r\n        address knightTreasury\r\n    ) {\r\n        _knightToken = knightToken;\r\n        _knightTeam = knightTeam;\r\n        _knightReserve = knightReserve;\r\n        _knightTreasury = knightTreasury;\r\n        changePerReward(4000000000000000000);\r\n    }\r\n\r\n    // ============ Ownable Functions ============`\r\n\r\n    function setCanTransfer(bool allowed) public onlyOwner {\r\n        _canTransfer = allowed;\r\n        emit SetCanTransfer(allowed);\r\n    }\r\n\r\n    function changePerReward(uint256 knightPerBlock) public onlyOwner {\r\n        _updateAlpha();\r\n        _knightPerBlock = knightPerBlock;\r\n        logTokenInfo(IERC20(_knightToken));\r\n        emit ChangePerReward(knightPerBlock);\r\n    }\r\n\r\n    function updateKNIGHTFeeBurnRatio(uint256 knightFeeBurnRatio) public onlyOwner {\r\n        _knightFeeBurnRatio = knightFeeBurnRatio;\r\n        emit UpdateKNIGHTFeeBurnRatio(_knightFeeBurnRatio);\r\n    }\r\n\r\n    function updateKNIGHTFeeReserveRatio(uint256 knightFeeReserve)\r\n        public\r\n        onlyOwner\r\n    {\r\n        _knightFeeReserveRatio = knightFeeReserve;\r\n    }\r\n\r\n    function updateTeamAddress(address team) public onlyOwner {\r\n        _knightTeam = team;\r\n    }\r\n\r\n    function updateTreasuryAddress(address treasury) public onlyOwner {\r\n        _knightTreasury = treasury;\r\n    }\r\n\r\n    function updateReserveAddress(address newAddress) public onlyOwner {\r\n        _knightReserve = newAddress;\r\n    }\r\n\r\n    function setSuperiorMinKNIGHT(uint256 val) public onlyOwner {\r\n        _superiorMinKNIGHT = val;\r\n    }\r\n\r\n    function emergencyWithdraw() public onlyOwner {\r\n        uint256 knightBalance = IERC20(_knightToken).balanceOf(address(this));\r\n        IERC20(_knightToken).safeTransfer(owner(), knightBalance);\r\n    }\r\n\r\n    // ============ Mint & Redeem & Donate ============\r\n\r\n    function mint(uint256 knightAmount, address superiorAddress) public {\r\n        require(\r\n            superiorAddress != address(0) && superiorAddress != msg.sender,\r\n            \"PALADINToken: Superior INVALID\"\r\n        );\r\n        require(knightAmount >= 1e18, \"PALADINToken: must mint greater than 1\");\r\n\r\n        UserInfo storage user = userInfo[msg.sender];\r\n\r\n        if (user.superior == address(0)) {\r\n            require(\r\n                superiorAddress == _knightTeam ||\r\n                    userInfo[superiorAddress].superior != address(0),\r\n                \"PALADINToken: INVALID_SUPERIOR_ADDRESS\"\r\n            );\r\n            user.superior = superiorAddress;\r\n        }       \r\n\r\n        if (_superiorMinKNIGHT > 0) {\r\n            uint256 curKNIGHT = knightBalanceOf(user.superior);\r\n            if (curKNIGHT < _superiorMinKNIGHT) {\r\n                user.superior = _knightTeam;\r\n                superiorAddress = _knightTeam;\r\n            }\r\n        }\r\n\r\n        _updateAlpha();\r\n\r\n        IERC20(_knightToken).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            knightAmount\r\n        );\r\n\r\n        uint256 newStakingPower = DecimalMath.divFloor(knightAmount, alpha);\r\n\r\n        _mint(user, newStakingPower);\r\n\r\n        logTokenInfo(IERC20(_knightToken));\r\n        logCurrentUserInfo(msg.sender);\r\n        logCurrentUserInfo(user.superior);\r\n        emit MintPALADIN(\r\n            msg.sender,\r\n            superiorAddress,\r\n            knightAmount,\r\n            _totalStakingPower\r\n        );\r\n    }\r\n\r\n    function redeem(uint256 paladinAmount, bool all)\r\n        public\r\n        balanceEnough(msg.sender, paladinAmount) {\r\n        _updateAlpha();\r\n        UserInfo storage user = userInfo[msg.sender];\r\n\r\n        uint256 knightAmount;\r\n        uint256 stakingPower;\r\n\r\n        if (all) {\r\n            stakingPower = uint256(user.stakingPower).sub(\r\n                DecimalMath.divFloor(user.credit, alpha)\r\n            );\r\n            knightAmount = DecimalMath.mulFloor(stakingPower, alpha);\r\n        } else {\r\n            knightAmount = paladinAmount.mul(_knightRatio);\r\n            stakingPower = DecimalMath.divFloor(knightAmount, alpha);\r\n        }\r\n\r\n        _redeem(user, stakingPower);\r\n\r\n        (\r\n            uint256 knightReceive,\r\n            uint256 burnKnightAmount,\r\n            uint256 withdrawFeeAmount,\r\n            uint256 reserveAmount\r\n        ) = getWithdrawResult(knightAmount);\r\n\r\n        IERC20(_knightToken).safeTransfer(msg.sender, knightReceive);\r\n\r\n        if (burnKnightAmount > 0) {\r\n            IERC20(_knightToken).safeTransfer(hole, burnKnightAmount);\r\n        }\r\n        if (reserveAmount > 0) {\r\n            IERC20(_knightToken).safeTransfer(_knightReserve, reserveAmount);\r\n        }\r\n\r\n        if (withdrawFeeAmount > 0) {\r\n            alpha = uint112(\r\n                uint256(alpha).add(\r\n                    DecimalMath.divFloor(withdrawFeeAmount, _totalStakingPower)\r\n                )\r\n            );\r\n        }\r\n\r\n        logTokenInfo(IERC20(_knightToken));\r\n        logCurrentUserInfo(msg.sender);\r\n        logCurrentUserInfo(user.superior);\r\n        emit RedeemPALADIN(\r\n            msg.sender,\r\n            knightReceive,\r\n            burnKnightAmount,\r\n            withdrawFeeAmount,\r\n            reserveAmount,\r\n            _totalStakingPower\r\n        );\r\n    }\r\n\r\n    function donate(uint256 knightAmount) public {\r\n        IERC20(_knightToken).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            knightAmount\r\n        );\r\n\r\n        alpha = uint112(\r\n            uint256(alpha).add(\r\n                DecimalMath.divFloor(knightAmount, _totalStakingPower)\r\n            )\r\n        );\r\n        logTokenInfo(IERC20(_knightToken));\r\n        emit DonateKNIGHT(msg.sender, knightAmount);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256 paladinSupply) {\r\n        uint256 totalKnight = IERC20(_knightToken).balanceOf(address(this));\r\n        (, uint256 curDistribution) = getLatestAlpha();\r\n\r\n        uint256 actualKnight = totalKnight.add(curDistribution);\r\n        paladinSupply = actualKnight / _knightRatio;\r\n    }\r\n\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        returns (uint256 paladinAmount)\r\n    {\r\n        paladinAmount = knightBalanceOf(account) / _knightRatio;\r\n    }\r\n\r\n    function transfer(address to, uint256 paladinAmount) public returns (bool) {\r\n        _updateAlpha();\r\n        _transfer(msg.sender, to, paladinAmount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 paladinAmount)\r\n        public\r\n        canTransfer\r\n        returns (bool) {\r\n        _allowed[msg.sender][spender] = paladinAmount;\r\n        emit Approval(msg.sender, spender, paladinAmount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 paladinAmount\r\n    ) public returns (bool) {\r\n        require(\r\n            paladinAmount <= _allowed[from][msg.sender],\r\n            \"ALLOWANCE_NOT_ENOUGH\"\r\n        );\r\n        _updateAlpha();\r\n        _transfer(from, to, paladinAmount);\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(\r\n            paladinAmount\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    // ============ Helper Functions ============\r\n\r\n    function getLatestAlpha()\r\n        public\r\n        view   \r\n        returns (uint256 newAlpha, uint256 curDistribution) {\r\n        if (_lastRewardBlock == 0) {\r\n            curDistribution = 0;\r\n        } else {\r\n            curDistribution = _knightPerBlock * (block.number - _lastRewardBlock);\r\n        }\r\n        if (_totalStakingPower > 0) {\r\n            newAlpha = uint256(alpha).add(\r\n                DecimalMath.divFloor(curDistribution, _totalStakingPower)\r\n            );\r\n        } else {\r\n            newAlpha = alpha;\r\n        }\r\n    }\r\n\r\n    function availableBalanceOf(address account)\r\n        public\r\n        view\r\n        returns (uint256 paladinAmount) {\r\n        paladinAmount = balanceOf(account);\r\n    }\r\n\r\n    function knightBalanceOf(address account)\r\n        public\r\n        view\r\n        returns (uint256 knightAmount) {\r\n        UserInfo memory user = userInfo[account];\r\n        (uint256 newAlpha, ) = getLatestAlpha();\r\n        uint256 nominalKnight = DecimalMath.mulFloor(\r\n            uint256(user.stakingPower),\r\n            newAlpha\r\n        );\r\n        if (nominalKnight > user.credit) {\r\n            knightAmount = nominalKnight - user.credit;\r\n        } else {\r\n            knightAmount = 0;\r\n        }\r\n    }\r\n\r\n    function getWithdrawResult(uint256 knightAmount)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 knightReceive,  // 90\r\n            uint256 burnKnightAmount, // 5\r\n            uint256 withdrawFeeKnightAmount,  // 5\r\n            uint256 reserveKnightAmount       // 0\r\n        )\r\n    {\r\n        uint256 feeRatio = _feeRatio;\r\n\r\n        withdrawFeeKnightAmount = DecimalMath.mulFloor(knightAmount, feeRatio);\r\n        knightReceive = knightAmount.sub(withdrawFeeKnightAmount);\r\n\r\n        burnKnightAmount = DecimalMath.mulFloor(\r\n            withdrawFeeKnightAmount,\r\n            _knightFeeBurnRatio                         // 50%\r\n        );\r\n        reserveKnightAmount = DecimalMath.mulFloor(\r\n            withdrawFeeKnightAmount,\r\n            _knightFeeReserveRatio                        \r\n        );\r\n\r\n        withdrawFeeKnightAmount = withdrawFeeKnightAmount.sub(burnKnightAmount);\r\n        withdrawFeeKnightAmount = withdrawFeeKnightAmount.sub(reserveKnightAmount);\r\n    }\r\n\r\n    function setRatioValue(uint256 ratioFee) public onlyOwner {\r\n        _feeRatio = ratioFee;\r\n    }\r\n\r\n    function getSuperior(address account)\r\n        public\r\n        view\r\n        returns (address superior)\r\n    {\r\n        return userInfo[account].superior;\r\n    }\r\n\r\n    // ============ Internal Functions ============\r\n\r\n    function _updateAlpha() internal {\r\n        (uint256 newAlpha, uint256 curDistribution) = getLatestAlpha();\r\n        uint256 newTotalDistribution = curDistribution.add(\r\n            _totalBlockDistribution\r\n        );  \r\n        require(\r\n            newAlpha <= type(uint112).max && newTotalDistribution <= type(uint112).max,\r\n            \"OVERFLOW\"          \r\n        );       \r\n        alpha = uint112(newAlpha);\r\n        _totalBlockDistribution = uint112(newTotalDistribution);\r\n        _lastRewardBlock = uint32(block.number);\r\n\r\n        if (curDistribution > 0) {\r\n            IERC20(_knightToken).safeTransferFrom(\r\n                _knightTreasury,\r\n                address(this),\r\n                curDistribution\r\n            );\r\n\r\n            _totalBlockReward = _totalBlockReward.add(curDistribution);\r\n            logTokenInfo(IERC20(_knightToken));\r\n            emit PreDeposit(curDistribution);\r\n        }\r\n    }\r\n\r\n    function _mint(UserInfo storage to, uint256 stakingPower) internal {\r\n        require(stakingPower <= type(uint128).max, \"OVERFLOW\");\r\n        UserInfo storage superior = userInfo[to.superior];\r\n        uint256 superiorIncreSP = DecimalMath.mulFloor(\r\n            stakingPower,\r\n            _superiorRatio\r\n        );\r\n        uint256 superiorIncreCredit = DecimalMath.mulFloor(\r\n            superiorIncreSP,\r\n            alpha\r\n        );\r\n\r\n        to.stakingPower = uint128(uint256(to.stakingPower).add(stakingPower));\r\n        to.superiorSP = uint128(uint256(to.superiorSP).add(superiorIncreSP));\r\n\r\n        superior.stakingPower = uint128(\r\n            uint256(superior.stakingPower).add(superiorIncreSP)\r\n        );\r\n        superior.credit = uint128(\r\n            uint256(superior.credit).add(superiorIncreCredit)\r\n        );\r\n\r\n        _totalStakingPower = _totalStakingPower.add(stakingPower).add(\r\n            superiorIncreSP\r\n        );\r\n    }\r\n\r\n    function _redeem(UserInfo storage from, uint256 stakingPower) internal {\r\n        from.stakingPower = uint128(\r\n            uint256(from.stakingPower).sub(stakingPower)\r\n        );\r\n\r\n        uint256 userCreditSP = DecimalMath.divFloor(from.credit, alpha); // 0, 0.524094315927291199\r\n        if (from.stakingPower > userCreditSP) {                          // \r\n            from.stakingPower = uint128(\r\n                uint256(from.stakingPower).sub(userCreditSP)\r\n            );\r\n        } else {\r\n            userCreditSP = from.stakingPower;\r\n            from.stakingPower = 0;\r\n        }\r\n        from.creditDebt = from.creditDebt.add(from.credit);\r\n        from.credit = 0;\r\n\r\n        // superior decrease sp = min(stakingPower*0.1, from.superiorSP)\r\n        uint256 superiorDecreSP = DecimalMath.mulFloor(\r\n            stakingPower,\r\n            _superiorRatio\r\n        );\r\n        superiorDecreSP = from.superiorSP <= superiorDecreSP\r\n            ? from.superiorSP\r\n            : superiorDecreSP;\r\n        from.superiorSP = uint128(\r\n            uint256(from.superiorSP).sub(superiorDecreSP)\r\n        );\r\n        uint256 superiorDecreCredit = DecimalMath.mulFloor(\r\n            superiorDecreSP,\r\n            alpha\r\n        );\r\n\r\n        // superiorDecreCredit\r\n        UserInfo storage superior = userInfo[from.superior];\r\n        if (superiorDecreCredit > superior.creditDebt) {\r\n            uint256 dec = DecimalMath.divFloor(superior.creditDebt, alpha);\r\n            superiorDecreSP = dec >= superiorDecreSP\r\n                ? 0\r\n                : superiorDecreSP.sub(dec);\r\n            superiorDecreCredit = superiorDecreCredit.sub(superior.creditDebt);\r\n            superior.creditDebt = 0;\r\n        } else {\r\n            superior.creditDebt = superior.creditDebt.sub(superiorDecreCredit);\r\n            superiorDecreCredit = 0;\r\n            superiorDecreSP = 0;\r\n        }\r\n        uint256 creditSP = DecimalMath.divFloor(superior.credit, alpha);\r\n\r\n        if (superiorDecreSP >= creditSP) {\r\n            superior.credit = 0;\r\n            superior.stakingPower = uint128(\r\n                uint256(superior.stakingPower).sub(creditSP)\r\n            );\r\n        } else {\r\n            superior.credit = uint128(\r\n                uint256(superior.credit).sub(superiorDecreCredit)\r\n            );\r\n            superior.stakingPower = uint128(\r\n                uint256(superior.stakingPower).sub(superiorDecreSP)\r\n            );\r\n        }\r\n\r\n        _totalStakingPower = _totalStakingPower\r\n            .sub(stakingPower)\r\n            .sub(superiorDecreSP)\r\n            .sub(userCreditSP);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 paladinAmount\r\n    ) internal canTransfer balanceEnough(from, paladinAmount) {\r\n        require(from != address(0), \"transfer from the zero address\");\r\n        require(to != address(0), \"transfer to the zero address\");\r\n        require(from != to, \"transfer from same with to\");\r\n\r\n        uint256 stakingPower = DecimalMath.divFloor(\r\n            paladinAmount * _knightRatio,\r\n            alpha\r\n        );\r\n\r\n        UserInfo storage fromUser = userInfo[from];\r\n        UserInfo storage toUser = userInfo[to];\r\n\r\n        _redeem(fromUser, stakingPower);\r\n        _mint(toUser, stakingPower);\r\n\r\n        logTokenInfo(IERC20(_knightToken));\r\n        logCurrentUserInfo(from);\r\n        logCurrentUserInfo(fromUser.superior);\r\n        logCurrentUserInfo(to);\r\n        logCurrentUserInfo(toUser.superior);\r\n        emit Transfer(from, to, paladinAmount);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"knightToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"knightTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"knightReserve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"knightTreasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"knightPerBlock\",\"type\":\"uint256\"}],\"name\":\"ChangePerReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"stakingPower\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"superiorSP\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"superior\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creditDebt\",\"type\":\"uint256\"}],\"name\":\"CurrentUserInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"donateKNIGHT\",\"type\":\"uint256\"}],\"name\":\"DonateKNIGHT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"superior\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintKNIGHT\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStakingPower\",\"type\":\"uint256\"}],\"name\":\"MintPALADIN\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"knightAmount\",\"type\":\"uint256\"}],\"name\":\"PreDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receiveKNIGHT\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnKNIGHT\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeKNIGHT\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserveKNIGHT\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStakingPower\",\"type\":\"uint256\"}],\"name\":\"RedeemPALADIN\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"SetCanTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"knightTokenSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"knightBalanceInPALADIN\",\"type\":\"uint256\"}],\"name\":\"TokenInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"knightFeeBurnRatio\",\"type\":\"uint256\"}],\"name\":\"UpdateKNIGHTFeeBurnRatio\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_canTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_knightFeeBurnRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_knightFeeReserveRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_knightPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_knightRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_knightReserve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_knightTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_knightToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_knightTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastRewardBlock\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_superiorMinKNIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_superiorRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalBlockDistribution\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalBlockReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalStakingPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alpha\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"paladinAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"availableBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"paladinAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"paladinAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"knightPerBlock\",\"type\":\"uint256\"}],\"name\":\"changePerReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"knightAmount\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestAlpha\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newAlpha\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"curDistribution\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getSuperior\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"superior\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"knightAmount\",\"type\":\"uint256\"}],\"name\":\"getWithdrawResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"knightReceive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnKnightAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFeeKnightAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveKnightAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hole\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"knightBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"knightAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"knightAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"superiorAddress\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paladinAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"all\",\"type\":\"bool\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setCanTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratioFee\",\"type\":\"uint256\"}],\"name\":\"setRatioValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setSuperiorMinKNIGHT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"paladinSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"paladinAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"paladinAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"knightFeeBurnRatio\",\"type\":\"uint256\"}],\"name\":\"updateKNIGHTFeeBurnRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"knightFeeReserve\",\"type\":\"uint256\"}],\"name\":\"updateKNIGHTFeeReserveRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateReserveAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"team\",\"type\":\"address\"}],\"name\":\"updateTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"updateTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"stakingPower\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"superiorSP\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"superior\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creditDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Paladin", "CompilerVersion": "v0.8.1+commit.df193b15", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d23811058eb6e7967d9a00dc3886e75610c4abba0000000000000000000000007fac5419c7cb109b7069eb9fbdb3f1ec5dc96a240000000000000000000000007fac5419c7cb109b7069eb9fbdb3f1ec5dc96a240000000000000000000000007fac5419c7cb109b7069eb9fbdb3f1ec5dc96a24", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1487593b1628ba3ee0056f702df0231db99faf2e527ea43d9f98c5aed3237868"}