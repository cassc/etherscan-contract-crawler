{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.6;\r\n\r\ninterface IBEP20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function decimals() external view returns (uint8);\r\n  function symbol() external view returns (string memory);\r\n  function name() external view returns (string memory);\r\n  function getOwner() external view returns (address);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Context {\r\n  constructor ()  { }\r\n  function _msgSender() internal view returns (address) {\r\n    return msg.sender;\r\n  }\r\n  function _msgData() internal view returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n    return c;\r\n  }\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n    function initialize(address, address) external;\r\n    // add\r\n    function setReserveSwitch(bool) external;\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WHT() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\ncontract Ownable is Context {\r\n  address private _owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  constructor () {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\ncontract TokenDividendTracker is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address[] public shareholders;\r\n    uint256 public currentIndex;  \r\n    mapping(address => bool) private _updated;\r\n    mapping (address => uint256) public shareholderIndexes;\r\n\r\n    address public  uniswapV2Pair;\r\n    address public lpRewardToken;\r\n    // last time dividen\r\n    uint256 public LPRewardLastSendTime;\r\n    uint256 public nowAddLPUSDT = 200000000000000000000;\r\n\r\n    bool public reserveSwitch = true;\r\n\r\n    constructor(address uniswapV2Pair_, address lpRewardToken_){\r\n        uniswapV2Pair = uniswapV2Pair_;\r\n        lpRewardToken = lpRewardToken_;\r\n    }\r\n\r\n    function setNowAddLPUSDT(uint256 num) public onlyOwner {\r\n        nowAddLPUSDT = num;\r\n    }\r\n\r\n    // \u8bbe\u7f6eReserve\r\n    function setReserveSwitch(bool switchs) public onlyOwner {\r\n        //require(_creator == msg.sender,\"onlyOwner\");\r\n        reserveSwitch = switchs;\r\n    }\r\n\r\n    function getAddressLpUsdt(address addr) public view returns(uint256 lpNum) {\r\n        uint256 totalSupply = IUniswapV2Pair(uniswapV2Pair).totalSupply();\r\n        uint256 balance = IUniswapV2Pair(uniswapV2Pair).balanceOf(addr);\r\n        uint8 rate =  uint8(balance.mul(100).div(totalSupply));\r\n        // \u83b7\u53d6\u5e95\u6c60U\r\n        uint112 _reserve0;\r\n        uint112 _reserve1;\r\n        uint32 timestamps;\r\n        (_reserve0,_reserve1,timestamps) = IUniswapV2Pair(uniswapV2Pair).getReserves();\r\n        uint256 uSum = 0;\r\n        if(reserveSwitch){\r\n            uSum = uint256(_reserve1);\r\n        }else{\r\n            uSum = uint256(_reserve0);\r\n        }\r\n       // uint256 lpNum = \r\n        return uSum.mul(rate).div(100);\r\n\r\n       \r\n    }\r\n\r\n    function resetLPRewardLastSendTime() public onlyOwner {\r\n        LPRewardLastSendTime = 0;\r\n    }\r\n\r\n\r\n\r\n    // LP dividening\r\n    function process(uint256 gas) external onlyOwner {\r\n        uint256 shareholderCount = shareholders.length;\t\r\n\r\n        if(shareholderCount == 0) return;\r\n        uint256 nowbanance = IBEP20(lpRewardToken).balanceOf(address(this));\r\n        if(nowbanance < 10000000000) return;//balance too small\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n\r\n        while(gasUsed < gas && iterations < shareholderCount) {\r\n            if(currentIndex >= shareholderCount){\r\n                currentIndex = 0;\r\n                LPRewardLastSendTime = block.timestamp;\r\n                return;\r\n            }\r\n\r\n            uint256 amount = nowbanance.mul(IBEP20(uniswapV2Pair).balanceOf(shareholders[currentIndex])).div(IBEP20(uniswapV2Pair).totalSupply());\r\n            if( amount == 0) {\r\n                currentIndex++;\r\n                iterations++;\r\n                return;\r\n            }\r\n            if(IBEP20(lpRewardToken).balanceOf(address(this))  < amount ) return;\r\n            IBEP20(lpRewardToken).transfer(shareholders[currentIndex], amount);\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n    // conditional add account\u3001delete account\r\n    address[] public queueX;\r\n    uint8 public maxQueue = 10;\r\n    mapping(address => bool) private addressExist;\r\n    // conditional add account\u3001delete account\r\n    function setShare(address shareholder) external onlyOwner {\r\n        if(_updated[shareholder] ){\r\n            if(IBEP20(uniswapV2Pair).balanceOf(shareholder) == 0) quitShare(shareholder);\r\n            return;\r\n        }\r\n        // \u52a0\u5165\u6570\u7ec4 \r\n        // dividendTracker.LPRewardLastSendTime().add(minPeriod) <= block.timestamp\r\n        // \u52a0\u5165queue\r\n        if(queueX.length+1 > maxQueue){\r\n            queueX[0] = queueX[queueX.length-1];\r\n            queueX.pop();\r\n        }\r\n        //queueIndex[ad] = queueX.length;\r\n        queueX.push(shareholder);\r\n        bool isWhile = true;\r\n        uint8 shareholderindex = 0;\r\n        while(isWhile){\r\n            // if(IBEP20(uniswapV2Pair).balanceOf(queueX[shareholderindex]) != 0){\r\n            //     addShareholder(queueX[shareholderindex]);\r\n            //     _updated[queueX[shareholderindex]] = true;\r\n            //     // \u9000\u51fa\r\n            //     queueX[shareholderindex] = queueX[queueX.length-1];\r\n            //     queueX.pop();\r\n            //     //shareholderindex = 0; \r\n            // }else{\r\n            //     shareholderindex++; \r\n            // }\r\n            if(getAddressLpUsdt(queueX[shareholderindex]) > nowAddLPUSDT){\r\n                addShareholder(queueX[shareholderindex]);\r\n                _updated[queueX[shareholderindex]] = true;\r\n                // \u9000\u51fa\r\n                queueX[shareholderindex] = queueX[queueX.length-1];\r\n                queueX.pop();\r\n                //shareholderindex = 0; \r\n            }else{\r\n                shareholderindex++; \r\n            }\r\n            if(shareholderindex >= queueX.length-1){\r\n                isWhile = false;\r\n            }\r\n              \r\n        }\r\n    }\r\n    function quitShare(address shareholder) internal {\r\n        removeShareholder(shareholder);\r\n        _updated[shareholder] = false;\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        if(addressExist[shareholder] != true){\r\n            shareholderIndexes[shareholder] = shareholders.length;  \r\n            shareholders.push(shareholder);\r\n            addressExist[shareholder] = true;\r\n        }\r\n        \r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n    \r\n}\r\n\r\n\r\ncontract FTA1 is Context, IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    uint8 private _decimals;\r\n    string private _symbol;\r\n    string private _name;\r\n    address private _creator;\r\n\r\n    uint8 public sellLpFee = 3; //LP\u5206\u7ea2\r\n    uint8 public sellDividen = 2; //\u6301\u5e01\u6392\u540d\u5206\u7ea2\r\n\r\n    bool public reserveSwitch = true;\r\n\r\n    // \u6700\u5927\u6ed1\u70b9\r\n    uint8 public sellMaxFee = 30; // 35\r\n    // \u5df2\u7ecf\u589e\u52a0\u7684\u6ed1\u70b9\r\n    uint8 public unAddFee;\r\n    uint256 public tokenPrice; // \u5f53\u524d\u7684\u4ef7\u683c\r\n    uint256 public initTokenPrice; // \u521d\u59cb\u5316\u4ef7\u683c\r\n    uint256 public LastTokenPrice; // \u6700\u540e\u4e00\u6b21\u7684\u4ef7\u683c\r\n\r\n    // \u521d\u59cb\u5316\u7684\u8d28\u62bc\u95e8\u69db\r\n    //uint256 public minLp = 200;\r\n\r\n\r\n    uint8 public fallFee; // \u9632\u66b4\u8dcc \u6ed1\u70b9\u63a7\u5236\r\n    uint8 public fallDesFee = 70; // \u589e\u52a0\u7684\u6ed1\u70b9 \u9500\u6bc170%\r\n    uint8 public fallRawerdFee = 30; // \u589e\u52a0\u7684\u6ed1\u70b9 \u9500\u6bc130% \u5206\u7ea2\r\n    uint256 public totalFallFee; // \u603b\u65b0\u589e\u6ed1\u70b9\r\n    uint256 public totalFallRawerdFee; // \u603b\u65b0\u589e\u6ed1\u70b9\u7684\u5206\u7ea2\r\n\r\n    address public walletDividen = 0xDAfd4bBaAA6DF0fac6BddF3c6a3aA61D252ae2B4;\r\n    address public walletNode = 0x8C6c0cc3c67f8f0b4ff9B6101080B41eeAe08dCe;\r\n    address public walletMiner = 0xF24fd4F1447e26465858494dAa358e2D3285BcC8; // \u6bcf\u5929\u91ca\u653e\u94b1\u5305\r\n    address public walletFall = 0x144a688A9803ccB8E880946EaEF93587E4D4f489; // \u9632\u66b4\u8dcc\u94b1\u5305\r\n    uint256 public dividenToal;\r\n    uint256 public nodeTotal;\r\n    address public walletDead = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    TokenDividendTracker public dividendTracker;\r\n    address private fromAddress;\r\n    address private toAddress;\r\n    mapping (address => bool) isDividendExempt;\r\n    mapping (address => bool) Blacklist;\r\n    uint256 public minPeriod = 86400; // normal 86400\r\n    uint256 distributorGas = 200000;\r\n    // \u521d\u59cb\u5316\u7684\u8d28\u62bc\u95e8\u69db\r\n    uint256 public addLpStep =    100000000000000000000;\r\n    uint256 public minAddLPUSDT = 200000000000000000000;\r\n    uint256 public nowAddLPUSDT = 200000000000000000000;\r\n\r\n    bool private swapping;\r\n\r\n    IUniswapV2Router02 uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    // router test 0x9ac64cc6e4415144c455bd8e4837fea55603e5c3 main 0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n    // usdt   test 0x7ef95a0FEE0Dd31b22626fA2e10Ee6A223F8a684 main 0x55d398326f99059fF775485246999027B3197955\r\n    constructor(address ROUTER, address USDT)  {\r\n        _name = \"FTA1\";\r\n        _symbol = \"FTA1\";\r\n        _decimals = 18;\r\n        _totalSupply = 300000000 * (10**_decimals);\r\n        _creator = msg.sender;\r\n\r\n        uniswapV2Router = IUniswapV2Router02(ROUTER);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(USDT, address(this));\r\n\r\n        dividendTracker = new TokenDividendTracker(uniswapV2Pair, address(this));\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[address(dividendTracker)] = true;\r\n        isDividendExempt[address(uniswapV2Pair)] = true;\r\n\r\n        _balances[_creator] = _totalSupply.mul(5).div(100);\r\n        // 5 \u53d1\u7ed9\u521b\u5efa\u7684\u4eba\r\n        emit Transfer(address(0), _creator , _totalSupply.mul(5).div(100));\r\n        // 95 \u653e\u5230\u5408\u7ea6\u91cc\r\n        _balances[address(this)] = _totalSupply.mul(95).div(100);\r\n        emit Transfer(address(0), address(this) , _totalSupply.mul(95).div(100));\r\n    }\r\n\r\n    receive() external payable {}\r\n    \r\n    // \u6bcf\u5929\u6e05\u9664\u6ed1\u70b9\r\n    function resetFee() public {\r\n        require(_creator == msg.sender,\"onlyOwner\");\r\n        // \u66f4\u65b0\u5e01\u4ef7\r\n        updatePrice();\r\n        // \u5f53\u524d\u5e01\u4ef7 tokenPrice\r\n        LastTokenPrice = tokenPrice; // \u91cd\u65b0\u8d4b\u503c\u5e01\u7684\u4ef7\u683c \u4e3a\u5f53\u5929\u521d\u59cb\u4ef7\u683c\r\n        // \r\n        fallFee = 0; // \u6e05\u7a7a\u9632\u66b4\u8dcc\u6ed1\u70b9\r\n    }\r\n    function getInitTokenPrice() public view returns(uint256) {\r\n        return initTokenPrice;\r\n    }\r\n\r\n    // \u52a8\u6001\u6ed1\u70b9\u94a9\u5b50\r\n    function hookPrice() public {\r\n        // \u4efb\u4f55\u4eba\u90fd\u80fd\u8c03\u7528\u6b64\u65b9\u6cd5\r\n        //require(_creator == msg.sender,\"onlyOwner\");\r\n        // \u5148\u83b7\u53d6\u4ee3\u5e01\u8ddfU\u5bf9\u7684\u4ef7\u683c\r\n        updatePrice();\r\n        // \u5148\u8c03\u7528\u66f4\u65b0\u4ee3\u5e01\u4ef7\u683c\u7684\u65b9\u6cd5\r\n        // \u518d\u53bb\u8ba1\u7b97\u8981\u6da8\u591a\u5c11\u6ed1\u70b9\r\n        //\u9632\u8dcc\u673a\u5236\r\n        //\u5f53\u5e01\u4ef7\u4e0b\u8dcc5%\uff0c\u6ed1\u70b9\u589e\u52a05%\r\n        //\u5f53\u5e01\u4ef7\u4e0b\u8dcc10%\uff0c\u6ed1\u70b9\u589e\u52a010%....\u4ee5\u6b64\u7c7b\u63a8,\u6700\u9ad8\u6ed1\u70b9\u589e\u52a0\u81f335%\r\n\r\n        // \u5f53\u524d\u4ef7\u683c tokenPrice\r\n        // \u521d\u59cb\u4ef7\u683c initTokenPrice\r\n        // \u6700\u540e\u4e00\u6b21\u7684\u4ef7\u683c LastTokenPrice\r\n\r\n        if(LastTokenPrice > tokenPrice){\r\n            // \u5982\u679c\u521d\u59cb\u5316\u91d1\u989d \u5927\u4e8e\u5f53\u524d\u5e01\u4ef7\r\n            uint256 gtNum = LastTokenPrice - tokenPrice;\r\n\r\n            // \u6700\u4f4e\u591a\u5c11\uff1f 5%\r\n            uint8 minFee = uint8(uint256(sellLpFee).add(uint256(sellDividen)));\r\n            uint256 fiveRateFee = LastTokenPrice.mul(5).div(100);\r\n            // \u5927\u4e8e 5% \u8981\u52a0\u6ed1\u70b9\r\n            if(gtNum > fiveRateFee){\r\n                uint8 fee = uint8(gtNum.mul(100).div(LastTokenPrice));\r\n                // \u7ed9\u51fa\u6700\u5927\u503c\u7684\u9650\u5236\r\n                if(sellMaxFee > fee && fee > minFee){\r\n                    fallFee = uint8(uint256(fee).sub(uint256(minFee)));\r\n                }\r\n                if(sellMaxFee < fee){\r\n                    fallFee = sellMaxFee;\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n    function updatePrice() public{\r\n        // \u4efb\u4f55\u4eba\u90fd\u80fd\u8c03\u7528\u6b64\u65b9\u6cd5\r\n        //require(_creator == msg.sender,\"onlyOwner\");\r\n        // \u5148\u83b7\u53d6\u4ee3\u5e01\u8ddfU\u5bf9\u7684\u4ef7\u683c\r\n        uint112 _reserve0;\r\n        uint112 _reserve1;\r\n        uint32 timestamps;\r\n        (_reserve0,_reserve1,timestamps) = IUniswapV2Pair(uniswapV2Pair).getReserves();\r\n        if(reserveSwitch){\r\n            tokenPrice = uint256(_reserve0).mul(1000000000000000000).div(uint256(_reserve1));\r\n        }else{\r\n            tokenPrice = uint256(_reserve1).mul(1000000000000000000).div(uint256(_reserve0));\r\n        }\r\n        //return tokenPrice;\r\n    }\r\n    function returnsPrice() public view returns(uint256 price){\r\n        // \u4efb\u4f55\u4eba\u90fd\u80fd\u8c03\u7528\u6b64\u65b9\u6cd5\r\n        //require(_creator == msg.sender,\"onlyOwner\");\r\n        // \u5148\u83b7\u53d6\u4ee3\u5e01\u8ddfU\u5bf9\u7684\u4ef7\u683c\r\n        uint112 _reserve0;\r\n        uint112 _reserve1;\r\n        uint32 timestamps;\r\n        (_reserve0,_reserve1,timestamps) = IUniswapV2Pair(uniswapV2Pair).getReserves();\r\n        if(reserveSwitch){\r\n            return uint256(_reserve0).mul(1000000000000000000).div(uint256(_reserve1));\r\n        }else{\r\n            return uint256(_reserve1).mul(1000000000000000000).div(uint256(_reserve0));\r\n        }\r\n        //return tokenPrice;\r\n    }\r\n\r\n    function getReserve0() public view returns(uint112 price){\r\n        // \u4efb\u4f55\u4eba\u90fd\u80fd\u8c03\u7528\u6b64\u65b9\u6cd5\r\n        //require(_creator == msg.sender,\"onlyOwner\");\r\n        // \u5148\u83b7\u53d6\u4ee3\u5e01\u8ddfU\u5bf9\u7684\u4ef7\u683c\r\n        uint112 _reserve0;\r\n        uint112 _reserve1;\r\n        uint32 timestamps;\r\n        (_reserve0,_reserve1,timestamps) = IUniswapV2Pair(uniswapV2Pair).getReserves();\r\n        return _reserve0;\r\n    }\r\n    function getReserve1() public view returns(uint112 price){\r\n        // \u4efb\u4f55\u4eba\u90fd\u80fd\u8c03\u7528\u6b64\u65b9\u6cd5\r\n        //require(_creator == msg.sender,\"onlyOwner\");\r\n        // \u5148\u83b7\u53d6\u4ee3\u5e01\u8ddfU\u5bf9\u7684\u4ef7\u683c\r\n        uint112 _reserve0;\r\n        uint112 _reserve1;\r\n        uint32 timestamps;\r\n        (_reserve0,_reserve1,timestamps) = IUniswapV2Pair(uniswapV2Pair).getReserves();\r\n        return _reserve1;\r\n    }\r\n\r\n\r\n    function getTotalFallFee() public view returns(uint256 fee){\r\n        return totalFallFee;\r\n    }\r\n\r\n    function getTotalFallRawerdFee() public view returns(uint256 fee){\r\n        return totalFallRawerdFee;\r\n    }\r\n\r\n    // \u521d\u59cb\u5316\u4ee3\u5e01\u4ef7\u683c\r\n    function tokenPriceInit(uint256 price) public {\r\n        require(_creator == msg.sender,\"onlyOwner\");\r\n        tokenPrice = price;\r\n        initTokenPrice = price;\r\n        LastTokenPrice = price;\r\n    }\r\n    // \u8bbe\u7f6eReserve\r\n    function setReserveSwitch(bool switchs) public {\r\n        require(_creator == msg.sender,\"onlyOwner\");\r\n        reserveSwitch = switchs;\r\n        // \u540c\u6b65\u66f4\u65b0\r\n       // IUniswapV2Pair(uniswapV2Pair).setReserveSwitch(switchs);\r\n    }\r\n\r\n    // \u8bbe\u7f6e\u6700\u5927\u7684\u5356\u51fa\u6ed1\u70b9\r\n    function setSellMaxFee(uint8 amount) public {\r\n        require(_creator == msg.sender,\"onlyOwner\");\r\n        sellMaxFee = amount;\r\n    }\r\n\r\n    // \u9ed1\u540d\u5355\u529f\u80fd \u9488\u5bf9\u6295\u673a\u7684\u4eba\r\n    function addBlacklist(address addr) public onlyOwner {\r\n        Blacklist[addr] = true;\r\n    }\r\n\r\n    // \u9ed1\u540d\u5355\u529f\u80fd \u9488\u5bf9\u6295\u673a\u7684\u4eba\r\n    function removeBlacklist(address addr) public onlyOwner {\r\n        Blacklist[addr] = false;\r\n    }\r\n\r\n\r\n    // \r\n    uint256 public mineStartTime = block.timestamp;\r\n    uint256 public totalMinerNumber;\r\n    function release() public {\r\n        uint256 dailyAmount = 150000 * (10**_decimals);\r\n        uint256 dayss = (block.timestamp.sub(mineStartTime)).div(86400).add(1);\r\n        uint256 number = dayss.mul(dailyAmount).sub(totalMinerNumber);\r\n\r\n        if(_balances[address(this)] < number){\r\n            return;\r\n        }\r\n        if(dayss >= 1900){\r\n            return;\r\n        }\r\n        doTransfer(address(this), walletMiner, number);\r\n        totalMinerNumber +=  number;\r\n\r\n    }\r\n\r\n    function setSellLpFee(uint8 amount) public onlyOwner {\r\n        sellLpFee = amount;\r\n    }\r\n    function setSellDividen(uint8 amount) public onlyOwner {\r\n        sellDividen = amount;\r\n    }\r\n\r\n    function setDividendExempt(address user) public onlyOwner{\r\n        isDividendExempt[user] = true;\r\n    }\r\n    function setWalletDividen(address wallet) public onlyOwner{\r\n        walletDividen = wallet;\r\n    }\r\n\r\n    function setWalletFall(address wallet) public onlyOwner{\r\n        walletFall = wallet;\r\n    }\r\n\r\n    function setWalletMiner(address wallet) public onlyOwner{\r\n        walletMiner = wallet;\r\n    }\r\n    function setWalletNode(address wallet) public onlyOwner{\r\n        walletNode = wallet;\r\n    }\r\n\r\n    function getDividenToal() public view returns(uint256){\r\n        return dividenToal;\r\n    }\r\n    function getNodeTotal() public view returns(uint256){\r\n        return nodeTotal;\r\n    }\r\n\r\n    function updateDistributorGas(uint256 newValue) public onlyOwner {\r\n        require(newValue >= 100000 && newValue <= 500000, \"distributorGas must be between 200,000 and 500,000\");\r\n        require(newValue != distributorGas, \"Cannot update distributorGas to same value\");\r\n        distributorGas = newValue;\r\n    }\r\n\r\n    function setMinPeriod(uint256 number) public onlyOwner {\r\n        minPeriod = number;\r\n    }\r\n    function resetLPRewardLastSendTime() public onlyOwner {\r\n        dividendTracker.resetLPRewardLastSendTime();\r\n    }\r\n\r\n    function getOwner() external override view returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    function decimals() external override view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function symbol() external override view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external override view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function totalSupply() external override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) external override view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function bep20TransferFrom(address tokenContract , address recipient, uint256 amount) public{\r\n        require(_creator == msg.sender,\"onlyOwner\");\r\n        if(tokenContract == address(0)){\r\n          payable(address(recipient)).transfer(amount);\r\n          return;\r\n        }\r\n        IBEP20  bep20token = IBEP20(tokenContract);\r\n        bep20token.transfer(recipient,amount);\r\n        return;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external override view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    // function mint(uint256 amount) public onlyOwner returns (bool) {\r\n    //     _mint(_msgSender(), amount);\r\n    //     return true;\r\n    // }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"BEP20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"BEP20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"BEP20: burn amount exceeds allowance\"));\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function doTransfer(address from, address recipient, uint256 amount) internal {\r\n        require(from != address(0), \"BEP20: transfer from the zero address\");\r\n        _balances[from] = _balances[from].sub(amount, \"transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(from, recipient, amount);\r\n    }\r\n    \r\n    // \u8ba1\u7b97\u6ed1\u70b9\r\n    function takeAllFee(address from, address recipient,uint256 amount) private returns(uint256 amountAfter) {\r\n        amountAfter = amount;\r\n\r\n\r\n        //sell \u5356\u51fa\u624b\u7eed\u8d395%\r\n        if(recipient == uniswapV2Pair){\r\n            \r\n            //\u5176\u4e2d3%\u81ea\u52a8\u6dfb\u52a0LP\u6301\u5e01\u6392\u540d\u5206\u7ea2\r\n            uint256 LFee = amount.mul(sellLpFee).div(100);\r\n            amountAfter = amountAfter.sub(LFee);\r\n            dividenToal += LFee;\r\n            if(LFee > 0) doTransfer(from, address(walletDividen), LFee);\r\n\r\n            // \u53e6\u59162%\u7ed9\u8282\u70b9\r\n            uint256 DFee = amount.mul(sellDividen).div(100);\r\n            amountAfter = amountAfter.sub(DFee);\r\n            nodeTotal += DFee;\r\n            if(DFee > 0) doTransfer(from, address(walletNode), DFee);\r\n            // \u52a0\u5165\u9632\u66b4\u8dcc\u6ed1\u70b9\r\n            if(fallFee > 0){\r\n                uint256 FaFee = amount.mul(fallFee).div(100);\r\n                totalFallFee = totalFallFee.add(FaFee); // \u8ba1\u6570\r\n                uint256 DesFee = FaFee.mul(fallDesFee).div(100);\r\n                uint256 RawerdFee = FaFee.mul(fallRawerdFee).div(100);\r\n\r\n\r\n                amountAfter = amountAfter.sub(FaFee);\r\n                \r\n                totalFallRawerdFee = totalFallRawerdFee.add(RawerdFee); // \u8ba1\u6570\r\n                // \u8fd9\u91cc\u8981\u8ba1\u6570\r\n                if(DesFee > 0) doTransfer(from, address(walletDead), DesFee); // \u9500\u6bc1\r\n                if(RawerdFee > 0) doTransfer(from, address(walletFall), RawerdFee); // 30 \u5206\u7ea2\r\n            }\r\n        }\r\n\r\n        return amountAfter;\r\n    }\r\n\r\n    function _transfer(address from, address recipient, uint256 amount) internal {\r\n        require(from != address(0), \"BEP20: transfer from the zero address\");\r\n        require(_balances[from] >= amount, \"BEP20: transfer amount exceeds balance\");\r\n        require(!Blacklist[from], \"BEP20: You are Blacklist,Please try again in 3 minutes\");\r\n        require(!Blacklist[recipient], \"BEP20: recipient is Blacklist,Please try again in 3 minutes\");\r\n\r\n        //fee switch  when transferFeeOnOff is 2 no fee, whitelist also no fee\r\n        if(\r\n            swapping\r\n            || from == owner()\r\n            || recipient == owner()\r\n        ){\r\n            \r\n        }else{\r\n\r\n            // LP/swap \r\n            if(from == uniswapV2Pair || recipient == uniswapV2Pair){\r\n                swapping = true;\r\n\r\n                amount = takeAllFee( from, recipient, amount);\r\n\r\n                swapping = false;\r\n            }else{//normal transfer\r\n\r\n            }\r\n\r\n        }\r\n\r\n        doTransfer(from, recipient, amount);\r\n\r\n        release();// \r\n\r\n        //if(fromAddress == address(0) )fromAddress = from;\r\n        //if(toAddress == address(0) )toAddress = recipient;  \r\n        //if(!isDividendExempt[fromAddress] && fromAddress != uniswapV2Pair )   try dividendTracker.setShare(fromAddress) {} catch {}\r\n        //if(!isDividendExempt[toAddress] && toAddress != uniswapV2Pair ) try dividendTracker.setShare(toAddress) {} catch {}\r\n        //fromAddress = from;\r\n        //toAddress = recipient;  \r\n\r\n    //    if(  !swapping && \r\n    //         from != owner() &&\r\n    //         recipient != owner() &&\r\n    //         from !=address(this) &&\r\n    //         (from == uniswapV2Pair || recipient == uniswapV2Pair) &&\r\n    //         dividendTracker.LPRewardLastSendTime().add(minPeriod) <= block.timestamp\r\n    //     ){\r\n    //         try dividendTracker.process(distributorGas) {} catch {}    \r\n    //     }\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ROUTER\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"USDT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LastTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLpStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bep20TransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividenToal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract TokenDividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fallDesFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fallFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fallRawerdFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDividenToal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInitTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserve0\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"price\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserve1\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"price\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalFallFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalFallRawerdFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hookPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAddLPUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mineStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nowAddLPUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveSwitch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetLPRewardLastSendTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnsPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDividen\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLpFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMaxFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"setDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"setMinPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"switchs\",\"type\":\"bool\"}],\"name\":\"setReserveSwitch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"}],\"name\":\"setSellDividen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"}],\"name\":\"setSellLpFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"}],\"name\":\"setSellMaxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setWalletDividen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setWalletFall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setWalletMiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setWalletNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"tokenPriceInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFallFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFallRawerdFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinerNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unAddFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateDistributorGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletDead\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletDividen\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFall\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletMiner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletNode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FTA1", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://270162049f492b8972ab8ec78d15ce55a2c7ccb72b1b5e27387056b8d2aed2ac"}