{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Escrow.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract Escrow is ReentrancyGuard, Pausable, Ownable {\\r\\n    using Address for address payable;\\r\\n\\r\\n    event Deposited(\\r\\n        string depositId,\\r\\n        address indexed tokenAddress,\\r\\n        uint256 amount,\\r\\n        uint256 feeAmount,\\r\\n        address indexed receiver,\\r\\n        address indexed sender,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event DepositTransferred(\\r\\n        string depositId,\\r\\n        uint256 amount,\\r\\n        address indexed receiver,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event DepositTransferredByOwner(\\r\\n        string depositId,\\r\\n        uint256 amount,\\r\\n        address indexed receiver,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event DepositCancelled(\\r\\n        string depositId,\\r\\n        uint256 amount,\\r\\n        address indexed receiver,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event Paid(\\r\\n        string paymentId,\\r\\n        address indexed tokenAddress,\\r\\n        uint256 amount,\\r\\n        address indexed sender,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    mapping(string => uint256) private _depositsAmount;\\r\\n    mapping(string => uint256) private _depositsFee;\\r\\n    mapping(string => address) private _depositsSenders;\\r\\n    mapping(string => address) private _depositsReceivers;\\r\\n    mapping(string => address) private _depositsToken;\\r\\n\\r\\n    mapping(string => uint256) private _paymentsAmount;\\r\\n    mapping(string => address) private _paymentsSenders;\\r\\n    mapping(string => address) private _paymentsToken;\\r\\n\\r\\n    address payable feeCollector;\\r\\n\\r\\n    constructor(address _feeCollector) {\\r\\n        feeCollector = payable(_feeCollector);\\r\\n    }\\r\\n\\r\\n    function deposit(\\r\\n        address receiver,\\r\\n        uint256 feeAmount,\\r\\n        string memory depositId\\r\\n    ) public payable whenNotPaused nonReentrant {\\r\\n        require(_depositsAmount[depositId] == 0, \\\"Deposit already created\\\");\\r\\n        uint256 amount = msg.value - feeAmount;\\r\\n        require(amount > 0, \\\"Invalid amount\\\");\\r\\n        _depositsAmount[depositId] = amount;\\r\\n        _depositsFee[depositId] = feeAmount;\\r\\n        _depositsSenders[depositId] = msg.sender;\\r\\n        _depositsReceivers[depositId] = receiver;\\r\\n        emit Deposited(\\r\\n            depositId,\\r\\n            address(0x0),\\r\\n            amount,\\r\\n            feeAmount,\\r\\n            receiver,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function transferDeposit(\\r\\n        string memory depositId\\r\\n    ) public whenNotPaused nonReentrant {\\r\\n        require(\\r\\n            _depositsSenders[depositId] == msg.sender,\\r\\n            \\\"Only the owner of deposit can transfer\\\"\\r\\n        );\\r\\n        require(_depositsAmount[depositId] > 0, \\\"Deposit already transferred\\\");\\r\\n\\r\\n        uint256 amount = _depositsAmount[depositId];\\r\\n\\r\\n        address payable receiver = payable(_depositsReceivers[depositId]);\\r\\n\\r\\n        _depositsAmount[depositId] = 0;\\r\\n\\r\\n        if (_depositsFee[depositId] > 0) {\\r\\n            feeCollector.sendValue(_depositsFee[depositId]);\\r\\n        }\\r\\n\\r\\n        receiver.sendValue(amount);\\r\\n\\r\\n        emit DepositTransferred(depositId, amount, receiver, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function cancelDeposit(\\r\\n        string memory depositId\\r\\n    ) public whenNotPaused nonReentrant {\\r\\n        require(\\r\\n            _depositsReceivers[depositId] == msg.sender,\\r\\n            \\\"Only the receiver of deposit can cancel\\\"\\r\\n        );\\r\\n        require(_depositsAmount[depositId] > 0, \\\"Deposit already transferred\\\");\\r\\n\\r\\n        uint256 amount = _depositsAmount[depositId];\\r\\n\\r\\n        address payable receiver = payable(_depositsSenders[depositId]);\\r\\n\\r\\n        _depositsAmount[depositId] = 0;\\r\\n\\r\\n        receiver.sendValue(amount + _depositsFee[depositId]);\\r\\n\\r\\n        emit DepositTransferred(depositId, amount, receiver, block.timestamp);\\r\\n        emit DepositCancelled(depositId, amount, receiver, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function depositErc20(\\r\\n        address receiver,\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        uint256 feeAmount,\\r\\n        string memory depositId\\r\\n    ) public whenNotPaused nonReentrant {\\r\\n        require(_depositsAmount[depositId] == 0, \\\"Deposit already created\\\");\\r\\n        require(amount > 0, \\\"Invalid amount\\\");\\r\\n\\r\\n        IERC20 Token = IERC20(token);\\r\\n\\r\\n        bool isTokenTransferred = Token.transferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            amount\\r\\n        );\\r\\n\\r\\n        require(isTokenTransferred, \\\"Tokens are not transferred.\\\");\\r\\n\\r\\n        _depositsAmount[depositId] = amount - feeAmount;\\r\\n        _depositsFee[depositId] = feeAmount;\\r\\n        _depositsSenders[depositId] = msg.sender;\\r\\n        _depositsReceivers[depositId] = receiver;\\r\\n        _depositsToken[depositId] = token;\\r\\n        emit Deposited(\\r\\n            depositId,\\r\\n            token,\\r\\n            amount,\\r\\n            feeAmount,\\r\\n            receiver,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function transferDepositErc20(\\r\\n        string memory depositId\\r\\n    ) public whenNotPaused nonReentrant {\\r\\n        require(\\r\\n            _depositsSenders[depositId] == msg.sender,\\r\\n            \\\"Only the owner of deposit can transfer\\\"\\r\\n        );\\r\\n        require(_depositsAmount[depositId] > 0, \\\"Deposit already transferred\\\");\\r\\n        require(\\r\\n            _depositsToken[depositId] != address(0x0),\\r\\n            \\\"Invalid ERC20 token\\\"\\r\\n        );\\r\\n\\r\\n        uint256 amount = _depositsAmount[depositId];\\r\\n\\r\\n        _depositsAmount[depositId] = 0;\\r\\n\\r\\n        IERC20 Token = IERC20(_depositsToken[depositId]);\\r\\n\\r\\n        if (_depositsFee[depositId] > 0) {\\r\\n            bool isTokenFeeTransferred = Token.transfer(\\r\\n                payable(feeCollector),\\r\\n                _depositsFee[depositId]\\r\\n            );\\r\\n\\r\\n            require(isTokenFeeTransferred, \\\"Fee is not transferred.\\\");\\r\\n        }\\r\\n\\r\\n        bool isTokenTransferred = Token.transfer(\\r\\n            payable(_depositsReceivers[depositId]),\\r\\n            amount\\r\\n        );\\r\\n\\r\\n        require(isTokenTransferred, \\\"Tokens are not transferred.\\\");\\r\\n\\r\\n        emit DepositTransferred(\\r\\n            depositId,\\r\\n            amount,\\r\\n            _depositsReceivers[depositId],\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function cancelDepositErc20(\\r\\n        string memory depositId\\r\\n    ) public whenNotPaused nonReentrant {\\r\\n        require(\\r\\n            _depositsReceivers[depositId] == msg.sender,\\r\\n            \\\"Only the receiver of deposit can cancel\\\"\\r\\n        );\\r\\n        require(_depositsAmount[depositId] > 0, \\\"Deposit already transferred\\\");\\r\\n        require(\\r\\n            _depositsToken[depositId] != address(0x0),\\r\\n            \\\"Invalid ERC20 token\\\"\\r\\n        );\\r\\n\\r\\n        uint256 amount = _depositsAmount[depositId];\\r\\n\\r\\n        _depositsAmount[depositId] = 0;\\r\\n\\r\\n        IERC20 Token = IERC20(_depositsToken[depositId]);\\r\\n\\r\\n        bool isTokenTransferred = Token.transfer(\\r\\n            payable(_depositsSenders[depositId]),\\r\\n            amount + _depositsFee[depositId]\\r\\n        );\\r\\n\\r\\n        require(isTokenTransferred, \\\"Tokens are not transferred.\\\");\\r\\n\\r\\n        emit DepositTransferred(\\r\\n            depositId,\\r\\n            amount,\\r\\n            _depositsSenders[depositId],\\r\\n            block.timestamp\\r\\n        );\\r\\n        emit DepositCancelled(\\r\\n            depositId,\\r\\n            amount,\\r\\n            _depositsSenders[depositId],\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function transferDepositByOwner(\\r\\n        string memory depositId,\\r\\n        address receiver,\\r\\n        bool withFee\\r\\n    ) public onlyOwner nonReentrant {\\r\\n        require(_depositsAmount[depositId] > 0, \\\"Deposit already transferred\\\");\\r\\n\\r\\n        uint256 amount = _depositsAmount[depositId];\\r\\n\\r\\n        address payable receiver = payable(receiver);\\r\\n        // address payable receiver = payable(_depositsReceivers[depositId]);\\r\\n\\r\\n        _depositsAmount[depositId] = 0;\\r\\n\\r\\n        uint256 finalAmount = amount;\\r\\n\\r\\n        if (withFee) {\\r\\n            finalAmount = finalAmount + _depositsFee[depositId];\\r\\n        } else {\\r\\n            feeCollector.sendValue(_depositsFee[depositId]);\\r\\n        }\\r\\n\\r\\n        receiver.sendValue(finalAmount);\\r\\n\\r\\n        emit DepositTransferred(depositId, amount, receiver, block.timestamp);\\r\\n        emit DepositTransferredByOwner(\\r\\n            depositId,\\r\\n            amount,\\r\\n            receiver,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function transferDepositErc20ByOwner(\\r\\n        string memory depositId,\\r\\n        address receiver,\\r\\n        bool withFee\\r\\n    ) public onlyOwner nonReentrant {\\r\\n        // require(\\r\\n        //     _depositsSenders[depositId] == msg.sender,\\r\\n        //     \\\"Only the owner of deposit can transfer\\\"\\r\\n        // );\\r\\n        require(_depositsAmount[depositId] > 0, \\\"Deposit already transferred\\\");\\r\\n        require(\\r\\n            _depositsToken[depositId] != address(0x0),\\r\\n            \\\"Invalid ERC20 token\\\"\\r\\n        );\\r\\n\\r\\n        uint256 amount = _depositsAmount[depositId];\\r\\n\\r\\n        _depositsAmount[depositId] = 0;\\r\\n\\r\\n        IERC20 Token = IERC20(_depositsToken[depositId]);\\r\\n\\r\\n        uint256 finalAmount = amount;\\r\\n\\r\\n        if (withFee) {\\r\\n            finalAmount = finalAmount + _depositsFee[depositId];\\r\\n        } else {\\r\\n            if (_depositsFee[depositId] > 0) {\\r\\n                bool isTokenFeeTransferred = Token.transfer(\\r\\n                    payable(feeCollector),\\r\\n                    _depositsFee[depositId]\\r\\n                );\\r\\n\\r\\n                require(isTokenFeeTransferred, \\\"Fee is not transferred.\\\");\\r\\n            }\\r\\n        }\\r\\n\\r\\n        bool isTokenTransferred = Token.transfer(\\r\\n            payable(receiver),\\r\\n            finalAmount\\r\\n        );\\r\\n\\r\\n        require(isTokenTransferred, \\\"Tokens are not transferred.\\\");\\r\\n\\r\\n        emit DepositTransferred(depositId, amount, receiver, block.timestamp);\\r\\n        emit DepositTransferredByOwner(\\r\\n            depositId,\\r\\n            amount,\\r\\n            receiver,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function payment(\\r\\n        string memory paymentId\\r\\n    ) public payable whenNotPaused nonReentrant {\\r\\n        require(_paymentsAmount[paymentId] == 0, \\\"Payment already created\\\");\\r\\n        uint256 amount = msg.value;\\r\\n        require(amount > 0, \\\"Invalid amount\\\");\\r\\n        feeCollector.sendValue(amount);\\r\\n        _paymentsAmount[paymentId] = amount;\\r\\n        _paymentsSenders[paymentId] = msg.sender;\\r\\n        emit Paid(paymentId, address(0x0), amount, msg.sender, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function paymentErc20(\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        string memory paymentId\\r\\n    ) public whenNotPaused nonReentrant {\\r\\n        require(_paymentsAmount[paymentId] == 0, \\\"Payment already created\\\");\\r\\n        require(amount > 0, \\\"Invalid amount\\\");\\r\\n\\r\\n        IERC20 Token = IERC20(token);\\r\\n\\r\\n        bool isTokenTransferred = Token.transferFrom(\\r\\n            msg.sender,\\r\\n            feeCollector,\\r\\n            amount\\r\\n        );\\r\\n\\r\\n        require(isTokenTransferred, \\\"Tokens are not transferred.\\\");\\r\\n\\r\\n        _paymentsAmount[paymentId] = amount;\\r\\n        _paymentsSenders[paymentId] = msg.sender;\\r\\n        _paymentsToken[paymentId] = token;\\r\\n\\r\\n        emit Paid(paymentId, token, amount, msg.sender, block.timestamp);\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"depositId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DepositCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"depositId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DepositTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"depositId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DepositTransferredByOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"depositId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"paymentId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Paid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"depositId\",\"type\":\"string\"}],\"name\":\"cancelDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"depositId\",\"type\":\"string\"}],\"name\":\"cancelDepositErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"depositId\",\"type\":\"string\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"depositId\",\"type\":\"string\"}],\"name\":\"depositErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"paymentId\",\"type\":\"string\"}],\"name\":\"payment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"paymentId\",\"type\":\"string\"}],\"name\":\"paymentErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"depositId\",\"type\":\"string\"}],\"name\":\"transferDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"depositId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"withFee\",\"type\":\"bool\"}],\"name\":\"transferDepositByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"depositId\",\"type\":\"string\"}],\"name\":\"transferDepositErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"depositId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"withFee\",\"type\":\"bool\"}],\"name\":\"transferDepositErc20ByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Escrow", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "0000000000000000000000001d4e20ee872d84f3807bfd9c431622fdea5880ad", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}