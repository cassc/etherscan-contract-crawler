{"SourceCode": "pragma solidity =0.6.6;\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// erc20\r\ninterface IERC20 {\r\n    function balanceOf(address _address) external view returns (uint256);\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n// Token\r\ninterface IToken is IERC20 {\r\n    function totalFees() external view returns (uint256);\r\n    function superAddress(address _address) external view returns (address);\r\n    function juniorAddress(address _address) external view returns (address[] memory _addrs);\r\n    function getLinkedinAddrs(address _address) external view returns (address[] memory _addrs);\r\n    event BoundLinkedin(address from, address to);\r\n}\r\n\r\n// \u63d0\u4f9b\u7684\u63a5\u53e3\r\ninterface IDividendTracker {\r\n    function initBnbt(address _bnbtAddress) external returns (address, address);   // bnbt init\r\n    function initBnbdao(address _bnbdaoAddress) external returns (address, address); // bnbdao init\r\n    function tokenSwap() external;        // token swap\r\n    function dividendRewards(address _from, uint256 _dividendTokenAmount) external; // dividend\r\n    function addOrRemove(address _from, address _to) external; // add or remove\r\n}\r\n\r\n\r\n// safe math\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"Math error\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(a >= b, \"Math error\");\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0 || b == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"Math error\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0 || b == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n// safe transfer\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        // (bool success,) = to.call.value(value)(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n// owner\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, 'DividendTracker: owner error');\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// \u4e3b\u5408\u7ea6\r\ncontract DividendTracker is IDividendTracker, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address public factoryAddress; // \u5de5\u5382\u5408\u7ea6\u5730\u5740\r\n    address public routerAddress;  // \u8def\u7531\u5408\u7ea6\u5730\u5740\r\n    address public bnbtAddress;    // BNBT\u5408\u7ea6\u5730\u5740\r\n    address public wbnbAddress;    // wbnb\r\n    address public ethAddress;     // eth, \u4e3b\u8981\u5206\u7ea2\u7684\u5e01\r\n    address public usdtAddress;    // usdt\u5730\u5740\r\n    address public bnbdaoAddress;  // BNBDAO\u5408\u7ea6\u5730\u5740\r\n    address public bnbtWbnbLpAddress; // bnbt-wbnb-lp\u5730\u5740\r\n\r\n    address public feeAddress1;   // address 1 = 1%\r\n    address public feeAddress2;   // address 2 = 2%\r\n    address public feeAddress3;   // address 3 = 2%\r\n    address public feeAddress4;   // address 4 = 2%\r\n    address public bnbdaoUsdtLpAdress; // 4% = swap USDT in bnbdao-Usdt-lp\r\n    uint256 public fee1 = 1;  // address 1\r\n    uint256 public fee2 = 2;  // address 2\r\n    uint256 public fee3 = 2;  // address 3\r\n    uint256 public fee4 = 2;  // address 4\r\n    uint256 public feeSwap = 4;  // 4% = swap usdt in bnbdao-Usdt-lp\r\n    uint256 public feeLinkedin = 2;  // 2% = Linkedin\r\n    uint256 public feeLp = 2; // lp holder\r\n\r\n    // \u5f53\u524d\u7684\u6307\u9488\u5f00\u59cb\u4f4d\u7f6e\r\n    uint256 public pointer = 0;\r\n    // \u4e00\u6b21\u6027\u6700\u591a\u5206\u914d\u7684\u5730\u5740\u4e2a\u6570\r\n    uint256 public amount = 10;\r\n    // \u6570\u91cf\u5927\u4e8e\u591a\u5c11\u4e2aLP(bnbdao-usdt-lp)\u624d\u80fd\u53c2\u4e0e\u5206\u7ea2, \u9ed8\u8ba40.001\u4e2a\r\n    uint256 public lpMin = 1 * (10**15); // 15 = 0.001\r\n\r\n    mapping(address => bool) public isHolder;   // \u662f\u4e0d\u662f\u6301\u5e01\u8005\r\n    mapping(address => uint256) public indexOf; // \u6301\u5e01\u8005\u5bf9\u5e94\u7684\u6570\u7ec4\u4f4d\u7f6e\r\n    address[] public holders;                   // \u5168\u90e8\u7684\u6301\u5e01\u8005\u5730\u5740\r\n    mapping(address => bool) public notHolder;  // \u4e0d\u53c2\u4e0e\u6301LP\u5e01\u5206\u7ea2\r\n\r\n\r\n\r\n    // \u6784\u9020\u51fd\u6570\r\n    // \u53ef\u4ee5\u643a\u5e26\u4e3b\u94fe\u5e01, \u653e\u4e00\u70b9\u8fdb\u53bb\u6bd4\u8f83\u597d\r\n    constructor(\r\n        address _owner,\r\n        address _factoryAddress,\r\n        address _routerAddress,\r\n        address _wbnbAddress,\r\n        address _ethAddress,\r\n        address _usdtAddress,\r\n        address _feeAddress1,\r\n        address _feeAddress2,\r\n        address _feeAddress3,\r\n        address _feeAddress4\r\n    ) public {\r\n        owner = _owner;\r\n\r\n        factoryAddress = _factoryAddress;\r\n        routerAddress = _routerAddress;\r\n        wbnbAddress = _wbnbAddress;\r\n        ethAddress = _ethAddress;\r\n        usdtAddress = _usdtAddress;\r\n\r\n        feeAddress1 = _feeAddress1;\r\n        feeAddress2 = _feeAddress2;\r\n        feeAddress3 = _feeAddress3;\r\n        feeAddress4 = _feeAddress4;\r\n    }\r\n\r\n    // \u63a5\u6536\u4e3b\u94fe\u5e01\r\n    receive() external payable {}\r\n\r\n    // BNBT Token\u521d\u59cb\u5316\u3002\u53ea\u80fd\u8c03\u7528\u4e00\u6b21, \u8bbe\u7f6e\u5b8c\u5c06\u4e0d\u80fd\u66f4\u6539\r\n    function initBnbt(address _bnbtAddress) public override returns(address, address) {\r\n        require(bnbtAddress == address(0), 'DividendTracker: initialization address error');\r\n        bnbtAddress = _bnbtAddress;\r\n\r\n        address _pair = IUniswapV2Factory(factoryAddress).getPair(bnbtAddress, wbnbAddress);\r\n        if(_pair == address(0)) {\r\n            bnbtWbnbLpAddress = IUniswapV2Factory(factoryAddress).createPair(bnbtAddress, wbnbAddress);\r\n        }else {\r\n            bnbtWbnbLpAddress = _pair;\r\n        }\r\n        return (routerAddress, bnbtWbnbLpAddress);\r\n    }\r\n    function initBnbdao(address _bnbdaoAddress) public override returns(address, address) {\r\n        require(bnbdaoAddress == address(0), 'DividendTracker: initialization address error');\r\n        bnbdaoAddress = _bnbdaoAddress;\r\n\r\n        address _pair = IUniswapV2Factory(factoryAddress).getPair(bnbdaoAddress, usdtAddress);\r\n        if(_pair == address(0)) {\r\n            bnbdaoUsdtLpAdress = IUniswapV2Factory(factoryAddress).createPair(bnbdaoAddress, usdtAddress);\r\n        }else {\r\n            bnbdaoUsdtLpAdress = _pair;\r\n        }\r\n        return (routerAddress, bnbdaoUsdtLpAdress);\r\n    }\r\n\r\n    uint256 private unlocked = 1;\r\n    modifier lock() {\r\n        require(unlocked == 1, 'DividendTracker: LOCKED');\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n    modifier onlytokenAddress() {\r\n        require(msg.sender == bnbtAddress, 'DividendTracker: token error');\r\n        _;\r\n    }\r\n\r\n    // \u8bbe\u7f6e\u5206\u7ea2\u7684\u5360\u6bd4\r\n    function setFee(\r\n        uint256 _fee1,\r\n        uint256 _fee2,\r\n        uint256 _fee3,\r\n        uint256 _fee4,\r\n        uint256 _feeSwap,\r\n        uint256 _feeLinkedin,\r\n        uint256 _feeLp\r\n    ) public onlyOwner {\r\n            fee1 = _fee1;\r\n            fee2 = _fee2;\r\n            fee3 = _fee3;\r\n            fee4 = _fee4;\r\n            feeSwap = _feeSwap;\r\n            feeLinkedin = _feeLinkedin;\r\n            feeLp = _feeLp;\r\n            uint256 _all = fee1 + fee2 + fee3 + fee4 + feeSwap + feeLinkedin + feeLp;\r\n            uint256 _totalFee = IToken(bnbtAddress).totalFees();\r\n            require(_all == _totalFee, 'DividendTracker: fee error');\r\n    }\r\n    // \u8bbe\u7f6e\u6536fee\u5730\u57401\uff0c2\uff0c3\uff0c4\r\n    function setFeeAddress(\r\n        address _feeAddress1,\r\n        address _feeAddress2,\r\n        address _feeAddress3,\r\n        address _feeAddress4\r\n    ) public onlyOwner {\r\n        feeAddress1 = _feeAddress1;\r\n        feeAddress2 = _feeAddress2;\r\n        feeAddress3 = _feeAddress3;\r\n        feeAddress4 = _feeAddress4;\r\n    }\r\n    function setAmount(uint256 _amount) public onlyOwner {\r\n        amount = _amount;\r\n    }\r\n    function setLpMin(uint256 _lpMin) public onlyOwner {\r\n        lpMin = _lpMin;\r\n    }\r\n    function setNotHolder(address _address) public onlyOwner {\r\n        notHolder[_address] = !notHolder[_address];\r\n    }\r\n    \r\n\r\n    // \u63d0\u53d6\r\n    function withdraw(address _token, address _to, uint256 _value) public onlyOwner {\r\n        TransferHelper.safeTransfer(_token, _to, _value);\r\n    }\r\n    // \u63d0\u53d6ETH\r\n    function withdrawETH(address _to, uint256 _value) public onlyOwner {\r\n        TransferHelper.safeTransferETH(_to, _value);\r\n    }\r\n\r\n    // \u6dfb\u52a0\u5206\u7ea2\u5730\u5740\r\n    event Add(address _key);\r\n    // \u79fb\u9664\u5206\u7ea2\u5730\u5740\r\n    event Remove(address _key);\r\n    // Token\u5151\u6362\u4e8b\u4ef6\r\n    event TokenSwap(uint256 _tokenBalances, uint256 _ethBalanceBefore, uint256 _ethBalanceNow);\r\n    // \u89e6\u53d1\u672c\u6b21\u91d1\u989d\u4e8b\u4ef6\r\n    event BalanceInsufficient(uint256 _dividendTokenAmount, uint256 _dividendCoinAmount, uint256 _ethBalances);\r\n    // \u5206\u7ea2\u91d1\u989d\u4e8b\u4ef6\r\n    event Fee1234Rewards(address feeAddress1, uint256 _fee1Amount, address feeAddress2, uint256 _fee2Amount, address feeAddress3, uint256 _fee3Amount, address feeAddress4, uint256 _fee4Amount);\r\n    // \u56de\u6d41\u8d44\u91d1\u6c60\u4e8b\u4ef6\r\n    event SwapUsdtToBnbdaoUsdtLp(uint256 _backflowAmount);\r\n    // \u4e0a\u4e0b\u7ea7\u5206\u7ea2\u4e8b\u4ef6\u3002\u7528\u6237\u5730\u5740, \u5206\u7ea2\u7684\u6570\u91cf\r\n    event LinkedinRewards(address _address, uint256 _value);\r\n    // \u89e6\u53d1\u6301\u5e01\u5206\u7ea2\u4e8b\u60c5\r\n    event LpRewards(address _address, uint256 _value); \r\n   \r\n\r\n    // \u6dfb\u52a0\u6216\u79fb\u9664\u5730\u5740\r\n    // \u53c2\u65701: \u53d1\u9001\u65b9\u5730\u5740\r\n    // \u53c2\u65702: \u63a5\u6536\u65b9\u5730\u5740\r\n    function addOrRemove(address _from, address _to) public onlytokenAddress override lock {\r\n        _addOrRemove(_from, _to);\r\n        _addOrRemove(_to, _from);\r\n    }\r\n\r\n    function _addOrRemove(address _from, address _to) private {\r\n        // remove\r\n        if(!isContract(_from) && !isMin(_from) && isHolder[_from]) {\r\n            // from address\r\n            uint256 _fromIndex = indexOf[_from];\r\n            \r\n            // last address\r\n            uint256 _lastIndex = holders.length - 1;\r\n            address _lastAddress = holders[_lastIndex];\r\n            holders[_fromIndex] = _lastAddress;\r\n            indexOf[_lastAddress] = _fromIndex;\r\n\r\n            holders.pop();\r\n            isHolder[_from] = false;\r\n            delete indexOf[_from]; \r\n\r\n            if(pointer >= holders.length) {\r\n                pointer = 0;\r\n            }\r\n            \r\n            emit Remove(_from);\r\n        }\r\n        // add\r\n        if(_to != address(0) && !isContract(_to) && isMin(_to) && !isHolder[_to]) {\r\n            if(notHolder[_to]) return;   // \u5982\u679c\u662f\u4e0d\u53ef\u5206\u7ea2\u5730\u5740\u5c31\u4e0d\u6dfb\u52a0\r\n            isHolder[_to] = true;\r\n            indexOf[_to] = holders.length;\r\n            holders.push(_to);\r\n\r\n            emit Add(_to);\r\n        }\r\n\r\n        _removeNotHolderAddress(_from);\r\n        _removeNotHolderAddress(_to);\r\n    }\r\n\r\n    // \u79fb\u9664\u4e0d\u53ef\u4ee5\u5206\u7ea2\u5730\u5740\r\n    function _removeNotHolderAddress(address _from) private {\r\n        // \u79fb\u9664\u4e0d\u53ef\u5206\u7ea2\u5730\u5740\r\n        if(isHolder[_from] && notHolder[_from]) {\r\n            // from address\r\n            uint256 _fromIndex = indexOf[_from];\r\n            \r\n            // last address\r\n            uint256 _lastIndex = holders.length - 1;\r\n            address _lastAddress = holders[_lastIndex];\r\n            holders[_fromIndex] = _lastAddress;\r\n            indexOf[_lastAddress] = _fromIndex;\r\n\r\n            holders.pop();\r\n            isHolder[_from] = false;\r\n            delete indexOf[_from]; \r\n\r\n            if(pointer >= holders.length) {\r\n                pointer = 0;\r\n            }\r\n            \r\n            emit Remove(_from);\r\n        }\r\n    }\r\n\r\n\r\n    // \u63d2\u961f\r\n    function _jump(address _from) private {\r\n        // \u5982\u679c\u662f0\u5730\u5740\u6216\u8005\u5408\u7ea6\u6216\u8005\u662f\u4e0d\u5b58\u5728\u7684\u8bdd, \u5c31\u4e0d\u7ba1\u3002\r\n        if(_from == address(0) || isContract(_from) || !isHolder[_from]) return;\r\n        \r\n        address _pointerHolder = holders[pointer];  // \u83b7\u53d6\u5f53\u524d\u6307\u9488\u7684\u5730\u5740\r\n        uint256 _fromIndex = indexOf[_from];        // \u83b7\u53d6from\u7684\u7d22\u5f15\r\n        // \u8c03\u6362\u4f4d\u7f6e\r\n        holders[pointer] = _from;\r\n        holders[_fromIndex] = _pointerHolder;\r\n        // \u66f4\u6362\u7d22\u5f15\r\n        indexOf[_from] = pointer;\r\n        indexOf[_pointerHolder] = _fromIndex;\r\n    }\r\n\r\n    // \u67e5\u8be2\u5168\u90e8\u7684\u6301\u5e01\u8005\u5730\u5740\r\n    function getHolders() public view returns (address[] memory x) {\r\n        uint256 len = holders.length;\r\n        x = new address[](len);\r\n        for(uint256 i = 0; i < len; i++) {\r\n            x[i] = holders[i];\r\n        }\r\n    }\r\n\r\n    // \u67e5\u8be2\u6301\u5e01\u8005\u5730\u5740\u6570\u91cf\r\n    function getHoldersLength() public view returns (uint256) {\r\n        return holders.length;\r\n    }\r\n\r\n    // \u83b7\u53d6\u672c\u6b21\u5206\u7ea2\u7684\u6301\u5e01\u8005\u5730\u5740, \u548c\u4ed6\u4eec\u7684\u4f59\u989d\r\n    function _holdersDividend() private returns (address[] memory _addrs, uint256[] memory _values) {\r\n        if (holders.length == 0) {\r\n            return (new address[](0), new uint256[](0));\r\n        }\r\n\r\n        _addrs = holders.length <= amount ? new address[](holders.length) : new address[](amount);\r\n        _values = new uint256[](_addrs.length);\r\n\r\n        if (holders.length <= amount) {\r\n            for(uint256 i = 0; i < holders.length; i++) {\r\n                _addrs[i] = holders[i];\r\n            }\r\n            pointer = 0;\r\n        }else if (holders.length - pointer >= amount) {\r\n            for(uint256 i = 0; i < amount; i++) {\r\n                _addrs[i] = holders[pointer+i];\r\n            }\r\n            pointer = pointer + amount;\r\n            pointer = pointer >= holders.length ? 0 : pointer;\r\n        }else {\r\n            uint256 _end = holders.length > pointer ? holders.length - pointer : 0;\r\n            uint256 _start = amount - _end;\r\n            for(uint256 i = 0; i < _end; i++) {\r\n                _addrs[i] = holders[pointer+i];\r\n            }\r\n            for(uint256 i = 0; i < _start; i++) {\r\n                _addrs[_end+i] = holders[i];\r\n            }\r\n            pointer = _start;\r\n        }\r\n\r\n        for(uint256 i = 0; i < _addrs.length; i++) {\r\n            _values[i] = getBnbtWbnbLpBalance(_addrs[i]);\r\n        }\r\n        // \u83b7\u53d6\u5230\u4e86\u672c\u6b21\u5206\u7ea2\u7684\u5730\u5740\uff0c\u548c\u5730\u5740\u5bf9\u5e94\u7684\u4f59\u989d.\r\n    }\r\n\r\n    // \u5151\u6362\u3002\u5168\u90e8\u7684BNBT\u6362\u6210ETH\uff0c\u7528\u4e8e\u540e\u9762\u5206\u7ea2\u3002\r\n    function tokenSwap() public override {\r\n        uint256 _ethBalanceBefore = IERC20(ethAddress).balanceOf(address(this)); // \u4e4b\u524d\u7684\u4f59\u989d\r\n\r\n        // \u5f53\u524d\u5168\u90e8\u7684bnbt\u90fd\u6362\u6210ETH\u3002BNBT -> WBNB -> ETH\r\n        uint256 _bnbtBalances = IERC20(bnbtAddress).balanceOf(address(this));\r\n        address[] memory _path = new address[](3); // \u5151\u6362\r\n        _path[0] = bnbtAddress;\r\n        _path[1] = wbnbAddress;\r\n        _path[2] = ethAddress;\r\n        // \u628atoken\u6388\u6743\u7ed9\u8def\u7531\u5408\u7ea6\u3002\r\n        TransferHelper.safeApprove(bnbtAddress, routerAddress, _bnbtBalances);\r\n        if(_bnbtBalances == 0) return; \r\n        IUniswapV2Router02(routerAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            _bnbtBalances,\r\n            0, // \u63a5\u53d7\u4efb\u610f\u91d1\u989d\u7684\u5151\u6362\r\n            _path,\r\n            address(this),\r\n            block.timestamp);\r\n        uint256 _ethBalanceNow = IERC20(ethAddress).balanceOf(address(this)); // \u73b0\u5728\u7684\u4f59\u989d\r\n        emit TokenSwap(_bnbtBalances, _ethBalanceBefore, _ethBalanceNow);  // \u5151\u6362\u4e8b\u4ef6\u3002\r\n    }\r\n\r\n    // \u5206\u7ea2\r\n    // \u53c2\u65701\uff1a\u7528\u6237\u5730\u5740, \u53ef\u63d2\u961f\r\n    // \u53c2\u65702\uff1a\u672c\u6b21\u5206\u7ea2\u7684Token\u6570\u91cf\r\n    function dividendRewards(address _from, uint256 _dividendTokenAmount) public override onlytokenAddress lock {\r\n        if(_dividendTokenAmount == 0) return; // Token\u6570\u91cf\u4e3a0\u5c31\u4e0d\u5206\u7ea2\u4e86\r\n        uint256 _totalFees = IToken(bnbtAddress).totalFees();\r\n\r\n        // \u8ba1\u7b97\u5206\u7ea2\u7684coin\u6570\u91cf\r\n        address[] memory _path = new address[](3);\r\n        _path[0] = bnbtAddress;\r\n        _path[1] = wbnbAddress;\r\n        _path[2] = ethAddress;\r\n        uint256[] memory _amounts = IUniswapV2Router02(routerAddress).getAmountsOut(_dividendTokenAmount, _path);\r\n        uint256 _dividendCoinAmount0 = _amounts[_amounts.length - 1];  // \u5206\u7ea2\u6570\u91cf\u5bf9\u5e94\u7684coin\u5206\u7ea2\u6570\u91cf\r\n        uint256 _ethBalances = IERC20(ethAddress).balanceOf(address(this));                 // \u5f53\u524d\u5408\u7ea6\u7684\u4f59\u989d\r\n        if(_dividendCoinAmount0 == 0 || _ethBalances < _dividendCoinAmount0) return;       // coin\u6570\u91cf\u4e3a0\u5c31\u4e0d\u5206\u7ea2\u4e86, \u672c\u5408\u7ea6\u4f59\u989d\u4e0d\u591f\u4e5f\u4e0d\u5206\u7ea2\u3002\r\n        // \u9632\u6b62\u7d2f\u79ef\u6c89\u6dc0coin\r\n        uint256 _overflow = _ethBalances.sub(_dividendCoinAmount0);\r\n        uint256 _dividendCoinAmount = _overflow.div(5).add(_dividendCoinAmount0); // \u4f46\u4f59\u989d\u6bd4\u672c\u6b21\u6570\u91cf\u591a\u7684\u65f6\u5019, \u591a\u7ed9\u76f8\u5dee\u6570\u91cf\u7684\u4e94\u5206\u4e4b\u4e00\r\n        emit BalanceInsufficient(_dividendTokenAmount, _dividendCoinAmount, _ethBalances); // \u89e6\u53d1\u672c\u6b21\u91d1\u989d\u4e8b\u4ef6\r\n        // \u8bd5\u56fe\u63d2\u961f\r\n        _jump(_from);\r\n        \r\n        // \u8ba1\u7b97\u5206\u7ea2\r\n        uint256[] memory _fee12345 = new uint256[](4);\r\n        _fee12345[0] = _dividendCoinAmount.mul(fee1).div(_totalFees);\r\n        _fee12345[1] = _dividendCoinAmount.mul(fee2).div(_totalFees);\r\n        _fee12345[2] = _dividendCoinAmount.mul(fee3).div(_totalFees);\r\n        _fee12345[3] = _dividendCoinAmount.mul(fee4).div(_totalFees);\r\n        uint256 _backflowAmount = _dividendCoinAmount.mul(feeSwap).div(_totalFees);\r\n        uint256 _linkedinAmount = _dividendCoinAmount.mul(feeLinkedin).div(_totalFees);\r\n        uint256 _lpRewardsAmount = _dividendCoinAmount.mul(feeLp).div(_totalFees);\r\n\r\n        // \u5f00\u59cb\u5206\u7ea2\r\n        _fee1234Rewards(_fee12345[0], _fee12345[1], _fee12345[2], _fee12345[3]);  // fee1234\u5206\u7ea2\r\n        _swapUsdtToBnbdaoUsdtLp(_backflowAmount);                             // \u8fd0\u8425\u5206\u7ea2\r\n        _linkedinRewards(_from, _linkedinAmount);                             // \u4e0a\u4e0b\u7ea7\u5206\u7ea2\r\n        _lpRewards(_lpRewardsAmount);                                         // LP\u548c\u5c0f\u533a\u6301\u5e01\u5206\u7ea2\r\n    }\r\n\r\n    // \u5206\u7ea21,2,3,4\r\n    function _fee1234Rewards(\r\n        uint256 _fee1Amount,\r\n        uint256 _fee2Amount,\r\n        uint256 _fee3Amount,\r\n        uint256 _fee4Amount\r\n    ) private {\r\n        if(_fee1Amount > 0) TransferHelper.safeTransfer(ethAddress, feeAddress1, _fee1Amount);\r\n        if(_fee2Amount > 0) TransferHelper.safeTransfer(ethAddress, feeAddress2, _fee2Amount);\r\n        if(_fee3Amount > 0) TransferHelper.safeTransfer(ethAddress, feeAddress3, _fee3Amount);\r\n        if(_fee4Amount > 0) TransferHelper.safeTransfer(ethAddress, feeAddress4, _fee4Amount);\r\n        emit Fee1234Rewards(feeAddress1, _fee1Amount, feeAddress2, _fee2Amount, feeAddress3, _fee3Amount, feeAddress4, _fee4Amount); // \u89e6\u53d1\u4e8b\u4ef6\r\n    }\r\n\r\n    // eth\u5151\u6362usdt\u56de\u6d41\u5230B\u6c60\u5b50, bnbdao-usdt-lp\r\n    function _swapUsdtToBnbdaoUsdtLp(uint256 _backflowAmount) private {\r\n        if(_backflowAmount == 0) return;\r\n        // \u5982\u679c\u6c60\u5b50\u8fd8\u6ca1\u6709\u6dfb\u52a0\u6d41\u52a8\u6027\u7684\u8bdd, \u5c31\u4e0d\u56de\u6d41\r\n        uint256 _totalSupply = IUniswapV2Pair(bnbdaoUsdtLpAdress).totalSupply();\r\n        if(_totalSupply == 0) return;\r\n\r\n        TransferHelper.safeApprove(ethAddress, routerAddress, _backflowAmount);\r\n        address[] memory _path = new address[](2); // \u5151\u6362\r\n        _path[0] = ethAddress;\r\n        _path[1] = usdtAddress;\r\n        IUniswapV2Router02(routerAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            _backflowAmount,\r\n            0, // \u63a5\u53d7\u4efb\u610f\u91d1\u989d\u7684\u5151\u6362\r\n            _path,\r\n            bnbdaoUsdtLpAdress, // \u5148\u7ed9\u5230\u5f53\u524d\u5408\u7ea6\r\n            block.timestamp);\r\n\r\n        IUniswapV2Pair(bnbdaoUsdtLpAdress).sync();    // \u66f4\u65b0\u50a8\u5907\u91cf\r\n        emit SwapUsdtToBnbdaoUsdtLp(_backflowAmount);  // \u89e6\u53d1\u4e8b\u4ef6\r\n    }\r\n\r\n    // \u4e0a\u4e0b\u7ea7\u5206\u7ea2\r\n    function _linkedinRewards(address _from, uint256 _linkedinAmount) private {\r\n        address[] memory _addrs = IToken(bnbtAddress).getLinkedinAddrs(_from); // \u83b7\u53d6\u4e0a\u4e0b\u7ea7\u5173\u7cfb\r\n        uint256 _everyAmount = _linkedinAmount.div(_addrs.length + 2); // \u4e0a\u4e00\u7ea73\u4efd, \u5176\u5b83\u90fd\u662f1\u4efd\r\n        uint256 _moreAmount = _everyAmount * 3;\r\n        \r\n        uint256 _value;\r\n        uint256 _marketingValue = 0;\r\n        for(uint256 i = 0; i < _addrs.length; i++) {\r\n            _value = i == 0 ? _moreAmount : _everyAmount;\r\n            if(_addrs[i] != address(0)) {\r\n                // \u4e0a\u4e0b\u7ea7\u5b58\u5728\u7684\u8bdd, \u5c31\u8f6c\u3002\r\n                TransferHelper.safeTransfer(ethAddress, _addrs[i], _value);\r\n                emit LinkedinRewards(_addrs[i], _value);  // \u89e6\u53d1\u5206\u7ea2\u4e8b\u4ef6\r\n            }else {\r\n                // \u6ca1\u6709\u4e0a\u4e0b\u7ea7\u7ed9\u5230\u8fd0\u8425\u65b9\u5730\u5740\r\n                _marketingValue += _value;\r\n            }\r\n        }\r\n        if(_marketingValue > 0) TransferHelper.safeTransfer(ethAddress, feeAddress1, _marketingValue);\r\n    }\r\n\r\n    // \u6301\u5e01\u5206\u7ea2\r\n    function _lpRewards(uint256 _lpRewardsAmount) private {\r\n        // \u5148\u83b7\u53d6\u5230\u672c\u6b21\u5206\u7ea2\u7684\u5730\u5740\u548c\u5730\u5740\u5bf9\u5e94\u7684\u4f59\u989d\r\n        (address[] memory _addrs, uint256[] memory _values) = _holdersDividend();\r\n        uint256 _totalValue;\r\n        for(uint256 i = 0; i < _values.length; i++) {\r\n            _totalValue += _values[i];\r\n        }\r\n\r\n        // \u5f00\u59cb\u5faa\u73af\u8f6c\u8d26\r\n        for(uint256 i = 0; i < _addrs.length; i++) {\r\n            uint256 _fee = _values[i].mul(_lpRewardsAmount).div(_totalValue);\r\n            if (_fee > 0) {\r\n                TransferHelper.safeTransfer(ethAddress, _addrs[i], _fee);\r\n                emit LpRewards(_addrs[i], _fee); // \u89e6\u53d1\u6301\u5e01\u5206\u7ea2\u4e8b\u60c5\r\n            }\r\n        }\r\n\r\n        // \u518d\u6b21\u9a8c\u8bc1\u662f\u5426\u6dfb\u52a0\u8fd8\u662f\u79fb\u9664\r\n        for(uint256 i = 0; i < _addrs.length; i++) {\r\n            _addOrRemove(_addrs[i], _addrs[i]);\r\n        }\r\n    }\r\n\r\n    // true = contract\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {codehash := extcodehash(account)}\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    // lp\u6301\u6709\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\r\n    function isMin(address _address) public view returns(bool) {\r\n        uint256 _lpBalance = IERC20(bnbtWbnbLpAddress).balanceOf(_address);\r\n        return _lpBalance >= lpMin;\r\n    }\r\n    // \u67e5\u8be2\u5730\u5740\u7684lp\u4f59\u989d\r\n    function getBnbtWbnbLpBalance(address _address) internal view returns(uint256) {\r\n        return IERC20(bnbtWbnbLpAddress).balanceOf(_address);\r\n    }\r\n\r\n    // =============================BNBDAO\u7684\u63a5\u53e3=================================\r\n    event BnbdaoSwapUsdtToLpAddress(uint256 _value, address _address1);\r\n    event BnbdaoSwapBnbtToZeroAddress(uint256 _value, uint256 _bnbt);\r\n\r\n    // BNBDAO\u5e01\u3002\u6dfb\u52a0\u6d41\u52a8\u6027\u548c\u5356\u51fa\u65f6\u4f1a\u6263\u9664\u624b\u7eed\u8d39BNBDAO\u5e01\u5230\u8fd9\u91cc\r\n    // \u7136\u540e\u4e00\u534a\u5151\u6362\u6210USDT\u6253\u8fdbfee1\u5730\u5740, \u4e00\u534a\u5151\u6362\u6210BNBT\u6253\u8fdb\u9ed1\u6d1e\u5730\u5740;\r\n    function swapAndBurn() public onlyOwner {\r\n        uint256 _bnbdaoBalances = IERC20(bnbdaoAddress).balanceOf(address(this));\r\n\r\n        uint256 _value1 = _bnbdaoBalances.div(2);\r\n        uint256 _value2 = _bnbdaoBalances.sub(_value1);\r\n        _bnbdaoSwapUsdtToLpAddress(_value1);\r\n        _bnbdaoSwapBnbtToZeroAddress(_value2);\r\n    }\r\n\r\n    // \u7ed9\u5b9a\u6570\u91cf\u7684BNBDAO\u5151\u6362\u6210usdt, \u6253\u8fdbfee1\u91cc\u9762\r\n    function _bnbdaoSwapUsdtToLpAddress(uint256 _v1) private {\r\n        if(_v1 == 0) return;\r\n        address[] memory _path = new address[](2);  // \u5151\u6362\r\n        _path[0] = bnbdaoAddress;\r\n        _path[1] = usdtAddress;\r\n        // \u628atoken\u6388\u6743\u7ed9\u8def\u7531\u5408\u7ea6\u3002\r\n        TransferHelper.safeApprove(bnbdaoAddress, routerAddress, _v1);\r\n        IUniswapV2Router02(routerAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            _v1,\r\n            0,\r\n            _path,\r\n            feeAddress1,\r\n            block.timestamp);\r\n\r\n        // \u89e6\u53d1\u4e8b\u4ef6\r\n        emit BnbdaoSwapUsdtToLpAddress(_v1, feeAddress1);\r\n    }\r\n\r\n    // \u628a\u4e00\u822c\u6570\u91cf\u7684BNBDAO\u5e01\u5151\u6362\u6210BNBT, \u6253\u8fdb\u9ed1\u6d1e\u5730\u5740\r\n    function _bnbdaoSwapBnbtToZeroAddress(uint256 _v2) private {\r\n        uint256 _zeroAddressBalanceBefore = IERC20(bnbtAddress).balanceOf(address(0));\r\n\r\n        // BNBDAO\u6362\u6210BNBT\r\n        address[] memory _path = new address[](4); // \u5151\u6362\r\n        _path[0] = bnbdaoAddress;\r\n        _path[1] = usdtAddress;\r\n        _path[2] = wbnbAddress;\r\n        _path[3] = bnbtAddress;\r\n        // \u628atoken\u6388\u6743\u7ed9\u8def\u7531\u5408\u7ea6\u3002\r\n        TransferHelper.safeApprove(bnbdaoAddress, routerAddress, _v2);\r\n        IUniswapV2Router02(routerAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            _v2,\r\n            0,\r\n            _path,\r\n            address(0),\r\n            block.timestamp);\r\n        // \u89e6\u53d1\u4e8b\u4ef6\r\n        uint256 _zeroAddressBalanceNow = IERC20(bnbtAddress).balanceOf(address(0));\r\n        uint256 _bnbt = _zeroAddressBalanceNow.sub(_zeroAddressBalanceBefore);\r\n        emit BnbdaoSwapBnbtToZeroAddress(_v2, _bnbt);\r\n    }\r\n\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wbnbAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAddress1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAddress2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAddress3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAddress4\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_key\",\"type\":\"address\"}],\"name\":\"Add\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_dividendTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_dividendCoinAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ethBalances\",\"type\":\"uint256\"}],\"name\":\"BalanceInsufficient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bnbt\",\"type\":\"uint256\"}],\"name\":\"BnbdaoSwapBnbtToZeroAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address1\",\"type\":\"address\"}],\"name\":\"BnbdaoSwapUsdtToLpAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeAddress1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee1Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeAddress2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee2Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeAddress3\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee3Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeAddress4\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee4Amount\",\"type\":\"uint256\"}],\"name\":\"Fee1234Rewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LinkedinRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LpRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_key\",\"type\":\"address\"}],\"name\":\"Remove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_backflowAmount\",\"type\":\"uint256\"}],\"name\":\"SwapUsdtToBnbdaoUsdtLp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenBalances\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ethBalanceBefore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ethBalanceNow\",\"type\":\"uint256\"}],\"name\":\"TokenSwap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"addOrRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnbdaoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnbdaoUsdtLpAdress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnbtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnbtWbnbLpAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dividendTokenAmount\",\"type\":\"uint256\"}],\"name\":\"dividendRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress4\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLinkedin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHolders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"x\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHoldersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"indexOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bnbdaoAddress\",\"type\":\"address\"}],\"name\":\"initBnbdao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bnbtAddress\",\"type\":\"address\"}],\"name\":\"initBnbt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"notHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pointer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeLinkedin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeLp\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAddress2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAddress3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAddress4\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpMin\",\"type\":\"uint256\"}],\"name\":\"setLpMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setNotHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbnbAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DividendTracker", "CompilerVersion": "v0.6.6+commit.6c089d02", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b6adf7bf5d26d4165cbea19da5ef6a883418e7c0000000000000000000000000ca143ce32fe78f1f7019d7d551a6402fc5350c7300000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c0000000000000000000000002170ed0880ac9a755fd29b2688956bd959f933f800000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000006c7b86b166fdd073716841077cee6e97c825845c000000000000000000000000ab5871b3bb36c126537d3ad702181d1f9bb294e3000000000000000000000000900133c18b3cfbd045386e3bb0962938c31ad0b3000000000000000000000000c7821ae99f66889b4d9dc98c50197823b21d85e4", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3161ec2515fb2b595fa12f49cb9dfaf93e34cec29e39f8697539024c8923380f"}