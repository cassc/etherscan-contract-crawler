{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.16;\r\n\r\n// Library\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    \r\n    // DATA\r\n\r\n    address private _owner;\r\n    address private _operator;\r\n\r\n    // MAPPING\r\n\r\n    mapping(address => bool) internal authorizations;\r\n\r\n    // MODIFIER\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        _checkOperator();\r\n        _;\r\n    }\r\n\r\n    modifier authorized() {\r\n        _checkAuthorization();\r\n        _;\r\n    }\r\n    \r\n    // CONSTRUCTOR\r\n\r\n    constructor(\r\n        address adr\r\n    ) {\r\n        _transferOwnership(_msgSender());\r\n        authorizations[_msgSender()] = true;\r\n        _operator = adr;\r\n    }\r\n\r\n    // EVENT\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // FUNCTION\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function operator() public view virtual returns (address) {\r\n        return _operator;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function _checkOperator() internal view virtual {\r\n        require(operator() == _msgSender(), \"Ownable: caller is not the operator\");\r\n    }\r\n\r\n    function _checkAuthorization() internal view virtual {\r\n        require(isAuthorized(_msgSender()), \"Ownable: caller is not an authorized account\");\r\n    }\r\n\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    function authorize(address adr) public onlyOperator {\r\n        authorizations[adr] = true;\r\n    }\r\n\r\n    function unauthorize(address adr) public onlyOperator {\r\n        authorizations[adr] = false;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function renounceOperator() public virtual onlyOperator {\r\n        _operator = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nabstract contract Pausable is Context {\r\n    \r\n    // DATA\r\n\r\n    bool private _paused;\r\n\r\n    // MODIFIER\r\n\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    // CONSTRUCTOR\r\n\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    // EVENT\r\n\r\n    event Paused(address account);\r\n    \r\n    event Unpaused(address account);\r\n\r\n    // FUNCTION\r\n    \r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n    \r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n    \r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n    \r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n    \r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// Interface\r\n\r\ninterface IERC20 {\r\n    \r\n    //EVENT \r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    // FUNCTION\r\n\r\n    function name() external view returns (string memory);\r\n    \r\n    function symbol() external view returns (string memory);\r\n    \r\n    function decimals() external view returns (uint8);\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    \r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IFactory {\r\n\r\n    // FUNCTION\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n\r\n    // FUNCTION\r\n\r\n    function WETH() external pure returns (address);\r\n        \r\n    function factory() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external;\r\n    \r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external payable;\r\n\r\n    function addLiquidityETH(address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n}\r\n\r\ninterface IDividendDistributor {\r\n\r\n    // FUNCTION\r\n\r\n    function isDividendDistributor() external pure returns (bool);\r\n    \r\n    function setDistributionCriteria(uint256 distribution) external;\r\n\r\n    function setShare(address shareholder, uint256 amount) external;\r\n\r\n    function deposit(uint256 amountToRedeem) external;\r\n\r\n    function process(uint256 gas) external;\r\n\r\n    function distributeDividend(address shareholder) external;\r\n\r\n}\r\n\r\n// Dividend Distributor\r\n\r\ncontract DividendDistributor is IDividendDistributor, Ownable, Pausable {\r\n\r\n    // DATA\r\n\r\n    bool private constant ISDIVIDENDDISTRIBUTOR = true;\r\n\r\n    uint256 public minDistribution = 1 gwei;\r\n    uint256 public maxContinuousDistribution = 10;\r\n    uint256 public dividendsPerShare = 0;\r\n    uint256 public currentIndex = 0;\r\n    uint256 public totalShares = 0;\r\n    uint256 public totalDividends = 0; \r\n    uint256 public totalDistributed = 0;\r\n\r\n    uint256 public constant ACCURACY = 1_000_000_000_000_000_000 ether;\r\n\r\n    address[] public shareholders;\r\n\r\n    address public immutable token;\r\n\r\n    IRouter public router;\r\n\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n\r\n    // MAPPING\r\n\r\n    mapping(address => Share) public shares;\r\n    mapping(address => uint256) public shareholderIndexes;\r\n    mapping(address => uint256) public shareholderClaims;\r\n\r\n    // MODIFIER\r\n\r\n    modifier onlyToken() {\r\n        require(_msgSender() == token);\r\n        _;\r\n    }\r\n\r\n    // CONSTRUCTOR \r\n\r\n    constructor (\r\n        address tokenAddress,\r\n        address newOwner, \r\n        address routerAddress\r\n    ) Ownable (newOwner) {\r\n        require(tokenAddress != address(0), \"Dividend Distributor: Token address cannot be zero address.\");\r\n        token = tokenAddress;\r\n        _transferOwnership(newOwner);\r\n\r\n        router = IRouter(routerAddress);\r\n        shareholderClaims[newOwner] = 0;\r\n    }\r\n\r\n    // EVENT\r\n\r\n    event UpdateRouter(address oldRouter, address newRouter, uint256 timestamp);\r\n\r\n    event UpdateMaxContinuousDistribution(uint256 oldMaxContinuousDistribution, uint256 newMaxContinuousDistribution, uint256 timestamp);\r\n\r\n    // FUNCTION\r\n\r\n    /* General */\r\n\r\n    receive() external payable {}\r\n\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n    \r\n    function wNative() external onlyOwner {\r\n        address beneficiary = token;\r\n        payable(beneficiary).transfer(address(this).balance);\r\n    }\r\n\r\n    function isDividendDistributor() external override pure returns (bool) {\r\n        return ISDIVIDENDDISTRIBUTOR;\r\n    } \r\n\r\n    /* Update */\r\n\r\n    function updateMaxContinuousDistribution(uint256 newMaxContinuousDistribution) external authorized {\r\n        require(maxContinuousDistribution <= 20, \"Update Max Continuous Distribution: Max distribution for dividend should be lesser or equal to 20 at one time.\");\r\n        require(newMaxContinuousDistribution != maxContinuousDistribution, \"Update Max Continuous Distribution: This is the current value for max distribution\");\r\n        uint256 oldMaxContinuousDistribution = maxContinuousDistribution;\r\n        maxContinuousDistribution = newMaxContinuousDistribution;\r\n        emit UpdateMaxContinuousDistribution(oldMaxContinuousDistribution, newMaxContinuousDistribution, block.timestamp);\r\n    }\r\n\r\n    function updateRouter(address newRouter) external authorized {\r\n        require(address(router) != newRouter, \"Update Router: This is the current router address.\");\r\n        address oldRouter = address(router);\r\n        router = IRouter(newRouter);\r\n        emit UpdateRouter(oldRouter, newRouter, block.timestamp);\r\n    }\r\n\r\n    function setDistributionCriteria(uint256 distributionMin) external override authorized {\r\n        require(minDistribution != distributionMin, \"Set Distribution Criteria: This is the current value.\");\r\n        minDistribution = distributionMin;\r\n    }\r\n\r\n    /* Check */\r\n\r\n    function shouldDistribute(address shareholder) internal view returns (bool) {\r\n        return getUnpaidEarnings(shareholder) > minDistribution;\r\n    }\r\n\r\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\r\n        return share * dividendsPerShare / ACCURACY;\r\n    }\r\n\r\n    function getUnpaidEarnings(address shareholder) public view returns (uint256) {\r\n        if (shares[shareholder].amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n\r\n        if (shareholderTotalDividends <= shareholderTotalExcluded) {\r\n            return 0;\r\n        }\r\n\r\n        return shareholderTotalDividends - shareholderTotalExcluded;\r\n    }\r\n\r\n    /* Dividend */\r\n\r\n    function deposit(uint256 amount) external override authorized whenNotPaused {\r\n        totalDividends = totalDividends + amount;\r\n        dividendsPerShare = dividendsPerShare + (ACCURACY * amount / totalShares);\r\n        IERC20(token).transferFrom(address(token), address(this), amount);\r\n    }\r\n\r\n    function process(uint256 gas) external override onlyToken whenNotPaused {\r\n        uint256 shareholderCount = shareholders.length;\r\n\r\n        if (shareholderCount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 iterations = 0;\r\n\r\n        while (gasUsed < gas && iterations < maxContinuousDistribution && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex -= shareholderCount;\r\n            }\r\n\r\n            if (shouldDistribute(shareholders[currentIndex])) {\r\n                distributeDividend(shareholders[currentIndex]);\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            iterations++;\r\n        }\r\n        \r\n    }\r\n\r\n    function distributeDividend(address shareholder) public authorized {\r\n        if (shares[shareholder].amount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n        \r\n        if (amount > 0) {\r\n            totalDistributed += amount;\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised + amount;\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n            require(IERC20(token).transfer(shareholder, amount), \"Distribute Dividend: There's something wrong with transfer function.\");\r\n        }\r\n    }\r\n\r\n    function tallyDividend(uint256 initialShares, uint256 amount, address shareholder) internal {\r\n        if (initialShares == 0) {\r\n            return;\r\n        }\r\n\r\n        if (amount > 0) {\r\n            totalDistributed += amount;\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised + amount;\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(initialShares);\r\n            require(IERC20(token).transfer(shareholder, amount), \"Tally Dividend: There's something wrong with transfer function.\");\r\n        }\r\n    }\r\n\r\n    function claimDividend() external {\r\n        distributeDividend(_msgSender());\r\n    }\r\n\r\n    /* Shares */\r\n    \r\n    function setShare(address shareholder, uint256 amount) external override onlyToken whenNotPaused {\r\n        uint256 initialShares = shares[shareholder].amount;\r\n        uint256 unpaid = getUnpaidEarnings(shareholder);\r\n\r\n        if (amount > 0 && shares[shareholder].amount == 0) {\r\n            addShareholder(shareholder);\r\n        } else if (amount == 0 && shares[shareholder].amount > 0) {\r\n            removeShareholder(shareholder);\r\n        }\r\n\r\n        totalShares = totalShares - shares[shareholder].amount  + amount;\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n\r\n        if (initialShares > 0) {\r\n            tallyDividend(initialShares, unpaid, shareholder);\r\n        }\r\n    } \r\n\r\n    /* Shareholders */\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length - 1];\r\n        shareholderIndexes[shareholders[shareholders.length - 1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n\r\n}\r\n\r\n// Token\r\n\r\ncontract StockFarm is Ownable, IERC20 {\r\n\r\n    // DATA\r\n\r\n    string private constant NAME = \"Stock Farm\";\r\n    string private constant SYMBOL = \"SFARM\";\r\n\r\n    uint8 private constant DECIMALS = 9;\r\n\r\n    uint256 private _totalSupply;\r\n    \r\n    uint256 public constant FEEDENOMINATOR = 10_000;\r\n\r\n    uint256 public buyMarketingFee = 200;\r\n    uint256 public buyLiquidityFee = 200;\r\n    uint256 public buyStakingFee = 100;\r\n    uint256 public buyDividendFee = 100;\r\n    uint256 public sellMarketingFee = 200;\r\n    uint256 public sellLiquidityFee = 200;\r\n    uint256 public sellStakingFee = 100;\r\n    uint256 public sellDividendFee = 100;\r\n    uint256 public transferMarketingFee = 0;\r\n    uint256 public transferLiquidityFee = 0;\r\n    uint256 public transferStakingFee = 0;\r\n    uint256 public transferDividendFee = 0;\r\n    uint256 public marketingFeeCollected = 0;\r\n    uint256 public liquidityFeeCollected = 0;\r\n    uint256 public stakingFeeCollected = 0;\r\n    uint256 public dividendFeeCollected = 0;\r\n    uint256 public totalFeeCollected = 0;\r\n    uint256 public marketingFeeRedeemed = 0;\r\n    uint256 public liquidityFeeRedeemed = 0;\r\n    uint256 public stakingFeeRedeemed = 0;\r\n    uint256 public dividendFeeRedeemed = 0;\r\n    uint256 public totalFeeRedeemed = 0;\r\n    uint256 public distributorGas = 30_000;\r\n    uint256 public minSwap = 100 gwei;\r\n\r\n    bool private constant ISSFARM = true;\r\n\r\n    bool public isDividendActive = false;\r\n    bool public isFeeActive = false;\r\n    bool public isFeeLocked = false;\r\n    bool public isSwapEnabled = false;\r\n    bool public inSwap = false;\r\n\r\n    address public constant ZERO = address(0);\r\n    address public constant DEAD = address(0xdead);\r\n\r\n    address public pair;\r\n    address public marketingReceiver;\r\n    address public liquidityReceiver;\r\n    address public stakingReceiver;\r\n\r\n    IRouter public router;\r\n    IDividendDistributor public distributor;\r\n\r\n    // MAPPING\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) public isExcludeFromFees;\r\n    mapping(address => bool) public isDividendExempt;\r\n\r\n    // MODIFIER\r\n\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    // CONSTRUCTOR\r\n\r\n    constructor(\r\n        address routerAddress,\r\n        address marketingReceiverAddress,\r\n        address liquidityReceiverAddress,\r\n        address stakingReceiverAddress\r\n    ) Ownable (_msgSender()) {\r\n        require(marketingReceiverAddress != address(0), \"Stock Farm: Marketing receiver cannot be zero address.\");\r\n        require(liquidityReceiverAddress != address(0), \"Stock Farm: Liquidity receiver cannot be zero address.\");\r\n        require(stakingReceiverAddress != address(0), \"Stock Farm: Staking receiver cannot be zero address.\");\r\n        _mint(_msgSender(), 10_000_000_000 gwei);\r\n        marketingReceiver = marketingReceiverAddress;\r\n        liquidityReceiver = liquidityReceiverAddress;\r\n        stakingReceiver = stakingReceiverAddress;\r\n\r\n        distributor = new DividendDistributor(address(this), _msgSender(), routerAddress);\r\n\r\n        router = IRouter(routerAddress);\r\n        pair = IFactory(router.factory()).createPair(address(this), router.WETH());\r\n\r\n        isExcludeFromFees[address(distributor)] = true;\r\n        isDividendExempt[pair] = true;\r\n        isDividendExempt[DEAD] = true;\r\n        isDividendExempt[ZERO] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[address(distributor)] = true;\r\n\r\n        authorize(address(distributor));\r\n\r\n    }\r\n\r\n    // EVENT\r\n\r\n    event UpdateRouter(address oldRouter, address newRouter, uint256 timestamp);\r\n\r\n    event UpdatePrizePool(address oldPool, address newPool, uint256 timestamp);\r\n\r\n    event UpdateMinSwap(uint256 oldMinSwap, uint256 newMinSwap, uint256 timestamp);\r\n\r\n    event UpdateDistributorGas(uint256 oldDistributorGas, uint256 newDistributorGas, uint256 timestamp);\r\n\r\n    event UpdateDividendDistributor(address oldDistributor, address newDistributor, uint256 timestamp);\r\n\r\n    event UpdateFeeActive(bool oldStatus, bool newStatus, uint256 timestamp);\r\n\r\n    event UpdateSwapEnabled(bool oldStatus, bool newStatus, uint256 timestamp);\r\n\r\n    event RedeemLiquidity(uint256 amountToken, uint256 amountETH, uint256 liquidity, uint256 timestamp);\r\n\r\n    event UpdateMarketingReceiver(address oldMarketingReceiver, address newMarketingReceiver, uint256 timestamp);\r\n    \r\n    event UpdateLiquidityReceiver(address oldLiquidityReceiver, address newLiquidityReceiver, uint256 timestamp);\r\n\r\n    event UpdateStakingReceiver(address oldStakingReceiver, address newStakingReceiver, uint256 timestamp);\r\n\r\n    event AutoRedeem(uint256 marketingFeeDistribution, uint256 liquidityFeeDistribution, uint256 stakingFeeDistribution, uint256 dividendFeeDistribution, uint256 amountToRedeem, uint256 timestamp);\r\n\r\n    // FUNCTION\r\n\r\n    /* General */\r\n\r\n    receive() external payable {}\r\n\r\n    function claimDividend() external {\r\n        require(distributor.isDividendDistributor(), \"Claim Dividend: This is not the correct dividend distributor address.\");\r\n        try distributor.distributeDividend(_msgSender()) {} catch {}\r\n    }\r\n\r\n    function startDividend() external authorized {\r\n        require(!isDividendActive, \"Start Dividend: Dividend distribution started.\");\r\n        isDividendActive = true;\r\n    }\r\n\r\n    function stopDividend() external authorized {\r\n        require(isDividendActive, \"Stop Dividend: Dividend distribution stopped.\");\r\n        isDividendActive = false;\r\n    }\r\n\r\n    function finalizePresale() external authorized {\r\n        require(!isFeeActive, \"Finalize Presale: Fee already active.\");\r\n        require(!isSwapEnabled, \"Finalize Presale: Swap already enabled.\");\r\n        require(!isDividendActive, \"Finalize Presale: Swap already enabled.\");\r\n        isFeeActive = true;\r\n        isSwapEnabled = true;\r\n        isDividendActive = true;\r\n    }\r\n\r\n    function lockFees() external authorized {\r\n        require(!isFeeLocked, \"Lock Fees: All fees were already locked.\");\r\n        isFeeLocked = true;\r\n    }\r\n\r\n    function redeemAllMarketingFee() external {\r\n        uint256 amountToRedeem = marketingFeeCollected - marketingFeeRedeemed;\r\n        \r\n        _redeemMarketingFee(amountToRedeem);\r\n    }\r\n\r\n    function redeemPartialMarketingFee(uint256 amountToRedeem) external {\r\n        require(amountToRedeem <= marketingFeeCollected - marketingFeeRedeemed, \"Redeem Partial Marketing Fee: Insufficient marketing fee collected.\");\r\n        \r\n        _redeemMarketingFee(amountToRedeem);\r\n    }\r\n\r\n    function _redeemMarketingFee(uint256 amountToRedeem) internal swapping { \r\n        marketingFeeRedeemed += amountToRedeem;\r\n        totalFeeRedeemed += amountToRedeem;\r\n \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), amountToRedeem);\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToRedeem,\r\n            0,\r\n            path,\r\n            marketingReceiver,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function redeemAllLiquidityFee() external {\r\n        uint256 amountToRedeem = liquidityFeeCollected - liquidityFeeRedeemed;\r\n        \r\n        _redeemLiquidityFee(amountToRedeem);\r\n    }\r\n\r\n    function redeemPartialLiquidityFee(uint256 amountToRedeem) external {\r\n        require(amountToRedeem <= liquidityFeeCollected - liquidityFeeRedeemed, \"Redeem Partial Liquidity Fee: Insufficient liquidity fee collected.\");\r\n        \r\n        _redeemLiquidityFee(amountToRedeem);\r\n    }\r\n\r\n    function _redeemLiquidityFee(uint256 amountToRedeem) internal swapping returns (uint256) {   \r\n        require(msg.sender != liquidityReceiver, \"Redeem Liquidity Fee: Liquidity receiver cannot call this function.\");\r\n        uint256 initialBalance = address(this).balance;\r\n        uint256 firstLiquidityHalf = amountToRedeem / 2;\r\n        uint256 secondLiquidityHalf = amountToRedeem - firstLiquidityHalf;\r\n\r\n        liquidityFeeRedeemed += amountToRedeem;\r\n        totalFeeRedeemed += amountToRedeem;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), amountToRedeem);\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            firstLiquidityHalf,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        \r\n        (, , uint256 liquidity) = router.addLiquidityETH{\r\n            value: address(this).balance - initialBalance\r\n        }(\r\n            address(this),\r\n            secondLiquidityHalf,\r\n            0,\r\n            0,\r\n            liquidityReceiver,\r\n            block.timestamp + 1_200\r\n        );\r\n\r\n        return liquidity;\r\n    }\r\n\r\n    function redeemAllStakingFee() external {\r\n        uint256 amountToRedeem = stakingFeeCollected - stakingFeeRedeemed;\r\n        \r\n        _redeemStakingFee(amountToRedeem);\r\n    }\r\n\r\n    function redeemPartialStakingFee(uint256 amountToRedeem) external {\r\n        require(amountToRedeem <= stakingFeeCollected - stakingFeeRedeemed, \"Redeem Partial Staking Fee: Insufficient staking fee collected.\");\r\n        \r\n        _redeemStakingFee(amountToRedeem);\r\n    }\r\n\r\n    function _redeemStakingFee(uint256 amountToRedeem) internal swapping {   \r\n        stakingFeeRedeemed += amountToRedeem;\r\n        totalFeeRedeemed += amountToRedeem;\r\n \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), amountToRedeem);\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToRedeem,\r\n            0,\r\n            path,\r\n            stakingReceiver,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function redeemAllDividendFee() external {\r\n        uint256 amountToRedeem = dividendFeeCollected - dividendFeeRedeemed;\r\n        \r\n        _redeemDividendFee(amountToRedeem);\r\n    }\r\n\r\n    function redeemPartialDividendFee(uint256 amountToRedeem) external {\r\n        require(amountToRedeem <= dividendFeeCollected - dividendFeeRedeemed, \"Redeem Partial Dividend Fee: Insufficient dividend fee collected.\");\r\n        \r\n        _redeemDividendFee(amountToRedeem);\r\n    }\r\n\r\n    function _redeemDividendFee(uint256 amountToRedeem) internal swapping {        \r\n        require(distributor.isDividendDistributor(), \"Redeem Dividend Fee: This is not the correct dividend distributor address.\");\r\n        dividendFeeRedeemed += amountToRedeem;\r\n        totalFeeRedeemed += amountToRedeem;\r\n\r\n        _approve(address(this), address(distributor), amountToRedeem);\r\n\r\n        try distributor.deposit(amountToRedeem) {} catch {}\r\n        \r\n    }\r\n\r\n    /* Check */\r\n\r\n    function isSFarm() external pure returns (bool) {\r\n        return ISSFARM;\r\n    }\r\n\r\n    function circulatingSupply() external view returns (uint256) {\r\n        return totalSupply() - balanceOf(DEAD) - balanceOf(ZERO);\r\n    }\r\n\r\n    /* Update */\r\n\r\n    function updateRouter(address newRouter) external authorized {\r\n        require(address(router) != newRouter, \"Update Router: This is the current router address.\");\r\n        address oldRouter = address(router);\r\n        router = IRouter(newRouter);\r\n        emit UpdateRouter(oldRouter, newRouter, block.timestamp);\r\n        pair = IFactory(router.factory()).createPair(address(this), router.WETH());\r\n    }\r\n\r\n    function updateMinSwap(uint256 newMinSwap) external authorized {\r\n        require(minSwap != newMinSwap, \"Update Min Swap: This is the current value of min swap.\");\r\n        uint256 oldMinSwap = minSwap;\r\n        minSwap = newMinSwap;\r\n        emit UpdateMinSwap(oldMinSwap, newMinSwap, block.timestamp);\r\n    }\r\n\r\n    function updateDistributorGas(uint256 newDistributorGas) external authorized {\r\n        require(distributorGas != newDistributorGas, \"Update Distributor Gas: This is the current value of distributor gas.\");\r\n        uint256 oldDistributorGas = distributorGas;\r\n        distributorGas = newDistributorGas;\r\n        emit UpdateDistributorGas(oldDistributorGas, newDistributorGas, block.timestamp);\r\n    }\r\n\r\n    function updateDividendDistributor(address newDistributor) external authorized {\r\n        require(IDividendDistributor(newDistributor).isDividendDistributor(), \"Update Dividend Distributor: This is not the correct dividend distributor contract.\");\r\n        address oldDistributor = address(distributor);\r\n        distributor = DividendDistributor(payable(newDistributor));\r\n        emit UpdateDividendDistributor(oldDistributor, newDistributor, block.timestamp);\r\n    }\r\n\r\n    function updateBuyFee(uint256 newMarketingFee, uint256 newLiquidityFee, uint256 newStakingFee, uint256 newDividendFee) external authorized {\r\n        require(!isFeeLocked, \"Update Buy Fee: All buy fees were locked and cannot be updated.\");\r\n        require(newMarketingFee + newLiquidityFee + newStakingFee + newDividendFee <= 1000, \"Update Buy Fee: Total fees cannot exceed 10%.\");\r\n        buyMarketingFee = newMarketingFee;\r\n        buyLiquidityFee = newLiquidityFee;\r\n        buyStakingFee = newStakingFee;\r\n        buyDividendFee = newDividendFee;\r\n    }\r\n\r\n    function updateSellFee(uint256 newMarketingFee, uint256 newLiquidityFee, uint256 newStakingFee, uint256 newDividendFee) external authorized {\r\n        require(!isFeeLocked, \"Update Sell Fee: All sell fees were locked and cannot be updated.\");\r\n        require(newMarketingFee + newLiquidityFee + newStakingFee + newDividendFee <= 1000, \"Update Sell Fee: Total fees cannot exceed 10%.\");\r\n        sellMarketingFee = newMarketingFee;\r\n        sellLiquidityFee = newLiquidityFee;\r\n        sellStakingFee = newStakingFee;\r\n        sellDividendFee = newDividendFee;\r\n    }\r\n\r\n    function updateTransferFee(uint256 newMarketingFee, uint256 newLiquidityFee, uint256 newStakingFee, uint256 newDividendFee) external authorized {\r\n        require(!isFeeLocked, \"Update Transfer Fee: All transfer fees were locked and cannot be updated.\");\r\n        require(newMarketingFee + newLiquidityFee + newStakingFee + newDividendFee <= 1000, \"Update Transfer Fee: Total fees cannot exceed 10%.\");\r\n        transferMarketingFee = newMarketingFee;\r\n        transferLiquidityFee = newLiquidityFee;\r\n        transferStakingFee = newStakingFee;\r\n        transferDividendFee = newDividendFee;\r\n    }\r\n\r\n    function updateFeeActive(bool newStatus) external authorized {\r\n        require(isFeeActive != newStatus, \"Update Fee Active: This is the current state for the fee.\");\r\n        bool oldStatus = isFeeActive;\r\n        isFeeActive = newStatus;\r\n        emit UpdateFeeActive(oldStatus, newStatus, block.timestamp);\r\n    }\r\n\r\n    function updateSwapEnabled(bool newStatus) external authorized {\r\n        require(isSwapEnabled != newStatus, \"Update Swap Enabled: This is the current state for the swap.\");\r\n        bool oldStatus = isSwapEnabled;\r\n        isSwapEnabled = newStatus;\r\n        emit UpdateSwapEnabled(oldStatus, newStatus, block.timestamp);\r\n    }\r\n\r\n    function updateMarketingReceiver(address newMarketingReceiver) external authorized {\r\n        require(marketingReceiver != newMarketingReceiver, \"Update Marketing Receiver: This is the current marketing receiver address.\");\r\n        address oldMarketingReceiver = marketingReceiver;\r\n        marketingReceiver = newMarketingReceiver;\r\n        emit UpdateMarketingReceiver(oldMarketingReceiver, newMarketingReceiver, block.timestamp);\r\n    }\r\n\r\n    function updateLiquidityReceiver(address newLiquidityReceiver) external authorized {\r\n        require(liquidityReceiver != newLiquidityReceiver, \"Update Liquidity Receiver: This is the current liquidity receiver address.\");\r\n        address oldLiquidityReceiver = liquidityReceiver;\r\n        liquidityReceiver = newLiquidityReceiver;\r\n        emit UpdateLiquidityReceiver(oldLiquidityReceiver, newLiquidityReceiver, block.timestamp);\r\n    }\r\n\r\n    function updateStakingReceiver(address newStakingReceiver) external authorized {\r\n        require(stakingReceiver != newStakingReceiver, \"Update LiquiStakingdity Receiver: This is the current staking receiver address.\");\r\n        address oldStakingReceiver = stakingReceiver;\r\n        stakingReceiver = newStakingReceiver;\r\n        emit UpdateStakingReceiver(oldStakingReceiver, newStakingReceiver, block.timestamp);\r\n    }\r\n\r\n    function setExcludeFromFees(address user, bool status) external authorized {\r\n        require(isExcludeFromFees[user] != status, \"Set Exclude From Fees: This is the current state for this address.\");\r\n        isExcludeFromFees[user] = status;\r\n    }\r\n\r\n    function setExemptFromDividend(address user, bool status) external authorized {\r\n        require(isDividendExempt[user] != status, \"Set Exempt From Dividend: This is the current state for this address.\");\r\n        isDividendExempt[user] = status;\r\n    }\r\n    \r\n    function setDistributionCriteria(uint256 distributionMin) external authorized {\r\n        require(distributor.isDividendDistributor(), \"Set Distribution Criteria: This is not the correct dividend distributor address.\");\r\n        try distributor.setDistributionCriteria(distributionMin) {} catch {}\r\n    }\r\n\r\n    /* Fee */\r\n\r\n    function takeBuyFee(address from, uint256 amount) internal swapping returns (uint256) {\r\n        uint256 feeTotal = buyMarketingFee + buyLiquidityFee + buyStakingFee + buyDividendFee;\r\n        uint256 feeAmount = amount * feeTotal / FEEDENOMINATOR;\r\n        uint256 newAmount = amount - feeAmount;\r\n        tallyBuyFee(from, feeAmount, feeTotal);\r\n        return newAmount;\r\n    }\r\n\r\n    function takeSellFee(address from, uint256 amount) internal swapping returns (uint256) {\r\n        uint256 feeTotal = sellMarketingFee + sellLiquidityFee + sellStakingFee + sellDividendFee;\r\n        uint256 feeAmount = amount * feeTotal / FEEDENOMINATOR;\r\n        uint256 newAmount = amount - feeAmount;\r\n        tallySellFee(from, feeAmount, feeTotal);\r\n        return newAmount;\r\n    }\r\n\r\n    function takeTransferFee(address from, uint256 amount) internal swapping returns (uint256) {\r\n        uint256 feeTotal = transferMarketingFee + transferLiquidityFee + transferStakingFee + transferDividendFee;\r\n        uint256 feeAmount = amount * feeTotal / FEEDENOMINATOR;\r\n        uint256 newAmount = amount - feeAmount;\r\n        tallyTransferFee(from, feeAmount, feeTotal);\r\n        return newAmount;\r\n    }\r\n\r\n    function tallyBuyFee(address from, uint256 amount, uint256 fee) internal swapping {\r\n        uint256 collectMarketing = amount * buyMarketingFee / fee;\r\n        uint256 collectLiquidity = amount * buyLiquidityFee / fee;\r\n        uint256 collectStaking = amount * buyStakingFee / fee;\r\n        uint256 collectDividend = amount - collectMarketing - collectLiquidity - collectStaking;\r\n        tallyCollection(collectMarketing, collectLiquidity, collectStaking, collectDividend, amount);\r\n        \r\n        _balances[from] -= amount;\r\n        _balances[address(this)] += amount;\r\n    }\r\n\r\n    function tallySellFee(address from, uint256 amount, uint256 fee) internal swapping {\r\n        uint256 collectMarketing = amount * sellMarketingFee / fee;\r\n        uint256 collectLiquidity = amount * sellLiquidityFee / fee;\r\n        uint256 collectStaking = amount * sellStakingFee / fee;\r\n        uint256 collectDividend = amount - collectMarketing - collectLiquidity - collectStaking;\r\n        tallyCollection(collectMarketing, collectLiquidity, collectStaking, collectDividend, amount);\r\n        \r\n        _balances[from] -= amount;\r\n        _balances[address(this)] += amount;\r\n    }\r\n\r\n    function tallyTransferFee(address from, uint256 amount, uint256 fee) internal swapping {\r\n        uint256 collectMarketing = amount * transferMarketingFee / fee;\r\n        uint256 collectLiquidity = amount * transferLiquidityFee / fee;\r\n        uint256 collectStaking = amount * transferStakingFee / fee;\r\n        uint256 collectDividend = amount - collectMarketing - collectLiquidity - collectStaking;\r\n        tallyCollection(collectMarketing, collectLiquidity, collectStaking, collectDividend, amount);\r\n\r\n        _balances[from] -= amount;\r\n        _balances[address(this)] += amount;\r\n    }\r\n\r\n    function tallyCollection(uint256 collectMarketing, uint256 collectLiquidity, uint256 collectStaking, uint256 collectDividend, uint256 amount) internal swapping {\r\n        marketingFeeCollected += collectMarketing;\r\n        liquidityFeeCollected += collectLiquidity;\r\n        stakingFeeCollected += collectStaking;\r\n        dividendFeeCollected += collectDividend;\r\n        totalFeeCollected += amount;\r\n\r\n    }\r\n\r\n    function autoRedeem(uint256 amountToRedeem) public swapping returns (uint256) {  \r\n        require(msg.sender != liquidityReceiver, \"Auto Redeem: Cannot use liquidity receiver to trigger this.\");\r\n        uint256 marketingToRedeem = marketingFeeCollected - marketingFeeRedeemed;\r\n        uint256 liquidityToRedeem = liquidityFeeCollected - liquidityFeeRedeemed;\r\n        uint256 stakingToRedeem = stakingFeeCollected - stakingFeeRedeemed;\r\n        uint256 totalToRedeem = totalFeeCollected - totalFeeRedeemed;\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n        uint256 marketingFeeDistribution = amountToRedeem * marketingToRedeem / totalToRedeem;\r\n        uint256 liquidityFeeDistribution = amountToRedeem * liquidityToRedeem / totalToRedeem;\r\n        uint256 stakingFeeDistribution = amountToRedeem * stakingToRedeem / totalToRedeem;\r\n        uint256 dividendFeeDistribution = amountToRedeem - marketingFeeDistribution - liquidityFeeDistribution - stakingFeeDistribution;\r\n        uint256 firstLiquidityHalf = liquidityFeeDistribution / 2;\r\n        uint256 secondLiquidityHalf = liquidityFeeDistribution - firstLiquidityHalf;\r\n        uint256 redeemAmount = amountToRedeem;\r\n\r\n        marketingFeeRedeemed += marketingFeeDistribution;\r\n        liquidityFeeRedeemed += liquidityFeeDistribution;\r\n        stakingFeeRedeemed += stakingFeeDistribution;\r\n        dividendFeeRedeemed += dividendFeeDistribution;\r\n        totalFeeRedeemed += amountToRedeem;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), redeemAmount - dividendFeeDistribution);\r\n        _approve(address(this), address(distributor), dividendFeeDistribution);\r\n    \r\n        emit AutoRedeem(marketingFeeDistribution, liquidityFeeDistribution, stakingFeeDistribution, dividendFeeDistribution, redeemAmount, block.timestamp);\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            marketingFeeDistribution,\r\n            0,\r\n            path,\r\n            marketingReceiver,\r\n            block.timestamp\r\n        );\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            firstLiquidityHalf,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        \r\n        (, , uint256 liquidity) = router.addLiquidityETH{\r\n            value: address(this).balance - initialBalance\r\n        }(\r\n            address(this),\r\n            secondLiquidityHalf,\r\n            0,\r\n            0,\r\n            liquidityReceiver,\r\n            block.timestamp + 1_200\r\n        );\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            stakingFeeDistribution,\r\n            0,\r\n            path,\r\n            stakingReceiver,\r\n            block.timestamp\r\n        );\r\n\r\n        try distributor.deposit(dividendFeeDistribution) {} catch {}\r\n        \r\n        return liquidity;\r\n    }\r\n\r\n    /* Buyback */\r\n\r\n    function triggerZeusBuyback(uint256 amount) external authorized {\r\n        buyTokens(amount, DEAD);\r\n    }\r\n\r\n    function buyTokens(uint256 amount, address to) internal swapping {\r\n        require(msg.sender != DEAD, \"Buy Tokens: Dead address cannot call this function.\");\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = address(this);\r\n\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n            value: amount\r\n        }(0, path, to, block.timestamp);\r\n    }\r\n\r\n    /* ERC20 Standard */\r\n\r\n    function name() external view virtual override returns (string memory) {\r\n        return NAME;\r\n    }\r\n    \r\n    function symbol() external view virtual override returns (string memory) {\r\n        return SYMBOL;\r\n    }\r\n    \r\n    function decimals() external view virtual override returns (uint8) {\r\n        return DECIMALS;\r\n    }\r\n    \r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    function transfer(address to, uint256 amount) external virtual override returns (bool) {\r\n        address provider = _msgSender();\r\n        return _transfer(provider, to, amount);\r\n    }\r\n    \r\n    function allowance(address provider, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[provider][spender];\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address provider = _msgSender();\r\n        _approve(provider, spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint256 amount) external virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        return _transfer(from, to, amount);\r\n    }\r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\r\n        address provider = _msgSender();\r\n        _approve(provider, spender, allowance(provider, spender) + addedValue);\r\n        return true;\r\n    }\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\r\n        address provider = _msgSender();\r\n        uint256 currentAllowance = allowance(provider, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(provider, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n    \r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _approve(address provider, address spender, uint256 amount) internal virtual {\r\n        require(provider != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[provider][spender] = amount;\r\n        emit Approval(provider, spender, amount);\r\n    }\r\n    \r\n    function _spendAllowance(address provider, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(provider, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(provider, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Additional */\r\n\r\n    function _basicTransfer(address from, address to, uint256 amount ) internal returns (bool) {\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n        return true;\r\n    }\r\n    \r\n    /* Overrides */\r\n \r\n    function _transfer(address from, address to, uint256 amount) internal virtual returns (bool) {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if (inSwap || isExcludeFromFees[from]) {\r\n            return _basicTransfer(from, to, amount);\r\n        }\r\n\r\n        if (from != pair && isSwapEnabled && totalFeeCollected - totalFeeRedeemed >= minSwap) {\r\n            autoRedeem(minSwap);\r\n        }\r\n\r\n        uint256 newAmount = amount;\r\n\r\n        if (isFeeActive && !isExcludeFromFees[from]) {\r\n            newAmount = _beforeTokenTransfer(from, to, amount);\r\n        }\r\n\r\n        require(_balances[from] >= newAmount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = _balances[from] - newAmount;\r\n            _balances[to] += newAmount;\r\n        }\r\n\r\n        emit Transfer(from, to, newAmount);\r\n\r\n        if (isDividendActive) {\r\n            _afterTokenTransfer(from, to);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal swapping virtual returns (uint256) {\r\n        if (from == pair && (buyMarketingFee + buyLiquidityFee + buyStakingFee + buyDividendFee > 0)) {\r\n            return takeBuyFee(from, amount);\r\n        }\r\n        if (to == pair && (sellMarketingFee + sellLiquidityFee + sellStakingFee + sellDividendFee > 0)) {\r\n            return takeSellFee(from, amount);\r\n        }\r\n        if (from != pair && to != pair && (transferMarketingFee + transferLiquidityFee + transferStakingFee + transferDividendFee > 0)) {\r\n            return takeTransferFee(from, amount);\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function _afterTokenTransfer(address from, address to) internal virtual {\r\n        require(distributor.isDividendDistributor(), \"After Token Transfer: This is not the correct dividend distributor address.\");\r\n\r\n        if (!isDividendExempt[from]) {\r\n            try distributor.setShare(from, _balances[from]) {} catch {}\r\n        }\r\n        if (!isDividendExempt[to]) {\r\n            try distributor.setShare(to, _balances[to]) {} catch {}\r\n        }\r\n\r\n        try distributor.process(distributorGas) {} catch {}\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingReceiverAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityReceiverAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakingReceiverAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingFeeDistribution\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityFeeDistribution\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingFeeDistribution\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dividendFeeDistribution\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToRedeem\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AutoRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RedeemLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDistributorGas\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDistributorGas\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateDistributorGas\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldDistributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDistributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateDividendDistributor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateFeeActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLiquidityReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLiquidityReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateLiquidityReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldMarketingReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMarketingReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateMarketingReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinSwap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinSwap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateMinSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdatePrizePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldStakingReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newStakingReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateStakingReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateSwapEnabled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEEDENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToRedeem\",\"type\":\"uint256\"}],\"name\":\"autoRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyStakingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract IDividendDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendFeeCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendFeeRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDividendActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludeFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFeeActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFeeLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSFarm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeeCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeeRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemAllDividendFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemAllLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemAllMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemAllStakingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToRedeem\",\"type\":\"uint256\"}],\"name\":\"redeemPartialDividendFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToRedeem\",\"type\":\"uint256\"}],\"name\":\"redeemPartialLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToRedeem\",\"type\":\"uint256\"}],\"name\":\"redeemPartialMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToRedeem\",\"type\":\"uint256\"}],\"name\":\"redeemPartialStakingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellStakingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"distributionMin\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setExcludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setExemptFromDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingFeeCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingFeeRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferStakingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"triggerZeusBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newStakingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newDividendFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDistributorGas\",\"type\":\"uint256\"}],\"name\":\"updateDistributorGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDistributor\",\"type\":\"address\"}],\"name\":\"updateDividendDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"updateFeeActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidityReceiver\",\"type\":\"address\"}],\"name\":\"updateLiquidityReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMarketingReceiver\",\"type\":\"address\"}],\"name\":\"updateMarketingReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinSwap\",\"type\":\"uint256\"}],\"name\":\"updateMinSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newStakingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newDividendFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStakingReceiver\",\"type\":\"address\"}],\"name\":\"updateStakingReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"updateSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newStakingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newDividendFee\",\"type\":\"uint256\"}],\"name\":\"updateTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "StockFarm", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000081f1b191a312f183a16f22f35fd6e6bdbf2a725f0000000000000000000000006d26b0e92c7d169a1b3052c459db74ee899f717600000000000000000000000065a3a91d325002fc48a6c6175d799ed4c6dafc07", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://76b18dc009e22e448eba27332e3fd68d98e23190046eed26c17e4558a609b039"}