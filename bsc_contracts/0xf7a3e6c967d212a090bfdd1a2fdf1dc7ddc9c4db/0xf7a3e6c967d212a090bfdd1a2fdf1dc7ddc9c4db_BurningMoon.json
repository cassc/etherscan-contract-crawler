{"SourceCode": "/*\r\n Burning Moon\r\n\r\n\r\n\r\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\nBurningMoon differentiates between Buys/Sells/Transfers\r\nto apply different taxes/Limits to the transfer.\r\nThis can be abused to disable sells to create a Honeypot.\r\n\r\nBurning Moon also locks you from selling/transfering for 2 hours after each Transfer.\r\n\r\nRugscreens will rightfully warn you about that.\r\n\r\nAlso, BurningMoon includes a Liquidity lock function that can release the liquidity once the Lock\r\ntime is over.\r\n\r\nPlease DYOR\r\nThe Contract starts at Line 880.\r\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\nBurningMoon is a Hyper Deflationary Token.\r\nThere is an initial supply of 100.000.000 Token,\r\nthe goal is to reduce the supply to less than 21.000.000 Token(Bitcoin max. Supply)\r\n\r\nBurningMoon implements a variable tax capped to 20%.\r\nTo burn a maximum amount of tokens, the start tax will be 36% for buys/transfers until the first change.\r\n\r\nEach transaction 3 things Happen:\r\n\r\nBurn: \r\nBurning Moon Burns clean and without residue.\r\nTokens will not just land in a burn-wallet (or worse, Vitaliks Wallet),\r\nthey will be completely removed from existance.\r\n\r\nAuto Liquidity: \r\nA Massive Burn requires enough liquidity to control the Burn.\r\nThat way everyone can sell their BurningMoon without worrying about price impact.\r\n\r\nMarketing Tax: \r\n\r\nMarketing:\r\n    The Marketing Tax flows to a Multisig wallet converted to BNB.\r\n    We want large parts of the Marketing tax to flow back to the holders.\r\n    A small percentage will be used to pay the team. \r\n    That way we avoid to have team tokens.\r\n    We also aim to donate a portion of the marketing funds.\r\n\r\n\r\nWhale Protection:\r\n    Any Buy/Transfer where the recipient would recieve more than 1% of the supply will be declined.\r\n\r\nDump Protection:\r\n    Any Sell over 0.05% of the total supply gets declined. \r\n    Sellers get locked from selling/transfering for 2 hours after selling.\r\n\r\n*/\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IBEP20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function decimals() external view returns (uint8);\r\n  function symbol() external view returns (string memory);\r\n  function name() external view returns (string memory);\r\n  function getOwner() external view returns (address);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ninterface IPancakeERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//Burning Moon Contract ////////////////////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////\r\ncontract BurningMoon is IBEP20, Ownable\r\n{\r\n    using Address for address;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    \r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => uint256) private _sellLock;\r\n\r\n    EnumerableSet.AddressSet private _excluded;\r\n    EnumerableSet.AddressSet private _whiteList;\r\n    EnumerableSet.AddressSet private _excludedFromSellLock;\r\n\r\n    //Token Info\r\n    string private constant _name = 'BuB3';\r\n    string private constant _symbol = 'BuB3';\r\n    uint8 private constant _decimals = 9;\r\n    uint256 public constant InitialSupply= 100 * 10**6 * 10**_decimals;//equals 100.000.000 token\r\n\r\n    //Divider for the MaxBalance based on circulating Supply (1%)\r\n    uint8 public constant BalanceLimitDivider=100;\r\n    //Divider for the Whitelist MaxBalance based on initial Supply(0.2%)\r\n    uint16 public constant WhiteListBalanceLimitDivider=500;\r\n    //Divider for sellLimit based on circulating Supply (0.05%)\r\n    uint16 public constant SellLimitDivider=2000;\r\n    //Sellers get locked for MaxSellLockTime so they can't dump repeatedly\r\n    uint16 public constant MaxSellLockTime= 2 hours;\r\n    //TODO: Change to 7 days\r\n    //The time Liquidity gets locked at start and prolonged once it gets released\r\n    uint256 private constant DefaultLiquidityLockTime=1 hours;\r\n    //The Team Wallet is a Multisig wallet that reqires 3 signatures for each action\r\n    address public constant TeamWallet=0x921Ff3A7A6A3cbdF3332781FcE03d2f4991c7868;\r\n\r\n    address private constant PancakeRouter=0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n    //variables that track balanceLimit and sellLimit,\r\n    //can be updated based on circulating supply +-20%\r\n    uint256 private _circulatingSupply =InitialSupply;\r\n    uint256 private  _balanceLimit = _circulatingSupply;\r\n    uint256 private  _sellLimit = _circulatingSupply;\r\n\r\n    //Limits max tax, only gets applied for tax changes, doesn't affect inital Tax\r\n    uint8 public constant MaxTax=20;\r\n    //Tracks the current Taxes, different Taxes can be applied for buy/sell/transfer\r\n\r\n    uint8 private _buyTax;\r\n    uint8 private _sellTax;\r\n    uint8 private _transferTax;\r\n\r\n    uint8 private _burnTax;\r\n    uint8 private _liquidityTax;\r\n    uint8 private _marketingTax;\r\n\r\n       \r\n    address immutable private _pancakePairAddress; \r\n    IPancakeRouter02 private  _pancakeRouter;\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    //Constructor///////////////////////////////////////////////////////////////////////////////////////////\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    constructor () {\r\n        //contract creator 90% of the token to create LP-Pair\r\n        uint256 deployerBalance=_circulatingSupply*9/10;\r\n        _balances[msg.sender] = deployerBalance;\r\n        emit Transfer(address(0), msg.sender, deployerBalance);\r\n        //contract gets 10% of the token to generate LP token fast\r\n        uint256 injectBalance=_circulatingSupply-deployerBalance;\r\n        _balances[address(this)]=injectBalance;\r\n       emit Transfer(address(0), address(this),injectBalance);\r\n\r\n        // Pancake Router\r\n        _pancakeRouter = IPancakeRouter02(PancakeRouter);\r\n        //Creates a Pancake Pair\r\n        _pancakePairAddress = IPancakeFactory(_pancakeRouter.factory()).createPair(address(this), _pancakeRouter.WETH());\r\n\r\n        //Sets Buy/Sell limits\r\n        _balanceLimit=InitialSupply/BalanceLimitDivider;\r\n        _sellLimit=InitialSupply/SellLimitDivider;\r\n\r\n        //Sets the marketing wallet to the teamWallet by default\r\n        _marketingWallet=TeamWallet;\r\n       //Sets sellLockTime to be max by default\r\n        _sellLockTime=MaxSellLockTime;\r\n\r\n        //Set Starting Tax to very high percentage(36%) to achieve maximum burn in the beginning\r\n        //as in the beginning there is the highest token volume\r\n        //any change in tax rate needs to be below maxTax(20%)\r\n        _buyTax=36;\r\n        _sellTax=20;//Sell Tax is lower, as otherwise slippage could be too high to sell\r\n        _transferTax=36;\r\n        //97% gets burned\r\n        _burnTax=97;\r\n        //a small percentage gets added to the Contract token as 10% of token are already injected to \r\n        //be converted to LP and MarketingBNB\r\n        _liquidityTax=2;\r\n        _marketingTax=1;\r\n    }\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    //Transfer functionality////////////////////////////////////////////////////////////////////////////////\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    function _transfer(address sender, address recipient, uint256 amount) private{\r\n        require(sender != address(0), \"Transfer from zero\");\r\n        require(recipient != address(0), \"Transfer to zero\");\r\n        \r\n        //Manually Excluded adresses are transfering tax and lock free\r\n        bool isExcluded = (_excluded.contains(sender) || _excluded.contains(recipient));\r\n        \r\n        //Transactions from and to the contract are always tax and lock free\r\n        bool isContractTransfer=(sender==address(this) || recipient==address(this));\r\n        \r\n        //transfers between PancakeRouter and PancakePair are tax and lock free\r\n        address pancakeRouter=address(_pancakeRouter);\r\n        bool isLiquidityTransfer = ((sender == _pancakePairAddress && recipient == pancakeRouter) \r\n        || (recipient == _pancakePairAddress && sender == pancakeRouter));\r\n        \r\n        //Team transfers tax and lock free\r\n        bool isTeamTransfer=(_isTeam(sender) || _isTeam(recipient));\r\n\r\n        //differentiate between buy/sell/transfer to apply different taxes/restrictions\r\n        bool isBuy=sender==_pancakePairAddress|| sender == pancakeRouter;\r\n        bool isSell=recipient==_pancakePairAddress|| recipient == pancakeRouter;\r\n\r\n        //Pick transfer\r\n        if(isContractTransfer || isLiquidityTransfer\r\n        || isExcluded || isTeamTransfer){\r\n            _feelessTransfer(sender, recipient, amount);\r\n        }\r\n        else{ \r\n            //once trading is enabled, it can't be turned off again\r\n            require(_tradingEnabled,\"trading not yet enabled\");\r\n            if(_whiteListTrading){\r\n                _whiteListTransfer(sender,recipient,amount,isBuy,isSell);\r\n            }\r\n            else{\r\n                _taxedTransfer(sender,recipient,amount,isBuy,isSell);                  \r\n            }\r\n        }\r\n    }\r\n    function _whiteListTransfer(address sender, address recipient,uint256 amount,bool isBuy,bool isSell) private{\r\n        //only apply whitelist restrictions during buys and transfers\r\n            if(!isSell)\r\n            {\r\n            //the recipient needs to be on Whitelist. Works for both buys and transfers.\r\n            //transfers to other whitelisted addresses are allowed.\r\n            require(_whiteList.contains(recipient),\"recipient not on whitelist\");\r\n            //Limit is 1/500 of initialSupply during whitelist\r\n            require((_balances[recipient]+amount<=InitialSupply/WhiteListBalanceLimitDivider),\"Amount exceeds whitelist max\");    \r\n            }\r\n            _taxedTransfer(sender,recipient,amount,isBuy,isSell);\r\n\r\n    }  \r\n    function _taxedTransfer(address sender, address recipient, uint256 amount,bool isBuy,bool isSell) private{\r\n        uint256 recipientBalance = _balances[recipient];\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"Transfer exceeds balance\");\r\n\r\n        uint8 tax;\r\n        if(isSell){\r\n            if(!_excludedFromSellLock.contains(sender)){\r\n                //If seller sold less than _sellLockTime(2h) ago, sell is declined, can be disabled by Team         \r\n                require(_sellLock[sender]<=block.timestamp||_sellLockDisabled,\"Seller in sellLock\");\r\n                //Sets the time sellers get locked(2 hours by default)\r\n                _sellLock[sender]=block.timestamp+_sellLockTime;\r\n            }\r\n            //Sells can't exceed the sell limit(50.000 Tokens at start, can be updated to circulating supply)\r\n            require(amount<=_sellLimit,\"Dump protection\");\r\n\r\n\r\n            tax=_sellTax;\r\n        } else if(isBuy){\r\n            //Checks If the recipient balance(excluding Taxes) would exceed Balance Limit\r\n            require(recipientBalance+amount<=_balanceLimit,\"whale protection\");\r\n            tax=_buyTax;\r\n        } else {//Transfer\r\n            //Checks If the recipient balance(excluding Taxes) would exceed Balance Limit\r\n            require(recipientBalance+amount<=_balanceLimit,\"whale protection\");\r\n            //Transfers are disabled in sell lock, this doesn't stop someone from transfering before\r\n            //selling, but there is no satisfying solution for that, and you would need to pax additional tax\r\n            if(!_excludedFromSellLock.contains(sender)){\r\n                require(_sellLock[sender]<=block.timestamp||_sellLockDisabled,\"Sender in Lock\");\r\n            }\r\n            tax=_transferTax;\r\n        }     \r\n        //Swapping AutoLP and MarketingBNB is only possible if sender is not pancake pair, \r\n        //if its not manually disabled, if its not already swapping and if its a Sell to avoid\r\n        // people from causing a large price impact from repeatedly transfering when theres a large backlog of Tokens\r\n        if((sender!=_pancakePairAddress)&&(!_manualConversion)&&(!_isSwappingContractModifier)&&isSell){\r\n            _swapContractToken();\r\n        }\r\n        //autoReleases Marketing bnb, once hold exceeds treshold, if autoRelease is enabled and if it's a buy\r\n        //to avoid creating a honeypot if marketing wallet is faulty\r\n        if(_autoRelease && isBuy){\r\n            _autoReleaseMarketingBNB();\r\n        }\r\n\r\n        //Calculates the exact token amount for each tax\r\n        uint256 tokensToBeBurnt=_calculateFee(amount, tax, _burnTax);\r\n        uint256 contractToken=_calculateFee(amount, tax, _marketingTax+_liquidityTax);\r\n        \r\n\r\n        //Subtract the Taxed Tokens from the amount\r\n        uint256 taxedAmount=amount-(tokensToBeBurnt + contractToken);\r\n\r\n        //Adds the taxed tokens to the contract wallet\r\n        _balances[address(this)] += contractToken;\r\n        \r\n        //Transfers the tokens\r\n        _balances[sender]-=amount;\r\n        _balances[recipient]+=taxedAmount;\r\n\r\n        //Burns tokens\r\n        _circulatingSupply-=tokensToBeBurnt;\r\n\r\n        emit Transfer(sender,recipient,taxedAmount);\r\n    }\r\n    function _feelessTransfer(address sender, address recipient, uint256 amount) private{\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"Transfer exceeds balance\");\r\n        _balances[sender]=senderBalance-amount;\r\n        _balances[recipient]+=amount;\r\n\r\n        emit Transfer(sender,recipient,amount);\r\n    }\r\n\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    //Functions to handle MarketingBNB//////////////////////////////////////////////////////////////////////\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    address private _marketingWallet;\r\n    bool private _manualConversion;\r\n    uint256 _releaseTreshold=10*10*18;//10 BNB\r\n    bool private _autoRelease;\r\n\r\n    //The MarketingWallet recieves the BNB, by default the Team Wallet, can be changed to enable for things like staking\r\n    function TeamSetMarketingWallet(address marketingWallet) public onlyTeam{\r\n        _marketingWallet=marketingWallet;    \r\n    }\r\n\r\n    //switches autoLiquidity and marketing BNB generation during transfers\r\n    function TeamSwitchManualBNBConversion(bool manualConversion) public onlyTeam{\r\n        _manualConversion=manualConversion;\r\n    }\r\n\r\n    //switches auto Release of Marketing BNB. Useful for transfering bnb to a donation address/staking contract\r\n    //only gets released during buys, witch makes creating a honeypot by using a faulty marketing wallet impossible \r\n    function TeamSwitchAutoBNBRelease(bool autoRelease) public onlyTeam{\r\n        _autoRelease=autoRelease;\r\n    }\r\n    //Changes the treshold when Merketing BNB should be auto-released\r\n    function TeamChangeReleaseTreshold(uint256 releaseTreshold) public onlyTeam{\r\n        _releaseTreshold=releaseTreshold;\r\n    }\r\n\r\n    //Sends Marketing BNB to the Marketing Wallet\r\n    function TeamReleaseBNB() public onlyTeam{\r\n        _releaseMarketingBNB(address(this).balance);\r\n    }\r\n\r\n    //Automatically release Marketing BNB once hold exceeds treshold\r\n    function _autoReleaseMarketingBNB() private{\r\n        uint256 BNBBalance = address(this).balance;\r\n        //if BNB balance is more than 10 bnb release\r\n        if(BNBBalance>=_releaseTreshold){\r\n            _releaseMarketingBNB(BNBBalance);\r\n        }\r\n    }\r\n\r\n    function _releaseMarketingBNB(uint256 amount) private {\r\n        if(amount==0){return;}\r\n        (bool sent,) =_marketingWallet.call{value: (amount)}(\"\");\r\n        //if release fails, turn off autoRelease\r\n        if(!sent){\r\n            _autoRelease=false;\r\n        }\r\n    }\r\n    \r\n    \r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    //Helper functions//////////////////////////////////////////////////////////////////////////////////////\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    //tracks auto generated BNB, useful for ticker etc\r\n    uint256 private _totalLPBNB;\r\n    //Locks the swap if already swapping\r\n    bool private _isSwappingContractModifier;\r\n    modifier lockTheSwap {\r\n        _isSwappingContractModifier = true;\r\n        _;\r\n        _isSwappingContractModifier = false;\r\n    }\r\n    //modifier for functions only the team can call\r\n    modifier onlyTeam() {\r\n        require(_isTeam(msg.sender), \"Caller not in Team\");\r\n        _;\r\n    }\r\n    //Checks if address is in Team, is needed to give Team access even if contract is renounced\r\n    //Team doesn't have access to critical Functions that could turn this into a Rugpull(Exept liquidity unlocks)\r\n    function _isTeam(address addr) private view returns (bool){\r\n        return addr==owner()||addr==TeamWallet;\r\n    }\r\n\r\n    //swaps the token on the contract for Marketing BNB and LP Token.\r\n    //always swaps the _sellLimit of token to avoid a large price impact\r\n    function _swapContractToken() private lockTheSwap{\r\n        uint256 contractBalance=_balances[address(this)];\r\n        uint16 totalTax=_liquidityTax+_marketingTax;\r\n        uint256 tokenToSwap=_sellLimit;\r\n        //only swap if contractBalance is larger than tokenToSwap, and totalTax is unequal to 0\r\n        if(contractBalance<tokenToSwap||totalTax==0){\r\n            return;\r\n        }\r\n        //splits the token in TokenForLiquidity and token for Marketing\r\n        uint256 tokenForLiquidity=(tokenToSwap*_liquidityTax)/totalTax;\r\n        uint256 tokenForMarketing= tokenToSwap-tokenForLiquidity;\r\n\r\n        //splits tokenForLiquidity in 2 halves\r\n        uint256 liqToken=tokenForLiquidity/2;\r\n        uint256 liqBNBToken=tokenForLiquidity-liqToken;\r\n\r\n        //swaps marktetingToken and the liquidity token half for BNB\r\n        uint256 swapToken=liqBNBToken+tokenForMarketing;\r\n        uint256 initialBNBBalance = address(this).balance;\r\n        _swapTokenForBNB(swapToken);\r\n\r\n        //calculates the amount of BNB belonging to the LP-Pair and converts them to LP\r\n        uint256 liqBNB = ((address(this).balance - initialBNBBalance)*liqBNBToken)/swapToken;\r\n        _addLiquidity(liqToken, liqBNB);\r\n    }\r\n\r\n\r\n\r\n\r\n    //swaps tokens on the contract for BNB\r\n    function _swapTokenForBNB(uint256 amount) private {\r\n        _approve(address(this), address(_pancakeRouter), amount);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _pancakeRouter.WETH();\r\n\r\n        _pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    //Adds Liquidity directly to the contract where LP are locked(unlike safemoon forks, that transfer it to the owner)\r\n    function _addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\r\n        _totalLPBNB+=bnbAmount;\r\n        _approve(address(this), address(_pancakeRouter), tokenAmount);\r\n        _pancakeRouter.addLiquidityETH{value: bnbAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    //Calculates the tokens that should be taxed\r\n    function _calculateFee(uint256 amount, uint8 tax, uint8 taxPercent) private pure returns (uint256) {\r\n        return (amount*tax*taxPercent) / 10000;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    //public functions /////////////////////////////////////////////////////////////////////////////////////\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////////// \r\n    function getLiquidityReleaseTimeInSeconds() public view returns (uint256){\r\n        if(block.timestamp<_liquidityUnlockTime){\r\n            return _liquidityUnlockTime-block.timestamp;\r\n        }\r\n        return 0;\r\n    }\r\n    function getLiquidityReleaseLimitedTo20Percent() public view returns(bool){\r\n        return _liquidityRelease20Percent;\r\n    }\r\n    function getBurnedTokens() public view returns(uint256){\r\n        return (InitialSupply-_circulatingSupply)/10**_decimals;\r\n    }\r\n\r\n    function getLimits() public view returns(uint256 balanceLimit, uint256 sellLimit){\r\n        return(_balanceLimit/10**_decimals, _sellLimit/10**_decimals);\r\n    }\r\n\r\n    function getTaxes() public view returns(uint256 burnTax,uint256 liquidityTax,uint256 marketingTax, uint256 buyTax, uint256 sellTax, uint256 transferTax){\r\n        return (_burnTax,_liquidityTax,_marketingTax,_buyTax,_sellTax,_transferTax);\r\n    }\r\n\r\n    function getAutoLPBNBGenerated() public view returns (uint256){\r\n        return _totalLPBNB;\r\n    }  \r\n\r\n    function getWhitelistedStatus(address AddressToCheck) public view returns(bool){\r\n        return _whiteList.contains(AddressToCheck);\r\n    }\r\n\r\n    function getAddressSellLockTimeInSeconds(address AddressToCheck) public view returns (uint256){\r\n       uint256 lockTime=_sellLock[AddressToCheck];\r\n       if(lockTime<=block.timestamp)\r\n       {\r\n           return 0;\r\n       }\r\n       return lockTime-block.timestamp;\r\n    }\r\n    function getSellLockTimeInSeconds() public view returns(uint256){\r\n        return _sellLockTime;\r\n    }\r\n    function getSellLockEnabledStatus() public view returns(bool){\r\n        return !_sellLockDisabled;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    //Settings//////////////////////////////////////////////////////////////////////////////////////////////\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    bool private _sellLockDisabled;\r\n    uint256 _sellLockTime;\r\n    //Disables the 2 hour lock after selling for everyone\r\n    function TeamDisableSellLock(bool disabled) public onlyTeam{\r\n        _sellLockDisabled=disabled;\r\n    }\r\n    //Sets SellLockTime, needs to be lower than MaxSellLockTime\r\n    function TeamSetSellLockTime(uint8 sellLockMinutes)public onlyTeam{\r\n            uint256 newSellLockTime= sellLockMinutes*60;\r\n            require(newSellLockTime<=MaxSellLockTime,\"Sell Lock time too high\");\r\n            _sellLockTime=newSellLockTime;\r\n    } \r\n    function TeamResetSellLockTimeFor(address addressToReset) public onlyTeam{\r\n        _sellLock[addressToReset]=0;\r\n    }\r\n\r\n    //Sets Taxes, is limited by MaxTax(20%) to make it impossible to create honeypot\r\n    function TeamSetTaxes(uint8 burnTaxes, uint8 liquidityTaxes, uint8 marketingTaxes,uint8 buyTax, uint8 sellTax, uint8 transferTax) public onlyTeam{\r\n        require(marketingTaxes<=liquidityTaxes,\"marketingTax needs to be <=liquidityTax\");\r\n        uint8 totalTax=burnTaxes+liquidityTaxes+marketingTaxes;\r\n        require(totalTax==100, \"burn+liq+marketing needs to equal 100%\");\r\n        require(buyTax<=MaxTax&&sellTax<=MaxTax&&transferTax<=MaxTax,\"taxes higher than max tax\");\r\n        \r\n        _burnTax=burnTaxes;\r\n        _liquidityTax=liquidityTaxes;\r\n        _marketingTax=marketingTaxes;\r\n        \r\n        _buyTax=buyTax;\r\n        _sellTax=sellTax;\r\n        _transferTax=transferTax;\r\n\r\n    }\r\n    \r\n    //manually converts contract token to LP and marketing BNB\r\n    function TeamCreateLPandBNB() public onlyTeam{\r\n    _swapContractToken();\r\n    }\r\n    //Exclude/Include account from fees (eg. CEX)\r\n    function TeamExcludeAccountFromFees(address account) public onlyTeam {\r\n        _excluded.add(account);\r\n    }\r\n    function TeamIncludeAccountToFees(address account) public onlyTeam {\r\n        _excluded.remove(account);\r\n    }\r\n    //Exclude/Include account from fees (eg. CEX)\r\n    function TeamExcludeAccountFromSellLock(address account) public onlyTeam {\r\n        _excludedFromSellLock.add(account);\r\n    }\r\n    function TeamIncludeAccountToSellLock(address account) public onlyTeam {\r\n        _excludedFromSellLock.remove(account);\r\n    }\r\n    \r\n    \r\n     //Limits need to be at least 80% of target, to avoid setting value to 0(avoid potential Honeypot)\r\n    function TeamUpdateLimits(uint256 newBalanceLimit, uint256 newSellLimit) public onlyTeam{\r\n        //Adds decimals to limits\r\n        newBalanceLimit=newBalanceLimit*10**_decimals;\r\n        newSellLimit=newSellLimit*10**_decimals;\r\n        //Calculates the target Limits based on supply\r\n        uint256 targetBalanceLimit=_circulatingSupply/BalanceLimitDivider;\r\n        uint256 targetSellLimit=_circulatingSupply/SellLimitDivider;\r\n\r\n        require((newBalanceLimit>targetBalanceLimit*8/10), \r\n        \"newBalanceLimit needs at least 80% of target\");\r\n        require((newSellLimit>targetSellLimit*8/10), \r\n        \"newSellLimit needs at least 80% of target\");\r\n\r\n        _balanceLimit = newBalanceLimit;\r\n        _sellLimit = newSellLimit;     \r\n    }\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    //Setup Functions///////////////////////////////////////////////////////////////////////////////////////\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    bool private _tradingEnabled;\r\n    bool private _whiteListTrading;\r\n    address private _liquidityTokenAddress;\r\n\r\n    function SetupEnableWhitelistTrading() public onlyTeam{\r\n        require(!_tradingEnabled);\r\n        _tradingEnabled=true;\r\n        _whiteListTrading=true;\r\n        //Liquidity gets locked for 7 days at start, needs to be prolonged once\r\n        //start is successful\r\n        _liquidityUnlockTime=block.timestamp+DefaultLiquidityLockTime;\r\n    }\r\n    function SetupEnableTrading() public onlyTeam{\r\n        require(_tradingEnabled&&_whiteListTrading);\r\n        _whiteListTrading=false;\r\n    }\r\n    function SetupLiquidityTokenAddress(address liquidityTokenAddress) public onlyTeam{\r\n        _liquidityTokenAddress=liquidityTokenAddress;\r\n    }\r\n    //Functions for whitelist\r\n    function SetupAddToWhitelist(address addressToAdd) public onlyTeam{\r\n        _whiteList.add(addressToAdd);\r\n    }\r\n    function SetupAddArrayToWhitelist(address[] memory addressesToAdd) public onlyTeam{\r\n        for(uint i=0; i<addressesToAdd.length; i++)\r\n        {\r\n            _whiteList.add(addressesToAdd[i]);\r\n        }\r\n    }\r\n    function SetupRemoveFromWhitelist(address addressToRemove) public onlyTeam{\r\n        _whiteList.remove(addressToRemove);\r\n    } \r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    //Liquidity Lock////////////////////////////////////////////////////////////////////////////////////////\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    //the timestamp when Liquidity unlocks\r\n    uint256 private _liquidityUnlockTime;\r\n\r\n    //Sets Liquidity Release to 20% at a time and prolongs liquidity Lock for a Week after Release. \r\n    //Should be called once start was successful.\r\n    bool private _liquidityRelease20Percent;\r\n    function TeamlimitLiquidityReleaseTo20Percent() public onlyTeam{\r\n        _liquidityRelease20Percent=true;\r\n    }\r\n\r\n    //Functions to prolong Liquidity Lock.\r\n    function TeamUnlockLiquidityInAWeek() public onlyTeam{\r\n        _prolongLiquidityLock(block.timestamp+7 days);\r\n    }\r\n    function TeamUnlockLiquidityInAMonth() public onlyTeam{\r\n        _prolongLiquidityLock(block.timestamp+30 days);\r\n    }\r\n    function TeamUnlockLiquidityIn6Months() public onlyTeam{\r\n        _prolongLiquidityLock(block.timestamp+180 days);\r\n    }\r\n    function TeamUnlockLiquidityInAYear() public onlyTeam{\r\n        _prolongLiquidityLock(block.timestamp+365 days);\r\n    }\r\n    function _prolongLiquidityLock(uint256 newUnlockTime) private{\r\n        // require new unlock time to be longer than old one\r\n        require(newUnlockTime>_liquidityUnlockTime);\r\n        _liquidityUnlockTime=newUnlockTime;\r\n    }\r\n\r\n    //Release Liquidity Tokens once unlock time is over\r\n    function TeamReleaseLiquidity() public onlyTeam {\r\n        //Only callable if liquidity Unlock time is over\r\n        require(block.timestamp >= _liquidityUnlockTime, \"Not yet unlocked\");\r\n        \r\n        IPancakeERC20 liquidityToken = IPancakeERC20(_liquidityTokenAddress);\r\n        uint256 amount = liquidityToken.balanceOf(address(this));\r\n        if(_liquidityRelease20Percent)\r\n        {\r\n        //regular liquidity release, only releases 20% at a time and locks liquidity for another week\r\n        amount=amount*2/10;\r\n        liquidityToken.transfer(TeamWallet, amount);\r\n\r\n        _liquidityUnlockTime=block.timestamp+DefaultLiquidityLockTime;\r\n        }\r\n        else\r\n        {\r\n            //Liquidity release if something goes wrong at start\r\n            //_liquidityRelease20Percent should be called once everything is clear\r\n            liquidityToken.transfer(TeamWallet, amount);\r\n        }\r\n    }\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    //external//////////////////////////////////////////////////////////////////////////////////////////////\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n    // IBEP20\r\n\r\n    function getOwner() external view override returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    function name() external pure override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external pure override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external pure override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _circulatingSupply;\r\n    }\r\n\r\n    function balanceOf(address account) external view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address spender) external view override returns (uint256) {\r\n        return _allowances[_owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"Approve from zero\");\r\n        require(spender != address(0), \"Approve to zero\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][msg.sender];\r\n        require(currentAllowance >= amount, \"Transfer > allowance\");\r\n\r\n        _approve(sender, msg.sender, currentAllowance - amount);\r\n        return true;\r\n    }\r\n\r\n    // IBEP20 - Helpers\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\r\n        uint256 currentAllowance = _allowances[msg.sender][spender];\r\n        require(currentAllowance >= subtractedValue, \"<0 allowance\");\r\n\r\n        _approve(msg.sender, spender, currentAllowance - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"BalanceLimitDivider\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"InitialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaxSellLockTime\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaxTax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SellLimitDivider\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addressesToAdd\",\"type\":\"address[]\"}],\"name\":\"SetupAddArrayToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToAdd\",\"type\":\"address\"}],\"name\":\"SetupAddToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SetupEnableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SetupEnableWhitelistTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTokenAddress\",\"type\":\"address\"}],\"name\":\"SetupLiquidityTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToRemove\",\"type\":\"address\"}],\"name\":\"SetupRemoveFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"releaseTreshold\",\"type\":\"uint256\"}],\"name\":\"TeamChangeReleaseTreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TeamCreateLPandBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"disabled\",\"type\":\"bool\"}],\"name\":\"TeamDisableSellLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"TeamExcludeAccountFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"TeamExcludeAccountFromSellLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"TeamIncludeAccountToFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"TeamIncludeAccountToSellLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TeamReleaseBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TeamReleaseLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToReset\",\"type\":\"address\"}],\"name\":\"TeamResetSellLockTimeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingWallet\",\"type\":\"address\"}],\"name\":\"TeamSetMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"sellLockMinutes\",\"type\":\"uint8\"}],\"name\":\"TeamSetSellLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"burnTaxes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"liquidityTaxes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"marketingTaxes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"transferTax\",\"type\":\"uint8\"}],\"name\":\"TeamSetTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"autoRelease\",\"type\":\"bool\"}],\"name\":\"TeamSwitchAutoBNBRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"manualConversion\",\"type\":\"bool\"}],\"name\":\"TeamSwitchManualBNBConversion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TeamUnlockLiquidityIn6Months\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TeamUnlockLiquidityInAMonth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TeamUnlockLiquidityInAWeek\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TeamUnlockLiquidityInAYear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBalanceLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellLimit\",\"type\":\"uint256\"}],\"name\":\"TeamUpdateLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TeamWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TeamlimitLiquidityReleaseTo20Percent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WhiteListBalanceLimitDivider\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"AddressToCheck\",\"type\":\"address\"}],\"name\":\"getAddressSellLockTimeInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAutoLPBNBGenerated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balanceLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityReleaseLimitedTo20Percent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityReleaseTimeInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellLockEnabledStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellLockTimeInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burnTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferTax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"AddressToCheck\",\"type\":\"address\"}],\"name\":\"getWhitelistedStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BurningMoon", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://57038953db16aeec48cf4dee08d3e01164c91ab5c3fc29777e3b948eeca7770f"}