{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IRecharge{\r\n    enum Mark{\r\n        Invalid, \r\n        Lottery,\r\n        RewardLP,\r\n        RewardLevel, \r\n        Inivter,\r\n        Mining\r\n    }\r\n    event Recharged(address user, uint256 amount, uint256 index, uint256 time);\r\n    event Extracted(string round,Mark mark,address token, address user, uint256 amount, uint256 time);\r\n    function getPrice() external view returns(uint256);\r\n    function extract(string calldata round,Mark mark,address[] calldata _users,uint256[] calldata _amounts) external;\r\n    function lottery(string calldata round,address[] calldata _users, uint256[] calldata _amounts,uint256 _distributed) external;\r\n    function protect() external;\r\n}\r\n\r\ncontract RechargeStor{\r\n    address public admin;\r\n    address public implementation;\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant NOT_ENTERED = 1;\r\n    uint256 private constant ENTERED = 2;\r\n    uint256 private _status;\r\n    error ReentrancyGuardReentrantCall();\r\n\r\n    constructor() {\r\n        _status = NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        if (_status == ENTERED) {\r\n            revert ReentrancyGuardReentrantCall();\r\n        }\r\n        _status = ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        _status = NOT_ENTERED;\r\n    }\r\n\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == ENTERED;\r\n    }\r\n}\r\n\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\nlibrary SignatureInfo {\r\n    bytes32 constant CONTENT_HASH =\r\n        0xc20cc1b3e93f5c630c954d620081847f5eeda74a441dadb64a658d49ca7dbf38;\r\n\r\n    struct Content {\r\n        address holder;\r\n        uint256 amount;\r\n        uint256 fees;\r\n        uint256 deadline;\r\n        string  round;\r\n        uint8 v; // v: parameter (27 or 28)\r\n        bytes32 r; // r: parameter\r\n        bytes32 s;\r\n    }\r\n\r\n    function getContentHash(Content calldata content)\r\n        internal\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    CONTENT_HASH,\r\n                    content.holder,\r\n                    content.amount,\r\n                    content.fees,\r\n                    content.deadline,\r\n                    keccak256(bytes(content.round))\r\n                )\r\n            );\r\n    }\r\n\r\n}\r\n\r\nlibrary SignatureChecker {\r\n    function recover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address) {\r\n        require(\r\n            uint256(s) <=\r\n                0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\r\n            \"Signature: Invalid s parameter\"\r\n        );\r\n\r\n        require(v == 27 || v == 28, \"Signature: Invalid v parameter\");\r\n        address signer = ecrecover(hash, v, r, s);\r\n        require(signer != address(0), \"Signature: Invalid signer\");\r\n\r\n        return signer;\r\n    }\r\n\r\n    function verify(\r\n        bytes32 hash,\r\n        address signer,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        bytes32 domainSeparator\r\n    ) internal pure returns (bool) {\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\"\\x19\\x01\", domainSeparator, hash)\r\n        );\r\n        return recover(digest, v, r, s) == signer;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function factory() external pure returns (address);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n}\r\n\r\nlibrary UniswapV2Library {\r\n    using SafeMath for uint;\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint160(uint(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex'00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5' // init code hash\r\n            )))));\r\n    }\r\n\r\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\r\n        (address token0,) = sortTokens(tokenA, tokenB);\r\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n    }\r\n\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\r\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint amountInWithFee = amountIn.mul(997);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n}\r\n\r\ncontract RechargeStorV1 is RechargeStor{\r\n    address public token;\r\n    address public usdt;\r\n    address public project;\r\n    address public permit;\r\n    address public uniswapV2Router;\r\n\r\n    uint256 public index;\r\n    uint256 public totalRecharge;\r\n    uint256 public totalProtect;\r\n    bytes32 public DOMAIN_SEPARATOR;\r\n    mapping (address => mapping (uint256 => uint256)) public reentrancy;\r\n    address public constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n}\r\n\r\n\r\ncontract Recharge is RechargeStorV1,ReentrancyGuard,IRecharge{\r\n    \r\n    constructor() {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == admin, \"Recharge:Caller is not owner.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyPermit {\r\n        require(msg.sender == permit, \"Recharge: Caller is not permit address.\");\r\n        _;\r\n    }\r\n\r\n    function initialize(address _token,address _project, address _permit) external onlyOwner{\r\n        token = _token;\r\n        project = _project;\r\n        permit = _permit;\r\n        usdt = 0x55d398326f99059fF775485246999027B3197955;\r\n        uniswapV2Router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n        index = 1;\r\n        _updateDomainSeparator();\r\n    }\r\n\r\n    function setCurrencyAddr(address _token) external onlyOwner{\r\n        token = _token;\r\n    }\r\n\r\n    function setPermit(address _permit) external onlyOwner{\r\n        permit = _permit;\r\n    }\r\n\r\n     function setAdmin(address _admin) external onlyOwner(){\r\n        admin = _admin;\r\n    }\r\n\r\n    function getPrice() external override view returns(uint256){\r\n        address uniswapV2Factory = IUniswapV2Router(uniswapV2Router).factory();\r\n        (uint reserveIn, uint reserveOut) = UniswapV2Library.getReserves(uniswapV2Factory, token, usdt);\r\n        return UniswapV2Library.getAmountOut(1e18, reserveIn, reserveOut);\r\n    }\r\n\r\n\r\n    function recharge(address _user, uint256 _amount) external nonReentrant{\r\n        // TODO Test data\r\n        // require(_amount >= 100e18, \"Recharge:Amount must be greater than 0.\");\r\n        TransferHelper.safeTransferFrom(usdt, msg.sender, address(this), _amount);\r\n        emit Recharged(_user, _amount, index, block.timestamp);\r\n        index++;\r\n    }\r\n    //10% + 2 %\r\n    function extract(string calldata round,Mark mark,address[] calldata _users,uint256[] calldata _amounts) external override nonReentrant onlyPermit(){\r\n        require(mark == Mark.RewardLP || mark == Mark.RewardLevel || mark == Mark.Inivter,\"Invalid marked\");\r\n        require(_users.length == _amounts.length,\"Recharge:Invalid users or amounts.\");\r\n        for(uint i=0; i<_users.length; i++){\r\n            TransferHelper.safeTransfer(usdt, _users[i], _amounts[i]);\r\n            logsExtracted(round, mark, usdt, _users[i], _amounts[i], block.timestamp);\r\n        }\r\n    }\r\n\r\n    function logsExtracted(string calldata round,Mark mark,address token,address receiver,uint256 amount,uint256 time) internal{\r\n        emit Extracted(round, mark, token, receiver, amount, time);\r\n    }\r\n\r\n    function lottery(string calldata round, address[] calldata _users, uint256[] calldata _amounts,uint256 _distributed) external override nonReentrant onlyPermit(){\r\n        //30%\r\n        require(_users.length == _amounts.length,\"Recharge:Invalid users or amounts.\");\r\n        for(uint i=0; i<_users.length; i++){\r\n            TransferHelper.safeTransfer(usdt, _users[i], _amounts[i]);\r\n            logsExtracted(round,Mark.Lottery, usdt, _users[i],_amounts[i],block.timestamp);\r\n        }\r\n        //26%\r\n        uint256 _purchase = _distributed * 26 / 100;\r\n        _swap(_purchase, address(this));\r\n        //22%\r\n        uint256 _totalIncome = _distributed * 22 / 100;\r\n        uint256 _toProject = _totalIncome * 70 / 100;\r\n        totalProtect = _totalIncome + (_totalIncome * 30 / 100);\r\n        TransferHelper.safeTransfer(usdt, project, _toProject);\r\n    }\r\n\r\n    function _swap(uint256 amountIn,address to) internal{\r\n        TransferHelper.safeApprove(usdt, uniswapV2Router, amountIn);\r\n        address[] memory path = new address[](2);\r\n        path[0] = usdt;\r\n        path[1] = token;\r\n        IUniswapV2Router(uniswapV2Router).swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            amountIn, \r\n            0, \r\n            path, \r\n            to, \r\n            block.timestamp + 10\r\n        );\r\n    }\r\n\r\n    function _updateDomainSeparator() private {\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n                keccak256(\"Recharge\"),\r\n                keccak256(bytes(\"1\")),\r\n                block.chainid,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    function getHash() external pure returns (bytes32){\r\n        return keccak256(\"Content(address holder,uint256 amount,uint256 fees,uint256 deadline,string round)\");\r\n    }\r\n\r\n    function getResult(SignatureInfo.Content calldata content) public view returns(bool){\r\n        require(reentrancy[content.holder][content.deadline] != content.amount,\"Recharge:Repeated withdrawals.\");\r\n        return SignatureChecker.verify(SignatureInfo.getContentHash(content), permit, content.v, content.r, content.s, DOMAIN_SEPARATOR);\r\n    }\r\n    //26%\r\n    function extractWithSignature(SignatureInfo.Content calldata content) external nonReentrant{\r\n        require(getResult(content),\"Recharge:Signature verification failed.\");\r\n        require(block.timestamp < content.deadline,\"Recharge:Signature validity period exceeded.\");\r\n        require(content.amount > 0,\"Recharge:Invalid withdraw amount.\");\r\n        require(content.fees > 0,\"Recharge:Invalid withdraw fees.\");\r\n        TransferHelper.safeTransferFrom(token, msg.sender, DEAD, content.fees);\r\n        require(content.holder == msg.sender,\"Recharge:Lack of operating permission.\");\r\n        reentrancy[content.holder][content.deadline] = content.amount;\r\n        TransferHelper.safeTransfer(token, content.holder, content.amount);\r\n\r\n        logsExtracted(content.round,Mark.Mining, token, content.holder, content.amount, block.timestamp);\r\n    }\r\n\r\n    function protect() external override onlyPermit(){\r\n        _swap(totalProtect, project);\r\n        totalProtect = 0;\r\n    }\r\n\r\n    function emergencyWithdraw(address to) external onlyOwner(){\r\n        (bool success,bytes memory data) = usdt.staticcall(abi.encodeWithSelector(0x70a08231,address(this)));\r\n        require(success,\"Recharge: failed to get balance.\");\r\n        uint256 amount = abi.decode(data, (uint256));\r\n        if(amount > 0) TransferHelper.safeTransfer(usdt, to, amount);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"round\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum IRecharge.Mark\",\"name\":\"mark\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Extracted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Recharged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"round\",\"type\":\"string\"},{\"internalType\":\"enum IRecharge.Mark\",\"name\":\"mark\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"extract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"round\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureInfo.Content\",\"name\":\"content\",\"type\":\"tuple\"}],\"name\":\"extractWithSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"round\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureInfo.Content\",\"name\":\"content\",\"type\":\"tuple\"}],\"name\":\"getResult\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_permit\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"round\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_distributed\",\"type\":\"uint256\"}],\"name\":\"lottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"project\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recharge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reentrancy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setCurrencyAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_permit\",\"type\":\"address\"}],\"name\":\"setPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalProtect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRecharge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Recharge", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://97e54039d247c5457506ce7642191b99f6fb11e862c5f65516cc4ca70957a37a"}