{"SourceCode": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.0;\n\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n\n// \ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\n\n// \ninterface IPancakeswapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\n\n// \ninterface IPancakeswapFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\n\n// \ninterface IPancakeswapPair {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\n\n// \ninterface IPinkAntiBot {\r\n    function setTokenOwner(address owner) external;\r\n\r\n    function onPreTransferCheck(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external;\r\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n// \ncontract StakeManager is ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    IBEP20 public constant BUSD = IBEP20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\r\n\r\n    // The Moox token\r\n    Moox public moox;\r\n\r\n    // The LP token for MOOX/WBNB\r\n    IPancakeswapPair public lpToken;\r\n\r\n    // Total deposited BUSD for awarding\r\n    uint256 public totalDepositedBusd;\r\n\r\n    // Deposited BUSD amount on the last reward update\r\n    uint256 public lastRewardDepositedBusd;\r\n\r\n    // Accumulated BUSD per share\r\n    uint256 public accBusdPerShare;\r\n\r\n    // Info of each user that stakes tokens\r\n    mapping(address => UserInfo) public userInfo;\r\n\r\n    struct UserInfo {\r\n        uint256 amount; // How many MOOX/WBNB LP tokens the user has provided\r\n        uint256 rewardDebt; // Reward debt\r\n    }\r\n\r\n    event Deposit(address indexed user, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 amount);\r\n\r\n    constructor(Moox _moox, IPancakeswapPair _lpToken) {\r\n        moox = _moox;\r\n        lpToken = _lpToken;\r\n    }\r\n\r\n    function busdDeposit(uint256 _amount) external nonReentrant {\r\n        require(msg.sender == address(moox), 'StakeManager: Not allowed');\r\n\r\n        totalDepositedBusd = totalDepositedBusd.add(_amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Deposit staked tokens and collect reward tokens (if any)\r\n     * @param _amount: amount to deposit\r\n     */\r\n    function deposit(uint256 _amount) external nonReentrant {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n\r\n        _updatePool();\r\n\r\n        if (user.amount > 0) {\r\n            uint256 pending = user.amount.mul(accBusdPerShare).div(1e12).sub(user.rewardDebt);\r\n            if (pending > 0) {\r\n                safeBusdTransfer(address(msg.sender), pending);\r\n            }\r\n        }\r\n\r\n        if (_amount > 0) {\r\n            user.amount = user.amount.add(_amount);\r\n            lpToken.transferFrom(address(msg.sender), address(this), _amount);\r\n        }\r\n\r\n        user.rewardDebt = user.amount.mul(accBusdPerShare).div(1e12);\r\n\r\n        emit Deposit(msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw staked tokens and collect reward\r\n     * @param _amount: amount to withdraw\r\n     */\r\n    function withdraw(uint256 _amount) external nonReentrant {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        require(user.amount >= _amount, 'StakeManager: Withdraw amount gt user.amount');\r\n\r\n        _updatePool();\r\n\r\n        uint256 pending = user.amount.mul(accBusdPerShare).div(1e12).sub(user.rewardDebt);\r\n\r\n        if (_amount > 0) {\r\n            user.amount = user.amount - _amount;\r\n            lpToken.transfer(address(msg.sender), _amount);\r\n        }\r\n\r\n        if (pending > 0) {\r\n            safeBusdTransfer(address(msg.sender), pending);\r\n        }\r\n\r\n        user.rewardDebt = user.amount.mul(accBusdPerShare).div(1e12);\r\n\r\n        emit Withdraw(msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Update reward variables of the pool to be up-to-date.\r\n     */\r\n    function _updatePool() internal {\r\n        uint256 lpTokenSupply = lpToken.balanceOf(address(this));\r\n\r\n        if (totalDepositedBusd <= lastRewardDepositedBusd) {\r\n            return;\r\n        }\r\n\r\n        if (lpTokenSupply == 0) {\r\n            lastRewardDepositedBusd = totalDepositedBusd;\r\n            return;\r\n        }\r\n\r\n        uint256 busdReward = totalDepositedBusd.sub(lastRewardDepositedBusd);\r\n        accBusdPerShare = accBusdPerShare.add(busdReward.mul(1e12).div(lpTokenSupply));\r\n        lastRewardDepositedBusd = totalDepositedBusd;\r\n    }\r\n\r\n    /**\r\n     * @dev Safe BUSD transfer function, just in case if rounding error causes pool to not have enough BUSD.\r\n     * @param _to: address\r\n     * @param _amount: amount\r\n     */\r\n    function safeBusdTransfer(address _to, uint256 _amount) private {\r\n        uint256 busdBalance = BUSD.balanceOf(address(this));\r\n\r\n        if (_amount > busdBalance) {\r\n            BUSD.transfer(_to, busdBalance);\r\n        } else {\r\n            BUSD.transfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev View function to see pending reward on frontend.\r\n     * @param _user: user address\r\n     *\r\n     * @return Pending reward for a given user\r\n     */\r\n    function pendingReward(address _user) external view returns (uint256) {\r\n        UserInfo storage user = userInfo[_user];\r\n        uint256 lpTokenSupply = lpToken.balanceOf(address(this));\r\n\r\n        if (totalDepositedBusd > lastRewardDepositedBusd && lpTokenSupply != 0) {\r\n            uint256 busdReward = totalDepositedBusd.sub(lastRewardDepositedBusd);\r\n            uint256 adjustedBusdPerShare = accBusdPerShare.add(busdReward.mul(1e12).div(lpTokenSupply));\r\n\r\n            return user.amount.mul(adjustedBusdPerShare).div(1e12).sub(user.rewardDebt);\r\n        } else {\r\n            return user.amount.mul(accBusdPerShare).div(1e12).sub(user.rewardDebt);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw staked tokens without caring about rewards rewards\r\n     * @dev Needs to be for emergency.\r\n     */\r\n    function emergencyWithdraw() external nonReentrant {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        uint256 amountToTransfer = user.amount;\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n\r\n        if (amountToTransfer > 0) {\r\n            lpToken.transfer(address(msg.sender), amountToTransfer);\r\n        }\r\n\r\n        emit EmergencyWithdraw(msg.sender, user.amount);\r\n    }\r\n}\n\n// \ncontract Moox is IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    uint8 public constant DECIMALS = 18;\r\n    uint8 public constant RATE_DECIMALS = 7;\r\n    uint256 public constant MAX_UINT256 = ~uint256(0);\r\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 100 * 10**3 * 10**DECIMALS;\r\n    uint256 private constant TOTAL_GONS = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\r\n    uint256 public constant MAX_SUPPLY = 70 * 10**9 * 10**DECIMALS;\r\n    uint256 public constant REBASE_PERIOD = 5 minutes;\r\n\r\n    uint256 public constant FEE_DOMINATOR = 1000;\r\n\r\n    IBEP20 public constant BUSD = IBEP20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\r\n    IPancakeswapRouter public constant router = IPancakeswapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    IPinkAntiBot public constant pinkAntiBot = IPinkAntiBot(0x8EFDb3b642eb2a20607ffe0A56CFefF6a95Df002);\r\n\r\n    string public _name = 'Moox';\r\n    string public _symbol = 'MOOX';\r\n    uint256 public _totalSupply;\r\n    mapping(address => uint256) private _gonBalances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) _isFeeExempt;\r\n\r\n    uint256 private _gonsPerFragment;\r\n\r\n    address public pancakeswapPair;\r\n    address public liquidityProxy;\r\n    address public treasuryReceiver;\r\n\r\n    IPancakeswapPair public pairContract;\r\n    StakeManager public stakeManager;\r\n\r\n    bool public autoRebaseEnabled;\r\n    uint256 public initRebaseStartTime;\r\n    uint256 public lastRebasedTime;\r\n\r\n    bool public antibotEnabled = false;\r\n\r\n    uint256 private _minAmountToSwap;\r\n    uint256 private _collectedBuyFee;\r\n    uint256 private _collectedSellFee;\r\n\r\n    event LogRebase(uint256 indexed epoch, uint256 totalSupply);\r\n    event SetTreasuryReceiver(address treasuryReceiver);\r\n    event StartAutoRebase();\r\n    event IncludeFeeExempt(address includedAddress);\r\n    event ExcludeFeeExempt(address excludedAddress);\r\n    event SetAntibotEnabled(bool flag);\r\n    event SetMinAmountToSwap(uint256 minAmountToSwap);\r\n\r\n    constructor() {\r\n        pancakeswapPair = IPancakeswapFactory(router.factory()).createPair(router.WETH(), address(this));\r\n        pairContract = IPancakeswapPair(pancakeswapPair);\r\n        liquidityProxy = address(new LiquidityProxy(this, pairContract));\r\n        stakeManager = new StakeManager(this, pairContract);\r\n\r\n        pinkAntiBot.setTokenOwner(msg.sender);\r\n\r\n        initRebaseStartTime = block.timestamp;\r\n\r\n        _isFeeExempt[msg.sender] = true;\r\n        _isFeeExempt[address(this)] = true;\r\n        _isFeeExempt[liquidityProxy] = true;\r\n\r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n        _allowances[liquidityProxy][address(router)] = type(uint256).max;\r\n\r\n        _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\r\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n        _gonBalances[msg.sender] = TOTAL_GONS;\r\n\r\n        emit Transfer(address(0x0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 value) external override returns (bool) {\r\n        _transfer(_msgSender(), to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {BEP20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            _approve(\r\n                sender,\r\n                _msgSender(),\r\n                _allowances[sender][_msgSender()].sub(amount, 'BEP20: transfer amount exceeds allowance')\r\n            );\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        require(sender != address(0), 'BEP20: transfer from the zero address');\r\n        require(recipient != address(0), 'BEP20: transfer to the zero address');\r\n\r\n        uint256 gonAmount = amount.mul(_gonsPerFragment);\r\n\r\n        require(_gonBalances[sender] >= gonAmount, 'BEP20: transfer amount exceeds balance');\r\n\r\n        bool shouldTakeFee = false;\r\n\r\n        if (\r\n            (sender == pancakeswapPair || recipient == pancakeswapPair) &&\r\n            !(sender == pancakeswapPair && recipient == address(router)) && // remove liquidity\r\n            !_isFeeExempt[sender] &&\r\n            recipient != liquidityProxy &&\r\n            amount >= FEE_DOMINATOR\r\n        ) {\r\n            if (antibotEnabled) {\r\n                pinkAntiBot.onPreTransferCheck(sender, recipient, amount);\r\n            }\r\n\r\n            shouldTakeFee = true;\r\n\r\n            // Rebase and swapForTreasuryAndStakeAward if tx is sell\r\n            if (msg.sender != pancakeswapPair) {\r\n                if (\r\n                    autoRebaseEnabled &&\r\n                    _totalSupply < MAX_SUPPLY &&\r\n                    block.timestamp >= (lastRebasedTime + REBASE_PERIOD)\r\n                ) {\r\n                    rebase();\r\n                }\r\n\r\n                swapForTreasuryAndStakeAward();\r\n\r\n                gonAmount = amount.mul(_gonsPerFragment);\r\n            }\r\n        }\r\n\r\n        _gonBalances[sender] = _gonBalances[sender].sub(gonAmount);\r\n\r\n        uint256 gonAmountReceived = shouldTakeFee ? takeFee(sender, recipient, gonAmount) : gonAmount;\r\n\r\n        _gonBalances[recipient] = _gonBalances[recipient].add(gonAmountReceived);\r\n\r\n        emit Transfer(sender, recipient, gonAmountReceived.div(_gonsPerFragment));\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(owner != address(0), 'BEP20: approve from the zero address');\r\n        require(spender != address(0), 'BEP20: approve to the zero address');\r\n\r\n        _allowances[owner][spender] = amount;\r\n\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates and updates _totalSupply and _gonsPerFragment\r\n     *\r\n     * Emits an {LogRebase} event.\r\n     */\r\n    function rebase() internal {\r\n        uint256 rebaseRate;\r\n        uint256 deltaTimeFromInit = block.timestamp - initRebaseStartTime;\r\n        uint256 deltaTime = block.timestamp - lastRebasedTime;\r\n        uint256 times = deltaTime.div(REBASE_PERIOD);\r\n        uint256 epoch = times.mul(5);\r\n\r\n        if (deltaTimeFromInit < (365 days)) {\r\n            rebaseRate = 943;\r\n        } else if (deltaTimeFromInit >= (10 * 365 days)) {\r\n            rebaseRate = 3;\r\n        } else if (deltaTimeFromInit >= (3 * 365 days)) {\r\n            rebaseRate = 10;\r\n        } else if (deltaTimeFromInit >= (365 days)) {\r\n            rebaseRate = 66;\r\n        }\r\n\r\n        uint256 tempTotalSupply = _totalSupply;\r\n\r\n        for (uint256 i = 0; i < times; i++) {\r\n            tempTotalSupply = tempTotalSupply.mul((10**RATE_DECIMALS).add(rebaseRate)).div(10**RATE_DECIMALS);\r\n        }\r\n\r\n        _totalSupply = tempTotalSupply;\r\n\r\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n        lastRebasedTime = lastRebasedTime.add(times.mul(REBASE_PERIOD));\r\n\r\n        pairContract.sync();\r\n\r\n        emit LogRebase(epoch, _totalSupply);\r\n    }\r\n\r\n    /**\r\n     * @dev Takes fee and updates balances\r\n     *\r\n     * Emits an {Transfer} event for stakeAndTreasuryAmount.\r\n     * Emits an {Transfer} event for burnAmount if the tx is a sell tx.\r\n     */\r\n    function takeFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 gonAmount\r\n    ) internal returns (uint256) {\r\n        uint256 burnAmount = 0;\r\n        uint256 stakeAndTreasuryAmount = 0;\r\n        (uint256 buyStakeFee, uint256 sellStakeFee, uint256 treasuryFee) = getStakeAndTreasuryFee();\r\n\r\n        if (recipient == pancakeswapPair) {\r\n            burnAmount = gonAmount.div(FEE_DOMINATOR).mul(getBurnFee());\r\n\r\n            _gonBalances[BURN_ADDRESS] = _gonBalances[BURN_ADDRESS].add(burnAmount);\r\n\r\n            emit Transfer(sender, BURN_ADDRESS, burnAmount.div(_gonsPerFragment));\r\n\r\n            stakeAndTreasuryAmount = gonAmount.div(FEE_DOMINATOR).mul(sellStakeFee);\r\n\r\n            _collectedSellFee = _collectedSellFee.add(stakeAndTreasuryAmount.div(_gonsPerFragment));\r\n        } else {\r\n            stakeAndTreasuryAmount = gonAmount.div(FEE_DOMINATOR).mul(buyStakeFee.add(treasuryFee));\r\n\r\n            _collectedBuyFee = _collectedBuyFee.add(stakeAndTreasuryAmount.div(_gonsPerFragment));\r\n        }\r\n\r\n        _gonBalances[address(this)] = _gonBalances[address(this)].add(stakeAndTreasuryAmount);\r\n\r\n        emit Transfer(sender, address(this), stakeAndTreasuryAmount.div(_gonsPerFragment));\r\n\r\n        return gonAmount.sub(stakeAndTreasuryAmount.add(burnAmount));\r\n    }\r\n\r\n    /**\r\n     * @dev Swaps token balance with busd and sends to treasury receiver and stake manager\r\n     */\r\n    function swapForTreasuryAndStakeAward() internal {\r\n        uint256 amountToSwap = _gonBalances[address(this)].div(_gonsPerFragment);\r\n\r\n        if (amountToSwap == 0 || amountToSwap < _minAmountToSwap) {\r\n            return;\r\n        }\r\n\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        path[2] = address(BUSD);\r\n\r\n        router.swapExactTokensForTokens(amountToSwap, 0, path, address(this), block.timestamp);\r\n\r\n        // All the BUSD balance is assumed to come from this swap\r\n        uint256 busdBalance = BUSD.balanceOf(address(this));\r\n\r\n        if (pairContract.balanceOf(address(stakeManager)) <= 0) {\r\n            BUSD.transfer(treasuryReceiver, busdBalance);\r\n        } else {\r\n            (uint256 buyStakeFee, , uint256 treasuryFee) = getStakeAndTreasuryFee();\r\n\r\n            if (treasuryFee > 0 && _collectedBuyFee > 0) {\r\n                uint256 totalFeeCollected = _collectedBuyFee.add(_collectedSellFee);\r\n\r\n                uint256 sellFeeStakeAmount = busdBalance.mul(_collectedSellFee).div(totalFeeCollected);\r\n                uint256 totalBuyFeeAmount = busdBalance.sub(sellFeeStakeAmount);\r\n                uint256 treasuryAmount = totalBuyFeeAmount.mul(treasuryFee).div(buyStakeFee.add(treasuryFee));\r\n                uint256 stakeAmount = busdBalance.sub(treasuryAmount);\r\n\r\n                BUSD.transfer(treasuryReceiver, treasuryAmount);\r\n\r\n                BUSD.transfer(address(stakeManager), stakeAmount);\r\n                stakeManager.busdDeposit(stakeAmount);\r\n            } else {\r\n                BUSD.transfer(address(stakeManager), busdBalance);\r\n                stakeManager.busdDeposit(busdBalance);\r\n            }\r\n        }\r\n\r\n        _collectedBuyFee = 0;\r\n        _collectedSellFee = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(subtractedValue, 'BEP20: decreased allowance below zero')\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Manually sync pancakeswap pair\r\n     */\r\n    function manualSync() external {\r\n        pairContract.sync();\r\n    }\r\n\r\n    /**\r\n     * @dev Starts auto rebase after DEX listing\r\n     *\r\n     * Emits a {StartAutoRebase} event.\r\n     */\r\n    function startAutoRebase() external onlyOwner {\r\n        require(!autoRebaseEnabled, 'Moox: Autorebase already started');\r\n\r\n        autoRebaseEnabled = true;\r\n        lastRebasedTime = block.timestamp;\r\n\r\n        emit StartAutoRebase();\r\n    }\r\n\r\n    /**\r\n     * @dev Sets receiver address for treasury fund\r\n     *\r\n     * Emits a {SetTreasuryReceiver} event.\r\n     */\r\n    function setTreasuryReceiver(address _treasuryReceiver) external onlyOwner {\r\n        require(_treasuryReceiver != address(0), 'Moox: treasuryReceiver cannot be zero');\r\n\r\n        treasuryReceiver = _treasuryReceiver;\r\n        _isFeeExempt[_treasuryReceiver] = true;\r\n\r\n        emit SetTreasuryReceiver(_treasuryReceiver);\r\n    }\r\n\r\n    /**\r\n     * @dev Includes address for fee exempt\r\n     *\r\n     * Emits an {IncludeFeeExempt} event.\r\n     */\r\n    function includeFeeExempt(address _address) external onlyOwner {\r\n        require(_address != pancakeswapPair, 'Moox: PancakeswapPair cannot be included');\r\n        require(_address != address(router), 'Moox: Router cannot be included');\r\n\r\n        _isFeeExempt[_address] = true;\r\n\r\n        emit IncludeFeeExempt(_address);\r\n    }\r\n\r\n    /**\r\n     * @dev Excludes address from fee exempt\r\n     *\r\n     * Emits an {ExcludeFeeExempt} event.\r\n     */\r\n    function exludeFeeExempt(address _address) external onlyOwner {\r\n        require(address(this) != _address, 'Moox: This cannot be excluded');\r\n        require(liquidityProxy != _address, 'Moox: Liquidity proxy cannot be excluded');\r\n\r\n        _isFeeExempt[_address] = false;\r\n\r\n        emit ExcludeFeeExempt(_address);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets whether pink antibot enabled\r\n     *\r\n     * Emits an {SetAntibotEnabled} event.\r\n     */\r\n    function setAntibotEnabled(bool _flag) external onlyOwner {\r\n        antibotEnabled = _flag;\r\n\r\n        emit SetAntibotEnabled(_flag);\r\n    }\r\n\r\n    /**\r\n     * @dev Set minimum amount for swaping stake and treasury fee\r\n     *\r\n     * Emits an {SetMinAmountToSwap} event.\r\n     */\r\n    function setMinAmountToSwap(uint256 _amount) external onlyOwner {\r\n        _minAmountToSwap = _amount;\r\n\r\n        emit SetMinAmountToSwap(_amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view override returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() public view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() public pure override returns (uint8) {\r\n        return DECIMALS;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() public view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _gonBalances[account].div(_gonsPerFragment);\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns treasury and stake fee\r\n     */\r\n    function getStakeAndTreasuryFee()\r\n        public\r\n        view\r\n        returns (\r\n            uint256 buyStakeFee,\r\n            uint256 sellStakeFee,\r\n            uint256 treasuryFee\r\n        )\r\n    {\r\n        uint256 deltaTimeFromInit = block.timestamp - initRebaseStartTime;\r\n\r\n        if (deltaTimeFromInit < (365 days)) {\r\n            buyStakeFee = 50;\r\n            sellStakeFee = 100;\r\n            treasuryFee = 50;\r\n        } else if (deltaTimeFromInit >= (10 * 365 days)) {\r\n            buyStakeFee = 20;\r\n            sellStakeFee = 30;\r\n            treasuryFee = 0;\r\n        } else if (deltaTimeFromInit >= (3 * 365 days)) {\r\n            buyStakeFee = 20;\r\n            sellStakeFee = 60;\r\n            treasuryFee = 10;\r\n        } else if (deltaTimeFromInit >= (365 days)) {\r\n            buyStakeFee = 30;\r\n            sellStakeFee = 100;\r\n            treasuryFee = 20;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns burn fee\r\n     *\r\n     * Calculated by the ratio of burned amount to total supply\r\n     */\r\n    function getBurnFee() public view returns (uint256) {\r\n        if (_totalSupply.mul(999).div(1000) > balanceOf(BURN_ADDRESS)) {\r\n            return 150;\r\n        }\r\n\r\n        if (_totalSupply.mul(9999).div(10000) > balanceOf(BURN_ADDRESS)) {\r\n            return 100;\r\n        }\r\n\r\n        if (_totalSupply.mul(99999).div(100000) > balanceOf(BURN_ADDRESS)) {\r\n            return 50;\r\n        }\r\n\r\n        return 20;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-allowance}.\r\n     */\r\n    function checkFeeExempt(address _addr) external view returns (bool) {\r\n        return _isFeeExempt[_addr];\r\n    }\r\n}\n\n// \ncontract LiquidityProxy {\r\n    using SafeMath for uint256;\r\n\r\n    IPancakeswapRouter public constant router = IPancakeswapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n    Moox public moox;\r\n    IPancakeswapPair public pair;\r\n\r\n    constructor(Moox _moox, IPancakeswapPair _pair) {\r\n        moox = _moox;\r\n        pair = _pair;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function addLiquidity(\r\n        uint256 _amountMooxDesired,\r\n        uint256 _amountMooxMin,\r\n        uint256 _amountBNBMin,\r\n        address _to,\r\n        uint256 _deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountMoox,\r\n            uint256 amountBNB,\r\n            uint256 liquidity\r\n        )\r\n    {\r\n        moox.transferFrom(msg.sender, address(this), _amountMooxDesired);\r\n\r\n        (amountMoox, amountBNB, liquidity) = router.addLiquidityETH{value: msg.value}(\r\n            address(moox),\r\n            _amountMooxDesired,\r\n            _amountMooxMin,\r\n            _amountBNBMin,\r\n            _to,\r\n            _deadline\r\n        );\r\n\r\n        if (_amountMooxDesired > amountMoox) {\r\n            moox.transfer(msg.sender, _amountMooxDesired.sub(amountMoox));\r\n        }\r\n\r\n        if (msg.value > amountBNB) {\r\n            (bool success, ) = msg.sender.call{value: msg.value.sub(amountBNB)}(new bytes(0));\r\n            require(success, 'LiquidityProxy: BNB_TRANSFER_FAILED');\r\n        }\r\n    }\r\n\r\n    function removeLiquidityWithPermit(\r\n        uint256 _liquidity,\r\n        uint256 _amountMooxMin,\r\n        uint256 _amountBNBMin,\r\n        address _to,\r\n        uint256 _deadline,\r\n        bool _approveMax,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) external virtual returns (uint256 amountMoox, uint256 amountBNB) {\r\n        uint256 value = _approveMax ? type(uint256).max : _liquidity;\r\n\r\n        pair.permit(msg.sender, address(this), value, _deadline, _v, _r, _s);\r\n\r\n        (amountMoox, amountBNB) = removeLiquidity(_liquidity, _amountMooxMin, _amountBNBMin, _to, _deadline);\r\n    }\r\n\r\n    function removeLiquidity(\r\n        uint256 _liquidity,\r\n        uint256 _amountMooxMin,\r\n        uint256 _amountBNBMin,\r\n        address _to,\r\n        uint256 _deadline\r\n    ) public returns (uint256 amountMoox, uint256 amountBNB) {\r\n        pair.transferFrom(msg.sender, address(this), _liquidity);\r\n\r\n        if (pair.allowance(address(this), address(router)) < _liquidity) {\r\n            pair.approve(address(router), type(uint256).max);\r\n        }\r\n\r\n        (amountMoox, amountBNB) = router.removeLiquidityETH(\r\n            address(moox),\r\n            _liquidity,\r\n            _amountMooxMin,\r\n            _amountBNBMin,\r\n            address(this),\r\n            _deadline\r\n        );\r\n\r\n        moox.transfer(_to, amountMoox);\r\n\r\n        (bool success, ) = _to.call{value: amountBNB}(new bytes(0));\r\n        require(success, 'LiquidityProxy: BNB_TRANSFER_FAILED');\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"excludedAddress\",\"type\":\"address\"}],\"name\":\"ExcludeFeeExempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"includedAddress\",\"type\":\"address\"}],\"name\":\"IncludeFeeExempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"SetAntibotEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minAmountToSwap\",\"type\":\"uint256\"}],\"name\":\"SetMinAmountToSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasuryReceiver\",\"type\":\"address\"}],\"name\":\"SetTreasuryReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StartAutoRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BUSD\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_DOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REBASE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antibotEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoRebaseEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"exludeFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeAndTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyStakeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellStakeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"includeFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initRebaseStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebasedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairContract\",\"outputs\":[{\"internalType\":\"contract IPancakeswapPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pinkAntiBot\",\"outputs\":[{\"internalType\":\"contract IPinkAntiBot\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IPancakeswapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setAntibotEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinAmountToSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryReceiver\",\"type\":\"address\"}],\"name\":\"setTreasuryReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeManager\",\"outputs\":[{\"internalType\":\"contract StakeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAutoRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Moox", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}