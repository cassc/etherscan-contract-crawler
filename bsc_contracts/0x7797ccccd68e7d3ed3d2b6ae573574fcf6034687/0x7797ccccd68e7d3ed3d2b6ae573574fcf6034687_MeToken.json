{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\r\n\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\r\n\r\n\r\npragma solidity >=0.6.2;\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts/ME/MeToken.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\n\r\n\r\n\r\ninterface MyNftEX {\r\n    function rewardBalance(address account) external view returns (uint256);\r\n    function claimRewards(address account) external;\r\n    function currentReward(address account) external view returns(uint256);\r\n    function totalRewards() external view returns(uint256);\r\n    function totalExcludedRewardAmount() external view returns(uint256);\r\n    function setRewardStop(uint256 timestamp) external;\r\n\r\n}\r\n\r\ncontract MeToken is Ownable, IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 public _totalSupply;\r\n    uint256 private _maxSupply;\r\n    uint256 public rewardSupply;\r\n    uint256 public _totalBurn;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    MyNftEX public myNftEX;\r\n    IUniswapV2Router02 public router;\r\n    address public pair;\r\n    mapping (address => bool) public _isExcludedFromFee;\r\n    bool inSwap;\r\n\r\n    uint256 private _totalBuyFee;\r\n    uint256 private _totalSellFee;\r\n    uint256 private _feeRate;\r\n\r\n    address public _token_trusteeship;\r\n    address public _security_fund;\r\n    address public _burnWallet;\r\n    address public _dao_reward;\r\n\r\n    uint256 public numTokensToAddToLiquidity;\r\n    uint256 public waitAutoLPTokenNum;\r\n\r\n    uint256 public swapTokensAtAmount;\r\n    address[] public buyUser;\r\n    mapping(address => bool) public havePushBuyUser;\r\n    uint8 public splitTimesPerTran = 20;\r\n    uint256 public currentSplitIndex;\r\n    uint256 public waitLPHolderDividendTokenNum;\r\n    uint256 public processingLPHolderDividendTokenNum;\r\n    uint256 public waitTrustenshipTokenNum;\r\n    address public manager;\r\n    address public _meConsensus;\r\n\r\n\r\n    IERC20 public usdt;\r\n\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    event AutoLP(bool flag);\r\n    event Received(address, uint256);\r\n\r\n    function init() private onlyOwner {\r\n        uint256 tenMillion = (10**_decimals) * (10**7);\r\n        _totalSupply = tenMillion;\r\n        rewardSupply = tenMillion * 20;\r\n        _maxSupply = _totalSupply + rewardSupply;\r\n        _balances[msg.sender] = _totalSupply;\r\n\r\n        setupLP();\r\n        _totalBuyFee = 800;\r\n        _totalSellFee = 1200;\r\n        _feeRate = 10000;\r\n        numTokensToAddToLiquidity = 50 ether;\r\n        swapTokensAtAmount = 200 ether;\r\n\r\n        _token_trusteeship = address(0xF46b2A0Ed24d0f9100DF90aF7323dA8137ECde80);\r\n        _dao_reward= address(0x2C3bF9069351B8c967789c85c81F123D6C5C505F);\r\n        _burnWallet = address(0);\r\n    }\r\n\r\n    constructor (address security_fund_) {\r\n        manager = owner();\r\n        _security_fund = security_fund_;\r\n        _name = \"MyNFTex\";\r\n        _symbol = \"ME\";\r\n        _decimals = 18;\r\n        init();\r\n    }\r\n\r\n    function setupLP() private onlyOwner {\r\n        IUniswapV2Router02 _uniswapV2Router;\r\n\r\n        address routerAddr = address(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        address usdtAddr = address(0x55d398326f99059fF775485246999027B3197955);\r\n\r\n        _uniswapV2Router = IUniswapV2Router02(routerAddr);\r\n        usdt = IERC20(usdtAddr);\r\n\r\n        pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), address(usdt));\r\n\r\n        router = _uniswapV2Router;\r\n\r\n        _isExcludedFromFee[manager] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _approve(address(this), address(router), 10**50);\r\n    }\r\n\r\n    function setSplitTimesPerTran(uint8 splitTimesPerTran_) public onlyOwner {\r\n        splitTimesPerTran = splitTimesPerTran_;\r\n    }\r\n\r\n\r\n    function setSwapTokensAtAmount(uint256 _swapTokensAtAmount) public onlyOwner {\r\n        swapTokensAtAmount = _swapTokensAtAmount;\r\n    }\r\n\r\n    function setAutoLPThreshold(uint256 amount) public onlyOwner {\r\n        numTokensToAddToLiquidity = amount;\r\n    }\r\n\r\n    function clearBuyUser() public {\r\n        if (buyUser.length <= 0) {\r\n            return;\r\n        }\r\n        uint256 buyUserLen = buyUser.length;\r\n        for(uint256 i = buyUserLen - 1; i >= 0; ) {\r\n            address user = buyUser[i];\r\n            if (IERC20(pair).balanceOf(user) <= 0) {\r\n                buyUser[i] = buyUser[buyUser.length - 1];\r\n                buyUser.pop();\r\n                havePushBuyUser[user] = false;\r\n            }\r\n            if (i > 0) {\r\n                i --;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function splitLPHolderToken() private {\r\n        address user;\r\n        uint256 totalAmount = IERC20(pair).totalSupply();\r\n        uint256 rate;\r\n\r\n        uint256 buySize = buyUser.length;\r\n        uint256 thisTimeSize = currentSplitIndex + splitTimesPerTran > buySize ? buySize : currentSplitIndex + splitTimesPerTran;\r\n        uint256 userAmt;\r\n        for(uint256 i = currentSplitIndex; i < thisTimeSize; i++){\r\n            user = buyUser[i];\r\n\r\n            rate = IERC20(pair).balanceOf(user) * 1000000 / totalAmount;\r\n            userAmt = swapTokensAtAmount * rate / 1000000;\r\n\r\n            if (userAmt > 1e17) {\r\n                if(processingLPHolderDividendTokenNum < userAmt){\r\n                    currentSplitIndex = buySize;\r\n                    break;\r\n                }\r\n                _basicTransfer(address(this), user, userAmt);\r\n                processingLPHolderDividendTokenNum -= userAmt;\r\n                if(processingLPHolderDividendTokenNum == userAmt){\r\n                    currentSplitIndex = buySize;\r\n                    break;\r\n                }\r\n            }\r\n            currentSplitIndex ++;\r\n        }\r\n\r\n        if(currentSplitIndex >= buySize){\r\n            currentSplitIndex = 0;\r\n            if(processingLPHolderDividendTokenNum > 0){\r\n                waitLPHolderDividendTokenNum += processingLPHolderDividendTokenNum;\r\n            }\r\n        }\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        uint256 totalRewardFromNft = 0;\r\n        if (address(myNftEX) != address(0)) {\r\n            totalRewardFromNft = myNftEX.totalRewards();\r\n        }\r\n        return _totalSupply + totalRewardFromNft;\r\n    }\r\n\r\n    function maxSupply() public view returns(uint256) {\r\n        return _maxSupply;\r\n    }\r\n\r\n\r\n    function setRewardSupply(uint256 _rewardSupply) public onlyOwner {\r\n        rewardSupply = _rewardSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        uint256 balance = _balances[account];\r\n        if (address(myNftEX) != address(0))\r\n            balance += myNftEX.currentReward(account);\r\n        return balance;\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to\r\n    ) internal {\r\n        if (address(myNftEX) == address(0))\r\n            return;\r\n        myNftEX.claimRewards(from);\r\n        myNftEX.claimRewards(to);\r\n    }\r\n\r\n    function refreshTotalSupply() public returns (uint256) {\r\n        if (address(myNftEX) == address(0))\r\n            return 0;\r\n        require(msg.sender == address(myNftEX), \"[METoken] This function can be called only from reward NFT!\");\r\n        _totalSupply += myNftEX.totalRewards();\r\n        return _totalSupply;\r\n    }\r\n\r\n    function _basicTransfer(address from, address to, uint256 amount) internal {\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(\r\n            fromBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n\r\n        _balances[from] = fromBalance - amount;\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function _transferWithBuyFee(address from, address to, uint256 amount) internal {\r\n        uint256 feeAmount = (amount * _totalBuyFee) / _feeRate;\r\n        uint256 tAmount = amount - feeAmount;\r\n        uint256 amountA = (feeAmount * 200) / _totalBuyFee;\r\n        uint256 amountB = (feeAmount * 200) / _totalBuyFee;\r\n        uint256 amountC = (feeAmount * 200) / _totalBuyFee;\r\n        uint256 amountD = (feeAmount * 200) / _totalBuyFee;\r\n\r\n        _basicTransfer(from, address(this), amountA);\r\n        waitLPHolderDividendTokenNum += amountA;\r\n\r\n        _basicTransfer(from, address(this), amountB);\r\n        waitTrustenshipTokenNum += amountB;\r\n\r\n        _burn(from,amountC);\r\n\r\n        _basicTransfer(from, _security_fund, amountD);\r\n        _basicTransfer(from, to, tAmount);\r\n    }\r\n\r\n    function _transferWithSellFee(address from, address to, uint256 amount) internal {\r\n        uint256 feeAmount = (amount * _totalSellFee) / _feeRate;\r\n        uint256 tAmount = amount - feeAmount;\r\n        uint256 amountA = (feeAmount * 200) / _totalSellFee;\r\n        uint256 amountB = (feeAmount * 200) / _totalSellFee;\r\n        uint256 amountC = (feeAmount * 200) / _totalSellFee;\r\n        uint256 amountD = (feeAmount * 200) / _totalSellFee;\r\n        uint256 amountE = (feeAmount * 400) / _totalSellFee;\r\n\r\n        _basicTransfer(from, address(this), amountA);\r\n        waitLPHolderDividendTokenNum += amountA;\r\n\r\n        _basicTransfer(from, address(this), amountB);\r\n        waitAutoLPTokenNum += amountB;\r\n\r\n        if(waitTrustenshipTokenNum > 0 ){\r\n            swapUSDTTOTrusteeship(waitTrustenshipTokenNum);\r\n            waitTrustenshipTokenNum = 0;\r\n        }\r\n\r\n        _burn(from,amountC);\r\n\r\n        _basicTransfer(from, _security_fund, amountD);\r\n        _basicTransfer(from, _dao_reward, amountE);\r\n        _basicTransfer(from, to, tAmount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount,\"ERC20: burn transfer amount exceeds balance\");\r\n        require(\r\n            _totalSupply >= amount,\r\n            \"ERC20: burn transfer amount exceeds totalSupply\"\r\n        );\r\n    unchecked {\r\n        _balances[account] = accountBalance - amount;\r\n    }\r\n        _totalSupply -= amount;\r\n        _balances[address(0)] = _balances[address(0)] + amount;\r\n        _totalBurn += amount;\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n\r\n    function swapTokens(uint256 tokenAmount) private {\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = address(usdt);\r\n\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            manager,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n\r\n    function swapUSDTTOTrusteeship(uint256 tokenAmount) private swapping{\r\n        uint256 initialBalance = usdt.balanceOf(manager);\r\n        swapTokens(tokenAmount);\r\n        uint256 newBalance = usdt.balanceOf(manager) - initialBalance;\r\n        usdt.transferFrom(manager, _token_trusteeship, newBalance);\r\n        uint256 thisBalance = usdt.balanceOf(address(this));\r\n        if(thisBalance > 0){\r\n            usdt.transfer(_token_trusteeship,thisBalance);\r\n        }\r\n    }\r\n\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private swapping {\r\n        uint256 half = contractTokenBalance / 2;\r\n        uint256 otherHalf = contractTokenBalance - half;\r\n        uint256 initialBalance = usdt.balanceOf(manager);\r\n        swapTokens(half);\r\n        uint256 newBalance = usdt.balanceOf(manager) - initialBalance;\r\n        usdt.transferFrom(manager, address(this), newBalance);\r\n        addLiquidity(otherHalf, newBalance);\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function autoLP() private {\r\n        bool overMinTokenBalance = waitAutoLPTokenNum >= numTokensToAddToLiquidity;\r\n        if (overMinTokenBalance) {\r\n            waitAutoLPTokenNum = waitAutoLPTokenNum - numTokensToAddToLiquidity;\r\n            swapAndLiquify(numTokensToAddToLiquidity);\r\n        }\r\n        emit AutoLP(overMinTokenBalance);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        _beforeTokenTransfer(from, to);\r\n        if(from == address(this) || to == address(this) || from == _meConsensus){\r\n            _basicTransfer(from, to, amount);\r\n            return;\r\n        }\r\n        if (!inSwap){\r\n            if(currentSplitIndex > 0 || waitLPHolderDividendTokenNum >= swapTokensAtAmount){\r\n                if(currentSplitIndex == 0){\r\n                    processingLPHolderDividendTokenNum = swapTokensAtAmount;\r\n                    waitLPHolderDividendTokenNum -= swapTokensAtAmount;\r\n                }\r\n                splitLPHolderToken();\r\n            } else {\r\n                clearBuyUser();\r\n            }\r\n            if(from != pair){\r\n                autoLP();\r\n            }\r\n        }\r\n\r\n        if (inSwap) {\r\n            _basicTransfer(from, to, amount);\r\n        } else if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            _basicTransfer(from, to, amount);\r\n        } else if (from == pair) {\r\n            _transferWithBuyFee(from, to, amount);\r\n        } else if (to == pair) {\r\n            _transferWithSellFee(from, to, amount);\r\n        } else {\r\n            _basicTransfer(from, to, amount);\r\n        }\r\n\r\n        if(!havePushBuyUser[from] && to == pair) {\r\n            havePushBuyUser[from] = true;\r\n            buyUser.push(from);\r\n        }\r\n\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public returns (bool) {\r\n        address owner = msg.sender;\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        address owner = msg.sender;\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: insufficient allowance\"\r\n            );\r\n            _approve(owner, spender, currentAllowance - amount);\r\n        }\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public returns (bool) {\r\n        address spender = msg.sender;\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function setMyNFTEX(address myNftEXAddr) public onlyOwner {\r\n        myNftEX = MyNftEX(myNftEXAddr);\r\n    }\r\n\r\n    function setMeConsensus(address meConsensusAddr) public onlyOwner {\r\n        _meConsensus = meConsensusAddr;\r\n    }\r\n\r\n    modifier onlyNFT() {\r\n        if (address(myNftEX) == address(0))\r\n            return;\r\n        require(msg.sender == address(myNftEX), \"[METoken] This function can be called only from reward NFT!\");\r\n        _;\r\n    }\r\n\r\n    function refreshBalance(address account) public onlyNFT {\r\n        uint256 amount = myNftEX.rewardBalance(account);\r\n        _balances[account] += amount;\r\n    }\r\n\r\n    function increaseBalance(address account, uint256 amount) public onlyNFT {\r\n        _balances[account] += amount;\r\n        _totalSupply += amount;\r\n\r\n\r\n        if( totalSupply() + _totalBurn >= _maxSupply )\r\n            myNftEX.setRewardStop(block.timestamp);\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(router), tokenAmount);\r\n        usdt.approve(address(router), ethAmount);\r\n        router.addLiquidity(\r\n            address(this),\r\n            address(usdt),\r\n            tokenAmount,\r\n            ethAmount,\r\n            0,\r\n            0,\r\n            manager,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    receive() external payable {\r\n        emit Received(msg.sender, msg.value);\r\n    }\r\n\r\n    function approveToRouter() public {\r\n        _approve(address(this), address(router), 10**50);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"security_fund_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"AutoLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_burnWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dao_reward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_meConsensus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_security_fund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_token_trusteeship\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveToRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearBuyUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSplitIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"havePushBuyUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myNftEX\",\"outputs\":[{\"internalType\":\"contract MyNftEX\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensToAddToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processingLPHolderDividendTokenNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"refreshBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refreshTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAutoLPThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"meConsensusAddr\",\"type\":\"address\"}],\"name\":\"setMeConsensus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"myNftEXAddr\",\"type\":\"address\"}],\"name\":\"setMyNFTEX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardSupply\",\"type\":\"uint256\"}],\"name\":\"setRewardSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"splitTimesPerTran_\",\"type\":\"uint8\"}],\"name\":\"setSplitTimesPerTran\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapTokensAtAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"splitTimesPerTran\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waitAutoLPTokenNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waitLPHolderDividendTokenNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waitTrustenshipTokenNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MeToken", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000e0a65c62226e28bd14e99025acbc14cb24ef3fff", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c7bea59b45080eaf0d966a260cbf50e2c73609b7af90cd6b1121dd3983fa9008"}