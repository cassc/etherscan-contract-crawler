{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/DecubateMasterChef.sol\": {\r\n      \"content\": \"//** Decubate Staking Contract */\\n//** Author Vipin */\\n\\n//SPDX-License-Identifier: UNLICENSED\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./libraries/InterestHelper.sol\\\";\\nimport \\\"./interfaces/IDecubateMasterChef.sol\\\";\\n\\npragma solidity ^0.8.8;\\n\\ninterface IDecubateNFT {\\n  function walletOfOwner(address _owner)\\n    external\\n    view\\n    returns (uint256[] memory);\\n}\\n\\ncontract DecubateMasterChef is Ownable, InterestHelper, IDecubateMasterChef {\\n  using SafeMath for uint256;\\n  using SafeMath for uint16;\\n\\n  /**\\n   *\\n   * @dev PoolInfo reflects the info of each pools\\n   *\\n   * If APY is 12%, we provide 120 as input. lockPeriodInDays\\n   * would be the number of days which the claim is locked.\\n   * So if we want to lock claim for 1 month, lockPeriodInDays would be 30.\\n   *\\n   * @param {apy} Percentage of yield produced by the pool\\n   * @param {nft} Multiplier for apy if user holds nft\\n   * @param {lockPeriodInDays} Amount of time claim will be locked\\n   * @param {totalDeposit} Total deposit in the pool\\n   * @param {startDate} starting time of pool\\n   * @param {endDate} ending time of pool in unix timestamp\\n   * @param {minContrib} Minimum amount to be staked\\n   * @param {maxContrib} Maximum amount that can be staked\\n   * @param {hardCap} Maximum amount a pool can hold\\n   * @param {token} Token used as deposit/reward\\n   *\\n   */\\n\\n  struct Pool {\\n    uint256 apy;\\n    NFTMultiplier nft;\\n    uint256 lockPeriodInDays;\\n    uint256 totalDeposit;\\n    uint256 startDate;\\n    uint256 endDate;\\n    uint256 minContrib;\\n    uint256 maxContrib;\\n    uint256 hardCap;\\n    address token;\\n  }\\n\\n  IDecubateNFT public nftContract;\\n  address public compounderContract; //Auto compounder\\n  address private feeAddress; //Address which receives fee\\n  uint8 private feePercent; //Percentage of fee deducted (/1000)\\n\\n  mapping(uint256 => mapping(address => User)) public users;\\n\\n  Pool[] public poolInfo;\\n\\n  event Stake(address indexed addr, uint256 amount, uint256 time);\\n  event Claim(address indexed addr, uint256 amount, uint256 time);\\n  event Reinvest(address indexed addr, uint256 amount, uint256 time);\\n  event Unstake(address indexed addr, uint256 amount, uint256 time);\\n\\n  constructor(address _nft) {\\n    nftContract = IDecubateNFT(_nft);\\n    feeAddress = msg.sender;\\n    feePercent = 5;\\n  }\\n\\n  receive() external payable {\\n    revert(\\\"BNB deposit not supported\\\");\\n  }\\n\\n  /**\\n   *\\n   * @dev get length of the pools\\n   *\\n   * @return {uint256} length of the pools\\n   *\\n   */\\n  function poolLength() public view override returns (uint256) {\\n    return poolInfo.length;\\n  }\\n\\n  /**\\n   *\\n   * @dev get info of all pools\\n   *\\n   * @return {PoolInfo[]} Pool info struct\\n   *\\n   */\\n  function getPools() public view returns (Pool[] memory) {\\n    return poolInfo;\\n  }\\n\\n  /**\\n   *\\n   * @dev add new period to the pool, only available for owner\\n   *\\n   */\\n  function add(\\n    uint256 _apy,\\n    uint16 _multiplier,\\n    uint16 _startIdx,\\n    uint16 _endIdx,\\n    uint256 _lockPeriodInDays,\\n    bool _isUsed,\\n    uint256 _endDate,\\n    uint256 _minContrib,\\n    uint256 _maxContrib,\\n    uint256 _hardCap,\\n    address _token\\n  ) public override onlyOwner {\\n    poolInfo.push(\\n      Pool({\\n        apy: _apy,\\n        nft: NFTMultiplier({\\n          active: _isUsed,\\n          startIdx: _startIdx,\\n          endIdx: _endIdx,\\n          multiplier: _multiplier\\n        }),\\n        lockPeriodInDays: _lockPeriodInDays,\\n        totalDeposit: 0,\\n        startDate: block.timestamp,\\n        endDate: _endDate,\\n        minContrib: _minContrib,\\n        maxContrib: _maxContrib,\\n        hardCap: _hardCap,\\n        token: _token\\n      })\\n    );\\n\\n    _stake(poolLength() - 1, compounderContract, 0, false); //Mock deposit for compounder\\n  }\\n\\n  /**\\n   *\\n   * @dev update the given pool's Info\\n   *\\n   */\\n  function set(\\n    uint256 _pid,\\n    uint256 _apy,\\n    uint16 _multiplier,\\n    uint16 _startIdx,\\n    uint16 _endIdx,\\n    uint256 _lockPeriodInDays,\\n    bool _isUsed,\\n    uint256 _endDate,\\n    uint256 _minContrib,\\n    uint256 _maxContrib,\\n    uint256 _hardCap,\\n    address _token\\n  ) public override onlyOwner {\\n    require(_pid < poolLength(), \\\"Invalid pool Id\\\");\\n\\n    NFTMultiplier storage nft = poolInfo[_pid].nft;\\n\\n    poolInfo[_pid].apy = _apy;\\n    poolInfo[_pid].lockPeriodInDays = _lockPeriodInDays;\\n    poolInfo[_pid].endDate = _endDate;\\n    poolInfo[_pid].minContrib = _minContrib;\\n    poolInfo[_pid].maxContrib = _maxContrib;\\n    poolInfo[_pid].hardCap = _hardCap;\\n    poolInfo[_pid].token = _token;\\n\\n    nft.active = _isUsed;\\n    nft.multiplier = _multiplier;\\n    nft.startIdx = _startIdx;\\n    nft.endIdx = _endIdx;\\n  }\\n\\n  /**\\n   *\\n   * @dev depsoit tokens to staking for TOKEN allocation\\n   *\\n   * @param {_pid} Id of the pool\\n   * @param {_amount} Amount to be staked\\n   *\\n   * @return {bool} Status of stake\\n   *\\n   */\\n  function stake(uint256 _pid, uint256 _amount)\\n    external\\n    override\\n    returns (bool)\\n  {\\n    Pool memory pool = poolInfo[_pid];\\n    IERC20 token = IERC20(pool.token);\\n\\n    require(\\n      token.allowance(msg.sender, address(this)) >= _amount,\\n      \\\"Decubate : Set allowance first!\\\"\\n    );\\n\\n    bool success = token.transferFrom(msg.sender, address(this), _amount);\\n    require(success, \\\"Decubate : Transfer failed\\\");\\n\\n    reinvest(_pid);\\n\\n    _stake(_pid, msg.sender, _amount, false);\\n\\n    return success;\\n  }\\n\\n  function _stake(\\n    uint256 _pid,\\n    address _sender,\\n    uint256 _amount,\\n    bool _isReinvest\\n  ) internal {\\n    User storage user = users[_pid][_sender];\\n    Pool storage pool = poolInfo[_pid];\\n\\n    if (!_isReinvest && _sender != compounderContract) {\\n      require(\\n        _amount >= pool.minContrib &&\\n          _amount.add(user.total_invested) <= pool.maxContrib,\\n        \\\"Invalid amount!\\\"\\n      );\\n      user.depositTime = block.timestamp;\\n    }\\n\\n    require(pool.totalDeposit.add(_amount) <= pool.hardCap, \\\"Pool is full\\\");\\n\\n    uint256 stopDepo = pool.endDate.sub(pool.lockPeriodInDays.mul(1 days));\\n\\n    require(block.timestamp <= stopDepo, \\\"Staking is disabled for this pool\\\");\\n\\n    user.total_invested = user.total_invested.add(_amount);\\n    pool.totalDeposit = pool.totalDeposit.add(_amount);\\n    user.lastPayout = block.timestamp;\\n\\n    emit Stake(_sender, _amount, block.timestamp);\\n  }\\n\\n  /**\\n   *\\n   * @dev claim accumulated TOKEN reward for a single pool\\n   *\\n   * @param {_pid} pool identifier\\n   *\\n   * @return {bool} status of claim\\n   */\\n\\n  function claim(uint256 _pid) public override returns (bool) {\\n    require(canClaim(_pid, msg.sender), \\\"Reward still in locked state\\\");\\n\\n    _claim(_pid, msg.sender);\\n\\n    return true;\\n  }\\n\\n  /**\\n   *\\n   * @dev Reinvest accumulated TOKEN reward for a single pool\\n   *\\n   * @param {_pid} pool identifier\\n   *\\n   * @return {bool} status of reinvest\\n   */\\n\\n  function reinvest(uint256 _pid) public override returns (bool) {\\n    uint256 amount = payout(_pid, msg.sender);\\n    if (amount > 0) {\\n      _stake(_pid, msg.sender, amount, true);\\n      emit Reinvest(msg.sender, amount, block.timestamp);\\n    }\\n\\n    return true;\\n  }\\n\\n  /**\\n   *\\n   * @dev Reinvest accumulated TOKEN reward for all pools\\n   *\\n   * @return {bool} status of reinvest\\n   */\\n\\n  function reinvestAll() public override returns (bool) {\\n    uint256 len = poolInfo.length;\\n    for (uint256 pid = 0; pid < len; ++pid) {\\n      reinvest(pid);\\n    }\\n\\n    return true;\\n  }\\n\\n  /**\\n   *\\n   * @dev claim accumulated TOKEN reward from all pools\\n   *\\n   * Beware of gas fee!\\n   *\\n   */\\n  function claimAll() public override returns (bool) {\\n    uint256 len = poolInfo.length;\\n\\n    for (uint256 pid = 0; pid < len; ++pid) {\\n      if (canClaim(pid, msg.sender)) {\\n        _claim(pid, msg.sender);\\n      }\\n    }\\n\\n    return true;\\n  }\\n\\n  /**\\n   *\\n   * @dev check whether user can claim or not\\n   *\\n   * @param {_pid}  id of the pool\\n   * @param {_addr} address of the user\\n   *\\n   * @return {bool} Status of claim\\n   *\\n   */\\n\\n  function canClaim(uint256 _pid, address _addr)\\n    public\\n    view\\n    override\\n    returns (bool)\\n  {\\n    User storage user = users[_pid][_addr];\\n    Pool storage pool = poolInfo[_pid];\\n\\n    if (msg.sender == compounderContract) {\\n      return true;\\n    }\\n\\n    return (block.timestamp >=\\n      user.depositTime.add(pool.lockPeriodInDays.mul(1 days)));\\n  }\\n\\n  /**\\n   *\\n   * @dev check whether user have NFT multiplier\\n   *\\n   * @param _pid  id of the pool\\n   * @param _addr address of the user\\n   *\\n   * @return multi Value of multiplier\\n   *\\n   */\\n\\n  function calcMultiplier(uint256 _pid, address _addr)\\n    public\\n    view\\n    override\\n    returns (uint16 multi)\\n  {\\n    NFTMultiplier memory nft = poolInfo[_pid].nft;\\n\\n    if (\\n      nft.active && ownsCorrectNFT(_addr, _pid) && _addr != compounderContract\\n    ) {\\n      multi = nft.multiplier;\\n    } else {\\n      multi = 10;\\n    }\\n  }\\n\\n  function ownsCorrectNFT(address _addr, uint256 _pid)\\n    public\\n    view\\n    returns (bool)\\n  {\\n    NFTMultiplier memory nft = poolInfo[_pid].nft;\\n\\n    uint256[] memory ids = nftContract.walletOfOwner(_addr);\\n    for (uint256 i = 0; i < ids.length; i++) {\\n      if (ids[i] >= nft.startIdx && ids[i] <= nft.endIdx) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   *\\n   * @dev withdraw tokens from Staking\\n   *\\n   * @param {_pid} id of the pool\\n   * @param {_amount} amount to be unstaked\\n   *\\n   * @return {bool} Status of stake\\n   *\\n   */\\n  function unStake(uint256 _pid, uint256 _amount)\\n    public\\n    override\\n    returns (bool)\\n  {\\n    User storage user = users[_pid][msg.sender];\\n    Pool storage pool = poolInfo[_pid];\\n\\n    require(user.total_invested >= _amount, \\\"You don't have enough funds\\\");\\n\\n    require(canClaim(_pid, msg.sender), \\\"Stake still in locked state\\\");\\n\\n    _claim(_pid, msg.sender);\\n\\n    safeTOKENTransfer(pool.token, msg.sender, _amount);\\n\\n    pool.totalDeposit = pool.totalDeposit.sub(_amount);\\n    user.total_invested = user.total_invested.sub(_amount);\\n\\n    emit Unstake(msg.sender, _amount, block.timestamp);\\n\\n    return true;\\n  }\\n\\n  /**\\n   *\\n   * @dev Handle NFT boost of users from compounder\\n   *\\n   * @param {_pid} id of the pool\\n   * @param {_user} user eligible for NFT boost\\n   * @param {_rewardAmount} Amount of rewards generated\\n   *\\n   * @return {uint256} Status of stake\\n   *\\n   */\\n  function handleNFTMultiplier(\\n    uint256 _pid,\\n    address _user,\\n    uint256 _rewardAmount\\n  ) external override returns (uint256) {\\n    require(msg.sender == compounderContract, \\\"Only for compounder\\\");\\n    uint16 multi = calcMultiplier(_pid, _user);\\n\\n    uint256 multipliedAmount = _rewardAmount.mul(multi).div(10).sub(\\n      _rewardAmount\\n    );\\n\\n    if (multipliedAmount > 0) {\\n      safeTOKENTransfer(poolInfo[_pid].token, _user, multipliedAmount);\\n    }\\n\\n    return multipliedAmount;\\n  }\\n\\n  function _claim(uint256 _pid, address _addr) internal {\\n    User storage user = users[_pid][_addr];\\n    Pool memory pool = poolInfo[_pid];\\n\\n    uint256 amount = payout(_pid, _addr);\\n\\n    if (amount > 0) {\\n      user.total_withdrawn = user.total_withdrawn.add(amount);\\n\\n      uint256 feeAmount = amount.mul(feePercent).div(1000);\\n\\n      safeTOKENTransfer(pool.token, feeAddress, feeAmount);\\n\\n      amount = amount.sub(feeAmount);\\n\\n      safeTOKENTransfer(pool.token, _addr, amount);\\n\\n      user.lastPayout = block.timestamp;\\n\\n      user.totalClaimed = user.totalClaimed.add(amount);\\n    }\\n\\n    emit Claim(_addr, amount, block.timestamp);\\n  }\\n\\n  function payout(uint256 _pid, address _addr)\\n    public\\n    view\\n    override\\n    returns (uint256 value)\\n  {\\n    User storage user = users[_pid][_addr];\\n    Pool storage pool = poolInfo[_pid];\\n\\n    uint256 from = user.lastPayout > user.depositTime\\n      ? user.lastPayout\\n      : user.depositTime;\\n    uint256 to = block.timestamp > pool.endDate\\n      ? pool.endDate\\n      : block.timestamp;\\n\\n    uint256 multiplier = calcMultiplier(_pid, _addr);\\n\\n    if (from < to) {\\n      uint256 rayValue = yearlyRateToRay((pool.apy * 10**18) / 1000);\\n      value = (accrueInterest(user.total_invested, rayValue, to.sub(from))).sub(\\n          user.total_invested\\n        );\\n    }\\n\\n    value = value.mul(multiplier).div(10);\\n\\n    return value;\\n  }\\n\\n  /**\\n   *\\n   * @dev safe TOKEN transfer function, require to have enough TOKEN to transfer\\n   *\\n   */\\n  function safeTOKENTransfer(\\n    address _token,\\n    address _to,\\n    uint256 _amount\\n  ) internal {\\n    IERC20 token = IERC20(_token);\\n    uint256 tokenBal = token.balanceOf(address(this));\\n\\n    if (_amount > tokenBal) {\\n      token.transfer(_to, tokenBal);\\n    } else {\\n      token.transfer(_to, _amount);\\n    }\\n  }\\n\\n  /**\\n   *\\n   * @dev update fee values\\n   *\\n   */\\n  function updateFeeValues(uint8 _feePercent, address _feeWallet)\\n    external\\n    onlyOwner\\n  {\\n    feePercent = _feePercent;\\n    feeAddress = _feeWallet;\\n  }\\n\\n  /**\\n   *\\n   * @dev update compounder contract\\n   *\\n   */\\n  function updateCompounder(address _compounder) external override onlyOwner {\\n    compounderContract = _compounder;\\n  }\\n\\n  /**\\n   *\\n   * @dev Allow owner to transfer token from contract\\n   *\\n   * @param {address} contract address of corresponding token\\n   * @param {uint256} amount of token to be transferred\\n   *\\n   * This is a generalized function which can be used to transfer any accidentally\\n   * sent (including DCB) out of the contract to wowner\\n   *\\n   */\\n  function transferToken(address _addr, uint256 _amount)\\n    external\\n    onlyOwner\\n    returns (bool)\\n  {\\n    IERC20 token = IERC20(_addr);\\n    bool success = token.transfer(address(owner()), _amount);\\n    return success;\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/libraries/InterestHelper.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.8;\\n\\ncontract DSMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        return x <= y ? x : y;\\n    }\\n    function max(uint x, uint y) internal pure returns (uint z) {\\n        return x >= y ? x : y;\\n    }\\n    function imin(int x, int y) internal pure returns (int z) {\\n        return x <= y ? x : y;\\n    }\\n    function imax(int x, int y) internal pure returns (int z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    uint constant WAD = 10 ** 18;\\n    uint constant RAY = 10 ** 27;\\n\\n    function wmul(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n    function rmul(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n\\n    // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\\n    //\\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\\n    //\\n    // These facts are why it works:\\n    //\\n    //  If n is even, then x^n = (x^2)^(n/2).\\n    //  If n is odd,  then x^n = x * x^(n-1),\\n    //   and applying the equation for even x gives\\n    //    x^n = x * (x^2)^((n-1) / 2).\\n    //\\n    //  Also, EVM division is flooring and\\n    //    floor[(n-1) / 2] = floor[n / 2].\\n    //\\n    function rpow(uint x, uint n) internal pure returns (uint z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rmul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rmul(z, x);\\n            }\\n        }\\n    }\\n}\\n\\n// Using DSMath from DappHub https://github.com/dapphub/ds-math\\n// More info on DSMath and fixed point arithmetic in Solidity:\\n// https://medium.com/dapphub/introducing-ds-math-an-innovative-safe-math-library-d58bc88313da\\n\\n/**\\n* @title Interest\\n* @author Nick Ward\\n* @dev Uses DSMath's wad and ray math to implement (approximately)\\n* continuously compounding interest by calculating discretely compounded\\n* interest compounded every second.\\n*/\\ncontract InterestHelper is DSMath {\\n\\n    //// Fixed point scale factors\\n    // wei -> the base unit\\n    // wad -> wei * 10 ** 18. 1 ether = 1 wad, so 0.5 ether can be used\\n    //      to represent a decimal wad of 0.5\\n    // ray -> wei * 10 ** 27\\n\\n    // Go from wad (10**18) to ray (10**27)\\n    function wadToRay(uint _wad) internal pure returns (uint) {\\n        return mul(_wad, 10 ** 9);\\n    }\\n\\n    // Go from wei to ray (10**27)\\n    function weiToRay(uint _wei) internal pure returns (uint) {\\n        return mul(_wei, 10 ** 27);\\n    } \\n\\n\\n    /**\\n    * @dev Uses an approximation of continuously compounded interest \\n    * (discretely compounded every second)\\n    * @param _principal The principal to calculate the interest on.\\n    *   Accepted in wei.\\n    * @param _rate The interest rate. Accepted as a ray representing \\n    *   1 + the effective interest rate per second, compounded every \\n    *   second. As an example:\\n    *   I want to accrue interest at a nominal rate (i) of 5.0% per year \\n    *   compounded continuously. (Effective Annual Rate of 5.127%).\\n    *   This is approximately equal to 5.0% per year compounded every \\n    *   second (to 8 decimal places, if max precision is essential, \\n    *   calculate nominal interest per year compounded every second from \\n    *   your desired effective annual rate). Effective Rate Per Second = \\n    *   Nominal Rate Per Second compounded every second = Nominal Rate \\n    *   Per Year compounded every second * conversion factor from years \\n    *   to seconds\\n    *   Effective Rate Per Second = 0.05 / (365 days/yr * 86400 sec/day) = 1.5854895991882 * 10 ** -9\\n    *   The value we want to send this function is \\n    *   1 * 10 ** 27 + Effective Rate Per Second * 10 ** 27\\n    *   = 1000000001585489599188229325\\n    *   This will return 5.1271096334354555 Dai on a 100 Dai principal \\n    *   over the course of one year (31536000 seconds)\\n    * @param _age The time period over which to accrue interest. Accepted\\n    *   in seconds.\\n    * @return The new principal as a wad. Equal to original principal + \\n    *   interest accrued\\n    */\\n    function accrueInterest(uint _principal, uint _rate, uint _age) public pure returns (uint) {\\n        return rmul(_principal, rpow(_rate, _age));\\n    }\\n\\n\\n    /**\\n    * @dev Takes in the desired nominal interest rate per year, compounded\\n    *   every second (this is approximately equal to nominal interest rate\\n    *   per year compounded continuously). Returns the ray value expected\\n    *   by the accrueInterest function \\n    * @param _rateWad A wad of the desired nominal interest rate per year,\\n    *   compounded continuously. Converting from ether to wei will effectively\\n    *   convert from a decimal value to a wad. So 5% rate = 0.05\\n    *   should be input as yearlyRateToRay( 0.05 ether )\\n    * @return 1 * 10 ** 27 + Effective Interest Rate Per Second * 10 ** 27\\n    */\\n    function yearlyRateToRay(uint _rateWad) public pure returns (uint) {\\n        return add(wadToRay(1 ether), rdiv(wadToRay(_rateWad), weiToRay(365*86400)));\\n    }\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IDecubateMasterChef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\ninterface IDecubateMasterChef {\\n  struct NFTMultiplier {\\n    bool active;\\n    uint16 multiplier;\\n    uint16 startIdx;\\n    uint16 endIdx;\\n  }\\n\\n  /**\\n   *\\n   * @dev User reflects the info of each user\\n   *\\n   *\\n   * @param {total_invested} how many tokens the user staked\\n   * @param {total_withdrawn} how many tokens withdrawn so far\\n   * @param {lastPayout} time at which last claim was done\\n   * @param {depositTime} Time of last deposit\\n   * @param {totalClaimed} Total claimed by the user\\n   *\\n   */\\n  struct User {\\n    uint256 total_invested;\\n    uint256 total_withdrawn;\\n    uint256 lastPayout;\\n    uint256 depositTime;\\n    uint256 totalClaimed;\\n  }\\n\\n  function poolInfo(uint256)\\n    external\\n    view\\n    returns (\\n      uint256 apy,\\n      NFTMultiplier memory nft,\\n      uint256 lockPeriodInDays,\\n      uint256 totalDeposit,\\n      uint256 startDate,\\n      uint256 endDate,\\n      uint256 minContrib,\\n      uint256 maxContrib,\\n      uint256 hardCap,\\n      address token\\n    );\\n\\n  function users(uint256, address)\\n    external\\n    view\\n    returns (\\n      uint256 total_invested,\\n      uint256 total_withdrawn,\\n      uint256 lastPayout,\\n      uint256 depositTime,\\n      uint256 totalClaimed\\n    );\\n\\n  function poolLength() external view returns (uint256);\\n\\n  function add(\\n    uint256 _apy,\\n    uint16 _multiplier,\\n    uint16 startIdx,\\n    uint16 endIdx,\\n    uint256 _lockPeriodInDays,\\n    bool _isUsed,\\n    uint256 _endDate,\\n    uint256 _minContrib,\\n    uint256 _maxContrib,\\n    uint256 _hardCap,\\n    address token\\n  ) external;\\n\\n  function set(\\n    uint256 _pid,\\n    uint256 _apy,\\n    uint16 _multiplier,\\n    uint16 startIdx,\\n    uint16 endIdx,\\n    uint256 _lockPeriodInDays,\\n    bool _isUsed,\\n    uint256 _endDate,\\n    uint256 _minContrib,\\n    uint256 _maxContrib,\\n    uint256 _hardCap,\\n    address token\\n  ) external;\\n\\n  function stake(uint256 _pid, uint256 _amount) external returns (bool);\\n\\n  function claim(uint256 _pid) external returns (bool);\\n\\n  function reinvest(uint256 _pid) external returns (bool);\\n\\n  function reinvestAll() external returns (bool);\\n\\n  function claimAll() external returns (bool);\\n\\n  function canClaim(uint256 _pid, address _addr) external view returns (bool);\\n\\n  function calcMultiplier(uint256 _pid, address _addr)\\n    external\\n    view\\n    returns (uint16);\\n\\n  function unStake(uint256 _pid, uint256 _amount) external returns (bool);\\n\\n  function handleNFTMultiplier(uint256 _pid, address _user, uint256 _rewardAmount) external returns (uint256) ;\\n\\n  function updateCompounder(address _compounder) external;\\n\\n  function payout(uint256 _pid, address _addr)\\n    external\\n    view\\n    returns (uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 9999\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_age\",\"type\":\"uint256\"}],\"name\":\"accrueInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_multiplier\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_startIdx\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_endIdx\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_lockPeriodInDays\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isUsed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minContrib\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxContrib\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hardCap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"calcMultiplier\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"multi\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compounderContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPools\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"multiplier\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"startIdx\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"endIdx\",\"type\":\"uint16\"}],\"internalType\":\"struct IDecubateMasterChef.NFTMultiplier\",\"name\":\"nft\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriodInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minContrib\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxContrib\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct DecubateMasterChef.Pool[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"name\":\"handleNFTMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftContract\",\"outputs\":[{\"internalType\":\"contract IDecubateNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"ownsCorrectNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"multiplier\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"startIdx\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"endIdx\",\"type\":\"uint16\"}],\"internalType\":\"struct IDecubateMasterChef.NFTMultiplier\",\"name\":\"nft\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriodInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minContrib\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxContrib\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"reinvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvestAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_multiplier\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_startIdx\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_endIdx\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_lockPeriodInDays\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isUsed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minContrib\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxContrib\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hardCap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_compounder\",\"type\":\"address\"}],\"name\":\"updateCompounder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_feePercent\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_feeWallet\",\"type\":\"address\"}],\"name\":\"updateFeeValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rateWad\",\"type\":\"uint256\"}],\"name\":\"yearlyRateToRay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DecubateMasterChef", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "000000000000000000000000302647f4c3d83f4498c4e11b19fdb3165eb7ea1b", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}