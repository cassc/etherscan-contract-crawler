{"SourceCode": "pragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract TokenPurchase {\r\n    address public owner;\r\n    uint256 public fee;\r\n    address public coldwallet;\r\n    address public usdtTokenAddress;\r\n    event Purchase(address indexed buyer, string product, address to, uint256 amount);\r\n    event TransferTokens(address indexed recipient, address token, uint256 amount);\r\n    event TransferETH(address indexed recipient, uint256 amount);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        fee = 38;\r\n        coldwallet = msg.sender;\r\n        usdtTokenAddress = 0x55d398326f99059fF775485246999027B3197955;\r\n    }\r\n    function setFee(uint256 _fee) external {\r\n        require(msg.sender == owner, \"Only owner can set fee\");\r\n        require(_fee <= 100, \"Invalid fee percentage\");\r\n        fee = _fee;\r\n    }\r\n    function setUsdtTokenAddress(address _usdtTokenAddress) external {\r\n        require(msg.sender == owner, \"Only owner can set coldwallet\");\r\n        usdtTokenAddress = _usdtTokenAddress;\r\n    }\r\n    function setColdwallet(address _coldwallet) external {\r\n        require(msg.sender == owner, \"Only owner can set coldwallet\");\r\n        coldwallet = _coldwallet;\r\n    }\r\n    function TokenToGas(string memory product, address to, uint256 amount) external {\r\n        address buyer = msg.sender;\r\n        IERC20 usdtToken = IERC20(usdtTokenAddress);\r\n        uint256 allowance = usdtToken.allowance(buyer, address(this));\r\n        require(allowance >= amount, \"Insufficient allowance\");\r\n        bool transferSuccess = usdtToken.transferFrom(buyer, address(this), amount);\r\n        require(transferSuccess, \"USDT transfer failed\");\r\n        transferSuccess = usdtToken.transfer(coldwallet, amount);\r\n        require(transferSuccess, \"USDT transfer to coldwallet failed\");\r\n        emit Purchase(buyer, product, to, amount);\r\n    }\r\n\r\n    function GasToToken(string memory product, address to, uint256 amount) external payable {\r\n        address buyer = msg.sender;\r\n        require(amount > 0, \"Insufficient amount\");\r\n        require(msg.value == amount, \"Incorrect ETH amount\");\r\n        payable(coldwallet).transfer(amount);\r\n        uint256 discountedAmount = (amount * (100 - fee)) / 100;\r\n        emit Purchase(buyer, product, to, discountedAmount);\r\n    }\r\n    \r\n    function transferTokens(address token, address recipient, uint256 amount) external {\r\n        require(msg.sender == owner, \"Only owner can transfer tokens\");\r\n        \r\n        IERC20 tokenContract = IERC20(token);\r\n        uint256 balance = tokenContract.balanceOf(address(this));\r\n        require(balance >= amount, \"Insufficient token balance\");\r\n        bool transferSuccess = tokenContract.transfer(recipient, amount);\r\n        require(transferSuccess, \"Token transfer failed\");\r\n        emit TransferTokens(recipient, token, amount);\r\n    }\r\n    \r\n    function transferETH(address payable recipient, uint256 amount) external {\r\n        require(msg.sender == owner, \"Only owner can transfer ETH\");\r\n        require(address(this).balance >= amount, \"Insufficient ETH balance\");\r\n        recipient.transfer(amount);\r\n        emit TransferETH(recipient, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"product\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferTokens\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"product\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GasToToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"product\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenToGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coldwallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coldwallet\",\"type\":\"address\"}],\"name\":\"setColdwallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdtTokenAddress\",\"type\":\"address\"}],\"name\":\"setUsdtTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TokenPurchase", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a5757e1abdaf099bf93fcd9b0e24478596f0ed3bf2b61e19d27e1ba12c1a5078"}