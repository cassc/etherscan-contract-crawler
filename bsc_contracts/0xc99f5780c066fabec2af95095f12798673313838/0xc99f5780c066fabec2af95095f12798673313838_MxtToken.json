{"SourceCode": "pragma solidity ^0.8.6;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\ninterface LockDrop {\r\n    function findReferrer(address _user) external view returns(address _referrer);\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() {}\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor ()  {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    \r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    \r\n}\r\n\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n/**\r\n * @title AdminRole\r\n */\r\ncontract CommunityRole is Context, Ownable {\r\n    using Roles for Roles.Role;\r\n\r\n    Roles.Role private _communityAdmins;\r\n\r\n    constructor () {\r\n        _addCommunity(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwnerCommunity() {\r\n        require(isCommunity(_msgSender()) || isOwner(), \"no caller\");\r\n        _;\r\n    }\r\n\r\n    function activeAccount(address account) public onlyOwnerCommunity {\r\n        _addCommunity(account);\r\n    }\r\n\r\n    function removeCommunity(address account) public onlyOwnerCommunity {\r\n        _communityAdmins.remove(account);\r\n    }\r\n    \r\n    function isCommunity(address account) private view returns (bool) {\r\n        return _communityAdmins.has(account);\r\n    }\r\n\r\n    function _addCommunity(address account) internal {\r\n        _communityAdmins.add(account);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract MxtToken is IERC20, CommunityRole {\r\n    using SafeMath for uint256;\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping (address => bool) isDividendExempt;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    \r\n\r\n    uint256 private _tTotal = 10 * 10**8 * 10**18;\r\n\r\n    uint256 private _tFeeTotal;\r\n    string private _name = \"MXT\";\r\n    string private _symbol = \"MXT\";\r\n    uint8 private _decimals = 18;\r\n    \r\n\r\n    uint public minHoldAmount = 10 * 10**18;\r\n    \r\n\r\n    address public deadWallet = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    address private USDT = 0x55d398326f99059fF775485246999027B3197955;\r\n    \r\n\r\n    uint256 private _burnFee = 200;\r\n    uint256 private _previousBurnFee;\r\n\r\n\r\n    uint256 private _lpFee = 200;\r\n    uint256 private _previousLpFee;\r\n\r\n\r\n    uint256 private  _miningFee = 200;\r\n    uint256 private _previousMiningFeeFee;\r\n\r\n\r\n    uint256 private _backflowFee = 100;\r\n    uint256 private _previousBackflowFee;\r\n    \r\n\r\n    uint256 private _inviterFee = 800;\r\n    uint256 private _previousInviterFee;\r\n    \r\n\r\n    LiquidityBackHelper public liquidityBackHelper;\r\n\r\n    TokenDividendTracker public dividendTracker;\r\n\r\n\r\n    address lpRewardReceiveAddress_ = deadWallet;\r\n\r\n    address miningAddress = 0x6c7363dbE56100e5F61074F1F4Da5a8165F7a8C2;\r\n    \r\n\r\n    bool private swapping;\r\n\r\n    uint256 public swapTokensAtAmount;\r\n    \r\n\r\n    uint256 public amountLiquidityFee;  \r\n\r\n    uint256 public amountLpRewardFee;\r\n\r\n    uint256 public amountMiningRewardFee;\r\n    \r\n\r\n    uint256 distributorGas = 500000;\r\n\r\n    uint256 public minPeriod = 1 hours;\r\n\r\n\r\n    address public airDropAddr = 0xB44Ef24A4109678DD850B3f37E3071D151020701;\r\n    \r\n\r\n    bool _isBurning;\r\n\r\n    mapping(address=>bool) _digList;\r\n    \r\n\r\n    address private fromAddress;\r\n    address private toAddress;\r\n    \r\n    constructor() {\r\n        _tOwned[msg.sender] = _tTotal;\r\n        swapTokensAtAmount = 1000 * 1e18;\r\n        \r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(USDT,address(this));\r\n\r\n        //set the rest of the contract variables\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n        \r\n\r\n        liquidityBackHelper = new LiquidityBackHelper(address(this), USDT, address(_uniswapV2Router), lpRewardReceiveAddress_);\r\n        \r\n\r\n        dividendTracker = new TokenDividendTracker(_uniswapV2Pair, USDT);\r\n\r\n\r\n        _isBurning = true;\r\n        setDigList(msg.sender, true);\r\n\r\n        //exclude owner and this contract from fee\r\n        _isExcludedFromFee[msg.sender] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[address(deadWallet)] = true;\r\n        _isExcludedFromFee[address(liquidityBackHelper)] = true;\r\n        _isExcludedFromFee[address(dividendTracker)] = true;\r\n        \r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[address(deadWallet)] = true;\r\n        isDividendExempt[address(liquidityBackHelper)] = true;\r\n        isDividendExempt[address(dividendTracker)] = true;\r\n\r\n        emit Transfer(address(0), msg.sender, _tTotal);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            msg.sender,\r\n            _allowances[sender][msg.sender].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function allFees() public view returns (uint256,uint256,uint256,uint256,uint256) {\r\n        return (_burnFee,_lpFee,_miningFee,_backflowFee,_inviterFee);\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwnerCommunity {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwnerCommunity {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    function removeAllFee() private {\r\n        _previousBurnFee = _burnFee;\r\n        _previousLpFee = _lpFee;\r\n        _previousInviterFee = _inviterFee;\r\n        _previousMiningFeeFee = _miningFee;\r\n        _previousBackflowFee = _backflowFee;\r\n\r\n        _burnFee = 0;\r\n        _lpFee = 0;\r\n        _inviterFee = 0;\r\n        _miningFee = 0;\r\n        _backflowFee = 0;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        _burnFee = _previousBurnFee;\r\n        _lpFee = _previousLpFee;\r\n        _inviterFee = _previousInviterFee;\r\n        _miningFee = _previousMiningFeeFee;\r\n        _backflowFee = _previousBackflowFee;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if(_isBurning && from == uniswapV2Pair && !_digList[to]){\r\n            revert(\"Can not buy\");\r\n        }\r\n        \r\n        bool canSwap = amountLiquidityFee >= swapTokensAtAmount || amountLpRewardFee >= swapTokensAtAmount || amountMiningRewardFee >= swapTokensAtAmount;\r\n        if(canSwap &&\r\n            !swapping &&\r\n            from != uniswapV2Pair\r\n        ) {\r\n            swapping = true;\r\n\r\n            if(amountLiquidityFee >= swapTokensAtAmount){\r\n                swapAndLiquify(amountLiquidityFee);\r\n                amountLiquidityFee = 0;\r\n            }\r\n\r\n            if(amountLpRewardFee >= swapTokensAtAmount){\r\n                swapTokensForUSDT(amountLpRewardFee,address(dividendTracker));\r\n                amountLpRewardFee = 0;\r\n            }\r\n\r\n            if(amountMiningRewardFee >= swapTokensAtAmount){\r\n                swapTokensForUSDT(amountMiningRewardFee,miningAddress);\r\n                amountMiningRewardFee = 0;\r\n            }\r\n            swapping = false;\r\n        }\r\n\r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = !swapping;\r\n\r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to] || to == uniswapV2Pair) {\r\n            takeFee = false;\r\n        }\r\n        \r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n        \r\n\r\n        if(fromAddress == address(0))fromAddress = from;\r\n        if(toAddress == address(0))toAddress = to;\r\n        if(!isDividendExempt[fromAddress] && fromAddress != uniswapV2Pair ) try dividendTracker.setShare(fromAddress) {} catch {}\r\n        if(!isDividendExempt[toAddress] && toAddress != uniswapV2Pair ) try dividendTracker.setShare(toAddress) {} catch {}\r\n        fromAddress = from;\r\n        toAddress = to;  \r\n        \r\n        if(!swapping && \r\n            from != owner() &&\r\n            to != owner() &&\r\n            from !=address(this) &&\r\n            dividendTracker.LPRewardLastSendTime().add(minPeriod) <= block.timestamp\r\n        ) {\r\n            try dividendTracker.process(distributorGas) {} catch {}    \r\n        }\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        if (!takeFee) removeAllFee();\r\n        _transferStandard(sender, recipient, amount);\r\n        if (!takeFee) restoreAllFee();\r\n    }\r\n    \r\n    function _takeBurnFee(\r\n        address sender,\r\n        uint256 tAmount\r\n    ) private {\r\n        if(_burnFee == 0) return;\r\n\r\n        if(_tFeeTotal >= 799900000 * 10**18) _burnFee = 0;\r\n        _tOwned[deadWallet] = _tOwned[deadWallet].add(tAmount);\r\n        _tFeeTotal = _tFeeTotal.add(tAmount);\r\n        emit Transfer(sender, deadWallet, tAmount);\r\n    }\r\n\r\n    function _takeLPFee(address sender,uint256 tAmount) private {\r\n        if (_lpFee == 0) return;\r\n        _tOwned[address(this)] = _tOwned[address(this)].add(tAmount);\r\n        amountLpRewardFee += tAmount;\r\n        emit Transfer(sender, address(this), tAmount);\r\n    }\r\n    \r\n    function _takeLiquidityFee(address sender,uint256 tAmount) private {\r\n        if (_backflowFee == 0) return;\r\n        _tOwned[address(this)] = _tOwned[address(this)].add(tAmount);\r\n        amountLiquidityFee += tAmount;\r\n        emit Transfer(sender, address(this), tAmount);\r\n    }\r\n    \r\n    function _takeMiningFee(address sender,uint256 tAmount) private {\r\n        if (_miningFee == 0) return;\r\n        _tOwned[address(this)] = _tOwned[address(this)].add(tAmount);\r\n        amountMiningRewardFee += tAmount;\r\n        emit Transfer(sender, address(this), tAmount);\r\n    }\r\n\r\n    function _takeInviterFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        if (_inviterFee == 0) return;\r\n        address cur;\r\n        if (sender == uniswapV2Pair) {\r\n            cur = recipient;\r\n        } else if (recipient == uniswapV2Pair) {\r\n            cur = sender;\r\n        } else {\r\n            _tOwned[address(this)] = _tOwned[address(this)].add(tAmount.div(10000).mul(_inviterFee));\r\n            amountLpRewardFee += tAmount.div(10000).mul(_inviterFee);\r\n            emit Transfer(sender, address(this), tAmount.div(10000).mul(_inviterFee));\r\n            return;\r\n        }\r\n        \r\n        uint256 accurRate;\r\n        for (int256 i = 0; i < 10; i++) {\r\n            uint256 rate;\r\n            if (i == 0) {\r\n                rate = 300;\r\n            } else if(i == 1){\r\n                rate = 100;\r\n            } else if(i == 2){\r\n                rate = 70;\r\n            } else if(i == 9){\r\n                rate = 150;\r\n            } else {\r\n                rate = 30;\r\n            }\r\n            cur = findReferrer(cur);\r\n            if (cur == address(0) || cur == deadWallet) {\r\n                break;\r\n            }\r\n\r\n            if (balanceOf(cur) < minHoldAmount) {\r\n                continue;\r\n            }\r\n            accurRate = accurRate.add(rate);\r\n\r\n            uint256 curTAmount = tAmount.div(10000).mul(rate);\r\n            emit Transfer(sender, cur, curTAmount);\r\n            _tOwned[cur] = _tOwned[cur].add(curTAmount);\r\n        }\r\n        \r\n\r\n        if(accurRate != _inviterFee){\r\n            uint256 balance = tAmount.div(10000).mul(_inviterFee.sub(accurRate));\r\n            _takeBurnFee(sender,balance);\r\n        }\r\n    }\r\n    \r\n\r\n    function findReferrer(address _cur) public view returns(address _referrer) {\r\n        if(airDropAddr != address(0)) {\r\n            _referrer = LockDrop(airDropAddr).findReferrer(_cur);\r\n        }\r\n    }\r\n\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n\r\n        _takeBurnFee(sender, tAmount.div(10000).mul(_burnFee));\r\n\r\n         _takeMiningFee(sender, tAmount.div(10000).mul(_miningFee));\r\n\r\n        _takeInviterFee(sender, recipient, tAmount);\r\n\r\n        _takeLPFee(sender, tAmount.div(10000).mul(_lpFee));\r\n\r\n        _takeLiquidityFee(sender, tAmount.div(10000).mul(_backflowFee));\r\n\r\n        uint256 recipientRate = 10000 - _burnFee -_lpFee - _inviterFee - _miningFee - _backflowFee;\r\n        _tOwned[recipient] = _tOwned[recipient].add(tAmount.div(10000).mul(recipientRate));\r\n        emit Transfer(sender, recipient, tAmount.div(10000).mul(recipientRate));\r\n    }\r\n    \r\n\r\n    function swapAndLiquify(uint256 tokens) private {\r\n        uint256 half = tokens.div(2);\r\n        uint256 otherHalf = tokens.sub(half);\r\n\r\n        uint256 initialBalance = IERC20(USDT).balanceOf(address(liquidityBackHelper));\r\n        swapTokensForUSDT(half, address(liquidityBackHelper));\r\n        uint256 newBalance = IERC20(USDT).balanceOf(address(liquidityBackHelper)).sub(initialBalance);\r\n\r\n        _tOwned[address(liquidityBackHelper)] = _tOwned[address(liquidityBackHelper)].add(otherHalf);\r\n        emit Transfer(address(this), address(liquidityBackHelper), otherHalf);\r\n        \r\n        liquidityBackHelper.addLiquidity(otherHalf, newBalance);\r\n    }\r\n\r\n    function swapTokensForUSDT(uint256 tokenAmount, address to) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = USDT;\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            to,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function setLiquidityReceiveAddress(address newAddress) public onlyOwnerCommunity {\r\n        liquidityBackHelper.setLiquidityReceiveAddress(newAddress);\r\n    }\r\n\r\n    function liquidityReceiveAddress() public view returns(address) {\r\n        return liquidityBackHelper.liquidityReceiveAddress();\r\n    }\r\n    \r\n\r\n    function setMinHoldAmount(uint256 amount) public onlyOwnerCommunity {\r\n        minHoldAmount = amount;\r\n    }\r\n\r\n    function setSwapTokensAtAmount(uint256 amount) public onlyOwnerCommunity {\r\n        swapTokensAtAmount = amount;\r\n    }\r\n\r\n    function setDigList(address account, bool _state) public onlyOwnerCommunity {\r\n        _digList[account] = _state;\r\n    }\r\n\r\n    function setAllowtransfer(bool allow) public onlyOwnerCommunity {\r\n\t\t _isBurning = allow;\r\n\t}\r\n\r\n    function setAirDropAddr(address _addr) public onlyOwnerCommunity {\r\n        airDropAddr = _addr;\r\n    }\r\n\r\n    function setMiningAddress(address _addr) public onlyOwnerCommunity {\r\n        miningAddress = _addr;\r\n    }\r\n\r\n    function setMinPeriod(uint256 number) public onlyOwnerCommunity {\r\n        minPeriod = number;\r\n    }\r\n\r\n    function resetLPRewardLastSendTime() public onlyOwnerCommunity {\r\n        dividendTracker.resetLPRewardLastSendTime();\r\n    }\r\n    \r\n    function updateDistributorGas(uint256 newValue) public onlyOwnerCommunity {\r\n        require(newValue >= 100000 && newValue <= 500000, \"distributorGas must be between 200,000 and 500,000\");\r\n        require(newValue != distributorGas, \"Cannot update distributorGas to same value\");\r\n        distributorGas = newValue;\r\n    }\r\n\r\n}\r\n\r\ncontract TokenDividendTracker is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address[] public shareholders;\r\n    uint256 public currentIndex;  \r\n    mapping(address => bool) private _updated;\r\n    mapping (address => uint256) public shareholderIndexes;\r\n\r\n    address public  uniswapV2Pair;\r\n    address public lpRewardToken;\r\n\r\n    uint256 public LPRewardLastSendTime;\r\n\r\n    constructor(address uniswapV2Pair_, address lpRewardToken_){\r\n        uniswapV2Pair = uniswapV2Pair_;\r\n        lpRewardToken = lpRewardToken_;\r\n    }\r\n\r\n    function resetLPRewardLastSendTime() public onlyOwner {\r\n        LPRewardLastSendTime = 0;\r\n    }\r\n\r\n\r\n    function process(uint256 gas) external onlyOwner {\r\n        uint256 shareholderCount = shareholders.length;\t\r\n\r\n        if(shareholderCount == 0) return;\r\n        uint256 nowbanance = IERC20(lpRewardToken).balanceOf(address(this));\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n\r\n        while(gasUsed < gas && iterations < shareholderCount) {\r\n            if(currentIndex >= shareholderCount){\r\n                currentIndex = 0;\r\n                LPRewardLastSendTime = block.timestamp;\r\n                return;\r\n            }\r\n\r\n            uint256 amount = nowbanance.mul(IERC20(uniswapV2Pair).balanceOf(shareholders[currentIndex])).div(IERC20(uniswapV2Pair).totalSupply());\r\n            if( amount == 0) {\r\n                currentIndex++;\r\n                iterations++;\r\n                return;\r\n            }\r\n            if(IERC20(lpRewardToken).balanceOf(address(this))  < amount ) return;\r\n            IERC20(lpRewardToken).transfer(shareholders[currentIndex], amount);\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n    \r\n\r\n    function setShare(address shareholder) external onlyOwner {\r\n        if(_updated[shareholder] ){\r\n            if(IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) quitShare(shareholder);           \r\n            return;  \r\n        }\r\n        if(IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) return;\r\n        addShareholder(shareholder);\r\n        _updated[shareholder] = true;\r\n    }\r\n\r\n    function quitShare(address shareholder) internal {\r\n        removeShareholder(shareholder);   \r\n        _updated[shareholder] = false; \r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n    \r\n}\r\n\r\ncontract LiquidityBackHelper is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address public token;\r\n    address public usdt;\r\n    address public router;\r\n    address public liquidityReceiveAddress;\r\n\r\n    constructor(address token_, address usdt_, address router_, address liquidityReceiveAddress_){\r\n        token = token_;\r\n        usdt = usdt_;\r\n        router = router_;\r\n        liquidityReceiveAddress = liquidityReceiveAddress_;\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 usdtAmount) external onlyOwner {\r\n        IERC20(token).approve(address(router), tokenAmount);\r\n        IERC20(usdt).approve(address(router), usdtAmount);\r\n        IUniswapV2Router02(router).addLiquidity(\r\n            token,\r\n            usdt,\r\n            tokenAmount,\r\n            usdtAmount,\r\n            0, \r\n            0, \r\n            liquidityReceiveAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function setLiquidityReceiveAddress(address newAddress) public onlyOwner {\r\n        liquidityReceiveAddress = newAddress;\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"activeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airDropAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLpRewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMiningRewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract TokenDividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cur\",\"type\":\"address\"}],\"name\":\"findReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityBackHelper\",\"outputs\":[{\"internalType\":\"contract LiquidityBackHelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityReceiveAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minHoldAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeCommunity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetLPRewardLastSendTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setAirDropAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"setAllowtransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setDigList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setLiquidityReceiveAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinHoldAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"setMinPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setMiningAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateDistributorGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MxtToken", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e78e218713e59491779b2236bf049b6286139484bb301b894f034a80fa8ae6db"}