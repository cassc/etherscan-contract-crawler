{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\ninterface TokenLike {\r\n    function transferFrom(address,address,uint) external;\r\n    function transfer(address,uint) external;\r\n    function balanceOf(address) external view returns (uint256);\r\n}\r\ncontract FiFaDonate{\r\n\t// --- Auth ---\r\n    mapping (address => uint) public wards;\r\n    function rely(address usr) external  auth { wards[usr] = 1; }\r\n    function deny(address usr) external  auth { wards[usr] = 0; }\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \"FiFaDonate/not-authorized\");\r\n        _;\r\n    }\r\n\r\n    TokenLike   public usdt = TokenLike(0x55d398326f99059fF775485246999027B3197955);\r\n    TokenLike   public FiFaCP = TokenLike(0x17CfF66d3D236bd2D53D6F258078F968a4eaE83D);\r\n    address     public funder = 0x95dEd8Cf893f22342d35E96E050899Cfd9876E92;\r\n    uint256     public tier = 60;\r\n    uint256     public leng = 60;\r\n    uint256[]   public depositAmount = [200,500,1000];\r\n    uint256[]   public rates = [0,200,210,220,80,40];\r\n    uint256[]   public scales = [20,40,80,120,160,200,240];\r\n    uint256[]   public vips = [0,100,300,600,1500,3000,6000];\r\n\r\n    mapping (address => UserInfo)   public userInfo;\r\n\r\n    struct UserInfo { \r\n        uint256   amount;\r\n        address    recommender;\r\n        address[]  underline;\r\n        uint256    vip;\r\n        uint256    performance;\r\n        uint256    teamEarn;\r\n        uint256    small;\r\n        address    bigAddress;\r\n        uint256[2][]  depositList;\r\n        RecommendInfo[]  teamList;\r\n    }\r\n    struct RecommendInfo { \r\n        address    under;\r\n        uint256    what;\r\n        uint256    amount;\r\n        uint256    time;\r\n    }\r\n    struct FirstInfo { \r\n        address    recommender;\r\n        uint256    usdtAmount;\r\n        uint256    cpBlance;\r\n        uint256    cpAmount;\r\n        uint256[3][]  depositList;\r\n    }\r\n\tconstructor(){\r\n       wards[msg.sender] = 1;\r\n    }\r\n\r\n    function  setArray(uint what,uint256[] memory data) public auth{\r\n        if(what==1) depositAmount = data;\r\n        else if(what==2) rates = data;\r\n        else if(what==3) scales = data;\r\n        else if(what==4) vips = data;\r\n    }\r\n\r\n    function  file(uint what,address ust,uint256 data) public auth{\r\n        if(what == 1)  usdt = TokenLike(ust);\r\n        else if(what == 2)  FiFaCP =  TokenLike(ust);\r\n        else if(what == 3)  funder =  ust;\r\n        else if(what == 4)  tier =  data;\r\n        else if(what == 5)  leng =  data;\r\n    }\r\n\r\n    function  setLevel(address usr,uint256 vip) public auth{\r\n        userInfo[usr].vip = vip;\r\n    }\r\n    function setRecommend(address usr,address recommender) external auth {\r\n        userInfo[usr].recommender = recommender;\r\n        userInfo[recommender].underline.push(usr);\r\n    }\r\n    function getRecommend(address usr) external view returns(address recommender) {\r\n        recommender = userInfo[usr].recommender;\r\n    }\r\n    function setUnder(address usr,address[] memory unlines) external auth {\r\n        userInfo[usr].underline = unlines;\r\n    }\r\n\tfunction deposit(uint wad,address recommender) external{\r\n        require(wad>=depositAmount[0]*1E18,\"FiFaDonate/1\");\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        if(user.recommender == address(0)) {\r\n            require(userInfo[recommender].recommender != address(0),\"FiFaDonate/2\");\r\n            user.recommender = recommender;\r\n            userInfo[recommender].underline.push(msg.sender);\r\n        }\r\n        else recommender = user.recommender;\r\n        usdt.transferFrom(msg.sender,funder,wad);\r\n        user.amount +=wad;\r\n        uint[2] memory data = [wad,block.timestamp];\r\n        user.depositList.push(data);\r\n        uint cpAmount = getMul(wad);\r\n        FiFaCP.transfer(msg.sender,cpAmount);\r\n        uint earnAmount;\r\n        for(uint i=0;i<2;i++){\r\n            earnAmount = cpAmount*rates[4+i]/1000;\r\n            FiFaCP.transfer(recommender,earnAmount);\r\n            RecommendInfo memory list;\r\n                        list.under = msg.sender;\r\n                        list.what = i;\r\n                        list.amount = earnAmount;\r\n                        list.time = block.timestamp;\r\n            UserInfo storage up = userInfo[recommender];\r\n            up.teamList.push(list);\r\n            up.teamEarn +=earnAmount;\r\n            recommender = up.recommender;\r\n        }\r\n        user.performance +=cpAmount;\r\n        assignment(msg.sender,cpAmount);\r\n    }\r\n    function depositForNode(address usr,address recommender) external auth{\r\n        uint wad = 1E21;\r\n        UserInfo storage user = userInfo[usr];\r\n        if(user.recommender == address(0)) {\r\n            require(userInfo[recommender].recommender != address(0),\"FiFaDonate/30\");\r\n            user.recommender = recommender;\r\n            userInfo[recommender].underline.push(usr);\r\n        }\r\n        else recommender = user.recommender;\r\n        user.amount +=wad;\r\n        uint[2] memory data = [wad,block.timestamp];\r\n        user.depositList.push(data);\r\n        uint cpAmount = 220*wad;\r\n        FiFaCP.transfer(usr,cpAmount);\r\n        uint earnAmount;\r\n        for(uint i=0;i<2;i++){\r\n            earnAmount = cpAmount*rates[4+i]/1000;\r\n            FiFaCP.transfer(recommender,earnAmount);\r\n            RecommendInfo memory list;\r\n                        list.under = usr;\r\n                        list.what = i;\r\n                        list.amount = earnAmount;\r\n                        list.time = block.timestamp;\r\n            UserInfo storage up = userInfo[recommender];\r\n            up.teamList.push(list);\r\n            up.teamEarn +=earnAmount;\r\n            recommender = up.recommender;\r\n        }\r\n        user.performance +=cpAmount;\r\n        assignment(usr,cpAmount);\r\n    }\r\n    function depositAuth(address usr,uint wad,address recommender) external auth{\r\n        require(wad>=depositAmount[0]*1E18,\"FiFaDonate/3\");\r\n        UserInfo storage user = userInfo[usr];\r\n        if(user.recommender == address(0)) {\r\n            require(userInfo[recommender].recommender != address(0),\"FiFaDonate/4\");\r\n            user.recommender = recommender;\r\n            userInfo[recommender].underline.push(usr);\r\n        }\r\n        else recommender = user.recommender;\r\n        user.amount +=wad;\r\n        uint[2] memory data = [wad,block.timestamp];\r\n        user.depositList.push(data);\r\n        uint cpAmount = getMul(wad);\r\n        FiFaCP.transfer(usr,cpAmount);\r\n        uint earnAmount;\r\n        for(uint i=0;i<2;i++){\r\n            earnAmount = cpAmount*rates[4+i]/1000;\r\n            FiFaCP.transfer(recommender,earnAmount);\r\n            RecommendInfo memory list;\r\n                        list.under = usr;\r\n                        list.what = i;\r\n                        list.amount = earnAmount;\r\n                        list.time = block.timestamp;\r\n            UserInfo storage up = userInfo[recommender];\r\n            up.teamList.push(list);\r\n            up.teamEarn +=earnAmount;\r\n            recommender = up.recommender;\r\n        }\r\n        user.performance +=cpAmount;\r\n        assignment(usr,cpAmount);\r\n    }\r\n    function assignment(address usr,uint amount) internal{\r\n        uint levelForLower = 0;\r\n        bool lateral = false;\r\n        uint lastRate = 0;\r\n        uint level = 0;\r\n        uint maxLevel = scales.length-1;\r\n        address sender = usr;\r\n        for(uint i=0;i<tier;i++) {\r\n            address referrer = userInfo[usr].recommender;\r\n            if(referrer == address(0)) break;\r\n            if(level < maxLevel || (level == maxLevel && !lateral)){\r\n                UserInfo storage up = userInfo[referrer];\r\n                level = up.vip;\r\n                uint wad = 0;\r\n                if(level > levelForLower) {\r\n                    wad = amount*(scales[level]-lastRate)/1000;\r\n                    levelForLower = level;\r\n                    lastRate = scales[level];\r\n                    if(lateral) lateral = false;\r\n                }\r\n                else if(level >0 && level == levelForLower && !lateral){\r\n                    wad = amount*scales[0]/1000;\r\n                    lateral = true;\r\n                }\r\n                if(wad >0) {\r\n                    FiFaCP.transfer(referrer,wad);\r\n                    up.teamEarn +=wad;\r\n                    RecommendInfo memory list;\r\n                        list.under = sender;\r\n                        list.what = 3;\r\n                        list.amount = wad;\r\n                        list.time = block.timestamp;\r\n                    up.teamList.push(list);\r\n                }\r\n            }\r\n            hierarchical(usr,amount);\r\n            usr = referrer;\r\n        }\r\n    }\r\n    function hierarchical(address usr,uint wad) internal{\r\n        UserInfo storage user = userInfo[usr];\r\n        address referrer = user.recommender;\r\n        UserInfo storage up = userInfo[referrer];\r\n        address bigAddress = up.bigAddress;\r\n        uint maxvip = vips.length-1;\r\n        if(up.small < vips[maxvip]*1E24 && bigAddress != usr){\r\n            uint256 bigAmount = userInfo[bigAddress].performance;\r\n            if(user.performance > bigAmount){\r\n                uint beforAmount = user.performance - wad;\r\n                up.small = up.small - beforAmount + bigAmount;\r\n                up.bigAddress = usr;\r\n            }else up.small += wad;\r\n            uint i= up.vip;\r\n            if(i< maxvip && up.small >=vips[i+1]*1E24) up.vip +=1;\r\n        }\r\n        up.performance += wad;\r\n    }\r\n    function getMul(uint wad) public view returns(uint cpAmount){\r\n        uint rate;\r\n        if(wad >depositAmount[2]*1E18) rate = rates[3];\r\n        else if(wad <=depositAmount[2]*1E18 && wad >depositAmount[1]*1E18) rate = rates[2];\r\n        else if(wad <=depositAmount[1]*1E18 && wad >=depositAmount[0]*1E18) rate = rates[1];\r\n        else rate = rates[0];\r\n        cpAmount = wad*rate;\r\n    }\r\n    function getUserInfo(address usr) public view returns(UserInfo memory user){\r\n        user = userInfo[usr];\r\n        uint length = user.teamList.length;\r\n        uint len = leng;\r\n        if(length < len) len = length;\r\n        RecommendInfo[]  memory List = new RecommendInfo[](len);\r\n        uint j=1;\r\n        for(uint i=0;i<len;i++) {\r\n            RecommendInfo memory list = user.teamList[length-j];\r\n            List[i] = list;\r\n            j++;\r\n        }\r\n        user.teamList = List;\r\n    }\r\n    function getFirst(address usr) public view returns(FirstInfo memory firstInfo){\r\n        UserInfo memory user = userInfo[usr];\r\n        uint length = user.depositList.length;\r\n        firstInfo.depositList = new uint256[3][](length);\r\n        for(uint i=0;i<length;i++){\r\n            uint usdtamount = user.depositList[i][0];\r\n            uint cpamount = getMul(usdtamount);\r\n            uint time = user.depositList[i][1];\r\n            firstInfo.depositList[length-1-i]=[usdtamount,cpamount,time];\r\n            firstInfo.cpAmount += cpamount;\r\n        }\r\n        firstInfo.usdtAmount = user.amount;\r\n        firstInfo.recommender = user.recommender;\r\n        firstInfo.cpBlance = FiFaCP.balanceOf(address(this));\r\n    }\r\n    function withdraw(address asses, uint256 amount, address ust) public auth {\r\n        TokenLike(asses).transfer(ust, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FiFaCP\",\"outputs\":[{\"internalType\":\"contract TokenLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recommender\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recommender\",\"type\":\"address\"}],\"name\":\"depositAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recommender\",\"type\":\"address\"}],\"name\":\"depositForNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"what\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ust\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"file\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"funder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"getFirst\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recommender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cpBlance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3][]\",\"name\":\"depositList\",\"type\":\"uint256[3][]\"}],\"internalType\":\"struct FiFaDonate.FirstInfo\",\"name\":\"firstInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"getMul\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cpAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"getRecommend\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recommender\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recommender\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"underline\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"vip\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"performance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamEarn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"small\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bigAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[2][]\",\"name\":\"depositList\",\"type\":\"uint256[2][]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"under\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"what\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct FiFaDonate.RecommendInfo[]\",\"name\":\"teamList\",\"type\":\"tuple[]\"}],\"internalType\":\"struct FiFaDonate.UserInfo\",\"name\":\"user\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leng\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"scales\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"what\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"data\",\"type\":\"uint256[]\"}],\"name\":\"setArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vip\",\"type\":\"uint256\"}],\"name\":\"setLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recommender\",\"type\":\"address\"}],\"name\":\"setRecommend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"unlines\",\"type\":\"address[]\"}],\"name\":\"setUnder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract TokenLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recommender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vip\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"performance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamEarn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"small\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bigAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vips\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asses\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ust\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FiFaDonate", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f195c311cdf0a1c9149928ef83edd4bfe8e28161fa17d7128f8cb8b391b2d068"}