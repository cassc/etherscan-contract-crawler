{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    error NotOwner();\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender != _owner) revert NotOwner();\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary ERC20Helper {\r\n    error SafeTransferFailed();\r\n    error SafeTransferFromFailed();\r\n\r\n    function safeTransfer(address token, address to, uint256 amount) internal {\r\n        bool success;\r\n        bytes4 selector = 0xa9059cbb; // IERC20.transfer.selector\r\n        assembly {\r\n            let data := mload(0x40)\r\n            mstore(data, selector)\r\n            mstore(add(data, 0x04), to)\r\n            mstore(add(data, 0x24), amount)\r\n            success := call(gas(), token, 0, data, 0x44, 0x0, 0x20)\r\n            if success {\r\n                switch returndatasize()\r\n                case 0 {\r\n                    success := gt(extcodesize(token), 0)\r\n                }\r\n                default {\r\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\r\n                }\r\n            }\r\n        }\r\n        if (!success) revert SafeTransferFailed();\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        bytes4 selector = 0x23b872dd; // IERC20.transferFrom.selector\r\n        bool success;\r\n        assembly {\r\n            let data := mload(0x40)\r\n            mstore(data, selector)\r\n            mstore(add(data, 0x04), from)\r\n            mstore(add(data, 0x24), to)\r\n            mstore(add(data, 0x44), amount)\r\n            success := call(gas(), token, 0, data, 100, 0x0, 0x20)\r\n            if success {\r\n                switch returndatasize()\r\n                case 0 {\r\n                    success := gt(extcodesize(token), 0)\r\n                }\r\n                default {\r\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\r\n                }\r\n            }\r\n        }\r\n        if (!success) revert SafeTransferFromFailed();\r\n    }\r\n}\r\n\r\ncontract IDO is Ownable {\r\n    struct UserInfo {\r\n        uint256 auctionAmount;\r\n        uint256 biddingAmount;\r\n    }\r\n    mapping(address => UserInfo) private _users;\r\n\r\n    address private immutable _auctionToken;\r\n    address private immutable _biddingToken;\r\n\r\n    uint256 private _price;\r\n    uint256 private _auctionAmount;\r\n    uint256 private _auctionLeftAmount;\r\n    uint256 private _stakingPercent;\r\n    address private _staking;\r\n\r\n    uint256 private constant _PRICE_FACTOR = 1e18;\r\n    uint256 private constant _PERCENT_FACTOR = 10000;\r\n\r\n    event Buy(\r\n        address indexed account,\r\n        uint256 auctionAmount,\r\n        uint256 biddingAmount\r\n    );\r\n    event Initialization(\r\n        uint256 price,\r\n        uint256 auctionAmount,\r\n        uint256 stakingPercent,\r\n        address staking\r\n    );\r\n\r\n    error ZeroValue();\r\n    error NotInitialized();\r\n    error AmountExceedsMaximum();\r\n    error PercentError();\r\n\r\n    constructor(\r\n        address owner_,\r\n        address auctionToken_,\r\n        address biddingToken_\r\n    ) payable {\r\n        transferOwnership(owner_);\r\n        _auctionToken = auctionToken_;\r\n        _biddingToken = biddingToken_;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the configuration of the smart contract.\r\n     */\r\n    function getConfig()\r\n        external\r\n        view\r\n        returns (\r\n            address auctionToken,\r\n            address biddingToken,\r\n            uint256 price,\r\n            uint256 auctionAmount,\r\n            uint256 auctionLeftAmount,\r\n            uint256 stakingPercent,\r\n            address staking\r\n        )\r\n    {\r\n        auctionToken = _auctionToken;\r\n        biddingToken = _biddingToken;\r\n        price = _price;\r\n        auctionAmount = _auctionAmount;\r\n        auctionLeftAmount = _auctionLeftAmount;\r\n        stakingPercent = _stakingPercent;\r\n        staking = _staking;\r\n    }\r\n\r\n    /**\r\n     * @dev Get user information.\r\n     */\r\n    function getUser(address account) external view returns (UserInfo memory) {\r\n        return _users[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Get bidding amount based on auction amount.\r\n     */\r\n    function getBiddingAmount(\r\n        uint256 auctionAmount_\r\n    ) public view returns (uint256) {\r\n        return (auctionAmount_ * _price) / _PRICE_FACTOR;\r\n    }\r\n\r\n    /**\r\n     * @dev Get auction amount based on bidding amount.\r\n     */\r\n    function getAuctionAmount(\r\n        uint256 biddingAmount_\r\n    ) public view returns (uint256) {\r\n        return (biddingAmount_ * _PRICE_FACTOR) / _price;\r\n    }\r\n\r\n    /**\r\n     * @dev Buy auction tokens and distributing the funds received.\r\n     */\r\n    function buy(uint256 auctionAmount_) external {\r\n        _validationAuctionAmount(auctionAmount_);\r\n\r\n        uint256 _biddingAmount = getBiddingAmount(auctionAmount_);\r\n        uint256 _stakingBiddingAmount = (_biddingAmount * _stakingPercent) /\r\n            _PERCENT_FACTOR;\r\n\r\n        ERC20Helper.safeTransferFrom(\r\n            _biddingToken,\r\n            msg.sender,\r\n            _staking,\r\n            _stakingBiddingAmount\r\n        );\r\n        ERC20Helper.safeTransferFrom(\r\n            _biddingToken,\r\n            msg.sender,\r\n            owner(),\r\n            _biddingAmount - _stakingBiddingAmount\r\n        );\r\n\r\n        ERC20Helper.safeTransfer(_auctionToken, msg.sender, auctionAmount_);\r\n        _updateUser(msg.sender, auctionAmount_, _biddingAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Smart contract initialization and updating variables by the owner.\r\n     */\r\n    function initialization(\r\n        uint256 price_,\r\n        uint256 auctionAmount_,\r\n        uint256 stakingPercent_,\r\n        address staking_\r\n    ) external onlyOwner {\r\n        if (price_ == 0) revert ZeroValue();\r\n        if (stakingPercent_ > _PERCENT_FACTOR) revert PercentError();\r\n\r\n        if (auctionAmount_ > 0)\r\n            ERC20Helper.safeTransferFrom(\r\n                _auctionToken,\r\n                msg.sender,\r\n                address(this),\r\n                auctionAmount_\r\n            );\r\n\r\n        _price = price_;\r\n        _auctionAmount += auctionAmount_;\r\n        _auctionLeftAmount += auctionAmount_;\r\n        _stakingPercent = stakingPercent_;\r\n        _staking = staking_;\r\n\r\n        emit Initialization(price_, auctionAmount_, stakingPercent_, staking_);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the owner to buy tokens from IDO and send them to address.\r\n     */\r\n    function execution(\r\n        uint256 auctionAmount_,\r\n        uint256 biddingAmount_,\r\n        address to_\r\n    ) external onlyOwner {\r\n        _validationAuctionAmount(auctionAmount_);\r\n        ERC20Helper.safeTransfer(_auctionToken, to_, auctionAmount_);\r\n        _updateUser(to_, auctionAmount_, biddingAmount_);\r\n    }\r\n\r\n    function _validationAuctionAmount(uint256 auctionAmount_) private {\r\n        if (auctionAmount_ == 0) revert ZeroValue();\r\n        if (_price == 0) revert NotInitialized();\r\n        if (auctionAmount_ > _auctionLeftAmount) revert AmountExceedsMaximum();\r\n        unchecked {\r\n            _auctionLeftAmount -= auctionAmount_;\r\n        }\r\n    }\r\n\r\n    function _updateUser(\r\n        address account_,\r\n        uint256 auctionAmount_,\r\n        uint256 biddingAmount_\r\n    ) private {\r\n        unchecked {\r\n            _users[account_].auctionAmount += auctionAmount_;\r\n            _users[account_].biddingAmount += biddingAmount_;\r\n        }\r\n        emit Buy(account_, auctionAmount_, biddingAmount_);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"auctionToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"biddingToken_\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AmountExceedsMaximum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PercentError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferFromFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"biddingAmount\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"}],\"name\":\"Initialization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionAmount_\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"biddingAmount_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"execution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"biddingAmount_\",\"type\":\"uint256\"}],\"name\":\"getAuctionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionAmount_\",\"type\":\"uint256\"}],\"name\":\"getBiddingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"auctionToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"biddingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionLeftAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingPercent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"auctionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"biddingAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IDO.UserInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingPercent_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staking_\",\"type\":\"address\"}],\"name\":\"initialization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "IDO", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000dcda94969127703ca3eb48cfa881a00593d95fbd00000000000000000000000027c019aa33f0f7ed2ec7f135e1c6b1a6deef198c00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://127e10d78437ebde163a57e14135a22e0dc216252d003e5198cb320c6aee9049"}