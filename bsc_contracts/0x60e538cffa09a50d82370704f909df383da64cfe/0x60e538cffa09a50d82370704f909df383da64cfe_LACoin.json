{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.12;\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender,address recipient,uint amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\ninterface IERC20Metadata is IERC20 { \r\n  \r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\ninterface ILACoinController \r\n{\r\n\r\n    /// ERC20 \r\n    function transfer(address owner, address recipient, uint amount) external returns (bool);\r\n    function approve(address owner,address spender, uint amount) external returns (bool);\r\n\r\n    //// USER\r\n    function register(uint referlaId) external;\r\n\r\n    //// Deposite\r\n    function deposite (uint amount)external returns(bool);\r\n    function withdrawProfit() external;\r\n    function withdrawAll() external;\r\n\r\n    //// API\r\n    function destroyToken(address acc, uint amount) external ;\r\n    function addTokenforCoin(address acc, uint amount) external;\r\n    function updateStatus(address acc)  external;\r\n\r\n    //// Presale\r\n    function buyPresaleToken(address acc, uint amount) external returns(bool, uint,uint);\r\n}\r\ninterface IView \r\n{\r\n    function isUserExist(address acc) external view returns(bool);\r\n    function isUserExistById(uint id) external view returns(bool);\r\n    function getReferalIdById(uint id) external view returns(uint);\r\n    function getAddressById(uint id) external view returns (address);\r\n    function getIdByAddress(address acc)external view returns(uint);\r\n    function getUser(uint id)external view returns(address,uint,uint,uint8,uint);\r\n    function getRefCount(uint id, uint8 lvl) external view returns (uint);\r\n    function getStatsCount(uint id) external view returns (uint);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function getEmission() external view returns(uint);\r\n    function getFrozenToken(address acc) external view returns(uint);\r\n    function getFrozenDate(address acc) external view returns(uint);\r\n    function balanceWithFrozen(address acc) external view returns(uint);\r\n    function getDeposite(address acc) external view returns(uint);\r\n    function getDepositeDate(address acc) external view returns(uint);\r\n    function getDepositeProfit(address acc) external view returns(uint);\r\n    function getPresaleCount() external view returns(uint);\r\n    function getPrice() external view returns(uint);\r\n    function getPresaleStart() external view returns (bool);\r\n    function getPresaleStartDate() external view returns(uint);\r\n    function getPresaleEndDate() external view returns(uint);\r\n    function getPresaleLimit(address acc)external view returns(uint);\r\n    function getMaxToken() external view returns(uint);\r\n    function checkUpdate(uint id) external view returns(bool);\r\n}\r\nabstract contract Context \r\n{\r\n    function _msgSender() internal view virtual returns (address) \r\n    {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) \r\n    {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context\r\n{\r\n    address _owner;\r\n\r\n    constructor()  \r\n    {\r\n        _owner = payable(msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner() \r\n    {\r\n        require(_msgSender() == msg.sender, \"Only owner\");\r\n        _;\r\n    }\r\n}\r\n\r\ncontract LACoin is IERC20Metadata, Ownable\r\n{\r\n    ILACoinController controller;\r\n    IView View;\r\n    string public _name = \"EVOLUTION MULTY GAME\";  \r\n    string public _symbol = \"EVO\"; \r\n    address private _proxy;\r\n    modifier isProxy() \r\n    {\r\n        require(msg.sender == _proxy);\r\n        _;\r\n    }\r\n    constructor (address proxyAdr, address controllerAdr, address viewAdr)\r\n    {\r\n       _proxy = proxyAdr;\r\n       controller = ILACoinController(controllerAdr);\r\n       View = IView(viewAdr);\r\n    }\r\n\r\n\r\n\r\n/// Metadata\r\n    function name() public override view returns (string memory)\r\n    {\r\n        return _name;\r\n    }\r\n    function symbol() public override view returns (string memory)\r\n    {\r\n        return _symbol;\r\n    }\r\n    function decimals() public override pure returns (uint8)\r\n    {\r\n        return 18;\r\n    }\r\n///\r\n\r\n/// ERC20\r\n    function totalSupply() public override view returns (uint)\r\n    {\r\n        return View.totalSupply();\r\n    }\r\n    function balanceOf(address account) public override view returns (uint)\r\n    {\r\n        return View.balanceOf(account);\r\n    }\r\n    function transfer(address recipient, uint amount) public override returns (bool)\r\n    {\r\n        require(View.balanceOf(msg.sender)>=amount,\"Not enougtht tokens\");\r\n        require(recipient != address(0), \"pecipient is 0\" );\r\n        bool answer = controller.transfer(msg.sender,recipient, amount);\r\n        if (answer)\r\n        {\r\n            emit Transfer(msg.sender, recipient, amount);\r\n        }\r\n        return answer;\r\n    }\r\n    function allowance(address owner, address spender) public override view returns (uint)\r\n    {\r\n        return View.allowance(owner, spender);\r\n    }\r\n    function approve(address spender, uint amount) external returns (bool)\r\n    {\r\n        bool answer = controller.approve(msg.sender, spender, amount);\r\n        if (answer)\r\n        {\r\n            emit Approval( msg.sender, spender, amount);\r\n        }\r\n        return answer;\r\n    }\r\n    function transferFrom(address from, address to, uint amount) external returns (bool)\r\n    {\r\n        /// TODO: require(msg.sender == to);\r\n        require(View.balanceOf(from) >= amount,\"Not enought tokens\");\r\n        uint allow =  allowance(from, to);\r\n        require( allow >= amount, \"Not approve enought tokens\");\r\n        unchecked \r\n        {\r\n            controller.approve(from,to, allow - amount);\r\n        }\r\n        bool answer = controller.transfer(from, to, amount);\r\n        if (answer)\r\n        {\r\n            emit Transfer(from, to, amount);\r\n        }\r\n        return answer;\r\n    }\r\n///\r\n\r\n/// Presale\r\n    function buyPresale() private\r\n    {\r\n        (bool answer, uint value, uint mach) = controller.buyPresaleToken(msg.sender, msg.value);\r\n        if (answer)\r\n        {\r\n            payable(_owner).transfer(value);\r\n            if (mach > 0)\r\n            {\r\n                payable(msg.sender).transfer(mach);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            payable(msg.sender).transfer(value);\r\n        }\r\n    }\r\n    fallback() external payable \r\n    {\r\n        if(!View.getPresaleStart())\r\n        {\r\n            payable(msg.sender).transfer(msg.value);\r\n        }\r\n        else\r\n        {\r\n            buyPresale();\r\n        }\r\n    }\r\n    receive() external payable\r\n    {\r\n        if(!View.getPresaleStart())\r\n        {\r\n           payable(msg.sender).transfer(msg.value);\r\n        }\r\n        else\r\n        {\r\n            buyPresale();\r\n        }\r\n    } \r\n///    \r\n\r\n/// API\r\n    function destroyToken(address acc, uint amount)isProxy public \r\n    {\r\n        controller.destroyToken(acc,amount);\r\n    }\r\n    function addTokenforCoin(address acc, uint amount)isProxy public\r\n    {\r\n        controller.addTokenforCoin(acc, amount);\r\n    }\r\n\r\n///\r\n\r\n\r\n/// ADMIN\r\n    function setProxy(address proxy) onlyOwner public\r\n    {\r\n        _proxy = proxy;\r\n    }\r\n    function setController(address _Controller) onlyOwner public\r\n    {\r\n        controller = ILACoinController(_Controller);\r\n    }\r\n    function withdraw() onlyOwner public\r\n    {\r\n        payable(_owner).transfer(address(this).balance);\r\n    }\r\n    function setView (address newAdr)onlyOwner public\r\n    {\r\n        View = IView(newAdr);\r\n    }\r\n///    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyAdr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"controllerAdr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"viewAdr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acc\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addTokenforCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acc\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"destroyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"setProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdr\",\"type\":\"address\"}],\"name\":\"setView\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LACoin", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000f46e7cb901e1c6785d93818eeb04bae728575c78000000000000000000000000d97ee2844d3e0e1cfa005db333c116757b9d3495000000000000000000000000ba51f7755eacf4878e7d6d306454aa165b8227b2", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9f9c81f36250a02f622460c931931950d50c110138c9389245eeb35cca67f674"}