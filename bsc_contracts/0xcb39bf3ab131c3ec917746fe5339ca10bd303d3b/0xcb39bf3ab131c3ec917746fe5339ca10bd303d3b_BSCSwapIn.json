{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/nonputhikanon/Works/six-network/definixswap-contract/bsc/contracts/BSCSwapIn.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.16;\\n\\nimport \\\"./utils/SafeMath.sol\\\";\\nimport \\\"./utils/Ownable.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\ncontract BSCSwapIn is Ownable {\\n    // Using SafeMath for calculation utility\\n    using SafeMath for uint256;\\n\\n    // Public parameter for BEP20 Token address\\n    IERC20 public BEP20Token;\\n\\n    // Public parameter for transfer limit on each time\\n    uint256 public amountLimitPerTrans;\\n\\n    // Public parameter for transfer minimum on each time\\n    uint256 public amountRequirePerTrans;\\n\\n    // Group of Mapping parameter use to support and interactive with BEP20 Bridge workflow process by use sourceTx(Bridge Ticket ID) to be the key index\\n    mapping(string => address) public destAddr; // To keep destination address on each transaction\\n    mapping(string => string) public destMemoText; // To keep destination memo text on each transaction\\n    mapping(string => uint256) public swapAmount; // To keep transfer amount on each transaction\\n    mapping(string => string) public sourceTx; // To keep source Bridge Ticket ID on each transaction\\n    mapping(string => uint256) public sourceChain; // To keep our source chain ID on each transaction and possible value are 1 = Stellar, 2 = Klaytn\\n\\n    // Swap event thrown to contract event\\n    event Swap(\\n        address _from,\\n        address _to,\\n        string _memoText,\\n        uint256 _amount,\\n        string _sourceTx,\\n        uint256 _sourceChain\\n    );\\n    // Transfer event thrown to contract event\\n    event Transfer(\\n        address _from,\\n        address _to,\\n        string _memoText,\\n        uint256 _amount\\n    );\\n\\n    // BSCSwapIn Constructor\\n    // There are 3 arguments that constructor need when deploy\\n    // 1.) BEP20 Token's address on Binance Smart Chain\\n    // 2.) Amount limit that allow user transfer BEP20 Token on each time\\n    // 3.) Amount require that allow user transfer BEP20 Token on each time\\n    constructor(IERC20 _BEP20Token, uint256 _amountLimitPerTrans, uint256 _amountRequirePerTrans) public {\\n        BEP20Token = _BEP20Token;\\n        amountLimitPerTrans = _amountLimitPerTrans;\\n        amountRequirePerTrans =  _amountRequirePerTrans;\\n    }\\n\\n    // public function allow only owner use to set limitation bridge amount on each time\\n    function setAmountLimitPerTrans(uint256 _amountLimitPerTrans)\\n        public\\n        onlyOwner\\n    {\\n        amountLimitPerTrans = _amountLimitPerTrans;\\n    }\\n\\n    // public function allow only owner use to set limitation bridge amount on each time\\n    function setAmountRequirePerTrans(uint256 _amountRequirePerTrans)\\n        public\\n        onlyOwner\\n    {\\n        amountRequirePerTrans = _amountRequirePerTrans;\\n    }\\n\\n    // public function that return BEP20 Token balance in this contract\\n    function bep20ContractBalance() public view returns (uint256) {\\n        return BEP20Token.balanceOf(address(this));\\n    }\\n\\n    // The key function is swap use to transfer BEP20 Token from our contract to destination address of user in this network.\\n    // There are 5 arguments that need to use in swap function\\n    // 1.) _toAddr : Destination address in this network\\n    // 2.) _toMemo : Memo Text\\n    // 3.) _amount : Number of amount\\n    // 4.) _sourceTx : Bridge Ticket ID to use for reference with over all process\\n    // 5.) _sourceChain : Source chain of this transaction (possible value are 1 = Stellar, 2 = Klaytn)\\n    function swap(\\n        address _toAddr,\\n        string memory _toMemo,\\n        uint256 _amount,\\n        string memory _sourceTx,\\n        uint256 _sourceChain\\n    ) public payable onlyOwner returns (bool) {\\n        // To check duplicate of Bridge Ticket ID\\n        require(\\n            bytes(sourceTx[_sourceTx]).length <= 0,\\n            \\\"Source transaction is already exists\\\"\\n        );\\n\\n        // To check destination address is require\\n        require(_toAddr != address(0), \\\"Destination address is require\\\");\\n\\n        // To check bridge amount is require and must more than or equal to amountRequirePerTrans\\n        require(_amount >= amountRequirePerTrans, \\\"Swap amount is lower than minimum requirement\\\");\\n\\n        // To check Bridge Ticket ID is require\\n        require(\\n            bytes(_sourceTx).length > 0,\\n            \\\"Source Transaction ID is require\\\"\\n        );\\n\\n        // To check source chain of this transaction is require and possible value only be 1 or 2 (1 = Stellar, 2 = Klaytn)\\n        require(\\n            _sourceChain == 2,\\n            \\\"Source Chain is require\\\"\\n        );\\n\\n        // To check bridge amount must less than or equal limitation amount of each time\\n        require(\\n            _amount <= amountLimitPerTrans,\\n            \\\"Amount has exceed maximum limit allow\\\"\\n        );\\n\\n        // To check balance of BEP20 Token in contract is sufficient for this transaction\\n        require(bep20ContractBalance() >= _amount, \\\"Balance is not enough\\\");\\n\\n        // Store transaction data into mapping with key sourceTx(Bridge Ticket ID)\\n        destAddr[_sourceTx] = _toAddr;\\n        destMemoText[_sourceTx] = _toMemo;\\n        swapAmount[_sourceTx] = _amount;\\n        sourceTx[_sourceTx] = _sourceTx;\\n        sourceChain[_sourceTx] = _sourceChain;\\n\\n        // Transfer BEP20 Token from contract to user's destination address\\n        BEP20Token.transfer(_toAddr, _amount);\\n\\n        // Emit Swap event\\n        emit Swap(\\n            address(this),\\n            _toAddr,\\n            _toMemo,\\n            _amount,\\n            _sourceTx,\\n            _sourceChain\\n        );\\n\\n        return true;\\n    }\\n\\n    // Transfer function use only for Owner to transfer BEP20 Token from this contract to any address in this network\\n    // There are 3 arguments that need to use in this function\\n    // 1.) _toAddr : Destination address in this network\\n    // 3.) _amount : Number of amount\\n    function transfer(\\n        address _toAddr,\\n        string memory _toMemo,\\n        uint256 _amount\\n    ) public payable onlyOwner returns (bool) {\\n        // To check destination address is require\\n        require(_toAddr != address(0), \\\"Destination address is require\\\");\\n\\n        // To check bridge amount is require and must more than 0\\n        require(_amount > 0, \\\"Swap amount is require\\\");\\n\\n        // To check balance of BEP20 Token in contract is sufficient for this transaction\\n        require(bep20ContractBalance() >= _amount, \\\"Balance is not enough\\\");\\n\\n        // To check bridge amount must less than or equal limitation amount of each time\\n        require(\\n            _amount <= amountLimitPerTrans,\\n            \\\"Amount has exceed maximum limit allow\\\"\\n        );\\n\\n        // Transfer BEP20 Token from contract to user's destination address\\n        BEP20Token.transfer(_toAddr, _amount);\\n\\n        // Emit Transfer event\\n        emit Transfer(address(this), _toAddr, _toMemo, _amount);\\n\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/nonputhikanon/Works/six-network/definixswap-contract/bsc/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.16;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"\r\n    },\r\n    \"/Users/nonputhikanon/Works/six-network/definixswap-contract/bsc/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.16;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/nonputhikanon/Works/six-network/definixswap-contract/bsc/contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.16;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/nonputhikanon/Works/six-network/definixswap-contract/bsc/contracts/utils/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_BEP20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountLimitPerTrans\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountRequirePerTrans\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_memoText\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_sourceTx\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sourceChain\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_memoText\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BEP20Token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLimitPerTrans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountRequirePerTrans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bep20ContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"destAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"destMemoText\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountLimitPerTrans\",\"type\":\"uint256\"}],\"name\":\"setAmountLimitPerTrans\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountRequirePerTrans\",\"type\":\"uint256\"}],\"name\":\"setAmountRequirePerTrans\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"sourceChain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"sourceTx\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_toMemo\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_sourceTx\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_sourceChain\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"swapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_toMemo\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BSCSwapIn", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "999", "ConstructorArguments": "0000000000000000000000000f02b1f5af54e04fb6dd6550f009ac2429c4e30d000000000000000000000000000000000000000000000a968163f0a57b40000000000000000000000000000000000000000000000000001b1ae4d6e2ef500000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}