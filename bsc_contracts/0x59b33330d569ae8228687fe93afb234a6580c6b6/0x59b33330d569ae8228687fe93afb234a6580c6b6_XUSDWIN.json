{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/XUSD/XUSDWin.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./IVRF.sol\\\";\\n\\ninterface IXUSD {\\n    function burn(uint256 amount) external;\\n    function sell(uint256 tokenAmount) external returns (address, uint256);\\n    function resourceCollector() external view returns (address);\\n}\\n\\ncontract XUSDWIN is Ownable, VRFConsumerBaseV2 {\\n\\n    // XUSD Contract\\n    address public constant XUSD = 0x324E8E649A6A3dF817F97CdDBED2b746b62553dD;\\n\\n    // Lotto History\\n    struct History {\\n        address winner;\\n        uint256 amountWon;\\n    }\\n\\n    // Lotto ID => Lotto History\\n    mapping ( uint256 => History ) public lottoHistory;\\n\\n    // User Info\\n    struct UserInfo {\\n        uint256 amountWon;\\n        uint256 amountSpent;\\n        uint256 numberOfWinningTickets;\\n    }\\n\\n    // User => UserInfo\\n    mapping ( address => UserInfo ) public userInfo;\\n\\n    // Current Lotto ID\\n    uint256 public currentLottoID;\\n\\n    // Total XUSD Given Out\\n    uint256 public totalRewarded;\\n\\n    // Total XUSD Burned\\n    uint256 public totalBurned;\\n\\n    // Total XUSD Given To Resource Collector\\n    uint256 public totalGivenToResources;\\n\\n    // Lotto Details\\n    uint256 public startingCostPerTicket = 1 * 10**18;\\n    uint256 public costIncreasePerTimePeriod = 5 * 10**17;\\n    uint256 public timePeriodForCostIncrease = 1 days;\\n    uint256 public lottoDuration = 7 days;\\n\\n    // When Last Lotto Began\\n    uint256 public lastLottoStartTime;\\n\\n    // current ticket ID\\n    uint256 public currentTicketID;\\n    mapping ( uint256 => address ) public ticketToUser;\\n\\n    // Nobody Wins Edge\\n    uint256 public nobodyWinsEdge = 10;\\n\\n    // Roll Over Percentage\\n    uint256 public rollOverPercentage = 10;\\n\\n    // burn percentage\\n    uint256 public burnPercentage = 32;\\n    uint256 public resourcePercentage = 8;\\n\\n    // number of times nobody has won\\n    uint256 public nobodyWinsCounter;\\n\\n    // address to receive LINK to keep lotto continuously going\\n    address public linkBuyer;\\n\\n    // flat amount of XUSD to liquidate for link each lotto\\n    uint256 public amountToLiquidateEachLotto = 1 * 10**18;\\n\\n    // VRF Coordinator\\n    VRFCoordinatorV2Interface COORDINATOR;\\n\\n    // Your subscription ID.\\n    uint64 private s_subscriptionId;\\n\\n    // The gas lane to use, which specifies the maximum gas price to bump to.\\n    bytes32 private keyHash;\\n\\n    // gas limit to call function\\n    uint32 public gasToCallRandom = 750_000;\\n\\n    // Events\\n    event WinnerChosen(address winner, uint256 pot);\\n    event NobodyWins();\\n\\n    constructor() VRFConsumerBaseV2(0xc587d9053cd1118f25F645F9E08BB98c9712A4EE) {\\n        // setup chainlink\\n        keyHash = 0x114f3da0a805b6a67d6e9cd2ec746f7028f1b7376365af575cfea3550dd1aa04;\\n        COORDINATOR = VRFCoordinatorV2Interface(0xc587d9053cd1118f25F645F9E08BB98c9712A4EE);\\n        s_subscriptionId = 471;\\n    }\\n\\n    /**\\n        Sets Gas Limits for VRF Callback\\n     */\\n    function setGasLimits(uint32 gasToCallRandom_) external onlyOwner {\\n        gasToCallRandom = gasToCallRandom_;\\n    }\\n\\n    /**\\n        Sets The Key Hash\\n     */\\n    function setKeyHash(bytes32 newHash) external onlyOwner {\\n        keyHash = newHash;\\n    }\\n\\n    /**\\n        Sets Subscription ID for VRF Callback\\n     */\\n    function setSubscriptionId(uint64 subscriptionId_) external onlyOwner {\\n       s_subscriptionId = subscriptionId_;\\n    }\\n\\n    function init() external onlyOwner {\\n        require(\\n            lastLottoStartTime == 0,\\n            'Already initialized'\\n        );\\n        lastLottoStartTime = block.timestamp;\\n    }\\n\\n    function setStartingTicketCost(uint256 newCost) external onlyOwner {\\n        startingCostPerTicket = newCost;\\n    }\\n\\n    function setLottoDuration(uint256 newDuration) external onlyOwner {\\n        lottoDuration = newDuration;\\n    }\\n\\n    function setCostIncreasePerTimePeriod(uint256 increasePerPeriod) external onlyOwner {\\n        costIncreasePerTimePeriod = increasePerPeriod;\\n    }\\n\\n    function setTimePeriodForCostIncrease(uint256 newTimePeriod) external onlyOwner {\\n        timePeriodForCostIncrease = newTimePeriod;\\n    }\\n\\n    function setNobodyWinsEdge(uint256 nobodyWinsEdge_) external onlyOwner {\\n        require(\\n            nobodyWinsEdge_ <= 50,\\n            'Nobody Wins Edge Too Large'\\n        );\\n        nobodyWinsEdge = nobodyWinsEdge_;\\n    }\\n\\n    function setRollOverPercent(uint256 rollOverPercentage_) external onlyOwner {\\n        require(\\n            rollOverPercentage_ <= 50,\\n            'Roll Over Percentage Too Large'\\n        );\\n        rollOverPercentage = rollOverPercentage_;\\n    }\\n\\n    function setBurnAndResourcePercentage(uint256 burnPercentage_, uint256 resourcePercentage_) external onlyOwner {\\n        require(\\n            ( burnPercentage_ + resourcePercentage_ ) <= 95,\\n            'Burn Percentage Too Large'\\n        );\\n        burnPercentage = burnPercentage_;\\n        resourcePercentage = resourcePercentage_;\\n    }\\n\\n    function setAmountToLiquidateEachLotto(uint256 newAmountForLink) external onlyOwner {\\n        require(\\n            newAmountForLink <= 10 * 10**18,\\n            'Too Many XUSD Required'\\n        );\\n        amountToLiquidateEachLotto = newAmountForLink;\\n    }\\n\\n    function setLinkBuyer(address newBuyer) external onlyOwner {\\n        linkBuyer = newBuyer;\\n    }\\n\\n    function getTickets(uint256 numTickets) external {\\n\\n        // get cost\\n        uint cost = numTickets * currentTicketCost();\\n        address user = msg.sender;\\n\\n        // increment amount spent\\n        unchecked {\\n            userInfo[user].amountSpent += cost;   \\n        }\\n\\n        // amount received\\n        uint256 received = _transferIn(cost);\\n        require(\\n            received >= ( cost * 99 ) / 100,\\n            'Too Few Received'\\n        );\\n\\n        // burn portion of received amount\\n        _burn(( received * burnPercentage ) / 100);\\n\\n        // send portion to resource collector\\n        _giveCollector(( received * resourcePercentage ) / 100);\\n        \\n        // Assign Ticket IDs To User\\n        for (uint i = 0; i < numTickets;) {\\n            ticketToUser[currentTicketID] = user;\\n            currentTicketID++;\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    function newLotto() external {\\n        require(\\n            lastLottoStartTime > 0,\\n            'Lotto Has Not Been Initialized'\\n        );\\n        require(\\n            timeUntilNewLotto() == 0,\\n            'Not Time For New Lotto'\\n        );\\n\\n        // liquidate amount of XUSD in contract for link\\n        _liquidateForLink();\\n\\n        // start a new lotto, request random words\\n        _newGame();        \\n    }\\n\\n\\n    /**\\n        Registers A New Game\\n        Changes The Day Timer\\n        Distributes Pot\\n     */\\n    function _newGame() internal {\\n\\n        // reset day timer\\n        lastLottoStartTime = block.timestamp;\\n\\n        // get random number and send rewards when callback is executed\\n        // the callback is called \\\"fulfillRandomWords\\\"\\n        // this will revert if VRF subscription is not set and funded.\\n        COORDINATOR.requestRandomWords(\\n            keyHash,\\n            s_subscriptionId,\\n            3, // number of block confirmations before returning random value\\n            gasToCallRandom, // callback gas limit is dependent num of random values & gas used in callback\\n            2 // the number of random results to return\\n        );\\n    }\\n\\n    function _transferIn(uint256 amount) internal returns (uint256) {\\n        require(\\n            IERC20(XUSD).allowance(msg.sender, address(this)) >= amount,\\n            'Insufficient Allowance'\\n        );\\n        uint256 before = balanceOf();\\n        require(\\n            IERC20(XUSD).transferFrom(\\n                msg.sender,\\n                address(this),\\n                amount\\n            ),\\n            'FAIL TRANSFER FROM'\\n        );\\n        uint256 After = balanceOf();\\n        require(\\n            After > before,\\n            'Zero Received'\\n        );\\n        return After - before;\\n    }\\n\\n    function _burn(uint256 amount) internal {\\n        if (amount > 0) {\\n            unchecked {\\n                totalBurned += amount;\\n            }\\n            IXUSD(XUSD).burn(amount);\\n        }\\n    }\\n\\n    function _giveCollector(uint256 amount) internal {\\n        _send(IXUSD(XUSD).resourceCollector(), amount);\\n        unchecked {\\n            totalGivenToResources += amount;\\n        }\\n    }\\n\\n    function _send(address to, uint amount) internal {\\n        if (to == address(0) || amount <= 10000) {\\n            return;\\n        }\\n        IERC20(XUSD).transfer(to, amount);\\n    }\\n\\n    function _liquidateForLink() internal {\\n\\n        // if link receiver is not specified, return out\\n        if (address(linkBuyer) == address(0)) {\\n            return;\\n        }\\n\\n        // determine amount of XUSD to liquidate\\n        uint bal = balanceOf();\\n        uint toLiquidate = amountToLiquidateEachLotto > bal ? bal : amountToLiquidateEachLotto;\\n\\n        // send amount to link buyer contract\\n        _send(linkBuyer, toLiquidate);\\n    }\\n\\n    /**\\n        Chainlink's callback to provide us with randomness\\n     */\\n    function fulfillRandomWords(\\n        uint256, /* requestId */\\n        uint256[] memory randomWords\\n    ) internal override {\\n\\n        // determine if house wins or no one wins\\n        uint winIndex = randomWords[1] % 100;\\n        bool noOneWins = winIndex < nobodyWinsEdge;\\n\\n        // select the winner based on edge, or the random number generated\\n        address winner;\\n        if (noOneWins) {\\n            winner = address(0);\\n        } else {\\n            winner = currentTicketID > 0 ? ticketToUser[randomWords[0] % currentTicketID] : address(0);\\n        }\\n\\n        // handle no-one wins (burn XUSD)\\n        uint256 pot = amountToWin();\\n\\n        // save history\\n        lottoHistory[currentLottoID].winner = winner;\\n        lottoHistory[currentLottoID].amountWon = pot;\\n\\n        // reset lotto time again\\n        lastLottoStartTime = block.timestamp;\\n        \\n        // increment the current lotto ID\\n        currentLottoID++;\\n\\n        if (pot == 0) {\\n            return;\\n        }\\n        \\n        // give winner\\n        if (winner != address(0)) {\\n\\n            // increment total rewarded\\n            unchecked {\\n                totalRewarded += pot;\\n                userInfo[winner].amountWon += pot;\\n                userInfo[winner].numberOfWinningTickets++;\\n            }\\n\\n            // Send winner the pot\\n            _send(winner, pot);\\n\\n            // Emit Winning Event\\n            emit WinnerChosen(winner, pot);\\n\\n        } else {\\n\\n            // increment total burned\\n            unchecked {\\n                totalBurned += pot;\\n                nobodyWinsCounter++;\\n            }\\n\\n            // burn XUSD\\n            _burn(pot);\\n\\n            // emit event\\n            emit NobodyWins();\\n        }\\n        \\n        // reset ticket IDs back to 0\\n        delete currentTicketID;\\n        \\n    }\\n\\n    function amountToWin() public view returns (uint256) {\\n        return ( balanceOf() * ( 100 - rollOverPercentage ) ) / 100;\\n    }\\n\\n    function currentTicketCost() public view returns (uint256) {\\n        uint256 epochsSinceLastLotto = block.timestamp > lastLottoStartTime ? ( block.timestamp - lastLottoStartTime ) / timePeriodForCostIncrease : 0;\\n        return startingCostPerTicket + ( epochsSinceLastLotto * costIncreasePerTimePeriod );\\n    }\\n\\n    function timeUntilNewLotto() public view returns (uint256) {\\n        uint endTime = lastLottoStartTime + lottoDuration;\\n        return block.timestamp >= endTime ? 0 : endTime - block.timestamp;\\n    }\\n\\n    function getOdds(address user) public view returns (uint256, uint256, uint256) {\\n\\n        uint nTickets;\\n        for (uint i = 0; i < currentTicketID;) {\\n\\n            if (ticketToUser[i] == user) {\\n                nTickets++;\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return (nTickets, currentTicketID, nobodyWinsEdge);\\n    }\\n\\n    function getPastWinners(uint256 numWinners) external view returns (address[] memory) {\\n        address[] memory winners = new address[](numWinners);\\n        if (currentLottoID < numWinners || numWinners == 0) {\\n            return winners;\\n        }\\n        uint count = 0;\\n        for (uint i = currentLottoID - 1; i > currentLottoID - ( 1 + numWinners);) {\\n            winners[count] = lottoHistory[i].winner;\\n            unchecked { --i; count++; }\\n        }\\n        return winners;\\n    }\\n\\n    function getPastWinnersAndAmounts(uint256 numWinners) external view returns (address[] memory, uint256[] memory) {\\n        address[] memory winners = new address[](numWinners);\\n        uint256[] memory amounts = new uint256[](numWinners);\\n        if (currentLottoID < numWinners || numWinners == 0) {\\n            return (winners, amounts);\\n        }\\n        uint count = 0;\\n        for (uint i = currentLottoID - 1; i > currentLottoID - ( 1 + numWinners);) {\\n            winners[count] = lottoHistory[i].winner;\\n            amounts[count] = lottoHistory[i].amountWon;\\n            unchecked { --i; count++; }\\n        }\\n        return (winners, amounts);\\n    }\\n\\n    function balanceOf() public view returns (uint256) {\\n        return IERC20(XUSD).balanceOf(address(this));\\n    }\\n\\n    function percentToLotto() public view returns (uint256) {\\n        return 100 - (burnPercentage + resourcePercentage);\\n    }\\n\\n    receive() external payable{\\n        (bool s,) = payable(XUSD).call{value: address(this).balance}(\\\"\\\");\\n        require(s, 'XUSD Purchase Failure');\\n    }\\n}\"\r\n    },\r\n    \"contracts/XUSD/IERC20.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\ninterface IERC20 {\\n\\n    function totalSupply() external view returns (uint256);\\n    \\n    function symbol() external view returns(string memory);\\n    \\n    function name() external view returns(string memory);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n    \\n    /**\\n     * @dev Returns the number of decimal places\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"contracts/XUSD/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.14;\\n\\n/**\\n * @title Owner\\n * @dev Set & change owner\\n */\\ncontract Ownable {\\n\\n    address private owner;\\n    \\n    // event for EVM logging\\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\\n    \\n    // modifier to check if caller is owner\\n    modifier onlyOwner() {\\n        // If the first argument of 'require' evaluates to 'false', execution terminates and all\\n        // changes to the state and to Ether balances are reverted.\\n        // This used to consume all gas in old EVM versions, but not anymore.\\n        // It is often a good idea to use 'require' to check if functions are called correctly.\\n        // As a second argument, you can also provide an explanation about what went wrong.\\n        require(msg.sender == owner, \\\"Caller is not owner\\\");\\n        _;\\n    }\\n    \\n    /**\\n     * @dev Set contract deployer as owner\\n     */\\n    constructor() {\\n        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\\n        emit OwnerSet(address(0), owner);\\n    }\\n\\n    /**\\n     * @dev Change owner\\n     * @param newOwner address of new owner\\n     */\\n    function changeOwner(address newOwner) public onlyOwner {\\n        emit OwnerSet(owner, newOwner);\\n        owner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Return owner address \\n     * @return address of owner\\n     */\\n    function getOwner() external view returns (address) {\\n        return owner;\\n    }\\n}\"\r\n    },\r\n    \"contracts/XUSD/IVRF.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"NobodyWins\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pot\",\"type\":\"uint256\"}],\"name\":\"WinnerChosen\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"XUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountToLiquidateEachLotto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountToWin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"costIncreasePerTimePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLottoID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTicketCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTicketID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasToCallRandom\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getOdds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numWinners\",\"type\":\"uint256\"}],\"name\":\"getPastWinners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numWinners\",\"type\":\"uint256\"}],\"name\":\"getPastWinnersAndAmounts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numTickets\",\"type\":\"uint256\"}],\"name\":\"getTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLottoStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkBuyer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lottoDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lottoHistory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountWon\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newLotto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nobodyWinsCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nobodyWinsEdge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentToLotto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resourcePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollOverPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmountForLink\",\"type\":\"uint256\"}],\"name\":\"setAmountToLiquidateEachLotto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnPercentage_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourcePercentage_\",\"type\":\"uint256\"}],\"name\":\"setBurnAndResourcePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"increasePerPeriod\",\"type\":\"uint256\"}],\"name\":\"setCostIncreasePerTimePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"gasToCallRandom_\",\"type\":\"uint32\"}],\"name\":\"setGasLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newHash\",\"type\":\"bytes32\"}],\"name\":\"setKeyHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBuyer\",\"type\":\"address\"}],\"name\":\"setLinkBuyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"setLottoDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nobodyWinsEdge_\",\"type\":\"uint256\"}],\"name\":\"setNobodyWinsEdge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rollOverPercentage_\",\"type\":\"uint256\"}],\"name\":\"setRollOverPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCost\",\"type\":\"uint256\"}],\"name\":\"setStartingTicketCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId_\",\"type\":\"uint64\"}],\"name\":\"setSubscriptionId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTimePeriod\",\"type\":\"uint256\"}],\"name\":\"setTimePeriodForCostIncrease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingCostPerTicket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ticketToUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timePeriodForCostIncrease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeUntilNewLotto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalGivenToResources\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewarded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountWon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountSpent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfWinningTickets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "XUSDWIN", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}