{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/pepe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts@v4.9.3/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts@v4.9.3/token/ERC20/extensions/ERC20Burnable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts@v4.9.3/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts@v4.9.3/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IPancakeSwapV2Factory {\\r\\n    event PairCreated(\\r\\n        address indexed token0,\\r\\n        address indexed token1,\\r\\n        address pair,\\r\\n        uint256\\r\\n    );\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) external view returns (address pair);\\r\\n\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n\\r\\n    function createPair(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\ninterface IPancakeSwapV2Pair {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (address);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n    event Burn(\\r\\n        address indexed sender,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint256 amount0In,\\r\\n        uint256 amount1In,\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function kLast() external view returns (uint256);\\r\\n\\r\\n    function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n    function burn(\\r\\n        address to\\r\\n    ) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\\r\\ninterface IPancakeSwapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function quote(\\r\\n        uint256 amountA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) external pure returns (uint256 amountB);\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountOut);\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint256 amountOut,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountIn);\\r\\n\\r\\n    function getAmountsOut(\\r\\n        uint256 amountIn,\\r\\n        address[] calldata path\\r\\n    ) external view returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(\\r\\n        uint256 amountOut,\\r\\n        address[] calldata path\\r\\n    ) external view returns (uint256[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IPancakeSwapV2Router02 is IPancakeSwapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ncontract MBGBToken is ERC20, ERC20Burnable, Ownable {\\r\\n    mapping(address => address) public Team;\\r\\n    mapping(address => bool) public DEXs;\\r\\n    mapping(address => bool) public Excludes;\\r\\n    mapping(address => bool) public WithLimits;\\r\\n    address public market;\\r\\n    bool public needFee;\\r\\n    struct DividendStatus {\\r\\n        uint8 counter;\\r\\n        uint32 last;\\r\\n    }\\r\\n    mapping(address => DividendStatus) public TeamCounter;\\r\\n\\r\\n    struct DayTrade {\\r\\n        uint256 price;\\r\\n        uint32 time;\\r\\n    }\\r\\n    enum trendState {\\r\\n        normal,\\r\\n        down,\\r\\n        rise\\r\\n    }\\r\\n\\r\\n    struct FeeStat {\\r\\n        uint32 time;\\r\\n        uint yAmount;\\r\\n        uint tAmount;\\r\\n    }\\r\\n\\r\\n    struct TradeCounter {\\r\\n        uint lp;\\r\\n        uint buy;\\r\\n        uint sell;\\r\\n        uint hold;\\r\\n        uint all;\\r\\n        uint u;\\r\\n    }\\r\\n    DayTrade[] public trend;\\r\\n    FeeStat public feeStat;\\r\\n    mapping(address => TradeCounter) public tradeCounter;\\r\\n    IPancakeSwapV2Router02 public uniswapV2Router;\\r\\n    address public uniswapUsdtV2Pair;\\r\\n    address public uniswapFilV2Pair;\\r\\n\\r\\n    mapping(address => address) public holderRank;\\r\\n    uint rankCounter = 0;\\r\\n\\r\\n    mapping(address => uint) public teamLpAmount;\\r\\n\\r\\n    event TeamBouns(address indexed to, uint256 _day);\\r\\n\\r\\n    address public usdtMintAddress = 0x55d398326f99059fF775485246999027B3197955;\\r\\n    address public filAddress = 0x0D8Ce2A99Bb6e3B7Db580eD848240e4a0F9aE153;\\r\\n\\r\\n    //TODO: debug\\r\\n    // address public usdtMintAddress = 0xaB1a4d4f1D656d2450692D237fdD6C7f9146e814;\\r\\n    // address public filAddress = 0xFa60D973F7642B748046464e165A65B7323b0DEE;\\r\\n\\r\\n    constructor(address _market, address _owner) ERC20(\\\"PepeToken\\\", \\\"PepeTest\\\") {\\r\\n        _mint(_owner, 4327000000000 * 10 ** decimals());\\r\\n        _mint(address(this), 428373000000000 * 10 ** decimals());\\r\\n        market = _market;\\r\\n        feeStat = FeeStat(uint32(block.timestamp), 0, 0);\\r\\n        //TODO:debug\\r\\n        // IPancakeSwapV2Router02 _uniswapV2Router = IPancakeSwapV2Router02(\\r\\n        //     0xD99D1c33F9fC3444f8101754aBC46c52416550D1\\r\\n        // );\\r\\n        IPancakeSwapV2Router02 _uniswapV2Router = IPancakeSwapV2Router02(\\r\\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\\r\\n        );\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n\\r\\n        uniswapUsdtV2Pair = IPancakeSwapV2Factory(_uniswapV2Router.factory())\\r\\n            .createPair(address(this), usdtMintAddress);\\r\\n        DEXs[uniswapUsdtV2Pair] = true;\\r\\n\\r\\n        uniswapFilV2Pair = IPancakeSwapV2Factory(_uniswapV2Router.factory())\\r\\n            .createPair(address(this), filAddress);\\r\\n        DEXs[uniswapFilV2Pair] = true;\\r\\n\\r\\n        Excludes[address(this)] = true;\\r\\n        needFee = true;\\r\\n    }\\r\\n\\r\\n    function updateTeamLp(\\r\\n        address _sender,\\r\\n        uint _amount,\\r\\n        bool _positive\\r\\n    ) internal {\\r\\n        address _top = Team[_sender];\\r\\n        uint _counter = 0;\\r\\n\\r\\n        while (_top != address(0) && _counter < 10) {\\r\\n            if (_positive) {\\r\\n                teamLpAmount[_top] += _amount;\\r\\n            } else {\\r\\n                if (teamLpAmount[_top] > _amount) {\\r\\n                    teamLpAmount[_top] -= _amount;\\r\\n                }\\r\\n            }\\r\\n            _counter++;\\r\\n            _top = Team[_top];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    uint rankLimiter = 100;\\r\\n    uint timeLine = 10 minutes;\\r\\n\\r\\n\\r\\n    function sortRank(address _holder) internal {\\r\\n        uint _amount = balanceOf(_holder);\\r\\n        address _last = address(0);\\r\\n        uint _counter = 0;\\r\\n        address _rank = holderRank[_last];\\r\\n        while (_counter < rankLimiter) {\\r\\n            if (_rank == address(0)) {\\r\\n                holderRank[_last] = _holder;\\r\\n                rankCounter += 1;\\r\\n                return;\\r\\n            }\\r\\n            if (_amount > balanceOf(_rank)) {\\r\\n                holderRank[_last] = _holder;\\r\\n                holderRank[_holder] = _rank;\\r\\n                if (rankCounter < rankLimiter) {\\r\\n                    rankCounter += 1;\\r\\n                }\\r\\n                return;\\r\\n            }\\r\\n            if (_holder == _rank) {\\r\\n                return;\\r\\n            }\\r\\n            _last = _rank;\\r\\n            _rank = holderRank[_rank];\\r\\n            _counter++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function checkRank(address _holder) public view returns (bool) {\\r\\n        address _last = address(0);\\r\\n        address _rank = holderRank[_last];\\r\\n        uint _counter = 0;\\r\\n        while (_rank != address(0) && _counter < rankLimiter) {\\r\\n            if (_rank == _holder) {\\r\\n                return true;\\r\\n            }\\r\\n            _last = _rank;\\r\\n            _rank = holderRank[_rank];\\r\\n            _counter++;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function listRank() public view returns (address[] memory) {\\r\\n        address[] memory _list = new address[](rankCounter);\\r\\n        address _last = address(0);\\r\\n        address _rank = holderRank[_last];\\r\\n        uint256 _counter = 0;\\r\\n        while (_counter < rankCounter) {\\r\\n            _list[_counter] = _rank;\\r\\n            _last = _rank;\\r\\n            _rank = holderRank[_rank];\\r\\n            _counter++;\\r\\n        }\\r\\n        return _list;\\r\\n    }\\r\\n\\r\\n    function addDex(address _pair) external onlyOwner {\\r\\n        if (DEXs[_pair]) {\\r\\n            DEXs[_pair] = false;\\r\\n        } else {\\r\\n            DEXs[_pair] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateLimits(address _owner) external onlyOwner {\\r\\n        if (WithLimits[_owner]) {\\r\\n            WithLimits[_owner] = false;\\r\\n        } else {\\r\\n            WithLimits[_owner] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateExcludes(address _owner) external onlyOwner {\\r\\n        if (Excludes[_owner]) {\\r\\n            Excludes[_owner] = false;\\r\\n        } else {\\r\\n            Excludes[_owner] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateFee() external onlyOwner {\\r\\n        needFee = !needFee;\\r\\n    }\\r\\n\\r\\n    function teamDividend(address _owner, address to, uint256 amount) internal {\\r\\n        if (amount >= 1000 ether && Team[to] == address(0)) {\\r\\n            Team[to] = _owner;\\r\\n            DividendStatus storage _status = TeamCounter[_owner];\\r\\n            if (_status.counter < 5) {\\r\\n                _status.counter += 1;\\r\\n            }\\r\\n            if (balanceOf(address(this)) > 2000 ether) {\\r\\n                _transfer(address(this), _owner, 2000 ether);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function queryDays(uint32 _last) public view returns (uint32) {\\r\\n        return (uint32(block.timestamp) - _last) / uint32(timeLine);\\r\\n    }\\r\\n\\r\\n    function checkTrend() internal view returns (trendState) {\\r\\n        uint256 t_len = trend.length;\\r\\n        if (t_len > 2) {\\r\\n            DayTrade memory _a = trend[t_len - 1];\\r\\n            DayTrade memory _b = trend[t_len - 2];\\r\\n            DayTrade memory _c = trend[t_len - 3];\\r\\n            if (_c.price > _b.price) {\\r\\n                if (_b.price > _a.price) {\\r\\n                    return trendState.down;\\r\\n                } else {\\r\\n                    return trendState.rise;\\r\\n                }\\r\\n            } else {\\r\\n                return trendState.normal;\\r\\n            }\\r\\n        } else {\\r\\n            return trendState.normal;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateTrend() internal {\\r\\n        uint256 price = queryPrice();\\r\\n        if (price > 0) {\\r\\n            if (trend.length > 0) {\\r\\n                DayTrade memory tLast = trend[trend.length - 1];\\r\\n                uint diff = queryDays(tLast.time);\\r\\n                if (diff < 1) {\\r\\n                    return;\\r\\n                }\\r\\n            }\\r\\n            if (trend.length > 2) {\\r\\n                trend[0] = trend[1];\\r\\n                trend[1] = trend[2];\\r\\n                trend[2] = DayTrade(price, uint32(block.timestamp));\\r\\n            } else {\\r\\n                trend.push(DayTrade(price, uint32(block.timestamp)));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function queryPrice() public view returns (uint256) {\\r\\n        uint256 _a = ((IERC20(usdtMintAddress).balanceOf(uniswapUsdtV2Pair)) *\\r\\n            1e18);\\r\\n        uint256 _b = (IERC20(address(this)).balanceOf(uniswapUsdtV2Pair));\\r\\n        if (_a > 0 && _b > 0) {\\r\\n            return _a / _b;\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function queryTrendLen() external view returns (uint256) {\\r\\n        return trend.length;\\r\\n    }\\r\\n\\r\\n    // function queryLiquidity(\\r\\n    //     address _owner\\r\\n    // ) public view returns (uint256 amount) {\\r\\n    //     IPancakeSwapV2Pair _pair = IPancakeSwapV2Pair(uniswapUsdtV2Pair);\\r\\n    //     uint256 balance0 = balanceOf(address(_pair));\\r\\n    //     uint256 liquidity = _pair.balanceOf(_owner);\\r\\n    //     uint256 total = _pair.totalSupply();\\r\\n    //     if (balance0 > 0 && liquidity > 0 && total > 0) {\\r\\n    //         amount = (balance0 * liquidity) / total;\\r\\n    //         return amount;\\r\\n    //     }\\r\\n    //     IPancakeSwapV2Pair _pair2 = IPancakeSwapV2Pair(uniswapFilV2Pair);\\r\\n    //     uint256 balance1 = balanceOf(address(_pair2));\\r\\n    //     uint256 liquidity1 = _pair2.balanceOf(_owner);\\r\\n    //     uint256 total1 = _pair2.totalSupply();\\r\\n    //     if (balance1 > 0 && liquidity1 > 0 && total1 > 0) {\\r\\n    //         amount = (balance1 * liquidity1) / total1;\\r\\n    //         return amount;\\r\\n    //     }\\r\\n    //     return 0;\\r\\n    // }\\r\\n\\r\\n    function queryLiquBalance(address _holder) public view returns (uint) {\\r\\n        uint256 _liquidityU = IERC20(uniswapUsdtV2Pair).balanceOf(_holder);\\r\\n        uint256 _liquidityF = IERC20(uniswapFilV2Pair).balanceOf(_holder);\\r\\n        if (_liquidityU > _liquidityF) {\\r\\n            return _liquidityU;\\r\\n        } else if (_liquidityF > _liquidityU) {\\r\\n            return _liquidityF;\\r\\n        } else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function burnFee(uint _amount) internal {\\r\\n        uint256 _balance0 = balanceOf(address(uniswapUsdtV2Pair));\\r\\n        uint256 _balance1 = balanceOf(address(uniswapFilV2Pair));\\r\\n        if (_balance0 > _balance1) {\\r\\n            _burn(address(uniswapUsdtV2Pair), _amount);\\r\\n            IPancakeSwapV2Pair(uniswapUsdtV2Pair).sync();\\r\\n        } else {\\r\\n            _burn(address(uniswapFilV2Pair), _amount);\\r\\n            IPancakeSwapV2Pair(uniswapFilV2Pair).sync();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getDividend(address _owner) internal {\\r\\n        TradeCounter storage _trade = tradeCounter[_owner];\\r\\n        if (_trade.u == 0) {\\r\\n            return;\\r\\n        }\\r\\n        uint _uprice = queryPrice();\\r\\n        if (_uprice == 0) {\\r\\n            return;\\r\\n        }\\r\\n        if (_trade.all * _uprice >= _trade.u * 2) {\\r\\n            return;\\r\\n        }\\r\\n        trendState _tState = checkTrend();\\r\\n        if (_tState == trendState.down) {\\r\\n            return;\\r\\n        }\\r\\n        uint256 _amount = _trade.u / _uprice;\\r\\n        uint256 _dividend;\\r\\n        DividendStatus storage _status = TeamCounter[_owner];\\r\\n        if (_status.counter > 0) {\\r\\n            uint _rate = 0;\\r\\n            if (_status.counter < 3) {\\r\\n                _rate = 1;\\r\\n            } else if (_status.counter < 5) {\\r\\n                _rate = 3;\\r\\n            } else {\\r\\n                _rate = 8;\\r\\n            }\\r\\n            _dividend = (_amount * _rate) / 1000;\\r\\n        } else {\\r\\n            _dividend = _amount / 1000;\\r\\n        }\\r\\n\\r\\n        uint32 _days = queryDays(_status.last);\\r\\n        if (_status.last == 0) {\\r\\n            _days = 1;\\r\\n        }\\r\\n        if (_days > 0) {\\r\\n            if (balanceOf(address(this)) > _dividend) {\\r\\n                if (checkRank(_owner)) {\\r\\n                    _dividend += _amount / 1000;\\r\\n                }\\r\\n                uint _team_rights = checkTeamRrights(_owner);\\r\\n                if (_team_rights > 0) {\\r\\n                    _dividend += (_team_rights * _amount) / 1000;\\r\\n                }\\r\\n\\r\\n                uint _all = _dividend * uint256(_days);\\r\\n                _transfer(address(this), _owner, _all);\\r\\n                _trade.all += _all;\\r\\n                _status.last = uint32(block.timestamp);\\r\\n                emit TeamBouns(_owner, _days);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // uint temaBounsLine = 10000 ether;\\r\\n    uint temaBounsLine = 1 ether;\\r\\n\\r\\n    function checkTeamRrights(address _holder) public view returns (uint) {\\r\\n        uint _amount = teamLpAmount[_holder];\\r\\n        uint _uTotal = IERC20(usdtMintAddress).balanceOf(uniswapUsdtV2Pair);\\r\\n        uint _lpTotal = IERC20(uniswapUsdtV2Pair).totalSupply();\\r\\n        uint _uAmount = (_amount * _uTotal) / _lpTotal;\\r\\n        if (_uAmount >= temaBounsLine && _uAmount < temaBounsLine*10) {\\r\\n            return 1;\\r\\n        } else if (_uAmount >= temaBounsLine*10 && _uAmount < temaBounsLine*100) {\\r\\n            return 2;\\r\\n        } else if (_uAmount > temaBounsLine*100) {\\r\\n            return 3;\\r\\n        } else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transfer(\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _transfer(owner, to, amount);\\r\\n        if (!DEXs[owner] && !DEXs[to]) {\\r\\n            teamDividend(owner, to, amount);\\r\\n            getDividend(owner);\\r\\n\\r\\n            TradeCounter storage _trade = tradeCounter[owner];\\r\\n            uint _balance = queryLiquBalance(owner);\\r\\n            if (_trade.lp < _balance) {\\r\\n                _trade.hold += _trade.sell;\\r\\n                if (feeStat.tAmount <= _trade.sell) {\\r\\n                    feeStat.tAmount = 0;\\r\\n                } else {\\r\\n                    feeStat.tAmount -= _trade.sell;\\r\\n                }\\r\\n                _trade.lp = _balance;\\r\\n                _trade.u += queryPrice() * _trade.sell;\\r\\n                updateTeamLp(owner, _balance - _trade.lp, true);\\r\\n            }\\r\\n            if (feeStat.yAmount > 0) {\\r\\n                burnFee(feeStat.yAmount);\\r\\n                feeStat.yAmount = 0;\\r\\n            }\\r\\n            sortRank(to);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function echoCoin(\\r\\n        address _holder,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner returns (bool) {\\r\\n        IERC20(_holder).transfer(recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 amount) internal override {\\r\\n        super._burn(account, amount);\\r\\n        if (totalSupply() <= 420690000 ether) {\\r\\n            needFee = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // function checkIsLiquAdd(address _holder, uint _amount) internal {\\r\\n    //     uint _balance = queryLiquBalance(_holder);\\r\\n    //     if (_balance != 0) {\\r\\n    //         uint32 _diff = queryDays(feeStat.time);\\r\\n    //         if (_diff > 0) {\\r\\n    //             feeStat.yAmount = feeStat.tAmount;\\r\\n    //             feeStat.tAmount = 0;\\r\\n    //             feeStat.time = uint32(block.timestamp);\\r\\n    //         }\\r\\n    //         feeStat.tAmount += _amount;\\r\\n    //     }\\r\\n    // }\\r\\n\\r\\n    function updateTrade(uint8 _type, address _sender, uint _amount) internal {\\r\\n        uint _balance = queryLiquBalance(_sender);\\r\\n        TradeCounter storage _trade = tradeCounter[_sender];\\r\\n        if (_balance != 0 && _balance == _trade.lp) {\\r\\n            if (_type == 1) {\\r\\n                uint32 _diff = queryDays(feeStat.time);\\r\\n                if (_diff > 0) {\\r\\n                    feeStat.yAmount += feeStat.tAmount;\\r\\n                    feeStat.tAmount = 0;\\r\\n                    feeStat.time = uint32(block.timestamp);\\r\\n                }\\r\\n                feeStat.tAmount += _amount;\\r\\n            }\\r\\n        } else if (_balance != _trade.lp) {\\r\\n            if (_balance < _trade.lp) {\\r\\n                if (_trade.buy > _trade.hold) {\\r\\n                    _trade.hold = 0;\\r\\n                } else {\\r\\n                    _trade.hold -= _trade.buy;\\r\\n                }\\r\\n                uint _uamount = queryPrice() * _trade.buy;\\r\\n                if (_uamount > _trade.u) {\\r\\n                    _trade.u = 0;\\r\\n                } else {\\r\\n                    _trade.u -= _uamount;\\r\\n                }\\r\\n                updateTeamLp(_sender, _trade.lp - _balance, false);\\r\\n            } else if (_trade.lp < _balance) {\\r\\n                _trade.hold += _trade.sell;\\r\\n                if (feeStat.tAmount <= _trade.sell) {\\r\\n                    feeStat.tAmount = 0;\\r\\n                } else {\\r\\n                    feeStat.tAmount -= _trade.sell;\\r\\n                }\\r\\n                _trade.u += queryPrice() * _trade.sell;\\r\\n                updateTeamLp(_sender, _balance - _trade.lp, true);\\r\\n            }\\r\\n            _trade.lp = _balance;\\r\\n        }\\r\\n        if (_type == 0) {\\r\\n            _trade.buy = _amount;\\r\\n        } else {\\r\\n            _trade.sell = _amount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal override {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(!WithLimits[from], \\\"limited account\\\");\\r\\n        if (!Excludes[from] && !Excludes[to] && needFee) {\\r\\n            if (DEXs[from] || DEXs[to]) {\\r\\n                updateTrend();\\r\\n                uint256 fee1 = (amount * 5) / 100;\\r\\n                uint256 fee2 = (amount * 3) / 100;\\r\\n                amount -= fee1 + fee2;\\r\\n                if (DEXs[from]) {\\r\\n                    if (Team[to] == address(0)) {\\r\\n                        super._transfer(from, market, fee1);\\r\\n                    } else {\\r\\n                        super._transfer(from, Team[to], fee1);\\r\\n                    }\\r\\n                    updateTrade(0, to, amount);\\r\\n                    sortRank(to);\\r\\n                } else {\\r\\n                    if (Team[from] == address(0)) {\\r\\n                        super._transfer(from, market, fee1);\\r\\n                    } else {\\r\\n                        super._transfer(from, Team[from], fee1);\\r\\n                    }\\r\\n                    updateTrade(1, from, amount);\\r\\n\\r\\n                }\\r\\n                super._transfer(from, market, fee2);\\r\\n            }\\r\\n        }\\r\\n        super._transfer(from, to, amount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@v4.9.3/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@v4.9.3/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@v4.9.3/token/ERC20/extensions/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@v4.9.3/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@v4.9.3/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@v4.9.3/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"remappings\": []\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"TeamBouns\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"DEXs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Excludes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Team\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TeamCounter\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"counter\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"last\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"WithLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"addDex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"checkRank\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"checkTeamRrights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"echoCoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeStat\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"time\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"yAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"filAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"holderRank\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listRank\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"market\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"needFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_last\",\"type\":\"uint32\"}],\"name\":\"queryDays\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"queryLiquBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryTrendLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamLpAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradeCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"all\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"u\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"time\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapFilV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapUsdtV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IPancakeSwapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"updateExcludes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"updateLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtMintAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MBGBToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008e98ea5385723cf79ef25ed6f4fdc409a1b31c260000000000000000000000007deec4c3324b20571f2600a74c1f710c18510856", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://07af47c6ccb67d3bcec3bbd424c06eccf7fd3354e47be57e244027648eb1af59"}