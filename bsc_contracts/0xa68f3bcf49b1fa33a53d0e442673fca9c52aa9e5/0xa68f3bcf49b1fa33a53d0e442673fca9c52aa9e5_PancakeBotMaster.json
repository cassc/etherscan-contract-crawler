{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/PancakeBotMaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interface/IPancakeRouter.sol\\\";\\nimport \\\"./interface/IPancakeFactory.sol\\\";\\nimport \\\"./interface/IPancakePair.sol\\\";\\nimport \\\"./interface/IPancakeZapV1.sol\\\";\\nimport \\\"./interface/IPancakeswapFarm.sol\\\";\\n\\ncontract PancakeBotMaster is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    struct Exchange {\\n        address quoteToken;\\n        address baseToken;\\n        bool wbnbCross;\\n    }\\n\\n    struct StaticPoolInfo {\\n        string poolName;\\n        uint256 pancakePID;\\n        address lpToken; // Address of the want token.\\n        Exchange busdExchange;\\n        Exchange cakeExchange;\\n    }\\n\\n    struct PoolBalance {\\n        uint256 sharesTotal;\\n        uint256 lpLockedTotal;\\n        uint256 cake;\\n    }\\n\\n    struct AutoCompound {\\n        bool enabled;\\n        uint256 lastEarnBlock;\\n    }\\n\\n    struct PoolInfo {\\n        string poolName;\\n        uint256 pancakePID;\\n        address lpToken; // Address of the want token.\\n        Exchange busdExchange;\\n        Exchange cakeExchange;\\n        AutoCompound autoCompound;\\n        PoolBalance balance;\\n    }\\n\\n    struct UserInfo {\\n        uint256 shares;\\n        uint256 lpBalance;\\n    }\\n\\n    IPancakeFactory public constant factory =\\n        IPancakeFactory(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73);\\n    IPancakeZapV1 public constant zap =\\n        IPancakeZapV1(0xD4c4a7C55c9f7B3c48bafb6E8643Ba79F42418dF);\\n    IPancakeswapFarm public constant pancakeMasterChefV2 =\\n        IPancakeswapFarm(0xa5f8C5Dbd5F286960b9d90548680aE5ebFf07652); // pancake MasterChefV2\\n    address private constant routerAddress =\\n        0x10ED43C718714eb63d5aA57B78B54704E256024E;\\n    address public constant wbnbAddress =\\n        0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n    address public constant busdAddress =\\n        0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\\n    address public constant cakeAddress =\\n        0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82; //CAKE\\n    address public constant ethAddress =\\n        0x2170Ed0880ac9A755fd29B2688956BD959F933F8; //ETH\\n\\n    // Maximum integer (used for managing allowance)\\n    uint256 public constant MAX_INT = 2**256 - 1;\\n    // Minimum amount for a swap (derived from PancakeSwap)\\n    uint256 public constant MINIMUM_CAKE_AMOUNT = 1e12;\\n    uint256 public constant MAX_BP = 1000;\\n    uint256 public swapSlippageFactorBP = 900; // 90%\\n    uint256 public feesBP = 30; //3%\\n    uint256 public constant MAX_FEE_BP = 100; // 10%\\n    uint256 public busdFee = 3 ether;\\n\\n    mapping(address => bool) public admins;\\n\\n    PoolInfo[] public poolInfo; // Info of each pool.\\n    //       user              pid       shares/lpBalance\\n    mapping(address => mapping(uint256 => UserInfo)) public userInfo;\\n    mapping(address => uint256) public balance;\\n    mapping(uint256 => bool) public pancakePidAlreadyAdded;\\n\\n    event AddPool(\\n        uint256 indexed pid,\\n        uint256 indexed pancakePID,\\n        bool isAutoCompound\\n    );\\n    event PoolAutoCompound(uint256 indexed pid, bool isAutoCompound);\\n    event Deposit(address user, uint256 amount);\\n    event Withdraw(address user, uint256 amount);\\n    event CreateLP(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 busdAmount,\\n        uint256 lpCreated\\n    );\\n    event RemoveLP(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 busdAmount,\\n        uint256 lpRemoved\\n    );\\n    event Stake(address indexed user, uint256 indexed pid, uint256 amount);\\n    event UnStake(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyUnStake(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n\\n    modifier isEOA() {\\n        uint256 size;\\n        address sender = msg.sender;\\n        assembly {\\n            size := extcodesize(sender)\\n        }\\n        require(size == 0 && msg.sender == tx.origin, \\\"human only\\\");\\n        _;\\n    }\\n\\n    modifier onlyBotsOrUser(address sender) {\\n        require(\\n            sender == msg.sender || admins[msg.sender],\\n            \\\"not allowed\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier correctPID(uint256 pid) {\\n        require(pid < poolInfo.length, \\\"bad pid\\\");\\n        _;\\n    }\\n\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    function setSwapSlippageFactorBP(uint256 _swapSlippageFactorBP)\\n        external\\n        onlyOwner\\n    {\\n        require(_swapSlippageFactorBP < MAX_BP, \\\"should be < MAX_BP\\\");\\n        swapSlippageFactorBP = _swapSlippageFactorBP;\\n    }\\n\\n    function setFeesBP(uint256 _feesBP) external onlyOwner {\\n        require(_feesBP < MAX_FEE_BP, \\\"should be < MAX_FEE_BP\\\");\\n        feesBP = _feesBP;\\n    }\\n\\n    function setBUSDfee(uint256 _busdFee) external onlyOwner {\\n        require(_busdFee < 10 ether, \\\"should be < 10 BUSD\\\");\\n        busdFee = _busdFee;\\n    }\\n\\n    function addAdmin(address admin,bool allowed) external onlyOwner {\\n        admins[admin]=allowed;\\n    }\\n\\n    function setPoolAutoCompound(uint256 pid, bool isAutoCompound)\\n        external\\n        correctPID(pid)\\n        onlyOwner\\n    {\\n        poolInfo[pid].autoCompound.enabled = isAutoCompound;\\n        emit PoolAutoCompound(pid, isAutoCompound);\\n    }\\n\\n    /// @notice Add a new pool. Can only be called by the owner.\\n    /// DO NOT add the same pancake PID more than once.\\n    /// @param _pancakePID pancake PID.\\n    /// @param _isAutoCompound enable autoCompound logic.\\n    /// @param _ignoreErrors without revert\\n    function addPool(\\n        uint256 _pancakePID,\\n        bool _isAutoCompound,\\n        bool _ignoreErrors\\n    ) external onlyOwner {\\n        StaticPoolInfo memory pool = getStaticPancakePoolProperties(\\n            _pancakePID\\n        );\\n\\n        if (\\n            pool.busdExchange.quoteToken != address(0) &&\\n            pool.cakeExchange.quoteToken != address(0)\\n        ) {\\n            pancakePidAlreadyAdded[_pancakePID] = true;\\n            PoolInfo memory extPool;\\n            assembly {\\n                extPool := pool\\n            }\\n            extPool.autoCompound.enabled = _isAutoCompound;\\n            extPool.autoCompound.lastEarnBlock = block.number;\\n            extPool.balance = PoolBalance(0, 0, 0);\\n            poolInfo.push(extPool);\\n            emit AddPool(poolInfo.length - 1, _pancakePID, _isAutoCompound);\\n        } else if (!_ignoreErrors) {\\n            require(\\n                pancakePidAlreadyAdded[_pancakePID] == false,\\n                \\\"already added\\\"\\n            );\\n\\n            require(\\n                pool.pancakePID < pancakeMasterChefV2.poolLength(),\\n                \\\"pool not exist\\\"\\n            );\\n            require(\\n                pancakeMasterChefV2.lpToken(_pancakePID) != address(0),\\n                \\\"lpToken is zero\\\"\\n            );\\n            PancakePoolInfo memory ppinfo = pancakeMasterChefV2.poolInfo(\\n                pool.pancakePID\\n            );\\n            require(\\n                ppinfo.isRegular,\\n                \\\"special pool!\\\"\\n            );\\n\\n            require(\\n                pool.busdExchange.quoteToken != address(0),\\n                \\\"busd-qToken not found\\\"\\n            );\\n            revert(\\\"cake-qToken not found\\\");\\n        }\\n    }\\n\\n    function _swap(uint256 _amountIn, address[] memory _path)\\n        internal\\n        returns (uint256[] memory swapedAmounts)\\n    {\\n        IERC20(_path[0]).safeIncreaseAllowance(routerAddress, _amountIn);\\n\\n        uint256[] memory amounts = IPancakeRouter02(routerAddress)\\n            .getAmountsOut(_amountIn, _path);\\n        uint256 amountOut = (amounts[amounts.length - 1] *\\n            swapSlippageFactorBP) / MAX_BP;\\n\\n        swapedAmounts = IPancakeRouter02(routerAddress)\\n            .swapExactTokensForTokens(\\n                _amountIn,\\n                amountOut,\\n                _path,\\n                address(this),\\n                block.timestamp\\n            );\\n    }\\n\\n    function _exchange(\\n        uint256 amountIn,\\n        address fromToken,\\n        address toToken,\\n        bool wbnbCross\\n    ) internal returns (uint256 swapedAmtFrom, uint256 swapedAmtTo) {\\n        address[] memory path = new address[](wbnbCross ? 3 : 2);\\n        if (wbnbCross) {\\n            path[0] = fromToken;\\n            path[1] = wbnbAddress;\\n            path[2] = toToken;\\n        } else {\\n            path[0] = fromToken;\\n            path[1] = toToken;\\n        }\\n        uint256[] memory swapedAmounts = _swap(amountIn, path);\\n        swapedAmtFrom = swapedAmounts[0];\\n        swapedAmtTo = swapedAmounts[swapedAmounts.length - 1];\\n    }\\n\\n    /// @param pid PID PID on this contract\\n    /// @param busdAmount used BUSD from the user's balance on the contract\\n    /// @param userAddress user's address\\n    function createLP(\\n        uint256 pid,\\n        uint256 busdAmount,\\n        address userAddress\\n    )\\n        external\\n        nonReentrant\\n        onlyBotsOrUser(userAddress)\\n        correctPID(pid)\\n        returns (uint256 busdSwaped, uint256 lpCreated)\\n    {\\n        require(\\n            balance[userAddress] >= busdAmount,\\n            \\\"exceeds balance\\\"\\n        );\\n\\n        require(\\n            busdAmount>busdFee,\\n            \\\"amount too small\\\"\\n        );\\n\\n        unchecked{busdAmount-=busdFee;}\\n        if(busdFee>0){IERC20(busdAddress).safeTransfer(owner(), busdFee);}\\n\\n        UserInfo storage user = userInfo[userAddress][pid];\\n        PoolInfo memory pool = poolInfo[pid];\\n        uint256 quoteTokenAmt = 0;\\n        if (pool.busdExchange.quoteToken != busdAddress) {\\n            (busdSwaped, quoteTokenAmt) = _exchange(\\n                busdAmount,\\n                busdAddress,\\n                pool.busdExchange.quoteToken,\\n                pool.busdExchange.wbnbCross\\n            );\\n        } else {\\n            busdSwaped = busdAmount;\\n            quoteTokenAmt = busdAmount;\\n        }\\n        uint256 busdSwapedWithFee=busdSwaped+busdFee;\\n        balance[userAddress] -= busdSwapedWithFee;\\n        uint256 balanceBefore = IERC20(pool.lpToken).balanceOf(address(this));\\n        IERC20(pool.busdExchange.quoteToken).safeIncreaseAllowance(\\n            address(zap),\\n            quoteTokenAmt\\n        );\\n        zap.zapInToken(\\n            pool.busdExchange.quoteToken,\\n            quoteTokenAmt,\\n            pool.lpToken,\\n            0\\n        );\\n        lpCreated =\\n            IERC20(pool.lpToken).balanceOf(address(this)) -\\n            balanceBefore;\\n        user.lpBalance += lpCreated;\\n\\n        emit CreateLP(userAddress, pid, busdSwapedWithFee, lpCreated);\\n    }\\n\\n    function removeLP(uint256 pid, address userAddress)\\n        external\\n        nonReentrant\\n        onlyBotsOrUser(userAddress)\\n        correctPID(pid)\\n        returns (uint256 busdSwaped, uint256 lpRemoved)\\n    {\\n        UserInfo storage user = userInfo[userAddress][pid];\\n        require(user.lpBalance > 0, \\\"lpBalance is 0\\\");\\n        lpRemoved = user.lpBalance;\\n\\n        PoolInfo memory pool = poolInfo[pid];\\n\\n        uint256 balanceBefore = IERC20(pool.busdExchange.quoteToken).balanceOf(\\n            address(this)\\n        );\\n\\n        IERC20(pool.lpToken).safeIncreaseAllowance(address(zap), lpRemoved);\\n\\n        zap.zapOutToken(\\n            pool.lpToken,\\n            pool.busdExchange.quoteToken,\\n            lpRemoved,\\n            0,\\n            0\\n        );\\n\\n        uint256 quoteTokenOut = IERC20(pool.busdExchange.quoteToken).balanceOf(\\n            address(this)\\n        ) - balanceBefore;\\n        if (pool.busdExchange.quoteToken != busdAddress) {\\n            (,busdSwaped) = _exchange(\\n                quoteTokenOut,\\n                pool.busdExchange.quoteToken,\\n                busdAddress,\\n                pool.busdExchange.wbnbCross\\n            );\\n        } else {\\n            busdSwaped = quoteTokenOut;\\n        }\\n\\n        balance[userAddress] += busdSwaped;\\n        user.lpBalance = 0;\\n        emit RemoveLP(userAddress, pid, busdSwaped, lpRemoved);\\n    }\\n\\n    function getStaticPancakePoolProperties(uint256 _pancakePID)\\n        public\\n        view\\n        returns (StaticPoolInfo memory pool)\\n    {\\n        if (\\n            pancakePidAlreadyAdded[_pancakePID] == false &&\\n            _pancakePID < pancakeMasterChefV2.poolLength()\\n        ) {\\n            pool.lpToken = pancakeMasterChefV2.lpToken(_pancakePID);\\n            PancakePoolInfo memory ppinfo = pancakeMasterChefV2.poolInfo(\\n                _pancakePID\\n            );\\n            if (pool.lpToken != address(0) && ppinfo.isRegular) {\\n                pool.pancakePID = _pancakePID;\\n                address token0 = IPancakePair(pool.lpToken).token0();\\n                address token1 = IPancakePair(pool.lpToken).token1();\\n\\n                address[] memory _quoteTokensBUSD = new address[](7);\\n                _quoteTokensBUSD[\\n                    0\\n                ] = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; //BUSD\\n                _quoteTokensBUSD[\\n                    1\\n                ] = 0x55d398326f99059fF775485246999027B3197955; //USDT\\n                _quoteTokensBUSD[\\n                    2\\n                ] = 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d; //USDC\\n                _quoteTokensBUSD[\\n                    3\\n                ] = 0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3; //DAI\\n                _quoteTokensBUSD[\\n                    4\\n                ] = 0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c; //BTCB\\n                _quoteTokensBUSD[\\n                    5\\n                ] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c; //WBNB\\n                _quoteTokensBUSD[\\n                    6\\n                ] = 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82; //CAKE\\n\\n                pool.busdExchange = _getQuoteBaseTokens(\\n                    token0,\\n                    token1,\\n                    _quoteTokensBUSD\\n                );\\n\\n                if (pool.busdExchange.quoteToken != address(0)) {\\n                    pool.poolName = string.concat(\\n                        IERC20Metadata(pool.busdExchange.quoteToken).symbol(),\\n                        \\\"-\\\",\\n                        IERC20Metadata(pool.busdExchange.baseToken).symbol()\\n                    );\\n\\n                    address[] memory _quoteTokensCAKE = new address[](4);\\n                    _quoteTokensCAKE[\\n                        0\\n                    ] = 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82; //CAKE\\n                    _quoteTokensCAKE[\\n                        1\\n                    ] = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; //BUSD\\n                    _quoteTokensCAKE[\\n                        2\\n                    ] = 0x55d398326f99059fF775485246999027B3197955; //USDT\\n                    _quoteTokensCAKE[\\n                        3\\n                    ] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c; //WBNB\\n\\n                    pool.cakeExchange = _getQuoteBaseTokens(\\n                        token0,\\n                        token1,\\n                        _quoteTokensCAKE\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    function _getQuoteBaseTokens(\\n        address token0,\\n        address token1,\\n        address[] memory _qTokens\\n    ) internal view returns (Exchange memory ex) {\\n        for (uint256 i = 0; i < _qTokens.length; i++) {\\n            if (_qTokens[i] == token0) {\\n                ex.quoteToken = token0;\\n                ex.baseToken = token1;\\n                break;\\n            }\\n            if (_qTokens[i] == token1) {\\n                ex.quoteToken = token1;\\n                ex.baseToken = token0;\\n                break;\\n            }\\n        }\\n        if (ex.quoteToken == address(0)) {\\n            ex.wbnbCross = true;\\n            if (token0 == ethAddress) {\\n                ex.quoteToken = token0;\\n                ex.baseToken = token1;\\n            } else if (token1 == ethAddress) {\\n                ex.quoteToken = token1;\\n                ex.baseToken = token0;\\n            } else {\\n                address lp0 = factory.getPair(wbnbAddress, token0);\\n                address lp1 = factory.getPair(wbnbAddress, token1);\\n                if (lp0 != address(0) && lp1 != address(0)) {\\n                    (uint112 reserves0_0, uint112 reserves1_0, ) = IPancakePair(\\n                        lp0\\n                    ).getReserves();\\n                    (uint112 reserves0_1, uint112 reserves1_1, ) = IPancakePair(\\n                        lp1\\n                    ).getReserves();\\n                    uint256 wbnbReserves0 = IPancakePair(lp0).token0() ==\\n                        wbnbAddress\\n                        ? reserves0_0\\n                        : reserves1_0;\\n                    uint256 wbnbReserves1 = IPancakePair(lp1).token0() ==\\n                        wbnbAddress\\n                        ? reserves0_1\\n                        : reserves1_1;\\n                    if (wbnbReserves0 > wbnbReserves1) {\\n                        ex.quoteToken = token0;\\n                        ex.baseToken = token1;\\n                    } else {\\n                        ex.quoteToken = token1;\\n                        ex.baseToken = token0;\\n                    }\\n                } else if (lp0 != address(0)) {\\n                    ex.quoteToken = token0;\\n                    ex.baseToken = token1;\\n                } else if (lp1 != address(0)) {\\n                    ex.quoteToken = token1;\\n                    ex.baseToken = token0;\\n                }\\n            }\\n        }\\n    }\\n\\n    // deposit BUSD\\n    function deposit(uint256 amount) external isEOA {\\n        IERC20(busdAddress).safeTransferFrom(msg.sender, address(this), amount);\\n        balance[msg.sender] += amount;\\n        emit Deposit(msg.sender, amount);\\n    }\\n\\n    // withdraw BUSD\\n    function withdraw(uint256 amount,bool all) external {\\n        if(all){amount=balance[msg.sender];}\\n        require(\\n            balance[msg.sender] >= amount,\\n            \\\"exceeds balance\\\"\\n        );\\n        balance[msg.sender] -= amount;\\n        IERC20(busdAddress).safeTransfer(msg.sender, amount);\\n        emit Withdraw(msg.sender, amount);\\n    }\\n\\n    /// @notice deposit to pancake pool.\\n    /// @param pid PID on this contract.\\n    /// @param lpAmount will be taken from the user's balance on this contract\\n    /// @param userAddress user's address\\n    function stake(\\n        uint256 pid,\\n        uint256 lpAmount,\\n        address userAddress\\n    ) external correctPID(pid) onlyBotsOrUser(userAddress) nonReentrant {\\n        UserInfo storage user = userInfo[userAddress][pid];\\n        require(user.lpBalance >= lpAmount, \\\"exceeds balance\\\");\\n        user.lpBalance -= lpAmount;\\n\\n        PoolInfo storage pool = poolInfo[pid];\\n        PoolBalance storage pBalance = pool.balance;\\n\\n        if (lpAmount > 0) {\\n            IERC20(pool.lpToken).safeIncreaseAllowance(\\n                address(pancakeMasterChefV2),\\n                lpAmount\\n            );\\n        }\\n        pBalance.cake += _farm(pool.pancakePID, lpAmount);\\n\\n        if (pBalance.cake > MINIMUM_CAKE_AMOUNT) {\\n            _earn(pid, 0);\\n        } else if (pool.autoCompound.enabled) {\\n            uint256 _pid = getPoolThatNeedsEarnings();\\n            _helpToEarn(_pid);\\n        }\\n\\n        uint256 sharesAdded = 0;\\n        if (pBalance.lpLockedTotal > 0 && pBalance.sharesTotal > 0) {\\n            sharesAdded =\\n                (lpAmount * pBalance.sharesTotal) /\\n                pBalance.lpLockedTotal;\\n        } else {\\n            sharesAdded = lpAmount;\\n        }\\n\\n        pBalance.lpLockedTotal += lpAmount;\\n        pBalance.sharesTotal += sharesAdded;\\n        user.shares += sharesAdded;\\n        emit Stake(userAddress, pid, lpAmount);\\n    }\\n\\n    /// @notice withdraw from pancake pool.\\n    /// @param pid PID on this contract.\\n    /// @param lpAmount withdraw amount\\n    /// @param userAddress user's address\\n    function unstake(\\n        uint256 pid,\\n        uint256 lpAmount,\\n        address userAddress,\\n        bool isEmergency\\n    ) external correctPID(pid) onlyBotsOrUser(userAddress) nonReentrant {\\n        UserInfo storage user = userInfo[userAddress][pid];\\n        require(user.shares > 0, \\\"user.shares is 0\\\");\\n        PoolInfo storage pool = poolInfo[pid];\\n        PoolBalance storage pBalance = pool.balance;\\n\\n        uint256 maxLpAmount = (user.shares * pBalance.lpLockedTotal) /\\n            pBalance.sharesTotal;\\n        if (lpAmount > maxLpAmount) {\\n            lpAmount = maxLpAmount;\\n        }\\n\\n        pBalance.cake += _unfarm(pool.pancakePID, lpAmount);\\n\\n        uint256 sharesRemoved = (lpAmount * pBalance.sharesTotal) /\\n            pBalance.lpLockedTotal;\\n        if (sharesRemoved > user.shares) {\\n            sharesRemoved = user.shares;\\n        }\\n        uint256 bonusLp = 0;\\n        if (!isEmergency) {\\n            if (pBalance.cake > MINIMUM_CAKE_AMOUNT) {\\n                bonusLp = _earn(pid, sharesRemoved);\\n            } else if (pool.autoCompound.enabled) {\\n                uint256 _pid = getPoolThatNeedsEarnings();\\n                _helpToEarn(_pid);\\n            }\\n        }\\n\\n        pBalance.sharesTotal -= sharesRemoved;\\n        pBalance.lpLockedTotal -= lpAmount;\\n        user.shares -= sharesRemoved;\\n        user.lpBalance += lpAmount + bonusLp;\\n        if (isEmergency) {\\n            emit EmergencyUnStake(userAddress, pid, lpAmount);\\n        } else {\\n            emit UnStake(userAddress, pid, lpAmount + bonusLp);\\n        }\\n    }\\n\\n    function _farm(uint256 pancakePID, uint256 lpAmt)\\n        internal\\n        returns (uint256 receivedCake)\\n    {\\n        uint256 cakeBalanceBefore = IERC20(cakeAddress).balanceOf(\\n            address(this)\\n        );\\n        pancakeMasterChefV2.deposit(pancakePID, lpAmt);\\n        receivedCake = (IERC20(cakeAddress).balanceOf(address(this)) -\\n            cakeBalanceBefore);\\n    }\\n\\n    function _unfarm(uint256 pancakePID, uint256 lpAmt)\\n        internal\\n        returns (uint256 receivedCake)\\n    {\\n        uint256 cakeBalanceBefore = IERC20(cakeAddress).balanceOf(\\n            address(this)\\n        );\\n        pancakeMasterChefV2.withdraw(pancakePID, lpAmt);\\n        receivedCake = (IERC20(cakeAddress).balanceOf(address(this)) -\\n            cakeBalanceBefore);\\n    }\\n\\n    /// @notice getting the number of the pool with the oldest earn() time\\n    function getPoolThatNeedsEarnings() public view returns (uint256 _i) {\\n        for (uint256 i = _i + 1; i < poolInfo.length; i++) {\\n            if (\\n                poolInfo[i].autoCompound.enabled &&\\n                poolInfo[i].autoCompound.lastEarnBlock <\\n                poolInfo[_i].autoCompound.lastEarnBlock\\n            ) {\\n                _i = i;\\n            }\\n        }\\n    }\\n\\n    function helpToEarn(uint256 _pid) external nonReentrant {\\n        _helpToEarn(_pid);\\n    }\\n\\n    function _helpToEarn(uint256 _pid) internal {\\n        if (\\n            pancakeMasterChefV2.pendingCake(\\n                poolInfo[_pid].pancakePID,\\n                address(this)\\n            ) > MINIMUM_CAKE_AMOUNT\\n        ) {\\n            // harvest\\n            poolInfo[_pid].balance.cake += _farm(poolInfo[_pid].pancakePID, 0);\\n            _earn(_pid, 0);\\n        } else {\\n            poolInfo[_pid].autoCompound.lastEarnBlock = block.number; // next time\\n        }\\n    }\\n\\n    function _earn(uint256 pid, uint256 userShare)\\n        internal\\n        returns (uint256 userLp)\\n    {\\n        PoolInfo storage pool = poolInfo[pid];\\n        pool.autoCompound.lastEarnBlock = block.number;\\n        if (pool.balance.cake < MINIMUM_CAKE_AMOUNT) {\\n            return 0;\\n        }\\n        uint256 cakeAmt = pool.balance.cake;\\n\\n        cakeAmt = distributeFees(cakeAmt);\\n        uint256 quoteSwapedAmt = cakeAmt;\\n        uint256 cakeSwapedAmt = cakeAmt;\\n\\n        if (pool.cakeExchange.quoteToken != cakeAddress) {\\n            // Converts farm CAKE into quoteToken tokens\\n            (cakeSwapedAmt, quoteSwapedAmt) = _exchange(\\n                cakeAmt,\\n                cakeAddress,\\n                pool.cakeExchange.quoteToken,\\n                pool.cakeExchange.wbnbCross\\n            );\\n        }\\n\\n        uint256 balanceBefore = IERC20(pool.lpToken).balanceOf(address(this));\\n        IERC20(pool.cakeExchange.quoteToken).safeIncreaseAllowance(\\n            address(zap),\\n            quoteSwapedAmt\\n        );\\n        zap.zapInToken(\\n            pool.cakeExchange.quoteToken,\\n            quoteSwapedAmt,\\n            pool.lpToken,\\n            0\\n        );\\n        uint256 lpCreated = IERC20(pool.lpToken).balanceOf(address(this)) -\\n            balanceBefore;\\n        userLp = userShare>0 ? (lpCreated * userShare) / pool.balance.sharesTotal:0;\\n        lpCreated -= userLp;\\n        if (lpCreated > 0) {\\n            IERC20(pool.lpToken).safeIncreaseAllowance(\\n                address(pancakeMasterChefV2),\\n                lpCreated\\n            );\\n        }\\n        pool.balance.cake =\\n            _farm(pool.pancakePID, lpCreated) +\\n            (cakeAmt - cakeSwapedAmt);\\n        pool.balance.lpLockedTotal += lpCreated;\\n    }\\n\\n    function distributeFees(uint256 _earnedAmt) internal returns (uint256) {\\n        if (_earnedAmt > 0) {\\n            uint256 fee = (_earnedAmt * feesBP) / MAX_BP;\\n            IERC20(cakeAddress).safeTransfer(owner(), fee);\\n            _earnedAmt -= fee;\\n        }\\n\\n        return _earnedAmt;\\n    }\\n\\n    function convertLpToBUSD(uint256 pid, uint256 lpAmount)\\n        public\\n        view\\n        returns (uint256 busdAmount)\\n    {\\n        PoolInfo memory pool = poolInfo[pid];\\n\\n        address token0 = IPancakePair(pool.lpToken).token0();\\n        address token1 = IPancakePair(pool.lpToken).token1();\\n        (uint256 reserveA, uint256 reserveB, ) = IPancakePair(pool.lpToken)\\n            .getReserves();\\n        uint256 amount0 = (lpAmount * reserveA) /\\n            IPancakePair(pool.lpToken).totalSupply();\\n        uint256 amount1 = (lpAmount * reserveB) /\\n            IPancakePair(pool.lpToken).totalSupply();\\n        if (amount0 < 1000 || amount1 < 1000) {\\n            return 0;\\n        }\\n        uint256 quoteTokenAmt = 0;\\n        address[] memory expath = new address[](2);\\n        expath[1] = pool.busdExchange.quoteToken;\\n\\n        if (token1 == pool.busdExchange.quoteToken) {\\n            // sell token0\\n            expath[0] = token0;\\n            quoteTokenAmt = amount1 + _calcSwapOut(amount0, expath);\\n        } else {\\n            // sell token1\\n            expath[0] = token1;\\n            quoteTokenAmt = amount0 + _calcSwapOut(amount1, expath);\\n        }\\n\\n        if (pool.busdExchange.quoteToken != busdAddress) {\\n            address[] memory path = new address[](\\n                pool.busdExchange.wbnbCross ? 3 : 2\\n            );\\n            if (pool.busdExchange.wbnbCross) {\\n                path[0] = pool.busdExchange.quoteToken;\\n                path[1] = wbnbAddress;\\n                path[2] = busdAddress;\\n            } else {\\n                path[0] = pool.busdExchange.quoteToken;\\n                path[1] = busdAddress;\\n            }\\n            busdAmount = _calcSwapOut(quoteTokenAmt, path);\\n        } else {\\n            busdAmount = quoteTokenAmt;\\n        }\\n    }\\n\\n    function _calcSwapOut(uint256 amountIn, address[] memory path)\\n        internal\\n        view\\n        returns (uint256 amountOut)\\n    {\\n        uint256[] memory amounts = IPancakeRouter02(routerAddress)\\n            .getAmountsOut(amountIn, path);\\n        amountOut = amounts[amounts.length - 1];\\n    }\\n\\n    function getTVL(uint256 pid) public view returns (uint256) {\\n        return convertLpToBUSD(pid, poolInfo[pid].balance.lpLockedTotal);\\n    }\\n\\n    function getStakedInBUSD(uint256 pid, address userAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        UserInfo storage user = userInfo[userAddress][pid];\\n        uint256 maxLpAmount = (user.shares *\\n            poolInfo[pid].balance.lpLockedTotal) /\\n            poolInfo[pid].balance.sharesTotal;\\n        return convertLpToBUSD(pid, maxLpAmount);\\n    }\\n\\n    function getTotalUserBalanceInBUSD(address userAddress)\\n        public\\n        view\\n        returns (uint256 totalBalance)\\n    {\\n        mapping(uint256 => UserInfo) storage user = userInfo[userAddress];\\n        for (uint256 i = 0; i < poolInfo.length; i++) {\\n            totalBalance += balance[userAddress];\\n            if (user[i].lpBalance > 0) {\\n                totalBalance += convertLpToBUSD(i, user[i].lpBalance);\\n            }\\n            if (user[i].shares > 0) {\\n                totalBalance += getStakedInBUSD(i, userAddress);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/IPancakeswapFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nstruct PancakePoolInfo {\\n        uint256 accCakePerShare;\\n        uint256 lastRewardBlock;\\n        uint256 allocPoint;\\n        uint256 totalBoostedShare;\\n        bool isRegular;\\n}\\n\\ninterface IPancakeswapFarm {\\n    \\n    function lpToken(uint256 _pid) external view returns (address);\\n    function poolInfo(uint256 _pid) external view returns (PancakePoolInfo memory);\\n    function poolLength() external view returns (uint256);\\n    function pendingCake(uint256 _pid, address _user) external view returns (uint256);\\n\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    function userInfo(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/IPancakeZapV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPancakeZapV1 {\\n    /*\\n     * @notice Zap BNB in a WBNB pool (e.g. WBNB/token)\\n     * @param _lpToken: LP token address (e.g. CAKE/BNB)\\n     * @param _tokenAmountOutMin: minimum token amount (e.g. CAKE) to receive in the intermediary swap (e.g. BNB --> CAKE)\\n     */\\n    function zapInBNB(address _lpToken, uint256 _tokenAmountOutMin) external payable;\\n    /*\\n     * @notice Zap a token in (e.g. token/other token)\\n     * @param _tokenToZap: token to zap\\n     * @param _tokenAmountIn: amount of token to swap\\n     * @param _lpToken: LP token address (e.g. CAKE/BUSD)\\n     * @param _tokenAmountOutMin: minimum token to receive (e.g. CAKE) in the intermediary swap (e.g. BUSD --> CAKE)\\n     */\\n    function zapInToken(\\n        address _tokenToZap,\\n        uint256 _tokenAmountIn,\\n        address _lpToken,\\n        uint256 _tokenAmountOutMin\\n    ) external;\\n\\n    /*\\n     * @notice Zap two tokens in, rebalance them to 50-50, before adding them to LP\\n     * @param _token0ToZap: address of token0 to zap\\n     * @param _token1ToZap: address of token1 to zap\\n     * @param _token0AmountIn: amount of token0 to zap\\n     * @param _token1AmountIn: amount of token1 to zap\\n     * @param _lpToken: LP token address (token0/token1)\\n     * @param _tokenAmountInMax: maximum token amount to sell (in token to sell in the intermediary swap)\\n     * @param _tokenAmountOutMin: minimum token to receive in the intermediary swap\\n     * @param _isToken0Sold: whether token0 is expected to be sold (if false, sell token1)\\n     */\\n    function zapInTokenRebalancing(\\n        address _token0ToZap,\\n        address _token1ToZap,\\n        uint256 _token0AmountIn,\\n        uint256 _token1AmountIn,\\n        address _lpToken,\\n        uint256 _tokenAmountInMax,\\n        uint256 _tokenAmountOutMin,\\n        bool _isToken0Sold\\n    ) external;\\n\\n    /*\\n     * @notice Zap 1 token and BNB, rebalance them to 50-50, before adding them to LP\\n     * @param _token1ToZap: address of token1 to zap\\n     * @param _token1AmountIn: amount of token1 to zap\\n     * @param _lpToken: LP token address\\n     * @param _tokenAmountInMax: maximum token amount to sell (in token to sell in the intermediary swap)\\n     * @param _tokenAmountOutMin: minimum token to receive in the intermediary swap\\n     * @param _isToken0Sold: whether token0 is expected to be sold (if false, sell token1)\\n     */\\n    function zapInBNBRebalancing(\\n        address _token1ToZap,\\n        uint256 _token1AmountIn,\\n        address _lpToken,\\n        uint256 _tokenAmountInMax,\\n        uint256 _tokenAmountOutMin,\\n        bool _isToken0Sold\\n    ) external payable;\\n\\n    /*\\n     * @notice Zap a LP token out to receive BNB\\n     * @param _lpToken: LP token address (e.g. CAKE/WBNB)\\n     * @param _lpTokenAmount: amount of LP tokens to zap out\\n     * @param _tokenAmountOutMin: minimum amount to receive (in BNB/WBNB) in the intermediary swap (e.g. CAKE --> BNB)\\n     */\\n    function zapOutBNB(\\n        address _lpToken,\\n        uint256 _lpTokenAmount,\\n        uint256 _tokenAmountOutMin\\n    ) external;\\n\\n    /*\\n     * @notice Zap a LP token out (to receive a token)\\n     * @param _lpToken: LP token address (e.g. CAKE/BUSD)\\n     * @param _tokenToReceive: one of the 2 tokens from the LP (e.g. CAKE or BUSD)\\n     * @param _lpTokenAmount: amount of LP tokens to zap out\\n     * @param _tokenAmountOutMin: minimum token to receive (e.g. CAKE) in the intermediary swap (e.g. BUSD --> CAKE)\\n     */\\n    function zapOutToken(\\n        address _lpToken,\\n        address _tokenToReceive,\\n        uint256 _lpTokenAmount,\\n        uint256 _tokenAmountOutMin,\\n        uint256 _totalTokenAmountOutMin\\n    ) external;\\n\\n    /*\\n     * @notice View the details for single zap\\n     * @dev Use WBNB for _tokenToZap (if BNB is the input)\\n     * @param _tokenToZap: address of the token to zap\\n     * @param _tokenAmountIn: amount of token to zap inputed\\n     * @param _lpToken: address of the LP token\\n     * @return swapAmountIn: amount that is expected to get swapped in intermediary swap\\n     * @return swapAmountOut: amount that is expected to get received in intermediary swap\\n     * @return swapTokenOut: token address of the token that is used in the intermediary swap\\n     */\\n    function estimateZapInSwap(\\n        address _tokenToZap,\\n        uint256 _tokenAmountIn,\\n        address _lpToken\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 swapAmountIn,\\n            uint256 swapAmountOut,\\n            address swapTokenOut\\n        );\\n    /*\\n     * @notice View the details for a rebalancing zap\\n     * @dev Use WBNB for _token0ToZap (if BNB is the input)\\n     * @param _token0ToZap: address of the token0 to zap\\n     * @param _token1ToZap: address of the token0 to zap\\n     * @param _token0AmountIn: amount for token0 to zap\\n     * @param _token1AmountIn: amount for token1 to zap\\n     * @param _lpToken: address of the LP token\\n     * @return swapAmountIn: amount that is expected to get swapped in intermediary swap\\n     * @return swapAmountOut: amount that is expected to get received in intermediary swap\\n     * @return isToken0Sold: whether the token0 is sold (false --> token1 is sold in the intermediary swap)\\n     */\\n    function estimateZapInRebalancingSwap(\\n        address _token0ToZap,\\n        address _token1ToZap,\\n        uint256 _token0AmountIn,\\n        uint256 _token1AmountIn,\\n        address _lpToken\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 swapAmountIn,\\n            uint256 swapAmountOut,\\n            bool sellToken0\\n        );\\n    /*\\n     * @notice View the details for single zap\\n     * @dev Use WBNB for _tokenToReceive (if BNB is the asset to be received)\\n     * @param _lpToken: address of the LP token to zap out\\n     * @param _lpTokenAmount: amount of LP token to zap out\\n     * @param _tokenToReceive: token address to receive\\n     * @return swapAmountIn: amount that is expected to get swapped for intermediary swap\\n     * @return swapAmountOut: amount that is expected to get received for intermediary swap\\n     * @return swapTokenOut: address of the token that is sold in the intermediary swap\\n     */\\n    function estimateZapOutSwap(\\n        address _lpToken,\\n        uint256 _lpTokenAmount,\\n        address _tokenToReceive\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 swapAmountIn,\\n            uint256 swapAmountOut,\\n            address swapTokenOut\\n        );\\n    \\n}\"\r\n    },\r\n    \"/contracts/interface/IPancakeRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\ninterface IPancakeRouter01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\"\r\n    },\r\n    \"/contracts/interface/IPancakePair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.5.0;\\n\\ninterface IPancakePair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\"\r\n    },\r\n    \"/contracts/interface/IPancakeFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPancakeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pancakePID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAutoCompound\",\"type\":\"bool\"}],\"name\":\"AddPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"busdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpCreated\",\"type\":\"uint256\"}],\"name\":\"CreateLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyUnStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAutoCompound\",\"type\":\"bool\"}],\"name\":\"PoolAutoCompound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"busdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpRemoved\",\"type\":\"uint256\"}],\"name\":\"RemoveLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_BP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE_BP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_INT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_CAKE_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pancakePID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isAutoCompound\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_ignoreErrors\",\"type\":\"bool\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cakeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"convertLpToBUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"busdAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"busdAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"createLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"busdSwaped\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpCreated\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IPancakeFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolThatNeedsEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_i\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getStakedInBUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pancakePID\",\"type\":\"uint256\"}],\"name\":\"getStaticPancakePoolProperties\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pancakePID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"wbnbCross\",\"type\":\"bool\"}],\"internalType\":\"struct PancakeBotMaster.Exchange\",\"name\":\"busdExchange\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"wbnbCross\",\"type\":\"bool\"}],\"internalType\":\"struct PancakeBotMaster.Exchange\",\"name\":\"cakeExchange\",\"type\":\"tuple\"}],\"internalType\":\"struct PancakeBotMaster.StaticPoolInfo\",\"name\":\"pool\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getTVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getTotalUserBalanceInBUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"helpToEarn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeMasterChefV2\",\"outputs\":[{\"internalType\":\"contract IPancakeswapFarm\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pancakePidAlreadyAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pancakePID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"wbnbCross\",\"type\":\"bool\"}],\"internalType\":\"struct PancakeBotMaster.Exchange\",\"name\":\"busdExchange\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"wbnbCross\",\"type\":\"bool\"}],\"internalType\":\"struct PancakeBotMaster.Exchange\",\"name\":\"cakeExchange\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lastEarnBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct PancakeBotMaster.AutoCompound\",\"name\":\"autoCompound\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sharesTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpLockedTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cake\",\"type\":\"uint256\"}],\"internalType\":\"struct PancakeBotMaster.PoolBalance\",\"name\":\"balance\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"removeLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"busdSwaped\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpRemoved\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_busdFee\",\"type\":\"uint256\"}],\"name\":\"setBUSDfee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feesBP\",\"type\":\"uint256\"}],\"name\":\"setFeesBP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAutoCompound\",\"type\":\"bool\"}],\"name\":\"setPoolAutoCompound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapSlippageFactorBP\",\"type\":\"uint256\"}],\"name\":\"setSwapSlippageFactorBP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSlippageFactorBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEmergency\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbnbAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"all\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zap\",\"outputs\":[{\"internalType\":\"contract IPancakeZapV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PancakeBotMaster", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}