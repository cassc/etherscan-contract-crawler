{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.4.22 <0.9.0;\r\n\r\ncontract IntegrityChecker {\r\n\r\n  address public owner;\r\n  address[] public authorizedWallets;\r\n  mapping(bytes32 => bytes32) public certifications;\r\n\r\n  constructor() {\r\n    owner = msg.sender;\r\n    authorizedWallets.push(msg.sender);\r\n  }\r\n\r\n  modifier onlyAuthorized {\r\n    bool isAuthorized = false;\r\n    for(uint i=0; i < authorizedWallets.length; i++) {\r\n      if(authorizedWallets[i] == msg.sender) {\r\n        isAuthorized = true;\r\n        _;\r\n      }\r\n    }\r\n    if(!isAuthorized){\r\n      revert(\"only authorized\");\r\n    }\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner, \"only owner\");\r\n    _;\r\n  }\r\n\r\n  function setCertifications(bytes32[2][] memory _uuidsAndHashes) external onlyAuthorized {\r\n    require(_uuidsAndHashes.length > 0, \"empty array error\");\r\n    for(uint i=0; i < _uuidsAndHashes.length; i++) {\r\n      require(certifications[_uuidsAndHashes[i][0]] == 0, \"duplicate key error\");\r\n    }\r\n\r\n    for(uint i=0; i < _uuidsAndHashes.length; i++) {\r\n      certifications[_uuidsAndHashes[i][0]] = _uuidsAndHashes[i][1];\r\n    }\r\n  }\r\n\r\n  function getDuplicatedKeys(bytes32[] memory _uuids) external view returns (bytes32[] memory) {\r\n    bytes32[] memory duplicatedKeys = new bytes32[](_uuids.length);\r\n    for(uint i=0; i < _uuids.length; i++) {\r\n      if(certifications[_uuids[i]] != 0) {\r\n        duplicatedKeys[i] = _uuids[i];\r\n      }\r\n    }\r\n    return duplicatedKeys;\r\n  }\r\n\r\n  function addAuthorizedWallet(address authorizedAddress) external onlyOwner {\r\n    authorizedWallets.push(authorizedAddress);\r\n  }\r\n\r\n  function removeAuthorizedWallet(address authorizedAddress) external onlyOwner {\r\n    for(uint i=0; i < authorizedWallets.length; i++) {\r\n      if(authorizedWallets[i] == authorizedAddress) {\r\n        authorizedWallets[i] = authorizedWallets[authorizedWallets.length - 1];\r\n        authorizedWallets.pop();\r\n        return;\r\n      }\r\n    }\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorizedAddress\",\"type\":\"address\"}],\"name\":\"addAuthorizedWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"authorizedWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"certifications\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_uuids\",\"type\":\"bytes32[]\"}],\"name\":\"getDuplicatedKeys\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorizedAddress\",\"type\":\"address\"}],\"name\":\"removeAuthorizedWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[2][]\",\"name\":\"_uuidsAndHashes\",\"type\":\"bytes32[2][]\"}],\"name\":\"setCertifications\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "IntegrityChecker", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d2967d2ddcca5a2f3755ea9219046f864dbd8d76b473fe1c5a8c3fa5cfc7892d"}