{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2021-06-03\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n  // Empty internal constructor, to prevent people from mistakenly deploying\r\n  // an instance of this contract, which should be used via inheritance.\r\n \r\n\r\n  function _msgSender() internal view returns (address payable) {\r\n    return payable(msg.sender);\r\n  }\r\n\r\n  function _msgData() internal view returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n\r\ncontract SALE is Context{\r\n    \r\n    using SafeMath for uint;\r\n    \r\n    bool public isStart;\r\n    uint public starttime;\r\n    uint constant price = 400;\r\n    uint public period = 1 days;\r\n    mapping(address=>bool) public owner;\r\n    address public Community = 0x2B25E4E047530EF39D5D9b2de4B5b4EAC4D65A0f;\r\n    \r\n    // accumulated sales in number and USDT, accessable to the owner only\r\n    uint private accSales_n;\r\n    uint private accSales_u;\r\n    \r\n    \r\n    //discount rates 80 85 90\r\n    uint[3] public discount;\r\n    //quota for each discount level, 0 accumulated, 1 ceilling\r\n    uint[3] public quota_discount;\r\n    // 20 collaborative franchised\r\n    mapping(bytes32 => bool) public isfranchise;\r\n\r\n    bytes32[50] private referalCode;\r\n    \r\n    \r\n    //USDT payment currency\r\n    address public token = 0x55d398326f99059fF775485246999027B3197955;\r\n    uint decimal = 10**18;\r\n    struct Ledger{\r\n        uint total; // in counts\r\n        uint value; // in money\r\n    }\r\n    \r\n    struct Ledger2{\r\n        uint total;\r\n        uint value;\r\n        uint[3] QatDiscount; // quantity sales at each discount level\r\n    }\r\n   \r\n    \r\n    mapping(bytes32=>Ledger2) public Franchise;\r\n    \r\n    mapping(address=>Ledger) public userInfo;\r\n    \r\n    event Purchase(address indexed buyer, \r\n                   bytes32 referal, \r\n                   uint256 price, uint256 amount, uint256 time);\r\n                   \r\n    \r\n    constructor() {\r\n        owner[_msgSender()] = true;\r\n\r\n        \r\n        discount[0] = 80;\r\n        discount[1] = 85;\r\n        discount[2] = 90;\r\n        \r\n        // quota at each discount for each franchse\r\n        quota_discount[0] = 100;\r\n        quota_discount[1] = 150;\r\n        quota_discount[2] = 250;\r\n        \r\n        \r\n    }\r\n    \r\n    modifier onlyOwner{\r\n        require(owner[_msgSender()], \"only owner\");\r\n        _;\r\n    }\r\n    \r\n  \r\n    function start() external onlyOwner{\r\n        isStart = true;\r\n        starttime = block.timestamp;\r\n    }\r\n    \r\n    \r\n    function setReferalCode(bytes32[50] memory codes) external onlyOwner{\r\n        require(!isStart,\"must set before it started!!!\");\r\n        for(uint i=0; i<50; i++){\r\n            referalCode[i] = codes[i];\r\n            isfranchise[referalCode[i]] = true;\r\n        }\r\n        \r\n    }\r\n    \r\n    \r\n    /**\r\n     * get sales at each discount level for each referal code\r\n    */\r\n    function getter(bytes32 referal, uint d) external view returns(uint){\r\n        return Franchise[referal].QatDiscount[d];\r\n    }\r\n    \r\n    \r\n    function purchase(bytes32 referal,uint amount) external{\r\n        require(isStart,\"Activity not started yet!!\");\r\n        require(isfranchise[referal], \"invalid referal code!!!\");\r\n        require(accSales_n<10000,'total quota depleted');\r\n        require(Franchise[referal].total<1250, 'referal code quota depleted please switch to another'); \r\n        \r\n        // individual limit\r\n        require(userInfo[_msgSender()].total<50, \"one address can purchase up to 50 boxes\");\r\n        require(amount<=10, \"Sorry, cannot purchase more than 10 boxes each time!\");\r\n        \r\n        // quota available total and individually. compare three remaining quota.\r\n        uint quotaRemains1 =  uint(10000).sub(accSales_n);\r\n        uint quotaRemains2 = uint(50).sub(userInfo[_msgSender()].total);\r\n        uint quotaRemains3 = uint(1250).sub(Franchise[referal].total);\r\n        uint maxAmount = quotaRemains2 > quotaRemains1 ? quotaRemains1 : quotaRemains2;\r\n        maxAmount = maxAmount > quotaRemains3 ? quotaRemains3 : maxAmount;\r\n        \r\n        // actual amount the customer can buy, notify the customer the remaining quota!\r\n        uint _amount = amount >= maxAmount ? maxAmount : amount;\r\n    \r\n        // determine actual price\r\n        uint _price = price;\r\n        uint t = block.timestamp;\r\n        uint d = (t - starttime).div(period);\r\n        \r\n        if(d<3){\r\n            _price = discount[d].mul(_price).div(100);\r\n            require(Franchise[referal].QatDiscount[d] < quota_discount[d], 'quota at this discount has been depleted');\r\n            uint temp = quota_discount[d].sub(Franchise[referal].QatDiscount[d]);\r\n            _amount = _amount > temp ? temp : _amount;\r\n            \r\n            IERC20(token).transferFrom(_msgSender(), Community, _amount.mul(320)*decimal);\r\n            if (_price > 320){IERC20(token).transferFrom(_msgSender(),address(this), _amount.mul(_price-320)*decimal);}\r\n            \r\n            Franchise[referal].QatDiscount[d] += _amount; \r\n        }else{\r\n        // transfer to mutual community simultaneously, revenue over 320 will be sent to owners\r\n            IERC20(token).transferFrom(_msgSender(), Community, _amount.mul(320)*decimal);\r\n            IERC20(token).transferFrom(_msgSender(),address(this), _amount.mul(80)*decimal);}\r\n        \r\n        // update accumulated sales value and amounts\r\n        accSales_n += _amount;\r\n        accSales_u += _amount.mul(_price);\r\n        // update for each Franchise\r\n        Franchise[referal].total += _amount;\r\n        Franchise[referal].value += _amount.mul(_price);\r\n        // update individually\r\n        userInfo[_msgSender()].total += _amount;\r\n        userInfo[_msgSender()].value += _amount.mul(_price);\r\n                \r\n        emit Purchase(_msgSender(),referal,_price,_amount, t);\r\n        \r\n    }\r\n    \r\n    function TransferOwnership(address newOwner) public onlyOwner{\r\n        owner[newOwner] = true;\r\n        owner[_msgSender()] = false;\r\n    }\r\n    \r\n    function setCommunity(address com) public onlyOwner{\r\n        Community = com;\r\n    }\r\n    \r\n    function Withdraw(address account) public onlyOwner{\r\n        uint balance = IERC20(token).balanceOf(address(this));\r\n        IERC20(token).transfer(account, balance);\r\n    }\r\n    \r\n    function viewSales() external view returns(uint n,uint u){\r\n        n = accSales_n;\r\n        u = accSales_u;\r\n    }\r\n    \r\n    \r\n    function realtimePrice() external view returns(uint realPrice){\r\n        uint d = (block.timestamp-starttime).div(period);\r\n        realPrice = d<3 ? discount[d].mul(price).div(100) : price;\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    function burn(address account, uint amount) external; // here it is\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Burn(address indexed account, uint amount);\r\n}\r\n\r\n\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n\r\n        return c;\r\n    }\r\n   \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"referal\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Community\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"Franchise\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"discount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"referal\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"getter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStart\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isfranchise\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"referal\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"quota_discount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realtimePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"realPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"com\",\"type\":\"address\"}],\"name\":\"setCommunity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[50]\",\"name\":\"codes\",\"type\":\"bytes32[50]\"}],\"name\":\"setReferalCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"starttime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewSales\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"u\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SALE", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://19b9d37ccfcba118fb51400da296983f9f8b148108f5739965c858b598fb2064"}