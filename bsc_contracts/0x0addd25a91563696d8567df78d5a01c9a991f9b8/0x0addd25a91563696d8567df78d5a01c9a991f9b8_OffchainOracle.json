{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IOracle {\\n    error ConnectorShouldBeNone();\\n    error PoolNotFound();\\n    error PoolWithConnectorNotFound();\\n\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector, uint256 thresholdFilter) external view returns (uint256 rate, uint256 weight);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWrapper {\\n    error NotSupportedToken();\\n    error NotAddedMarket();\\n    error NotRemovedMarket();\\n\\n    function wrap(IERC20 token) external view returns (IERC20 wrappedToken, uint256 rate);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/OraclePrices.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @title OraclePrices\\n * @notice A library that provides functionalities for processing and analyzing token rate and weight data provided by an oracle.\\n *         The library is used when an oracle uses multiple pools to determine a token's price.\\n *         It allows to filter out pools with low weight and significantly incorrect price, which could distort the weighted price.\\n *         The level of low-weight pool filtering can be managed using the thresholdFilter parameter.\\n */\\nlibrary OraclePrices {\\n    using SafeMath for uint256;\\n\\n    /**\\n    * @title Oracle Price Data Structure\\n    * @notice This structure encapsulates the rate and weight information for tokens as provided by an oracle\\n    * @dev An array of OraclePrice structures can be used to represent oracle data for multiple pools\\n    * @param rate The oracle-provided rate for a token\\n    * @param weight The oracle-provided derived weight for a token\\n    */\\n    struct OraclePrice {\\n        uint256 rate;\\n        uint256 weight;\\n    }\\n\\n    /**\\n    * @title Oracle Prices Data Structure\\n    * @notice This structure encapsulates information about a list of oracles prices and weights\\n    * @dev The structure is initialized with a maximum possible length by the `init` function\\n    * @param oraclePrices An array of OraclePrice structures, each containing a rate and weight\\n    * @param maxOracleWeight The maximum weight among the OraclePrice elements in the oraclePrices array\\n    * @param size The number of meaningful OraclePrice elements added to the oraclePrices array\\n    */\\n    struct Data {\\n        uint256 maxOracleWeight;\\n        uint256 size;\\n        OraclePrice[] oraclePrices;\\n    }\\n\\n    /**\\n    * @notice Initializes an array of OraclePrices with a given maximum length and returns it wrapped inside a Data struct\\n    * @dev Uses inline assembly for memory allocation to avoid array zeroing and extra array copy to struct\\n    * @param maxArrLength The maximum length of the oraclePrices array\\n    * @return data Returns an instance of Data struct containing an OraclePrice array with a specified maximum length\\n    */\\n    function init(uint256 maxArrLength) internal pure returns (Data memory data) {\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            data := mload(0x40)\\n            mstore(0x40, add(data, add(0x80, mul(maxArrLength, 0x40))))\\n            mstore(add(data, 0x00), 0)\\n            mstore(add(data, 0x20), 0)\\n            mstore(add(data, 0x40), add(data, 0x60))\\n            mstore(add(data, 0x60), maxArrLength)\\n        }\\n    }\\n\\n    /**\\n    * @notice Appends an OraclePrice to the oraclePrices array in the provided Data struct if the OraclePrice has a non-zero weight\\n    * @dev If the weight of the OraclePrice is greater than the current maxOracleWeight, the maxOracleWeight is updated. The size (number of meaningful elements) of the array is incremented after appending the OraclePrice.\\n    * @param data The Data struct that contains the oraclePrices array, maxOracleWeight, and the current size\\n    * @param oraclePrice The OraclePrice to be appended to the oraclePrices array\\n    * @return isAppended A flag indicating whether the oraclePrice was appended or not\\n    */\\n    function append(Data memory data, OraclePrice memory oraclePrice) internal pure returns (bool isAppended) {\\n        if (oraclePrice.weight > 0) {\\n            data.oraclePrices[data.size] = oraclePrice;\\n            data.size++;\\n            if (oraclePrice.weight > data.maxOracleWeight) {\\n                data.maxOracleWeight = oraclePrice.weight;\\n            }\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n    * @notice Calculates the weighted rate from the oracle prices data using a threshold filter\\n    * @dev Shrinks the `oraclePrices` array to remove any unused space, though it's unclear how this optimizes the code, but it is. Then calculates the weighted rate\\n    *      considering only the oracle prices whose weight is above the threshold which is percent from max weight\\n    * @param data The data structure containing oracle prices, the maximum oracle weight and the size of the used oracle prices array\\n    * @param thresholdFilter The threshold to filter oracle prices based on their weight\\n    * @return weightedRate The calculated weighted rate\\n    * @return totalWeight The total weight of the oracle prices that passed the threshold\\n    */\\n    function getRateAndWeight(Data memory data, uint256 thresholdFilter) internal pure returns (uint256 weightedRate, uint256 totalWeight) {\\n        // shrink oraclePrices array\\n        uint256 size = data.size;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(add(data, 64))\\n            mstore(ptr, size)\\n        }\\n\\n        // calculate weighted rate\\n        for (uint256 i = 0; i < size; i++) {\\n            OraclePrice memory p = data.oraclePrices[i];\\n            if (p.weight * 100 < data.maxOracleWeight * thresholdFilter) {\\n                continue;\\n            }\\n            weightedRate += p.rate * p.weight;\\n            totalWeight += p.weight;\\n        }\\n        if (totalWeight > 0) {\\n            unchecked { weightedRate /= totalWeight; }\\n        }\\n    }\\n\\n    /**\\n    * @notice See `getRateAndWeight`. It uses SafeMath to prevent overflows.\\n    */\\n    function getRateAndWeightWithSafeMath(Data memory data, uint256 thresholdFilter) internal pure returns (uint256 weightedRate, uint256 totalWeight) {\\n        // shrink oraclePrices array\\n        uint256 size = data.size;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(add(data, 64))\\n            mstore(ptr, size)\\n        }\\n\\n        // calculate weighted rate\\n        for (uint256 i = 0; i < size; i++) {\\n            OraclePrice memory p = data.oraclePrices[i];\\n            if (p.weight * 100 < data.maxOracleWeight * thresholdFilter) {\\n                continue;\\n            }\\n            (bool ok, uint256 weightedRateI) = p.rate.tryMul(p.weight);\\n            if (ok) {\\n                (ok, weightedRate) = _tryAdd(weightedRate, weightedRateI);\\n                if (ok) totalWeight += p.weight;\\n            }\\n        }\\n        if (totalWeight > 0) {\\n            unchecked { weightedRate /= totalWeight; }\\n        }\\n    }\\n\\n    function _tryAdd(uint256 value, uint256 addition) private pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 result = value + addition;\\n            if (result < value) return (false, value);\\n            return (true, result);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/MultiWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/IWrapper.sol\\\";\\n\\n/**\\n * @title MultiWrapper\\n * @notice \u0421ontract allows for the management of multiple `IWrapper` contracts that can be used to wrap tokens in OffchainOracle's calculations.\\n * Wrappers are contracts that enable the conversion of tokens from one protocol to another.\\n * The contract provides functions to add and remove wrappers, as well as get information about the wrapped tokens and their conversion rates.\\n */\\ncontract MultiWrapper is Ownable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    error WrapperAlreadyAdded();\\n    error UnknownWrapper();\\n\\n    event WrapperAdded(IWrapper connector);\\n    event WrapperRemoved(IWrapper connector);\\n\\n    EnumerableSet.AddressSet private _wrappers;\\n\\n    /**\\n     * @notice Adds the provided wrappers to the contract.\\n     * @dev Initializes the MultiWrapper with an array of existing `IWrapper` contracts.\\n     * @param existingWrappers Initial wrappers to be added.\\n     */\\n    constructor(IWrapper[] memory existingWrappers) {\\n        unchecked {\\n            for (uint256 i = 0; i < existingWrappers.length; i++) {\\n                if (!_wrappers.add(address(existingWrappers[i]))) revert WrapperAlreadyAdded();\\n                emit WrapperAdded(existingWrappers[i]);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns all wrappers currently added to the contract.\\n     * @return allWrappers Array of wrapper contracts.\\n     */\\n    function wrappers() external view returns (IWrapper[] memory allWrappers) {\\n        allWrappers = new IWrapper[](_wrappers.length());\\n        unchecked {\\n            for (uint256 i = 0; i < allWrappers.length; i++) {\\n                allWrappers[i] = IWrapper(address(uint160(uint256(_wrappers._inner._values[i]))));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Adds a distinct wrapper contract that cannot be duplicated. Only the owner can add a wrapper.\\n     * @param wrapper The address of the wrapper to be added.\\n     */\\n    function addWrapper(IWrapper wrapper) external onlyOwner {\\n        if (!_wrappers.add(address(wrapper))) revert WrapperAlreadyAdded();\\n        emit WrapperAdded(wrapper);\\n    }\\n\\n    /**\\n     * @notice Removes a specified wrapper contract. Only the owner can remove a wrapper.\\n     * @param wrapper The address of the wrapper to be removed.\\n     */\\n    function removeWrapper(IWrapper wrapper) external onlyOwner {\\n        if (!_wrappers.remove(address(wrapper))) revert UnknownWrapper();\\n        emit WrapperRemoved(wrapper);\\n    }\\n\\n    /**\\n     * @notice Retrieves the wrapped tokens and their conversion rates for a given token.\\n     * @dev Iterates over the wrappers to determine the wrapped tokens and their conversion rates.\\n     * @param token The token for which to retrieve the wrapped tokens and conversion rates.\\n     * @return wrappedTokens Tokens obtainable by wrapping the input token, including the input token and a rate of 1e18 for it.\\n     * @return rates Conversion rates for the wrapped tokens.\\n     */\\n    function getWrappedTokens(IERC20 token) external view returns (IERC20[] memory wrappedTokens, uint256[] memory rates) {\\n        unchecked {\\n            IERC20[] memory memWrappedTokens = new IERC20[](20);\\n            uint256[] memory memRates = new uint256[](20);\\n            uint256 len = 0;\\n            for (uint256 i = 0; i < _wrappers._inner._values.length; i++) {\\n                try IWrapper(address(uint160(uint256(_wrappers._inner._values[i])))).wrap(token) returns (IERC20 wrappedToken, uint256 rate) {\\n                    memWrappedTokens[len] = wrappedToken;\\n                    memRates[len] = rate;\\n                    len += 1;\\n                    for (uint256 j = 0; j < _wrappers._inner._values.length; j++) {\\n                        if (i != j) {\\n                            try IWrapper(address(uint160(uint256(_wrappers._inner._values[j])))).wrap(wrappedToken) returns (IERC20 wrappedToken2, uint256 rate2) {\\n                                bool used = false;\\n                                for (uint256 k = 0; k < len; k++) {\\n                                    if (wrappedToken2 == memWrappedTokens[k]) {\\n                                        used = true;\\n                                        break;\\n                                    }\\n                                }\\n                                if (!used) {\\n                                    memWrappedTokens[len] = wrappedToken2;\\n                                    memRates[len] = Math.mulDiv(rate, rate2, 1e18);\\n                                    len += 1;\\n                                }\\n                            } catch {\\n                                continue;\\n                            }\\n                        }\\n                    }\\n                } catch {\\n                    continue;\\n                }\\n            }\\n            wrappedTokens = new IERC20[](len + 1);\\n            rates = new uint256[](len + 1);\\n            for (uint256 i = 0; i < len; i++) {\\n                wrappedTokens[i] = memWrappedTokens[i];\\n                rates[i] = memRates[i];\\n            }\\n            wrappedTokens[len] = token;\\n            rates[len] = 1e18;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/OffchainOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./interfaces/IWrapper.sol\\\";\\nimport \\\"./MultiWrapper.sol\\\";\\nimport \\\"./libraries/OraclePrices.sol\\\";\\n\\ncontract OffchainOracle is Ownable {\\n    using Math for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using OraclePrices for OraclePrices.Data;\\n\\n    error ArraysLengthMismatch();\\n    error OracleAlreadyAdded();\\n    error ConnectorAlreadyAdded();\\n    error InvalidOracleTokenKind();\\n    error UnknownOracle();\\n    error UnknownConnector();\\n    error SameTokens();\\n    error TooBigThreshold();\\n\\n    enum OracleType { WETH, ETH, WETH_ETH }\\n\\n    event OracleAdded(IOracle oracle, OracleType oracleType);\\n    event OracleRemoved(IOracle oracle, OracleType oracleType);\\n    event ConnectorAdded(IERC20 connector);\\n    event ConnectorRemoved(IERC20 connector);\\n    event MultiWrapperUpdated(MultiWrapper multiWrapper);\\n\\n    struct GetRateImplParams {\\n        IOracle oracle;\\n        IERC20 srcToken;\\n        uint256 srcTokenRate;\\n        IERC20 dstToken;\\n        uint256 dstTokenRate;\\n        IERC20 connector;\\n        uint256 thresholdFilter;\\n    }\\n\\n    EnumerableSet.AddressSet private _wethOracles;\\n    EnumerableSet.AddressSet private _ethOracles;\\n    EnumerableSet.AddressSet private _connectors;\\n    MultiWrapper public multiWrapper;\\n\\n    IERC20 private constant _BASE = IERC20(0x0000000000000000000000000000000000000000);\\n    IERC20 private immutable _WBASE;\\n\\n    constructor(MultiWrapper _multiWrapper, IOracle[] memory existingOracles, OracleType[] memory oracleTypes, IERC20[] memory existingConnectors, IERC20 wBase, address owner) {\\n        unchecked {\\n            if(existingOracles.length != oracleTypes.length) revert ArraysLengthMismatch();\\n            multiWrapper = _multiWrapper;\\n            emit MultiWrapperUpdated(_multiWrapper);\\n            for (uint256 i = 0; i < existingOracles.length; i++) {\\n                if (oracleTypes[i] == OracleType.WETH) {\\n                    if(!_wethOracles.add(address(existingOracles[i]))) revert OracleAlreadyAdded();\\n                } else if (oracleTypes[i] == OracleType.ETH) {\\n                    if(!_ethOracles.add(address(existingOracles[i]))) revert OracleAlreadyAdded();\\n                } else if (oracleTypes[i] == OracleType.WETH_ETH) {\\n                    if(!_wethOracles.add(address(existingOracles[i]))) revert OracleAlreadyAdded();\\n                    if(!_ethOracles.add(address(existingOracles[i]))) revert OracleAlreadyAdded();\\n                } else {\\n                    revert InvalidOracleTokenKind();\\n                }\\n                emit OracleAdded(existingOracles[i], oracleTypes[i]);\\n            }\\n            for (uint256 i = 0; i < existingConnectors.length; i++) {\\n                if(!_connectors.add(address(existingConnectors[i]))) revert ConnectorAlreadyAdded();\\n                emit ConnectorAdded(existingConnectors[i]);\\n            }\\n            _WBASE = wBase;\\n        }\\n        if (owner != msg.sender) transferOwnership(owner);\\n    }\\n\\n    /**\\n    * @notice Returns all registered oracles along with their corresponding oracle types.\\n    * @return allOracles An array of all registered oracles\\n    * @return oracleTypes An array of the corresponding types for each oracle\\n    */\\n    function oracles() public view returns (IOracle[] memory allOracles, OracleType[] memory oracleTypes) {\\n        unchecked {\\n            IOracle[] memory oraclesBuffer = new IOracle[](_wethOracles._inner._values.length + _ethOracles._inner._values.length);\\n            OracleType[] memory oracleTypesBuffer = new OracleType[](oraclesBuffer.length);\\n            for (uint256 i = 0; i < _wethOracles._inner._values.length; i++) {\\n                oraclesBuffer[i] = IOracle(address(uint160(uint256(_wethOracles._inner._values[i]))));\\n                oracleTypesBuffer[i] = OracleType.WETH;\\n            }\\n\\n            uint256 actualItemsCount = _wethOracles._inner._values.length;\\n\\n            for (uint256 i = 0; i < _ethOracles._inner._values.length; i++) {\\n                OracleType kind = OracleType.ETH;\\n                uint256 oracleIndex = actualItemsCount;\\n                IOracle oracle = IOracle(address(uint160(uint256(_ethOracles._inner._values[i]))));\\n                for (uint j = 0; j < oraclesBuffer.length; j++) {\\n                    if (oraclesBuffer[j] == oracle) {\\n                        oracleIndex = j;\\n                        kind = OracleType.WETH_ETH;\\n                        break;\\n                    }\\n                }\\n                if (kind == OracleType.ETH) {\\n                    actualItemsCount++;\\n                }\\n                oraclesBuffer[oracleIndex] = oracle;\\n                oracleTypesBuffer[oracleIndex] = kind;\\n            }\\n\\n            allOracles = new IOracle[](actualItemsCount);\\n            oracleTypes = new OracleType[](actualItemsCount);\\n            for (uint256 i = 0; i < actualItemsCount; i++) {\\n                allOracles[i] = oraclesBuffer[i];\\n                oracleTypes[i] = oracleTypesBuffer[i];\\n            }\\n        }\\n    }\\n\\n    /**\\n    * @notice Returns an array of all registered connectors.\\n    * @return allConnectors An array of all registered connectors\\n    */\\n    function connectors() external view returns (IERC20[] memory allConnectors) {\\n        unchecked {\\n            allConnectors = new IERC20[](_connectors.length());\\n            for (uint256 i = 0; i < allConnectors.length; i++) {\\n                allConnectors[i] = IERC20(address(uint160(uint256(_connectors._inner._values[i]))));\\n            }\\n        }\\n    }\\n\\n    /**\\n    * @notice Sets the MultiWrapper contract address.\\n    * @param _multiWrapper The address of the MultiWrapper contract\\n    */\\n    function setMultiWrapper(MultiWrapper _multiWrapper) external onlyOwner {\\n        multiWrapper = _multiWrapper;\\n        emit MultiWrapperUpdated(_multiWrapper);\\n    }\\n\\n    /**\\n    * @notice Adds a new oracle to the registry with the given oracle type.\\n    * @param oracle The address of the new oracle to add\\n    * @param oracleKind The type of the new oracle\\n    */\\n    function addOracle(IOracle oracle, OracleType oracleKind) external onlyOwner {\\n        if (oracleKind == OracleType.WETH) {\\n            if(!_wethOracles.add(address(oracle))) revert OracleAlreadyAdded();\\n        } else if (oracleKind == OracleType.ETH) {\\n            if(!_ethOracles.add(address(oracle))) revert OracleAlreadyAdded();\\n        } else if (oracleKind == OracleType.WETH_ETH) {\\n            if(!_wethOracles.add(address(oracle))) revert OracleAlreadyAdded();\\n            if(!_ethOracles.add(address(oracle))) revert OracleAlreadyAdded();\\n        } else {\\n            revert InvalidOracleTokenKind();\\n        }\\n        emit OracleAdded(oracle, oracleKind);\\n    }\\n\\n    /**\\n    * @notice Removes an oracle from the registry with the given oracle type.\\n    * @param oracle The address of the oracle to remove\\n    * @param oracleKind The type of the oracle to remove\\n    */\\n    function removeOracle(IOracle oracle, OracleType oracleKind) external onlyOwner {\\n        if (oracleKind == OracleType.WETH) {\\n            if(!_wethOracles.remove(address(oracle))) revert UnknownOracle();\\n        } else if (oracleKind == OracleType.ETH) {\\n            if(!_ethOracles.remove(address(oracle))) revert UnknownOracle();\\n        } else if (oracleKind == OracleType.WETH_ETH) {\\n            if(!_wethOracles.remove(address(oracle))) revert UnknownOracle();\\n            if(!_ethOracles.remove(address(oracle))) revert UnknownOracle();\\n        } else {\\n            revert InvalidOracleTokenKind();\\n        }\\n        emit OracleRemoved(oracle, oracleKind);\\n    }\\n\\n    /**\\n    * @notice Adds a new connector to the registry.\\n    * @param connector The address of the new connector to add\\n    */\\n    function addConnector(IERC20 connector) external onlyOwner {\\n        if(!_connectors.add(address(connector))) revert ConnectorAlreadyAdded();\\n        emit ConnectorAdded(connector);\\n    }\\n\\n    /**\\n    * @notice Removes a connector from the registry.\\n    * @param connector The address of the connector to remove\\n    */\\n    function removeConnector(IERC20 connector) external onlyOwner {\\n        if(!_connectors.remove(address(connector))) revert UnknownConnector();\\n        emit ConnectorRemoved(connector);\\n    }\\n\\n    /**\\n    * WARNING!\\n    *    Usage of the dex oracle on chain is highly discouraged!\\n    *    getRate function can be easily manipulated inside transaction!\\n    * @notice Returns the weighted rate between two tokens using default connectors, with the option to filter out rates below a certain threshold.\\n    * @param srcToken The source token\\n    * @param dstToken The destination token\\n    * @param useWrappers Boolean flag to use or not use token wrappers\\n    * @return weightedRate weighted rate between the two tokens\\n    */\\n    function getRate(\\n        IERC20 srcToken,\\n        IERC20 dstToken,\\n        bool useWrappers\\n    ) external view returns (uint256 weightedRate) {\\n        return getRateWithCustomConnectors(srcToken, dstToken, useWrappers, new IERC20[](0), 0);\\n    }\\n\\n    /**\\n    * WARNING!\\n    *    Usage of the dex oracle on chain is highly discouraged!\\n    *    getRate function can be easily manipulated inside transaction!\\n    * @notice Returns the weighted rate between two tokens using default connectors, with the option to filter out rates below a certain threshold.\\n    * @param srcToken The source token\\n    * @param dstToken The destination token\\n    * @param useWrappers Boolean flag to use or not use token wrappers\\n    * @param thresholdFilter The threshold percentage (from 0 to 100) used to filter out rates below the threshold\\n    * @return weightedRate weighted rate between the two tokens\\n    */\\n    function getRateWithThreshold(\\n        IERC20 srcToken,\\n        IERC20 dstToken,\\n        bool useWrappers,\\n        uint256 thresholdFilter\\n    ) external view returns (uint256 weightedRate) {\\n        return getRateWithCustomConnectors(srcToken, dstToken, useWrappers, new IERC20[](0), thresholdFilter);\\n    }\\n\\n    /**\\n    * WARNING!\\n    *    Usage of the dex oracle on chain is highly discouraged!\\n    *    getRate function can be easily manipulated inside transaction!\\n    * @notice Returns the weighted rate between two tokens using custom connectors, with the option to filter out rates below a certain threshold.\\n    * @param srcToken The source token\\n    * @param dstToken The destination token\\n    * @param useWrappers Boolean flag to use or not use token wrappers\\n    * @param customConnectors An array of custom connectors to use\\n    * @param thresholdFilter The threshold percentage (from 0 to 100) used to filter out rates below the threshold\\n    * @return weightedRate The weighted rate between the two tokens\\n    */\\n    function getRateWithCustomConnectors(\\n        IERC20 srcToken,\\n        IERC20 dstToken,\\n        bool useWrappers,\\n        IERC20[] memory customConnectors,\\n        uint256 thresholdFilter\\n    ) public view returns (uint256 weightedRate) {\\n        if(srcToken == dstToken) revert SameTokens();\\n        if(thresholdFilter >= 100) revert TooBigThreshold();\\n        (IOracle[] memory allOracles, ) = oracles();\\n        (IERC20[] memory wrappedSrcTokens, uint256[] memory srcRates) = _getWrappedTokens(srcToken, useWrappers);\\n        (IERC20[] memory wrappedDstTokens, uint256[] memory dstRates) = _getWrappedTokens(dstToken, useWrappers);\\n        IERC20[][2] memory allConnectors = _getAllConnectors(customConnectors);\\n\\n        uint256 maxArrLength = wrappedSrcTokens.length * wrappedDstTokens.length * (allConnectors[0].length + allConnectors[1].length) * allOracles.length;\\n        OraclePrices.Data memory ratesAndWeights = OraclePrices.init(maxArrLength);\\n        unchecked {\\n            for (uint256 k1 = 0; k1 < wrappedSrcTokens.length; k1++) {\\n                for (uint256 k2 = 0; k2 < wrappedDstTokens.length; k2++) {\\n                    if (wrappedSrcTokens[k1] == wrappedDstTokens[k2]) {\\n                        return srcRates[k1] * dstRates[k2] / 1e18;\\n                    }\\n                    for (uint256 k3 = 0; k3 < 2; k3++) {\\n                        for (uint256 j = 0; j < allConnectors[k3].length; j++) {\\n                            IERC20 connector = allConnectors[k3][j];\\n                            if (connector == wrappedSrcTokens[k1] || connector == wrappedDstTokens[k2]) {\\n                                continue;\\n                            }\\n                            for (uint256 i = 0; i < allOracles.length; i++) {\\n                                GetRateImplParams memory params = GetRateImplParams({\\n                                    oracle: allOracles[i],\\n                                    srcToken: wrappedSrcTokens[k1],\\n                                    srcTokenRate: srcRates[k1],\\n                                    dstToken: wrappedDstTokens[k2],\\n                                    dstTokenRate: dstRates[k2],\\n                                    connector: connector,\\n                                    thresholdFilter: thresholdFilter\\n                                });\\n                                ratesAndWeights.append(_getRateImpl(params));\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            (weightedRate,) = ratesAndWeights.getRateAndWeightWithSafeMath(thresholdFilter);\\n        }\\n    }\\n\\n    /**\\n    * WARNING!\\n    *    Usage of the dex oracle on chain is highly discouraged!\\n    *    getRate function can be easily manipulated inside transaction!\\n    * @notice The same as `getRate` but checks against `ETH` and `WETH` only\\n    */\\n    function getRateToEth(IERC20 srcToken, bool useSrcWrappers) external view returns (uint256 weightedRate) {\\n        return getRateToEthWithCustomConnectors(srcToken, useSrcWrappers, new IERC20[](0), 0);\\n    }\\n\\n    /**\\n    * WARNING!\\n    *    Usage of the dex oracle on chain is highly discouraged!\\n    *    getRate function can be easily manipulated inside transaction!\\n    * @notice The same as `getRate` but checks against `ETH` and `WETH` only\\n    */\\n    function getRateToEthWithThreshold(IERC20 srcToken, bool useSrcWrappers, uint256 thresholdFilter) external view returns (uint256 weightedRate) {\\n        return getRateToEthWithCustomConnectors(srcToken, useSrcWrappers, new IERC20[](0), thresholdFilter);\\n    }\\n\\n    /**\\n    * WARNING!\\n    *    Usage of the dex oracle on chain is highly discouraged!\\n    *    getRate function can be easily manipulated inside transaction!\\n    * @notice The same as `getRateWithCustomConnectors` but checks against `ETH` and `WETH` only\\n    */\\n    function getRateToEthWithCustomConnectors(IERC20 srcToken, bool useSrcWrappers, IERC20[] memory customConnectors, uint256 thresholdFilter) public view returns (uint256 weightedRate) {\\n        if(thresholdFilter >= 100) revert TooBigThreshold();\\n        (IERC20[] memory wrappedSrcTokens, uint256[] memory srcRates) = _getWrappedTokens(srcToken, useSrcWrappers);\\n        IERC20[2] memory wrappedDstTokens = [_BASE, _WBASE];\\n        bytes32[][2] memory wrappedOracles = [_ethOracles._inner._values, _wethOracles._inner._values];\\n        IERC20[][2] memory allConnectors = _getAllConnectors(customConnectors);\\n\\n        uint256 maxArrLength = wrappedSrcTokens.length * wrappedDstTokens.length * (allConnectors[0].length + allConnectors[1].length) * (wrappedOracles[0].length + wrappedOracles[1].length);\\n        OraclePrices.Data memory ratesAndWeights = OraclePrices.init(maxArrLength);\\n        unchecked {\\n            for (uint256 k1 = 0; k1 < wrappedSrcTokens.length; k1++) {\\n                for (uint256 k2 = 0; k2 < wrappedDstTokens.length; k2++) {\\n                    if (wrappedSrcTokens[k1] == wrappedDstTokens[k2]) {\\n                        return srcRates[k1];\\n                    }\\n                    for (uint256 k3 = 0; k3 < 2; k3++) {\\n                        for (uint256 j = 0; j < allConnectors[k3].length; j++) {\\n                            IERC20 connector = allConnectors[k3][j];\\n                            if (connector == wrappedSrcTokens[k1] || connector == wrappedDstTokens[k2]) {\\n                                continue;\\n                            }\\n                            for (uint256 i = 0; i < wrappedOracles[k2].length; i++) {\\n                                GetRateImplParams memory params = GetRateImplParams({\\n                                    oracle: IOracle(address(uint160(uint256(wrappedOracles[k2][i])))),\\n                                    srcToken: wrappedSrcTokens[k1],\\n                                    srcTokenRate: srcRates[k1],\\n                                    dstToken: wrappedDstTokens[k2],\\n                                    dstTokenRate: 1e18,\\n                                    connector: connector,\\n                                    thresholdFilter: thresholdFilter\\n                                });\\n                                ratesAndWeights.append(_getRateImpl(params));\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            (weightedRate,) = ratesAndWeights.getRateAndWeightWithSafeMath(thresholdFilter);\\n        }\\n    }\\n\\n    function _getWrappedTokens(IERC20 token, bool useWrappers) internal view returns (IERC20[] memory wrappedTokens, uint256[] memory rates) {\\n        if (useWrappers) {\\n            return multiWrapper.getWrappedTokens(token);\\n        }\\n\\n        wrappedTokens = new IERC20[](1);\\n        wrappedTokens[0] = token;\\n        rates = new uint256[](1);\\n        rates[0] = uint256(1e18);\\n    }\\n\\n    function _getAllConnectors(IERC20[] memory customConnectors) internal view returns (IERC20[][2] memory allConnectors) {\\n        IERC20[] memory connectorsZero;\\n        bytes32[] memory rawConnectors = _connectors._inner._values;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            connectorsZero := rawConnectors\\n        }\\n        allConnectors[0] = connectorsZero;\\n        allConnectors[1] = customConnectors;\\n    }\\n\\n    function _getRateImpl(GetRateImplParams memory p) private view returns (OraclePrices.OraclePrice memory oraclePrice) {\\n        try p.oracle.getRate(p.srcToken, p.dstToken, p.connector, p.thresholdFilter) returns (uint256 rate, uint256 weight) {\\n            uint256 result = _scaledMul([p.srcTokenRate, rate, p.dstTokenRate], 1e18);\\n            oraclePrice = OraclePrices.OraclePrice(result, result == 0 ? 0 : weight);\\n        } catch {}  // solhint-disable-line no-empty-blocks\\n    }\\n\\n    function _tryAdd(uint256 value, uint256 addition) private pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 result = value + addition;\\n            if (result < value) return (false, value);\\n            return (true, result);\\n        }\\n    }\\n\\n    function _scaledMul(uint256[3] memory m, uint256 scale) private pure returns (uint256) {\\n        if (m[0] == 0 || m[1] == 0 || m[2] == 0) return 0;\\n\\n        if (m[0] > m[1]) (m[0], m[1]) = (m[1], m[0]);\\n        if (m[0] > m[2]) (m[0], m[2]) = (m[2], m[0]);\\n        if (m[1] > m[2]) (m[1], m[2]) = (m[2], m[1]);\\n        bool scaleApplied;\\n\\n        unchecked {\\n            uint256 r = m[0] * m[1];\\n            if (r / m[0] != m[1]) {\\n                if (!_validatateMulDiv(m[0], m[1], scale)) return 0;\\n                r = m[0].mulDiv(m[1], scale);\\n                scaleApplied = true;\\n            }\\n            uint256 r2 = r * m[2];\\n            if (r2 / r != m[2]) {\\n                if (!_validatateMulDiv(r, m[2], scaleApplied ? scale : scale * scale)) return 0;\\n                r2 = r.mulDiv(m[2], scaleApplied ? scale : scale * scale);\\n            } else {\\n                r2 /= scaleApplied ? scale : scale * scale;\\n            }\\n            return r2;\\n        }\\n    }\\n\\n    /// @dev mulDiv validation is required as we do not want our methods to revert\\n    function _validatateMulDiv(uint256 x, uint256 y, uint256 denominator) private pure returns (bool) {\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Make sure the result is less than 2^256\\n        return denominator > prod1;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract MultiWrapper\",\"name\":\"_multiWrapper\",\"type\":\"address\"},{\"internalType\":\"contract IOracle[]\",\"name\":\"existingOracles\",\"type\":\"address[]\"},{\"internalType\":\"enum OffchainOracle.OracleType[]\",\"name\":\"oracleTypes\",\"type\":\"uint8[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"existingConnectors\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"wBase\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ArraysLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConnectorAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOracleTokenKind\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooBigThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnknownConnector\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnknownOracle\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"connector\",\"type\":\"address\"}],\"name\":\"ConnectorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"connector\",\"type\":\"address\"}],\"name\":\"ConnectorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract MultiWrapper\",\"name\":\"multiWrapper\",\"type\":\"address\"}],\"name\":\"MultiWrapperUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IOracle\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum OffchainOracle.OracleType\",\"name\":\"oracleType\",\"type\":\"uint8\"}],\"name\":\"OracleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IOracle\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum OffchainOracle.OracleType\",\"name\":\"oracleType\",\"type\":\"uint8\"}],\"name\":\"OracleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"connector\",\"type\":\"address\"}],\"name\":\"addConnector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"enum OffchainOracle.OracleType\",\"name\":\"oracleKind\",\"type\":\"uint8\"}],\"name\":\"addOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connectors\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"allConnectors\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useWrappers\",\"type\":\"bool\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weightedRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useSrcWrappers\",\"type\":\"bool\"}],\"name\":\"getRateToEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weightedRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useSrcWrappers\",\"type\":\"bool\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"customConnectors\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"thresholdFilter\",\"type\":\"uint256\"}],\"name\":\"getRateToEthWithCustomConnectors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weightedRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useSrcWrappers\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"thresholdFilter\",\"type\":\"uint256\"}],\"name\":\"getRateToEthWithThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weightedRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useWrappers\",\"type\":\"bool\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"customConnectors\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"thresholdFilter\",\"type\":\"uint256\"}],\"name\":\"getRateWithCustomConnectors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weightedRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useWrappers\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"thresholdFilter\",\"type\":\"uint256\"}],\"name\":\"getRateWithThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weightedRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiWrapper\",\"outputs\":[{\"internalType\":\"contract MultiWrapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracles\",\"outputs\":[{\"internalType\":\"contract IOracle[]\",\"name\":\"allOracles\",\"type\":\"address[]\"},{\"internalType\":\"enum OffchainOracle.OracleType[]\",\"name\":\"oracleTypes\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"connector\",\"type\":\"address\"}],\"name\":\"removeConnector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"enum OffchainOracle.OracleType\",\"name\":\"oracleKind\",\"type\":\"uint8\"}],\"name\":\"removeOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MultiWrapper\",\"name\":\"_multiWrapper\",\"type\":\"address\"}],\"name\":\"setMultiWrapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OffchainOracle", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "000000000000000000000000a31bb36c5164b165f9c36955ea4ccbab42b3b28e00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000380000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c00000000000000000000000056e44874f624ebde6efcc783efd685f0fbdc6dcf000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000ed55d76bb48e042a177d1e21affbe1b72d0c7db000000000000000000000000082b6b75f5feabbfd370d45dacefae3d5c06099da000000000000000000000000d4efb5998dfbdfb791182fb610d0061136e9db500000000000000000000000007bdc6954e1c7869b4147a320d589689f628e9921000000000000000000000000e2d0e58302d03f703bd3c5ec2899f4e1af65e18c0000000000000000000000005f6a6428756cfaf96584286ef9f7411621196f3a0000000000000000000000001b947af8b3dd6aa96f8726cd92c894d0ba6367a3000000000000000000000000b9fa95a38d50c5bad1ea2b4e85e106fe886ccb3a000000000000000000000000b4039b37d09772801a51764537c167445f52f48b0000000000000000000000007bbc0156c31a19097eed6b636aa2f4ab8a31bfd9000000000000000000000000000000000000000000000000000000000000000affffffffffffffffffffffffffffffffffffffff000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c0000000000000000000000001af3f329e8be154074d8769d1ffa4ee058b1dbc30000000000000000000000002170ed0880ac9a755fd29b2688956bd959f933f80000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d00000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000111111111117dc0aa78b770fa6a738034120c302", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}