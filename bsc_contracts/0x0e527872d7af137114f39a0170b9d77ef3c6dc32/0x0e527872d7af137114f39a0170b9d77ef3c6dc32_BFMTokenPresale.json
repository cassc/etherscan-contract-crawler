{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function description() external view returns (string memory);\r\n\r\n    function version() external view returns (uint256);\r\n\r\n    function getRoundData(\r\n        uint80 _roundId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            uint256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            uint256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\ncontract PriceConsumerV3 {\r\n    AggregatorV3Interface internal priceFeed;\r\n\r\n    function getLatestPrice() public view returns (uint) {\r\n        (, uint price, , , ) = priceFeed.latestRoundData();\r\n\r\n        return uint256(price);\r\n    }\r\n}\r\n\r\ncontract BFMTokenPresale is Ownable, PriceConsumerV3 {\r\n    using SafeMath for uint256;\r\n    uint public referrerPercentage = 5;\r\n    uint256 public minbuyToken = 10000e8;\r\n    uint256 public maxbuyToken = 1000000e8;\r\n\r\n    enum PresalePhase {\r\n        Phase1,\r\n        Phase2,\r\n        Phase3\r\n    }\r\n\r\n    struct PresaleInfo {\r\n        uint256 totalTokens;\r\n        uint256 tokenPrice;\r\n        uint256 releaseStart;\r\n        uint256 releaseDuration;\r\n        uint256 totalSold;\r\n        uint256[] releasedPercentPerMonth;\r\n        uint256 phasetime;\r\n    }\r\n\r\n    IERC20 public bfmToken;\r\n    PresaleInfo[3] public presalePhases;\r\n\r\n    mapping(address => mapping(uint256 => uint256)) private balances;\r\n    mapping(address => mapping(PresalePhase => uint256))\r\n        private releasedAmounts;\r\n    mapping(address => address) public referrers;\r\n\r\n    event TokensPurchased(\r\n        address indexed buyer,\r\n        uint256 amount,\r\n        uint256 paidAmount,\r\n        PresalePhase phase\r\n    );\r\n    event TokensReleased(\r\n        address indexed buyer,\r\n        uint256 amount,\r\n        PresalePhase phase\r\n    );\r\n\r\n    constructor(IERC20 token) {\r\n        bfmToken = token;\r\n        priceFeed = AggregatorV3Interface(\r\n            0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE\r\n        );\r\n\r\n        uint256[] memory p1ReleasedPercentPerMonth = new uint256[](6);\r\n        p1ReleasedPercentPerMonth[0] = 50;\r\n        p1ReleasedPercentPerMonth[1] = 10;\r\n        p1ReleasedPercentPerMonth[2] = 10;\r\n        p1ReleasedPercentPerMonth[3] = 10;\r\n        p1ReleasedPercentPerMonth[4] = 10;\r\n        p1ReleasedPercentPerMonth[5] = 10;\r\n\r\n        presalePhases[uint256(PresalePhase.Phase1)] = PresaleInfo(\r\n            3000000 * 1e8,\r\n            14285714285,\r\n            block.timestamp + 9 * 30 days, // Lock period of 9 months\r\n            30 days,\r\n            0,\r\n            p1ReleasedPercentPerMonth,\r\n            block.timestamp + 7 days\r\n        );\r\n\r\n        uint256[] memory p2ReleasedPercentPerMonth = new uint256[](6);\r\n        p2ReleasedPercentPerMonth[3] = 10;\r\n        p2ReleasedPercentPerMonth[0] = 50;\r\n        p2ReleasedPercentPerMonth[1] = 10;\r\n        p2ReleasedPercentPerMonth[2] = 10;\r\n        p2ReleasedPercentPerMonth[4] = 10;\r\n        p2ReleasedPercentPerMonth[5] = 10;\r\n\r\n        presalePhases[uint256(PresalePhase.Phase2)] = PresaleInfo(\r\n            10000000 * 1e8,\r\n            11111111111,\r\n            presalePhases[uint256(PresalePhase.Phase1)].releaseStart +\r\n                6 *\r\n                30 days, // Lock period of 6 months,\r\n            30 days,\r\n            0,\r\n            p2ReleasedPercentPerMonth,\r\n            presalePhases[uint256(PresalePhase.Phase1)].phasetime + 21 days\r\n        );\r\n\r\n        uint256[] memory p3ReleasedPercentPerMonth = new uint256[](4);\r\n        p3ReleasedPercentPerMonth[0] = 50;\r\n        p3ReleasedPercentPerMonth[1] = 15;\r\n        p3ReleasedPercentPerMonth[2] = 15;\r\n        p3ReleasedPercentPerMonth[3] = 20;\r\n        presalePhases[uint256(PresalePhase.Phase3)] = PresaleInfo(\r\n            17000000 * 1e8,\r\n            9090909090,\r\n            presalePhases[uint256(PresalePhase.Phase2)].releaseStart +\r\n                3 *\r\n                30 days, // Lock period of 3 months,\r\n            30 days,\r\n            0,\r\n            p3ReleasedPercentPerMonth,\r\n            presalePhases[uint256(PresalePhase.Phase2)].phasetime + 40 days\r\n        );\r\n    }\r\n\r\n    function buyTokensWithReferral(\r\n        PresalePhase phase,\r\n        address referrer\r\n    ) external payable {\r\n        require(referrer != msg.sender, \"Cannot refer yourself\");\r\n        require(phase == getActivePhase(), \"Invalid phase\");\r\n        require(\r\n            referrers[msg.sender] == address(0),\r\n            \"You already have a referrer\"\r\n        );\r\n\r\n        referrers[msg.sender] = referrer;\r\n        buyTokens(phase);\r\n\r\n        if (referrer != address(0)) {\r\n            uint256 referralReward = msg.value.mul(referrerPercentage).div(100);\r\n            payable(referrer).transfer(referralReward);\r\n        }\r\n    }\r\n\r\n    function buyTokens(PresalePhase phase) public payable {\r\n        require(msg.value > 0, \"Amount must be greater than 0\");\r\n        require(phase == getActivePhase(), \"Invalid phase\");\r\n        PresaleInfo storage presale = presalePhases[uint256(phase)];\r\n        require(block.timestamp < presale.phasetime, \"Phase is not active\");\r\n        uint256 tokensToBuy = bnbToToken(msg.value, phase);\r\n        require(\r\n            tokensToBuy >= minbuyToken,\r\n            \"Minimum purchase is 10,000 tokens\"\r\n        );\r\n        require(\r\n            tokensToBuy <= maxbuyToken,\r\n            \"Maximum purchase is 1,000,000 tokens\"\r\n        );\r\n\r\n        require(\r\n            presale.totalSold.add(tokensToBuy) <= presale.totalTokens,\r\n            \"Not enough tokens left for sale\"\r\n        );\r\n\r\n        balances[msg.sender][uint256(phase)] = balances[msg.sender][\r\n            uint256(phase)\r\n        ].add(tokensToBuy);\r\n        presale.totalSold = presale.totalSold.add(tokensToBuy);\r\n\r\n        emit TokensPurchased(msg.sender, tokensToBuy, msg.value, phase);\r\n    }\r\n\r\n    function bnbToToken(\r\n        uint256 bnb,\r\n        PresalePhase phase\r\n    ) public view returns (uint256) {\r\n        PresaleInfo storage presale = presalePhases[uint256(phase)];\r\n        uint256 bnbToUsd = bnb.mul(getLatestPrice());\r\n        uint256 numberOfTokens = bnbToUsd.mul(presale.tokenPrice);\r\n        return numberOfTokens.div(1e18).div(1e8);\r\n    }\r\n\r\n    function releaseTokens(PresalePhase phase) external {\r\n        PresaleInfo storage presale = presalePhases[uint256(phase)];\r\n        require(\r\n            block.timestamp >= presale.releaseStart,\r\n            \"Presale for this phase hasn't started yet, Please wait for next phase\"\r\n        );\r\n        require(block.timestamp >= presale.phasetime, \"Phase Not closed\");\r\n        uint256 _releasableAmount = releasableAmount(msg.sender, phase);\r\n        require(_releasableAmount > 0, \"No tokens to release\");\r\n\r\n        releasedAmounts[msg.sender][phase] = releasedAmounts[msg.sender][phase]\r\n            .add(_releasableAmount);\r\n        bfmToken.transferFrom(owner(), msg.sender, _releasableAmount);\r\n\r\n        emit TokensReleased(msg.sender, _releasableAmount, phase);\r\n    }\r\n\r\n    function releasableAmount(\r\n        address user,\r\n        PresalePhase phase\r\n    ) public view returns (uint256) {\r\n        PresaleInfo storage presale = presalePhases[uint256(phase)];\r\n\r\n        uint256 elapsedTime = block.timestamp.sub(presale.releaseStart);\r\n        uint256 releasedMonths = elapsedTime.div(presale.releaseDuration);\r\n        uint256 userPhaseBalance = balances[user][uint256(phase)];\r\n\r\n        uint256 totalReleasableAmount = 0;\r\n        for (\r\n            uint256 i = 0;\r\n            i <= releasedMonths && i < presale.releasedPercentPerMonth.length;\r\n            i++\r\n        ) {\r\n            totalReleasableAmount = totalReleasableAmount.add(\r\n                userPhaseBalance.mul(presale.releasedPercentPerMonth[i]).div(\r\n                    100\r\n                )\r\n            );\r\n        }\r\n\r\n        return totalReleasableAmount.sub(releasedAmounts[user][phase]);\r\n    }\r\n\r\n    function getActivePhase() public view returns (PresalePhase) {\r\n        uint256 currentTimestamp = block.timestamp;\r\n        PresalePhase activePhase = PresalePhase.Phase3;\r\n\r\n        for (\r\n            uint256 i = uint256(PresalePhase.Phase1);\r\n            i <= uint256(PresalePhase.Phase3);\r\n            i++\r\n        ) {\r\n            if (\r\n                currentTimestamp < presalePhases[i].phasetime &&\r\n                presalePhases[i].totalSold < presalePhases[i].totalTokens\r\n            ) {\r\n                activePhase = PresalePhase(i);\r\n                break;\r\n            }\r\n        }\r\n\r\n        return activePhase;\r\n    }\r\n\r\n    function getUserBalanceInfo(\r\n        address user,\r\n        PresalePhase phase\r\n    )\r\n        public\r\n        view\r\n        returns (uint256 totalBalance, uint256 released, uint256 pendingRelease)\r\n    {\r\n        totalBalance = balances[user][uint256(phase)];\r\n        released = releasedAmounts[user][phase];\r\n        pendingRelease = totalBalance.sub(released);\r\n    }\r\n\r\n    function withdrawBNB() external onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n\r\n    function setMinBuyToken(uint256 _newMinBuyToken) external onlyOwner {\r\n        minbuyToken = _newMinBuyToken;\r\n    }\r\n\r\n    function setMaxBuyToken(uint256 _newMaxBuyToken) external onlyOwner {\r\n        maxbuyToken = _newMaxBuyToken;\r\n    }\r\n\r\n    function setReferrerPercentage(uint256 _percentage) external onlyOwner {\r\n        require(\r\n            referrerPercentage > 0 && referrerPercentage <= 100,\r\n            \"referrerPercentage must be greater than 0 and less than 100\"\r\n        );\r\n        referrerPercentage = _percentage;\r\n    }\r\n\r\n    function setToken(IERC20 token) external onlyOwner {\r\n        require(\r\n            address(token) != address(0),\r\n            \"Token address cannot be the zero address\"\r\n        );\r\n        bfmToken = token;\r\n    }\r\n\r\n    function setTokenPrice(\r\n        PresalePhase phase,\r\n        uint256 _price\r\n    ) external onlyOwner {\r\n        require(\r\n            phase == PresalePhase.Phase1 ||\r\n                phase == PresalePhase.Phase2 ||\r\n                phase == PresalePhase.Phase3,\r\n            \"Invalid phase\"\r\n        );\r\n        presalePhases[uint256(phase)].tokenPrice = _price;\r\n    }\r\n\r\n    function setReleaseStart(\r\n        PresalePhase phase,\r\n        uint256 _releaseStart\r\n    ) external onlyOwner {\r\n        require(\r\n            phase == PresalePhase.Phase1 ||\r\n                phase == PresalePhase.Phase2 ||\r\n                phase == PresalePhase.Phase3,\r\n            \"Invalid phase\"\r\n        );\r\n        presalePhases[uint256(phase)].releaseStart =\r\n            block.timestamp +\r\n            _releaseStart;\r\n    }\r\n\r\n    function setReleasedPercentPerMonth(\r\n        PresalePhase phase,\r\n        uint256 _releaseDuration\r\n    ) external onlyOwner {\r\n        require(\r\n            phase == PresalePhase.Phase1 ||\r\n                phase == PresalePhase.Phase2 ||\r\n                phase == PresalePhase.Phase3,\r\n            \"Invalid phase\"\r\n        );\r\n        presalePhases[uint256(phase)].releaseDuration = _releaseDuration;\r\n    }\r\n\r\n    function setPhaseTime(\r\n        PresalePhase phase,\r\n        uint256 _phasetime\r\n    ) external onlyOwner {\r\n        require(\r\n            phase == PresalePhase.Phase1 ||\r\n                phase == PresalePhase.Phase2 ||\r\n                phase == PresalePhase.Phase3,\r\n            \"Invalid phase\"\r\n        );\r\n        presalePhases[uint256(phase)].phasetime = block.timestamp + _phasetime;\r\n    }\r\n\r\n    function emergencyWithdrawTokens(\r\n        address _token,\r\n        uint256 _amount\r\n    ) external onlyOwner {\r\n        IERC20(_token).transfer(owner(), _amount);\r\n    }\r\n\r\n    function setTokensaleLimits(\r\n        PresalePhase phase,\r\n        uint256 _totalTokens\r\n    ) external onlyOwner {\r\n        require(\r\n            phase == PresalePhase.Phase1 ||\r\n                phase == PresalePhase.Phase2 ||\r\n                phase == PresalePhase.Phase3,\r\n            \"Invalid phase\"\r\n        );\r\n        require(_totalTokens > 0, \"Tokens must be greater than 0\");\r\n        presalePhases[uint256(phase)].totalTokens = _totalTokens;\r\n    }\r\n\r\n    function setSoldToken(\r\n        PresalePhase phase,\r\n        uint256 _totalSold\r\n    ) external onlyOwner {\r\n        require(\r\n            phase == PresalePhase.Phase1 ||\r\n                phase == PresalePhase.Phase2 ||\r\n                phase == PresalePhase.Phase3,\r\n            \"Invalid phase\"\r\n        );\r\n        presalePhases[uint256(phase)].totalSold = _totalSold;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paidAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum BFMTokenPresale.PresalePhase\",\"name\":\"phase\",\"type\":\"uint8\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum BFMTokenPresale.PresalePhase\",\"name\":\"phase\",\"type\":\"uint8\"}],\"name\":\"TokensReleased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bfmToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bnb\",\"type\":\"uint256\"},{\"internalType\":\"enum BFMTokenPresale.PresalePhase\",\"name\":\"phase\",\"type\":\"uint8\"}],\"name\":\"bnbToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BFMTokenPresale.PresalePhase\",\"name\":\"phase\",\"type\":\"uint8\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BFMTokenPresale.PresalePhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"buyTokensWithReferral\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActivePhase\",\"outputs\":[{\"internalType\":\"enum BFMTokenPresale.PresalePhase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"enum BFMTokenPresale.PresalePhase\",\"name\":\"phase\",\"type\":\"uint8\"}],\"name\":\"getUserBalanceInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRelease\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxbuyToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minbuyToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"presalePhases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"phasetime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrerPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"enum BFMTokenPresale.PresalePhase\",\"name\":\"phase\",\"type\":\"uint8\"}],\"name\":\"releasableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BFMTokenPresale.PresalePhase\",\"name\":\"phase\",\"type\":\"uint8\"}],\"name\":\"releaseTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxBuyToken\",\"type\":\"uint256\"}],\"name\":\"setMaxBuyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinBuyToken\",\"type\":\"uint256\"}],\"name\":\"setMinBuyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BFMTokenPresale.PresalePhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_phasetime\",\"type\":\"uint256\"}],\"name\":\"setPhaseTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setReferrerPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BFMTokenPresale.PresalePhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_releaseStart\",\"type\":\"uint256\"}],\"name\":\"setReleaseStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BFMTokenPresale.PresalePhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_releaseDuration\",\"type\":\"uint256\"}],\"name\":\"setReleasedPercentPerMonth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BFMTokenPresale.PresalePhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_totalSold\",\"type\":\"uint256\"}],\"name\":\"setSoldToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BFMTokenPresale.PresalePhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BFMTokenPresale.PresalePhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_totalTokens\",\"type\":\"uint256\"}],\"name\":\"setTokensaleLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BFMTokenPresale", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000004e1c1bd35397042319fe252d2e324ad439b19f1e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4eed8f201f398629428680baa9fd2515f06f5c52dbbd558d5673e26ba213e732"}