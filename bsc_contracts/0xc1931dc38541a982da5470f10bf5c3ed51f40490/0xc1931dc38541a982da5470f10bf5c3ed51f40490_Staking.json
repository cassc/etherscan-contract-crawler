{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"MJCstake.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n/**\\n * @title StakingContract\\n * @dev This contract represents a staking system with different plans.\\n */\\ncontract Staking {\\n    address immutable owner; // The address of the contract owner\\n\\n    ERC20 immutable token; // Address of the ERC20 token being staked\\n\\n    // Constants defining referral limits and tier values\\n    uint256 public constant maxRefferalLimit = 10;\\n    uint256 public constant ZeroUSD = 0;\\n    uint256 public constant FiftyUSD = 50;\\n    uint256 public constant HundreadUSD = 100;\\n    uint256 public constant TwoHundreadUSD = 200;\\n    uint256 public constant FiveHundreadUSD = 500;\\n    uint256 public constant ThousandUSD = 1000;\\n    address public fees_address;\\n    uint public  fee_percent;\\n    uint public DirectStakingPercent=15;\\n    uint256 public totalStaked;\\n    uint256[] RewardPercentage = [50, 20, 10, 5, 5, 4, 3, 2, 1];\\n      uint public amountForoRefferer=85;\\n\\n    uint public amountForRewardUser=15;\\n\\n    uint public PercentForYearDist=50;\\n\\n    // Struct to store user staking information\\n    struct UserStaking {\\n        uint256 stakedAmount; // Amount of tokens staked\\n        uint256 stakingEndTime; // Time when staking ends\\n        uint256 StartDate;\\n        uint256 teamSize; // Size of the staking team\\n    }\\n    \\n    struct UserBuy {\\n        address referrer;\\n        uint amount;\\n        uint _tier;\\n        uint timestamp;\\n    }\\n    // Struct to store subscription details\\n    struct Subscription {\\n        uint256 tokenAmount;//How much token amount you have invested\\n        address parent;//who is the referer\\n        uint256 tier;//which tier who have choosen\\n    }\\n\\n    // Struct to store Stake_subscription details\\n    struct StakeSubscription {\\n        uint256 tokenAmount;\\n        address parent;\\n    }\\n\\n    //Struct to Store Rewards\\n    struct Rewards {\\n        uint256 totalrewards;\\n    }\\n    struct User_children {\\n        address[] child;\\n    }//children of certain users \\n\\n    // Mapping to store user data using their address\\n    mapping(address => UserStaking[]) public userStaking;\\n    //mapping for the UserBuys\\n    mapping(address=>UserBuy[]) public userBuys;\\n    //total staked amount\\n    mapping (address => uint)public  totalInvestedAmount;\\n\\n    mapping(address => uint256) public userCount; // Count of stakes per user\\n\\n    // Mapping to store user subscription data using their address\\n    mapping(address => Subscription) public userSubscription;\\n\\n    // Mapping to store user subscription data using their address\\n    mapping(address => StakeSubscription) public stakeSubscription;\\n\\n    mapping(address => Rewards) public userRewards;\\n\\n    // Mapping to track whether an address has been referred by the owner\\n    mapping(address => bool) public ownerReferred;\\n\\n    // Mapping to store children for each referrer\\n    mapping(address => User_children) private referrerToDirectChildren;\\n\\n    //mapping to store  indirect children for each referrer\\n    mapping (address=> User_children) private  referrerToIndirectChildren;\\n\\n\\n    //mapping For level1 Users to referrer\\n   mapping(uint => mapping(address => address[])) public LevelUsers;\\n\\n   //mapping For Level Users Count\\n   mapping(uint =>mapping(address=>uint))public  LevelCountUsers;\\n\\n    // Mapping to track the number of referrals per tier for each referrer\\n    mapping(address => uint256) public maxTierReferralCounts;\\n\\n    mapping(address => uint256) public rewardAmount;\\n\\n    mapping(address => mapping (uint=>uint))PlanCount;\\n\\n\\n    mapping(address =>mapping (uint=>bool))planUnlocked;\\n\\n    mapping(address=>mapping(uint=>uint))YearlyRewardForUser;\\n\\n    mapping(address=>mapping(uint=>bool))claimedYearlyReward;\\n\\n    // Event to log staking action\\n    event TokensStaked(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 stakingEndTime\\n    );//event for tokens staked\\n\\n    // Event to log unstaking action\\n    event TokensUnstaked(address indexed user, uint256 amount);\\n\\n    // Event to log referred from referrer\\n    event UserReferred(address indexed user, address indexed referrer);\\n\\n    // Event to log buy token with tier\\n    event TokenBought(address indexed buyer, uint256 amount, uint256 tier);\\n\\n    event DirectEntry(address indexed buyer, uint256 amount);\\n\\n    /**\\n     * @dev Modifier to restrict function access to the contract owner only.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Only the owner can perform this action\\\");\\n        _;\\n    }\\n    constructor(address _tokenAddress) {\\n        token = ERC20(_tokenAddress);\\n        owner = msg.sender;\\n        fees_address = 0x7597C6c5e04E159f669B85aFDf67979Da5047ef1;\\n    }\\n\\n    /**\\n     *@dev Parent Address for a given User\\n     */\\n    function getParent(address user) public view returns (address) {\\n        Subscription memory parent = userSubscription[user];\\n\\n        return parent.parent;\\n    }\\n\\n    /**\\n     * @dev Stake tokens for a given plan, staking duration, and team size.\\n     * @param tokenAmount_ amount of tokens to stake.\\n     * @param stakingDuration_ The duration of staking in days.\\n     * @param teamSize_ The size of the staking team.\\n     */\\n    function stakeTokens(\\n        uint256 tokenAmount_,\\n        uint256 stakingDuration_,\\n        uint256 teamSize_\\n    ) public {\\n        uint256 requiredAmount = tokenAmount_ * (10**(token.decimals()));\\n        require(\\n            stakingDuration_ == 90 ||\\n                stakingDuration_ == 180 ||\\n                stakingDuration_ == 365,\\n            \\\"Invalid staking duration\\\"\\n        );\\n        uint256 stakingEndTime = block.timestamp + stakingDuration_ * 1 days;\\n        uint256 StartDate = block.timestamp;\\n        UserStaking memory _newStake = UserStaking({\\n            stakedAmount: requiredAmount,\\n            stakingEndTime: stakingEndTime,\\n            StartDate: StartDate,\\n            teamSize: teamSize_ \\n        });\\n        userStaking[msg.sender].push(_newStake);\\n        userCount[msg.sender]++;\\n        totalInvestedAmount[msg.sender] +=requiredAmount;\\n       \\n        totalStaked += requiredAmount;\\n        token.transferFrom(msg.sender, address(this), requiredAmount);\\n      \\n        emit TokensStaked(msg.sender, requiredAmount, stakingEndTime);\\n    }\\n\\n\\n    function TotalTokenStaked(\\n        address userAddress\\n    ) public view returns (uint256) {\\n        uint256 totalStakedByUser = 0;\\n\\n        for (uint256 id = 0; id <= userCount[userAddress]; id++) {\\n            UserStaking memory user = userStaking[userAddress][id];\\n            totalStakedByUser += user.stakedAmount ;\\n        }\\n\\n        return totalStakedByUser;\\n    }\\n\\n    /**\\n     * @dev Check if a user is referred by a given referrer.\\n     * @param _referrer The address of the referrer.\\n     * @return Whether the user is referred and the tier of the referrer.\\n     */\\n    function isReferred(address _referrer) public view returns (uint256) {\\n        if (_referrer == owner) {\\n            return (ThousandUSD);\\n        }\\n\\n        Subscription memory referrerSubscription = userSubscription[_referrer];//if he not the owner then check the subscrition he was \\n\\n        if (referrerSubscription.tokenAmount == 0) {\\n            return (ZeroUSD);\\n        }\\n\\n        return (referrerSubscription.tier);\\n    }\\n\\n    /**\\n     * @dev Direct stake tokens and associate them with a referrer.\\n     * @param _referreladdress The address of the referrel.\\n     * @param _tokenAmount The amount of token.\\n\\n     */\\n    function DirectStakeJoining(\\n        address _referreladdress,\\n        uint256 _tokenAmount\\n    ) external {\\n        StakeSubscription memory subscription = stakeSubscription[msg.sender];\\n        require(\\n            subscription.tokenAmount == 0,\\n            \\\"User already has a subscription\\\"\\n        );\\n        uint256 amount = _tokenAmount * (10**(token.decimals()));\\n        subscription.tokenAmount = amount;\\n        subscription.parent = _referreladdress;\\n        totalInvestedAmount[msg.sender] +=amount;\\n\\n        require(\\n            token.balanceOf(msg.sender) >= (amount),\\n            \\\"Not enough tokens in the contract\\\"\\n        );\\n        require(\\n            token.allowance(msg.sender, address(this)) >= (amount),\\n            \\\"Not enough allowance\\\"\\n        );\\n        token.transferFrom(msg.sender, address(this), amount);\\n       \\n        uint  percenttorefferer=((amount*DirectStakingPercent)/100);\\n        token.transfer(_referreladdress, percenttorefferer);\\n\\n        emit DirectEntry(msg.sender, _tokenAmount);\\n    }\\n\\n    /**\\n     * @dev Buy tokens and associate them with a referrer.\\n     * @param _referrer The address of the referrer.\\n     * @param _tokenAmount The amount of token.\\n     * @param _tier The chosen referral tier.\\n     */\\n    function buyTokens(\\n        address _referrer,//given the refferer address\\n        uint256 _tokenAmount,//given the tokenAmount which will include fee also\\n        uint256 _tier//given the tier amount\\n    ) external {\\n        require(\\n            _tier == ZeroUSD ||\\n                _tier == FiftyUSD ||\\n                _tier == HundreadUSD ||\\n                _tier == TwoHundreadUSD ||\\n                _tier == FiveHundreadUSD ||\\n                _tier == ThousandUSD,\\n            \\\"Invalid tier value\\\"\\n        );\\n        require(planUnlocked[msg.sender][_tier]== false,\\\"the planUnlocked Should be false\\\");\\n        uint256 amount = _tokenAmount * (10**(token.decimals()));\\n        uint256 fee = ((_tokenAmount*(fee_percent))/100);\\n        require(_referrer != address(0), \\\"Invalid referrer address\\\");\\n        if (_referrer == owner) {\\n            Subscription memory subscription = Subscription(\\n                amount,\\n                _referrer,\\n                _tier\\n            );\\n            \\n            userSubscription[msg.sender] = subscription;\\n        }\\n\\n\\n        uint256 userTier = isReferred(_referrer);\\n        bool isReffererRewardEnabled;\\n        if (_tier == userTier) {\\n\\n            if( maxTierReferralCounts[_referrer] > maxRefferalLimit){\\n                isReffererRewardEnabled =false;\\n            }  \\n            else {\\n                isReffererRewardEnabled=true;\\n                maxTierReferralCounts[_referrer]++;\\n            } \\n            \\n            Subscription memory subscription = Subscription(\\n                amount,\\n                _referrer,\\n                _tier\\n            );//\\n            userSubscription[msg.sender] = subscription;\\n            \\n           \\n        }\\n        else {\\n            isReffererRewardEnabled=true;\\n            Subscription memory subscription = Subscription(\\n                amount,\\n                _referrer,\\n                _tier\\n            );\\n            userSubscription[msg.sender] = subscription;\\n            \\n        }\\n\\n\\n        //Set the Direct and Indirect Users\\n        setDirectAndIndirectUsers(msg.sender, _referrer);\\n        //Set the levels for the users\\n        setLevelUsers(msg.sender, _referrer);\\n        //Shown the total Invested Amount\\n        totalInvestedAmount[msg.sender] += _tokenAmount * (10**(token.decimals()));\\n        //what is the planCount\\n        PlanCount[_referrer][_tier] += 1;\\n        //add to the user Buys\\n        UserBuy memory _newBuy=UserBuy( {\\n         referrer:_referrer,\\n         amount :amount,\\n         _tier:_tier,\\n         timestamp:block.timestamp\\n       });\\n       userBuys[msg.sender].push(_newBuy);\\n        //Unlock the Plan\\n        planUnlocked[msg.sender][_tier]= true;\\n        \\n        // Check if the contract has enough tokens to transfer\\n        require(\\n            token.balanceOf(msg.sender) >= (amount+fee),\\n            \\\"Not enough tokens in the contract\\\"\\n        );\\n\\n\\n        // Check allowance\\n        require(\\n            token.allowance(msg.sender, address(this)) >= (amount+fee),\\n            \\\"Not enough allowance\\\"\\n        );\\n\\n        // Perform the transfer\\n        require(\\n            token.transferFrom(msg.sender, address(this), (amount+fee)),\\n            \\\"Token transfer failed\\\"\\n        );\\n\\n        // Transfer fees to fees_address\\n        require(token.transfer(fees_address, fee), \\\"Fee transfer failed\\\");\\n        if(isReffererRewardEnabled)\\n        {\\n        address new_referrel;\\n        new_referrel = msg.sender;\\n       \\n        uint EightyFivePercentOfAmount=(amount*(amountForoRefferer))/100;\\n        uint fifteenPercentOfAmount=(amount*(amountForRewardUser))/100;\\n        require((EightyFivePercentOfAmount+fifteenPercentOfAmount)==amount,\\\"the amount needs to be equally distrinbuted\\\");\\n        token.transfer(msg.sender, fifteenPercentOfAmount);\\n        YearlyRewardForUser[msg.sender][_tier]=fifteenPercentOfAmount;\\n\\n        for (uint256 i = 0; i < 9; i++) {\\n            if(isReffererRewardEnabled)\\n            {\\n                if (new_referrel == owner) {\\n                \\n                 break;\\n                }\\n            address parent_addr = getParent(new_referrel);\\n            if(planUnlocked[parent_addr][_tier]==true)\\n            {\\n            uint256 reward_amount = (RewardPercentage[i] * EightyFivePercentOfAmount) / 100;\\n            userRewards[parent_addr] = Rewards({totalrewards :(userRewards[parent_addr].totalrewards+reward_amount)});\\n           \\n            require(\\n                token.balanceOf(address(this)) >= reward_amount,\\n                \\\"Not enough tokens in the contract\\\"\\n            );\\n\\n            require(\\n                token.transfer(parent_addr, reward_amount),\\n                \\\"Reward transfer failed\\\"\\n            );\\n            }\\n\\n            new_referrel = parent_addr;\\n            }\\n            \\n        }\\n       }\\n        emit TokenBought(msg.sender, amount, _tier);\\n\\n    }\\n    // function ClaimYearlyReward(uint _tier)external {\\n    //         require(_tier !=0,\\\"the tier should not be zero tier\\\");\\n    //         require(claimedYearlyReward[msg.sender][_tier]==false,\\\"you have already claimed the reward for this plan\\\");\\n    //         uint FiftyPercentOfReward=((YearlyRewardForUser[msg.sender][_tier])*PercentForYearDist)/100;\\n    //         require(token.balanceOf(address(this))>=FiftyPercentOfReward);\\n    //         claimedYearlyReward[msg.sender][_tier] =true;\\n    //         token.transfer(msg.sender, FiftyPercentOfReward);\\n\\n    // }\\n    function showAllParent(\\n        address user\\n    ) external view returns (address[] memory) {\\n        address[] memory parent = new address[](9); \\n        address new_referrel = user;\\n        for (uint256 i = 0; i < 9; i++) {\\n            address parent_addr = getParent(new_referrel);\\n            parent[i] = parent_addr;\\n\\n            if (new_referrel == owner) {\\n                break;\\n            } else {\\n                new_referrel = parent_addr;\\n            }\\n        }\\n\\n        return parent;\\n    }\\n\\n    function showAllDirectChild(\\n        address user\\n    ) external view returns (address[] memory) {\\n        address[] memory children = referrerToDirectChildren[user].child;\\n\\n        return children;\\n    }\\n\\n   function showAllInDirectChild(\\n        address user\\n    ) external view returns (address[] memory) {\\n        address[] memory children = referrerToIndirectChildren[user].child;\\n\\n        return children;\\n    }\\n\\n\\n    /*\\n    */\\n    function SetFeePercent(uint _feePercent)external onlyOwner{\\n        require(_feePercent != 0,\\\"the fee percent should not be equal to zero\\\");\\n        fee_percent= _feePercent;\\n    }\\n\\n    function setDirectAndIndirectUsers(address _user, address _referee) internal {\\n        address DirectReferee = _referee;\\n      \\n        referrerToDirectChildren[DirectReferee].child.push(_user);\\n        setIndirectUsersRecursive(_user, _referee);\\n    }\\n    function setIndirectUsersRecursive(address _user, address _referee) internal {\\n    if (_referee != owner) {\\n        address presentReferee = getParent(_referee);\\n        referrerToIndirectChildren[presentReferee].child.push(_user);\\n        setIndirectUsersRecursive(_user, presentReferee);\\n    }\\n}\\n    function setLevelUsers(address _user, address _referee) internal {\\n        address presentReferee = _referee;\\n        \\n        for (uint i = 1; i <= 9; i++) {\\n            LevelUsers[i][presentReferee].push(_user);\\n            LevelCountUsers[i][presentReferee]++;\\n\\n\\n            if (presentReferee == owner) {\\n                break;\\n            } else {\\n                presentReferee = getParent(presentReferee);\\n            }\\n        }\\n    }\\n\\n    function getTotalInvestedAmount(address _user)external view returns(uint) {\\n        require(_user!=address(0),\\\"the user address cannot be equal to zero\\\");\\n        return totalInvestedAmount[_user];\\n    }\\n    //return the plancount\\n    function getThePlanCount(address _referee,uint _plan)external view returns(uint)\\n    {\\n        require(_referee != address(0),\\\"the referee address is not equal to zero\\\");\\n        return PlanCount[_referee][_plan];\\n    }\\n    //get the Unlock Plan details\\n    function getUnlockPlanDetails(address _user,uint _plan)external view returns(bool)\\n    {\\n        require(_user != address(0),\\\"the user address is not equal to zero address\\\");\\n        return planUnlocked[_user][_plan];\\n    }\\n    //get function to get the userBuys\\n    function getUserBuys(address _user)external view returns(UserBuy[] memory) \\n    {\\n        require(_user != address(0),\\\"the user address is not equal to zero address\\\");\\n        return userBuys[_user];\\n    }\\n    /**\\n     * @dev Calculate the total rewards received by a user.\\n     * @param userAddress The address of the user.\\n     * @return The total rewards received by the user.\\n     */\\n    function totalRewardsReceived(\\n        address userAddress\\n    ) public view returns (uint256) {\\n        uint256 totalRewards = 0;\\n        StakeSubscription memory directStake = stakeSubscription[userAddress];\\n        totalRewards += userRewards[directStake.parent].totalrewards;\\n        totalRewards += userRewards[userAddress].totalrewards;\\n         return totalRewards;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DirectEntry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"name\":\"TokenBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingEndTime\",\"type\":\"uint256\"}],\"name\":\"TokensStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"UserReferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referreladdress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"DirectStakeJoining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DirectStakingPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FiftyUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FiveHundreadUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HundreadUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LevelCountUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LevelUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PercentForYearDist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"SetFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ThousandUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"TotalTokenStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TwoHundreadUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZeroUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountForRewardUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountForoRefferer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee_percent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getParent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_plan\",\"type\":\"uint256\"}],\"name\":\"getThePlanCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalInvestedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_plan\",\"type\":\"uint256\"}],\"name\":\"getUnlockPlanDetails\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserBuys\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct Staking.UserBuy[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"isReferred\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRefferalLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxTierReferralCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerReferred\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"showAllDirectChild\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"showAllInDirectChild\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"showAllParent\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeSubscription\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingDuration_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamSize_\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalInvestedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"totalRewardsReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userBuys\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalrewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"StartDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamSize\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userSubscription\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000009f2c886e49b6851f8488f8818ddbadfd16b13e7a", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}