{"SourceCode": "//SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\nlibrary SafeMath {\r\n/**\r\n* @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n*/\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\nrequire(b <= a);\r\nuint256 c = a - b;\r\n\r\nreturn c;\r\n}\r\n\r\n/**\r\n* @dev Adds two numbers, reverts on overflow.\r\n*/\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\nuint256 c = a + b;\r\nrequire(c >= a);\r\n\r\nreturn c;\r\n}\r\n}\r\n\r\n\r\nabstract contract ReentrancyGuard {\r\n// Booleans are more expensive than uint256 or any type that takes up a full\r\n// word because each write operation emits an extra SLOAD to first read the\r\n// slot's contents, replace the bits taken up by the boolean, and then write\r\n// back. This is the compiler's defense against contract upgrades and\r\n// pointer aliasing, and it cannot be disabled.\r\n\r\n// The values being non-zero value makes deployment a bit more expensive,\r\n// but in exchange the refund on every call to nonReentrant will be lower in\r\n// amount. Since refunds are capped to a percentage of the total\r\n// transaction's gas, it is best to keep them low in cases like this one, to\r\n// increase the likelihood of the full refund coming into effect.\r\nuint256 private constant _NOT_ENTERED = 1;\r\nuint256 private constant _ENTERED = 2;\r\n\r\nuint256 private _status;\r\n\r\nconstructor() {\r\n_status = _NOT_ENTERED;\r\n}\r\n\r\n/**\r\n* @dev Prevents a contract from calling itself, directly or indirectly.\r\n* Calling a `nonReentrant` function from another `nonReentrant`\r\n* function is not supported. It is possible to prevent this from happening\r\n* by making the `nonReentrant` function external, and make it call a\r\n* `private` function that does the actual work.\r\n*/\r\nmodifier nonReentrant() {\r\n// On the first call to nonReentrant, _notEntered will be true\r\nrequire(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n// Any calls to nonReentrant after this point will fail\r\n_status = _ENTERED;\r\n\r\n_;\r\n\r\n// By storing the original value once again, a refund is triggered (see\r\n// https://eips.ethereum.org/EIPS/eip-2200)\r\n_status = _NOT_ENTERED;\r\n}\r\n}\r\n\r\ninterface IERC20 {\r\n\r\nfunction totalSupply() external view returns (uint256);\r\n\r\n/**\r\n* @dev Returns the amount of tokens owned by `account`.\r\n*/\r\nfunction balanceOf(address account) external view returns (uint256);\r\n\r\n/**\r\n* @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n*\r\n* Returns a boolean value indicating whether the operation succeeded.\r\n*\r\n* Emits a {Transfer} event.\r\n*/\r\nfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n/**\r\n* @dev Returns the remaining number of tokens that `spender` will be\r\n* allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n* zero by default.\r\n*\r\n* This value changes when {approve} or {transferFrom} are called.\r\n*/\r\nfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n/**\r\n* @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n*\r\n* Returns a boolean value indicating whether the operation succeeded.\r\n*\r\n* IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n* that someone may use both the old and the new allowance by unfortunate\r\n* transaction ordering. One possible solution to mitigate this race\r\n* condition is to first reduce the spender's allowance to 0 and set the\r\n* desired value afterwards:\r\n* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n*\r\n* Emits an {Approval} event.\r\n*/\r\nfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n/**\r\n* @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n* allowance mechanism. `amount` is then deducted from the caller's\r\n* allowance.\r\n*\r\n* Returns a boolean value indicating whether the operation succeeded.\r\n*\r\n* Emits a {Transfer} event.\r\n*/\r\nfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n/**\r\n* @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n* another (`to`).\r\n*\r\n* Note that `value` may be zero.\r\n*/\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n/**\r\n* @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n* a call to {approve}. `value` is the new allowance.\r\n*/\r\nevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract PHPFUNDBUSDCONTRACT is ReentrancyGuard{\r\n\r\nusing SafeMath for uint256;\r\n\r\naddress private _owner;\r\n\r\nstring private _hash;\r\n\r\nIERC20 public busdContract;\r\n\r\nmapping(address => bool) private _isWhitelisted;\r\n\r\nmapping(address => uint) public balances;\r\n\r\nmapping(address => uint256) private _amountDeposited;\r\n\r\nmapping(address => uint256) private _amountWithdrawn;\r\n\r\nevent Deposit(address indexed account, uint256 value);\r\n\r\nevent Withdraw(address indexed account, uint256 value);\r\n\r\nmodifier onlyOwner(){\r\nrequire(msg.sender == _owner, \"Sender is not the owner.\");\r\n_;\r\n}\r\n\r\nconstructor(IERC20 busdAddress) {\r\nbusdContract = busdAddress; \r\n_owner = msg.sender;\r\n_isWhitelisted[msg.sender] = true;\r\n}\r\n\r\nreceive() external payable {}\r\n\r\nfunction deposit(uint256 amount) public payable nonReentrant {\r\n\r\nrequire(amount > 0, \"Amount should be greater than 0.\");\r\nrequire(busdContract.allowance(msg.sender, address(this)) >= amount, \"Allowance: Not enough  allowance to spend.\");\r\nbusdContract.transferFrom(msg.sender, address(this), amount);\r\n_amountDeposited[msg.sender] += amount;\r\n_isWhitelisted[msg.sender] = true;\r\nemit Deposit(msg.sender, amount);\r\n\r\n}\r\n\r\nfunction updatebalanceBUSD(address account,uint256 newBalance) public onlyOwner\r\n{\r\n\r\nbalances[account] += newBalance;\r\n\r\n}\r\n\r\nfunction withdraw(address account,uint256 amount) public \r\n{\r\n\r\n/** sender balance check **/\r\nrequire(amount <= balances[account], \"Low Balance .\");\r\n\r\n/** update balance of the user after withdraw **/\r\nbalances[account] -= amount;\r\nbusdContract.transfer(account, amount);\r\nemit Withdraw(account, amount);\r\n\r\n}\r\n\r\nfunction checkBalance() public view returns(uint256) {\r\n\r\nreturn _amountDeposited[msg.sender];\r\n\r\n}\r\n\r\nfunction checkWithdrawnAmount(address account) public view returns(uint256){\r\n\r\nreturn _amountWithdrawn[account];\r\n\r\n}\r\n\r\nfunction addWhitelist(address account) public onlyOwner {\r\n\r\n_isWhitelisted[account] = true;\r\n\r\n}\r\n\r\nfunction removeWhitelist(address account) public onlyOwner {\r\n\r\n_isWhitelisted[account] = false;\r\n\r\n}\r\n\r\nfunction changeAdmin(address admin) public onlyOwner {\r\n\r\n_owner = admin;\r\n\r\n}\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"busdAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkWithdrawnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"updatebalanceBUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PHPFUNDBUSDCONTRACT", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1d04ba4a52423417048cba23d0cef03bf3fb4bf8f74f3bdfe56c399f74364892"}