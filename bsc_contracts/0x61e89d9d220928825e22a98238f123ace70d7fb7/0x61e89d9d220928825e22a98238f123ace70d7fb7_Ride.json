{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-07-15\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-07-08\r\n */\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\nlibrary SafeMath {\r\n    \r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary EnumerableSet {\r\n    struct Set {\r\n        bytes32[] _values;\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            set._values.pop();\r\n\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _contains(Set storage set, bytes32 value)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    function _at(Set storage set, uint256 index)\r\n        private\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        require(\r\n            set._values.length > index,\r\n            \"EnumerableSet: index out of bounds\"\r\n        );\r\n        return set._values[index];\r\n    }\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    function remove(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    function contains(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(Bytes32Set storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function remove(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function contains(AddressSet storage set, address value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(AddressSet storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    function remove(UintSet storage set, uint256 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    function contains(UintSet storage set, uint256 value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(UintSet storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IPancakePair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IPancakeERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n        \r\n}\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function getOwner() external view returns (address);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Burn(address indexed owner, address indexed to, uint256 value);\r\n}\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n * \u529f\u80fd\uff1a\u6388\u6743\u62bd\u8c61\u7c7b\r\n */\r\nabstract contract Auth {\r\n    address internal owner; // \u5f53\u5408\u7ea6\u6240\u6709\u8005\u5730\u5740\r\n    mapping(address => bool) internal authorizations;  // \u6388\u6743\u5730\u5740\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[_owner] = true; // \u9ed8\u8ba4\u5408\u7ea6\u521b\u5efa\u8005\u62e5\u6709\u6388\u6743\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be contract owner\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be authorized\r\n     */\r\n    modifier authorized() {\r\n        require(isAuthorized(msg.sender), \"!AUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Authorize address. Owner only\r\n     */\r\n    function authorize(address adr) public onlyOwner {\r\n        authorizations[adr] = true;\r\n    }\r\n\r\n    /**\r\n     * Remove address' authorization. Owner only\r\n     */\r\n    function unauthorize(address adr) public onlyOwner {\r\n        authorizations[adr] = false;\r\n    }\r\n\r\n    /**\r\n     * Check if address is owner\r\n     */\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    /**\r\n     * Return address' authorization status\r\n     */\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    /**\r\n     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized\r\n     */\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        authorizations[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface Share {\r\n    function share(uint256 amount) external returns (uint256 eachLPIncome);\r\n}\r\n\r\ncontract Ride is IBEP20, Auth {\r\n    using SafeMath for uint256; // uint \u7c7b\u578b\u9644\u7740\u5b89\u5168\u8ba1\u7b97\u51fd\u6570\r\n    // using strings for string;\r\n\r\n    string constant _name = \"Ride\"; // \u58f0\u660e \u901a\u8bc1\u540d\u79f0\r\n    string constant _symbol = \"Ride\"; // \u58f0\u660e\u901a\u8bc1\u7b26\u53f7\r\n    uint8 constant _decimals = 18; // \u58f0\u660e\u901a\u8bc1\u7cbe\u5ea6\r\n\r\n    uint256 _totalSupply = 50002179 * (10**_decimals); // \u58f0\u660e\u901a\u8bc1\u603b\u53d1\u884c\u91cf\r\n\r\n    mapping(address => uint256) _balances; // \u7528\u6237\u4f59\u989d\r\n    mapping(address => mapping(address => uint256)) _allowances; // \u7528\u6237\u6388\u6743\u989d\u5ea6\r\n\r\n    IUniswapV2Router02 public uniswapV2Router; // \u4ea4\u6613\u8def\u7531\r\n    // \u5b9a\u4e49\u4f7f\u7528\u7684\u5730\u5740\r\n    address public DG_pair; // \u6d41\u52a8\u6c60\u5e95\u6c60\u5730\u5740\r\n    address public dexRouter; // \u8584\u997c\u4ea4\u6613\u8def\u7531\u5730\u5740\r\n    // address public WBNB;\r\n    address public USDT; // BSC\u4e0aUSDT\u5730\u5740\r\n\r\n    // \u9ed1\u6d1e\u5730\u5740\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n\r\n    //\u5408\u7ea6\u521d\u59cb\u5316\u5730\u5740, \u90e8\u7f72\u5730\u5740\r\n    address _initAddress;\r\n\r\n    mapping(address => bool) _inFeeFreeAccount; // \u4e70\u5165\u514d\u624b\u7eed\u8d39\u8d26\u6237\r\n    mapping(address => bool) _outFeeFreeAccount; // \u5356\u51fa\u514d\u624b\u7eed\u8d39\u8d26\u6237\r\n\r\n    // \u624b\u7eed\u8d39\u8d39\u7387\u5b9a\u4e49\r\n    uint256 feeDenominator = 10000; // \u65b9\u4fbf\u4e0b\u9762\u7684\u6570\u636e\u5b9e\u73b0\u5c0f\u6570\r\n    // \u4e70\u5165\r\n    uint256 buyFee = 300; // \u4e70\u5165\u6ed1\u70b9%\r\n    address buyFeeAddress; // \u4e70\u5165\u624b\u7eed\u8d39\u5730\u5740\r\n    // \u5356\u51fa\r\n    uint256 sellFee = 300; // \u5356\u51fa\u6ed1\u70b92%\r\n\r\n    address sellFeeAddress = DEAD; // \u5356\u51fa\u624b\u7eed\u8d39\u5730\u5740\r\n\r\n    uint256 FreeBuyTime;\r\n\r\n    address[] public LpHolder;\r\n    mapping(address=>bool) public IsLpHolder;\r\n\r\n\r\n\r\n    constructor(address _dexRouter, address _DG) Auth(msg.sender) {\r\n        dexRouter = _dexRouter; // \u8584\u997c\u4ea4\u6613\u5730\u5740\r\n        // USDT = _USDT; // BSC USDT\u5730\u5740\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(dexRouter);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        DG_pair = IPancakeFactory(_uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            _DG\r\n        );\r\n        require(IPancakePair(DG_pair).token1() == address(this), \"invalid token address\");\r\n        mint(_totalSupply);\r\n\r\n        _initAddress = msg.sender;\r\n        \r\n    }\r\n\r\n    function mint(uint256 total) internal returns (bool) {\r\n        _balances[msg.sender] = total;\r\n        return true;\r\n    }\r\n\r\n    // \u5b9e\u73b0IBEP20 \u529f\u80fd\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function decimals() external pure override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function symbol() external pure override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external pure override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function getOwner() external view override returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function balanceOf(address account)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address holder, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[holder][spender];\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, _totalSupply);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        require(_balances[msg.sender] >= amount, \"Transfer amount exceeds allowance\");\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        require(_allowances[sender][msg.sender] >= amount, \"Transfer amount exceeds allowance\");\r\n        _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount);\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    // IBEP 20 \u5b9e\u73b0\u5b8c\u6210\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns(bool) {\r\n\r\n        // \u9501\u5b9a\u521d\u59cb\u5316\u6d41\u52a8\u6c60, \u53ea\u5141\u8bb8\u5408\u7ea6\u90e8\u7f72\u8005\u6dfb\u52a0\r\n        if( recipient == DG_pair && IERC20(recipient).totalSupply() == 0  ){\r\n            // require(sender == _initAddress,\"not allow init\");\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n\r\n        uint256 finalAmount = amount;\r\n\r\n        if (recipient == DG_pair) {\r\n            \r\n            if (isLpAction(sender, recipient)) {\r\n                // \u8fd9\u91cc\u662f\u6dfb\u52a0\u6d41\u52a8\u6027\r\n                if (!IsLpHolder[sender] && finalAmount > 0) {\r\n                    LpHolder.push(sender);\r\n                    IsLpHolder[sender] = true;\r\n                }\r\n            } else {\r\n                // \u8fd9\u91cc\u662f\u5356\u51fa\r\n                if (_outFeeFreeAccount[sender] != true) {\r\n                    // \u5356\u51fa\u8005\u4e0d\u5728\u5356\u51fa\u514d\u7a0e\u8d26\u6237\u4e2d\r\n                    uint256 burnAmount = amount.mul(sellFee).div(feeDenominator);\r\n\r\n                    if (sellFeeAddress == DEAD) {\r\n                        burn(sender, burnAmount);\r\n                    } else {\r\n                        _basicTransfer(sender, sellFeeAddress, burnAmount);\r\n                    }\r\n                    finalAmount = amount.mul(97).div(100);\r\n                }\r\n            }\r\n        }\r\n        if (sender == DG_pair ) { \r\n\r\n            if (!isLpAction(sender, recipient)) {\r\n                // \u8fd9\u91cc\u662f\u4e70\u5165\r\n                if (_inFeeFreeAccount[recipient] == false) {\r\n                    uint256 burnAmount = amount.mul(buyFee).div(feeDenominator);\r\n                    if (buyFeeAddress == DEAD) {\r\n                        burn(sender, burnAmount);\r\n                    } else {\r\n                        _basicTransfer(sender, sellFeeAddress, burnAmount);\r\n                    }\r\n\r\n                    finalAmount = amount.mul(97).div(100);\r\n                }\r\n            }\r\n                \r\n        }\r\n\r\n        if (sender != DG_pair && recipient != DG_pair) {\r\n            uint _burnAmount = amount.mul(300).div(feeDenominator);\r\n            finalAmount = amount.mul(97).div(100);\r\n            burn(sender, _burnAmount);\r\n        }\r\n        \r\n        if (finalAmount > 0) {\r\n            _basicTransfer(sender, recipient, finalAmount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    // \u6700\u8fd1\u7684\u57fa\u7840\u8f6c\u8d26\u63a5\u53e3\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        require(_balances[sender] >= amount, \"Insufficient Tokens\");\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    // \u71c3\u70e7\u9500\u6bc1\r\n    function burn(address sender, uint256 amount) internal returns(bool) {\r\n        // maxBurnTotal = maxBurnTotal.sub(amount); // \u9500\u6bc1\u540e, \u51cf\u5c11\u9500\u6bc1\u5c01\u9876\u6570\u91cf\r\n        return _basicTransfer(sender, DEAD, amount);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * \u5165\u8d26\u514d\u7a0e\u8d26\u6237\r\n     */\r\n    function addInNoFeeAddress(address addr) public onlyOwner returns(bool) {\r\n        _inFeeFreeAccount[addr] = true;\r\n        return true;\r\n    } \r\n\r\n    /**\r\n     * \u51fa\u8d26\u514d\u7a0e\u8d26\u6237\r\n     */\r\n    function addOutNoFeeAddress(address addr) public onlyOwner returns(bool) {\r\n        _outFeeFreeAccount[addr] = true;\r\n        return true;\r\n    } \r\n\r\n    /**\r\n     * \u51fa\u5165\u8d26\u90fd\u514d\u7a0e\u8d26\u6237\r\n     */\r\n    function addNoFeeAddress(address addr) public onlyOwner returns(bool) {\r\n        addInNoFeeAddress(addr);\r\n        addOutNoFeeAddress(addr);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * \u5220\u9664\u5165\u8d26\u514d\u7a0e\u8d26\u6237\r\n     */\r\n    function delInNoFeeAddress(address addr) public onlyOwner returns(bool) {\r\n        _inFeeFreeAccount[addr] = false;\r\n        return true;\r\n    } \r\n\r\n    /**\r\n     * \u5220\u9664\u51fa\u8d26\u514d\u7a0e\u8d26\u6237\r\n     */\r\n    function delOutNoFeeAddress(address addr) public onlyOwner returns(bool) {\r\n        _outFeeFreeAccount[addr] = false;\r\n        return true;\r\n    } \r\n\r\n    /**\r\n     * \u5220\u9664\u51fa\u5165\u8d26\u90fd\u514d\u7a0e\u8d26\u6237\r\n     */\r\n    function delNoFeeAddress (address addr) public onlyOwner returns(bool) {\r\n        delInNoFeeAddress(addr);\r\n        delOutNoFeeAddress(addr);\r\n        return true;\r\n    }\r\n\r\n    // \u5224\u65ad\u662f\u5426\u4e3a\u6d41\u52a8\u6027\u64cd\u4f5c\r\n    function isLpAction(address from, address to) internal view returns(bool) {\r\n        if(from != DG_pair && to != DG_pair ) return false;\r\n        \r\n        address pair = DG_pair;\r\n    \r\n        address token0 = IPancakePair(pair).token0();\r\n        (uint reserve0,,) = IPancakePair(pair).getReserves();\r\n        uint balance0 = IERC20(token0).balanceOf(pair);\r\n        if(to == pair){\r\n            return balance0 > reserve0;\r\n        }\r\n        if(from == pair){\r\n            return balance0 < reserve0;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function setFeeAccount(address account) public onlyOwner returns(bool) {\r\n        sellFeeAddress = account;\r\n        return true;\r\n    }\r\n\r\n    function LpReward(address sender) public onlyOwner returns(bool) {\r\n\r\n        uint len = LpHolder.length - 1;\r\n\r\n        uint dg_pair_ride = _balances[DG_pair]; // DG/RIDE\u6d41\u52a8\u6c60\u6240\u6709\u7684RIDE\u6570\u91cf\r\n        uint lpRewardAmount = dg_pair_ride.mul(5).div(100);\r\n        // uint mxc_pair_ride = _balances[MXC_pair]; // MXC/RIDE\u6d41\u52a8\u6c60\u6240\u6709\u7684RIDE\u6570\u91cf\r\n        \r\n        IERC20 DG = IERC20(DG_pair);\r\n        // IBEP20 MXC = IBEP20(MXC_pair);\r\n\r\n        uint DG_total = DG.totalSupply();\r\n        // uint MXC_total = MXC.totalSupply();\r\n\r\n        for(uint i = 0; i <= len; i++) {\r\n            address holder = LpHolder[i];\r\n            uint amount_DG = lpRewardAmount.mul(DG.balanceOf(holder)).div(DG_total);\r\n            _basicTransfer(sender, holder, amount_DG);\r\n        }\r\n\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dexRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DG\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DG_pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"IsLpHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LpHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"LpReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addInNoFeeAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addNoFeeAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addOutNoFeeAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"delInNoFeeAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"delNoFeeAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"delOutNoFeeAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setFeeAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Ride", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://018f3ed8a46adab477362336e411bfa8bcb77e6d8689f0dca10dc45e4a5866c8"}