{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.19;\r\npragma abicoder v2;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n}\r\n\r\ncontract ScrooG {\r\n    IERC20 BEP20USDT = IERC20(0x55d398326f99059fF775485246999027B3197955); // USDT\r\n\r\n    event BetRed(uint128 indexed battleId, address indexed sender, uint256 amount, uint256 battleEndTime);\r\n    event BetBlue(uint128 indexed battleId, address indexed sender, uint256 amount, uint256 battleEndTime);\r\n    event BattleCreated(uint128 indexed battleId, address indexed sender, uint64 royaltyPercent, uint256 battleStartTime, uint256 battleEndTime);\r\n    event BattleApproved(uint128 indexed battleId, address indexed sender);\r\n    event BattlePaid(uint128 indexed battleId);\r\n\r\n    address public immutable owner;\r\n    address public scroogAddress;  // The address where the system's commission is transferred.\r\n\r\n    uint256 public minBetAmount;\r\n    uint256 public maxBetAmount;\r\n\r\n    uint256 public battleTimeout;\r\n    uint256 public betTimeout;\r\n\r\n    uint64 public feePercent;\r\n\r\n    struct Battle {\r\n        uint64 royaltyPercent;\r\n        uint64 feePercent;\r\n\r\n        uint256 blueTotalBets;\r\n        uint256 redTotalBets;\r\n\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n\r\n        address blueAddress;\r\n        address redAddress;\r\n\r\n        bool paid;\r\n    }\r\n\r\n    mapping(uint128 battleId => Battle) public battles;\r\n\r\n    mapping(uint128 battleId => address[]) public blueAddrs;\r\n    mapping(uint128 battleId => mapping (address sender => uint256)) public blueBets;\r\n\r\n    mapping(uint128 battleId => address[]) public redAddrs;\r\n    mapping(uint128 battleId => mapping (address sender => uint256)) public redBets;\r\n\r\n    modifier onlyOwner {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(msg.sender == owner, \"Not owner\");\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        scroogAddress = msg.sender;\r\n\r\n        minBetAmount = 1 * 1e18;    // 1 USDT\r\n        maxBetAmount = 1000 * 1e18; // 1000 USDT\r\n\r\n        battleTimeout = 1800;\r\n        betTimeout = 300;\r\n\r\n        feePercent = 10_000;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to check if the amount is within the allowed range.\r\n     * @param amount The amount to check.\r\n     */\r\n    function _checkAmount(uint256 amount) internal view virtual {\r\n        require(amount >= minBetAmount, \"Amount too low\");\r\n        require(amount <= maxBetAmount, \"Amount too high\");\r\n        require(BEP20USDT.allowance(msg.sender, address(this)) >= amount, \"Allowance too low\");\r\n    }\r\n\r\n    /**\r\n     * @notice Creates a new battle.\r\n     * @param battleId The ID of the battle.\r\n     * @param royaltyPercent The percentage of the total bets to be paid as royalty to the creator of the battle.\r\n     * @param startTime The timestamp when the battle will start.\r\n     * @dev The battle can only be created if it hasn't been created before and if the royalty percentage is not greater than 50%.\r\n     * @dev The start time of the battle must be in the future and within a week from the current timestamp.\r\n     * @dev Emits a BattleCreated event upon successful creation.\r\n     */\r\n    function createBattle(uint128 battleId, uint64 royaltyPercent, uint64 startTime) external {\r\n        Battle storage battle = battles[battleId];\r\n\r\n        require(battle.blueAddress == address(0), \"Battle created\");\r\n        require(royaltyPercent <= 50_000, \"Royalty too high\");\r\n        require(startTime >= block.timestamp, \"Timestamp too small\");\r\n        require(startTime < block.timestamp + 604800, \"Timestamp too big\");\r\n\r\n        battle.blueAddress = msg.sender;\r\n        battle.royaltyPercent = royaltyPercent;\r\n        battle.feePercent = feePercent;\r\n        battle.startTime = startTime;\r\n        battle.endTime = startTime + battleTimeout;\r\n\r\n        emit BattleCreated(battleId, msg.sender, royaltyPercent, startTime, battle.endTime);\r\n    }\r\n\r\n    /**\r\n     * @notice Approves a battle by setting the red address.\r\n     * @param battleId The ID of the battle to approve.\r\n     * @dev The battle must have been created and the battle's start time must not have passed.\r\n     */\r\n    function approveBattle(uint128 battleId) external {\r\n        Battle storage battle = battles[battleId];\r\n\r\n        require(battle.blueAddress != address(0), \"Battle not created\");\r\n        require(battle.redAddress == address(0), \"Battle approved\");\r\n        require(battle.startTime > block.timestamp, \"Battle expired\");\r\n\r\n        battle.redAddress = msg.sender;\r\n\r\n        emit BattleApproved(battleId, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Places a bet on the blue side of a battle.\r\n     * @param battleId The ID of the battle on which to place the bet.\r\n     * @param amount The amount to bet, in wei.\r\n     * @dev The amount must be within the minimum and maximum bet amounts set by the contract owner.\r\n     * @dev The battle must have been created and approved, and the battle's end time must not have passed.\r\n     * @dev If the battle ends within the bet timeout, the bet timeout will be extended.\r\n     * @dev Emits a BetBlue event upon successful bet placement.\r\n     */\r\n    function betBlue(uint128 battleId, uint256 amount) external {\r\n        _checkAmount(amount);\r\n        _betBlue(battleId, amount, msg.sender);\r\n    }\r\n\r\n    function betBlueCoupon(uint128 battleId, uint256 amount, address sender) external returns (bool) {\r\n        _checkAmount(amount);\r\n        _betBlue(battleId, amount, sender);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Places a bet on the blue side of a battle.\r\n     * @param battleId The ID of the battle on which to place the bet.\r\n     * @param amount The amount to bet, in wei.\r\n     * @param sender.\r\n     * @dev The amount must be within the minimum and maximum bet amounts set by the contract owner.\r\n     * @dev The battle must have been created and approved, and the battle's end time must not have passed.\r\n     * @dev If the battle ends within the bet timeout, the bet timeout will be extended.\r\n     * @dev Emits a BetBlue event upon successful bet placement.\r\n     */\r\n    function _betBlue(uint128 battleId, uint256 amount, address sender) internal {\r\n        Battle storage battle = battles[battleId];\r\n\r\n        require(battle.blueAddress != address(0), \"Battle not created\");\r\n        require(battle.redAddress != address(0), \"Battle not approved\");\r\n        require(battle.startTime < block.timestamp, \"Battle not started\");\r\n        require(battle.endTime > block.timestamp, \"Battle finished\");\r\n\r\n        if (blueBets[battleId][sender] + amount > maxBetAmount) {\r\n            amount = maxBetAmount - blueBets[battleId][sender];\r\n        }\r\n\r\n        require(BEP20USDT.allowance(msg.sender, address(this)) >= amount, \"Allowance too low\");\r\n        require(BEP20USDT.transferFrom(msg.sender, address(this), amount));\r\n\r\n        unchecked {\r\n            battle.blueTotalBets += amount;\r\n        }\r\n\r\n        if (blueBets[battleId][sender] == 0) {\r\n            blueAddrs[battleId].push(sender);\r\n        }\r\n\r\n        unchecked {\r\n            blueBets[battleId][sender] += amount;\r\n        }\r\n\r\n        if (battle.endTime - block.timestamp < betTimeout) {\r\n            battle.endTime = block.timestamp + betTimeout;\r\n        }\r\n\r\n        emit BetBlue(battleId, sender, amount, battle.endTime);\r\n    }\r\n\r\n    /**\r\n     * @notice Places a bet on the red side of a battle.\r\n     * @param battleId The ID of the battle on which to place the bet.\r\n     * @param amount The amount to bet, in wei.\r\n     * @dev The amount must be within the minimum and maximum bet amounts set by the contract owner.\r\n     * @dev The battle must have been created and approved, and the battle's end time must not have passed.\r\n     * @dev If the battle ends within the bet timeout, the bet timeout will be extended.\r\n     * @dev Emits a BetRed event upon successful bet placement.\r\n     */\r\n    function betRed(uint128 battleId, uint256 amount) external {\r\n        _checkAmount(amount);\r\n        _betRed(battleId, amount, msg.sender);\r\n    }\r\n\r\n    function betRedCoupon(uint128 battleId, uint256 amount, address sender) external returns (bool) {\r\n        _checkAmount(amount);\r\n        _betRed(battleId, amount, sender);\r\n        return true;\r\n    }\r\n\r\n    /** \r\n     * @notice Places a bet on the red side of a battle.\r\n     * @param battleId The ID of the battle on which to place the bet.\r\n     * @param amount The amount to bet, in wei.\r\n     * @param sender.\r\n     * @dev The amount must be within the minimum and maximum bet amounts set by the contract owner.\r\n     * @dev The battle must have been created and approved, and the battle's end time must not have passed.\r\n     * @dev If the battle ends within the bet timeout, the bet timeout will be extended.\r\n     * @dev Emits a BetRed event upon successful bet placement.\r\n     */\r\n    function _betRed(uint128 battleId, uint256 amount, address sender) internal {\r\n        Battle storage battle = battles[battleId];\r\n\r\n        require(battle.blueAddress != address(0), \"Battle not created\");\r\n        require(battle.redAddress != address(0), \"Battle not approved\");\r\n        require(battle.startTime < block.timestamp, \"Battle not started\");\r\n        require(battle.endTime > block.timestamp, \"Battle finished\");\r\n\r\n        if (redBets[battleId][sender] + amount > maxBetAmount) {\r\n            amount = maxBetAmount - redBets[battleId][sender];\r\n        }\r\n\r\n        require(BEP20USDT.allowance(msg.sender, address(this)) >= amount, \"Allowance too low\");\r\n        require(BEP20USDT.transferFrom(msg.sender, address(this), amount));\r\n\r\n        unchecked {\r\n            battle.redTotalBets += amount;\r\n        }\r\n\r\n        if (redBets[battleId][sender] == 0) {\r\n            redAddrs[battleId].push(sender);\r\n        }\r\n\r\n        unchecked {\r\n            redBets[battleId][sender] += amount;\r\n        }\r\n\r\n        if (battle.endTime - block.timestamp < betTimeout) {\r\n            battle.endTime = block.timestamp + betTimeout;\r\n        }\r\n\r\n        emit BetRed(battleId, sender, amount, battle.endTime);\r\n    }\r\n\r\n    /**\r\n     * @notice Pays out the winnings and commission for a completed battle.\r\n     * @dev This function calculates the winnings and commission based on the total bets placed and the royalty and fee percentages set. \r\n     * Depending on the outcome of the battle, the winnings are distributed to the winning side, while the commission is transferred to the system's commission address.\r\n     * If the battle ends in a draw or there were no bets on one side, the bets are returned to their respective addresses.\r\n     * @param battleId The ID of the battle for which to pay out the winnings and commission.\r\n     * @dev The battle must have been created and approved, and the battle's end time must have passed.\r\n     * @dev This function can only be called once for each battle.\r\n     * @dev Emits a BattlePaid event upon successful payout.\r\n     */\r\n    function pay(uint128 battleId) external {\r\n        _pay(battleId);\r\n    }\r\n\r\n    /**\r\n     * @notice Pays out the winnings and commission for a completed battle.\r\n     * @dev This function calculates the winnings and commission based on the total bets placed and the royalty and fee percentages set. \r\n     * Depending on the outcome of the battle, the winnings are distributed to the winning side, while the commission is transferred to the system's commission address.\r\n     * If the battle ends in a draw or there were no bets on one side, the bets are returned to their respective addresses.\r\n     * @param battleId The ID of the battle for which to pay out the winnings and commission.\r\n     * @dev The battle must have been created and approved, and the battle's end time must have passed.\r\n     * @dev This function can only be called once for each battle.\r\n     * @dev Emits a BattlePaid event upon successful payout.\r\n     */\r\n    function _pay(uint128 battleId) internal {\r\n        Battle storage battle = battles[battleId];\r\n\r\n        require(!battle.paid, \"Battle paid\");\r\n        require(battle.blueAddress != address(0), \"Battle not created\");\r\n        require(battle.redAddress != address(0), \"Battle not approved\");\r\n        require(battle.endTime < block.timestamp, \"Battle not finished\");\r\n\r\n        battle.paid = true;\r\n\r\n        uint256 totalBetsAmount = battle.redTotalBets + battle.blueTotalBets;\r\n        uint256 interestAmount = totalBetsAmount * battle.feePercent / 100_000;\r\n\r\n        // In case the bets are equal or there were no bets for one side at all, then we return the deposit.\r\n        if (battle.redTotalBets == battle.blueTotalBets || battle.redTotalBets == 0 || battle.blueTotalBets == 0) {\r\n            address[] memory addrs = redAddrs[battleId];\r\n            uint256 j = addrs.length;\r\n\r\n            for (uint256 i = 0; i < j; i++) {\r\n                address addr = addrs[i];\r\n                uint256 amount = redBets[battleId][addr];\r\n\r\n                require(BEP20USDT.transfer(addr, amount));\r\n            }\r\n\r\n\r\n            addrs = blueAddrs[battleId];\r\n            j = addrs.length;\r\n\r\n            for (uint256 i = 0; i < j; i++) {\r\n                address addr = addrs[i];\r\n                uint256 amount = blueBets[battleId][addr];\r\n\r\n                require(BEP20USDT.transfer(addr, amount));\r\n            }\r\n        }\r\n\r\n        // The creator of the battle has lost.\r\n        else if (battle.redTotalBets > battle.blueTotalBets) {\r\n            uint256 royaltyAmount = battle.blueTotalBets * battle.royaltyPercent / 100_000;\r\n            uint256 winAmount = battle.blueTotalBets - royaltyAmount;\r\n\r\n            if (interestAmount > winAmount) {\r\n                winAmount = 0;\r\n                interestAmount = winAmount;\r\n            } else {\r\n                winAmount -= interestAmount;\r\n            }\r\n\r\n            // Coins left due to rounding.\r\n            uint256 changeAmount = winAmount;\r\n\r\n            address[] memory addrs = redAddrs[battleId];\r\n            uint256 j = addrs.length;\r\n\r\n            for (uint256 i = 0; i < j; i++) {\r\n                address addr = addrs[i];\r\n                uint256 amount = redBets[battleId][addr];\r\n\r\n                uint256 portion = amount * (10**18) / battle.redTotalBets;\r\n                uint256 gainAmount = winAmount * portion / (10**18);\r\n\r\n                amount += gainAmount;\r\n                changeAmount -= gainAmount;\r\n\r\n                require(BEP20USDT.transfer(addr, amount));\r\n            }\r\n\r\n            // Add the remaining coins to the system's commission.\r\n            interestAmount += changeAmount;\r\n\r\n            // Payout the system's commission.\r\n            require(BEP20USDT.transfer(scroogAddress, interestAmount));\r\n\r\n            // Payout the winnings to the winner.\r\n            require(BEP20USDT.transfer(battle.redAddress, royaltyAmount));\r\n        }\r\n\r\n        // The creator of the battle has won\r\n        else {\r\n            uint256 royaltyAmount = battle.redTotalBets * battle.royaltyPercent / 100_000;\r\n            uint256 winAmount = battle.redTotalBets - royaltyAmount;\r\n\r\n            // If the system's commission is greater than the total volume of bets after paying royalties,\r\n            // then we take all the remaining bets from the losing side for ourselves.\r\n            if (interestAmount > winAmount) {\r\n                winAmount = 0;\r\n                interestAmount = winAmount;\r\n            } else {\r\n                winAmount -= interestAmount;\r\n            }\r\n\r\n            // Coins left due to rounding.\r\n            uint256 changeAmount = winAmount;\r\n\r\n            address[] memory addrs = blueAddrs[battleId];\r\n            uint256 j = addrs.length;\r\n\r\n            for (uint256 i = 0; i < j; i++) {\r\n                address addr = addrs[i];\r\n                uint256 amount = blueBets[battleId][addr];\r\n\r\n                uint256 portion = amount * (10**18) / battle.blueTotalBets;\r\n                uint256 gainAmount = winAmount * portion / (10**18);\r\n\r\n                amount += gainAmount;\r\n                changeAmount -= gainAmount;\r\n\r\n                require(BEP20USDT.transfer(addr, amount));\r\n            }\r\n\r\n            // Add the remaining coins to the system's commission.\r\n            interestAmount += changeAmount;\r\n\r\n            // Payout the system's commission.\r\n            require(BEP20USDT.transfer(scroogAddress, interestAmount));\r\n\r\n            // Payout the winnings to the winner.\r\n            require(BEP20USDT.transfer(battle.blueAddress, royaltyAmount));\r\n        }\r\n\r\n        emit BattlePaid(battleId);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the minimum bet amount for a battle.\r\n     * @dev Only the contract owner can call this function.\r\n     * @param amount The new minimum bet amount to set.\r\n     * @dev The amount must be less than the current maximum bet amount.\r\n     */\r\n    function setMinBetAmount(uint256 amount) external onlyOwner {\r\n        require(amount < maxBetAmount, \"Too big\");\r\n        minBetAmount = amount;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the maximum bet amount for a battle.\r\n     * @dev Only the contract owner can call this function.\r\n     * @param amount The new maximum bet amount to set.\r\n     * @dev The amount must be greater than the current minimum bet amount.\r\n     */\r\n    function setMaxBetAmount(uint256 amount) external onlyOwner {\r\n        require(amount > minBetAmount, \"Too small\");\r\n        maxBetAmount = amount;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the fee percentage for each battle.\r\n     * @dev Only the contract owner can call this function.\r\n     * @param val The new fee percentage to set. Must be less than or equal to 30,000. A value of 10,000 represents 10% fee.\r\n     */\r\n    function setFeePercent(uint64 val) external onlyOwner {\r\n        require(val <= 30_000, \"Too big\");\r\n        feePercent = val;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the timeout for a battle.\r\n     * @dev Only the contract owner can call this function.\r\n     * @param val The new timeout value to set, in seconds.\r\n     * @dev The timeout must be less than or equal to 86400 seconds (24 hours) and greater than or equal to 600 seconds (10 minutes).\r\n     */\r\n    function setBattleTimeout(uint256 val) external onlyOwner {\r\n        require(val <= 86400, \"Too big\");\r\n        require(val >= 600, \"Too small\");\r\n        battleTimeout = val;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the timeout for placing bets in a battle.\r\n     * @dev Only the contract owner can call this function.\r\n     * @param val The new timeout value to set, in seconds.\r\n     * @dev The timeout must be less than or equal to 3600.\r\n     */\r\n    function setBetTimeout(uint256 val) external onlyOwner {\r\n        require(val <= 3600, \"Too big\");\r\n        betTimeout = val;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the address where the system's commission is transferred.\r\n     * @dev Only the contract owner can call this function.\r\n     * @param addr The new address to set as the system's commission address.\r\n     * @dev The address must not be empty (0x0).\r\n     */\r\n    function setScroogAddress(address addr) external onlyOwner {\r\n        require(addr != address(0), \"Empty address\");\r\n        scroogAddress = addr;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"battleId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"BattleApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"battleId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"royaltyPercent\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"battleStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"battleEndTime\",\"type\":\"uint256\"}],\"name\":\"BattleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"battleId\",\"type\":\"uint128\"}],\"name\":\"BattlePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"battleId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"battleEndTime\",\"type\":\"uint256\"}],\"name\":\"BetBlue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"battleId\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"battleEndTime\",\"type\":\"uint256\"}],\"name\":\"BetRed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"battleId\",\"type\":\"uint128\"}],\"name\":\"approveBattle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"battleTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"battleId\",\"type\":\"uint128\"}],\"name\":\"battles\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"royaltyPercent\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"feePercent\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"blueTotalBets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redTotalBets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"blueAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"battleId\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"betBlue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"battleId\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"betBlueCoupon\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"battleId\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"betRed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"battleId\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"betRedCoupon\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"battleId\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blueAddrs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"battleId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"blueBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"battleId\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"royaltyPercent\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"}],\"name\":\"createBattle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"battleId\",\"type\":\"uint128\"}],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"battleId\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"redAddrs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"battleId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"redBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scroogAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setBattleTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setBetTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"val\",\"type\":\"uint64\"}],\"name\":\"setFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxBetAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinBetAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setScroogAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ScrooG", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "15000", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0f0ca1db2409aa7ec7747a33705f04b0c523c814830e44846a20876f83fc4bb6"}