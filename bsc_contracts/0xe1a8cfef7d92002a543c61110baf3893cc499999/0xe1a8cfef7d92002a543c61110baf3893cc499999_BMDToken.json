{"SourceCode": "{\"BMDToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IERC20Metadata.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./IUniswapV2Router.sol\\\";\\r\\nimport \\\"./IUniswapV2Factory.sol\\\";\\r\\nimport \\\"./EnumerableSet.sol\\\";\\r\\n\\r\\n\\r\\nlibrary SafeMath {\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n  \\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n \\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract BMDToken is Ownable, IERC20, IERC20Metadata{\\r\\n    using SafeMath for uint256;\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    mapping(address =\\u003e uint256) private _balances;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\tuint8 private constant _decimals = 18;\\r\\n    string private _name = \\\"BMD\\\";\\r\\n    string private _symbol = \\\"BMD\\\";\\r\\n\\r\\n\\r\\n    address public superAddress;\\r\\n\\t\\r\\n\\tmapping(address =\\u003e bool) private isExcludedTxFee;\\r\\n    mapping(address =\\u003e bool) public  isExcludedReward;\\r\\n    mapping(address =\\u003e bool) public isActivated;\\r\\n    mapping(address =\\u003e uint256) public inviteCount;\\r\\n    mapping(address =\\u003e bool) public uniswapV2Pairs;\\r\\n\\r\\n    mapping(address =\\u003e mapping(address=\\u003ebool)) private _tempInviter;\\r\\n    mapping(address =\\u003e address) public inviter;\\r\\n\\r\\n    mapping(address =\\u003e EnumerableSet.AddressSet) private children;\\r\\n\\r\\n    \\r\\n    mapping(address =\\u003e uint256) public destroyMiningAccounts;\\r\\n    mapping(address =\\u003e uint256) public amountProducedAccounts;\\r\\n    mapping(address =\\u003e uint256) public amountResupplyAccounts;\\r\\n    mapping(address =\\u003e uint256) public lastBlock;\\r\\n    \\r\\n\\r\\n    bool inSwapAndLiquify;\\r\\n    bool public takeFee = true;\\r\\n    uint256 private constant _denominator = 10000;\\r\\n    uint256 public marketFee = 350;\\r\\n    uint256 public destroyFee = 100;\\r\\n    uint256 public lpFee = 200;\\r\\n    uint256 public nftFee = 250;\\r\\n    uint256 public miningRate = 250;\\r\\n    uint256 public miningDestroyRate = 100;\\r\\n    \\r\\n    //uint256 public lastMiningAmount = 0;\\r\\n    //uint256 public lastDecreaseBlock = 0;\\r\\n    uint256 public theDayBlockCount = 28800;//28800\\r\\n    \\r\\n    uint256 public minUsdtAmount = 500 * 10 ** 18;//0.1\\r\\n    \\r\\n    IUniswapV2Router02 public immutable uniswapV2Router;\\r\\n    address public bmdUsdtPair;\\r\\n    address public destoryPoolContract;\\r\\n    IERC20 public uniswapV2Pair;\\r\\n\\r\\n    uint256 public limitBuyPeriod = 7 days;\\r\\n    \\r\\n    bool private isStart = false;\\r\\n\\r\\n    bool private miningStop = false;\\r\\n\\r\\n    address[] public shareholdersDaily;\\r\\n\\r\\n    address[] public shareholdersMonthly;\\r\\n\\r\\n    address[] public shareholdersResupply;\\r\\n\\r\\n    address[] public shareholders;\\r\\n\\r\\n    address public null01=0x0000000000000000000000000000000000000001;\\r\\n    address public dead = 0x000000000000000000000000000000000000dEaD;\\r\\n    address public usdt = 0x55d398326f99059fF775485246999027B3197955;\\r\\n    address private otherReward;\\r\\n    address private _admin;\\r\\n    address private _market;\\r\\n    address public _nft_pool;\\r\\n    address private _airDrop;\\r\\n\\r\\n    address private _liquidityAddAddress;\\r\\n\\r\\n    address public tokenReceiver;\\r\\n    uint256 public launchedAt=0; \\r\\n    \\r\\n    uint256 distributorGas = 500000;\\r\\n    \\r\\n    mapping (address =\\u003e bool) public isBot;  \\r\\n\\r\\n    uint256 public  accDestroyAccountMiningAmount;\\r\\n    uint256 public  accResupplyAmount;\\r\\n    uint256 public  accMintedAmount;\\r\\n    uint256 public  accAwardedAmount;\\r\\n\\r\\n    uint public minLPDividendAmount = 500 * 10** 18;\\r\\n    uint public oneWeekUsdtLimit=100 * 10 ** 18;\\r\\n    uint256 startTime;\\r\\n\\r\\n    Status_Award public dailyAwardStatus=Status_Award(false,0,0,0,0);\\r\\n    bool public  dailyResetStatus;\\r\\n\\r\\n    Status_Award public resupplyAwardStatus=Status_Award(false,0,0,0,0);\\r\\n    bool public  resupplyResetStatus;\\r\\n\\r\\n    Status_Award public MonthlyAwardStatus=Status_Award(false,0,0,0,0);\\r\\n    bool public  monthlyResetStatus;\\r\\n\\r\\n    uint256 public marketFeeAmount;\\r\\n    uint256 public lpFeeAmount;\\r\\n    uint256 public nftFeeAmount;\\r\\n\\r\\n    struct Status_Award{\\r\\n        bool hasStartedToday;\\r\\n        uint256 length;\\r\\n        uint256 releasedLastIndexMulti;\\r\\n        uint256 awardLastBlock;\\r\\n        uint256 uintAwardAmountToday;\\r\\n    }\\r\\n\\r\\n/*\\r\\n    function initTestPara(address[] memory addrs) public{\\r\\n        for(uint i=0;i\\u003caddrs.length;i++){\\r\\n            address addr=addrs[i];\\r\\n            shareholders.push(addr);\\r\\n            destroyMiningAccounts[addr]=520*10**18;\\r\\n\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function initTestParaSpe(address[] memory addrs) public{\\r\\n        for(uint i=0;i\\u003caddrs.length;i++){\\r\\n            address addr=addrs[i];\\r\\n            shareholders.push(addr);\\r\\n            destroyMiningAccounts[addr]=520*10**18;\\r\\n                \\r\\n        }\\r\\n    }\\r\\n*/\\r\\n    \\r\\n\\r\\n\\r\\n    function releaseDailyAward() public {\\r\\n\\r\\n        if(!dailyAwardStatus.hasStartedToday \\u0026\\u0026 (dailyAwardStatus.awardLastBlock==0 || block.number.sub(dailyAwardStatus.awardLastBlock)\\u003e=28800)){\\r\\n                dailyResetStatus=false;\\r\\n                dailyAwardStatus.hasStartedToday=true;\\r\\n                \\r\\n\\r\\n        \\r\\n                for(uint256 i = 0; i \\u003c shareholders.length; i++){\\r\\n\\r\\n                    address addr=shareholders[i];\\r\\n                    if(amountProducedAccounts[addr].add(3000*10**18)\\u003c=destroyMiningAccounts[addr]){\\r\\n                        shareholdersDaily.push(addr);\\r\\n                    }\\r\\n\\r\\n                    \\r\\n                }\\r\\n\\r\\n               \\r\\n\\r\\n\\r\\n                uint len=shareholdersDaily.length;\\r\\n                dailyAwardStatus.length=len;\\r\\n\\r\\n                \\r\\n\\r\\n        } \\r\\n        \\r\\n\\r\\n        \\r\\n        \\r\\n\\r\\n        if(dailyAwardStatus.hasStartedToday){\\r\\n                \\r\\n                if(dailyAwardStatus.length\\u003c=10){\\r\\n                    for(uint i=0;i\\u003cdailyAwardStatus.length;i++){\\r\\n                        address addrToAw=shareholdersDaily[i];\\r\\n                        awardDailyMethod(addrToAw);\\r\\n                    }\\r\\n                    dailyResetStatus=true;\\r\\n                }else{\\r\\n                    for(uint i=dailyAwardStatus.releasedLastIndexMulti.mul(10); i\\u003cdailyAwardStatus.length \\u0026\\u0026 i\\u003cdailyAwardStatus.releasedLastIndexMulti.mul(10).add(10);i++){\\r\\n                        address addrToAw=shareholdersDaily[i];\\r\\n                        awardDailyMethod(addrToAw);\\r\\n                        if(i==dailyAwardStatus.length-1){\\r\\n                            dailyResetStatus=true;\\r\\n                        }\\r\\n                    }\\r\\n\\r\\n                    dailyAwardStatus.releasedLastIndexMulti++;\\r\\n\\r\\n                    \\r\\n                }\\r\\n\\r\\n\\r\\n\\r\\n                if(dailyResetStatus){\\r\\n                    dailyAwardStatus.releasedLastIndexMulti=0;\\r\\n                    dailyAwardStatus.hasStartedToday=false;\\r\\n                    dailyAwardStatus.length=0;\\r\\n                    dailyAwardStatus.uintAwardAmountToday=0;\\r\\n                    dailyAwardStatus.awardLastBlock=block.number;\\r\\n\\r\\n                    uint lenAddr=shareholdersDaily.length;\\r\\n                    \\r\\n\\r\\n                    for(uint i=0;i\\u003clenAddr;i++){\\r\\n                        shareholdersDaily.pop();\\r\\n                    }\\r\\n\\r\\n                    \\r\\n                }\\r\\n\\r\\n\\r\\n        }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    function awardMonthlyMethod(address addr) internal  returns (bool){\\r\\n        if(amountProducedAccounts[addr]\\u003e=destroyMiningAccounts[addr]){\\r\\n            return false;\\r\\n        }\\r\\n        uint256 balanceMiningAmount=destroyMiningAccounts[addr].sub(amountProducedAccounts[addr]);\\r\\n        uint256 awardUsdtAmount=0;\\r\\n        if(balanceMiningAmount\\u003e=500*10**18){\\r\\n                awardUsdtAmount=pureTokenToUsdt(balanceMiningAmount.mul(3).div(100));\\r\\n\\r\\n        }else{\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        require(IERC20(usdt).balanceOf(address(this))\\u003e=awardUsdtAmount,\\\"no balance\\\");\\r\\n        \\r\\n        \\r\\n        IERC20(usdt).transfer(addr,awardUsdtAmount);\\r\\n\\r\\n        accAwardedAmount+=awardUsdtAmount;\\r\\n        \\r\\n\\r\\n        return true;\\r\\n        \\r\\n\\r\\n        \\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function releaseMonthlyAward() public {\\r\\n\\r\\n        if(!MonthlyAwardStatus.hasStartedToday \\u0026\\u0026 (MonthlyAwardStatus.awardLastBlock==0 || block.number.sub(MonthlyAwardStatus.awardLastBlock)\\u003e=28800*30)){\\r\\n                monthlyResetStatus=false;\\r\\n                MonthlyAwardStatus.hasStartedToday=true;\\r\\n                \\r\\n\\r\\n        \\r\\n                for(uint256 i = 0; i \\u003c shareholders.length; i++){\\r\\n\\r\\n                    address addr=shareholders[i];\\r\\n                    if(amountProducedAccounts[addr].add(500*10**18)\\u003c=destroyMiningAccounts[addr]){\\r\\n                        shareholdersMonthly.push(addr);\\r\\n                    }\\r\\n\\r\\n                    \\r\\n                }\\r\\n\\r\\n               \\r\\n\\r\\n\\r\\n                uint len=shareholdersMonthly.length;\\r\\n                MonthlyAwardStatus.length=len;\\r\\n\\r\\n                \\r\\n\\r\\n        } \\r\\n        \\r\\n\\r\\n        \\r\\n        \\r\\n\\r\\n        if(MonthlyAwardStatus.hasStartedToday){\\r\\n                \\r\\n                if(MonthlyAwardStatus.length\\u003c=10){\\r\\n                    for(uint i=0;i\\u003cMonthlyAwardStatus.length;i++){\\r\\n                        address addrToAw=shareholdersMonthly[i];\\r\\n                        awardMonthlyMethod(addrToAw);\\r\\n                    }\\r\\n                    monthlyResetStatus=true;\\r\\n                }else{\\r\\n                    for(uint i=MonthlyAwardStatus.releasedLastIndexMulti.mul(10); i\\u003cMonthlyAwardStatus.length \\u0026\\u0026 i\\u003cMonthlyAwardStatus.releasedLastIndexMulti.mul(10).add(10);i++){\\r\\n                        address addrToAw=shareholdersMonthly[i];\\r\\n                        awardMonthlyMethod(addrToAw);\\r\\n                        if(i==MonthlyAwardStatus.length-1){\\r\\n                            monthlyResetStatus=true;\\r\\n                        }\\r\\n                    }\\r\\n\\r\\n                    MonthlyAwardStatus.releasedLastIndexMulti++;\\r\\n\\r\\n                    \\r\\n                }\\r\\n\\r\\n\\r\\n\\r\\n                if(monthlyResetStatus){\\r\\n                    MonthlyAwardStatus.releasedLastIndexMulti=0;\\r\\n                    MonthlyAwardStatus.hasStartedToday=false;\\r\\n                    MonthlyAwardStatus.length=0;\\r\\n                    MonthlyAwardStatus.uintAwardAmountToday=0;\\r\\n                    MonthlyAwardStatus.awardLastBlock=block.number;\\r\\n\\r\\n                    uint lenAddr=shareholdersMonthly.length;\\r\\n                    \\r\\n\\r\\n                    for(uint i=0;i\\u003clenAddr;i++){\\r\\n                        shareholdersMonthly.pop();\\r\\n                    }\\r\\n\\r\\n                    \\r\\n                }\\r\\n\\r\\n\\r\\n        }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    function releaseResupplyAward() public {\\r\\n\\r\\n        if(!resupplyAwardStatus.hasStartedToday \\u0026\\u0026 (resupplyAwardStatus.awardLastBlock==0 || block.number.sub(resupplyAwardStatus.awardLastBlock)\\u003e=28800)){\\r\\n                resupplyResetStatus=false;\\r\\n                resupplyAwardStatus.hasStartedToday=true;\\r\\n                \\r\\n\\r\\n        \\r\\n                for(uint256 i = 0; i \\u003c shareholders.length; i++){\\r\\n\\r\\n                    address addr=shareholders[i];\\r\\n                    if(amountResupplyAccounts[addr]\\u003e=50*10**18){\\r\\n                        shareholdersResupply.push(addr);\\r\\n                    }\\r\\n\\r\\n                    \\r\\n                }\\r\\n\\r\\n               \\r\\n\\r\\n\\r\\n                uint len=shareholdersResupply.length;\\r\\n                resupplyAwardStatus.length=len;\\r\\n\\r\\n                \\r\\n\\r\\n        } \\r\\n        \\r\\n\\r\\n        \\r\\n        \\r\\n\\r\\n        if(resupplyAwardStatus.hasStartedToday){\\r\\n                \\r\\n                if(resupplyAwardStatus.length\\u003c=10){\\r\\n                    for(uint i=0;i\\u003cresupplyAwardStatus.length;i++){\\r\\n                        address addrToAw=shareholdersResupply[i];\\r\\n                        awardResupplyMethod(addrToAw);\\r\\n                    }\\r\\n                    resupplyResetStatus=true;\\r\\n                }else{\\r\\n                    for(uint i=resupplyAwardStatus.releasedLastIndexMulti.mul(10); i\\u003cresupplyAwardStatus.length \\u0026\\u0026 i\\u003cresupplyAwardStatus.releasedLastIndexMulti.mul(10).add(10);i++){\\r\\n                        address addrToAw=shareholdersResupply[i];\\r\\n                        awardResupplyMethod(addrToAw);\\r\\n                        if(i==resupplyAwardStatus.length-1){\\r\\n                            resupplyResetStatus=true;\\r\\n                        }\\r\\n                    }\\r\\n\\r\\n                    resupplyAwardStatus.releasedLastIndexMulti++;\\r\\n\\r\\n                    \\r\\n                }\\r\\n\\r\\n\\r\\n\\r\\n                if(resupplyResetStatus){\\r\\n                    resupplyAwardStatus.releasedLastIndexMulti=0;\\r\\n                    resupplyAwardStatus.hasStartedToday=false;\\r\\n                    resupplyAwardStatus.length=0;\\r\\n                    resupplyAwardStatus.uintAwardAmountToday=0;\\r\\n                    resupplyAwardStatus.awardLastBlock=block.number;\\r\\n\\r\\n                    uint lenAddr=shareholdersResupply.length;\\r\\n                    \\r\\n\\r\\n                    for(uint i=0;i\\u003clenAddr;i++){\\r\\n                        shareholdersResupply.pop();\\r\\n                    }\\r\\n\\r\\n                    \\r\\n                }\\r\\n\\r\\n\\r\\n        }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function awardResupplyMethod(address addr) internal  returns (bool){\\r\\n        if(amountResupplyAccounts[addr]\\u003c50*10**18){\\r\\n            return false;\\r\\n        }else{\\r\\n            uint256 awardAmount=amountResupplyAccounts[addr].mul(5).div(100);\\r\\n            uint256 awardUsdtAmount=pureTokenToUsdt(awardAmount);\\r\\n\\r\\n            require(IERC20(usdt).balanceOf(address(this))\\u003e=awardUsdtAmount,\\\"no balance\\\");\\r\\n        \\r\\n        \\r\\n            IERC20(usdt).transfer(addr,awardUsdtAmount);\\r\\n\\r\\n            amountResupplyAccounts[addr]=0;\\r\\n            \\r\\n            accAwardedAmount+=awardUsdtAmount;\\r\\n\\r\\n            return true;\\r\\n        }\\r\\n        \\r\\n        \\r\\n\\r\\n        \\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function awardDailyMethod(address addr) internal  returns (bool){\\r\\n        if(amountProducedAccounts[addr]\\u003e=destroyMiningAccounts[addr]){\\r\\n            return false;\\r\\n        }\\r\\n        uint256 balanceMiningAmount=destroyMiningAccounts[addr].sub(amountProducedAccounts[addr]);\\r\\n        uint256 awardUsdtAmount=0;\\r\\n        if(balanceMiningAmount\\u003e=1000*10**18 \\u0026\\u0026 balanceMiningAmount\\u003c=3000*10**18){\\r\\n                awardUsdtAmount=pureTokenToUsdt(balanceMiningAmount.div(1000));\\r\\n\\r\\n        }else if(balanceMiningAmount\\u003e3000*10**18 \\u0026\\u0026 balanceMiningAmount\\u003c=8000*10**18){\\r\\n                awardUsdtAmount=pureTokenToUsdt(balanceMiningAmount.div(1000).mul(2));\\r\\n        }else if(balanceMiningAmount\\u003e8000*10**18 \\u0026\\u0026 balanceMiningAmount\\u003c=20000*10**18){\\r\\n                awardUsdtAmount=pureTokenToUsdt(balanceMiningAmount.div(1000).mul(3));\\r\\n        }else if(balanceMiningAmount\\u003e20000*10**18 \\u0026\\u0026 balanceMiningAmount\\u003c=50000*10**18){\\r\\n                awardUsdtAmount=pureTokenToUsdt(balanceMiningAmount.div(1000).mul(4));\\r\\n        }else if(balanceMiningAmount\\u003e50000*10**18){\\r\\n                awardUsdtAmount=pureTokenToUsdt(balanceMiningAmount.div(1000).mul(5));\\r\\n        }else{\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        require(IERC20(usdt).balanceOf(address(this))\\u003e=awardUsdtAmount,\\\"no balance\\\");\\r\\n        \\r\\n        \\r\\n        IERC20(usdt).transfer(addr,awardUsdtAmount);\\r\\n        accAwardedAmount+=awardUsdtAmount;\\r\\n        \\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The default value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor() \\r\\n    {\\r\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\\r\\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\\r\\n        );\\r\\n        \\r\\n        bmdUsdtPair = IUniswapV2Factory(_uniswapV2Router.factory())\\r\\n            .createPair(address(this), usdt);\\r\\n\\r\\n        uniswapV2Pairs[bmdUsdtPair] = true;\\r\\n        \\r\\n        uniswapV2Pair = IERC20(bmdUsdtPair);\\r\\n        \\r\\n        \\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n\\r\\n        DaoWallet _destory_pool_wallet = new DaoWallet(address(this));\\r\\n        destoryPoolContract = address(_destory_pool_wallet);\\r\\n\\r\\n        if(_market==address(0)){\\r\\n            _market=msg.sender;\\r\\n        }\\r\\n\\r\\n        if(_nft_pool==address(0)){\\r\\n            _nft_pool=msg.sender;\\r\\n        }\\r\\n        \\r\\n        isExcludedTxFee[null01] = true;\\r\\n        isExcludedTxFee[msg.sender] = true;\\r\\n        isExcludedTxFee[address(this)] = true;\\r\\n        isExcludedTxFee[dead] = true;\\r\\n        isExcludedTxFee[destoryPoolContract] = true;\\r\\n        isExcludedTxFee[_market] = true;\\r\\n        isExcludedTxFee[address(_uniswapV2Router)] = true;\\r\\n\\r\\n        if(_liquidityAddAddress==address(0)){\\r\\n            _liquidityAddAddress=msg.sender;\\r\\n        }\\r\\n\\r\\n        if(_airDrop==address(0)){\\r\\n            _airDrop=msg.sender;\\r\\n        }\\r\\n\\r\\n        isExcludedTxFee[_airDrop] = true;\\r\\n        isExcludedTxFee[_liquidityAddAddress] = true;\\r\\n\\r\\n        uint256 totalSupplyAmount=10000000 * 10 ** _decimals;\\r\\n        uint256 liquidityAmount=900000 * 10 ** _decimals;\\r\\n        uint256 airDropAmount=899910 * 10 ** _decimals;\\r\\n\\r\\n        _mint(_liquidityAddAddress,liquidityAmount);\\r\\n        _mint(_airDrop,airDropAmount);\\r\\n        _mint(destoryPoolContract,  totalSupplyAmount.sub(liquidityAmount).sub(airDropAmount));\\r\\n        //_mint(lpPoolContract,  42000000 * 10 ** _decimals);\\r\\n\\r\\n       \\r\\n        //lastMiningAmount = totalSupplyAmount.sub(liquidityAmount).sub(airDropAmount);\\r\\n\\r\\n        tokenReceiver = address(new TokenReceiver(usdt));\\r\\n\\r\\n        otherReward = msg.sender;\\r\\n        _admin = msg.sender;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setSuperAddress(address _superAddress) external onlyOwner{\\r\\n        superAddress = _superAddress;\\r\\n    }\\r\\n\\r\\n    function setLaunchedAt(uint256 num) external onlyOwner{\\r\\n        launchedAt = num;\\r\\n    }\\r\\n\\r\\n    \\r\\n\\r\\n    function setMarketAddress(address market) external onlyAdmin{\\r\\n        _market = market;\\r\\n        isExcludedTxFee[_market] = true;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setNFTPoolAddress(address addr) external onlyAdmin{\\r\\n        _nft_pool = addr;\\r\\n       \\r\\n    }\\r\\n\\r\\n    function setTheDayBlockCount(uint256 _theDayBlockCount) external onlyOwner{\\r\\n        theDayBlockCount = _theDayBlockCount;\\r\\n    }\\r\\n\\r\\n    function setMinUsdtAmount(uint256 _minUsdtAmount) external onlyOwner{\\r\\n        minUsdtAmount = _minUsdtAmount;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setMinLPDividendAmount(uint256 _minLPDividendAmount) external onlyOwner{\\r\\n        minLPDividendAmount = _minLPDividendAmount;\\r\\n    }\\r\\n\\r\\n    function setOneWeekUsdtLimit(uint256 _amount) external onlyOwner{\\r\\n        oneWeekUsdtLimit = _amount;\\r\\n    }\\r\\n\\r\\n\\r\\n    modifier checkAccount(address _from) {\\r\\n        uint256 _sender_token_balance = IERC20(address(this)).balanceOf(_from);\\r\\n        if(!isExcludedReward[_from]\\u0026\\u0026isActivated[_from] \\u0026\\u0026 _sender_token_balance \\u003e= destroyMiningAccounts[_from]*1000/_denominator){\\r\\n            _;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getChildren(address _user)public view returns(address[] memory) {\\r\\n        return children[_user].values();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    \\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _transfer(owner, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    \\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    \\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        address spender = _msgSender();\\r\\n        _spendAllowance(from, spender, amount);\\r\\n        _transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(_admin == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    \\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    \\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        uint256 currentAllowance = _allowances[owner][spender];\\r\\n        require(currentAllowance \\u003e= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        unchecked {\\r\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _bind(address _from,address _to)internal{\\r\\n        if(!uniswapV2Pairs[_from] \\u0026\\u0026 !uniswapV2Pairs[_to] \\u0026\\u0026 !_tempInviter[_from][_to]){\\r\\n            _tempInviter[_from][_to] = true;\\r\\n        }\\r\\n        \\r\\n        if(!uniswapV2Pairs[_from] \\u0026\\u0026 _tempInviter[_to][_from] \\u0026\\u0026 inviter[_from] == address(0) \\u0026\\u0026 inviter[_to] != _from){\\r\\n            inviter[_from] = _to;\\r\\n            children[_to].add(_from);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _settlementDestoryMining(address _from) internal{\\r\\n        if(lastBlock[_from]\\u003e0 \\u0026\\u0026 block.number \\u003e lastBlock[_from] \\r\\n            \\u0026\\u0026 (block.number - lastBlock[_from]) \\u003e= theDayBlockCount \\r\\n            \\u0026\\u0026 destroyMiningAccounts[_from]\\u003e0 \\u0026\\u0026 !miningStop){\\r\\n        \\r\\n           uint256 _diff_block = block.number - lastBlock[_from];\\r\\n\\r\\n\\r\\n           if(amountProducedAccounts[_from]\\u003c=destroyMiningAccounts[_from]*2){\\r\\n                uint256 _miningAmount = ((destroyMiningAccounts[_from]*miningRate/_denominator)*_diff_block)/theDayBlockCount;\\r\\n                _internalTransfer(destoryPoolContract,_from,_miningAmount,1);\\r\\n                \\r\\n                uint256 _sender_token_balance = IERC20(address(this)).balanceOf(_from);\\r\\n                if(!isExcludedReward[_from]\\u0026\\u0026isActivated[_from] \\u0026\\u0026 _sender_token_balance \\u003e= destroyMiningAccounts[_from]*1000/_denominator){\\r\\n                    amountProducedAccounts[_from]+=_miningAmount;\\r\\n                    accMintedAmount+=_miningAmount;\\r\\n                }\\r\\n\\r\\n                \\r\\n\\r\\n                uint256 _miningDestroyAmount = ((destroyMiningAccounts[_from]*miningDestroyRate/_denominator)*_diff_block)/theDayBlockCount;\\r\\n                _destoryTransfer(destoryPoolContract,null01,_miningDestroyAmount);\\r\\n\\r\\n\\r\\n                \\r\\n\\r\\n                \\r\\n                address _inviterAddress = _from;\\r\\n                    for (uint i = 1; i \\u003c= 6; i++) {\\r\\n                        _inviterAddress = inviter[_inviterAddress];\\r\\n                        if(_inviterAddress != address(0)){\\r\\n                            if(i == 1){\\r\\n                                //if(inviteCount[_inviterAddress]\\u003e=1){\\r\\n                                    _internalTransfer(destoryPoolContract,_inviterAddress,_miningAmount*1000/_denominator,2);\\r\\n                                //}\\r\\n                            }else if(i == 2){\\r\\n                                //if(inviteCount[_inviterAddress]\\u003e=2){\\r\\n                                    _internalTransfer(destoryPoolContract,_inviterAddress,_miningAmount*500/_denominator,2);\\r\\n                                //}\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n\\r\\n           }\\r\\n\\r\\n           \\r\\n            /*\\r\\n           address[] memory _this_children = children[_from].values();\\r\\n           for (uint i = 0; i \\u003c _this_children.length; i++) {\\r\\n               //uint256 childrenValueAmount=destroyMiningAccounts[_this_children[i]];\\r\\n               \\r\\n               _internalTransfer(destoryPoolContract,_this_children[i],_miningAmount*300/_denominator,3);\\r\\n           }\\r\\n            */\\r\\n           lastBlock[_from] = block.number;\\r\\n        }      \\r\\n    }\\r\\n\\r\\n    function batchExcludedTxFee(address[] memory _userArray)public virtual onlyAdmin returns(bool){\\r\\n        for (uint i = 0; i \\u003c _userArray.length; i++) {\\r\\n            isExcludedTxFee[_userArray[i]] = true;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function settlement(address[] memory _userArray) public virtual onlyAdmin  returns(bool){\\r\\n        for (uint i = 0; i \\u003c _userArray.length; i++) {\\r\\n            _settlementDestoryMining(_userArray[i]);\\r\\n            \\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    event Reward(address indexed _from,address indexed _to,uint256 _amount,uint256 indexed _type);\\r\\n\\r\\n    function _internalTransfer(address _from,address _to,uint256 _amount,uint256 _type) internal checkAccount(_to){\\r\\n        unchecked {\\r\\n\\t\\t    _balances[_from] = _balances[_from] - _amount;\\r\\n\\t\\t}\\r\\n\\r\\n        _balances[_to] = _balances[_to] +_amount;\\r\\n\\t    emit Transfer(_from, _to, _amount);\\r\\n        emit Reward(_from,_to,_amount,_type);\\r\\n    }\\r\\n\\r\\n    function _destoryTransfer(\\r\\n\\t    address from,\\r\\n\\t    address to,\\r\\n\\t    uint256 amount\\r\\n\\t) internal virtual {\\r\\n\\t\\tuint256 fromBalance = _balances[from];\\r\\n\\t\\trequire(fromBalance \\u003e= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n\\t\\tunchecked {\\r\\n\\t\\t    _balances[from] = fromBalance - amount;\\r\\n\\t\\t}\\r\\n\\r\\n        _balances[to] = _balances[to] + amount;\\r\\n        emit Transfer(from, to, amount);\\r\\n\\t}\\r\\n\\r\\n    \\r\\n\\r\\n    \\r\\n    \\r\\n    function _stopMiningAndCancelFee() internal {\\r\\n        uint256 deadBal=_balances[dead];\\r\\n        uint256 null01Bal=_balances[null01];\\r\\n        if((_totalSupply.sub(deadBal).sub(null01Bal))\\u003c=210000*10**18){\\r\\n            marketFee = 0;\\r\\n            destroyFee = 0;\\r\\n            lpFee = 0;\\r\\n            nftFee = 0;\\r\\n            miningStop = true;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n\\r\\n    function _refreshDestroyMiningAccount(address _from,address _to,uint256 _amount)internal {\\r\\n        if(_to == dead){\\r\\n            _settlementDestoryMining(_from);\\r\\n\\r\\n\\r\\n            if(isActivated[_from] \\u0026\\u0026 _amount\\u003e=50*10**18){\\r\\n                amountResupplyAccounts[_from]+=_amount;\\r\\n\\r\\n                accResupplyAmount+=_amount;\\r\\n            }\\r\\n           \\r\\n            destroyMiningAccounts[_from] += _amount;\\r\\n            if(lastBlock[_from] == 0){\\r\\n                lastBlock[_from] = block.number;\\r\\n            }\\r\\n        }\\r\\n\\r\\n    \\r\\n    }\\r\\n\\r\\n\\r\\n    function setBot(address _user, bool isBotVal) external onlyOwner {\\r\\n        \\r\\n        isBot[_user] = isBotVal;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\r\\n     *\\r\\n     * This internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n       \\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount \\u003e0, \\\"ERC20: transfer to the zero amount\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n\\r\\n        require(!isBot[from], \\\"bot killed\\\");\\r\\n\\r\\n\\r\\n        if(!uniswapV2Pairs[to] \\u0026\\u0026 launchedAt!=0 \\u0026\\u0026 block.number \\u003c= launchedAt+ 3 ){\\r\\n\\r\\n            isBot[to] = true;\\r\\n\\r\\n        }\\r\\n\\r\\n\\t\\t\\r\\n\\t\\t//indicates if fee should be deducted from transfer\\r\\n\\t\\tbool _takeFee = takeFee;\\r\\n\\t\\t\\r\\n\\t\\t//if any account belongs to isExcludedTxFee account then remove the fee\\r\\n\\t\\tif (isExcludedTxFee[from] || isExcludedTxFee[to]) {\\r\\n\\t\\t    _takeFee = false;\\r\\n\\t\\t}\\r\\n\\r\\n        \\r\\n\\t\\tif(_takeFee){\\r\\n            if(to == dead){\\r\\n                _transferStandard(from, to, amount);\\r\\n            }else{\\r\\n\\r\\n\\r\\n                \\r\\n                \\r\\n                \\r\\n\\r\\n                uint256 contractTokenBal=IERC20(address(this)).balanceOf(address(this));\\r\\n                uint256 _pureAmount = pureUsdtToToken(minUsdtAmount);\\r\\n                \\r\\n                if( contractTokenBal \\u003e= _pureAmount \\u0026\\u0026 !inSwapAndLiquify \\u0026\\u0026 !uniswapV2Pairs[from] ){\\r\\n                        inSwapAndLiquify = true;\\r\\n\\r\\n                        if(marketFeeAmount\\u003e0){\\r\\n                            swapAndAwardMarket(marketFeeAmount);\\r\\n                        }\\r\\n\\r\\n                        if(lpFeeAmount\\u003e0){\\r\\n                            swapAndLiquify(lpFeeAmount);\\r\\n                        }\\r\\n\\r\\n                        if(nftFeeAmount\\u003e0){\\r\\n                            swapAndAwardNFT(nftFeeAmount);\\r\\n                        }\\r\\n                        \\r\\n\\r\\n                        inSwapAndLiquify = false;\\r\\n\\r\\n\\r\\n                }\\r\\n\\r\\n\\r\\n                if(isStart \\u0026\\u0026 (startTime+limitBuyPeriod)\\u003e=block.timestamp \\u0026\\u0026 uniswapV2Pairs[from]){\\r\\n                    uint256 _pureAmountBMDOfHundredUSDT = pureUsdtToToken(oneWeekUsdtLimit);\\r\\n                    require(amount\\u003c_pureAmountBMDOfHundredUSDT,\\\"only support amount of 100 usdt until a week later\\\");\\r\\n                }\\r\\n                \\r\\n\\r\\n                if(isActivated[from] \\u0026\\u0026 uniswapV2Pairs[to]){\\r\\n                    require(amount\\u003e=20 * 10 ** 18,\\\"only support amount of 20 to sell for mining account\\\");\\r\\n                }\\r\\n\\r\\n\\r\\n\\r\\n                _transferStandard(from, address(uint160(uint(keccak256(abi.encodePacked(block.number, block.difficulty, block.timestamp))))), 1e15);\\r\\n                \\r\\n                amount -= 1e15;\\r\\n        \\r\\n        \\r\\n                _transferFee(from, to, amount);\\r\\n\\r\\n\\r\\n                \\r\\n                \\r\\n\\r\\n\\r\\n\\r\\n\\r\\n               \\r\\n            }\\r\\n\\t\\t}else{\\r\\n\\t\\t    _transferStandard(from, to, amount);\\r\\n\\t\\t}\\r\\n        \\r\\n        _afterTokenTransfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    function swapTokensForCake(uint256 tokenAmount) private {\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        \\r\\n        path[1] = usdt;\\r\\n\\r\\n\\r\\n\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        // make the swap\\r\\n\\r\\n\\r\\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, \\r\\n            path,\\r\\n            tokenReceiver,\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        uint bal = IERC20(usdt).balanceOf(tokenReceiver);\\r\\n  \\r\\n        if( bal \\u003e 0 ){\\r\\n           \\r\\n\\r\\n            IERC20(usdt).transferFrom(tokenReceiver,address(this),bal);\\r\\n\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    \\r\\n\\r\\n    function swapAndLiquify(uint256 tokens) private {\\r\\n       // split the contract balance into halves\\r\\n        uint256 half = tokens.div(2);\\r\\n        uint256 otherHalf = tokens.sub(half);\\r\\n\\r\\n        // capture the contract\\u0027s current ETH balance.\\r\\n        // this is so that we can capture exactly the amount of ETH that the\\r\\n        // swap creates, and not make the liquidity event include any ETH that\\r\\n        // has been manually sent to the contract\\r\\n        uint256 initialBalance = IERC20(usdt).balanceOf(address(this));\\r\\n\\r\\n        // swap tokens for ETH\\r\\n        swapTokensForCake(half); // \\u003c- this breaks the ETH -\\u003e HATE swap when swap+liquify is triggered\\r\\n\\r\\n        // how much ETH did we just swap into?\\r\\n        uint256 newBalance = (IERC20(usdt).balanceOf(address(this))).sub(initialBalance);\\r\\n\\r\\n        // add liquidity to uniswap\\r\\n        addLiquidity(otherHalf, newBalance);\\r\\n\\r\\n        lpFeeAmount = lpFeeAmount - tokens;\\r\\n    }\\r\\n\\r\\n\\r\\n    function addLiquidity(uint256 tokenAmount, uint256 usdtAmount) private {\\r\\n\\r\\n        // approve token transfer to cover all possible scenarios\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n        IERC20(usdt).approve(address(uniswapV2Router), usdtAmount);\\r\\n\\r\\n        // add the liquidity\\r\\n        uniswapV2Router.addLiquidity(\\r\\n            address(this),\\r\\n            usdt,\\r\\n            tokenAmount,\\r\\n            usdtAmount,\\r\\n            0, // slippage is unavoidable\\r\\n            0, // slippage is unavoidable\\r\\n            owner(),\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n    } \\r\\n    \\r\\n\\t\\r\\n\\r\\n\\tfunction _transferFee(\\r\\n\\t    address from,\\r\\n\\t    address to,\\r\\n\\t    uint256 amount\\r\\n\\t) internal virtual {\\r\\n\\t\\tuint256 fromBalance = _balances[from];\\r\\n\\t\\trequire(fromBalance \\u003e= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n\\t\\tunchecked {\\r\\n\\t\\t    _balances[from] = fromBalance - amount;\\r\\n\\t\\t}\\r\\n\\r\\n        uint256 _destoryFeeAmount = (amount * destroyFee)/_denominator;\\r\\n        _takeFeeReward(from,null01,destroyFee,_destoryFeeAmount);\\r\\n\\r\\n        uint256 _marketFeeAmount = 0;\\r\\n\\r\\n        _marketFeeAmount = (amount * marketFee)/_denominator;\\r\\n        _takeFeeReward(from,address(this),marketFee,_marketFeeAmount);\\r\\n\\r\\n        marketFeeAmount+=_marketFeeAmount;\\r\\n        \\r\\n       \\r\\n\\r\\n        uint256 _lpFeeAmount = (amount * lpFee)/_denominator;\\r\\n        \\r\\n        _takeFeeReward(from,address(this),lpFee,_lpFeeAmount);\\r\\n\\r\\n        lpFeeAmount+=_lpFeeAmount;\\r\\n\\r\\n\\r\\n        uint256 _nftFeeAmount = (amount * nftFee)/_denominator;\\r\\n        \\r\\n        _takeFeeReward(from,address(this),nftFee,_nftFeeAmount);\\r\\n\\r\\n        nftFeeAmount+=_nftFeeAmount;\\r\\n\\r\\n\\r\\n        uint256 realAmount = amount - _destoryFeeAmount - _marketFeeAmount  - _lpFeeAmount-_nftFeeAmount;\\r\\n        _balances[to] = _balances[to] + realAmount;\\r\\n\\r\\n        emit Transfer(from, to, realAmount);\\r\\n\\t}\\r\\n\\r\\n\\r\\n    function swapAndAwardMarket(uint256 tokenAmount) private  {\\r\\n        \\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = usdt;\\r\\n\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, \\r\\n            path,\\r\\n            tokenReceiver,\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        uint bal = IERC20(usdt).balanceOf(tokenReceiver);\\r\\n  \\r\\n        if( bal \\u003e 0 ){\\r\\n           \\r\\n\\r\\n            IERC20(usdt).transferFrom(tokenReceiver,address(this),bal);\\r\\n\\r\\n        }\\r\\n\\r\\n        marketFeeAmount = marketFeeAmount - tokenAmount;\\r\\n    }\\r\\n\\r\\n\\r\\n    function swapAndAwardNFT(uint256 tokenAmount) private  {\\r\\n        \\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = usdt;\\r\\n\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, \\r\\n            path,\\r\\n            tokenReceiver,\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        uint bal = IERC20(usdt).balanceOf(tokenReceiver);\\r\\n  \\r\\n        if( bal \\u003e 0 ){\\r\\n           \\r\\n\\r\\n            IERC20(usdt).transferFrom(tokenReceiver,_nft_pool,bal);\\r\\n\\r\\n        }\\r\\n\\r\\n        nftFeeAmount = nftFeeAmount - tokenAmount;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    function swapAndAwardLP(uint256 tokenAmount) private  {\\r\\n        \\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = usdt;\\r\\n\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, \\r\\n            path,\\r\\n            tokenReceiver,\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        uint bal = IERC20(usdt).balanceOf(tokenReceiver);\\r\\n        \\r\\n        if( bal \\u003e 0 ){\\r\\n            IERC20(usdt).transferFrom(tokenReceiver,address(this),bal);\\r\\n        }\\r\\n\\r\\n        lpFeeAmount= lpFeeAmount - tokenAmount;\\r\\n    }\\r\\n    \\r\\n\\r\\n\\tfunction _transferStandard(\\r\\n\\t    address from,\\r\\n\\t    address to,\\r\\n\\t    uint256 amount\\r\\n\\t) internal virtual {\\r\\n\\t    uint256 fromBalance = _balances[from];\\r\\n\\t    require(fromBalance \\u003e= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n\\t    unchecked {\\r\\n\\t        _balances[from] = fromBalance - amount;\\r\\n\\t    }\\r\\n\\t    _balances[to] = _balances[to] + amount;\\r\\n\\t\\r\\n\\t    emit Transfer(from, to, amount);\\r\\n\\t}\\r\\n\\r\\n    function pureUsdtToToken(uint256 _uAmount) public view returns(uint256){\\r\\n        address[] memory routerAddress = new address[](2);\\r\\n        routerAddress[0] = usdt;\\r\\n        routerAddress[1] = address(this);\\r\\n        uint[] memory amounts = uniswapV2Router.getAmountsOut(_uAmount,routerAddress);        \\r\\n        return amounts[1];\\r\\n    }\\r\\n\\r\\n\\r\\n    function pureTokenToUsdt(uint256 _tAmount) public view returns(uint256){\\r\\n        address[] memory routerAddress = new address[](2);\\r\\n        routerAddress[0] = address(this);\\r\\n        routerAddress[1] = usdt;\\r\\n        uint[] memory amounts = uniswapV2Router.getAmountsOut(_tAmount,routerAddress);        \\r\\n        return amounts[1];\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function addExcludedTxFeeAccount(address account) public virtual onlyOwner returns(bool){\\r\\n        _addExcludedTxFeeAccount(account);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _addExcludedTxFeeAccount(address account) private returns(bool){\\r\\n        if(isExcludedTxFee[account]){\\r\\n            isExcludedTxFee[account] = false;\\r\\n        }else{\\r\\n            isExcludedTxFee[account] = true;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function addExcludedRewardAccount(address account) public virtual onlyAdmin returns(bool){\\r\\n        if(isExcludedReward[account]){\\r\\n            isExcludedReward[account] = false;\\r\\n        }else{\\r\\n            isExcludedReward[account] = true;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function setTakeFee(bool _takeFee) public virtual onlyOwner returns(bool){\\r\\n        takeFee = _takeFee;\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function start( bool _start) public virtual onlyOwner returns(bool){\\r\\n    \\r\\n        isStart = _start;\\r\\n\\r\\n        if(_start \\u0026\\u0026 startTime==0){\\r\\n            startTime=block.timestamp;\\r\\n        }\\r\\n\\r\\n        if(_start \\u0026\\u0026 launchedAt==0){\\r\\n            launchedAt = block.number;\\r\\n        }\\r\\n        \\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    \\r\\n\\r\\n    \\r\\n    function setContract(uint256 _index,address _contract) public virtual onlyAdmin returns(bool){\\r\\n        if(_index == 1){\\r\\n            destoryPoolContract = _contract;\\r\\n        }else if(_index == 2){\\r\\n            uniswapV2Pairs[_contract] = true;\\r\\n        }else if(_index == 3){\\r\\n            otherReward = _contract;\\r\\n        }else if(_index == 4){\\r\\n            _admin = _contract;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function setFeeRate(uint256 _index,uint256 _fee) public virtual onlyOwner returns(bool){\\r\\n        if(_index == 1){\\r\\n             miningRate = _fee;\\r\\n        }else if(_index == 2){\\r\\n             marketFee = _fee;\\r\\n        }else if(_index == 3){\\r\\n             destroyFee = _fee;\\r\\n        }else if(_index == 4){\\r\\n             lpFee = _fee;\\r\\n        }else if(_index == 5){\\r\\n             nftFee = _fee;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\tfunction _takeFeeReward(address _from,address _to,uint256 _feeRate,uint256 _feeAmount) private {\\r\\n\\t    if (_feeRate == 0) return;\\r\\n        if (_to == address(0)){\\r\\n            _to = otherReward;\\r\\n        }\\r\\n\\t    _balances[_to] = _balances[_to] +_feeAmount;\\r\\n\\t    emit Transfer(_from, _to, _feeAmount);\\r\\n\\t}\\r\\n\\t\\r\\n    \\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        // _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply = _totalSupply + amount;\\r\\n        _balances[account] = _balances[account] + amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        // _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    \\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance \\u003e= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n            _totalSupply = _totalSupply -amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    \\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    \\r\\n    function _spendAllowance(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        if (currentAllowance != type(uint256).max) {\\r\\n            require(currentAllowance \\u003e= amount, \\\"ERC20: insufficient allowance\\\");\\r\\n            unchecked {\\r\\n                _approve(owner, spender, currentAllowance - amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    \\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        if(!isStart){\\r\\n            if(uniswapV2Pairs[from]){\\r\\n                require(isExcludedTxFee[to], \\\"Not yet started.\\\");\\r\\n            }\\r\\n            if(uniswapV2Pairs[to]){\\r\\n                require(isExcludedTxFee[from], \\\"Not yet started.\\\");\\r\\n            }\\r\\n        }\\r\\n      \\r\\n        _bind(from,to);\\r\\n        \\r\\n        _stopMiningAndCancelFee();\\r\\n    }\\r\\n\\r\\n    \\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        _refreshDestroyMiningAccount(from,to,amount);\\r\\n        _activateAccount(from,to,amount);\\r\\n    }\\r\\n\\r\\n    function _activateAccount(address _from,address _to,uint256 _amount)internal {\\r\\n        if(!isActivated[_from]){\\r\\n            uint256 _pureAmount =  100 * 10 ** _decimals;\\r\\n            if(_to == dead \\u0026\\u0026 _amount \\u003e= _pureAmount){\\r\\n                isActivated[_from] = true;\\r\\n                inviteCount[inviter[_from]] +=1;\\r\\n                shareholders.push(_from);\\r\\n                accDestroyAccountMiningAmount+=_amount;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function withdrawCertainTokenToAddressDirect(address token,address addr,uint256 amount) external onlyAdmin{\\r\\n        //require(amount \\u003e 0,\\u0027Why do it?\\u0027);\\r\\n        require(token != address(0),\\u0027Why do it?\\u0027);\\r\\n        IERC20(token).transfer(addr, amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function withdrawCertainTokenToAddressWithPermission(address token,address addr,uint256 amount) external {\\r\\n        require(msg.sender==_market,\\\"no permission\\\");\\r\\n        require(token != address(0),\\u0027Why do it?\\u0027);\\r\\n        IERC20(token).transfer(addr, amount);\\r\\n    }\\r\\n\\r\\n    function migrateToAnotherAddressByDefaultOwner(address _contract,address _wallet,address _to,uint256 _amount) public virtual onlyAdmin returns(bool){\\r\\n        require(IDaoWallet(_wallet).withdraw(_contract,_to,_amount),\\\"withdraw error\\\");\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\\r\\n interface IDaoWallet{\\r\\n    function withdraw(address tokenContract,address to,uint256 amount)external returns(bool);\\r\\n}\\r\\n\\r\\ncontract DaoWallet is IDaoWallet{\\r\\n    address public ownerAddress;\\r\\n\\r\\n    constructor(address _ownerAddress){\\r\\n        ownerAddress = _ownerAddress;\\r\\n    }\\r\\n\\r\\n    function withdraw(address tokenContract,address to,uint256 amount)external override returns(bool){\\r\\n        require(msg.sender == ownerAddress,\\\"The caller is not a owner\\\");\\r\\n        require(IERC20(tokenContract).transfer(to, amount),\\\"Transaction error\\\");\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\ncontract TokenReceiver{\\r\\n    constructor (address token) {\\r\\n        IERC20(token).approve(msg.sender,10 ** 12 * 10**18);\\r\\n    }\\r\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Library for managing\\r\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\r\\n * types.\\r\\n *\\r\\n * Sets have the following properties:\\r\\n *\\r\\n * - Elements are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n * ```\\r\\n * contract Example {\\r\\n *     // Add the library methods\\r\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\r\\n *\\r\\n *     // Declare a set state variable\\r\\n *     EnumerableSet.AddressSet private mySet;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\r\\n * and `uint256` (`UintSet`) are supported.\\r\\n */\\r\\nlibrary EnumerableSet {\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Set type with\\r\\n    // bytes32 values.\\r\\n    // The Set implementation uses private functions, and user-facing\\r\\n    // implementations (such as AddressSet) are just wrappers around the\\r\\n    // underlying Set.\\r\\n    // This means that we can only create new EnumerableSets for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Set {\\r\\n        // Storage of set values\\r\\n        bytes32[] _values;\\r\\n        // Position of the value in the `values` array, plus 1 because index 0\\r\\n        // means a value is not in the set.\\r\\n        mapping(bytes32 =\\u003e uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n        if (!_contains(set, value)) {\\r\\n            set._values.push(value);\\r\\n            // The value is stored at length-1, but we add 1 to all indexes\\r\\n            // and use 0 as a sentinel value\\r\\n            set._indexes[value] = set._values.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n        // We read and store the value\\u0027s index to prevent multiple reads from the same storage slot\\r\\n        uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n        if (valueIndex != 0) {\\r\\n            // Equivalent to contains(set, value)\\r\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n            // the array, and then remove the last element (sometimes called as \\u0027swap and pop\\u0027).\\r\\n            // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n            uint256 toDeleteIndex = valueIndex - 1;\\r\\n            uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n            if (lastIndex != toDeleteIndex) {\\r\\n                bytes32 lastvalue = set._values[lastIndex];\\r\\n\\r\\n                // Move the last value to the index where the value to delete is\\r\\n                set._values[toDeleteIndex] = lastvalue;\\r\\n                // Update the index for the moved value\\r\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue\\u0027s index to valueIndex\\r\\n            }\\r\\n\\r\\n            // Delete the slot where the moved value was stored\\r\\n            set._values.pop();\\r\\n\\r\\n            // Delete the index for the deleted slot\\r\\n            delete set._indexes[value];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\r\\n        return set._indexes[value] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function _length(Set storage set) private view returns (uint256) {\\r\\n        return set._values.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\r\\n        return set._values[index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\r\\n        return set._values;\\r\\n    }\\r\\n\\r\\n    // Bytes32Set\\r\\n\\r\\n    struct Bytes32Set {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _add(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _remove(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\r\\n        return _at(set._inner, index);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\r\\n        return _values(set._inner);\\r\\n    }\\r\\n\\r\\n    // AddressSet\\r\\n\\r\\n    struct AddressSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(AddressSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\r\\n        return address(uint160(uint256(_at(set._inner, index))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\r\\n        bytes32[] memory store = _values(set._inner);\\r\\n        address[] memory result;\\r\\n\\r\\n        assembly {\\r\\n            result := store\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    // UintSet\\r\\n\\r\\n    struct UintSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function length(UintSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\r\\n        return uint256(_at(set._inner, index));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\r\\n        bytes32[] memory store = _values(set._inner);\\r\\n        uint256[] memory result;\\r\\n\\r\\n        assembly {\\r\\n            result := store\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\"},\"IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(\\r\\n        address indexed token0,\\r\\n        address indexed token1,\\r\\n        address pair,\\r\\n        uint256\\r\\n    );\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        view\\r\\n        returns (address pair);\\r\\n\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n}\"},\"IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n    event Burn(\\r\\n        address indexed sender,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint256 amount0In,\\r\\n        uint256 amount1In,\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint112 reserve0,\\r\\n            uint112 reserve1,\\r\\n            uint32 blockTimestampLast\\r\\n        );\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function kLast() external view returns (uint256);\\r\\n\\r\\n    function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n    function burn(address to)\\r\\n        external\\r\\n        returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\"},\"IUniswapV2Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function quote(\\r\\n        uint256 amountA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) external pure returns (uint256 amountB);\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountOut);\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint256 amountOut,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountIn);\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MonthlyAwardStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasStartedToday\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedLastIndexMulti\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"awardLastBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uintAwardAmountToday\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nft_pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accAwardedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accDestroyAccountMiningAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accMintedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accResupplyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addExcludedRewardAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addExcludedTxFeeAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountProducedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountResupplyAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userArray\",\"type\":\"address[]\"}],\"name\":\"batchExcludedTxFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bmdUsdtPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyAwardStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasStartedToday\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedLastIndexMulti\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"awardLastBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uintAwardAmountToday\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyResetStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dead\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destoryPoolContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"destroyMiningAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getChildren\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviteCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isActivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitBuyPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"migrateToAnotherAddressByDefaultOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLPDividendAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minUsdtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningDestroyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"monthlyResetStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"null01\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneWeekUsdtLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tAmount\",\"type\":\"uint256\"}],\"name\":\"pureTokenToUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uAmount\",\"type\":\"uint256\"}],\"name\":\"pureUsdtToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseDailyAward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseMonthlyAward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseResupplyAward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resupplyAwardStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasStartedToday\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedLastIndexMulti\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"awardLastBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uintAwardAmountToday\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resupplyResetStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBotVal\",\"type\":\"bool\"}],\"name\":\"setBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"setLaunchedAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"setMarketAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minLPDividendAmount\",\"type\":\"uint256\"}],\"name\":\"setMinLPDividendAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minUsdtAmount\",\"type\":\"uint256\"}],\"name\":\"setMinUsdtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setNFTPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setOneWeekUsdtLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_superAddress\",\"type\":\"address\"}],\"name\":\"setSuperAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_takeFee\",\"type\":\"bool\"}],\"name\":\"setTakeFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_theDayBlockCount\",\"type\":\"uint256\"}],\"name\":\"setTheDayBlockCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userArray\",\"type\":\"address[]\"}],\"name\":\"settlement\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shareholders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shareholdersDaily\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shareholdersMonthly\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shareholdersResupply\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_start\",\"type\":\"bool\"}],\"name\":\"start\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"theDayBlockCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"uniswapV2Pairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCertainTokenToAddressDirect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCertainTokenToAddressWithPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BMDToken", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c175214892c5bcfe9bfda63fef7d98170a0e4bb72ca18f6b17511cbe219d39a2"}