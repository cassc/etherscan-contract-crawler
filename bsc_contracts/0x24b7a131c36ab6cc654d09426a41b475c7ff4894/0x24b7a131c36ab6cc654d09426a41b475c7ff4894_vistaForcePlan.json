{"SourceCode": "// File: @openzeppelin/contracts-upgradeable@4.9.3/utils/StorageSlotUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\r\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// import \"hardhat/console.sol\";\r\n/**\r\n * @dev Library for reading and writing primitive types to specific storage slots.\r\n *\r\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\r\n * This library helps with reading and writing to such slots without the need for inline assembly.\r\n *\r\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\r\n *\r\n * Example usage to set ERC1967 implementation slot:\r\n * ```solidity\r\n * contract ERC1967 {\r\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n *\r\n *     function _getImplementation() internal view returns (address) {\r\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n *     }\r\n *\r\n *     function _setImplementation(address newImplementation) internal {\r\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\r\n * _Available since v4.9 for `string`, `bytes`._\r\n */\r\nlibrary StorageSlotUpgradeable {\r\n    struct AddressSlot {\r\n        address value;\r\n    }\r\n\r\n    struct BooleanSlot {\r\n        bool value;\r\n    }\r\n\r\n    struct Bytes32Slot {\r\n        bytes32 value;\r\n    }\r\n\r\n    struct Uint256Slot {\r\n        uint256 value;\r\n    }\r\n\r\n    struct StringSlot {\r\n        string value;\r\n    }\r\n\r\n    struct BytesSlot {\r\n        bytes value;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\r\n     */\r\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\r\n     */\r\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\r\n     */\r\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\r\n     */\r\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\r\n     */\r\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\r\n     */\r\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := store.slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\r\n     */\r\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\r\n     */\r\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := store.slot\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable@4.9.3/interfaces/IERC1967Upgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\r\n *\r\n * _Available since v4.8.3._\r\n */\r\ninterface IERC1967Upgradeable {\r\n    /**\r\n     * @dev Emitted when the implementation is upgraded.\r\n     */\r\n    event Upgraded(address indexed implementation);\r\n\r\n    /**\r\n     * @dev Emitted when the admin account has changed.\r\n     */\r\n    event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n    /**\r\n     * @dev Emitted when the beacon is changed.\r\n     */\r\n    event BeaconUpgraded(address indexed beacon);\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable@4.9.3/proxy/beacon/IBeaconUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\r\n */\r\ninterface IBeaconUpgradeable {\r\n    /**\r\n     * @dev Must return an address that can be used as a delegate call target.\r\n     *\r\n     * {BeaconProxy} will check that this address is a contract.\r\n     */\r\n    function implementation() external view returns (address);\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable@4.9.3/interfaces/draft-IERC1822Upgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\r\n * proxy whose upgrades are fully controlled by the current implementation.\r\n */\r\ninterface IERC1822ProxiableUpgradeable {\r\n    /**\r\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\r\n     * address.\r\n     *\r\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\r\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\r\n     * function revert if invoked through a proxy.\r\n     */\r\n    function proxiableUUID() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable@4.9.3/utils/AddressUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable@4.9.3/proxy/utils/Initializable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\r\n\r\npragma solidity ^0.8.2;\r\n\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\r\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\r\n * case an upgrade adds a module that needs to be initialized.\r\n *\r\n * For example:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```solidity\r\n * contract MyToken is ERC20Upgradeable {\r\n *     function initialize() initializer public {\r\n *         __ERC20_init(\"MyToken\", \"MTK\");\r\n *     }\r\n * }\r\n *\r\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\r\n *     function initializeV2() reinitializer(2) public {\r\n *         __ERC20Permit_init(\"MyToken\");\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\r\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() {\r\n *     _disableInitializers();\r\n * }\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     * @custom:oz-retyped-from bool\r\n     */\r\n    uint8 private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Triggered when the contract has been initialized or reinitialized.\r\n     */\r\n    event Initialized(uint8 version);\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\r\n     * `onlyInitializing` functions can be used to initialize parent contracts.\r\n     *\r\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\r\n     * constructor.\r\n     *\r\n     * Emits an {Initialized} event.\r\n     */\r\n    modifier initializer() {\r\n        bool isTopLevelCall = !_initializing;\r\n        require(\r\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\r\n            \"Initializable: contract is already initialized\"\r\n        );\r\n        _initialized = 1;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n        }\r\n        _;\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n            emit Initialized(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\r\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\r\n     * used to initialize parent contracts.\r\n     *\r\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\r\n     * are added through upgrades and that require initialization.\r\n     *\r\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\r\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\r\n     *\r\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\r\n     * a contract, executing them in the right order is up to the developer or operator.\r\n     *\r\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\r\n     *\r\n     * Emits an {Initialized} event.\r\n     */\r\n    modifier reinitializer(uint8 version) {\r\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\r\n        _initialized = version;\r\n        _initializing = true;\r\n        _;\r\n        _initializing = false;\r\n        emit Initialized(version);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\r\n     */\r\n    modifier onlyInitializing() {\r\n        require(_initializing, \"Initializable: contract is not initializing\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\r\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\r\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\r\n     * through proxies.\r\n     *\r\n     * Emits an {Initialized} event the first time it is successfully executed.\r\n     */\r\n    function _disableInitializers() internal virtual {\r\n        require(!_initializing, \"Initializable: contract is initializing\");\r\n        if (_initialized != type(uint8).max) {\r\n            _initialized = type(uint8).max;\r\n            emit Initialized(type(uint8).max);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\r\n     */\r\n    function _getInitializedVersion() internal view returns (uint8) {\r\n        return _initialized;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\r\n     */\r\n    function _isInitializing() internal view returns (bool) {\r\n        return _initializing;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable@4.9.3/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\r\n\r\npragma solidity ^0.8.2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This abstract contract provides getters and event emitting update functions for\r\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\r\n *\r\n * _Available since v4.1._\r\n */\r\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\r\n    function __ERC1967Upgrade_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\r\n    }\r\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\r\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\r\n\r\n    /**\r\n     * @dev Storage slot with the address of the current implementation.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n    /**\r\n     * @dev Returns the current implementation address.\r\n     */\r\n    function _getImplementation() internal view returns (address) {\r\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 implementation slot.\r\n     */\r\n    function _setImplementation(address newImplementation) private {\r\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeTo(address newImplementation) internal {\r\n        _setImplementation(newImplementation);\r\n        emit Upgraded(newImplementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade with additional setup call.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\r\n        _upgradeTo(newImplementation);\r\n        if (data.length > 0 || forceCall) {\r\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\r\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\r\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\r\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\r\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\r\n            _setImplementation(newImplementation);\r\n        } else {\r\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\r\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\r\n            } catch {\r\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\r\n            }\r\n            _upgradeToAndCall(newImplementation, data, forceCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Storage slot with the admin of the contract.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n    /**\r\n     * @dev Returns the current admin.\r\n     */\r\n    function _getAdmin() internal view returns (address) {\r\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 admin slot.\r\n     */\r\n    function _setAdmin(address newAdmin) private {\r\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\r\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the admin of the proxy.\r\n     *\r\n     * Emits an {AdminChanged} event.\r\n     */\r\n    function _changeAdmin(address newAdmin) internal {\r\n        emit AdminChanged(_getAdmin(), newAdmin);\r\n        _setAdmin(newAdmin);\r\n    }\r\n\r\n    /**\r\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\r\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\r\n     */\r\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\r\n\r\n    /**\r\n     * @dev Returns the current beacon.\r\n     */\r\n    function _getBeacon() internal view returns (address) {\r\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\r\n     */\r\n    function _setBeacon(address newBeacon) private {\r\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\r\n        require(\r\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\r\n            \"ERC1967: beacon implementation is not a contract\"\r\n        );\r\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\r\n    }\r\n\r\n    /**\r\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\r\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\r\n     *\r\n     * Emits a {BeaconUpgraded} event.\r\n     */\r\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\r\n        _setBeacon(newBeacon);\r\n        emit BeaconUpgraded(newBeacon);\r\n        if (data.length > 0 || forceCall) {\r\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable@4.9.3/proxy/utils/UUPSUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\r\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\r\n *\r\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\r\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\r\n * `UUPSUpgradeable` with a custom implementation of upgrades.\r\n *\r\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\r\n *\r\n * _Available since v4.1._\r\n */\r\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\r\n    function __UUPSUpgradeable_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\r\n    }\r\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\r\n    address private immutable __self = address(this);\r\n\r\n    /**\r\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\r\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\r\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\r\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\r\n     * fail.\r\n     */\r\n    modifier onlyProxy() {\r\n        require(address(this) != __self, \"Function must be called through delegatecall\");\r\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\r\n     * callable on the implementing contract but not through proxies.\r\n     */\r\n    modifier notDelegated() {\r\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\r\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\r\n     *\r\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\r\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\r\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\r\n     */\r\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\r\n        return _IMPLEMENTATION_SLOT;\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\r\n     *\r\n     * Calls {_authorizeUpgrade}.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     *\r\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\r\n     */\r\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\r\n        _authorizeUpgrade(newImplementation);\r\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\r\n     * encoded in `data`.\r\n     *\r\n     * Calls {_authorizeUpgrade}.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     *\r\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\r\n     */\r\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\r\n        _authorizeUpgrade(newImplementation);\r\n        _upgradeToAndCallUUPS(newImplementation, data, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\r\n     * {upgradeTo} and {upgradeToAndCall}.\r\n     *\r\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\r\n     *\r\n     * ```solidity\r\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\r\n     * ```\r\n     */\r\n    function _authorizeUpgrade(address newImplementation) internal virtual;\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable@4.9.3/utils/ContextUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __Context_init_unchained() internal onlyInitializing {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable@4.9.3/access/OwnableUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner = msg.sender;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal onlyInitializing {\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal onlyInitializing {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: vistaForce.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\ninterface IERC20 {\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function balanceOf(address account) external returns (uint256); \r\n    function allowance(address owner, address spender) external returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function stakeTokens(address _wallet, uint256 _amount, uint256 lockDuration) external returns (bool);\r\n    function burn(uint256 _amount) external;\r\n\r\n}\r\n\r\ninterface IBUSD {\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function balanceOf(address account) external returns (uint256); \r\n    function allowance(address owner, address spender) external returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n}\r\n\r\ninterface IVista {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function stakeTokens(address _wallet, uint256 _amount, uint256 lockDuration) external returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"Addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function subtract(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"Subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract vistaForcePlan is Initializable, OwnableUpgradeable, UUPSUpgradeable {\r\n    uint256 private day = 86400;\r\n    uint256 private month = day * 30;\r\n    uint256 private startmonth = 18 * (day * 30);\r\n    uint256 public price = 8100000000000000000;\r\n    // uint public price;\r\n    address public usdt = 0x55d398326f99059fF775485246999027B3197955;\r\n    address public vista = 0x493361D6164093936c86Dcb35Ad03b4C0D032076;\r\n    struct User {\r\n        address levelUpline;\r\n        address[] levelDownlines;\r\n        uint256 plan;\r\n        uint256 earnings;\r\n        uint256 withdrawn;\r\n        uint256 registrationTime;\r\n        uint256 rank;\r\n        uint256 buyCount;\r\n        uint256 lastCommissionCalculationTime;\r\n        uint256 totalBusiness; // Total business count for the user\r\n    }\r\n\r\n    IBUSD private busdToken;\r\n    IVista private token;\r\n\r\n\r\n    mapping(address => uint256) private balances;\r\n    mapping(address => User) public users;\r\n\r\n    uint256 public tokenPriceInBusd;\r\n    address public busd = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n\r\n    uint256 private constant dailyROI = 16666; // 0.16666%\r\n    uint256 private constant oneDayInSeconds = 1 days;\r\n    uint256 private constant oneWeekInSeconds = 7 days;\r\n\r\n    event Registration(address indexed user, address indexed referrer, uint256 plan);\r\n    event Upgraded(address indexed user, uint256 plan);\r\n    event CommissionEarned(address indexed user, address indexed referrer, uint256 amount, uint256 level);\r\n    event Payout(address indexed user, uint256 amount);\r\n    event RankUpdated(address indexed user, uint256 rank);\r\n    event RewardTransferred(address indexed user, uint256 amount);\r\n    event RoyaltyTransferred(address indexed user, uint256 amount, uint256 week);\r\n    event DebugLog(address indexed user, uint256 value1, uint256 value2, uint256 value3, uint256 value4, uint256 value5);\r\n    event PriceUpdated(uint256 oldPrice, uint256 newPrice);\r\n\r\n    mapping(uint256 => uint256) private levelIncomes;\r\n    mapping(uint256 => uint256) private differenceIncomeTarget;\r\n    mapping(uint256 => uint256) private rewardIncomes;\r\n    mapping(uint256 => uint256) private royaltyIncomes;\r\n    mapping(address => uint256) private royaltyPaidWeeks;\r\n    uint256 public royaltyWeeks = 15;\r\n\r\n    function buyPackage(uint256 plan, address referrer) external {\r\n       \r\n        uint256 amount = plan * 10 ** 18 / tokenPriceInBusd;\r\n       \r\n\r\n        busdToken.transferFrom(msg.sender, address(this), amount);\r\n        token.transfer(msg.sender, amount);\r\n\r\n\r\n        // Calculate staking return and update user's earnings\r\n        users[msg.sender].plan = plan;\r\n        users[msg.sender].registrationTime = block.timestamp;\r\n        users[msg.sender].levelUpline = referrer;\r\n        users[msg.sender].buyCount++;\r\n        users[referrer].levelDownlines.push(msg.sender);\r\n       \r\n        // Update total business count for the user and their uplines\r\n        if (users[msg.sender].levelUpline == address(0)) {\r\n            users[msg.sender].levelUpline = referrer;\r\n        }\r\n        require(users[referrer].plan > 0, \"Referrer must be upgraded to a level to refer others\");\r\n        users[msg.sender].buyCount++;\r\n\r\n        address upline = referrer;\r\n        address downline = msg.sender;\r\n        for (uint256 i = 1; i <= 10; i++) {\r\n            if (upline == address(0)) break;\r\n\r\n            updateTotalBusiness(downline, plan);\r\n            // Update user's rank\r\n            updateRank(upline);\r\n\r\n            downline = upline;\r\n            upline = users[upline].levelUpline;\r\n        }\r\n\r\n        // Emit events accordingly\r\n        emit Registration(msg.sender, referrer, plan);\r\n    }\r\n\r\n    function updateTotalBusiness(address user, uint256 plan) internal {\r\n        uint256 totalBusiness = plan;\r\n        for (uint256 i = 0; i < users[user].levelDownlines.length; i++) {\r\n            address downline = users[user].levelDownlines[i];\r\n            totalBusiness += users[downline].totalBusiness;\r\n        }\r\n        users[user].totalBusiness = totalBusiness;\r\n    }\r\n\r\n    function distributeCommission(address user, uint256 plan) internal {\r\n        address upline = users[user].levelUpline;\r\n        uint256 currentTime = block.timestamp;\r\n        uint256 lastCalculationTime = users[user].lastCommissionCalculationTime;\r\n\r\n        for (uint256 i = 1; i <= 20; i++) {\r\n            if (upline == address(0)) break;\r\n\r\n            uint256 timeSinceLastCalculation = currentTime - lastCalculationTime;\r\n            uint256 commission = (plan * levelIncomes[i] * timeSinceLastCalculation) / (10000 * oneDayInSeconds); // Convert to daily percentage\r\n\r\n            users[upline].earnings += commission;\r\n            emit CommissionEarned(upline, user, commission, i);\r\n\r\n            // Distribute 50% of direct referral's ROI to the user\r\n            if (i == 1) {\r\n                uint256 referralROI = (plan * dailyROI * timeSinceLastCalculation) / (10000 * oneDayInSeconds); // Convert to daily percentage\r\n                uint256 referralIncome = (referralROI / tokenPriceInBusd) / 2;\r\n\r\n                users[upline].earnings += referralIncome;\r\n                emit CommissionEarned(upline, user, referralIncome, 0);\r\n            }\r\n\r\n            // Distribute 50% of level 1 referral's ROI to the user\r\n            if (i == 2 && getTotalBusinessLevel1(upline) >= 5000) {\r\n                uint256 referralROI = (plan * dailyROI * timeSinceLastCalculation) / (10000 * oneDayInSeconds); // Convert to daily percentage\r\n                uint256 referralIncome = (referralROI / tokenPriceInBusd) / 2;\r\n\r\n                users[upline].earnings += referralIncome;\r\n                emit CommissionEarned(upline, user, referralIncome, 0);\r\n            }\r\n\r\n            // Apply rank bonus for higher ranked users\r\n            if (users[upline].rank >= 1 && users[upline].rank <= 10 && users[upline].rank > users[user].rank) {\r\n                uint256 rankBonus = ((users[upline].rank - users[user].rank) * plan * 10 * timeSinceLastCalculation) / (100 * oneDayInSeconds); // Convert to daily percentage\r\n                users[upline].earnings += rankBonus;\r\n                emit CommissionEarned(upline, user, rankBonus, 0);\r\n            }\r\n\r\n            upline = users[upline].levelUpline;\r\n        }\r\n\r\n        // Update last commission calculation time for the user\r\n        users[user].lastCommissionCalculationTime = currentTime;\r\n    }\r\n\r\n\r\n    function payout() external {\r\n        // Check if the user's total withdrawn amount is less than the allowed earnings for their current buying count\r\n        uint256 maxEarnings = getMaxEarnings(users[msg.sender].buyCount);\r\n        require(users[msg.sender].withdrawn < maxEarnings * users[msg.sender].plan, \"Maximum earnings reached\");\r\n\r\n        // Calculate daily commissions for the user and their uplines\r\n        distributeCommission(msg.sender, users[msg.sender].plan);\r\n        updateRank(msg.sender);\r\n\r\n        // Calculate user's ROI since last withdrawn\r\n        uint256 roiAmount = (users[msg.sender].plan * dailyROI) / 10000; // Convert to percentage\r\n        uint256 eligibleEarnings = roiAmount * ((block.timestamp - users[msg.sender].lastCommissionCalculationTime) / oneDayInSeconds);\r\n        uint256 totalEarnings = eligibleEarnings + users[msg.sender].earnings - users[msg.sender].withdrawn;\r\n\r\n        // Calculate royalty earnings\r\n        if (users[msg.sender].rank > 0) {\r\n            uint256 royaltyAmount = calculateRoyalty(msg.sender);\r\n            totalEarnings += royaltyAmount;\r\n        }\r\n\r\n        if (totalEarnings > 0) {\r\n            // Update user's earnings\r\n            users[msg.sender].earnings += totalEarnings;\r\n\r\n            // Transfer ROI tokens to the user\r\n            bool success = token.transfer(msg.sender, totalEarnings * 10 ** 18 );\r\n            require(success, \"Token transfer failed\");\r\n\r\n            users[msg.sender].withdrawn += totalEarnings;\r\n            emit Payout(msg.sender, totalEarnings);\r\n        }\r\n    }\r\n\r\n    function getMaxEarnings(uint256 buyingCount) internal pure returns (uint256) {\r\n        if (buyingCount == 1) {\r\n            // First buying, maximum earnings allowed is 3x the plan amount\r\n            return 3;\r\n        } else if (buyingCount == 2) {\r\n            // Second buying, maximum earnings allowed is 4x the plan amount\r\n            return 4;\r\n        } else if (buyingCount == 3) {\r\n            // Third buying, maximum earnings allowed is 5x the plan amount\r\n            return 5;\r\n        } else {\r\n            // Subsequent buying, no limit on earnings\r\n            return type(uint256).max;\r\n        }\r\n    }\r\n\r\n    function calculateRoyalty(address user) internal returns (uint256) {\r\n        uint256 royaltyAmount = 0;\r\n        uint256 lastPaidWeek = royaltyPaidWeeks[user];\r\n        uint256 currentWeek = block.timestamp / oneWeekInSeconds;\r\n\r\n        for (uint256 i = lastPaidWeek + 1; i <= currentWeek && royaltyWeeks > 0; i++) {\r\n            royaltyAmount += royaltyIncomes[users[user].rank] / tokenPriceInBusd;\r\n            royaltyPaidWeeks[user] = i;\r\n            royaltyWeeks--;\r\n        }\r\n\r\n        return royaltyAmount;\r\n    }\r\n\r\n    function updateRank(address user) internal {\r\n        uint256 userBusiness = getTotalBusinessCount(user);\r\n        uint256 currentRank = users[user].rank;\r\n\r\n        // Calculate the total business from the top two downlines\r\n        uint256 totalBusinessFromTopTwo = 0;\r\n        for (uint256 i = 0; i < users[user].levelDownlines.length && i < 2; i++) {\r\n            address downline = users[user].levelDownlines[i];\r\n            uint256 downlineBusiness = getTotalBusinessCount(downline);\r\n            totalBusinessFromTopTwo += downlineBusiness;\r\n        }\r\n\r\n        // Calculate the total business from other downlines\r\n        uint256 totalBusinessFromOthers = userBusiness - totalBusinessFromTopTwo;\r\n\r\n        for (uint256 i = 1; i <= 10; i++) {\r\n            uint256 targetBusinessTopTwo = differenceIncomeTarget[i] * 60 / 100;\r\n            uint256 targetBusinessOthers = differenceIncomeTarget[i] * 40 / 100;\r\n\r\n            if (totalBusinessFromTopTwo >= targetBusinessTopTwo && totalBusinessFromOthers >= targetBusinessOthers) {\r\n                if (currentRank < i) {\r\n                    users[user].rank = i;\r\n                    emit RankUpdated(user, users[user].rank);\r\n\r\n                    // Transfer reward income based on the user's rank\r\n                    uint256 rewardAmount = rewardIncomes[users[user].rank] / tokenPriceInBusd;\r\n                    bool success = token.transfer(user, rewardAmount * 10 ** 18 );\r\n                    require(success, \"Reward transfer failed\");\r\n\r\n                    emit RewardTransferred(user, rewardAmount);\r\n                }\r\n\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getTotalBusinessCount(address user) internal view returns (uint256) {\r\n        return users[user].totalBusiness;\r\n    }\r\n\r\n    function getTotalBusinessLevel1(address user) internal view returns (uint256) {\r\n        uint256 totalBusinessLevel1 = 0;\r\n        for (uint256 i = 0; i < users[user].levelDownlines.length; i++) {\r\n            address downline = users[user].levelDownlines[i];\r\n            totalBusinessLevel1 += users[downline].plan;\r\n        }\r\n        return totalBusinessLevel1;\r\n    }\r\n\r\n    // Only the contract owner can call this function\r\n    function openLevelsAndIncomesForUser(address userAddress, uint256[] calldata levelNumbers) external onlyOwner {\r\n        require(levelNumbers.length > 0, \"At least one level must be specified\");\r\n\r\n        for (uint256 i = 0; i < levelNumbers.length; i++) {\r\n            uint256 levelNumber = levelNumbers[i];\r\n            require(levelNumber >= 1 && levelNumber <= 20, \"Invalid level number\");\r\n\r\n            // Check if the level is already open for the user\r\n            bool isLevelOpen = false;\r\n            for (uint256 j = 0; j < users[userAddress].levelDownlines.length; j++) {\r\n                if (users[userAddress].levelDownlines[j] == userAddress && users[userAddress].rank >= levelNumber) {\r\n                    isLevelOpen = true;\r\n                    break;\r\n                }\r\n            }\r\n            require(!isLevelOpen, \"Level is already open for the user\");\r\n\r\n            // Open the level and income for the user\r\n            users[userAddress].rank = levelNumber; // Assuming rank represents the level user has access to.\r\n        }\r\n    }\r\n\r\n    function getUserLevelUpline(address userAddress) external view returns (address) {\r\n        return users[userAddress].levelUpline;\r\n    }\r\n\r\n    function getUserLevelDownlines(address userAddress) external view returns (address[] memory) {\r\n        return users[userAddress].levelDownlines;\r\n    }\r\n\r\n    function getUserPlan(address userAddress) external view returns (uint256) {\r\n        return users[userAddress].plan;\r\n    }\r\n\r\n    function getUserEarnings(address userAddress) external view returns (uint256) {\r\n        return users[userAddress].earnings;\r\n    }\r\n\r\n    function getUserWithdrawn(address userAddress) external view returns (uint256) {\r\n        return users[userAddress].withdrawn;\r\n    }\r\n\r\n    function getUserRegistrationTime(address userAddress) external view returns (uint256) {\r\n        return users[userAddress].registrationTime;\r\n    }\r\n\r\n    function getUserRank(address userAddress) external view returns (uint256) {\r\n        return users[userAddress].rank;\r\n    }\r\n\r\n    function getUserBuyCount(address userAddress) external view returns (uint256) {\r\n        return users[userAddress].buyCount;\r\n    }\r\n\r\n    function getUserLastCommissionCalculationTime(address userAddress) external view returns (uint256) {\r\n        return users[userAddress].lastCommissionCalculationTime;\r\n    }\r\n\r\n    function depositTokens(uint256 amount) external onlyOwner {\r\n        require(amount > 0, \"Amount must be greater than zero\");\r\n\r\n        // Increase the contract balance\r\n        balances[address(this)] += amount;\r\n    }\r\n\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor() {\r\n        _disableInitializers();\r\n    }\r\n\r\n    function initialize() initializer public {\r\n        __Ownable_init();\r\n        __UUPSUpgradeable_init();\r\n        _transferOwnership(msg.sender);\r\n\r\n        busdToken = IBUSD(busd);\r\n        token = IVista(vista);\r\n        // Initialize the Token contract\r\n        tokenPriceInBusd = 490;\r\n\r\n        // Initialize other variables if needed\r\n        levelIncomes[1] = 25;\r\n        levelIncomes[2] = 10;\r\n        levelIncomes[3] = 10;\r\n        levelIncomes[4] = 5;\r\n        levelIncomes[5] = 5;\r\n        levelIncomes[6] = 4;\r\n        levelIncomes[7] = 4;\r\n        levelIncomes[8] = 4;\r\n        levelIncomes[9] = 4;\r\n        levelIncomes[10] = 4;\r\n        levelIncomes[11] = 3;\r\n        levelIncomes[12] = 3;\r\n        levelIncomes[13] = 3;\r\n        levelIncomes[14] = 3;\r\n        levelIncomes[15] = 3;\r\n        levelIncomes[16] = 2;\r\n        levelIncomes[17] = 2;\r\n        levelIncomes[18] = 2;\r\n        levelIncomes[19] = 2;\r\n        levelIncomes[20] = 2;\r\n        differenceIncomeTarget[1] = 2500;\r\n        differenceIncomeTarget[2] = 7500;\r\n        differenceIncomeTarget[3] = 22500;\r\n        differenceIncomeTarget[4] = 72500;\r\n        differenceIncomeTarget[5] = 172500;\r\n        differenceIncomeTarget[6] = 472500;\r\n        differenceIncomeTarget[7] = 1972500;\r\n        differenceIncomeTarget[8] = 6972500;\r\n        differenceIncomeTarget[9] = 14472500;\r\n        differenceIncomeTarget[10] = 114472500;\r\n        rewardIncomes[1] = 100;\r\n        rewardIncomes[2] = 250;\r\n        rewardIncomes[3] = 700;\r\n        rewardIncomes[4] = 2500;\r\n        rewardIncomes[5] = 5000;\r\n        rewardIncomes[6] = 15000;\r\n        rewardIncomes[7] = 75000;\r\n        rewardIncomes[8] = 200000;\r\n        rewardIncomes[9] = 350000;\r\n        rewardIncomes[10] = 500000;\r\n        royaltyIncomes[1] = 10;\r\n        royaltyIncomes[2] = 25;\r\n        royaltyIncomes[3] = 60;\r\n        royaltyIncomes[4] = 150;\r\n        royaltyIncomes[5] = 350;\r\n        royaltyIncomes[6] = 1000;\r\n        royaltyIncomes[7] = 5200;\r\n        royaltyIncomes[8] = 17000;\r\n        royaltyIncomes[9] = 30000;\r\n        royaltyIncomes[10] = 50000;\r\n\r\n        users[0xD79fe145D76e4a4468Bd27Ec3d435B15D00e921E].levelUpline = address(0);\r\n        users[0xD79fe145D76e4a4468Bd27Ec3d435B15D00e921E].plan = 5000; \r\n        users[0xD79fe145D76e4a4468Bd27Ec3d435B15D00e921E].registrationTime = block.timestamp;\r\n        users[0xD79fe145D76e4a4468Bd27Ec3d435B15D00e921E].buyCount = 1;\r\n        users[0xD79fe145D76e4a4468Bd27Ec3d435B15D00e921E].lastCommissionCalculationTime = block.timestamp;\r\n\r\n        for (uint256 i = 1; i <= 10; i++) {\r\n            users[0xD79fe145D76e4a4468Bd27Ec3d435B15D00e921E].levelDownlines.push(0xD79fe145D76e4a4468Bd27Ec3d435B15D00e921E);\r\n        }\r\n\r\n        // Emit events accordingly\r\n        emit Registration(0xD79fe145D76e4a4468Bd27Ec3d435B15D00e921E, address(0), 100);\r\n    }\r\n\r\n    function _authorizeUpgrade(address newImplementation)\r\n        internal\r\n        onlyOwner\r\n        override\r\n    {}\r\n\r\n    // Function to deposit ERC-20 tokens into the contract\r\n\r\n    function updatePrice(uint256 _newPrice) public onlyOwner {\r\n        require(_newPrice != price, \"New price must be different.\");\r\n\r\n        uint256 oldPrice = price;\r\n        price = _newPrice;\r\n        \r\n\r\n        emit PriceUpdated(oldPrice, _newPrice);\r\n    }\r\n\r\n    function burn() public onlyOwner {\r\n        IERC20 vistaToken = IERC20(vista);\r\n        uint256 _balance = vistaToken.balanceOf(address(this));\r\n        vistaToken.burn(_balance);\r\n    }\r\n\r\n\r\n    // Function to stake ERC-20 tokens into the contract\r\n    function stake(uint256 USDTAmount, address refer, address user) public {\r\n        IERC20 vistaToken = IERC20(vista);\r\n        IERC20 usdToken = IERC20(usdt);\r\n        uint256 amount = (USDTAmount * 1 ether) / price;\r\n        require(usdToken.transferFrom(user, address(this), USDTAmount), \"USDT transferFrom failed\");\r\n\r\n        require(usdToken.transfer(0x415eF61e51f7D70f43569775E4a3D986cD02ed0c, USDTAmount), \"USDT transfer to destination failed\");\r\n       \r\n        require(vistaToken.transfer(user, amount), \"VISTA transfer to sender failed\");\r\n       \r\n        directStakingIncentive(refer, amount/10);\r\n\r\n        vistaToken.stakeTokens(user, amount * 10 / 100, startmonth);\r\n        vistaToken.stakeTokens(user, amount * 10 / 100, startmonth + month * 1);\r\n        vistaToken.stakeTokens(user, amount * 10 / 100, startmonth + month * 2);\r\n        vistaToken.stakeTokens(user, amount * 10 / 100, startmonth + month * 3);\r\n        vistaToken.stakeTokens(user, amount * 10 / 100, startmonth + month * 4);\r\n        vistaToken.stakeTokens(user, amount * 10 / 100, startmonth + month * 5);\r\n        vistaToken.stakeTokens(user, amount * 10 / 100, startmonth + month * 6);\r\n        vistaToken.stakeTokens(user, amount * 10 / 100, startmonth + month * 7);\r\n        vistaToken.stakeTokens(user, amount * 10 / 100, startmonth + month * 8);\r\n        vistaToken.stakeTokens(user, amount * 10 / 100, startmonth + month * 9);\r\n    }\r\n\r\n    // Function to reStake ERC-20 tokens into the contract\r\n    function reStake(uint256 amount, address user) public {\r\n        IERC20 vistaToken = IERC20(vista);\r\n\r\n        vistaToken.transferFrom(user, address(this), amount);\r\n\r\n        vistaToken.transfer(0x415eF61e51f7D70f43569775E4a3D986cD02ed0c, amount-1);\r\n\r\n        vistaToken.stakeTokens(user, amount * 10 / 100, startmonth + month * 1);\r\n        vistaToken.stakeTokens(user, amount * 10 / 100, startmonth + month * 2);\r\n        vistaToken.stakeTokens(user, amount * 10 / 100, startmonth + month * 3);\r\n        vistaToken.stakeTokens(user, amount * 10 / 100, startmonth + month * 4);\r\n        vistaToken.stakeTokens(user, amount * 10 / 100, startmonth + month * 5);\r\n        vistaToken.stakeTokens(user, amount * 10 / 100, startmonth + month * 6);\r\n        vistaToken.stakeTokens(user, amount * 10 / 100, startmonth + month * 7);\r\n        vistaToken.stakeTokens(user, amount * 10 / 100, startmonth + month * 8);\r\n        vistaToken.stakeTokens(user, amount * 10 / 100, startmonth + month * 9);\r\n        vistaToken.stakeTokens(user, amount * 10 / 100, startmonth + month * 10);\r\n    }\r\n   \r\n    // Function to distribute direct staking incentive\r\n    function directStakingIncentive(address refer, uint256 amount) internal {\r\n        IERC20 vistaToken = IERC20(vista);\r\n\r\n        require(vistaToken.transfer(refer, amount), \"VISTA transfer to refer failed\");\r\n        vistaToken.stakeTokens(refer, amount * 5 / 100, month * 1);\r\n        vistaToken.stakeTokens(refer, amount * 5 / 100, month * 2);\r\n        vistaToken.stakeTokens(refer, amount * 5 / 100, month * 3);\r\n        vistaToken.stakeTokens(refer, amount * 5 / 100, month * 4);\r\n        vistaToken.stakeTokens(refer, amount * 5 / 100, month * 5);\r\n        vistaToken.stakeTokens(refer, amount * 5 / 100, month * 6);\r\n        vistaToken.stakeTokens(refer, amount * 5 / 100, month * 7);\r\n        vistaToken.stakeTokens(refer, amount * 5 / 100, month * 8);\r\n        vistaToken.stakeTokens(refer, amount * 5 / 100, month * 9);\r\n        vistaToken.stakeTokens(refer, amount * 5 / 100, month * 10);\r\n        vistaToken.stakeTokens(refer, amount * 5 / 100, month * 11);\r\n        vistaToken.stakeTokens(refer, amount * 5 / 100, month * 12);\r\n        vistaToken.stakeTokens(refer, amount * 5 / 100, month * 13);\r\n        vistaToken.stakeTokens(refer, amount * 5 / 100, month * 14);\r\n        vistaToken.stakeTokens(refer, amount * 5 / 100, month * 15);\r\n        vistaToken.stakeTokens(refer, amount * 5 / 100, month * 16);\r\n        vistaToken.stakeTokens(refer, amount * 5 / 100, month * 17);\r\n        vistaToken.stakeTokens(refer, amount * 5 / 100, month * 18);\r\n        vistaToken.stakeTokens(refer, amount * 5 / 100, month * 19);\r\n        vistaToken.stakeTokens(refer, amount * 5 / 100, month * 20);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"CommissionEarned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value3\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value4\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value5\",\"type\":\"uint256\"}],\"name\":\"DebugLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rank\",\"type\":\"uint256\"}],\"name\":\"RankUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"plan\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"week\",\"type\":\"uint256\"}],\"name\":\"RoyaltyTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"plan\",\"type\":\"uint256\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"plan\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"buyPackage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserBuyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserLastCommissionCalculationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserLevelDownlines\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserLevelUpline\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserPlan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserRank\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserRegistrationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"levelNumbers\",\"type\":\"uint256[]\"}],\"name\":\"openLevelsAndIncomesForUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"reStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyWeeks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"USDTAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"refer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPriceInBusd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"levelUpline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"plan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rank\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCommissionCalculationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBusiness\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vista\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "vistaForcePlan", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://371899a577e92826af1c2bb85c9f060633b8dc9b6228f2e059377fbc10bb1673"}