{"SourceCode": "// SPDX-License-Identifier: none\r\npragma solidity 0.8.4; \r\n\r\ncontract Owned {\r\n    \r\n    /// Modifier for owner only function call\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        _;\r\n    }\r\n    address public owner;\r\n   \r\n    /// Function to transfer ownership \r\n    /// Only owner can call this function\r\n    function changeOwnership(address payable _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n    \r\n}\r\n\r\ncontract Freeze is Owned {\r\n    \r\n    /// To check if the contract is frozen\r\n    modifier freezeCheck() {\r\n        require(isFreeze==false,\"Contract have frozen\");\r\n        _;\r\n    }\r\n    bool public isFreeze;\r\n    \r\n    /// Changes freeze status of Contract\r\n    /// Only owner can call this function\r\n    function changeFreezeStatus(bool freezeStatus) public onlyOwner {\r\n        isFreeze = freezeStatus;\r\n    }\r\n    \r\n}\r\n\r\ninterface BEP {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BEP20 is Freeze{\r\n    string public symbol;\r\n    string public name;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    \r\n    mapping (address=>uint256) internal balances;\r\n    mapping (address=>mapping (address=>uint256)) internal allowed;\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n    /// Returns the token balance of the address which is passed in parameter\r\n    function balanceOf(address _owner) view public  returns (uint256 balance) {return balances[_owner];}\r\n    \r\n    /**\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address _to, uint256 _amount) public freezeCheck returns (bool success) {\r\n        \r\n        require(_to != address(0), \"Transfer to zero address\");\r\n        require (balances[msg.sender]>=_amount && _amount>0 && balances[_to]+_amount>balances[_to], \"Insufficient amount or allowance error\");\r\n        balances[msg.sender]-=_amount;\r\n        balances[_to]+=_amount;\r\n        emit Transfer(msg.sender,_to,_amount);\r\n        return true;\r\n    }\r\n  \r\n     /**\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address _from,address _to,uint256 _amount) public freezeCheck returns (bool success) {\r\n      \r\n        require(_from != address(0), \"Sender cannot be zero address\");\r\n        require(_to != address(0), \"Recipient cannot be zero address\");\r\n        require (balances[_from]>=_amount && allowed[_from][msg.sender]>=_amount && _amount>0 && balances[_to]+_amount>balances[_to], \"Insufficient amount or allowance error\");\r\n        balances[_from]-=_amount;\r\n        allowed[_from][msg.sender]-=_amount;\r\n        balances[_to]+=_amount;\r\n        emit Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n  \r\n    /**\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n        require(_spender != address(0), \"Approval for zero address\");\r\n        allowed[msg.sender][_spender]=_amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     *  Returns allowance for an address approved for contract\r\n     */\r\n    function allowance(address _owner, address _spender) view public returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n    \r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal  virtual {\r\n        require(account != address(0), \"BEP20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        totalSupply += amount;\r\n        balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */ \r\n    function _burn(address account, uint256 amount) internal  virtual {\r\n        require(account != address(0), \"BEP20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = balances[account];\r\n        require(accountBalance >= amount, \"BEP20: burn amount exceeds balance\");\r\n        balances[account] = accountBalance - amount;\r\n        totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\ncontract TimeLock is Owned, BEP20 {\r\n    \r\n    struct LockedAccounts {\r\n        address account;\r\n        uint amount;\r\n        uint time;\r\n        Locked[] locked;\r\n    }\r\n    \r\n    struct Locked {\r\n        uint time;\r\n        uint amount;\r\n        uint lockedAt;\r\n    }\r\n    \r\n    mapping(address => LockedAccounts) internal lock;\r\n    \r\n    /**\r\n     * @dev Owner locks 'amount' tokens on behalf of an address\r\n     * \r\n     * Requirements:\r\n     * \r\n     * - 'amount' has to be greater than zero\r\n     * - '_lockAccount' cannot be zero address\r\n     */ \r\n    function timeLock(address _lockAccount, uint time, uint amount) external onlyOwner  freezeCheck returns (bool) {\r\n        require(amount > 0, \"TimeLock: Amount cannot be zero\");\r\n        require(_lockAccount != address(0), \"TimeLock: Cannot lock for zero address\");\r\n        transfer(address(this), amount);\r\n        lock[_lockAccount].account = _lockAccount;\r\n        lock[_lockAccount].amount = amount;\r\n        lock[_lockAccount].time = time;\r\n        lock[_lockAccount].locked.push(Locked(time, amount, block.timestamp));\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev User can release their tokens after lock time has been reached\r\n     * \r\n     * Requirements:\r\n     * \r\n     * - msg.sender must not have an empty array of locked amount\r\n     * - lock time must be reached before releasing\r\n     */ \r\n    function release() external freezeCheck returns (bool) {\r\n        \r\n        LockedAccounts storage lockedAccount = lock[msg.sender];\r\n        uint len = lockedAccount.locked.length;\r\n        require(len > 0);\r\n        \r\n        for(uint i = 0; i < len; i++) {\r\n            Locked storage loc = lockedAccount.locked[i];\r\n            require(block.timestamp >= (loc.time + loc.lockedAt), \"TimeLock: Release time not reached\");\r\n            uint amount = loc.amount;\r\n            BEP(address(this)).transfer(msg.sender, amount);\r\n            delete loc.amount;\r\n            delete loc.time;\r\n            delete loc.lockedAt;\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @return Account details for address for which tokens have been locked\r\n     */ \r\n    function lockedAccountDetails(address user) external view returns (uint[] memory, uint[] memory, uint[] memory, uint[] memory, uint) {\r\n        uint lockedLength = lock[user].locked.length;\r\n        uint[] memory lockedAmounts = new uint[](lockedLength);\r\n        uint[] memory lockTimes = new uint[](lockedLength);\r\n        uint[] memory lockedAt = new uint[](lockedLength);\r\n        uint[] memory totalLockTime = new uint[](lockedLength);\r\n        uint currentTime = block.timestamp;\r\n        \r\n        \r\n        for(uint i = 0; i < lockedLength; i++) {\r\n            lockedAmounts[i] = lock[user].locked[i].amount;\r\n            lockTimes[i] = lock[user].locked[i].time;\r\n            lockedAt[i] = lock[user].locked[i].lockedAt;\r\n            totalLockTime[i] = lock[user].locked[i].time + lock[user].locked[i].lockedAt;\r\n        }\r\n        return(lockedAmounts, lockTimes, lockedAt, totalLockTime, currentTime);\r\n    }\r\n    \r\n  \r\n}\r\n\r\ncontract KuCoinLaunchPad  is TimeLock {\r\n    \r\n    /**\r\n     * @dev Sets symbol, name, decimals and totalSupply of the token\r\n     * \r\n     * - Sets msg.sender as the owner of the contract\r\n     * - Transfers totalSupply to owner\r\n     */ \r\n    constructor()   {\r\n        symbol = \"KCLP\";\r\n        name = \"KuCoin LaunchPad\";\r\n        decimals = 18;                                    \r\n        totalSupply = 350000000 * 10**18;           \r\n       \r\n        owner = msg.sender;\r\n        balances[owner] = totalSupply;\r\n    }\r\n    \r\n    /**\r\n     * @dev Calls mint function from BEP20 contract\r\n     * \r\n     * Requirements:\r\n     * \r\n     * - only owner can call this function\r\n     * - 'to' address cannot be zero address\r\n     */\r\n    function mint(address to, uint amount) external freezeCheck {\r\n        require(msg.sender == owner, \"only admin\");\r\n        require(to != address(0), \"No mint to zero address\");\r\n        _mint(to, amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Calls burn function from BEP20 contract\r\n     * \r\n     * Requirements:\r\n     * \r\n     * - only owner can call this function\r\n     * - 'from' address cannot be zero address\r\n     */\r\n    function burn(address from, uint amount) external freezeCheck {\r\n        require(msg.sender == owner, \"only admin\");\r\n        require(from != address(0), \"No burn from zero address\");\r\n        _burn(from, amount);\r\n    }\r\n    \r\n    \r\n   \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"freezeStatus\",\"type\":\"bool\"}],\"name\":\"changeFreezeStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFreeze\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lockedAccountDetails\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"timeLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KuCoinLaunchPad", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://84a918631b2ad22ba317be2d2a1134f56d381a0ee7fcefb9a2186c1af544fef1"}