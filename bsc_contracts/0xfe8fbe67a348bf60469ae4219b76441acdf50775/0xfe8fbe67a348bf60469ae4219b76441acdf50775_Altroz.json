{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-11-08\r\n */\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.0;\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint256);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function getOwner() external view returns (address);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Altroz is IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 private _decimals;\r\n    string private _symbol;\r\n    string private _name;\r\n\r\n    address admin_fee_address;\r\n\r\n    IBEP20 public depositToken;\r\n\r\n    constructor(IBEP20 _depositTokenAddress, address _admin_fee_address) {\r\n        _name = \"ORACLE\";\r\n        _symbol = \"ORCL\";\r\n        _decimals = 18;\r\n        _totalSupply = 0 * 10**_decimals;\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n        isRegistered[address(this)] = true;\r\n        depositToken = _depositTokenAddress;\r\n        admin_fee_address = _admin_fee_address;\r\n        totalCollection = 0;\r\n    }\r\n\r\n    function getOwner() external view override returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function decimals() external view override returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            msg.sender,\r\n            _allowances[sender][msg.sender].sub(amount)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"BEP20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function withdrawusdtToken(\r\n        address withdrawtoken,\r\n        address receiver,\r\n        uint256 amount\r\n    ) public onlyOwner {\r\n        IBEP20(withdrawtoken).transfer(receiver, amount);\r\n    }\r\n\r\n    function withdraworbttoken(address recevier, uint256 amount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        IBEP20(address(this)).transfer(recevier, amount);\r\n    }\r\n\r\n    uint256 public altroz_rate = 1e18;\r\n\r\n    // uint256 public directPercent = 15e18;\r\n    uint256 public liquidPercent = 25e18;\r\n    uint256 public adminPercent = 10e18;\r\n    uint256 public contractpercent = 50e18;\r\n\r\n    uint256 public TotalUsdtAmount;\r\n    uint256 public totalCollection;\r\n\r\n    event Burn(address user_address, uint256 amt);\r\n    event Userbuy(address user_address, uint256 amt);\r\n\r\n    struct User {\r\n        address referral_address;\r\n    }\r\n\r\n    struct Buyhistory {\r\n        uint256 buy_amt;\r\n        // uint256 directreferral_amt;\r\n        uint256 usertransfer_amt;\r\n        uint256 liquidity_amt;\r\n        uint256 admin_amt;\r\n    }\r\n\r\n    struct Sellhistory {\r\n        uint256 sell_amt;\r\n        uint256 admin_amt;\r\n        uint256 usertransfer_amt;\r\n    }\r\n\r\n    mapping(address => Buyhistory) public buyRecord;\r\n    mapping(address => Sellhistory) public sellRecord;\r\n    mapping(address => User) public userRegister;\r\n    mapping(address => bool) public isRegistered;\r\n\r\n    function register(address refer_address) public {\r\n        require(refer_address != msg.sender, \"Cannot refer yourself\");\r\n        require(!isRegistered[msg.sender], \"User is already registered\");\r\n        require(isRegistered[refer_address], \"Invaild referral address\");\r\n\r\n        User memory user = User({referral_address: refer_address});\r\n        userRegister[msg.sender] = user;\r\n        isRegistered[msg.sender] = true;\r\n    }\r\n\r\n    function BuyAltroz(uint256 _usdtamount) external {\r\n        require(isRegistered[msg.sender], \"User is not belongs to system\");\r\n        require(_usdtamount > 0, \"Zero is not allowed to deposit\");\r\n\r\n        //liquidity transfer percent\r\n        uint256 liquidityperamount = (_usdtamount.mul(liquidPercent)).div(\r\n            100e18\r\n        );\r\n        IBEP20(depositToken).transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            liquidityperamount\r\n        );\r\n\r\n        // //direct referral percentage\r\n        // address currentReferrer = userRegister[msg.sender].referral_address;\r\n        // uint256 directpercentamount = (_usdtamount.mul(directPercent)).div(\r\n        //     100e18\r\n        // );\r\n        // IBEP20(depositToken).transferFrom(\r\n        //     msg.sender,\r\n        //     currentReferrer,\r\n        //     directpercentamount\r\n        // );\r\n\r\n        // direct referral and multi-level referral percentage\r\n        distributeReferral(msg.sender, _usdtamount);\r\n\r\n        //Admin percentage\r\n        uint256 adminperamount = (_usdtamount.mul(adminPercent)).div(100e18);\r\n        //   IBEP20(depositToken).transferFrom(msg.sender,admin_fee_address,adminperamount);\r\n        IBEP20(depositToken).transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            adminperamount\r\n        );\r\n\r\n        uint256 rollex_amount_admin = (altroz_rate).div(1e18).mul(\r\n            adminperamount\r\n        );\r\n        _mint(admin_fee_address, rollex_amount_admin);\r\n\r\n        //contract percentage\r\n        uint256 contractperamount = (_usdtamount.mul(contractpercent)).div(\r\n            100e18\r\n        );\r\n        IBEP20(depositToken).transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            contractperamount\r\n        );\r\n\r\n        //Token mint percentage\r\n        uint256 rollex_amount = (altroz_rate).div(1e18).mul(contractperamount);\r\n        uint256 deduct_amt = rollex_amount.mul(10e18).div(100e18);\r\n        _mint(admin_fee_address, deduct_amt);\r\n        uint256 remaining_amt = rollex_amount.sub(deduct_amt);\r\n        _mint(msg.sender, remaining_amt);\r\n\r\n        totalCollection = totalCollection + _usdtamount;\r\n\r\n        Buyhistory memory userbuy = Buyhistory({\r\n            buy_amt: _usdtamount,\r\n            // directreferral_amt: directpercentamount,\r\n            usertransfer_amt: rollex_amount,\r\n            liquidity_amt: liquidityperamount,\r\n            admin_amt: adminperamount\r\n        });\r\n        buyRecord[msg.sender] = userbuy;\r\n        TotalUsdtAmount = TotalUsdtAmount.add(_usdtamount);\r\n        altroz_rate = totalCollection.mul(1 ether).div(_totalSupply);\r\n        emit Userbuy(msg.sender, _usdtamount);\r\n    }\r\n\r\n    // Define the referral percentages for each level\r\n    uint256[5] public referralPercentages = [5e18, 4e18, 2e18, 2e18, 2e18];\r\n\r\n    function distributeReferral(address user, uint256 amount) internal {\r\n        address currentReferrer = userRegister[user].referral_address;\r\n\r\n        for (uint256 i = 0; i < 5 && currentReferrer != address(0); i++) {\r\n            uint256 referralAmount = (amount.mul(referralPercentages[i])).div(\r\n                100e18\r\n            );\r\n            IBEP20(depositToken).transferFrom(\r\n                user,\r\n                currentReferrer,\r\n                referralAmount\r\n            );\r\n\r\n            currentReferrer = userRegister[currentReferrer].referral_address;\r\n        }\r\n    }\r\n\r\n    function sellAltroz(uint256 tokenAmount) public {\r\n        //user Transfer\r\n        uint256 usdtamount = (tokenAmount.mul(90e18)).div(100e18);\r\n        uint256 usdtconvert = usdtamount.mul(altroz_rate).div(1e18);\r\n        IBEP20(depositToken).transfer(msg.sender, usdtconvert);\r\n\r\n        //Burn 95 % of the supply\r\n        uint256 burnAmount = (tokenAmount.mul(95e18)).div(100e18);\r\n        _burn(msg.sender, burnAmount);\r\n\r\n        // transfer 5 % to given address \r\n\r\n        uint256 transferAmount = tokenAmount.sub(burnAmount);\r\n        _transfer(msg.sender, admin_fee_address, transferAmount);\r\n\r\n        //Admin Transfer\r\n        uint256 adminpercent = (tokenAmount.mul(adminPercent)).div(100e18);\r\n        uint256 usdtconvertadmin = adminpercent.mul(altroz_rate).div(1e18);\r\n        IBEP20(depositToken).transfer(address(this), usdtconvertadmin);\r\n\r\n        Sellhistory memory usersell = Sellhistory({\r\n            sell_amt: tokenAmount,\r\n            admin_amt: usdtconvertadmin,\r\n            usertransfer_amt: usdtconvert\r\n        });\r\n        sellRecord[msg.sender] = usersell;\r\n        TotalUsdtAmount = TotalUsdtAmount.sub(usdtconvert);\r\n        totalCollection = totalCollection.sub(usdtconvert);\r\n\r\n        //update rollex rate\r\n        altroz_rate = totalCollection.mul(1 ether).div(_totalSupply);\r\n        emit Burn(msg.sender, tokenAmount);\r\n    }\r\n\r\n    function withdrawether(address payable recevier, uint256 amount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        recevier.transfer(amount);\r\n    }\r\n\r\n    function changeBuyPercent(\r\n        // uint256 _dpercent,\r\n        uint256 _liquidPercent,\r\n        uint256 _adminPercent,\r\n        uint256 _contractpercent\r\n    ) public onlyOwner {\r\n        // directPercent = _dpercent;\r\n        liquidPercent = _liquidPercent;\r\n        adminPercent = _adminPercent;\r\n        contractpercent = _contractpercent;\r\n    }\r\n\r\n    function changeAddress(address _admin_fee_address) public onlyOwner {\r\n        admin_fee_address = _admin_fee_address;\r\n    }\r\n\r\n    function changePricerate(uint256 _rollexrate) public onlyOwner {\r\n        altroz_rate = _rollexrate;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_depositTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin_fee_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"Userbuy\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdtamount\",\"type\":\"uint256\"}],\"name\":\"BuyAltroz\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalUsdtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"altroz_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyRecord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buy_amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usertransfer_amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity_amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"admin_amt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin_fee_address\",\"type\":\"address\"}],\"name\":\"changeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_adminPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_contractpercent\",\"type\":\"uint256\"}],\"name\":\"changeBuyPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rollexrate\",\"type\":\"uint256\"}],\"name\":\"changePricerate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractpercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referralPercentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"refer_address\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"sellAltroz\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellRecord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sell_amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"admin_amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usertransfer_amt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRegister\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referral_address\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recevier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawether\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recevier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraworbttoken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"withdrawtoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawusdtToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Altroz", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000007c9a054aea3ba0af43cecf732fe5ae7a6b89a87a", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f6519f3c728a2b1cc775550815f78679c5beebaf5ccb8234e7b5966ad405cb9d"}