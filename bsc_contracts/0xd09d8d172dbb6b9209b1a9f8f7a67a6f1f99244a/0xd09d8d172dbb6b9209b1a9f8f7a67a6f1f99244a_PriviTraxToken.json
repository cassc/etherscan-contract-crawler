{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2021-08-04\r\n*/\r\n\r\n// File: contracts/BEP20TokenWhitelisted.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n    * @dev Returns the token name.\r\n    */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ncontract LGEWhitelisted is Context {\r\n    struct WhitelistRound {\r\n        uint256 duration;\r\n        uint256 amountMax;\r\n        mapping(address => bool) addresses;\r\n        mapping(address => uint256) purchased;\r\n    }\r\n\r\n    WhitelistRound[] public _lgeWhitelistRounds;\r\n\r\n    uint256 public _lgeTimestamp;\r\n    address public _lgePairAddress;\r\n\r\n    address public _whitelister;\r\n\r\n    event WhitelisterTransferred(address indexed previousWhitelister, address indexed newWhitelister);\r\n\r\n    constructor() {\r\n        _whitelister = _msgSender();\r\n    }\r\n\r\n    modifier onlyWhitelister() {\r\n        require(_whitelister == _msgSender(), \"Caller is not the whitelister\");\r\n        _;\r\n    }\r\n\r\n    function renounceWhitelister() external onlyWhitelister {\r\n        emit WhitelisterTransferred(_whitelister, address(0));\r\n        _whitelister = address(0);\r\n    }\r\n\r\n    function transferWhitelister(address newWhitelister) external onlyWhitelister {\r\n        _transferWhitelister(newWhitelister);\r\n    }\r\n\r\n    function _transferWhitelister(address newWhitelister) internal {\r\n        require(newWhitelister != address(0), \"New whitelister is the zero address\");\r\n        emit WhitelisterTransferred(_whitelister, newWhitelister);\r\n        _whitelister = newWhitelister;\r\n    }\r\n\r\n    /*\r\n     * createLGEWhitelist - Call this after initial Token Generation Event (TGE)\r\n     *\r\n     * pairAddress - address generated from createPair() event on DEX\r\n     * durations - array of durations (seconds) for each whitelist rounds\r\n     * amountsMax - array of max amounts (TOKEN decimals) for each whitelist round\r\n     *\r\n     */\r\n\r\n    function createLGEWhitelist(\r\n        address pairAddress,\r\n        uint256[] calldata durations,\r\n        uint256[] calldata amountsMax\r\n    ) external onlyWhitelister() {\r\n        require(durations.length == amountsMax.length, \"Invalid whitelist(s)\");\r\n\r\n        _lgePairAddress = pairAddress;\r\n\r\n        if (durations.length > 0) {\r\n            delete _lgeWhitelistRounds;\r\n\r\n            for (uint256 i = 0; i < durations.length; i++) {\r\n                WhitelistRound storage whitelistRound = _lgeWhitelistRounds.push();\r\n                whitelistRound.duration = durations[i];\r\n                whitelistRound.amountMax = amountsMax[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n     * modifyLGEWhitelistAddresses - Define what addresses are included/excluded from a whitelist round\r\n     *\r\n     * index - 0-based index of round to modify whitelist\r\n     * duration - period in seconds from LGE event or previous whitelist round\r\n     * amountMax - max amount (TOKEN decimals) for each whitelist round\r\n     *\r\n     */\r\n\r\n    function modifyLGEWhitelist(\r\n        uint256 index,\r\n        uint256 duration,\r\n        uint256 amountMax,\r\n        address[] calldata addresses,\r\n        bool enabled\r\n    ) external onlyWhitelister() {\r\n        require(index < _lgeWhitelistRounds.length, \"Invalid index\");\r\n        require(amountMax > 0, \"Invalid amountMax\");\r\n\r\n        if (duration != _lgeWhitelistRounds[index].duration) _lgeWhitelistRounds[index].duration = duration;\r\n\r\n        if (amountMax != _lgeWhitelistRounds[index].amountMax) _lgeWhitelistRounds[index].amountMax = amountMax;\r\n\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            _lgeWhitelistRounds[index].addresses[addresses[i]] = enabled;\r\n        }\r\n    }\r\n\r\n    /*\r\n     *  getLGEWhitelistRound\r\n     *\r\n     *  returns:\r\n     *\r\n     *  1. whitelist round number ( 0 = no active round now )\r\n     *  2. duration, in seconds, current whitelist round is active for\r\n     *  3. timestamp current whitelist round closes at\r\n     *  4. maximum amount a whitelister can purchase in this round\r\n     *  5. is caller whitelisted\r\n     *  6. how much caller has purchased in current whitelist round\r\n     *\r\n     */\r\n\r\n    function getLGEWhitelistRound()\r\n    public\r\n    view\r\n    returns (\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        bool,\r\n        uint256\r\n    )\r\n    {\r\n        if (_lgeTimestamp > 0) {\r\n            uint256 wlCloseTimestampLast = _lgeTimestamp;\r\n\r\n            for (uint256 i = 0; i < _lgeWhitelistRounds.length; i++) {\r\n                WhitelistRound storage wlRound = _lgeWhitelistRounds[i];\r\n\r\n                wlCloseTimestampLast = wlCloseTimestampLast + wlRound.duration;\r\n                if (block.timestamp <= wlCloseTimestampLast)\r\n                    return (\r\n                    i + 1,\r\n                    wlRound.duration,\r\n                    wlCloseTimestampLast,\r\n                    wlRound.amountMax,\r\n                    wlRound.addresses[_msgSender()],\r\n                    wlRound.purchased[_msgSender()]\r\n                    );\r\n            }\r\n        }\r\n\r\n        return (0, 0, 0, 0, false, 0);\r\n    }\r\n\r\n    /*\r\n     * _applyLGEWhitelist - internal function to be called initially before any transfers\r\n     *\r\n     */\r\n\r\n    function _applyLGEWhitelist(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        if (_lgePairAddress == address(0) || _lgeWhitelistRounds.length == 0) return;\r\n\r\n        if (_lgeTimestamp == 0 && sender != _lgePairAddress && recipient == _lgePairAddress && amount > 0)\r\n            _lgeTimestamp = block.timestamp;\r\n\r\n        if (sender == _lgePairAddress && recipient != _lgePairAddress) {\r\n            //buying\r\n\r\n            (uint256 wlRoundNumber, , , , , ) = getLGEWhitelistRound();\r\n\r\n            if (wlRoundNumber > 0) {\r\n                WhitelistRound storage wlRound = _lgeWhitelistRounds[wlRoundNumber - 1];\r\n\r\n                require(wlRound.addresses[recipient], \"LGE - Buyer is not whitelisted\");\r\n\r\n                uint256 amountRemaining = 0;\r\n\r\n                if (wlRound.purchased[recipient] < wlRound.amountMax)\r\n                    amountRemaining = wlRound.amountMax - wlRound.purchased[recipient];\r\n\r\n                require(amount <= amountRemaining, \"LGE - Amount exceeds whitelist maximum\");\r\n                wlRound.purchased[recipient] = wlRound.purchased[recipient] + amount;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// Exempt from the original UniswapV2Library.\r\nlibrary UniswapV2Library {\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(bytes32 initCodeHash, address factory, address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint160(uint(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                initCodeHash // init code hash\r\n            )))));\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/// @notice based on https://github.com/Uniswap/uniswap-v3-periphery/blob/v1.0.0/contracts/libraries/PoolAddress.sol\r\n/// @notice changed compiler version and lib name.\r\n\r\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\r\nlibrary UniswapV3Library {\r\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\r\n\r\n    /// @notice The identifying key of the pool\r\n    struct PoolKey {\r\n        address token0;\r\n        address token1;\r\n        uint24 fee;\r\n    }\r\n\r\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\r\n    /// @param tokenA The first token of a pool, unsorted\r\n    /// @param tokenB The second token of a pool, unsorted\r\n    /// @param fee The fee level of the pool\r\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\r\n    function getPoolKey(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) internal pure returns (PoolKey memory) {\r\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\r\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\r\n    }\r\n\r\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\r\n    /// @param factory The Uniswap V3 factory contract address\r\n    /// @param key The PoolKey\r\n    /// @return pool The contract address of the V3 pool\r\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\r\n        require(key.token0 < key.token1);\r\n        pool = address(\r\n            uint160(\r\n                uint256(\r\n                    keccak256(\r\n                        abi.encodePacked(\r\n                            hex'ff',\r\n                            factory,\r\n                            keccak256(abi.encode(key.token0, key.token1, key.fee)),\r\n                            POOL_INIT_CODE_HASH\r\n                        )\r\n                    )\r\n                )\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IPLPS {\r\n    function LiquidityProtection_beforeTokenTransfer(\r\n        address _pool, address _from, address _to, uint _amount) external;\r\n    function isBlocked(address _pool, address _who) external view returns(bool);\r\n    function unblock(address _pool, address _who) external;\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract UsingLiquidityProtectionService {\r\n    bool private unProtected = false;\r\n    IPLPS private plps;\r\n    uint64 internal constant HUNDRED_PERCENT = 1e18;\r\n    bytes32 internal constant UNISWAP = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f;\r\n    bytes32 internal constant PANCAKESWAP = 0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5;\r\n    bytes32 internal constant QUICKSWAP = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f;\r\n\r\n    enum UniswapVersion {\r\n        V2,\r\n        V3\r\n    }\r\n\r\n    enum UniswapV3Fees {\r\n        _005, // 0.05%\r\n        _03, // 0.3%\r\n        _1 // 1%\r\n    }\r\n\r\n    modifier onlyProtectionAdmin() {\r\n        protectionAdminCheck();\r\n        _;\r\n    }\r\n\r\n    constructor (address _plps) {\r\n        plps = IPLPS(_plps);\r\n    }\r\n\r\n    function LiquidityProtection_setLiquidityProtectionService(IPLPS _plps) external onlyProtectionAdmin() {\r\n        plps = _plps;\r\n    }\r\n\r\n    function token_transfer(address from, address to, uint amount) internal virtual;\r\n    function token_balanceOf(address holder) internal view virtual returns(uint);\r\n    function protectionAdminCheck() internal view virtual;\r\n    function uniswapVariety() internal pure virtual returns(bytes32);\r\n    function uniswapVersion() internal pure virtual returns(UniswapVersion);\r\n    function uniswapFactory() internal pure virtual returns(address);\r\n    function counterToken() internal pure virtual returns(address) {\r\n        return 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // WETH\r\n    }\r\n    function uniswapV3Fee() internal pure virtual returns(UniswapV3Fees) {\r\n        return UniswapV3Fees._03;\r\n    }\r\n    function protectionChecker() internal view virtual returns(bool) {\r\n        return ProtectionSwitch_manual();\r\n    }\r\n\r\n    function lps() private view returns(IPLPS) {\r\n        return plps;\r\n    }\r\n\r\n    function LiquidityProtection_beforeTokenTransfer(address _from, address _to, uint _amount) internal virtual {\r\n        if (protectionChecker()) {\r\n            if (unProtected) {\r\n                return;\r\n            }\r\n            lps().LiquidityProtection_beforeTokenTransfer(getLiquidityPool(), _from, _to, _amount);\r\n        }\r\n    }\r\n\r\n    function revokeBlocked(address[] calldata _holders, address _revokeTo) external onlyProtectionAdmin() {\r\n        require(protectionChecker(), 'UsingLiquidityProtectionService: protection removed');\r\n        unProtected = true;\r\n        address pool = getLiquidityPool();\r\n        for (uint i = 0; i < _holders.length; i++) {\r\n            address holder = _holders[i];\r\n            if (lps().isBlocked(pool, holder)) {\r\n                token_transfer(holder, _revokeTo, token_balanceOf(holder));\r\n            }\r\n        }\r\n        unProtected = false;\r\n    }\r\n\r\n    function LiquidityProtection_unblock(address[] calldata _holders) external onlyProtectionAdmin() {\r\n        require(protectionChecker(), 'UsingLiquidityProtectionService: protection removed');\r\n        address pool = getLiquidityPool();\r\n        for (uint i = 0; i < _holders.length; i++) {\r\n            lps().unblock(pool, _holders[i]);\r\n        }\r\n    }\r\n\r\n    function disableProtection() external onlyProtectionAdmin() {\r\n        unProtected = true;\r\n    }\r\n\r\n    function isProtected() public view returns(bool) {\r\n        return not(unProtected);\r\n    }\r\n\r\n    function ProtectionSwitch_manual() internal view returns(bool) {\r\n        return isProtected();\r\n    }\r\n\r\n    function ProtectionSwitch_timestamp(uint _timestamp) internal view returns(bool) {\r\n        return not(passed(_timestamp));\r\n    }\r\n\r\n    function ProtectionSwitch_block(uint _block) internal view returns(bool) {\r\n        return not(blockPassed(_block));\r\n    }\r\n\r\n    function blockPassed(uint _block) internal view returns(bool) {\r\n        return _block < block.number;\r\n    }\r\n\r\n    function passed(uint _timestamp) internal view returns(bool) {\r\n        return _timestamp < block.timestamp;\r\n    }\r\n\r\n    function not(bool _condition) internal pure returns(bool) {\r\n        return !_condition;\r\n    }\r\n\r\n    function feeToUint24(UniswapV3Fees _fee) internal pure returns(uint24) {\r\n        if (_fee == UniswapV3Fees._03) return 3000;\r\n        if (_fee == UniswapV3Fees._005) return 500;\r\n        return 10000;\r\n    }\r\n\r\n    function getLiquidityPool() public view returns(address) {\r\n        if (uniswapVersion() == UniswapVersion.V2) {\r\n            return UniswapV2Library.pairFor(uniswapVariety(), uniswapFactory(), address(this), counterToken());\r\n        }\r\n        require(uniswapVariety() == UNISWAP, 'LiquidityProtection: uniswapVariety() can only be UNISWAP for V3.');\r\n        return UniswapV3Library.computeAddress(uniswapFactory(),\r\n            UniswapV3Library.getPoolKey(address(this), counterToken(), feeToUint24(uniswapV3Fee())));\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract PriviTraxToken is Context, IBEP20, Ownable, LGEWhitelisted, UsingLiquidityProtectionService(0xB59Dfc14D2037e3c4BF9C4FC1219f941E36De3e2) {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    uint8 private _decimals;\r\n    string private _symbol;\r\n    string private _name;\r\n\r\n    constructor() {\r\n        _name = \"Privi Trax\";\r\n        _symbol = \"TRAX\";\r\n        _decimals = 18;\r\n        _totalSupply = 100000000 * 10 ** 18;\r\n        _balances[_msgSender()] = _totalSupply;\r\n\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the bep token owner.\r\n    */\r\n    function getOwner() external view override returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the token decimals.\r\n    */\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the token symbol.\r\n    */\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the token name.\r\n    */\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n    * @dev See {BEP20-totalSupply}.\r\n    */\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev See {BEP20-balanceOf}.\r\n    */\r\n    function balanceOf(address account) external view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n    * @dev See {BEP20-transfer}.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `recipient` cannot be the zero address.\r\n    * - the caller must have a balance of at least `amount`.\r\n    */\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev See {BEP20-allowance}.\r\n    */\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev See {BEP20-approve}.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `spender` cannot be the zero address.\r\n    */\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev See {BEP20-transferFrom}.\r\n    *\r\n    * Emits an {Approval} event indicating the updated allowance. This is not\r\n    * required by the EIP. See the note at the beginning of {BEP20};\r\n    *\r\n    * Requirements:\r\n    * - `sender` and `recipient` cannot be the zero address.\r\n    * - `sender` must have a balance of at least `amount`.\r\n    * - the caller must have allowance for `sender`'s tokens of at least\r\n    * `amount`.\r\n    */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n    *\r\n    * This is an alternative to {approve} that can be used as a mitigation for\r\n    * problems described in {BEP20-approve}.\r\n    *\r\n    * Emits an {Approval} event indicating the updated allowance.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `spender` cannot be the zero address.\r\n    */\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n    *\r\n    * This is an alternative to {approve} that can be used as a mitigation for\r\n    * problems described in {BEP20-approve}.\r\n    *\r\n    * Emits an {Approval} event indicating the updated allowance.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `spender` cannot be the zero address.\r\n    * - `spender` must have allowance for the caller of at least\r\n    * `subtractedValue`.\r\n    */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n    *\r\n    * This is internal function is equivalent to {transfer}, and can be used to\r\n    * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n    *\r\n    * Emits a {Transfer} event.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `sender` cannot be the zero address.\r\n    * - `recipient` cannot be the zero address.\r\n    * - `sender` must have a balance of at least `amount`.\r\n    */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _applyLGEWhitelist(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n    *\r\n    * This is internal function is equivalent to `approve`, and can be used to\r\n    * e.g. set automatic allowances for certain subsystems, etc.\r\n    *\r\n    * Emits an {Approval} event.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `owner` cannot be the zero address.\r\n    * - `spender` cannot be the zero address.\r\n    */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function token_transfer(address _from, address _to, uint _amount) internal override {\r\n        _transfer(_from, _to, _amount); // Expose low-level token transfer function.\r\n    }\r\n\r\n    function token_balanceOf(address _holder) internal view override returns(uint) {\r\n        return _balances[_holder]; // Expose balance check function.\r\n    }\r\n    function protectionAdminCheck() internal view override onlyOwner {} // Must revert to deny access.\r\n    function uniswapVariety() internal pure override returns(bytes32) {\r\n        return PANCAKESWAP; // UNISWAP / PANCAKESWAP / QUICKSWAP.\r\n    }\r\n    function uniswapVersion() internal pure override returns(UniswapVersion) {\r\n        return UniswapVersion.V2; // V2 or V3.\r\n    }\r\n    function uniswapFactory() internal pure override returns(address) {\r\n        return 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73; // Replace with the correct address.\r\n    }\r\n    function _beforeTokenTransfer(address _from, address _to, uint _amount) internal virtual {\r\n        LiquidityProtection_beforeTokenTransfer(_from, _to, _amount);\r\n    }\r\n    // All the following overrides are optional, if you want to modify default behavior.\r\n\r\n    // How the protection gets disabled.\r\n    function protectionChecker() internal view override returns(bool) {\r\n         return ProtectionSwitch_timestamp(1630367999); // Switch off protection on Monday, August 30, 2021 11:59:59 PM GTM.\r\n        // return ProtectionSwitch_block(13000000); // Switch off protection on block 13000000.\r\n//        return ProtectionSwitch_manual(); // Switch off protection by calling disableProtection(); from owner. Default.\r\n    }\r\n\r\n    // This token will be pooled in pair with:\r\n    function counterToken() internal pure override returns(address) {\r\n        return 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c; // WBNB\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousWhitelister\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWhitelister\",\"type\":\"address\"}],\"name\":\"WhitelisterTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IPLPS\",\"name\":\"_plps\",\"type\":\"address\"}],\"name\":\"LiquidityProtection_setLiquidityProtectionService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_holders\",\"type\":\"address[]\"}],\"name\":\"LiquidityProtection_unblock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lgePairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lgeTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_lgeWhitelistRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_whitelister\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"durations\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsMax\",\"type\":\"uint256[]\"}],\"name\":\"createLGEWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLGEWhitelistRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isProtected\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"modifyLGEWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceWhitelister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_holders\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_revokeTo\",\"type\":\"address\"}],\"name\":\"revokeBlocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWhitelister\",\"type\":\"address\"}],\"name\":\"transferWhitelister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PriviTraxToken", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://31a756356b21980b8edcae14e45f6197c8b6a519824fea97fa7207c03d3c43ba"}